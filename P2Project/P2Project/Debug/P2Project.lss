
P2Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000041b4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000841b4  000841b4  000141b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af8  20070000  000841bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000022c  20070af8  00084cb4  00020af8  2**2
                  ALLOC
  4 .stack        00002004  20070d24  00084ee0  00020af8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020af8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b21  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b7ea  00000000  00000000  00020b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000410b  00000000  00000000  0003c364  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005fb1  00000000  00000000  0004046f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cd0  00000000  00000000  00046420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c60  00000000  00000000  000470f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bc55  00000000  00000000  00047d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000138c9  00000000  00000000  000639a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00069d4b  00000000  00000000  0007726e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002954  00000000  00000000  000e0fbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	28 2d 07 20 a1 0e 08 00 9d 0e 08 00 9d 0e 08 00     (-. ............
   80010:	9d 0e 08 00 9d 0e 08 00 9d 0e 08 00 00 00 00 00     ................
	...
   8002c:	b5 03 08 00 9d 0e 08 00 00 00 00 00 ed 03 08 00     ................
   8003c:	29 04 08 00 9d 0e 08 00 9d 0e 08 00 9d 0e 08 00     )...............
   8004c:	9d 0e 08 00 9d 0e 08 00 9d 0e 08 00 9d 0e 08 00     ................
   8005c:	9d 0e 08 00 9d 0e 08 00 9d 0e 08 00 00 00 00 00     ................
   8006c:	11 0d 08 00 25 0d 08 00 39 0d 08 00 4d 0d 08 00     ....%...9...M...
	...
   80084:	1d 06 08 00 9d 0e 08 00 9d 0e 08 00 9d 0e 08 00     ................
   80094:	9d 0e 08 00 9d 0e 08 00 9d 0e 08 00 9d 0e 08 00     ................
   800a4:	00 00 00 00 9d 0e 08 00 9d 0e 08 00 9d 0e 08 00     ................
   800b4:	9d 0e 08 00 9d 0e 08 00 9d 0e 08 00 9d 0e 08 00     ................
   800c4:	9d 0e 08 00 9d 0e 08 00 9d 0e 08 00 9d 0e 08 00     ................
   800d4:	9d 0e 08 00 9d 0e 08 00 9d 0e 08 00 9d 0e 08 00     ................
   800e4:	9d 0e 08 00 9d 0e 08 00 9d 0e 08 00 9d 0e 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070af8 	.word	0x20070af8
   80110:	00000000 	.word	0x00000000
   80114:	000841bc 	.word	0x000841bc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000841bc 	.word	0x000841bc
   80154:	20070afc 	.word	0x20070afc
   80158:	000841bc 	.word	0x000841bc
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	20070cf8 	.word	0x20070cf8
   80198:	20070cf0 	.word	0x20070cf0

0008019c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8019c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8019e:	0189      	lsls	r1, r1, #6
   801a0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   801a2:	2402      	movs	r4, #2
   801a4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   801a6:	f04f 31ff 	mov.w	r1, #4294967295
   801aa:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   801ac:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   801ae:	605a      	str	r2, [r3, #4]
}
   801b0:	bc10      	pop	{r4}
   801b2:	4770      	bx	lr

000801b4 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   801b4:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   801b8:	4770      	bx	lr

000801ba <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   801ba:	0189      	lsls	r1, r1, #6
   801bc:	2302      	movs	r3, #2
   801be:	5043      	str	r3, [r0, r1]
   801c0:	4770      	bx	lr
	...

000801c4 <delayInit>:
#include "asf.h"
#include "DelayFunctions.h"


int delayInit(void)		/* Initializes the timer used for delays */
{
   801c4:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC3);	/* power on the peripheral clock for timers */
   801c6:	201e      	movs	r0, #30
   801c8:	4b08      	ldr	r3, [pc, #32]	; (801ec <delayInit+0x28>)
   801ca:	4798      	blx	r3
	tc_init(TC1,0,0);				/* TC1, channel 0, TCLK1 och capturemode */
   801cc:	4c08      	ldr	r4, [pc, #32]	; (801f0 <delayInit+0x2c>)
   801ce:	2200      	movs	r2, #0
   801d0:	4611      	mov	r1, r2
   801d2:	4620      	mov	r0, r4
   801d4:	4b07      	ldr	r3, [pc, #28]	; (801f4 <delayInit+0x30>)
   801d6:	4798      	blx	r3
	tc_set_block_mode(TC1,0);
   801d8:	2100      	movs	r1, #0
   801da:	4620      	mov	r0, r4
   801dc:	4b06      	ldr	r3, [pc, #24]	; (801f8 <delayInit+0x34>)
   801de:	4798      	blx	r3
	tc_stop(TC1,0);					/* making sure the timer does not run  */
   801e0:	2100      	movs	r1, #0
   801e2:	4620      	mov	r0, r4
   801e4:	4b05      	ldr	r3, [pc, #20]	; (801fc <delayInit+0x38>)
   801e6:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   801e8:	2000      	movs	r0, #0
   801ea:	bd10      	pop	{r4, pc}
   801ec:	00080e49 	.word	0x00080e49
   801f0:	40084000 	.word	0x40084000
   801f4:	0008019d 	.word	0x0008019d
   801f8:	000801b5 	.word	0x000801b5
   801fc:	000801bb 	.word	0x000801bb

00080200 <Twi_master_init>:
#include "TWI.h"
/* this function initiates the master Due
* TWI1 are used for the master
* enables TWI pios
*/
void Twi_master_init(Twi* pTWI){
   80200:	b510      	push	{r4, lr}
   80202:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_TWI1); /* power the clock for the TWI with pmc */
   80204:	2017      	movs	r0, #23
   80206:	4b14      	ldr	r3, [pc, #80]	; (80258 <Twi_master_init+0x58>)
   80208:	4798      	blx	r3

	PIOB->PIO_PDR|= (PIO_PB12)|(PIO_PB13);	/* Enable TWI pios */
   8020a:	4a14      	ldr	r2, [pc, #80]	; (8025c <Twi_master_init+0x5c>)
   8020c:	6853      	ldr	r3, [r2, #4]
   8020e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   80212:	6053      	str	r3, [r2, #4]
	pTWI->TWI_CR = (0x1u << 7);				// TWIn software reset
   80214:	2380      	movs	r3, #128	; 0x80
   80216:	6023      	str	r3, [r4, #0]
	pTWI->TWI_RHR;							// Flush reception buffer
   80218:	6b23      	ldr	r3, [r4, #48]	; 0x30
	/* Set Master Disable bit and Slave Disable bit */
	pTWI->TWI_CR = TWI_CR_MSDIS;
   8021a:	2308      	movs	r3, #8
   8021c:	6023      	str	r3, [r4, #0]
	pTWI->TWI_CR = TWI_CR_SVDIS;
   8021e:	2320      	movs	r3, #32
   80220:	6023      	str	r3, [r4, #0]
	pTWI->TWI_CR |= (0x1u << 2);			/* Set Master Enable bit */
   80222:	6823      	ldr	r3, [r4, #0]
   80224:	f043 0304 	orr.w	r3, r3, #4
   80228:	6023      	str	r3, [r4, #0]
	pTWI->TWI_MMR |= TWI_MMR_DADR(unoAddress);//device address
   8022a:	6863      	ldr	r3, [r4, #4]
   8022c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   80230:	6063      	str	r3, [r4, #4]
	pTWI->TWI_PTCR |= (0x1u << 0)|(0x1u << 8);//Receiver/transmitter Transfer Enable 
   80232:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   80236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8023a:	f043 0301 	orr.w	r3, r3, #1
   8023e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	pTWI->TWI_IDR = ~0UL;					/* Disable TWI interrupts */
   80242:	f04f 33ff 	mov.w	r3, #4294967295
   80246:	62a3      	str	r3, [r4, #40]	; 0x28
	pTWI->TWI_CWGR |= I2C_SPEED;
   80248:	6923      	ldr	r3, [r4, #16]
   8024a:	f443 33c3 	orr.w	r3, r3, #99840	; 0x18600
   8024e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
   80252:	6123      	str	r3, [r4, #16]
   80254:	bd10      	pop	{r4, pc}
   80256:	bf00      	nop
   80258:	00080e49 	.word	0x00080e49
   8025c:	400e1000 	.word	0x400e1000

00080260 <I2C_mk_addr>:
 */
 uint32_t I2C_mk_addr(const uint8_t *addr, int len)
 {
 uint32_t val;

 if (len == 0)
   80260:	460a      	mov	r2, r1
   80262:	b159      	cbz	r1, 8027c <I2C_mk_addr+0x1c>
 return 0;

 val = addr[0];
   80264:	7803      	ldrb	r3, [r0, #0]
 if (len > 1) {
   80266:	2901      	cmp	r1, #1
 val <<= 8;
 val |= addr[1];
   80268:	bfc4      	itt	gt
   8026a:	7841      	ldrbgt	r1, [r0, #1]
   8026c:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
 }
 if (len > 2) {
   80270:	2a02      	cmp	r2, #2
   80272:	dd04      	ble.n	8027e <I2C_mk_addr+0x1e>
 val <<= 8;
 val |= addr[2];
   80274:	7882      	ldrb	r2, [r0, #2]
   80276:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   8027a:	e000      	b.n	8027e <I2C_mk_addr+0x1e>
 return 0;
   8027c:	2300      	movs	r3, #0
 }
 return val;
 }
   8027e:	4618      	mov	r0, r3
   80280:	4770      	bx	lr
	...

00080284 <I2C_master_read>:
{
   80284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
   80286:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
   80288:	2c00      	cmp	r4, #0
   8028a:	d04f      	beq.n	8032c <I2C_master_read+0xa8>
   8028c:	460b      	mov	r3, r1
   8028e:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
   80290:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
   80292:	2000      	movs	r0, #0
   80294:	6068      	str	r0, [r5, #4]
	((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   80296:	684a      	ldr	r2, [r1, #4]
   80298:	0212      	lsls	r2, r2, #8
   8029a:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8029e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   802a2:	7c09      	ldrb	r1, [r1, #16]
   802a4:	0409      	lsls	r1, r1, #16
   802a6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
   802aa:	430a      	orrs	r2, r1
   802ac:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
   802ae:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = I2C_mk_addr(p_packet->addr, p_packet->addr_length);
   802b0:	6859      	ldr	r1, [r3, #4]
   802b2:	4618      	mov	r0, r3
   802b4:	4b22      	ldr	r3, [pc, #136]	; (80340 <I2C_master_read+0xbc>)
   802b6:	4798      	blx	r3
   802b8:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
   802ba:	2c01      	cmp	r4, #1
   802bc:	d00f      	beq.n	802de <I2C_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
   802be:	2301      	movs	r3, #1
   802c0:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
   802c2:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
   802c4:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   802c6:	f413 7f80 	tst.w	r3, #256	; 0x100
   802ca:	d136      	bne.n	8033a <I2C_master_read+0xb6>
   802cc:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
   802d0:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
   802d4:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
   802d8:	f04f 0c02 	mov.w	ip, #2
   802dc:	e019      	b.n	80312 <I2C_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   802de:	2303      	movs	r3, #3
   802e0:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
   802e2:	2001      	movs	r0, #1
   802e4:	e7ee      	b.n	802c4 <I2C_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
   802e6:	460a      	mov	r2, r1
   802e8:	4670      	mov	r0, lr
   802ea:	e00c      	b.n	80306 <I2C_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
   802ec:	b908      	cbnz	r0, 802f2 <I2C_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
   802ee:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
   802f2:	f013 0f02 	tst.w	r3, #2
   802f6:	d0f6      	beq.n	802e6 <I2C_master_read+0x62>
   802f8:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
   802fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   802fc:	7033      	strb	r3, [r6, #0]
		cnt--;
   802fe:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
   80300:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
   80302:	463a      	mov	r2, r7
	while (cnt > 0) {
   80304:	b164      	cbz	r4, 80320 <I2C_master_read+0x9c>
		status = p_twi->TWI_SR;
   80306:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   80308:	f413 7f80 	tst.w	r3, #256	; 0x100
   8030c:	d111      	bne.n	80332 <I2C_master_read+0xae>
		if (!timeout--) {
   8030e:	1e51      	subs	r1, r2, #1
   80310:	b18a      	cbz	r2, 80336 <I2C_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
   80312:	2c01      	cmp	r4, #1
   80314:	d0ea      	beq.n	802ec <I2C_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
   80316:	f013 0f02 	tst.w	r3, #2
   8031a:	d1ee      	bne.n	802fa <I2C_master_read+0x76>
   8031c:	460a      	mov	r2, r1
   8031e:	e7f1      	b.n	80304 <I2C_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80320:	6a2b      	ldr	r3, [r5, #32]
   80322:	f013 0f01 	tst.w	r3, #1
   80326:	d0fb      	beq.n	80320 <I2C_master_read+0x9c>
	p_twi->TWI_SR;
   80328:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
   8032a:	e000      	b.n	8032e <I2C_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
   8032c:	2401      	movs	r4, #1
}
   8032e:	4620      	mov	r0, r4
   80330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
   80332:	2405      	movs	r4, #5
   80334:	e7fb      	b.n	8032e <I2C_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
   80336:	2409      	movs	r4, #9
   80338:	e7f9      	b.n	8032e <I2C_master_read+0xaa>
			return TWI_RECEIVE_NACK;
   8033a:	2405      	movs	r4, #5
   8033c:	e7f7      	b.n	8032e <I2C_master_read+0xaa>
   8033e:	bf00      	nop
   80340:	00080261 	.word	0x00080261

00080344 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80344:	6943      	ldr	r3, [r0, #20]
   80346:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8034a:	bf1d      	ittte	ne
   8034c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80350:	61c1      	strne	r1, [r0, #28]
	return 0;
   80352:	2000      	movne	r0, #0
		return 1;
   80354:	2001      	moveq	r0, #1
}
   80356:	4770      	bx	lr

00080358 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80358:	6943      	ldr	r3, [r0, #20]
   8035a:	f013 0f01 	tst.w	r3, #1
   8035e:	d005      	beq.n	8036c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80360:	6983      	ldr	r3, [r0, #24]
   80362:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80366:	600b      	str	r3, [r1, #0]

	return 0;
   80368:	2000      	movs	r0, #0
   8036a:	4770      	bx	lr
		return 1;
   8036c:	2001      	movs	r0, #1
}
   8036e:	4770      	bx	lr

00080370 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80370:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80372:	685a      	ldr	r2, [r3, #4]
   80374:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80376:	6842      	ldr	r2, [r0, #4]
   80378:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8037a:	685a      	ldr	r2, [r3, #4]
   8037c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8037e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80380:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80382:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80384:	6803      	ldr	r3, [r0, #0]
   80386:	3301      	adds	r3, #1
   80388:	6003      	str	r3, [r0, #0]
   8038a:	4770      	bx	lr

0008038c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8038c:	6843      	ldr	r3, [r0, #4]
   8038e:	6882      	ldr	r2, [r0, #8]
   80390:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80392:	6883      	ldr	r3, [r0, #8]
   80394:	6842      	ldr	r2, [r0, #4]
   80396:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80398:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8039a:	685a      	ldr	r2, [r3, #4]
   8039c:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8039e:	bf04      	itt	eq
   803a0:	6882      	ldreq	r2, [r0, #8]
   803a2:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   803a4:	2200      	movs	r2, #0
   803a6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   803a8:	681a      	ldr	r2, [r3, #0]
   803aa:	3a01      	subs	r2, #1
   803ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   803ae:	6818      	ldr	r0, [r3, #0]
}
   803b0:	4770      	bx	lr
	...

000803b4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   803b4:	4b06      	ldr	r3, [pc, #24]	; (803d0 <pxCurrentTCBConst2>)
   803b6:	6819      	ldr	r1, [r3, #0]
   803b8:	6808      	ldr	r0, [r1, #0]
   803ba:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   803be:	f380 8809 	msr	PSP, r0
   803c2:	f04f 0000 	mov.w	r0, #0
   803c6:	f380 8811 	msr	BASEPRI, r0
   803ca:	f04e 0e0d 	orr.w	lr, lr, #13
   803ce:	4770      	bx	lr

000803d0 <pxCurrentTCBConst2>:
   803d0:	20070b14 	.word	0x20070b14

000803d4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   803d4:	f3ef 8011 	mrs	r0, BASEPRI
   803d8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   803dc:	f381 8811 	msr	BASEPRI, r1
   803e0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   803e2:	2000      	movs	r0, #0

000803e4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   803e4:	f380 8811 	msr	BASEPRI, r0
   803e8:	4770      	bx	lr
	...

000803ec <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   803ec:	f3ef 8009 	mrs	r0, PSP
   803f0:	4b0c      	ldr	r3, [pc, #48]	; (80424 <pxCurrentTCBConst>)
   803f2:	681a      	ldr	r2, [r3, #0]
   803f4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   803f8:	6010      	str	r0, [r2, #0]
   803fa:	e92d 4008 	stmdb	sp!, {r3, lr}
   803fe:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80402:	f380 8811 	msr	BASEPRI, r0
   80406:	f000 f8b9 	bl	8057c <vTaskSwitchContext>
   8040a:	f04f 0000 	mov.w	r0, #0
   8040e:	f380 8811 	msr	BASEPRI, r0
   80412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80416:	6819      	ldr	r1, [r3, #0]
   80418:	6808      	ldr	r0, [r1, #0]
   8041a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8041e:	f380 8809 	msr	PSP, r0
   80422:	4770      	bx	lr

00080424 <pxCurrentTCBConst>:
   80424:	20070b14 	.word	0x20070b14

00080428 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80428:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8042a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8042e:	4b05      	ldr	r3, [pc, #20]	; (80444 <SysTick_Handler+0x1c>)
   80430:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80432:	4b05      	ldr	r3, [pc, #20]	; (80448 <SysTick_Handler+0x20>)
   80434:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80436:	4b05      	ldr	r3, [pc, #20]	; (8044c <SysTick_Handler+0x24>)
   80438:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8043a:	2000      	movs	r0, #0
   8043c:	4b04      	ldr	r3, [pc, #16]	; (80450 <SysTick_Handler+0x28>)
   8043e:	4798      	blx	r3
   80440:	bd08      	pop	{r3, pc}
   80442:	bf00      	nop
   80444:	e000ed04 	.word	0xe000ed04
   80448:	000803d5 	.word	0x000803d5
   8044c:	00080455 	.word	0x00080455
   80450:	000803e5 	.word	0x000803e5

00080454 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80454:	4b3d      	ldr	r3, [pc, #244]	; (8054c <vTaskIncrementTick+0xf8>)
   80456:	681b      	ldr	r3, [r3, #0]
   80458:	2b00      	cmp	r3, #0
   8045a:	d16f      	bne.n	8053c <vTaskIncrementTick+0xe8>
{
   8045c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   80460:	4b3b      	ldr	r3, [pc, #236]	; (80550 <vTaskIncrementTick+0xfc>)
   80462:	681a      	ldr	r2, [r3, #0]
   80464:	3201      	adds	r2, #1
   80466:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80468:	681b      	ldr	r3, [r3, #0]
   8046a:	b9ab      	cbnz	r3, 80498 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8046c:	4b39      	ldr	r3, [pc, #228]	; (80554 <vTaskIncrementTick+0x100>)
   8046e:	681b      	ldr	r3, [r3, #0]
   80470:	681b      	ldr	r3, [r3, #0]
   80472:	2b00      	cmp	r3, #0
   80474:	d128      	bne.n	804c8 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   80476:	4b37      	ldr	r3, [pc, #220]	; (80554 <vTaskIncrementTick+0x100>)
   80478:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8047a:	4a37      	ldr	r2, [pc, #220]	; (80558 <vTaskIncrementTick+0x104>)
   8047c:	6810      	ldr	r0, [r2, #0]
   8047e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80480:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80482:	4936      	ldr	r1, [pc, #216]	; (8055c <vTaskIncrementTick+0x108>)
   80484:	680a      	ldr	r2, [r1, #0]
   80486:	3201      	adds	r2, #1
   80488:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8048a:	681b      	ldr	r3, [r3, #0]
   8048c:	681b      	ldr	r3, [r3, #0]
   8048e:	b9fb      	cbnz	r3, 804d0 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80490:	f04f 32ff 	mov.w	r2, #4294967295
   80494:	4b32      	ldr	r3, [pc, #200]	; (80560 <vTaskIncrementTick+0x10c>)
   80496:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80498:	4b2d      	ldr	r3, [pc, #180]	; (80550 <vTaskIncrementTick+0xfc>)
   8049a:	681a      	ldr	r2, [r3, #0]
   8049c:	4b30      	ldr	r3, [pc, #192]	; (80560 <vTaskIncrementTick+0x10c>)
   8049e:	681b      	ldr	r3, [r3, #0]
   804a0:	429a      	cmp	r2, r3
   804a2:	d350      	bcc.n	80546 <vTaskIncrementTick+0xf2>
   804a4:	4b2b      	ldr	r3, [pc, #172]	; (80554 <vTaskIncrementTick+0x100>)
   804a6:	681b      	ldr	r3, [r3, #0]
   804a8:	681b      	ldr	r3, [r3, #0]
   804aa:	b1cb      	cbz	r3, 804e0 <vTaskIncrementTick+0x8c>
   804ac:	4b29      	ldr	r3, [pc, #164]	; (80554 <vTaskIncrementTick+0x100>)
   804ae:	681b      	ldr	r3, [r3, #0]
   804b0:	68db      	ldr	r3, [r3, #12]
   804b2:	68dc      	ldr	r4, [r3, #12]
   804b4:	6863      	ldr	r3, [r4, #4]
   804b6:	4a26      	ldr	r2, [pc, #152]	; (80550 <vTaskIncrementTick+0xfc>)
   804b8:	6812      	ldr	r2, [r2, #0]
   804ba:	4293      	cmp	r3, r2
   804bc:	d816      	bhi.n	804ec <vTaskIncrementTick+0x98>
   804be:	4e29      	ldr	r6, [pc, #164]	; (80564 <vTaskIncrementTick+0x110>)
   804c0:	4f29      	ldr	r7, [pc, #164]	; (80568 <vTaskIncrementTick+0x114>)
   804c2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80578 <vTaskIncrementTick+0x124>
   804c6:	e02f      	b.n	80528 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   804c8:	4b28      	ldr	r3, [pc, #160]	; (8056c <vTaskIncrementTick+0x118>)
   804ca:	4798      	blx	r3
   804cc:	bf00      	nop
   804ce:	e7fd      	b.n	804cc <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   804d0:	4b20      	ldr	r3, [pc, #128]	; (80554 <vTaskIncrementTick+0x100>)
   804d2:	681b      	ldr	r3, [r3, #0]
   804d4:	68db      	ldr	r3, [r3, #12]
   804d6:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   804d8:	685a      	ldr	r2, [r3, #4]
   804da:	4b21      	ldr	r3, [pc, #132]	; (80560 <vTaskIncrementTick+0x10c>)
   804dc:	601a      	str	r2, [r3, #0]
   804de:	e7db      	b.n	80498 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   804e0:	f04f 32ff 	mov.w	r2, #4294967295
   804e4:	4b1e      	ldr	r3, [pc, #120]	; (80560 <vTaskIncrementTick+0x10c>)
   804e6:	601a      	str	r2, [r3, #0]
   804e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804ec:	4a1c      	ldr	r2, [pc, #112]	; (80560 <vTaskIncrementTick+0x10c>)
   804ee:	6013      	str	r3, [r2, #0]
   804f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804f4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   804f6:	683b      	ldr	r3, [r7, #0]
   804f8:	4298      	cmp	r0, r3
   804fa:	bf88      	it	hi
   804fc:	6038      	strhi	r0, [r7, #0]
   804fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80502:	4629      	mov	r1, r5
   80504:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80508:	4b19      	ldr	r3, [pc, #100]	; (80570 <vTaskIncrementTick+0x11c>)
   8050a:	4798      	blx	r3
   8050c:	4b11      	ldr	r3, [pc, #68]	; (80554 <vTaskIncrementTick+0x100>)
   8050e:	681b      	ldr	r3, [r3, #0]
   80510:	681b      	ldr	r3, [r3, #0]
   80512:	2b00      	cmp	r3, #0
   80514:	d0e4      	beq.n	804e0 <vTaskIncrementTick+0x8c>
   80516:	4b0f      	ldr	r3, [pc, #60]	; (80554 <vTaskIncrementTick+0x100>)
   80518:	681b      	ldr	r3, [r3, #0]
   8051a:	68db      	ldr	r3, [r3, #12]
   8051c:	68dc      	ldr	r4, [r3, #12]
   8051e:	6863      	ldr	r3, [r4, #4]
   80520:	4a0b      	ldr	r2, [pc, #44]	; (80550 <vTaskIncrementTick+0xfc>)
   80522:	6812      	ldr	r2, [r2, #0]
   80524:	4293      	cmp	r3, r2
   80526:	d8e1      	bhi.n	804ec <vTaskIncrementTick+0x98>
   80528:	1d25      	adds	r5, r4, #4
   8052a:	4628      	mov	r0, r5
   8052c:	47b0      	blx	r6
   8052e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80530:	2b00      	cmp	r3, #0
   80532:	d0df      	beq.n	804f4 <vTaskIncrementTick+0xa0>
   80534:	f104 0018 	add.w	r0, r4, #24
   80538:	47b0      	blx	r6
   8053a:	e7db      	b.n	804f4 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   8053c:	4a0d      	ldr	r2, [pc, #52]	; (80574 <vTaskIncrementTick+0x120>)
   8053e:	6813      	ldr	r3, [r2, #0]
   80540:	3301      	adds	r3, #1
   80542:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   80544:	4770      	bx	lr
   80546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8054a:	bf00      	nop
   8054c:	20070b88 	.word	0x20070b88
   80550:	20070b98 	.word	0x20070b98
   80554:	20070b18 	.word	0x20070b18
   80558:	20070b1c 	.word	0x20070b1c
   8055c:	20070b94 	.word	0x20070b94
   80560:	2007012c 	.word	0x2007012c
   80564:	0008038d 	.word	0x0008038d
   80568:	20070b8c 	.word	0x20070b8c
   8056c:	000803d5 	.word	0x000803d5
   80570:	00080371 	.word	0x00080371
   80574:	20070b84 	.word	0x20070b84
   80578:	20070b20 	.word	0x20070b20

0008057c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8057c:	4b21      	ldr	r3, [pc, #132]	; (80604 <vTaskSwitchContext+0x88>)
   8057e:	681b      	ldr	r3, [r3, #0]
   80580:	b9eb      	cbnz	r3, 805be <vTaskSwitchContext+0x42>
{
   80582:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80584:	4b20      	ldr	r3, [pc, #128]	; (80608 <vTaskSwitchContext+0x8c>)
   80586:	681b      	ldr	r3, [r3, #0]
   80588:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8058c:	009b      	lsls	r3, r3, #2
   8058e:	4a1f      	ldr	r2, [pc, #124]	; (8060c <vTaskSwitchContext+0x90>)
   80590:	58d3      	ldr	r3, [r2, r3]
   80592:	b9c3      	cbnz	r3, 805c6 <vTaskSwitchContext+0x4a>
   80594:	4b1c      	ldr	r3, [pc, #112]	; (80608 <vTaskSwitchContext+0x8c>)
   80596:	681b      	ldr	r3, [r3, #0]
   80598:	b16b      	cbz	r3, 805b6 <vTaskSwitchContext+0x3a>
   8059a:	4a1b      	ldr	r2, [pc, #108]	; (80608 <vTaskSwitchContext+0x8c>)
   8059c:	491b      	ldr	r1, [pc, #108]	; (8060c <vTaskSwitchContext+0x90>)
   8059e:	6813      	ldr	r3, [r2, #0]
   805a0:	3b01      	subs	r3, #1
   805a2:	6013      	str	r3, [r2, #0]
   805a4:	6813      	ldr	r3, [r2, #0]
   805a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   805aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   805ae:	b953      	cbnz	r3, 805c6 <vTaskSwitchContext+0x4a>
   805b0:	6813      	ldr	r3, [r2, #0]
   805b2:	2b00      	cmp	r3, #0
   805b4:	d1f3      	bne.n	8059e <vTaskSwitchContext+0x22>
   805b6:	4b16      	ldr	r3, [pc, #88]	; (80610 <vTaskSwitchContext+0x94>)
   805b8:	4798      	blx	r3
   805ba:	bf00      	nop
   805bc:	e7fd      	b.n	805ba <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   805be:	2201      	movs	r2, #1
   805c0:	4b14      	ldr	r3, [pc, #80]	; (80614 <vTaskSwitchContext+0x98>)
   805c2:	601a      	str	r2, [r3, #0]
   805c4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   805c6:	4b10      	ldr	r3, [pc, #64]	; (80608 <vTaskSwitchContext+0x8c>)
   805c8:	681b      	ldr	r3, [r3, #0]
   805ca:	4a10      	ldr	r2, [pc, #64]	; (8060c <vTaskSwitchContext+0x90>)
   805cc:	0099      	lsls	r1, r3, #2
   805ce:	18c8      	adds	r0, r1, r3
   805d0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   805d4:	6844      	ldr	r4, [r0, #4]
   805d6:	6864      	ldr	r4, [r4, #4]
   805d8:	6044      	str	r4, [r0, #4]
   805da:	4419      	add	r1, r3
   805dc:	4602      	mov	r2, r0
   805de:	3208      	adds	r2, #8
   805e0:	4294      	cmp	r4, r2
   805e2:	d009      	beq.n	805f8 <vTaskSwitchContext+0x7c>
   805e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   805e8:	4a08      	ldr	r2, [pc, #32]	; (8060c <vTaskSwitchContext+0x90>)
   805ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   805ee:	685b      	ldr	r3, [r3, #4]
   805f0:	68da      	ldr	r2, [r3, #12]
   805f2:	4b09      	ldr	r3, [pc, #36]	; (80618 <vTaskSwitchContext+0x9c>)
   805f4:	601a      	str	r2, [r3, #0]
   805f6:	bd10      	pop	{r4, pc}
   805f8:	6860      	ldr	r0, [r4, #4]
   805fa:	4a04      	ldr	r2, [pc, #16]	; (8060c <vTaskSwitchContext+0x90>)
   805fc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   80600:	6050      	str	r0, [r2, #4]
   80602:	e7ef      	b.n	805e4 <vTaskSwitchContext+0x68>
   80604:	20070b88 	.word	0x20070b88
   80608:	20070b8c 	.word	0x20070b8c
   8060c:	20070b20 	.word	0x20070b20
   80610:	000803d5 	.word	0x000803d5
   80614:	20070b90 	.word	0x20070b90
   80618:	20070b14 	.word	0x20070b14

0008061c <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   8061c:	b500      	push	{lr}
   8061e:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   80620:	2201      	movs	r2, #1
   80622:	f10d 0107 	add.w	r1, sp, #7
   80626:	4810      	ldr	r0, [pc, #64]	; (80668 <USART0_Handler+0x4c>)
   80628:	4b10      	ldr	r3, [pc, #64]	; (8066c <USART0_Handler+0x50>)
   8062a:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8062c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8062e:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80632:	2200      	movs	r2, #0
   80634:	4b0e      	ldr	r3, [pc, #56]	; (80670 <USART0_Handler+0x54>)
   80636:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80638:	4b0e      	ldr	r3, [pc, #56]	; (80674 <USART0_Handler+0x58>)
   8063a:	781b      	ldrb	r3, [r3, #0]
   8063c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80640:	4a0d      	ldr	r2, [pc, #52]	; (80678 <USART0_Handler+0x5c>)
   80642:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80644:	2b9b      	cmp	r3, #155	; 0x9b
   80646:	d00b      	beq.n	80660 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   80648:	3301      	adds	r3, #1
   8064a:	4a0a      	ldr	r2, [pc, #40]	; (80674 <USART0_Handler+0x58>)
   8064c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8064e:	2201      	movs	r2, #1
   80650:	4b07      	ldr	r3, [pc, #28]	; (80670 <USART0_Handler+0x54>)
   80652:	701a      	strb	r2, [r3, #0]
   80654:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80658:	b662      	cpsie	i
}
   8065a:	b003      	add	sp, #12
   8065c:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   80660:	2200      	movs	r2, #0
   80662:	4b04      	ldr	r3, [pc, #16]	; (80674 <USART0_Handler+0x58>)
   80664:	701a      	strb	r2, [r3, #0]
   80666:	e7f2      	b.n	8064e <USART0_Handler+0x32>
   80668:	40098000 	.word	0x40098000
   8066c:	00080891 	.word	0x00080891
   80670:	20070130 	.word	0x20070130
   80674:	20070c38 	.word	0x20070c38
   80678:	20070b9c 	.word	0x20070b9c

0008067c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8067c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8067e:	b083      	sub	sp, #12
   80680:	4604      	mov	r4, r0
   80682:	460d      	mov	r5, r1
	uint32_t val = 0;
   80684:	2300      	movs	r3, #0
   80686:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80688:	4b20      	ldr	r3, [pc, #128]	; (8070c <usart_serial_getchar+0x90>)
   8068a:	4298      	cmp	r0, r3
   8068c:	d00d      	beq.n	806aa <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8068e:	4b20      	ldr	r3, [pc, #128]	; (80710 <usart_serial_getchar+0x94>)
   80690:	4298      	cmp	r0, r3
   80692:	d012      	beq.n	806ba <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80694:	4b1f      	ldr	r3, [pc, #124]	; (80714 <usart_serial_getchar+0x98>)
   80696:	4298      	cmp	r0, r3
   80698:	d019      	beq.n	806ce <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8069a:	4b1f      	ldr	r3, [pc, #124]	; (80718 <usart_serial_getchar+0x9c>)
   8069c:	429c      	cmp	r4, r3
   8069e:	d020      	beq.n	806e2 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   806a0:	4b1e      	ldr	r3, [pc, #120]	; (8071c <usart_serial_getchar+0xa0>)
   806a2:	429c      	cmp	r4, r3
   806a4:	d027      	beq.n	806f6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   806a6:	b003      	add	sp, #12
   806a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   806aa:	461f      	mov	r7, r3
   806ac:	4e1c      	ldr	r6, [pc, #112]	; (80720 <usart_serial_getchar+0xa4>)
   806ae:	4629      	mov	r1, r5
   806b0:	4638      	mov	r0, r7
   806b2:	47b0      	blx	r6
   806b4:	2800      	cmp	r0, #0
   806b6:	d1fa      	bne.n	806ae <usart_serial_getchar+0x32>
   806b8:	e7ef      	b.n	8069a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   806ba:	461f      	mov	r7, r3
   806bc:	4e19      	ldr	r6, [pc, #100]	; (80724 <usart_serial_getchar+0xa8>)
   806be:	a901      	add	r1, sp, #4
   806c0:	4638      	mov	r0, r7
   806c2:	47b0      	blx	r6
   806c4:	2800      	cmp	r0, #0
   806c6:	d1fa      	bne.n	806be <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   806c8:	9b01      	ldr	r3, [sp, #4]
   806ca:	702b      	strb	r3, [r5, #0]
   806cc:	e7e8      	b.n	806a0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   806ce:	461e      	mov	r6, r3
   806d0:	4c14      	ldr	r4, [pc, #80]	; (80724 <usart_serial_getchar+0xa8>)
   806d2:	a901      	add	r1, sp, #4
   806d4:	4630      	mov	r0, r6
   806d6:	47a0      	blx	r4
   806d8:	2800      	cmp	r0, #0
   806da:	d1fa      	bne.n	806d2 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   806dc:	9b01      	ldr	r3, [sp, #4]
   806de:	702b      	strb	r3, [r5, #0]
   806e0:	e7e1      	b.n	806a6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   806e2:	461e      	mov	r6, r3
   806e4:	4c0f      	ldr	r4, [pc, #60]	; (80724 <usart_serial_getchar+0xa8>)
   806e6:	a901      	add	r1, sp, #4
   806e8:	4630      	mov	r0, r6
   806ea:	47a0      	blx	r4
   806ec:	2800      	cmp	r0, #0
   806ee:	d1fa      	bne.n	806e6 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   806f0:	9b01      	ldr	r3, [sp, #4]
   806f2:	702b      	strb	r3, [r5, #0]
   806f4:	e7d7      	b.n	806a6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   806f6:	461e      	mov	r6, r3
   806f8:	4c0a      	ldr	r4, [pc, #40]	; (80724 <usart_serial_getchar+0xa8>)
   806fa:	a901      	add	r1, sp, #4
   806fc:	4630      	mov	r0, r6
   806fe:	47a0      	blx	r4
   80700:	2800      	cmp	r0, #0
   80702:	d1fa      	bne.n	806fa <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80704:	9b01      	ldr	r3, [sp, #4]
   80706:	702b      	strb	r3, [r5, #0]
}
   80708:	e7cd      	b.n	806a6 <usart_serial_getchar+0x2a>
   8070a:	bf00      	nop
   8070c:	400e0800 	.word	0x400e0800
   80710:	40098000 	.word	0x40098000
   80714:	4009c000 	.word	0x4009c000
   80718:	400a0000 	.word	0x400a0000
   8071c:	400a4000 	.word	0x400a4000
   80720:	0008099f 	.word	0x0008099f
   80724:	00080359 	.word	0x00080359

00080728 <usart_serial_putchar>:
{
   80728:	b570      	push	{r4, r5, r6, lr}
   8072a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   8072c:	4b1e      	ldr	r3, [pc, #120]	; (807a8 <usart_serial_putchar+0x80>)
   8072e:	4298      	cmp	r0, r3
   80730:	d00d      	beq.n	8074e <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80732:	4b1e      	ldr	r3, [pc, #120]	; (807ac <usart_serial_putchar+0x84>)
   80734:	4298      	cmp	r0, r3
   80736:	d013      	beq.n	80760 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80738:	4b1d      	ldr	r3, [pc, #116]	; (807b0 <usart_serial_putchar+0x88>)
   8073a:	4298      	cmp	r0, r3
   8073c:	d019      	beq.n	80772 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   8073e:	4b1d      	ldr	r3, [pc, #116]	; (807b4 <usart_serial_putchar+0x8c>)
   80740:	4298      	cmp	r0, r3
   80742:	d01f      	beq.n	80784 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80744:	4b1c      	ldr	r3, [pc, #112]	; (807b8 <usart_serial_putchar+0x90>)
   80746:	4298      	cmp	r0, r3
   80748:	d025      	beq.n	80796 <usart_serial_putchar+0x6e>
	return 0;
   8074a:	2000      	movs	r0, #0
}
   8074c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8074e:	461e      	mov	r6, r3
   80750:	4d1a      	ldr	r5, [pc, #104]	; (807bc <usart_serial_putchar+0x94>)
   80752:	4621      	mov	r1, r4
   80754:	4630      	mov	r0, r6
   80756:	47a8      	blx	r5
   80758:	2800      	cmp	r0, #0
   8075a:	d1fa      	bne.n	80752 <usart_serial_putchar+0x2a>
		return 1;
   8075c:	2001      	movs	r0, #1
   8075e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80760:	461e      	mov	r6, r3
   80762:	4d17      	ldr	r5, [pc, #92]	; (807c0 <usart_serial_putchar+0x98>)
   80764:	4621      	mov	r1, r4
   80766:	4630      	mov	r0, r6
   80768:	47a8      	blx	r5
   8076a:	2800      	cmp	r0, #0
   8076c:	d1fa      	bne.n	80764 <usart_serial_putchar+0x3c>
		return 1;
   8076e:	2001      	movs	r0, #1
   80770:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80772:	461e      	mov	r6, r3
   80774:	4d12      	ldr	r5, [pc, #72]	; (807c0 <usart_serial_putchar+0x98>)
   80776:	4621      	mov	r1, r4
   80778:	4630      	mov	r0, r6
   8077a:	47a8      	blx	r5
   8077c:	2800      	cmp	r0, #0
   8077e:	d1fa      	bne.n	80776 <usart_serial_putchar+0x4e>
		return 1;
   80780:	2001      	movs	r0, #1
   80782:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80784:	461e      	mov	r6, r3
   80786:	4d0e      	ldr	r5, [pc, #56]	; (807c0 <usart_serial_putchar+0x98>)
   80788:	4621      	mov	r1, r4
   8078a:	4630      	mov	r0, r6
   8078c:	47a8      	blx	r5
   8078e:	2800      	cmp	r0, #0
   80790:	d1fa      	bne.n	80788 <usart_serial_putchar+0x60>
		return 1;
   80792:	2001      	movs	r0, #1
   80794:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80796:	461e      	mov	r6, r3
   80798:	4d09      	ldr	r5, [pc, #36]	; (807c0 <usart_serial_putchar+0x98>)
   8079a:	4621      	mov	r1, r4
   8079c:	4630      	mov	r0, r6
   8079e:	47a8      	blx	r5
   807a0:	2800      	cmp	r0, #0
   807a2:	d1fa      	bne.n	8079a <usart_serial_putchar+0x72>
		return 1;
   807a4:	2001      	movs	r0, #1
   807a6:	bd70      	pop	{r4, r5, r6, pc}
   807a8:	400e0800 	.word	0x400e0800
   807ac:	40098000 	.word	0x40098000
   807b0:	4009c000 	.word	0x4009c000
   807b4:	400a0000 	.word	0x400a0000
   807b8:	400a4000 	.word	0x400a4000
   807bc:	0008098f 	.word	0x0008098f
   807c0:	00080345 	.word	0x00080345

000807c4 <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   807c4:	b530      	push	{r4, r5, lr}
   807c6:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   807c8:	2008      	movs	r0, #8
   807ca:	4d12      	ldr	r5, [pc, #72]	; (80814 <configureConsole+0x50>)
   807cc:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   807ce:	4c12      	ldr	r4, [pc, #72]	; (80818 <configureConsole+0x54>)
   807d0:	4b12      	ldr	r3, [pc, #72]	; (8081c <configureConsole+0x58>)
   807d2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   807d4:	4a12      	ldr	r2, [pc, #72]	; (80820 <configureConsole+0x5c>)
   807d6:	4b13      	ldr	r3, [pc, #76]	; (80824 <configureConsole+0x60>)
   807d8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   807da:	4a13      	ldr	r2, [pc, #76]	; (80828 <configureConsole+0x64>)
   807dc:	4b13      	ldr	r3, [pc, #76]	; (8082c <configureConsole+0x68>)
   807de:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   807e0:	4b13      	ldr	r3, [pc, #76]	; (80830 <configureConsole+0x6c>)
   807e2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   807e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   807e8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   807ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
   807ee:	9303      	str	r3, [sp, #12]
   807f0:	2008      	movs	r0, #8
   807f2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   807f4:	a901      	add	r1, sp, #4
   807f6:	4620      	mov	r0, r4
   807f8:	4b0e      	ldr	r3, [pc, #56]	; (80834 <configureConsole+0x70>)
   807fa:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   807fc:	4d0e      	ldr	r5, [pc, #56]	; (80838 <configureConsole+0x74>)
   807fe:	682b      	ldr	r3, [r5, #0]
   80800:	2100      	movs	r1, #0
   80802:	6898      	ldr	r0, [r3, #8]
   80804:	4c0d      	ldr	r4, [pc, #52]	; (8083c <configureConsole+0x78>)
   80806:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80808:	682b      	ldr	r3, [r5, #0]
   8080a:	2100      	movs	r1, #0
   8080c:	6858      	ldr	r0, [r3, #4]
   8080e:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
// 	printf("Console ready\n");
// 	printf("=============\n");
   80810:	b005      	add	sp, #20
   80812:	bd30      	pop	{r4, r5, pc}
   80814:	00080e49 	.word	0x00080e49
   80818:	400e0800 	.word	0x400e0800
   8081c:	20070cf8 	.word	0x20070cf8
   80820:	00080729 	.word	0x00080729
   80824:	20070cf4 	.word	0x20070cf4
   80828:	0008067d 	.word	0x0008067d
   8082c:	20070cf0 	.word	0x20070cf0
   80830:	0501bd00 	.word	0x0501bd00
   80834:	00080959 	.word	0x00080959
   80838:	2007014c 	.word	0x2007014c
   8083c:	0008134d 	.word	0x0008134d

00080840 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80840:	3801      	subs	r0, #1
   80842:	2802      	cmp	r0, #2
   80844:	d815      	bhi.n	80872 <_write+0x32>
{
   80846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8084a:	460e      	mov	r6, r1
   8084c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8084e:	b19a      	cbz	r2, 80878 <_write+0x38>
   80850:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80852:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8088c <_write+0x4c>
   80856:	4f0c      	ldr	r7, [pc, #48]	; (80888 <_write+0x48>)
   80858:	f8d8 0000 	ldr.w	r0, [r8]
   8085c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80860:	683b      	ldr	r3, [r7, #0]
   80862:	4798      	blx	r3
   80864:	2800      	cmp	r0, #0
   80866:	db0a      	blt.n	8087e <_write+0x3e>
   80868:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8086a:	3c01      	subs	r4, #1
   8086c:	d1f4      	bne.n	80858 <_write+0x18>
   8086e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80872:	f04f 30ff 	mov.w	r0, #4294967295
   80876:	4770      	bx	lr
	for (; len != 0; --len) {
   80878:	4610      	mov	r0, r2
   8087a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8087e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80886:	bf00      	nop
   80888:	20070cf4 	.word	0x20070cf4
   8088c:	20070cf8 	.word	0x20070cf8

00080890 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80890:	2a00      	cmp	r2, #0
   80892:	d051      	beq.n	80938 <usart_serial_read_packet+0xa8>
{
   80894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80898:	b083      	sub	sp, #12
   8089a:	4605      	mov	r5, r0
   8089c:	460c      	mov	r4, r1
   8089e:	4692      	mov	sl, r2
   808a0:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   808a2:	4f26      	ldr	r7, [pc, #152]	; (8093c <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   808a4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80950 <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   808a8:	4e25      	ldr	r6, [pc, #148]	; (80940 <usart_serial_read_packet+0xb0>)
   808aa:	e01d      	b.n	808e8 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   808ac:	4621      	mov	r1, r4
   808ae:	4638      	mov	r0, r7
   808b0:	47c8      	blx	r9
   808b2:	2800      	cmp	r0, #0
   808b4:	d1fa      	bne.n	808ac <usart_serial_read_packet+0x1c>
   808b6:	e021      	b.n	808fc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   808b8:	469b      	mov	fp, r3
   808ba:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80954 <usart_serial_read_packet+0xc4>
   808be:	a901      	add	r1, sp, #4
   808c0:	4658      	mov	r0, fp
   808c2:	47c0      	blx	r8
   808c4:	2800      	cmp	r0, #0
   808c6:	d1fa      	bne.n	808be <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   808c8:	9b01      	ldr	r3, [sp, #4]
   808ca:	7023      	strb	r3, [r4, #0]
   808cc:	e019      	b.n	80902 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   808ce:	469b      	mov	fp, r3
   808d0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80954 <usart_serial_read_packet+0xc4>
   808d4:	a901      	add	r1, sp, #4
   808d6:	4658      	mov	r0, fp
   808d8:	47c0      	blx	r8
   808da:	2800      	cmp	r0, #0
   808dc:	d1fa      	bne.n	808d4 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   808de:	9b01      	ldr	r3, [sp, #4]
   808e0:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   808e2:	3401      	adds	r4, #1
	while (len) {
   808e4:	4554      	cmp	r4, sl
   808e6:	d023      	beq.n	80930 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   808e8:	2300      	movs	r3, #0
   808ea:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   808ec:	42bd      	cmp	r5, r7
   808ee:	d0dd      	beq.n	808ac <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   808f0:	4b14      	ldr	r3, [pc, #80]	; (80944 <usart_serial_read_packet+0xb4>)
   808f2:	429d      	cmp	r5, r3
   808f4:	d0e0      	beq.n	808b8 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   808f6:	4b14      	ldr	r3, [pc, #80]	; (80948 <usart_serial_read_packet+0xb8>)
   808f8:	429d      	cmp	r5, r3
   808fa:	d0e8      	beq.n	808ce <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   808fc:	4b13      	ldr	r3, [pc, #76]	; (8094c <usart_serial_read_packet+0xbc>)
   808fe:	429d      	cmp	r5, r3
   80900:	d00b      	beq.n	8091a <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   80902:	42b5      	cmp	r5, r6
   80904:	d1ed      	bne.n	808e2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80906:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80954 <usart_serial_read_packet+0xc4>
   8090a:	a901      	add	r1, sp, #4
   8090c:	4630      	mov	r0, r6
   8090e:	47c0      	blx	r8
   80910:	2800      	cmp	r0, #0
   80912:	d1fa      	bne.n	8090a <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80914:	9b01      	ldr	r3, [sp, #4]
   80916:	7023      	strb	r3, [r4, #0]
   80918:	e7e3      	b.n	808e2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8091a:	469b      	mov	fp, r3
   8091c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80954 <usart_serial_read_packet+0xc4>
   80920:	a901      	add	r1, sp, #4
   80922:	4658      	mov	r0, fp
   80924:	47c0      	blx	r8
   80926:	2800      	cmp	r0, #0
   80928:	d1fa      	bne.n	80920 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   8092a:	9b01      	ldr	r3, [sp, #4]
   8092c:	7023      	strb	r3, [r4, #0]
   8092e:	e7d8      	b.n	808e2 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80930:	2000      	movs	r0, #0
   80932:	b003      	add	sp, #12
   80934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80938:	2000      	movs	r0, #0
   8093a:	4770      	bx	lr
   8093c:	400e0800 	.word	0x400e0800
   80940:	400a4000 	.word	0x400a4000
   80944:	40098000 	.word	0x40098000
   80948:	4009c000 	.word	0x4009c000
   8094c:	400a0000 	.word	0x400a0000
   80950:	0008099f 	.word	0x0008099f
   80954:	00080359 	.word	0x00080359

00080958 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80958:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8095a:	23ac      	movs	r3, #172	; 0xac
   8095c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8095e:	680b      	ldr	r3, [r1, #0]
   80960:	684a      	ldr	r2, [r1, #4]
   80962:	fbb3 f3f2 	udiv	r3, r3, r2
   80966:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80968:	1e5c      	subs	r4, r3, #1
   8096a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8096e:	4294      	cmp	r4, r2
   80970:	d80b      	bhi.n	8098a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80972:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80974:	688b      	ldr	r3, [r1, #8]
   80976:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80978:	f240 2302 	movw	r3, #514	; 0x202
   8097c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80980:	2350      	movs	r3, #80	; 0x50
   80982:	6003      	str	r3, [r0, #0]

	return 0;
   80984:	2000      	movs	r0, #0
}
   80986:	bc10      	pop	{r4}
   80988:	4770      	bx	lr
		return 1;
   8098a:	2001      	movs	r0, #1
   8098c:	e7fb      	b.n	80986 <uart_init+0x2e>

0008098e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8098e:	6943      	ldr	r3, [r0, #20]
   80990:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80994:	bf1a      	itte	ne
   80996:	61c1      	strne	r1, [r0, #28]
	return 0;
   80998:	2000      	movne	r0, #0
		return 1;
   8099a:	2001      	moveq	r0, #1
}
   8099c:	4770      	bx	lr

0008099e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8099e:	6943      	ldr	r3, [r0, #20]
   809a0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   809a4:	bf1d      	ittte	ne
   809a6:	6983      	ldrne	r3, [r0, #24]
   809a8:	700b      	strbne	r3, [r1, #0]
	return 0;
   809aa:	2000      	movne	r0, #0
		return 1;
   809ac:	2001      	moveq	r0, #1
}
   809ae:	4770      	bx	lr

000809b0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   809b0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   809b2:	480e      	ldr	r0, [pc, #56]	; (809ec <sysclk_init+0x3c>)
   809b4:	4b0e      	ldr	r3, [pc, #56]	; (809f0 <sysclk_init+0x40>)
   809b6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   809b8:	213e      	movs	r1, #62	; 0x3e
   809ba:	2000      	movs	r0, #0
   809bc:	4b0d      	ldr	r3, [pc, #52]	; (809f4 <sysclk_init+0x44>)
   809be:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   809c0:	4c0d      	ldr	r4, [pc, #52]	; (809f8 <sysclk_init+0x48>)
   809c2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   809c4:	2800      	cmp	r0, #0
   809c6:	d0fc      	beq.n	809c2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   809c8:	4b0c      	ldr	r3, [pc, #48]	; (809fc <sysclk_init+0x4c>)
   809ca:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   809cc:	4a0c      	ldr	r2, [pc, #48]	; (80a00 <sysclk_init+0x50>)
   809ce:	4b0d      	ldr	r3, [pc, #52]	; (80a04 <sysclk_init+0x54>)
   809d0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   809d2:	4c0d      	ldr	r4, [pc, #52]	; (80a08 <sysclk_init+0x58>)
   809d4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   809d6:	2800      	cmp	r0, #0
   809d8:	d0fc      	beq.n	809d4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   809da:	2010      	movs	r0, #16
   809dc:	4b0b      	ldr	r3, [pc, #44]	; (80a0c <sysclk_init+0x5c>)
   809de:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   809e0:	4b0b      	ldr	r3, [pc, #44]	; (80a10 <sysclk_init+0x60>)
   809e2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   809e4:	4801      	ldr	r0, [pc, #4]	; (809ec <sysclk_init+0x3c>)
   809e6:	4b02      	ldr	r3, [pc, #8]	; (809f0 <sysclk_init+0x40>)
   809e8:	4798      	blx	r3
   809ea:	bd10      	pop	{r4, pc}
   809ec:	0501bd00 	.word	0x0501bd00
   809f0:	200700a5 	.word	0x200700a5
   809f4:	00080dc5 	.word	0x00080dc5
   809f8:	00080e19 	.word	0x00080e19
   809fc:	00080e29 	.word	0x00080e29
   80a00:	200d3f01 	.word	0x200d3f01
   80a04:	400e0600 	.word	0x400e0600
   80a08:	00080e39 	.word	0x00080e39
   80a0c:	00080d61 	.word	0x00080d61
   80a10:	00080f39 	.word	0x00080f39

00080a14 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80a14:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80a16:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80a1a:	4b1e      	ldr	r3, [pc, #120]	; (80a94 <board_init+0x80>)
   80a1c:	605a      	str	r2, [r3, #4]
   80a1e:	200b      	movs	r0, #11
   80a20:	4c1d      	ldr	r4, [pc, #116]	; (80a98 <board_init+0x84>)
   80a22:	47a0      	blx	r4
   80a24:	200c      	movs	r0, #12
   80a26:	47a0      	blx	r4
   80a28:	200d      	movs	r0, #13
   80a2a:	47a0      	blx	r4
   80a2c:	200e      	movs	r0, #14
   80a2e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80a30:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a34:	203b      	movs	r0, #59	; 0x3b
   80a36:	4c19      	ldr	r4, [pc, #100]	; (80a9c <board_init+0x88>)
   80a38:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80a3a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a3e:	2055      	movs	r0, #85	; 0x55
   80a40:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80a42:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a46:	2056      	movs	r0, #86	; 0x56
   80a48:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80a4a:	4915      	ldr	r1, [pc, #84]	; (80aa0 <board_init+0x8c>)
   80a4c:	2068      	movs	r0, #104	; 0x68
   80a4e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80a50:	4914      	ldr	r1, [pc, #80]	; (80aa4 <board_init+0x90>)
   80a52:	205c      	movs	r0, #92	; 0x5c
   80a54:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80a56:	4a14      	ldr	r2, [pc, #80]	; (80aa8 <board_init+0x94>)
   80a58:	f44f 7140 	mov.w	r1, #768	; 0x300
   80a5c:	4813      	ldr	r0, [pc, #76]	; (80aac <board_init+0x98>)
   80a5e:	4b14      	ldr	r3, [pc, #80]	; (80ab0 <board_init+0x9c>)
   80a60:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   80a62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a66:	2011      	movs	r0, #17
   80a68:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   80a6a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a6e:	2012      	movs	r0, #18
   80a70:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   80a72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a76:	202c      	movs	r0, #44	; 0x2c
   80a78:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   80a7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a7e:	202d      	movs	r0, #45	; 0x2d
   80a80:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80a82:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a86:	202b      	movs	r0, #43	; 0x2b
   80a88:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80a8a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a8e:	202a      	movs	r0, #42	; 0x2a
   80a90:	47a0      	blx	r4
   80a92:	bd10      	pop	{r4, pc}
   80a94:	400e1a50 	.word	0x400e1a50
   80a98:	00080e49 	.word	0x00080e49
   80a9c:	00080b55 	.word	0x00080b55
   80aa0:	28000079 	.word	0x28000079
   80aa4:	28000001 	.word	0x28000001
   80aa8:	08000001 	.word	0x08000001
   80aac:	400e0e00 	.word	0x400e0e00
   80ab0:	00080c25 	.word	0x00080c25

00080ab4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80ab4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80ab6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80aba:	d016      	beq.n	80aea <pio_set_peripheral+0x36>
   80abc:	d80b      	bhi.n	80ad6 <pio_set_peripheral+0x22>
   80abe:	b149      	cbz	r1, 80ad4 <pio_set_peripheral+0x20>
   80ac0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80ac4:	d105      	bne.n	80ad2 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80ac6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80ac8:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80aca:	400b      	ands	r3, r1
   80acc:	ea23 0302 	bic.w	r3, r3, r2
   80ad0:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80ad2:	6042      	str	r2, [r0, #4]
   80ad4:	4770      	bx	lr
	switch (ul_type) {
   80ad6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80ada:	d0fb      	beq.n	80ad4 <pio_set_peripheral+0x20>
   80adc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80ae0:	d0f8      	beq.n	80ad4 <pio_set_peripheral+0x20>
   80ae2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80ae6:	d1f4      	bne.n	80ad2 <pio_set_peripheral+0x1e>
   80ae8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80aea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80aec:	4313      	orrs	r3, r2
   80aee:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80af0:	e7ef      	b.n	80ad2 <pio_set_peripheral+0x1e>

00080af2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80af2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80af4:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80af8:	bf14      	ite	ne
   80afa:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80afc:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80afe:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80b02:	bf14      	ite	ne
   80b04:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80b06:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80b08:	f012 0f02 	tst.w	r2, #2
   80b0c:	d107      	bne.n	80b1e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80b0e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80b12:	bf18      	it	ne
   80b14:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80b18:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80b1a:	6001      	str	r1, [r0, #0]
   80b1c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80b1e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80b22:	e7f9      	b.n	80b18 <pio_set_input+0x26>

00080b24 <pio_set_output>:
{
   80b24:	b410      	push	{r4}
   80b26:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80b28:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80b2a:	b944      	cbnz	r4, 80b3e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80b2c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80b2e:	b143      	cbz	r3, 80b42 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80b30:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80b32:	b942      	cbnz	r2, 80b46 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80b34:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80b36:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80b38:	6001      	str	r1, [r0, #0]
}
   80b3a:	bc10      	pop	{r4}
   80b3c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80b3e:	6641      	str	r1, [r0, #100]	; 0x64
   80b40:	e7f5      	b.n	80b2e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80b42:	6541      	str	r1, [r0, #84]	; 0x54
   80b44:	e7f5      	b.n	80b32 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80b46:	6301      	str	r1, [r0, #48]	; 0x30
   80b48:	e7f5      	b.n	80b36 <pio_set_output+0x12>

00080b4a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80b4a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80b4c:	4770      	bx	lr

00080b4e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80b4e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80b50:	4770      	bx	lr
	...

00080b54 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80b54:	b570      	push	{r4, r5, r6, lr}
   80b56:	b082      	sub	sp, #8
   80b58:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80b5a:	0943      	lsrs	r3, r0, #5
   80b5c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80b60:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80b64:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80b66:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80b6a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80b6e:	d031      	beq.n	80bd4 <pio_configure_pin+0x80>
   80b70:	d816      	bhi.n	80ba0 <pio_configure_pin+0x4c>
   80b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80b76:	d01b      	beq.n	80bb0 <pio_configure_pin+0x5c>
   80b78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80b7c:	d116      	bne.n	80bac <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80b7e:	f000 001f 	and.w	r0, r0, #31
   80b82:	2601      	movs	r6, #1
   80b84:	4086      	lsls	r6, r0
   80b86:	4632      	mov	r2, r6
   80b88:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b8c:	4620      	mov	r0, r4
   80b8e:	4b22      	ldr	r3, [pc, #136]	; (80c18 <pio_configure_pin+0xc4>)
   80b90:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b92:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b96:	bf14      	ite	ne
   80b98:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b9a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80b9c:	2001      	movs	r0, #1
   80b9e:	e017      	b.n	80bd0 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80ba0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ba4:	d021      	beq.n	80bea <pio_configure_pin+0x96>
   80ba6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80baa:	d01e      	beq.n	80bea <pio_configure_pin+0x96>
		return 0;
   80bac:	2000      	movs	r0, #0
   80bae:	e00f      	b.n	80bd0 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80bb0:	f000 001f 	and.w	r0, r0, #31
   80bb4:	2601      	movs	r6, #1
   80bb6:	4086      	lsls	r6, r0
   80bb8:	4632      	mov	r2, r6
   80bba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80bbe:	4620      	mov	r0, r4
   80bc0:	4b15      	ldr	r3, [pc, #84]	; (80c18 <pio_configure_pin+0xc4>)
   80bc2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80bc4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80bc8:	bf14      	ite	ne
   80bca:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80bcc:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80bce:	2001      	movs	r0, #1
}
   80bd0:	b002      	add	sp, #8
   80bd2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80bd4:	f000 011f 	and.w	r1, r0, #31
   80bd8:	2601      	movs	r6, #1
   80bda:	462a      	mov	r2, r5
   80bdc:	fa06 f101 	lsl.w	r1, r6, r1
   80be0:	4620      	mov	r0, r4
   80be2:	4b0e      	ldr	r3, [pc, #56]	; (80c1c <pio_configure_pin+0xc8>)
   80be4:	4798      	blx	r3
	return 1;
   80be6:	4630      	mov	r0, r6
		break;
   80be8:	e7f2      	b.n	80bd0 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80bea:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80bee:	f000 011f 	and.w	r1, r0, #31
   80bf2:	2601      	movs	r6, #1
   80bf4:	ea05 0306 	and.w	r3, r5, r6
   80bf8:	9300      	str	r3, [sp, #0]
   80bfa:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80bfe:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80c02:	bf14      	ite	ne
   80c04:	2200      	movne	r2, #0
   80c06:	2201      	moveq	r2, #1
   80c08:	fa06 f101 	lsl.w	r1, r6, r1
   80c0c:	4620      	mov	r0, r4
   80c0e:	4c04      	ldr	r4, [pc, #16]	; (80c20 <pio_configure_pin+0xcc>)
   80c10:	47a0      	blx	r4
	return 1;
   80c12:	4630      	mov	r0, r6
		break;
   80c14:	e7dc      	b.n	80bd0 <pio_configure_pin+0x7c>
   80c16:	bf00      	nop
   80c18:	00080ab5 	.word	0x00080ab5
   80c1c:	00080af3 	.word	0x00080af3
   80c20:	00080b25 	.word	0x00080b25

00080c24 <pio_configure_pin_group>:
{
   80c24:	b570      	push	{r4, r5, r6, lr}
   80c26:	b082      	sub	sp, #8
   80c28:	4605      	mov	r5, r0
   80c2a:	460e      	mov	r6, r1
   80c2c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80c2e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80c32:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80c36:	d027      	beq.n	80c88 <pio_configure_pin_group+0x64>
   80c38:	d811      	bhi.n	80c5e <pio_configure_pin_group+0x3a>
   80c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80c3e:	d016      	beq.n	80c6e <pio_configure_pin_group+0x4a>
   80c40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80c44:	d111      	bne.n	80c6a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80c46:	460a      	mov	r2, r1
   80c48:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80c4c:	4b19      	ldr	r3, [pc, #100]	; (80cb4 <pio_configure_pin_group+0x90>)
   80c4e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80c50:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80c54:	bf14      	ite	ne
   80c56:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80c58:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80c5a:	2001      	movs	r0, #1
   80c5c:	e012      	b.n	80c84 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80c5e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80c62:	d015      	beq.n	80c90 <pio_configure_pin_group+0x6c>
   80c64:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80c68:	d012      	beq.n	80c90 <pio_configure_pin_group+0x6c>
		return 0;
   80c6a:	2000      	movs	r0, #0
   80c6c:	e00a      	b.n	80c84 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80c6e:	460a      	mov	r2, r1
   80c70:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c74:	4b0f      	ldr	r3, [pc, #60]	; (80cb4 <pio_configure_pin_group+0x90>)
   80c76:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80c78:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80c7c:	bf14      	ite	ne
   80c7e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80c80:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80c82:	2001      	movs	r0, #1
}
   80c84:	b002      	add	sp, #8
   80c86:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80c88:	4b0b      	ldr	r3, [pc, #44]	; (80cb8 <pio_configure_pin_group+0x94>)
   80c8a:	4798      	blx	r3
	return 1;
   80c8c:	2001      	movs	r0, #1
		break;
   80c8e:	e7f9      	b.n	80c84 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80c90:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80c94:	f004 0301 	and.w	r3, r4, #1
   80c98:	9300      	str	r3, [sp, #0]
   80c9a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80c9e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80ca2:	bf14      	ite	ne
   80ca4:	2200      	movne	r2, #0
   80ca6:	2201      	moveq	r2, #1
   80ca8:	4631      	mov	r1, r6
   80caa:	4628      	mov	r0, r5
   80cac:	4c03      	ldr	r4, [pc, #12]	; (80cbc <pio_configure_pin_group+0x98>)
   80cae:	47a0      	blx	r4
	return 1;
   80cb0:	2001      	movs	r0, #1
		break;
   80cb2:	e7e7      	b.n	80c84 <pio_configure_pin_group+0x60>
   80cb4:	00080ab5 	.word	0x00080ab5
   80cb8:	00080af3 	.word	0x00080af3
   80cbc:	00080b25 	.word	0x00080b25

00080cc0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80cc4:	4604      	mov	r4, r0
   80cc6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80cc8:	4b0e      	ldr	r3, [pc, #56]	; (80d04 <pio_handler_process+0x44>)
   80cca:	4798      	blx	r3
   80ccc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80cce:	4620      	mov	r0, r4
   80cd0:	4b0d      	ldr	r3, [pc, #52]	; (80d08 <pio_handler_process+0x48>)
   80cd2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80cd4:	4005      	ands	r5, r0
   80cd6:	d013      	beq.n	80d00 <pio_handler_process+0x40>
   80cd8:	4c0c      	ldr	r4, [pc, #48]	; (80d0c <pio_handler_process+0x4c>)
   80cda:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80cde:	e003      	b.n	80ce8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80ce0:	42b4      	cmp	r4, r6
   80ce2:	d00d      	beq.n	80d00 <pio_handler_process+0x40>
   80ce4:	3410      	adds	r4, #16
		while (status != 0) {
   80ce6:	b15d      	cbz	r5, 80d00 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80ce8:	6820      	ldr	r0, [r4, #0]
   80cea:	4540      	cmp	r0, r8
   80cec:	d1f8      	bne.n	80ce0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80cee:	6861      	ldr	r1, [r4, #4]
   80cf0:	4229      	tst	r1, r5
   80cf2:	d0f5      	beq.n	80ce0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80cf4:	68e3      	ldr	r3, [r4, #12]
   80cf6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80cf8:	6863      	ldr	r3, [r4, #4]
   80cfa:	ea25 0503 	bic.w	r5, r5, r3
   80cfe:	e7ef      	b.n	80ce0 <pio_handler_process+0x20>
   80d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80d04:	00080b4b 	.word	0x00080b4b
   80d08:	00080b4f 	.word	0x00080b4f
   80d0c:	20070c3c 	.word	0x20070c3c

00080d10 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80d10:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80d12:	210b      	movs	r1, #11
   80d14:	4801      	ldr	r0, [pc, #4]	; (80d1c <PIOA_Handler+0xc>)
   80d16:	4b02      	ldr	r3, [pc, #8]	; (80d20 <PIOA_Handler+0x10>)
   80d18:	4798      	blx	r3
   80d1a:	bd08      	pop	{r3, pc}
   80d1c:	400e0e00 	.word	0x400e0e00
   80d20:	00080cc1 	.word	0x00080cc1

00080d24 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80d24:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80d26:	210c      	movs	r1, #12
   80d28:	4801      	ldr	r0, [pc, #4]	; (80d30 <PIOB_Handler+0xc>)
   80d2a:	4b02      	ldr	r3, [pc, #8]	; (80d34 <PIOB_Handler+0x10>)
   80d2c:	4798      	blx	r3
   80d2e:	bd08      	pop	{r3, pc}
   80d30:	400e1000 	.word	0x400e1000
   80d34:	00080cc1 	.word	0x00080cc1

00080d38 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80d38:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80d3a:	210d      	movs	r1, #13
   80d3c:	4801      	ldr	r0, [pc, #4]	; (80d44 <PIOC_Handler+0xc>)
   80d3e:	4b02      	ldr	r3, [pc, #8]	; (80d48 <PIOC_Handler+0x10>)
   80d40:	4798      	blx	r3
   80d42:	bd08      	pop	{r3, pc}
   80d44:	400e1200 	.word	0x400e1200
   80d48:	00080cc1 	.word	0x00080cc1

00080d4c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80d4c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80d4e:	210e      	movs	r1, #14
   80d50:	4801      	ldr	r0, [pc, #4]	; (80d58 <PIOD_Handler+0xc>)
   80d52:	4b02      	ldr	r3, [pc, #8]	; (80d5c <PIOD_Handler+0x10>)
   80d54:	4798      	blx	r3
   80d56:	bd08      	pop	{r3, pc}
   80d58:	400e1400 	.word	0x400e1400
   80d5c:	00080cc1 	.word	0x00080cc1

00080d60 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80d60:	4a17      	ldr	r2, [pc, #92]	; (80dc0 <pmc_switch_mck_to_pllack+0x60>)
   80d62:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80d68:	4318      	orrs	r0, r3
   80d6a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d6c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d6e:	f013 0f08 	tst.w	r3, #8
   80d72:	d10a      	bne.n	80d8a <pmc_switch_mck_to_pllack+0x2a>
   80d74:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d78:	4911      	ldr	r1, [pc, #68]	; (80dc0 <pmc_switch_mck_to_pllack+0x60>)
   80d7a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d7c:	f012 0f08 	tst.w	r2, #8
   80d80:	d103      	bne.n	80d8a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d82:	3b01      	subs	r3, #1
   80d84:	d1f9      	bne.n	80d7a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80d86:	2001      	movs	r0, #1
   80d88:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80d8a:	4a0d      	ldr	r2, [pc, #52]	; (80dc0 <pmc_switch_mck_to_pllack+0x60>)
   80d8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d8e:	f023 0303 	bic.w	r3, r3, #3
   80d92:	f043 0302 	orr.w	r3, r3, #2
   80d96:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d98:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d9a:	f013 0f08 	tst.w	r3, #8
   80d9e:	d10a      	bne.n	80db6 <pmc_switch_mck_to_pllack+0x56>
   80da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80da4:	4906      	ldr	r1, [pc, #24]	; (80dc0 <pmc_switch_mck_to_pllack+0x60>)
   80da6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80da8:	f012 0f08 	tst.w	r2, #8
   80dac:	d105      	bne.n	80dba <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80dae:	3b01      	subs	r3, #1
   80db0:	d1f9      	bne.n	80da6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80db2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80db4:	4770      	bx	lr
	return 0;
   80db6:	2000      	movs	r0, #0
   80db8:	4770      	bx	lr
   80dba:	2000      	movs	r0, #0
   80dbc:	4770      	bx	lr
   80dbe:	bf00      	nop
   80dc0:	400e0600 	.word	0x400e0600

00080dc4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80dc4:	b9c8      	cbnz	r0, 80dfa <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80dc6:	4a11      	ldr	r2, [pc, #68]	; (80e0c <pmc_switch_mainck_to_xtal+0x48>)
   80dc8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80dca:	0209      	lsls	r1, r1, #8
   80dcc:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80dce:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80dd2:	f023 0303 	bic.w	r3, r3, #3
   80dd6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80dda:	f043 0301 	orr.w	r3, r3, #1
   80dde:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80de0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80de2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80de4:	f013 0f01 	tst.w	r3, #1
   80de8:	d0fb      	beq.n	80de2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80dea:	4a08      	ldr	r2, [pc, #32]	; (80e0c <pmc_switch_mainck_to_xtal+0x48>)
   80dec:	6a13      	ldr	r3, [r2, #32]
   80dee:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80df6:	6213      	str	r3, [r2, #32]
   80df8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80dfa:	4904      	ldr	r1, [pc, #16]	; (80e0c <pmc_switch_mainck_to_xtal+0x48>)
   80dfc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80dfe:	4a04      	ldr	r2, [pc, #16]	; (80e10 <pmc_switch_mainck_to_xtal+0x4c>)
   80e00:	401a      	ands	r2, r3
   80e02:	4b04      	ldr	r3, [pc, #16]	; (80e14 <pmc_switch_mainck_to_xtal+0x50>)
   80e04:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80e06:	620b      	str	r3, [r1, #32]
   80e08:	4770      	bx	lr
   80e0a:	bf00      	nop
   80e0c:	400e0600 	.word	0x400e0600
   80e10:	fec8fffc 	.word	0xfec8fffc
   80e14:	01370002 	.word	0x01370002

00080e18 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80e18:	4b02      	ldr	r3, [pc, #8]	; (80e24 <pmc_osc_is_ready_mainck+0xc>)
   80e1a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80e1c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80e20:	4770      	bx	lr
   80e22:	bf00      	nop
   80e24:	400e0600 	.word	0x400e0600

00080e28 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80e28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80e2c:	4b01      	ldr	r3, [pc, #4]	; (80e34 <pmc_disable_pllack+0xc>)
   80e2e:	629a      	str	r2, [r3, #40]	; 0x28
   80e30:	4770      	bx	lr
   80e32:	bf00      	nop
   80e34:	400e0600 	.word	0x400e0600

00080e38 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80e38:	4b02      	ldr	r3, [pc, #8]	; (80e44 <pmc_is_locked_pllack+0xc>)
   80e3a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80e3c:	f000 0002 	and.w	r0, r0, #2
   80e40:	4770      	bx	lr
   80e42:	bf00      	nop
   80e44:	400e0600 	.word	0x400e0600

00080e48 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80e48:	282c      	cmp	r0, #44	; 0x2c
   80e4a:	d81e      	bhi.n	80e8a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80e4c:	281f      	cmp	r0, #31
   80e4e:	d80c      	bhi.n	80e6a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80e50:	4b11      	ldr	r3, [pc, #68]	; (80e98 <pmc_enable_periph_clk+0x50>)
   80e52:	699a      	ldr	r2, [r3, #24]
   80e54:	2301      	movs	r3, #1
   80e56:	4083      	lsls	r3, r0
   80e58:	4393      	bics	r3, r2
   80e5a:	d018      	beq.n	80e8e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80e5c:	2301      	movs	r3, #1
   80e5e:	fa03 f000 	lsl.w	r0, r3, r0
   80e62:	4b0d      	ldr	r3, [pc, #52]	; (80e98 <pmc_enable_periph_clk+0x50>)
   80e64:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80e66:	2000      	movs	r0, #0
   80e68:	4770      	bx	lr
		ul_id -= 32;
   80e6a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80e6c:	4b0a      	ldr	r3, [pc, #40]	; (80e98 <pmc_enable_periph_clk+0x50>)
   80e6e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80e72:	2301      	movs	r3, #1
   80e74:	4083      	lsls	r3, r0
   80e76:	4393      	bics	r3, r2
   80e78:	d00b      	beq.n	80e92 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80e7a:	2301      	movs	r3, #1
   80e7c:	fa03 f000 	lsl.w	r0, r3, r0
   80e80:	4b05      	ldr	r3, [pc, #20]	; (80e98 <pmc_enable_periph_clk+0x50>)
   80e82:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80e86:	2000      	movs	r0, #0
   80e88:	4770      	bx	lr
		return 1;
   80e8a:	2001      	movs	r0, #1
   80e8c:	4770      	bx	lr
	return 0;
   80e8e:	2000      	movs	r0, #0
   80e90:	4770      	bx	lr
   80e92:	2000      	movs	r0, #0
}
   80e94:	4770      	bx	lr
   80e96:	bf00      	nop
   80e98:	400e0600 	.word	0x400e0600

00080e9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80e9c:	e7fe      	b.n	80e9c <Dummy_Handler>
	...

00080ea0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80ea0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80ea2:	4b1c      	ldr	r3, [pc, #112]	; (80f14 <Reset_Handler+0x74>)
   80ea4:	4a1c      	ldr	r2, [pc, #112]	; (80f18 <Reset_Handler+0x78>)
   80ea6:	429a      	cmp	r2, r3
   80ea8:	d010      	beq.n	80ecc <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80eaa:	4b1c      	ldr	r3, [pc, #112]	; (80f1c <Reset_Handler+0x7c>)
   80eac:	4a19      	ldr	r2, [pc, #100]	; (80f14 <Reset_Handler+0x74>)
   80eae:	429a      	cmp	r2, r3
   80eb0:	d20c      	bcs.n	80ecc <Reset_Handler+0x2c>
   80eb2:	3b01      	subs	r3, #1
   80eb4:	1a9b      	subs	r3, r3, r2
   80eb6:	f023 0303 	bic.w	r3, r3, #3
   80eba:	3304      	adds	r3, #4
   80ebc:	4413      	add	r3, r2
   80ebe:	4916      	ldr	r1, [pc, #88]	; (80f18 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80ec0:	f851 0b04 	ldr.w	r0, [r1], #4
   80ec4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80ec8:	429a      	cmp	r2, r3
   80eca:	d1f9      	bne.n	80ec0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80ecc:	4b14      	ldr	r3, [pc, #80]	; (80f20 <Reset_Handler+0x80>)
   80ece:	4a15      	ldr	r2, [pc, #84]	; (80f24 <Reset_Handler+0x84>)
   80ed0:	429a      	cmp	r2, r3
   80ed2:	d20a      	bcs.n	80eea <Reset_Handler+0x4a>
   80ed4:	3b01      	subs	r3, #1
   80ed6:	1a9b      	subs	r3, r3, r2
   80ed8:	f023 0303 	bic.w	r3, r3, #3
   80edc:	3304      	adds	r3, #4
   80ede:	4413      	add	r3, r2
		*pDest++ = 0;
   80ee0:	2100      	movs	r1, #0
   80ee2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80ee6:	4293      	cmp	r3, r2
   80ee8:	d1fb      	bne.n	80ee2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80eea:	4b0f      	ldr	r3, [pc, #60]	; (80f28 <Reset_Handler+0x88>)
   80eec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80ef0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80ef4:	490d      	ldr	r1, [pc, #52]	; (80f2c <Reset_Handler+0x8c>)
   80ef6:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80ef8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80efc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80f00:	d203      	bcs.n	80f0a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80f02:	688b      	ldr	r3, [r1, #8]
   80f04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80f08:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80f0a:	4b09      	ldr	r3, [pc, #36]	; (80f30 <Reset_Handler+0x90>)
   80f0c:	4798      	blx	r3

	/* Branch to main function */
	main();
   80f0e:	4b09      	ldr	r3, [pc, #36]	; (80f34 <Reset_Handler+0x94>)
   80f10:	4798      	blx	r3
   80f12:	e7fe      	b.n	80f12 <Reset_Handler+0x72>
   80f14:	20070000 	.word	0x20070000
   80f18:	000841bc 	.word	0x000841bc
   80f1c:	20070af8 	.word	0x20070af8
   80f20:	20070d24 	.word	0x20070d24
   80f24:	20070af8 	.word	0x20070af8
   80f28:	00080000 	.word	0x00080000
   80f2c:	e000ed00 	.word	0xe000ed00
   80f30:	0008114d 	.word	0x0008114d
   80f34:	000810a1 	.word	0x000810a1

00080f38 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80f38:	4b3d      	ldr	r3, [pc, #244]	; (81030 <SystemCoreClockUpdate+0xf8>)
   80f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f3c:	f003 0303 	and.w	r3, r3, #3
   80f40:	2b03      	cmp	r3, #3
   80f42:	d80e      	bhi.n	80f62 <SystemCoreClockUpdate+0x2a>
   80f44:	e8df f003 	tbb	[pc, r3]
   80f48:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80f4c:	4b39      	ldr	r3, [pc, #228]	; (81034 <SystemCoreClockUpdate+0xfc>)
   80f4e:	695b      	ldr	r3, [r3, #20]
   80f50:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80f54:	bf14      	ite	ne
   80f56:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80f5a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80f5e:	4b36      	ldr	r3, [pc, #216]	; (81038 <SystemCoreClockUpdate+0x100>)
   80f60:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80f62:	4b33      	ldr	r3, [pc, #204]	; (81030 <SystemCoreClockUpdate+0xf8>)
   80f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f66:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f6a:	2b70      	cmp	r3, #112	; 0x70
   80f6c:	d057      	beq.n	8101e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80f6e:	4b30      	ldr	r3, [pc, #192]	; (81030 <SystemCoreClockUpdate+0xf8>)
   80f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80f72:	4931      	ldr	r1, [pc, #196]	; (81038 <SystemCoreClockUpdate+0x100>)
   80f74:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80f78:	680b      	ldr	r3, [r1, #0]
   80f7a:	40d3      	lsrs	r3, r2
   80f7c:	600b      	str	r3, [r1, #0]
   80f7e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f80:	4b2b      	ldr	r3, [pc, #172]	; (81030 <SystemCoreClockUpdate+0xf8>)
   80f82:	6a1b      	ldr	r3, [r3, #32]
   80f84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f88:	d003      	beq.n	80f92 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f8a:	4a2c      	ldr	r2, [pc, #176]	; (8103c <SystemCoreClockUpdate+0x104>)
   80f8c:	4b2a      	ldr	r3, [pc, #168]	; (81038 <SystemCoreClockUpdate+0x100>)
   80f8e:	601a      	str	r2, [r3, #0]
   80f90:	e7e7      	b.n	80f62 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f92:	4a2b      	ldr	r2, [pc, #172]	; (81040 <SystemCoreClockUpdate+0x108>)
   80f94:	4b28      	ldr	r3, [pc, #160]	; (81038 <SystemCoreClockUpdate+0x100>)
   80f96:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f98:	4b25      	ldr	r3, [pc, #148]	; (81030 <SystemCoreClockUpdate+0xf8>)
   80f9a:	6a1b      	ldr	r3, [r3, #32]
   80f9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80fa0:	2b10      	cmp	r3, #16
   80fa2:	d005      	beq.n	80fb0 <SystemCoreClockUpdate+0x78>
   80fa4:	2b20      	cmp	r3, #32
   80fa6:	d1dc      	bne.n	80f62 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80fa8:	4a24      	ldr	r2, [pc, #144]	; (8103c <SystemCoreClockUpdate+0x104>)
   80faa:	4b23      	ldr	r3, [pc, #140]	; (81038 <SystemCoreClockUpdate+0x100>)
   80fac:	601a      	str	r2, [r3, #0]
				break;
   80fae:	e7d8      	b.n	80f62 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80fb0:	4a24      	ldr	r2, [pc, #144]	; (81044 <SystemCoreClockUpdate+0x10c>)
   80fb2:	4b21      	ldr	r3, [pc, #132]	; (81038 <SystemCoreClockUpdate+0x100>)
   80fb4:	601a      	str	r2, [r3, #0]
				break;
   80fb6:	e7d4      	b.n	80f62 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80fb8:	4b1d      	ldr	r3, [pc, #116]	; (81030 <SystemCoreClockUpdate+0xf8>)
   80fba:	6a1b      	ldr	r3, [r3, #32]
   80fbc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80fc0:	d00c      	beq.n	80fdc <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80fc2:	4a1e      	ldr	r2, [pc, #120]	; (8103c <SystemCoreClockUpdate+0x104>)
   80fc4:	4b1c      	ldr	r3, [pc, #112]	; (81038 <SystemCoreClockUpdate+0x100>)
   80fc6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80fc8:	4b19      	ldr	r3, [pc, #100]	; (81030 <SystemCoreClockUpdate+0xf8>)
   80fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80fcc:	f003 0303 	and.w	r3, r3, #3
   80fd0:	2b02      	cmp	r3, #2
   80fd2:	d016      	beq.n	81002 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80fd4:	4a1c      	ldr	r2, [pc, #112]	; (81048 <SystemCoreClockUpdate+0x110>)
   80fd6:	4b18      	ldr	r3, [pc, #96]	; (81038 <SystemCoreClockUpdate+0x100>)
   80fd8:	601a      	str	r2, [r3, #0]
   80fda:	e7c2      	b.n	80f62 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80fdc:	4a18      	ldr	r2, [pc, #96]	; (81040 <SystemCoreClockUpdate+0x108>)
   80fde:	4b16      	ldr	r3, [pc, #88]	; (81038 <SystemCoreClockUpdate+0x100>)
   80fe0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80fe2:	4b13      	ldr	r3, [pc, #76]	; (81030 <SystemCoreClockUpdate+0xf8>)
   80fe4:	6a1b      	ldr	r3, [r3, #32]
   80fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80fea:	2b10      	cmp	r3, #16
   80fec:	d005      	beq.n	80ffa <SystemCoreClockUpdate+0xc2>
   80fee:	2b20      	cmp	r3, #32
   80ff0:	d1ea      	bne.n	80fc8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80ff2:	4a12      	ldr	r2, [pc, #72]	; (8103c <SystemCoreClockUpdate+0x104>)
   80ff4:	4b10      	ldr	r3, [pc, #64]	; (81038 <SystemCoreClockUpdate+0x100>)
   80ff6:	601a      	str	r2, [r3, #0]
				break;
   80ff8:	e7e6      	b.n	80fc8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80ffa:	4a12      	ldr	r2, [pc, #72]	; (81044 <SystemCoreClockUpdate+0x10c>)
   80ffc:	4b0e      	ldr	r3, [pc, #56]	; (81038 <SystemCoreClockUpdate+0x100>)
   80ffe:	601a      	str	r2, [r3, #0]
				break;
   81000:	e7e2      	b.n	80fc8 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81002:	4a0b      	ldr	r2, [pc, #44]	; (81030 <SystemCoreClockUpdate+0xf8>)
   81004:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81006:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81008:	480b      	ldr	r0, [pc, #44]	; (81038 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8100a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8100e:	6803      	ldr	r3, [r0, #0]
   81010:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81014:	b2d2      	uxtb	r2, r2
   81016:	fbb3 f3f2 	udiv	r3, r3, r2
   8101a:	6003      	str	r3, [r0, #0]
   8101c:	e7a1      	b.n	80f62 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8101e:	4a06      	ldr	r2, [pc, #24]	; (81038 <SystemCoreClockUpdate+0x100>)
   81020:	6813      	ldr	r3, [r2, #0]
   81022:	490a      	ldr	r1, [pc, #40]	; (8104c <SystemCoreClockUpdate+0x114>)
   81024:	fba1 1303 	umull	r1, r3, r1, r3
   81028:	085b      	lsrs	r3, r3, #1
   8102a:	6013      	str	r3, [r2, #0]
   8102c:	4770      	bx	lr
   8102e:	bf00      	nop
   81030:	400e0600 	.word	0x400e0600
   81034:	400e1a10 	.word	0x400e1a10
   81038:	20070134 	.word	0x20070134
   8103c:	00b71b00 	.word	0x00b71b00
   81040:	003d0900 	.word	0x003d0900
   81044:	007a1200 	.word	0x007a1200
   81048:	0e4e1c00 	.word	0x0e4e1c00
   8104c:	aaaaaaab 	.word	0xaaaaaaab

00081050 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81050:	4b0a      	ldr	r3, [pc, #40]	; (8107c <_sbrk+0x2c>)
   81052:	681b      	ldr	r3, [r3, #0]
   81054:	b153      	cbz	r3, 8106c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   81056:	4b09      	ldr	r3, [pc, #36]	; (8107c <_sbrk+0x2c>)
   81058:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8105a:	181a      	adds	r2, r3, r0
   8105c:	4908      	ldr	r1, [pc, #32]	; (81080 <_sbrk+0x30>)
   8105e:	4291      	cmp	r1, r2
   81060:	db08      	blt.n	81074 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   81062:	4610      	mov	r0, r2
   81064:	4a05      	ldr	r2, [pc, #20]	; (8107c <_sbrk+0x2c>)
   81066:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81068:	4618      	mov	r0, r3
   8106a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   8106c:	4a05      	ldr	r2, [pc, #20]	; (81084 <_sbrk+0x34>)
   8106e:	4b03      	ldr	r3, [pc, #12]	; (8107c <_sbrk+0x2c>)
   81070:	601a      	str	r2, [r3, #0]
   81072:	e7f0      	b.n	81056 <_sbrk+0x6>
		return (caddr_t) -1;	
   81074:	f04f 30ff 	mov.w	r0, #4294967295
}
   81078:	4770      	bx	lr
   8107a:	bf00      	nop
   8107c:	20070cac 	.word	0x20070cac
   81080:	20087ffc 	.word	0x20087ffc
   81084:	20072d28 	.word	0x20072d28

00081088 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81088:	f04f 30ff 	mov.w	r0, #4294967295
   8108c:	4770      	bx	lr

0008108e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8108e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81092:	604b      	str	r3, [r1, #4]

	return 0;
}
   81094:	2000      	movs	r0, #0
   81096:	4770      	bx	lr

00081098 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81098:	2001      	movs	r0, #1
   8109a:	4770      	bx	lr

0008109c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8109c:	2000      	movs	r0, #0
   8109e:	4770      	bx	lr

000810a0 <main>:
	.length =10,	//pakcket length
};

	
int main (void)
{
   810a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	board_init();
   810a4:	4b19      	ldr	r3, [pc, #100]	; (8110c <main+0x6c>)
   810a6:	4798      	blx	r3
	sysclk_init();
   810a8:	4b19      	ldr	r3, [pc, #100]	; (81110 <main+0x70>)
   810aa:	4798      	blx	r3
   810ac:	200b      	movs	r0, #11
   810ae:	4c19      	ldr	r4, [pc, #100]	; (81114 <main+0x74>)
   810b0:	47a0      	blx	r4
   810b2:	200c      	movs	r0, #12
   810b4:	47a0      	blx	r4
   810b6:	200d      	movs	r0, #13
   810b8:	47a0      	blx	r4
   810ba:	200e      	movs	r0, #14
   810bc:	47a0      	blx	r4
	ioport_init();
	delayInit();
   810be:	4b16      	ldr	r3, [pc, #88]	; (81118 <main+0x78>)
   810c0:	4798      	blx	r3
	configureConsole();
   810c2:	4b16      	ldr	r3, [pc, #88]	; (8111c <main+0x7c>)
   810c4:	4798      	blx	r3
	Twi_master_init(TWI1);
   810c6:	4816      	ldr	r0, [pc, #88]	; (81120 <main+0x80>)
   810c8:	4b16      	ldr	r3, [pc, #88]	; (81124 <main+0x84>)
   810ca:	4798      	blx	r3
	while (1)
	{
 		printf("--Arduino Due Master--\n");
   810cc:	f8df 9074 	ldr.w	r9, [pc, #116]	; 81144 <main+0xa4>
   810d0:	4d15      	ldr	r5, [pc, #84]	; (81128 <main+0x88>)
 		printf("---------------------------\n");
   810d2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 81148 <main+0xa8>
   810d6:	e003      	b.n	810e0 <main+0x40>
		I2C_master_read(TWI1,&packet_pos);
 		printf("received Packet from Mega:[");
 		for(int i = 0; i < 10; i++){
			printf("%d ", data_position[i]);
 		}
		printf("]\n");	
   810d8:	4814      	ldr	r0, [pc, #80]	; (8112c <main+0x8c>)
   810da:	47a8      	blx	r5
//		delayMicroseconds(100000);
// 		x=master_read_cmd(TWI1);
// 		printf("received cmd from Uno:%d\n",x);
		printf("---------------------------\n");
   810dc:	4640      	mov	r0, r8
   810de:	47a8      	blx	r5
 		printf("--Arduino Due Master--\n");
   810e0:	4648      	mov	r0, r9
   810e2:	47a8      	blx	r5
 		printf("---------------------------\n");
   810e4:	4640      	mov	r0, r8
   810e6:	47a8      	blx	r5
		I2C_master_read(TWI1,&packet_pos);
   810e8:	4911      	ldr	r1, [pc, #68]	; (81130 <main+0x90>)
   810ea:	480d      	ldr	r0, [pc, #52]	; (81120 <main+0x80>)
   810ec:	4b11      	ldr	r3, [pc, #68]	; (81134 <main+0x94>)
   810ee:	4798      	blx	r3
 		printf("received Packet from Mega:[");
   810f0:	4811      	ldr	r0, [pc, #68]	; (81138 <main+0x98>)
   810f2:	47a8      	blx	r5
   810f4:	4c11      	ldr	r4, [pc, #68]	; (8113c <main+0x9c>)
   810f6:	f104 070a 	add.w	r7, r4, #10
			printf("%d ", data_position[i]);
   810fa:	4e11      	ldr	r6, [pc, #68]	; (81140 <main+0xa0>)
   810fc:	f814 1b01 	ldrb.w	r1, [r4], #1
   81100:	4630      	mov	r0, r6
   81102:	47a8      	blx	r5
 		for(int i = 0; i < 10; i++){
   81104:	42bc      	cmp	r4, r7
   81106:	d1f9      	bne.n	810fc <main+0x5c>
   81108:	e7e6      	b.n	810d8 <main+0x38>
   8110a:	bf00      	nop
   8110c:	00080a15 	.word	0x00080a15
   81110:	000809b1 	.word	0x000809b1
   81114:	00080e49 	.word	0x00080e49
   81118:	000801c5 	.word	0x000801c5
   8111c:	000807c5 	.word	0x000807c5
   81120:	40090000 	.word	0x40090000
   81124:	00080201 	.word	0x00080201
   81128:	0008119d 	.word	0x0008119d
   8112c:	00084024 	.word	0x00084024
   81130:	20070138 	.word	0x20070138
   81134:	00080285 	.word	0x00080285
   81138:	00084004 	.word	0x00084004
   8113c:	20070cb0 	.word	0x20070cb0
   81140:	00084020 	.word	0x00084020
   81144:	00083fcc 	.word	0x00083fcc
   81148:	00083fe4 	.word	0x00083fe4

0008114c <__libc_init_array>:
   8114c:	b570      	push	{r4, r5, r6, lr}
   8114e:	4e0f      	ldr	r6, [pc, #60]	; (8118c <__libc_init_array+0x40>)
   81150:	4d0f      	ldr	r5, [pc, #60]	; (81190 <__libc_init_array+0x44>)
   81152:	1b76      	subs	r6, r6, r5
   81154:	10b6      	asrs	r6, r6, #2
   81156:	bf18      	it	ne
   81158:	2400      	movne	r4, #0
   8115a:	d005      	beq.n	81168 <__libc_init_array+0x1c>
   8115c:	3401      	adds	r4, #1
   8115e:	f855 3b04 	ldr.w	r3, [r5], #4
   81162:	4798      	blx	r3
   81164:	42a6      	cmp	r6, r4
   81166:	d1f9      	bne.n	8115c <__libc_init_array+0x10>
   81168:	4e0a      	ldr	r6, [pc, #40]	; (81194 <__libc_init_array+0x48>)
   8116a:	4d0b      	ldr	r5, [pc, #44]	; (81198 <__libc_init_array+0x4c>)
   8116c:	f003 f810 	bl	84190 <_init>
   81170:	1b76      	subs	r6, r6, r5
   81172:	10b6      	asrs	r6, r6, #2
   81174:	bf18      	it	ne
   81176:	2400      	movne	r4, #0
   81178:	d006      	beq.n	81188 <__libc_init_array+0x3c>
   8117a:	3401      	adds	r4, #1
   8117c:	f855 3b04 	ldr.w	r3, [r5], #4
   81180:	4798      	blx	r3
   81182:	42a6      	cmp	r6, r4
   81184:	d1f9      	bne.n	8117a <__libc_init_array+0x2e>
   81186:	bd70      	pop	{r4, r5, r6, pc}
   81188:	bd70      	pop	{r4, r5, r6, pc}
   8118a:	bf00      	nop
   8118c:	0008419c 	.word	0x0008419c
   81190:	0008419c 	.word	0x0008419c
   81194:	000841a4 	.word	0x000841a4
   81198:	0008419c 	.word	0x0008419c

0008119c <iprintf>:
   8119c:	b40f      	push	{r0, r1, r2, r3}
   8119e:	b510      	push	{r4, lr}
   811a0:	4b07      	ldr	r3, [pc, #28]	; (811c0 <iprintf+0x24>)
   811a2:	b082      	sub	sp, #8
   811a4:	ac04      	add	r4, sp, #16
   811a6:	f854 2b04 	ldr.w	r2, [r4], #4
   811aa:	6818      	ldr	r0, [r3, #0]
   811ac:	4623      	mov	r3, r4
   811ae:	6881      	ldr	r1, [r0, #8]
   811b0:	9401      	str	r4, [sp, #4]
   811b2:	f000 fa09 	bl	815c8 <_vfiprintf_r>
   811b6:	b002      	add	sp, #8
   811b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   811bc:	b004      	add	sp, #16
   811be:	4770      	bx	lr
   811c0:	2007014c 	.word	0x2007014c

000811c4 <memcpy>:
   811c4:	4684      	mov	ip, r0
   811c6:	ea41 0300 	orr.w	r3, r1, r0
   811ca:	f013 0303 	ands.w	r3, r3, #3
   811ce:	d149      	bne.n	81264 <memcpy+0xa0>
   811d0:	3a40      	subs	r2, #64	; 0x40
   811d2:	d323      	bcc.n	8121c <memcpy+0x58>
   811d4:	680b      	ldr	r3, [r1, #0]
   811d6:	6003      	str	r3, [r0, #0]
   811d8:	684b      	ldr	r3, [r1, #4]
   811da:	6043      	str	r3, [r0, #4]
   811dc:	688b      	ldr	r3, [r1, #8]
   811de:	6083      	str	r3, [r0, #8]
   811e0:	68cb      	ldr	r3, [r1, #12]
   811e2:	60c3      	str	r3, [r0, #12]
   811e4:	690b      	ldr	r3, [r1, #16]
   811e6:	6103      	str	r3, [r0, #16]
   811e8:	694b      	ldr	r3, [r1, #20]
   811ea:	6143      	str	r3, [r0, #20]
   811ec:	698b      	ldr	r3, [r1, #24]
   811ee:	6183      	str	r3, [r0, #24]
   811f0:	69cb      	ldr	r3, [r1, #28]
   811f2:	61c3      	str	r3, [r0, #28]
   811f4:	6a0b      	ldr	r3, [r1, #32]
   811f6:	6203      	str	r3, [r0, #32]
   811f8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   811fa:	6243      	str	r3, [r0, #36]	; 0x24
   811fc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   811fe:	6283      	str	r3, [r0, #40]	; 0x28
   81200:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81202:	62c3      	str	r3, [r0, #44]	; 0x2c
   81204:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81206:	6303      	str	r3, [r0, #48]	; 0x30
   81208:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8120a:	6343      	str	r3, [r0, #52]	; 0x34
   8120c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8120e:	6383      	str	r3, [r0, #56]	; 0x38
   81210:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81212:	63c3      	str	r3, [r0, #60]	; 0x3c
   81214:	3040      	adds	r0, #64	; 0x40
   81216:	3140      	adds	r1, #64	; 0x40
   81218:	3a40      	subs	r2, #64	; 0x40
   8121a:	d2db      	bcs.n	811d4 <memcpy+0x10>
   8121c:	3230      	adds	r2, #48	; 0x30
   8121e:	d30b      	bcc.n	81238 <memcpy+0x74>
   81220:	680b      	ldr	r3, [r1, #0]
   81222:	6003      	str	r3, [r0, #0]
   81224:	684b      	ldr	r3, [r1, #4]
   81226:	6043      	str	r3, [r0, #4]
   81228:	688b      	ldr	r3, [r1, #8]
   8122a:	6083      	str	r3, [r0, #8]
   8122c:	68cb      	ldr	r3, [r1, #12]
   8122e:	60c3      	str	r3, [r0, #12]
   81230:	3010      	adds	r0, #16
   81232:	3110      	adds	r1, #16
   81234:	3a10      	subs	r2, #16
   81236:	d2f3      	bcs.n	81220 <memcpy+0x5c>
   81238:	320c      	adds	r2, #12
   8123a:	d305      	bcc.n	81248 <memcpy+0x84>
   8123c:	f851 3b04 	ldr.w	r3, [r1], #4
   81240:	f840 3b04 	str.w	r3, [r0], #4
   81244:	3a04      	subs	r2, #4
   81246:	d2f9      	bcs.n	8123c <memcpy+0x78>
   81248:	3204      	adds	r2, #4
   8124a:	d008      	beq.n	8125e <memcpy+0x9a>
   8124c:	07d2      	lsls	r2, r2, #31
   8124e:	bf1c      	itt	ne
   81250:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81254:	f800 3b01 	strbne.w	r3, [r0], #1
   81258:	d301      	bcc.n	8125e <memcpy+0x9a>
   8125a:	880b      	ldrh	r3, [r1, #0]
   8125c:	8003      	strh	r3, [r0, #0]
   8125e:	4660      	mov	r0, ip
   81260:	4770      	bx	lr
   81262:	bf00      	nop
   81264:	2a08      	cmp	r2, #8
   81266:	d313      	bcc.n	81290 <memcpy+0xcc>
   81268:	078b      	lsls	r3, r1, #30
   8126a:	d0b1      	beq.n	811d0 <memcpy+0xc>
   8126c:	f010 0303 	ands.w	r3, r0, #3
   81270:	d0ae      	beq.n	811d0 <memcpy+0xc>
   81272:	f1c3 0304 	rsb	r3, r3, #4
   81276:	1ad2      	subs	r2, r2, r3
   81278:	07db      	lsls	r3, r3, #31
   8127a:	bf1c      	itt	ne
   8127c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81280:	f800 3b01 	strbne.w	r3, [r0], #1
   81284:	d3a4      	bcc.n	811d0 <memcpy+0xc>
   81286:	f831 3b02 	ldrh.w	r3, [r1], #2
   8128a:	f820 3b02 	strh.w	r3, [r0], #2
   8128e:	e79f      	b.n	811d0 <memcpy+0xc>
   81290:	3a04      	subs	r2, #4
   81292:	d3d9      	bcc.n	81248 <memcpy+0x84>
   81294:	3a01      	subs	r2, #1
   81296:	f811 3b01 	ldrb.w	r3, [r1], #1
   8129a:	f800 3b01 	strb.w	r3, [r0], #1
   8129e:	d2f9      	bcs.n	81294 <memcpy+0xd0>
   812a0:	780b      	ldrb	r3, [r1, #0]
   812a2:	7003      	strb	r3, [r0, #0]
   812a4:	784b      	ldrb	r3, [r1, #1]
   812a6:	7043      	strb	r3, [r0, #1]
   812a8:	788b      	ldrb	r3, [r1, #2]
   812aa:	7083      	strb	r3, [r0, #2]
   812ac:	4660      	mov	r0, ip
   812ae:	4770      	bx	lr

000812b0 <memset>:
   812b0:	b470      	push	{r4, r5, r6}
   812b2:	0786      	lsls	r6, r0, #30
   812b4:	d046      	beq.n	81344 <memset+0x94>
   812b6:	1e54      	subs	r4, r2, #1
   812b8:	2a00      	cmp	r2, #0
   812ba:	d041      	beq.n	81340 <memset+0x90>
   812bc:	b2ca      	uxtb	r2, r1
   812be:	4603      	mov	r3, r0
   812c0:	e002      	b.n	812c8 <memset+0x18>
   812c2:	f114 34ff 	adds.w	r4, r4, #4294967295
   812c6:	d33b      	bcc.n	81340 <memset+0x90>
   812c8:	f803 2b01 	strb.w	r2, [r3], #1
   812cc:	079d      	lsls	r5, r3, #30
   812ce:	d1f8      	bne.n	812c2 <memset+0x12>
   812d0:	2c03      	cmp	r4, #3
   812d2:	d92e      	bls.n	81332 <memset+0x82>
   812d4:	b2cd      	uxtb	r5, r1
   812d6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   812da:	2c0f      	cmp	r4, #15
   812dc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   812e0:	d919      	bls.n	81316 <memset+0x66>
   812e2:	4626      	mov	r6, r4
   812e4:	f103 0210 	add.w	r2, r3, #16
   812e8:	3e10      	subs	r6, #16
   812ea:	2e0f      	cmp	r6, #15
   812ec:	f842 5c10 	str.w	r5, [r2, #-16]
   812f0:	f842 5c0c 	str.w	r5, [r2, #-12]
   812f4:	f842 5c08 	str.w	r5, [r2, #-8]
   812f8:	f842 5c04 	str.w	r5, [r2, #-4]
   812fc:	f102 0210 	add.w	r2, r2, #16
   81300:	d8f2      	bhi.n	812e8 <memset+0x38>
   81302:	f1a4 0210 	sub.w	r2, r4, #16
   81306:	f022 020f 	bic.w	r2, r2, #15
   8130a:	f004 040f 	and.w	r4, r4, #15
   8130e:	3210      	adds	r2, #16
   81310:	2c03      	cmp	r4, #3
   81312:	4413      	add	r3, r2
   81314:	d90d      	bls.n	81332 <memset+0x82>
   81316:	461e      	mov	r6, r3
   81318:	4622      	mov	r2, r4
   8131a:	3a04      	subs	r2, #4
   8131c:	2a03      	cmp	r2, #3
   8131e:	f846 5b04 	str.w	r5, [r6], #4
   81322:	d8fa      	bhi.n	8131a <memset+0x6a>
   81324:	1f22      	subs	r2, r4, #4
   81326:	f022 0203 	bic.w	r2, r2, #3
   8132a:	3204      	adds	r2, #4
   8132c:	4413      	add	r3, r2
   8132e:	f004 0403 	and.w	r4, r4, #3
   81332:	b12c      	cbz	r4, 81340 <memset+0x90>
   81334:	b2c9      	uxtb	r1, r1
   81336:	441c      	add	r4, r3
   81338:	f803 1b01 	strb.w	r1, [r3], #1
   8133c:	429c      	cmp	r4, r3
   8133e:	d1fb      	bne.n	81338 <memset+0x88>
   81340:	bc70      	pop	{r4, r5, r6}
   81342:	4770      	bx	lr
   81344:	4614      	mov	r4, r2
   81346:	4603      	mov	r3, r0
   81348:	e7c2      	b.n	812d0 <memset+0x20>
   8134a:	bf00      	nop

0008134c <setbuf>:
   8134c:	2900      	cmp	r1, #0
   8134e:	bf0c      	ite	eq
   81350:	2202      	moveq	r2, #2
   81352:	2200      	movne	r2, #0
   81354:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81358:	f000 b800 	b.w	8135c <setvbuf>

0008135c <setvbuf>:
   8135c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81360:	4d61      	ldr	r5, [pc, #388]	; (814e8 <setvbuf+0x18c>)
   81362:	b083      	sub	sp, #12
   81364:	682d      	ldr	r5, [r5, #0]
   81366:	4604      	mov	r4, r0
   81368:	460f      	mov	r7, r1
   8136a:	4690      	mov	r8, r2
   8136c:	461e      	mov	r6, r3
   8136e:	b115      	cbz	r5, 81376 <setvbuf+0x1a>
   81370:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81372:	2b00      	cmp	r3, #0
   81374:	d064      	beq.n	81440 <setvbuf+0xe4>
   81376:	f1b8 0f02 	cmp.w	r8, #2
   8137a:	d006      	beq.n	8138a <setvbuf+0x2e>
   8137c:	f1b8 0f01 	cmp.w	r8, #1
   81380:	f200 809f 	bhi.w	814c2 <setvbuf+0x166>
   81384:	2e00      	cmp	r6, #0
   81386:	f2c0 809c 	blt.w	814c2 <setvbuf+0x166>
   8138a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8138c:	07d8      	lsls	r0, r3, #31
   8138e:	d534      	bpl.n	813fa <setvbuf+0x9e>
   81390:	4621      	mov	r1, r4
   81392:	4628      	mov	r0, r5
   81394:	f001 f8b0 	bl	824f8 <_fflush_r>
   81398:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8139a:	b141      	cbz	r1, 813ae <setvbuf+0x52>
   8139c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   813a0:	4299      	cmp	r1, r3
   813a2:	d002      	beq.n	813aa <setvbuf+0x4e>
   813a4:	4628      	mov	r0, r5
   813a6:	f001 fa25 	bl	827f4 <_free_r>
   813aa:	2300      	movs	r3, #0
   813ac:	6323      	str	r3, [r4, #48]	; 0x30
   813ae:	2200      	movs	r2, #0
   813b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   813b4:	61a2      	str	r2, [r4, #24]
   813b6:	6062      	str	r2, [r4, #4]
   813b8:	061a      	lsls	r2, r3, #24
   813ba:	d43a      	bmi.n	81432 <setvbuf+0xd6>
   813bc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   813c0:	f023 0303 	bic.w	r3, r3, #3
   813c4:	f1b8 0f02 	cmp.w	r8, #2
   813c8:	81a3      	strh	r3, [r4, #12]
   813ca:	d01d      	beq.n	81408 <setvbuf+0xac>
   813cc:	ab01      	add	r3, sp, #4
   813ce:	466a      	mov	r2, sp
   813d0:	4621      	mov	r1, r4
   813d2:	4628      	mov	r0, r5
   813d4:	f001 fcac 	bl	82d30 <__swhatbuf_r>
   813d8:	89a3      	ldrh	r3, [r4, #12]
   813da:	4318      	orrs	r0, r3
   813dc:	81a0      	strh	r0, [r4, #12]
   813de:	2e00      	cmp	r6, #0
   813e0:	d132      	bne.n	81448 <setvbuf+0xec>
   813e2:	9e00      	ldr	r6, [sp, #0]
   813e4:	4630      	mov	r0, r6
   813e6:	f001 fd1b 	bl	82e20 <malloc>
   813ea:	4607      	mov	r7, r0
   813ec:	2800      	cmp	r0, #0
   813ee:	d06b      	beq.n	814c8 <setvbuf+0x16c>
   813f0:	89a3      	ldrh	r3, [r4, #12]
   813f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   813f6:	81a3      	strh	r3, [r4, #12]
   813f8:	e028      	b.n	8144c <setvbuf+0xf0>
   813fa:	89a3      	ldrh	r3, [r4, #12]
   813fc:	0599      	lsls	r1, r3, #22
   813fe:	d4c7      	bmi.n	81390 <setvbuf+0x34>
   81400:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81402:	f001 fc91 	bl	82d28 <__retarget_lock_acquire_recursive>
   81406:	e7c3      	b.n	81390 <setvbuf+0x34>
   81408:	2500      	movs	r5, #0
   8140a:	2600      	movs	r6, #0
   8140c:	2001      	movs	r0, #1
   8140e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81410:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81414:	f043 0302 	orr.w	r3, r3, #2
   81418:	60a6      	str	r6, [r4, #8]
   8141a:	07ce      	lsls	r6, r1, #31
   8141c:	81a3      	strh	r3, [r4, #12]
   8141e:	6160      	str	r0, [r4, #20]
   81420:	6022      	str	r2, [r4, #0]
   81422:	6122      	str	r2, [r4, #16]
   81424:	d401      	bmi.n	8142a <setvbuf+0xce>
   81426:	0598      	lsls	r0, r3, #22
   81428:	d53e      	bpl.n	814a8 <setvbuf+0x14c>
   8142a:	4628      	mov	r0, r5
   8142c:	b003      	add	sp, #12
   8142e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81432:	6921      	ldr	r1, [r4, #16]
   81434:	4628      	mov	r0, r5
   81436:	f001 f9dd 	bl	827f4 <_free_r>
   8143a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8143e:	e7bd      	b.n	813bc <setvbuf+0x60>
   81440:	4628      	mov	r0, r5
   81442:	f001 f8b1 	bl	825a8 <__sinit>
   81446:	e796      	b.n	81376 <setvbuf+0x1a>
   81448:	2f00      	cmp	r7, #0
   8144a:	d0cb      	beq.n	813e4 <setvbuf+0x88>
   8144c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8144e:	2b00      	cmp	r3, #0
   81450:	d033      	beq.n	814ba <setvbuf+0x15e>
   81452:	9b00      	ldr	r3, [sp, #0]
   81454:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81458:	429e      	cmp	r6, r3
   8145a:	bf1c      	itt	ne
   8145c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81460:	81a2      	strhne	r2, [r4, #12]
   81462:	f1b8 0f01 	cmp.w	r8, #1
   81466:	bf04      	itt	eq
   81468:	f042 0201 	orreq.w	r2, r2, #1
   8146c:	81a2      	strheq	r2, [r4, #12]
   8146e:	b292      	uxth	r2, r2
   81470:	f012 0308 	ands.w	r3, r2, #8
   81474:	6027      	str	r7, [r4, #0]
   81476:	6127      	str	r7, [r4, #16]
   81478:	6166      	str	r6, [r4, #20]
   8147a:	d00e      	beq.n	8149a <setvbuf+0x13e>
   8147c:	07d1      	lsls	r1, r2, #31
   8147e:	d51a      	bpl.n	814b6 <setvbuf+0x15a>
   81480:	2300      	movs	r3, #0
   81482:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81484:	4276      	negs	r6, r6
   81486:	f015 0501 	ands.w	r5, r5, #1
   8148a:	61a6      	str	r6, [r4, #24]
   8148c:	60a3      	str	r3, [r4, #8]
   8148e:	d009      	beq.n	814a4 <setvbuf+0x148>
   81490:	2500      	movs	r5, #0
   81492:	4628      	mov	r0, r5
   81494:	b003      	add	sp, #12
   81496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8149a:	60a3      	str	r3, [r4, #8]
   8149c:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8149e:	f015 0501 	ands.w	r5, r5, #1
   814a2:	d1f5      	bne.n	81490 <setvbuf+0x134>
   814a4:	0593      	lsls	r3, r2, #22
   814a6:	d4c0      	bmi.n	8142a <setvbuf+0xce>
   814a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   814aa:	f001 fc3f 	bl	82d2c <__retarget_lock_release_recursive>
   814ae:	4628      	mov	r0, r5
   814b0:	b003      	add	sp, #12
   814b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   814b6:	60a6      	str	r6, [r4, #8]
   814b8:	e7f0      	b.n	8149c <setvbuf+0x140>
   814ba:	4628      	mov	r0, r5
   814bc:	f001 f874 	bl	825a8 <__sinit>
   814c0:	e7c7      	b.n	81452 <setvbuf+0xf6>
   814c2:	f04f 35ff 	mov.w	r5, #4294967295
   814c6:	e7b0      	b.n	8142a <setvbuf+0xce>
   814c8:	f8dd 9000 	ldr.w	r9, [sp]
   814cc:	45b1      	cmp	r9, r6
   814ce:	d004      	beq.n	814da <setvbuf+0x17e>
   814d0:	4648      	mov	r0, r9
   814d2:	f001 fca5 	bl	82e20 <malloc>
   814d6:	4607      	mov	r7, r0
   814d8:	b920      	cbnz	r0, 814e4 <setvbuf+0x188>
   814da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   814de:	f04f 35ff 	mov.w	r5, #4294967295
   814e2:	e792      	b.n	8140a <setvbuf+0xae>
   814e4:	464e      	mov	r6, r9
   814e6:	e783      	b.n	813f0 <setvbuf+0x94>
   814e8:	2007014c 	.word	0x2007014c

000814ec <strlen>:
   814ec:	f020 0103 	bic.w	r1, r0, #3
   814f0:	f010 0003 	ands.w	r0, r0, #3
   814f4:	f1c0 0000 	rsb	r0, r0, #0
   814f8:	f851 3b04 	ldr.w	r3, [r1], #4
   814fc:	f100 0c04 	add.w	ip, r0, #4
   81500:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81504:	f06f 0200 	mvn.w	r2, #0
   81508:	bf1c      	itt	ne
   8150a:	fa22 f20c 	lsrne.w	r2, r2, ip
   8150e:	4313      	orrne	r3, r2
   81510:	f04f 0c01 	mov.w	ip, #1
   81514:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81518:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   8151c:	eba3 020c 	sub.w	r2, r3, ip
   81520:	ea22 0203 	bic.w	r2, r2, r3
   81524:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81528:	bf04      	itt	eq
   8152a:	f851 3b04 	ldreq.w	r3, [r1], #4
   8152e:	3004      	addeq	r0, #4
   81530:	d0f4      	beq.n	8151c <strlen+0x30>
   81532:	f1c2 0100 	rsb	r1, r2, #0
   81536:	ea02 0201 	and.w	r2, r2, r1
   8153a:	fab2 f282 	clz	r2, r2
   8153e:	f1c2 021f 	rsb	r2, r2, #31
   81542:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   81546:	4770      	bx	lr

00081548 <__sprint_r.part.0>:
   81548:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8154c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8154e:	4693      	mov	fp, r2
   81550:	049c      	lsls	r4, r3, #18
   81552:	d52f      	bpl.n	815b4 <__sprint_r.part.0+0x6c>
   81554:	6893      	ldr	r3, [r2, #8]
   81556:	6812      	ldr	r2, [r2, #0]
   81558:	b353      	cbz	r3, 815b0 <__sprint_r.part.0+0x68>
   8155a:	460e      	mov	r6, r1
   8155c:	4607      	mov	r7, r0
   8155e:	f102 0908 	add.w	r9, r2, #8
   81562:	e919 0420 	ldmdb	r9, {r5, sl}
   81566:	ea5f 089a 	movs.w	r8, sl, lsr #2
   8156a:	d017      	beq.n	8159c <__sprint_r.part.0+0x54>
   8156c:	2400      	movs	r4, #0
   8156e:	3d04      	subs	r5, #4
   81570:	e001      	b.n	81576 <__sprint_r.part.0+0x2e>
   81572:	45a0      	cmp	r8, r4
   81574:	d010      	beq.n	81598 <__sprint_r.part.0+0x50>
   81576:	4632      	mov	r2, r6
   81578:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8157c:	4638      	mov	r0, r7
   8157e:	f001 f8b5 	bl	826ec <_fputwc_r>
   81582:	1c43      	adds	r3, r0, #1
   81584:	f104 0401 	add.w	r4, r4, #1
   81588:	d1f3      	bne.n	81572 <__sprint_r.part.0+0x2a>
   8158a:	2300      	movs	r3, #0
   8158c:	f8cb 3008 	str.w	r3, [fp, #8]
   81590:	f8cb 3004 	str.w	r3, [fp, #4]
   81594:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81598:	f8db 3008 	ldr.w	r3, [fp, #8]
   8159c:	f02a 0a03 	bic.w	sl, sl, #3
   815a0:	eba3 030a 	sub.w	r3, r3, sl
   815a4:	f8cb 3008 	str.w	r3, [fp, #8]
   815a8:	f109 0908 	add.w	r9, r9, #8
   815ac:	2b00      	cmp	r3, #0
   815ae:	d1d8      	bne.n	81562 <__sprint_r.part.0+0x1a>
   815b0:	2000      	movs	r0, #0
   815b2:	e7ea      	b.n	8158a <__sprint_r.part.0+0x42>
   815b4:	f001 fa04 	bl	829c0 <__sfvwrite_r>
   815b8:	2300      	movs	r3, #0
   815ba:	f8cb 3008 	str.w	r3, [fp, #8]
   815be:	f8cb 3004 	str.w	r3, [fp, #4]
   815c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   815c6:	bf00      	nop

000815c8 <_vfiprintf_r>:
   815c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   815cc:	b0ad      	sub	sp, #180	; 0xb4
   815ce:	461d      	mov	r5, r3
   815d0:	468b      	mov	fp, r1
   815d2:	4690      	mov	r8, r2
   815d4:	9307      	str	r3, [sp, #28]
   815d6:	9006      	str	r0, [sp, #24]
   815d8:	b118      	cbz	r0, 815e2 <_vfiprintf_r+0x1a>
   815da:	6b83      	ldr	r3, [r0, #56]	; 0x38
   815dc:	2b00      	cmp	r3, #0
   815de:	f000 80f3 	beq.w	817c8 <_vfiprintf_r+0x200>
   815e2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   815e6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   815ea:	07df      	lsls	r7, r3, #31
   815ec:	b281      	uxth	r1, r0
   815ee:	d402      	bmi.n	815f6 <_vfiprintf_r+0x2e>
   815f0:	058e      	lsls	r6, r1, #22
   815f2:	f140 80fc 	bpl.w	817ee <_vfiprintf_r+0x226>
   815f6:	048c      	lsls	r4, r1, #18
   815f8:	d40a      	bmi.n	81610 <_vfiprintf_r+0x48>
   815fa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   815fe:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81602:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81606:	f8ab 100c 	strh.w	r1, [fp, #12]
   8160a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8160e:	b289      	uxth	r1, r1
   81610:	0708      	lsls	r0, r1, #28
   81612:	f140 80b3 	bpl.w	8177c <_vfiprintf_r+0x1b4>
   81616:	f8db 3010 	ldr.w	r3, [fp, #16]
   8161a:	2b00      	cmp	r3, #0
   8161c:	f000 80ae 	beq.w	8177c <_vfiprintf_r+0x1b4>
   81620:	f001 031a 	and.w	r3, r1, #26
   81624:	2b0a      	cmp	r3, #10
   81626:	f000 80b5 	beq.w	81794 <_vfiprintf_r+0x1cc>
   8162a:	2300      	movs	r3, #0
   8162c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81630:	46d1      	mov	r9, sl
   81632:	930b      	str	r3, [sp, #44]	; 0x2c
   81634:	9303      	str	r3, [sp, #12]
   81636:	9311      	str	r3, [sp, #68]	; 0x44
   81638:	9310      	str	r3, [sp, #64]	; 0x40
   8163a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8163e:	f8cd b010 	str.w	fp, [sp, #16]
   81642:	f898 3000 	ldrb.w	r3, [r8]
   81646:	4644      	mov	r4, r8
   81648:	b1fb      	cbz	r3, 8168a <_vfiprintf_r+0xc2>
   8164a:	2b25      	cmp	r3, #37	; 0x25
   8164c:	d102      	bne.n	81654 <_vfiprintf_r+0x8c>
   8164e:	e01c      	b.n	8168a <_vfiprintf_r+0xc2>
   81650:	2b25      	cmp	r3, #37	; 0x25
   81652:	d003      	beq.n	8165c <_vfiprintf_r+0x94>
   81654:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81658:	2b00      	cmp	r3, #0
   8165a:	d1f9      	bne.n	81650 <_vfiprintf_r+0x88>
   8165c:	eba4 0508 	sub.w	r5, r4, r8
   81660:	b19d      	cbz	r5, 8168a <_vfiprintf_r+0xc2>
   81662:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81664:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81666:	3301      	adds	r3, #1
   81668:	442a      	add	r2, r5
   8166a:	2b07      	cmp	r3, #7
   8166c:	f8c9 8000 	str.w	r8, [r9]
   81670:	f8c9 5004 	str.w	r5, [r9, #4]
   81674:	9211      	str	r2, [sp, #68]	; 0x44
   81676:	9310      	str	r3, [sp, #64]	; 0x40
   81678:	dd7a      	ble.n	81770 <_vfiprintf_r+0x1a8>
   8167a:	2a00      	cmp	r2, #0
   8167c:	f040 84b5 	bne.w	81fea <_vfiprintf_r+0xa22>
   81680:	46d1      	mov	r9, sl
   81682:	9b03      	ldr	r3, [sp, #12]
   81684:	9210      	str	r2, [sp, #64]	; 0x40
   81686:	442b      	add	r3, r5
   81688:	9303      	str	r3, [sp, #12]
   8168a:	7823      	ldrb	r3, [r4, #0]
   8168c:	2b00      	cmp	r3, #0
   8168e:	f000 83e5 	beq.w	81e5c <_vfiprintf_r+0x894>
   81692:	2000      	movs	r0, #0
   81694:	f04f 0300 	mov.w	r3, #0
   81698:	f104 0801 	add.w	r8, r4, #1
   8169c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   816a0:	7862      	ldrb	r2, [r4, #1]
   816a2:	4606      	mov	r6, r0
   816a4:	4605      	mov	r5, r0
   816a6:	4603      	mov	r3, r0
   816a8:	f04f 34ff 	mov.w	r4, #4294967295
   816ac:	f108 0801 	add.w	r8, r8, #1
   816b0:	f1a2 0120 	sub.w	r1, r2, #32
   816b4:	2958      	cmp	r1, #88	; 0x58
   816b6:	f200 82d9 	bhi.w	81c6c <_vfiprintf_r+0x6a4>
   816ba:	e8df f011 	tbh	[pc, r1, lsl #1]
   816be:	0228      	.short	0x0228
   816c0:	02d702d7 	.word	0x02d702d7
   816c4:	02d70230 	.word	0x02d70230
   816c8:	02d702d7 	.word	0x02d702d7
   816cc:	02d702d7 	.word	0x02d702d7
   816d0:	00a002d7 	.word	0x00a002d7
   816d4:	02d70288 	.word	0x02d70288
   816d8:	02b800a8 	.word	0x02b800a8
   816dc:	01a602d7 	.word	0x01a602d7
   816e0:	01ab01ab 	.word	0x01ab01ab
   816e4:	01ab01ab 	.word	0x01ab01ab
   816e8:	01ab01ab 	.word	0x01ab01ab
   816ec:	01ab01ab 	.word	0x01ab01ab
   816f0:	02d701ab 	.word	0x02d701ab
   816f4:	02d702d7 	.word	0x02d702d7
   816f8:	02d702d7 	.word	0x02d702d7
   816fc:	02d702d7 	.word	0x02d702d7
   81700:	02d702d7 	.word	0x02d702d7
   81704:	01b902d7 	.word	0x01b902d7
   81708:	02d702d7 	.word	0x02d702d7
   8170c:	02d702d7 	.word	0x02d702d7
   81710:	02d702d7 	.word	0x02d702d7
   81714:	02d702d7 	.word	0x02d702d7
   81718:	02d702d7 	.word	0x02d702d7
   8171c:	02d7019e 	.word	0x02d7019e
   81720:	02d702d7 	.word	0x02d702d7
   81724:	02d702d7 	.word	0x02d702d7
   81728:	02d701a2 	.word	0x02d701a2
   8172c:	025a02d7 	.word	0x025a02d7
   81730:	02d702d7 	.word	0x02d702d7
   81734:	02d702d7 	.word	0x02d702d7
   81738:	02d702d7 	.word	0x02d702d7
   8173c:	02d702d7 	.word	0x02d702d7
   81740:	02d702d7 	.word	0x02d702d7
   81744:	02220261 	.word	0x02220261
   81748:	02d702d7 	.word	0x02d702d7
   8174c:	027602d7 	.word	0x027602d7
   81750:	02d70222 	.word	0x02d70222
   81754:	027b02d7 	.word	0x027b02d7
   81758:	01fc02d7 	.word	0x01fc02d7
   8175c:	02100189 	.word	0x02100189
   81760:	02d702d2 	.word	0x02d702d2
   81764:	02d70295 	.word	0x02d70295
   81768:	02d700ad 	.word	0x02d700ad
   8176c:	023502d7 	.word	0x023502d7
   81770:	f109 0908 	add.w	r9, r9, #8
   81774:	9b03      	ldr	r3, [sp, #12]
   81776:	442b      	add	r3, r5
   81778:	9303      	str	r3, [sp, #12]
   8177a:	e786      	b.n	8168a <_vfiprintf_r+0xc2>
   8177c:	4659      	mov	r1, fp
   8177e:	9806      	ldr	r0, [sp, #24]
   81780:	f000 fdaa 	bl	822d8 <__swsetup_r>
   81784:	bb18      	cbnz	r0, 817ce <_vfiprintf_r+0x206>
   81786:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   8178a:	f001 031a 	and.w	r3, r1, #26
   8178e:	2b0a      	cmp	r3, #10
   81790:	f47f af4b 	bne.w	8162a <_vfiprintf_r+0x62>
   81794:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81798:	2b00      	cmp	r3, #0
   8179a:	f6ff af46 	blt.w	8162a <_vfiprintf_r+0x62>
   8179e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   817a2:	07db      	lsls	r3, r3, #31
   817a4:	d405      	bmi.n	817b2 <_vfiprintf_r+0x1ea>
   817a6:	058f      	lsls	r7, r1, #22
   817a8:	d403      	bmi.n	817b2 <_vfiprintf_r+0x1ea>
   817aa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   817ae:	f001 fabd 	bl	82d2c <__retarget_lock_release_recursive>
   817b2:	462b      	mov	r3, r5
   817b4:	4642      	mov	r2, r8
   817b6:	4659      	mov	r1, fp
   817b8:	9806      	ldr	r0, [sp, #24]
   817ba:	f000 fd49 	bl	82250 <__sbprintf>
   817be:	9003      	str	r0, [sp, #12]
   817c0:	9803      	ldr	r0, [sp, #12]
   817c2:	b02d      	add	sp, #180	; 0xb4
   817c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   817c8:	f000 feee 	bl	825a8 <__sinit>
   817cc:	e709      	b.n	815e2 <_vfiprintf_r+0x1a>
   817ce:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   817d2:	07d9      	lsls	r1, r3, #31
   817d4:	d404      	bmi.n	817e0 <_vfiprintf_r+0x218>
   817d6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   817da:	059a      	lsls	r2, r3, #22
   817dc:	f140 84ae 	bpl.w	8213c <_vfiprintf_r+0xb74>
   817e0:	f04f 33ff 	mov.w	r3, #4294967295
   817e4:	9303      	str	r3, [sp, #12]
   817e6:	9803      	ldr	r0, [sp, #12]
   817e8:	b02d      	add	sp, #180	; 0xb4
   817ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   817ee:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   817f2:	f001 fa99 	bl	82d28 <__retarget_lock_acquire_recursive>
   817f6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   817fa:	b281      	uxth	r1, r0
   817fc:	e6fb      	b.n	815f6 <_vfiprintf_r+0x2e>
   817fe:	9907      	ldr	r1, [sp, #28]
   81800:	460a      	mov	r2, r1
   81802:	680d      	ldr	r5, [r1, #0]
   81804:	3204      	adds	r2, #4
   81806:	2d00      	cmp	r5, #0
   81808:	9207      	str	r2, [sp, #28]
   8180a:	da02      	bge.n	81812 <_vfiprintf_r+0x24a>
   8180c:	426d      	negs	r5, r5
   8180e:	f043 0304 	orr.w	r3, r3, #4
   81812:	f898 2000 	ldrb.w	r2, [r8]
   81816:	e749      	b.n	816ac <_vfiprintf_r+0xe4>
   81818:	9508      	str	r5, [sp, #32]
   8181a:	069e      	lsls	r6, r3, #26
   8181c:	f100 845a 	bmi.w	820d4 <_vfiprintf_r+0xb0c>
   81820:	9907      	ldr	r1, [sp, #28]
   81822:	06dd      	lsls	r5, r3, #27
   81824:	460a      	mov	r2, r1
   81826:	f100 83ef 	bmi.w	82008 <_vfiprintf_r+0xa40>
   8182a:	0658      	lsls	r0, r3, #25
   8182c:	f140 83ec 	bpl.w	82008 <_vfiprintf_r+0xa40>
   81830:	2700      	movs	r7, #0
   81832:	2201      	movs	r2, #1
   81834:	880e      	ldrh	r6, [r1, #0]
   81836:	3104      	adds	r1, #4
   81838:	9107      	str	r1, [sp, #28]
   8183a:	f04f 0100 	mov.w	r1, #0
   8183e:	2500      	movs	r5, #0
   81840:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81844:	1c61      	adds	r1, r4, #1
   81846:	f000 8117 	beq.w	81a78 <_vfiprintf_r+0x4b0>
   8184a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   8184e:	9102      	str	r1, [sp, #8]
   81850:	ea56 0107 	orrs.w	r1, r6, r7
   81854:	f040 8115 	bne.w	81a82 <_vfiprintf_r+0x4ba>
   81858:	2c00      	cmp	r4, #0
   8185a:	f040 835b 	bne.w	81f14 <_vfiprintf_r+0x94c>
   8185e:	2a00      	cmp	r2, #0
   81860:	f040 83b6 	bne.w	81fd0 <_vfiprintf_r+0xa08>
   81864:	f013 0301 	ands.w	r3, r3, #1
   81868:	9305      	str	r3, [sp, #20]
   8186a:	f000 8455 	beq.w	82118 <_vfiprintf_r+0xb50>
   8186e:	2330      	movs	r3, #48	; 0x30
   81870:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81874:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81878:	9b05      	ldr	r3, [sp, #20]
   8187a:	42a3      	cmp	r3, r4
   8187c:	bfb8      	it	lt
   8187e:	4623      	movlt	r3, r4
   81880:	9301      	str	r3, [sp, #4]
   81882:	b10d      	cbz	r5, 81888 <_vfiprintf_r+0x2c0>
   81884:	3301      	adds	r3, #1
   81886:	9301      	str	r3, [sp, #4]
   81888:	9b02      	ldr	r3, [sp, #8]
   8188a:	f013 0302 	ands.w	r3, r3, #2
   8188e:	9309      	str	r3, [sp, #36]	; 0x24
   81890:	d002      	beq.n	81898 <_vfiprintf_r+0x2d0>
   81892:	9b01      	ldr	r3, [sp, #4]
   81894:	3302      	adds	r3, #2
   81896:	9301      	str	r3, [sp, #4]
   81898:	9b02      	ldr	r3, [sp, #8]
   8189a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8189e:	930a      	str	r3, [sp, #40]	; 0x28
   818a0:	f040 8215 	bne.w	81cce <_vfiprintf_r+0x706>
   818a4:	9b08      	ldr	r3, [sp, #32]
   818a6:	9a01      	ldr	r2, [sp, #4]
   818a8:	1a9d      	subs	r5, r3, r2
   818aa:	2d00      	cmp	r5, #0
   818ac:	f340 820f 	ble.w	81cce <_vfiprintf_r+0x706>
   818b0:	2d10      	cmp	r5, #16
   818b2:	f340 8484 	ble.w	821be <_vfiprintf_r+0xbf6>
   818b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   818b8:	46ce      	mov	lr, r9
   818ba:	2710      	movs	r7, #16
   818bc:	46a1      	mov	r9, r4
   818be:	9a11      	ldr	r2, [sp, #68]	; 0x44
   818c0:	4ec5      	ldr	r6, [pc, #788]	; (81bd8 <_vfiprintf_r+0x610>)
   818c2:	4619      	mov	r1, r3
   818c4:	9c06      	ldr	r4, [sp, #24]
   818c6:	e007      	b.n	818d8 <_vfiprintf_r+0x310>
   818c8:	f101 0c02 	add.w	ip, r1, #2
   818cc:	4601      	mov	r1, r0
   818ce:	f10e 0e08 	add.w	lr, lr, #8
   818d2:	3d10      	subs	r5, #16
   818d4:	2d10      	cmp	r5, #16
   818d6:	dd11      	ble.n	818fc <_vfiprintf_r+0x334>
   818d8:	1c48      	adds	r0, r1, #1
   818da:	3210      	adds	r2, #16
   818dc:	2807      	cmp	r0, #7
   818de:	9211      	str	r2, [sp, #68]	; 0x44
   818e0:	e88e 00c0 	stmia.w	lr, {r6, r7}
   818e4:	9010      	str	r0, [sp, #64]	; 0x40
   818e6:	ddef      	ble.n	818c8 <_vfiprintf_r+0x300>
   818e8:	2a00      	cmp	r2, #0
   818ea:	f040 81d9 	bne.w	81ca0 <_vfiprintf_r+0x6d8>
   818ee:	3d10      	subs	r5, #16
   818f0:	2d10      	cmp	r5, #16
   818f2:	4611      	mov	r1, r2
   818f4:	f04f 0c01 	mov.w	ip, #1
   818f8:	46d6      	mov	lr, sl
   818fa:	dced      	bgt.n	818d8 <_vfiprintf_r+0x310>
   818fc:	464c      	mov	r4, r9
   818fe:	4661      	mov	r1, ip
   81900:	46f1      	mov	r9, lr
   81902:	442a      	add	r2, r5
   81904:	2907      	cmp	r1, #7
   81906:	9211      	str	r2, [sp, #68]	; 0x44
   81908:	f8c9 6000 	str.w	r6, [r9]
   8190c:	f8c9 5004 	str.w	r5, [r9, #4]
   81910:	9110      	str	r1, [sp, #64]	; 0x40
   81912:	f300 82eb 	bgt.w	81eec <_vfiprintf_r+0x924>
   81916:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8191a:	f109 0908 	add.w	r9, r9, #8
   8191e:	1c48      	adds	r0, r1, #1
   81920:	2d00      	cmp	r5, #0
   81922:	f040 81dc 	bne.w	81cde <_vfiprintf_r+0x716>
   81926:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81928:	2b00      	cmp	r3, #0
   8192a:	f000 81f6 	beq.w	81d1a <_vfiprintf_r+0x752>
   8192e:	2102      	movs	r1, #2
   81930:	ab0e      	add	r3, sp, #56	; 0x38
   81932:	440a      	add	r2, r1
   81934:	2807      	cmp	r0, #7
   81936:	9211      	str	r2, [sp, #68]	; 0x44
   81938:	9010      	str	r0, [sp, #64]	; 0x40
   8193a:	f8c9 1004 	str.w	r1, [r9, #4]
   8193e:	f8c9 3000 	str.w	r3, [r9]
   81942:	f340 81e6 	ble.w	81d12 <_vfiprintf_r+0x74a>
   81946:	2a00      	cmp	r2, #0
   81948:	f040 8395 	bne.w	82076 <_vfiprintf_r+0xaae>
   8194c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8194e:	2001      	movs	r0, #1
   81950:	2b80      	cmp	r3, #128	; 0x80
   81952:	4611      	mov	r1, r2
   81954:	46d1      	mov	r9, sl
   81956:	f040 81e4 	bne.w	81d22 <_vfiprintf_r+0x75a>
   8195a:	9b08      	ldr	r3, [sp, #32]
   8195c:	9d01      	ldr	r5, [sp, #4]
   8195e:	1b5e      	subs	r6, r3, r5
   81960:	2e00      	cmp	r6, #0
   81962:	f340 81de 	ble.w	81d22 <_vfiprintf_r+0x75a>
   81966:	2e10      	cmp	r6, #16
   81968:	f340 843c 	ble.w	821e4 <_vfiprintf_r+0xc1c>
   8196c:	46cc      	mov	ip, r9
   8196e:	2710      	movs	r7, #16
   81970:	46a1      	mov	r9, r4
   81972:	4d9a      	ldr	r5, [pc, #616]	; (81bdc <_vfiprintf_r+0x614>)
   81974:	9c06      	ldr	r4, [sp, #24]
   81976:	e007      	b.n	81988 <_vfiprintf_r+0x3c0>
   81978:	f101 0e02 	add.w	lr, r1, #2
   8197c:	4601      	mov	r1, r0
   8197e:	f10c 0c08 	add.w	ip, ip, #8
   81982:	3e10      	subs	r6, #16
   81984:	2e10      	cmp	r6, #16
   81986:	dd11      	ble.n	819ac <_vfiprintf_r+0x3e4>
   81988:	1c48      	adds	r0, r1, #1
   8198a:	3210      	adds	r2, #16
   8198c:	2807      	cmp	r0, #7
   8198e:	9211      	str	r2, [sp, #68]	; 0x44
   81990:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81994:	9010      	str	r0, [sp, #64]	; 0x40
   81996:	ddef      	ble.n	81978 <_vfiprintf_r+0x3b0>
   81998:	2a00      	cmp	r2, #0
   8199a:	f040 829b 	bne.w	81ed4 <_vfiprintf_r+0x90c>
   8199e:	3e10      	subs	r6, #16
   819a0:	2e10      	cmp	r6, #16
   819a2:	f04f 0e01 	mov.w	lr, #1
   819a6:	4611      	mov	r1, r2
   819a8:	46d4      	mov	ip, sl
   819aa:	dced      	bgt.n	81988 <_vfiprintf_r+0x3c0>
   819ac:	464c      	mov	r4, r9
   819ae:	46e1      	mov	r9, ip
   819b0:	4432      	add	r2, r6
   819b2:	f1be 0f07 	cmp.w	lr, #7
   819b6:	9211      	str	r2, [sp, #68]	; 0x44
   819b8:	e889 0060 	stmia.w	r9, {r5, r6}
   819bc:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   819c0:	f300 8366 	bgt.w	82090 <_vfiprintf_r+0xac8>
   819c4:	f109 0908 	add.w	r9, r9, #8
   819c8:	f10e 0001 	add.w	r0, lr, #1
   819cc:	4671      	mov	r1, lr
   819ce:	e1a8      	b.n	81d22 <_vfiprintf_r+0x75a>
   819d0:	9508      	str	r5, [sp, #32]
   819d2:	f013 0220 	ands.w	r2, r3, #32
   819d6:	f040 8389 	bne.w	820ec <_vfiprintf_r+0xb24>
   819da:	f013 0110 	ands.w	r1, r3, #16
   819de:	f040 8319 	bne.w	82014 <_vfiprintf_r+0xa4c>
   819e2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   819e6:	f000 8315 	beq.w	82014 <_vfiprintf_r+0xa4c>
   819ea:	9807      	ldr	r0, [sp, #28]
   819ec:	460a      	mov	r2, r1
   819ee:	4601      	mov	r1, r0
   819f0:	3104      	adds	r1, #4
   819f2:	8806      	ldrh	r6, [r0, #0]
   819f4:	2700      	movs	r7, #0
   819f6:	9107      	str	r1, [sp, #28]
   819f8:	e71f      	b.n	8183a <_vfiprintf_r+0x272>
   819fa:	9508      	str	r5, [sp, #32]
   819fc:	f043 0310 	orr.w	r3, r3, #16
   81a00:	e7e7      	b.n	819d2 <_vfiprintf_r+0x40a>
   81a02:	9508      	str	r5, [sp, #32]
   81a04:	f043 0310 	orr.w	r3, r3, #16
   81a08:	e707      	b.n	8181a <_vfiprintf_r+0x252>
   81a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81a0e:	f898 2000 	ldrb.w	r2, [r8]
   81a12:	e64b      	b.n	816ac <_vfiprintf_r+0xe4>
   81a14:	2500      	movs	r5, #0
   81a16:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81a1a:	f818 2b01 	ldrb.w	r2, [r8], #1
   81a1e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81a22:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   81a26:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81a2a:	2909      	cmp	r1, #9
   81a2c:	d9f5      	bls.n	81a1a <_vfiprintf_r+0x452>
   81a2e:	e63f      	b.n	816b0 <_vfiprintf_r+0xe8>
   81a30:	9508      	str	r5, [sp, #32]
   81a32:	2800      	cmp	r0, #0
   81a34:	f040 8402 	bne.w	8223c <_vfiprintf_r+0xc74>
   81a38:	f043 0310 	orr.w	r3, r3, #16
   81a3c:	069e      	lsls	r6, r3, #26
   81a3e:	f100 833d 	bmi.w	820bc <_vfiprintf_r+0xaf4>
   81a42:	9907      	ldr	r1, [sp, #28]
   81a44:	06dd      	lsls	r5, r3, #27
   81a46:	460a      	mov	r2, r1
   81a48:	f100 82f0 	bmi.w	8202c <_vfiprintf_r+0xa64>
   81a4c:	0658      	lsls	r0, r3, #25
   81a4e:	f140 82ed 	bpl.w	8202c <_vfiprintf_r+0xa64>
   81a52:	f9b1 6000 	ldrsh.w	r6, [r1]
   81a56:	3204      	adds	r2, #4
   81a58:	17f7      	asrs	r7, r6, #31
   81a5a:	4630      	mov	r0, r6
   81a5c:	4639      	mov	r1, r7
   81a5e:	9207      	str	r2, [sp, #28]
   81a60:	2800      	cmp	r0, #0
   81a62:	f171 0200 	sbcs.w	r2, r1, #0
   81a66:	f2c0 835a 	blt.w	8211e <_vfiprintf_r+0xb56>
   81a6a:	1c61      	adds	r1, r4, #1
   81a6c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81a70:	f04f 0201 	mov.w	r2, #1
   81a74:	f47f aee9 	bne.w	8184a <_vfiprintf_r+0x282>
   81a78:	ea56 0107 	orrs.w	r1, r6, r7
   81a7c:	f000 824b 	beq.w	81f16 <_vfiprintf_r+0x94e>
   81a80:	9302      	str	r3, [sp, #8]
   81a82:	2a01      	cmp	r2, #1
   81a84:	f000 828a 	beq.w	81f9c <_vfiprintf_r+0x9d4>
   81a88:	2a02      	cmp	r2, #2
   81a8a:	f040 825a 	bne.w	81f42 <_vfiprintf_r+0x97a>
   81a8e:	46d3      	mov	fp, sl
   81a90:	980b      	ldr	r0, [sp, #44]	; 0x2c
   81a92:	0933      	lsrs	r3, r6, #4
   81a94:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81a98:	0939      	lsrs	r1, r7, #4
   81a9a:	f006 020f 	and.w	r2, r6, #15
   81a9e:	460f      	mov	r7, r1
   81aa0:	461e      	mov	r6, r3
   81aa2:	5c83      	ldrb	r3, [r0, r2]
   81aa4:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81aa8:	ea56 0307 	orrs.w	r3, r6, r7
   81aac:	d1f1      	bne.n	81a92 <_vfiprintf_r+0x4ca>
   81aae:	ebaa 030b 	sub.w	r3, sl, fp
   81ab2:	9305      	str	r3, [sp, #20]
   81ab4:	e6e0      	b.n	81878 <_vfiprintf_r+0x2b0>
   81ab6:	2800      	cmp	r0, #0
   81ab8:	f040 83bd 	bne.w	82236 <_vfiprintf_r+0xc6e>
   81abc:	0699      	lsls	r1, r3, #26
   81abe:	f100 8359 	bmi.w	82174 <_vfiprintf_r+0xbac>
   81ac2:	06da      	lsls	r2, r3, #27
   81ac4:	f100 80e5 	bmi.w	81c92 <_vfiprintf_r+0x6ca>
   81ac8:	065b      	lsls	r3, r3, #25
   81aca:	f140 80e2 	bpl.w	81c92 <_vfiprintf_r+0x6ca>
   81ace:	9a07      	ldr	r2, [sp, #28]
   81ad0:	6813      	ldr	r3, [r2, #0]
   81ad2:	3204      	adds	r2, #4
   81ad4:	9207      	str	r2, [sp, #28]
   81ad6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   81ada:	801a      	strh	r2, [r3, #0]
   81adc:	e5b1      	b.n	81642 <_vfiprintf_r+0x7a>
   81ade:	2278      	movs	r2, #120	; 0x78
   81ae0:	2130      	movs	r1, #48	; 0x30
   81ae2:	9508      	str	r5, [sp, #32]
   81ae4:	9d07      	ldr	r5, [sp, #28]
   81ae6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81aea:	1d2a      	adds	r2, r5, #4
   81aec:	9207      	str	r2, [sp, #28]
   81aee:	4a3c      	ldr	r2, [pc, #240]	; (81be0 <_vfiprintf_r+0x618>)
   81af0:	682e      	ldr	r6, [r5, #0]
   81af2:	920b      	str	r2, [sp, #44]	; 0x2c
   81af4:	f043 0302 	orr.w	r3, r3, #2
   81af8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81afc:	2700      	movs	r7, #0
   81afe:	2202      	movs	r2, #2
   81b00:	e69b      	b.n	8183a <_vfiprintf_r+0x272>
   81b02:	9508      	str	r5, [sp, #32]
   81b04:	2800      	cmp	r0, #0
   81b06:	d099      	beq.n	81a3c <_vfiprintf_r+0x474>
   81b08:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81b0c:	e796      	b.n	81a3c <_vfiprintf_r+0x474>
   81b0e:	f898 2000 	ldrb.w	r2, [r8]
   81b12:	2e00      	cmp	r6, #0
   81b14:	f47f adca 	bne.w	816ac <_vfiprintf_r+0xe4>
   81b18:	2001      	movs	r0, #1
   81b1a:	2620      	movs	r6, #32
   81b1c:	e5c6      	b.n	816ac <_vfiprintf_r+0xe4>
   81b1e:	f043 0301 	orr.w	r3, r3, #1
   81b22:	f898 2000 	ldrb.w	r2, [r8]
   81b26:	e5c1      	b.n	816ac <_vfiprintf_r+0xe4>
   81b28:	9508      	str	r5, [sp, #32]
   81b2a:	2800      	cmp	r0, #0
   81b2c:	f040 8380 	bne.w	82230 <_vfiprintf_r+0xc68>
   81b30:	492b      	ldr	r1, [pc, #172]	; (81be0 <_vfiprintf_r+0x618>)
   81b32:	910b      	str	r1, [sp, #44]	; 0x2c
   81b34:	069f      	lsls	r7, r3, #26
   81b36:	f100 82e5 	bmi.w	82104 <_vfiprintf_r+0xb3c>
   81b3a:	9807      	ldr	r0, [sp, #28]
   81b3c:	06de      	lsls	r6, r3, #27
   81b3e:	4601      	mov	r1, r0
   81b40:	f100 826f 	bmi.w	82022 <_vfiprintf_r+0xa5a>
   81b44:	065d      	lsls	r5, r3, #25
   81b46:	f140 826c 	bpl.w	82022 <_vfiprintf_r+0xa5a>
   81b4a:	2700      	movs	r7, #0
   81b4c:	3104      	adds	r1, #4
   81b4e:	8806      	ldrh	r6, [r0, #0]
   81b50:	9107      	str	r1, [sp, #28]
   81b52:	07d8      	lsls	r0, r3, #31
   81b54:	f140 8220 	bpl.w	81f98 <_vfiprintf_r+0x9d0>
   81b58:	ea56 0107 	orrs.w	r1, r6, r7
   81b5c:	f000 821c 	beq.w	81f98 <_vfiprintf_r+0x9d0>
   81b60:	2130      	movs	r1, #48	; 0x30
   81b62:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81b66:	f043 0302 	orr.w	r3, r3, #2
   81b6a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81b6e:	2202      	movs	r2, #2
   81b70:	e663      	b.n	8183a <_vfiprintf_r+0x272>
   81b72:	9508      	str	r5, [sp, #32]
   81b74:	2800      	cmp	r0, #0
   81b76:	f040 8355 	bne.w	82224 <_vfiprintf_r+0xc5c>
   81b7a:	491a      	ldr	r1, [pc, #104]	; (81be4 <_vfiprintf_r+0x61c>)
   81b7c:	910b      	str	r1, [sp, #44]	; 0x2c
   81b7e:	e7d9      	b.n	81b34 <_vfiprintf_r+0x56c>
   81b80:	2201      	movs	r2, #1
   81b82:	9807      	ldr	r0, [sp, #28]
   81b84:	4611      	mov	r1, r2
   81b86:	9201      	str	r2, [sp, #4]
   81b88:	6802      	ldr	r2, [r0, #0]
   81b8a:	f04f 0400 	mov.w	r4, #0
   81b8e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81b92:	4602      	mov	r2, r0
   81b94:	3204      	adds	r2, #4
   81b96:	9508      	str	r5, [sp, #32]
   81b98:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81b9c:	9105      	str	r1, [sp, #20]
   81b9e:	9207      	str	r2, [sp, #28]
   81ba0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81ba4:	9302      	str	r3, [sp, #8]
   81ba6:	2400      	movs	r4, #0
   81ba8:	e66e      	b.n	81888 <_vfiprintf_r+0x2c0>
   81baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81bae:	f898 2000 	ldrb.w	r2, [r8]
   81bb2:	e57b      	b.n	816ac <_vfiprintf_r+0xe4>
   81bb4:	f898 2000 	ldrb.w	r2, [r8]
   81bb8:	2a6c      	cmp	r2, #108	; 0x6c
   81bba:	bf03      	ittte	eq
   81bbc:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81bc0:	f043 0320 	orreq.w	r3, r3, #32
   81bc4:	f108 0801 	addeq.w	r8, r8, #1
   81bc8:	f043 0310 	orrne.w	r3, r3, #16
   81bcc:	e56e      	b.n	816ac <_vfiprintf_r+0xe4>
   81bce:	f898 2000 	ldrb.w	r2, [r8]
   81bd2:	2001      	movs	r0, #1
   81bd4:	262b      	movs	r6, #43	; 0x2b
   81bd6:	e569      	b.n	816ac <_vfiprintf_r+0xe4>
   81bd8:	0008405c 	.word	0x0008405c
   81bdc:	0008406c 	.word	0x0008406c
   81be0:	00084040 	.word	0x00084040
   81be4:	0008402c 	.word	0x0008402c
   81be8:	f04f 0200 	mov.w	r2, #0
   81bec:	9907      	ldr	r1, [sp, #28]
   81bee:	9508      	str	r5, [sp, #32]
   81bf0:	f8d1 b000 	ldr.w	fp, [r1]
   81bf4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81bf8:	1d0d      	adds	r5, r1, #4
   81bfa:	f1bb 0f00 	cmp.w	fp, #0
   81bfe:	f000 82e4 	beq.w	821ca <_vfiprintf_r+0xc02>
   81c02:	1c67      	adds	r7, r4, #1
   81c04:	f000 82c3 	beq.w	8218e <_vfiprintf_r+0xbc6>
   81c08:	4622      	mov	r2, r4
   81c0a:	2100      	movs	r1, #0
   81c0c:	4658      	mov	r0, fp
   81c0e:	9301      	str	r3, [sp, #4]
   81c10:	f001 fbc6 	bl	833a0 <memchr>
   81c14:	9b01      	ldr	r3, [sp, #4]
   81c16:	2800      	cmp	r0, #0
   81c18:	f000 82e8 	beq.w	821ec <_vfiprintf_r+0xc24>
   81c1c:	eba0 020b 	sub.w	r2, r0, fp
   81c20:	9507      	str	r5, [sp, #28]
   81c22:	9205      	str	r2, [sp, #20]
   81c24:	9302      	str	r3, [sp, #8]
   81c26:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81c2a:	2400      	movs	r4, #0
   81c2c:	e624      	b.n	81878 <_vfiprintf_r+0x2b0>
   81c2e:	f898 2000 	ldrb.w	r2, [r8]
   81c32:	f108 0701 	add.w	r7, r8, #1
   81c36:	2a2a      	cmp	r2, #42	; 0x2a
   81c38:	f000 82e9 	beq.w	8220e <_vfiprintf_r+0xc46>
   81c3c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81c40:	2909      	cmp	r1, #9
   81c42:	46b8      	mov	r8, r7
   81c44:	f04f 0400 	mov.w	r4, #0
   81c48:	f63f ad32 	bhi.w	816b0 <_vfiprintf_r+0xe8>
   81c4c:	f818 2b01 	ldrb.w	r2, [r8], #1
   81c50:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81c54:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81c58:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81c5c:	2909      	cmp	r1, #9
   81c5e:	d9f5      	bls.n	81c4c <_vfiprintf_r+0x684>
   81c60:	e526      	b.n	816b0 <_vfiprintf_r+0xe8>
   81c62:	f043 0320 	orr.w	r3, r3, #32
   81c66:	f898 2000 	ldrb.w	r2, [r8]
   81c6a:	e51f      	b.n	816ac <_vfiprintf_r+0xe4>
   81c6c:	9508      	str	r5, [sp, #32]
   81c6e:	2800      	cmp	r0, #0
   81c70:	f040 82db 	bne.w	8222a <_vfiprintf_r+0xc62>
   81c74:	2a00      	cmp	r2, #0
   81c76:	f000 80f1 	beq.w	81e5c <_vfiprintf_r+0x894>
   81c7a:	2101      	movs	r1, #1
   81c7c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81c80:	f04f 0200 	mov.w	r2, #0
   81c84:	9101      	str	r1, [sp, #4]
   81c86:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81c8a:	9105      	str	r1, [sp, #20]
   81c8c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81c90:	e788      	b.n	81ba4 <_vfiprintf_r+0x5dc>
   81c92:	9a07      	ldr	r2, [sp, #28]
   81c94:	6813      	ldr	r3, [r2, #0]
   81c96:	3204      	adds	r2, #4
   81c98:	9207      	str	r2, [sp, #28]
   81c9a:	9a03      	ldr	r2, [sp, #12]
   81c9c:	601a      	str	r2, [r3, #0]
   81c9e:	e4d0      	b.n	81642 <_vfiprintf_r+0x7a>
   81ca0:	aa0f      	add	r2, sp, #60	; 0x3c
   81ca2:	9904      	ldr	r1, [sp, #16]
   81ca4:	4620      	mov	r0, r4
   81ca6:	f7ff fc4f 	bl	81548 <__sprint_r.part.0>
   81caa:	2800      	cmp	r0, #0
   81cac:	f040 8143 	bne.w	81f36 <_vfiprintf_r+0x96e>
   81cb0:	9910      	ldr	r1, [sp, #64]	; 0x40
   81cb2:	46d6      	mov	lr, sl
   81cb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81cb6:	f101 0c01 	add.w	ip, r1, #1
   81cba:	e60a      	b.n	818d2 <_vfiprintf_r+0x30a>
   81cbc:	aa0f      	add	r2, sp, #60	; 0x3c
   81cbe:	9904      	ldr	r1, [sp, #16]
   81cc0:	9806      	ldr	r0, [sp, #24]
   81cc2:	f7ff fc41 	bl	81548 <__sprint_r.part.0>
   81cc6:	2800      	cmp	r0, #0
   81cc8:	f040 8135 	bne.w	81f36 <_vfiprintf_r+0x96e>
   81ccc:	46d1      	mov	r9, sl
   81cce:	9910      	ldr	r1, [sp, #64]	; 0x40
   81cd0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81cd4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81cd6:	1c48      	adds	r0, r1, #1
   81cd8:	2d00      	cmp	r5, #0
   81cda:	f43f ae24 	beq.w	81926 <_vfiprintf_r+0x35e>
   81cde:	2101      	movs	r1, #1
   81ce0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81ce4:	440a      	add	r2, r1
   81ce6:	2807      	cmp	r0, #7
   81ce8:	9211      	str	r2, [sp, #68]	; 0x44
   81cea:	9010      	str	r0, [sp, #64]	; 0x40
   81cec:	f8c9 1004 	str.w	r1, [r9, #4]
   81cf0:	f8c9 5000 	str.w	r5, [r9]
   81cf4:	f340 8109 	ble.w	81f0a <_vfiprintf_r+0x942>
   81cf8:	2a00      	cmp	r2, #0
   81cfa:	f040 81af 	bne.w	8205c <_vfiprintf_r+0xa94>
   81cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81d00:	2b00      	cmp	r3, #0
   81d02:	f43f ae23 	beq.w	8194c <_vfiprintf_r+0x384>
   81d06:	2202      	movs	r2, #2
   81d08:	4608      	mov	r0, r1
   81d0a:	46d1      	mov	r9, sl
   81d0c:	ab0e      	add	r3, sp, #56	; 0x38
   81d0e:	921d      	str	r2, [sp, #116]	; 0x74
   81d10:	931c      	str	r3, [sp, #112]	; 0x70
   81d12:	4601      	mov	r1, r0
   81d14:	f109 0908 	add.w	r9, r9, #8
   81d18:	3001      	adds	r0, #1
   81d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81d1c:	2b80      	cmp	r3, #128	; 0x80
   81d1e:	f43f ae1c 	beq.w	8195a <_vfiprintf_r+0x392>
   81d22:	9b05      	ldr	r3, [sp, #20]
   81d24:	1ae4      	subs	r4, r4, r3
   81d26:	2c00      	cmp	r4, #0
   81d28:	dd2f      	ble.n	81d8a <_vfiprintf_r+0x7c2>
   81d2a:	2c10      	cmp	r4, #16
   81d2c:	f340 8220 	ble.w	82170 <_vfiprintf_r+0xba8>
   81d30:	46ce      	mov	lr, r9
   81d32:	2610      	movs	r6, #16
   81d34:	4db2      	ldr	r5, [pc, #712]	; (82000 <_vfiprintf_r+0xa38>)
   81d36:	9f06      	ldr	r7, [sp, #24]
   81d38:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81d3c:	e006      	b.n	81d4c <_vfiprintf_r+0x784>
   81d3e:	1c88      	adds	r0, r1, #2
   81d40:	4619      	mov	r1, r3
   81d42:	f10e 0e08 	add.w	lr, lr, #8
   81d46:	3c10      	subs	r4, #16
   81d48:	2c10      	cmp	r4, #16
   81d4a:	dd10      	ble.n	81d6e <_vfiprintf_r+0x7a6>
   81d4c:	1c4b      	adds	r3, r1, #1
   81d4e:	3210      	adds	r2, #16
   81d50:	2b07      	cmp	r3, #7
   81d52:	9211      	str	r2, [sp, #68]	; 0x44
   81d54:	e88e 0060 	stmia.w	lr, {r5, r6}
   81d58:	9310      	str	r3, [sp, #64]	; 0x40
   81d5a:	ddf0      	ble.n	81d3e <_vfiprintf_r+0x776>
   81d5c:	2a00      	cmp	r2, #0
   81d5e:	d165      	bne.n	81e2c <_vfiprintf_r+0x864>
   81d60:	3c10      	subs	r4, #16
   81d62:	2c10      	cmp	r4, #16
   81d64:	f04f 0001 	mov.w	r0, #1
   81d68:	4611      	mov	r1, r2
   81d6a:	46d6      	mov	lr, sl
   81d6c:	dcee      	bgt.n	81d4c <_vfiprintf_r+0x784>
   81d6e:	46f1      	mov	r9, lr
   81d70:	4422      	add	r2, r4
   81d72:	2807      	cmp	r0, #7
   81d74:	9211      	str	r2, [sp, #68]	; 0x44
   81d76:	f8c9 5000 	str.w	r5, [r9]
   81d7a:	f8c9 4004 	str.w	r4, [r9, #4]
   81d7e:	9010      	str	r0, [sp, #64]	; 0x40
   81d80:	f300 8085 	bgt.w	81e8e <_vfiprintf_r+0x8c6>
   81d84:	f109 0908 	add.w	r9, r9, #8
   81d88:	3001      	adds	r0, #1
   81d8a:	9905      	ldr	r1, [sp, #20]
   81d8c:	2807      	cmp	r0, #7
   81d8e:	440a      	add	r2, r1
   81d90:	9211      	str	r2, [sp, #68]	; 0x44
   81d92:	f8c9 b000 	str.w	fp, [r9]
   81d96:	f8c9 1004 	str.w	r1, [r9, #4]
   81d9a:	9010      	str	r0, [sp, #64]	; 0x40
   81d9c:	f340 8082 	ble.w	81ea4 <_vfiprintf_r+0x8dc>
   81da0:	2a00      	cmp	r2, #0
   81da2:	f040 8118 	bne.w	81fd6 <_vfiprintf_r+0xa0e>
   81da6:	9b02      	ldr	r3, [sp, #8]
   81da8:	9210      	str	r2, [sp, #64]	; 0x40
   81daa:	0758      	lsls	r0, r3, #29
   81dac:	d535      	bpl.n	81e1a <_vfiprintf_r+0x852>
   81dae:	9b08      	ldr	r3, [sp, #32]
   81db0:	9901      	ldr	r1, [sp, #4]
   81db2:	1a5c      	subs	r4, r3, r1
   81db4:	2c00      	cmp	r4, #0
   81db6:	f340 80e7 	ble.w	81f88 <_vfiprintf_r+0x9c0>
   81dba:	46d1      	mov	r9, sl
   81dbc:	2c10      	cmp	r4, #16
   81dbe:	f340 820d 	ble.w	821dc <_vfiprintf_r+0xc14>
   81dc2:	2510      	movs	r5, #16
   81dc4:	9910      	ldr	r1, [sp, #64]	; 0x40
   81dc6:	4e8f      	ldr	r6, [pc, #572]	; (82004 <_vfiprintf_r+0xa3c>)
   81dc8:	9f06      	ldr	r7, [sp, #24]
   81dca:	f8dd b010 	ldr.w	fp, [sp, #16]
   81dce:	e006      	b.n	81dde <_vfiprintf_r+0x816>
   81dd0:	1c88      	adds	r0, r1, #2
   81dd2:	4619      	mov	r1, r3
   81dd4:	f109 0908 	add.w	r9, r9, #8
   81dd8:	3c10      	subs	r4, #16
   81dda:	2c10      	cmp	r4, #16
   81ddc:	dd11      	ble.n	81e02 <_vfiprintf_r+0x83a>
   81dde:	1c4b      	adds	r3, r1, #1
   81de0:	3210      	adds	r2, #16
   81de2:	2b07      	cmp	r3, #7
   81de4:	9211      	str	r2, [sp, #68]	; 0x44
   81de6:	f8c9 6000 	str.w	r6, [r9]
   81dea:	f8c9 5004 	str.w	r5, [r9, #4]
   81dee:	9310      	str	r3, [sp, #64]	; 0x40
   81df0:	ddee      	ble.n	81dd0 <_vfiprintf_r+0x808>
   81df2:	bb42      	cbnz	r2, 81e46 <_vfiprintf_r+0x87e>
   81df4:	3c10      	subs	r4, #16
   81df6:	2c10      	cmp	r4, #16
   81df8:	f04f 0001 	mov.w	r0, #1
   81dfc:	4611      	mov	r1, r2
   81dfe:	46d1      	mov	r9, sl
   81e00:	dced      	bgt.n	81dde <_vfiprintf_r+0x816>
   81e02:	4422      	add	r2, r4
   81e04:	2807      	cmp	r0, #7
   81e06:	9211      	str	r2, [sp, #68]	; 0x44
   81e08:	f8c9 6000 	str.w	r6, [r9]
   81e0c:	f8c9 4004 	str.w	r4, [r9, #4]
   81e10:	9010      	str	r0, [sp, #64]	; 0x40
   81e12:	dd51      	ble.n	81eb8 <_vfiprintf_r+0x8f0>
   81e14:	2a00      	cmp	r2, #0
   81e16:	f040 819a 	bne.w	8214e <_vfiprintf_r+0xb86>
   81e1a:	9b03      	ldr	r3, [sp, #12]
   81e1c:	9a08      	ldr	r2, [sp, #32]
   81e1e:	9901      	ldr	r1, [sp, #4]
   81e20:	428a      	cmp	r2, r1
   81e22:	bfac      	ite	ge
   81e24:	189b      	addge	r3, r3, r2
   81e26:	185b      	addlt	r3, r3, r1
   81e28:	9303      	str	r3, [sp, #12]
   81e2a:	e04e      	b.n	81eca <_vfiprintf_r+0x902>
   81e2c:	aa0f      	add	r2, sp, #60	; 0x3c
   81e2e:	4649      	mov	r1, r9
   81e30:	4638      	mov	r0, r7
   81e32:	f7ff fb89 	bl	81548 <__sprint_r.part.0>
   81e36:	2800      	cmp	r0, #0
   81e38:	f040 813e 	bne.w	820b8 <_vfiprintf_r+0xaf0>
   81e3c:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e3e:	46d6      	mov	lr, sl
   81e40:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e42:	1c48      	adds	r0, r1, #1
   81e44:	e77f      	b.n	81d46 <_vfiprintf_r+0x77e>
   81e46:	aa0f      	add	r2, sp, #60	; 0x3c
   81e48:	4659      	mov	r1, fp
   81e4a:	4638      	mov	r0, r7
   81e4c:	f7ff fb7c 	bl	81548 <__sprint_r.part.0>
   81e50:	b960      	cbnz	r0, 81e6c <_vfiprintf_r+0x8a4>
   81e52:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e54:	46d1      	mov	r9, sl
   81e56:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e58:	1c48      	adds	r0, r1, #1
   81e5a:	e7bd      	b.n	81dd8 <_vfiprintf_r+0x810>
   81e5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81e5e:	f8dd b010 	ldr.w	fp, [sp, #16]
   81e62:	2b00      	cmp	r3, #0
   81e64:	f040 81ca 	bne.w	821fc <_vfiprintf_r+0xc34>
   81e68:	2300      	movs	r3, #0
   81e6a:	9310      	str	r3, [sp, #64]	; 0x40
   81e6c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81e70:	f013 0f01 	tst.w	r3, #1
   81e74:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81e78:	d102      	bne.n	81e80 <_vfiprintf_r+0x8b8>
   81e7a:	059a      	lsls	r2, r3, #22
   81e7c:	f140 80dd 	bpl.w	8203a <_vfiprintf_r+0xa72>
   81e80:	065b      	lsls	r3, r3, #25
   81e82:	f53f acad 	bmi.w	817e0 <_vfiprintf_r+0x218>
   81e86:	9803      	ldr	r0, [sp, #12]
   81e88:	b02d      	add	sp, #180	; 0xb4
   81e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81e8e:	2a00      	cmp	r2, #0
   81e90:	f040 8105 	bne.w	8209e <_vfiprintf_r+0xad6>
   81e94:	2301      	movs	r3, #1
   81e96:	46d1      	mov	r9, sl
   81e98:	9a05      	ldr	r2, [sp, #20]
   81e9a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81e9e:	921d      	str	r2, [sp, #116]	; 0x74
   81ea0:	9211      	str	r2, [sp, #68]	; 0x44
   81ea2:	9310      	str	r3, [sp, #64]	; 0x40
   81ea4:	f109 0908 	add.w	r9, r9, #8
   81ea8:	9b02      	ldr	r3, [sp, #8]
   81eaa:	0759      	lsls	r1, r3, #29
   81eac:	d504      	bpl.n	81eb8 <_vfiprintf_r+0x8f0>
   81eae:	9b08      	ldr	r3, [sp, #32]
   81eb0:	9901      	ldr	r1, [sp, #4]
   81eb2:	1a5c      	subs	r4, r3, r1
   81eb4:	2c00      	cmp	r4, #0
   81eb6:	dc81      	bgt.n	81dbc <_vfiprintf_r+0x7f4>
   81eb8:	9b03      	ldr	r3, [sp, #12]
   81eba:	9908      	ldr	r1, [sp, #32]
   81ebc:	9801      	ldr	r0, [sp, #4]
   81ebe:	4281      	cmp	r1, r0
   81ec0:	bfac      	ite	ge
   81ec2:	185b      	addge	r3, r3, r1
   81ec4:	181b      	addlt	r3, r3, r0
   81ec6:	9303      	str	r3, [sp, #12]
   81ec8:	bb72      	cbnz	r2, 81f28 <_vfiprintf_r+0x960>
   81eca:	2300      	movs	r3, #0
   81ecc:	46d1      	mov	r9, sl
   81ece:	9310      	str	r3, [sp, #64]	; 0x40
   81ed0:	f7ff bbb7 	b.w	81642 <_vfiprintf_r+0x7a>
   81ed4:	aa0f      	add	r2, sp, #60	; 0x3c
   81ed6:	9904      	ldr	r1, [sp, #16]
   81ed8:	4620      	mov	r0, r4
   81eda:	f7ff fb35 	bl	81548 <__sprint_r.part.0>
   81ede:	bb50      	cbnz	r0, 81f36 <_vfiprintf_r+0x96e>
   81ee0:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ee2:	46d4      	mov	ip, sl
   81ee4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ee6:	f101 0e01 	add.w	lr, r1, #1
   81eea:	e54a      	b.n	81982 <_vfiprintf_r+0x3ba>
   81eec:	2a00      	cmp	r2, #0
   81eee:	f47f aee5 	bne.w	81cbc <_vfiprintf_r+0x6f4>
   81ef2:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81ef6:	2900      	cmp	r1, #0
   81ef8:	f000 811a 	beq.w	82130 <_vfiprintf_r+0xb68>
   81efc:	2201      	movs	r2, #1
   81efe:	46d1      	mov	r9, sl
   81f00:	4610      	mov	r0, r2
   81f02:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81f06:	921d      	str	r2, [sp, #116]	; 0x74
   81f08:	911c      	str	r1, [sp, #112]	; 0x70
   81f0a:	4601      	mov	r1, r0
   81f0c:	f109 0908 	add.w	r9, r9, #8
   81f10:	3001      	adds	r0, #1
   81f12:	e508      	b.n	81926 <_vfiprintf_r+0x35e>
   81f14:	9b02      	ldr	r3, [sp, #8]
   81f16:	2a01      	cmp	r2, #1
   81f18:	f000 8097 	beq.w	8204a <_vfiprintf_r+0xa82>
   81f1c:	2a02      	cmp	r2, #2
   81f1e:	d10d      	bne.n	81f3c <_vfiprintf_r+0x974>
   81f20:	9302      	str	r3, [sp, #8]
   81f22:	2600      	movs	r6, #0
   81f24:	2700      	movs	r7, #0
   81f26:	e5b2      	b.n	81a8e <_vfiprintf_r+0x4c6>
   81f28:	aa0f      	add	r2, sp, #60	; 0x3c
   81f2a:	9904      	ldr	r1, [sp, #16]
   81f2c:	9806      	ldr	r0, [sp, #24]
   81f2e:	f7ff fb0b 	bl	81548 <__sprint_r.part.0>
   81f32:	2800      	cmp	r0, #0
   81f34:	d0c9      	beq.n	81eca <_vfiprintf_r+0x902>
   81f36:	f8dd b010 	ldr.w	fp, [sp, #16]
   81f3a:	e797      	b.n	81e6c <_vfiprintf_r+0x8a4>
   81f3c:	2600      	movs	r6, #0
   81f3e:	2700      	movs	r7, #0
   81f40:	9302      	str	r3, [sp, #8]
   81f42:	4651      	mov	r1, sl
   81f44:	e000      	b.n	81f48 <_vfiprintf_r+0x980>
   81f46:	4659      	mov	r1, fp
   81f48:	08f2      	lsrs	r2, r6, #3
   81f4a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81f4e:	08f8      	lsrs	r0, r7, #3
   81f50:	f006 0307 	and.w	r3, r6, #7
   81f54:	4607      	mov	r7, r0
   81f56:	4616      	mov	r6, r2
   81f58:	3330      	adds	r3, #48	; 0x30
   81f5a:	ea56 0207 	orrs.w	r2, r6, r7
   81f5e:	f801 3c01 	strb.w	r3, [r1, #-1]
   81f62:	f101 3bff 	add.w	fp, r1, #4294967295
   81f66:	d1ee      	bne.n	81f46 <_vfiprintf_r+0x97e>
   81f68:	9a02      	ldr	r2, [sp, #8]
   81f6a:	07d6      	lsls	r6, r2, #31
   81f6c:	f57f ad9f 	bpl.w	81aae <_vfiprintf_r+0x4e6>
   81f70:	2b30      	cmp	r3, #48	; 0x30
   81f72:	f43f ad9c 	beq.w	81aae <_vfiprintf_r+0x4e6>
   81f76:	2330      	movs	r3, #48	; 0x30
   81f78:	3902      	subs	r1, #2
   81f7a:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81f7e:	ebaa 0301 	sub.w	r3, sl, r1
   81f82:	9305      	str	r3, [sp, #20]
   81f84:	468b      	mov	fp, r1
   81f86:	e477      	b.n	81878 <_vfiprintf_r+0x2b0>
   81f88:	9b03      	ldr	r3, [sp, #12]
   81f8a:	9a08      	ldr	r2, [sp, #32]
   81f8c:	428a      	cmp	r2, r1
   81f8e:	bfac      	ite	ge
   81f90:	189b      	addge	r3, r3, r2
   81f92:	185b      	addlt	r3, r3, r1
   81f94:	9303      	str	r3, [sp, #12]
   81f96:	e798      	b.n	81eca <_vfiprintf_r+0x902>
   81f98:	2202      	movs	r2, #2
   81f9a:	e44e      	b.n	8183a <_vfiprintf_r+0x272>
   81f9c:	2f00      	cmp	r7, #0
   81f9e:	bf08      	it	eq
   81fa0:	2e0a      	cmpeq	r6, #10
   81fa2:	d351      	bcc.n	82048 <_vfiprintf_r+0xa80>
   81fa4:	46d3      	mov	fp, sl
   81fa6:	4630      	mov	r0, r6
   81fa8:	4639      	mov	r1, r7
   81faa:	220a      	movs	r2, #10
   81fac:	2300      	movs	r3, #0
   81fae:	f001 fe85 	bl	83cbc <__aeabi_uldivmod>
   81fb2:	3230      	adds	r2, #48	; 0x30
   81fb4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81fb8:	4630      	mov	r0, r6
   81fba:	4639      	mov	r1, r7
   81fbc:	2300      	movs	r3, #0
   81fbe:	220a      	movs	r2, #10
   81fc0:	f001 fe7c 	bl	83cbc <__aeabi_uldivmod>
   81fc4:	4606      	mov	r6, r0
   81fc6:	460f      	mov	r7, r1
   81fc8:	ea56 0307 	orrs.w	r3, r6, r7
   81fcc:	d1eb      	bne.n	81fa6 <_vfiprintf_r+0x9de>
   81fce:	e56e      	b.n	81aae <_vfiprintf_r+0x4e6>
   81fd0:	9405      	str	r4, [sp, #20]
   81fd2:	46d3      	mov	fp, sl
   81fd4:	e450      	b.n	81878 <_vfiprintf_r+0x2b0>
   81fd6:	aa0f      	add	r2, sp, #60	; 0x3c
   81fd8:	9904      	ldr	r1, [sp, #16]
   81fda:	9806      	ldr	r0, [sp, #24]
   81fdc:	f7ff fab4 	bl	81548 <__sprint_r.part.0>
   81fe0:	2800      	cmp	r0, #0
   81fe2:	d1a8      	bne.n	81f36 <_vfiprintf_r+0x96e>
   81fe4:	46d1      	mov	r9, sl
   81fe6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81fe8:	e75e      	b.n	81ea8 <_vfiprintf_r+0x8e0>
   81fea:	aa0f      	add	r2, sp, #60	; 0x3c
   81fec:	9904      	ldr	r1, [sp, #16]
   81fee:	9806      	ldr	r0, [sp, #24]
   81ff0:	f7ff faaa 	bl	81548 <__sprint_r.part.0>
   81ff4:	2800      	cmp	r0, #0
   81ff6:	d19e      	bne.n	81f36 <_vfiprintf_r+0x96e>
   81ff8:	46d1      	mov	r9, sl
   81ffa:	f7ff bbbb 	b.w	81774 <_vfiprintf_r+0x1ac>
   81ffe:	bf00      	nop
   82000:	0008406c 	.word	0x0008406c
   82004:	0008405c 	.word	0x0008405c
   82008:	3104      	adds	r1, #4
   8200a:	6816      	ldr	r6, [r2, #0]
   8200c:	2700      	movs	r7, #0
   8200e:	2201      	movs	r2, #1
   82010:	9107      	str	r1, [sp, #28]
   82012:	e412      	b.n	8183a <_vfiprintf_r+0x272>
   82014:	9807      	ldr	r0, [sp, #28]
   82016:	2700      	movs	r7, #0
   82018:	4601      	mov	r1, r0
   8201a:	3104      	adds	r1, #4
   8201c:	6806      	ldr	r6, [r0, #0]
   8201e:	9107      	str	r1, [sp, #28]
   82020:	e40b      	b.n	8183a <_vfiprintf_r+0x272>
   82022:	680e      	ldr	r6, [r1, #0]
   82024:	3104      	adds	r1, #4
   82026:	9107      	str	r1, [sp, #28]
   82028:	2700      	movs	r7, #0
   8202a:	e592      	b.n	81b52 <_vfiprintf_r+0x58a>
   8202c:	6816      	ldr	r6, [r2, #0]
   8202e:	3204      	adds	r2, #4
   82030:	17f7      	asrs	r7, r6, #31
   82032:	9207      	str	r2, [sp, #28]
   82034:	4630      	mov	r0, r6
   82036:	4639      	mov	r1, r7
   82038:	e512      	b.n	81a60 <_vfiprintf_r+0x498>
   8203a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8203e:	f000 fe75 	bl	82d2c <__retarget_lock_release_recursive>
   82042:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82046:	e71b      	b.n	81e80 <_vfiprintf_r+0x8b8>
   82048:	9b02      	ldr	r3, [sp, #8]
   8204a:	9302      	str	r3, [sp, #8]
   8204c:	2301      	movs	r3, #1
   8204e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82052:	3630      	adds	r6, #48	; 0x30
   82054:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   82058:	9305      	str	r3, [sp, #20]
   8205a:	e40d      	b.n	81878 <_vfiprintf_r+0x2b0>
   8205c:	aa0f      	add	r2, sp, #60	; 0x3c
   8205e:	9904      	ldr	r1, [sp, #16]
   82060:	9806      	ldr	r0, [sp, #24]
   82062:	f7ff fa71 	bl	81548 <__sprint_r.part.0>
   82066:	2800      	cmp	r0, #0
   82068:	f47f af65 	bne.w	81f36 <_vfiprintf_r+0x96e>
   8206c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8206e:	46d1      	mov	r9, sl
   82070:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82072:	1c48      	adds	r0, r1, #1
   82074:	e457      	b.n	81926 <_vfiprintf_r+0x35e>
   82076:	aa0f      	add	r2, sp, #60	; 0x3c
   82078:	9904      	ldr	r1, [sp, #16]
   8207a:	9806      	ldr	r0, [sp, #24]
   8207c:	f7ff fa64 	bl	81548 <__sprint_r.part.0>
   82080:	2800      	cmp	r0, #0
   82082:	f47f af58 	bne.w	81f36 <_vfiprintf_r+0x96e>
   82086:	9910      	ldr	r1, [sp, #64]	; 0x40
   82088:	46d1      	mov	r9, sl
   8208a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8208c:	1c48      	adds	r0, r1, #1
   8208e:	e644      	b.n	81d1a <_vfiprintf_r+0x752>
   82090:	2a00      	cmp	r2, #0
   82092:	f040 8087 	bne.w	821a4 <_vfiprintf_r+0xbdc>
   82096:	2001      	movs	r0, #1
   82098:	4611      	mov	r1, r2
   8209a:	46d1      	mov	r9, sl
   8209c:	e641      	b.n	81d22 <_vfiprintf_r+0x75a>
   8209e:	aa0f      	add	r2, sp, #60	; 0x3c
   820a0:	9904      	ldr	r1, [sp, #16]
   820a2:	9806      	ldr	r0, [sp, #24]
   820a4:	f7ff fa50 	bl	81548 <__sprint_r.part.0>
   820a8:	2800      	cmp	r0, #0
   820aa:	f47f af44 	bne.w	81f36 <_vfiprintf_r+0x96e>
   820ae:	9810      	ldr	r0, [sp, #64]	; 0x40
   820b0:	46d1      	mov	r9, sl
   820b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   820b4:	3001      	adds	r0, #1
   820b6:	e668      	b.n	81d8a <_vfiprintf_r+0x7c2>
   820b8:	46cb      	mov	fp, r9
   820ba:	e6d7      	b.n	81e6c <_vfiprintf_r+0x8a4>
   820bc:	9d07      	ldr	r5, [sp, #28]
   820be:	3507      	adds	r5, #7
   820c0:	f025 0507 	bic.w	r5, r5, #7
   820c4:	f105 0208 	add.w	r2, r5, #8
   820c8:	e9d5 0100 	ldrd	r0, r1, [r5]
   820cc:	9207      	str	r2, [sp, #28]
   820ce:	4606      	mov	r6, r0
   820d0:	460f      	mov	r7, r1
   820d2:	e4c5      	b.n	81a60 <_vfiprintf_r+0x498>
   820d4:	9d07      	ldr	r5, [sp, #28]
   820d6:	3507      	adds	r5, #7
   820d8:	f025 0207 	bic.w	r2, r5, #7
   820dc:	f102 0108 	add.w	r1, r2, #8
   820e0:	e9d2 6700 	ldrd	r6, r7, [r2]
   820e4:	9107      	str	r1, [sp, #28]
   820e6:	2201      	movs	r2, #1
   820e8:	f7ff bba7 	b.w	8183a <_vfiprintf_r+0x272>
   820ec:	9d07      	ldr	r5, [sp, #28]
   820ee:	3507      	adds	r5, #7
   820f0:	f025 0207 	bic.w	r2, r5, #7
   820f4:	f102 0108 	add.w	r1, r2, #8
   820f8:	e9d2 6700 	ldrd	r6, r7, [r2]
   820fc:	9107      	str	r1, [sp, #28]
   820fe:	2200      	movs	r2, #0
   82100:	f7ff bb9b 	b.w	8183a <_vfiprintf_r+0x272>
   82104:	9d07      	ldr	r5, [sp, #28]
   82106:	3507      	adds	r5, #7
   82108:	f025 0107 	bic.w	r1, r5, #7
   8210c:	f101 0008 	add.w	r0, r1, #8
   82110:	9007      	str	r0, [sp, #28]
   82112:	e9d1 6700 	ldrd	r6, r7, [r1]
   82116:	e51c      	b.n	81b52 <_vfiprintf_r+0x58a>
   82118:	46d3      	mov	fp, sl
   8211a:	f7ff bbad 	b.w	81878 <_vfiprintf_r+0x2b0>
   8211e:	252d      	movs	r5, #45	; 0x2d
   82120:	4276      	negs	r6, r6
   82122:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82126:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8212a:	2201      	movs	r2, #1
   8212c:	f7ff bb8a 	b.w	81844 <_vfiprintf_r+0x27c>
   82130:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82132:	b9b3      	cbnz	r3, 82162 <_vfiprintf_r+0xb9a>
   82134:	4611      	mov	r1, r2
   82136:	2001      	movs	r0, #1
   82138:	46d1      	mov	r9, sl
   8213a:	e5f2      	b.n	81d22 <_vfiprintf_r+0x75a>
   8213c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82140:	f000 fdf4 	bl	82d2c <__retarget_lock_release_recursive>
   82144:	f04f 33ff 	mov.w	r3, #4294967295
   82148:	9303      	str	r3, [sp, #12]
   8214a:	f7ff bb4c 	b.w	817e6 <_vfiprintf_r+0x21e>
   8214e:	aa0f      	add	r2, sp, #60	; 0x3c
   82150:	9904      	ldr	r1, [sp, #16]
   82152:	9806      	ldr	r0, [sp, #24]
   82154:	f7ff f9f8 	bl	81548 <__sprint_r.part.0>
   82158:	2800      	cmp	r0, #0
   8215a:	f47f aeec 	bne.w	81f36 <_vfiprintf_r+0x96e>
   8215e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82160:	e6aa      	b.n	81eb8 <_vfiprintf_r+0x8f0>
   82162:	2202      	movs	r2, #2
   82164:	ab0e      	add	r3, sp, #56	; 0x38
   82166:	921d      	str	r2, [sp, #116]	; 0x74
   82168:	931c      	str	r3, [sp, #112]	; 0x70
   8216a:	2001      	movs	r0, #1
   8216c:	46d1      	mov	r9, sl
   8216e:	e5d0      	b.n	81d12 <_vfiprintf_r+0x74a>
   82170:	4d34      	ldr	r5, [pc, #208]	; (82244 <_vfiprintf_r+0xc7c>)
   82172:	e5fd      	b.n	81d70 <_vfiprintf_r+0x7a8>
   82174:	9a07      	ldr	r2, [sp, #28]
   82176:	4613      	mov	r3, r2
   82178:	3304      	adds	r3, #4
   8217a:	9307      	str	r3, [sp, #28]
   8217c:	9b03      	ldr	r3, [sp, #12]
   8217e:	6811      	ldr	r1, [r2, #0]
   82180:	17dd      	asrs	r5, r3, #31
   82182:	461a      	mov	r2, r3
   82184:	462b      	mov	r3, r5
   82186:	e9c1 2300 	strd	r2, r3, [r1]
   8218a:	f7ff ba5a 	b.w	81642 <_vfiprintf_r+0x7a>
   8218e:	4658      	mov	r0, fp
   82190:	9507      	str	r5, [sp, #28]
   82192:	9302      	str	r3, [sp, #8]
   82194:	f7ff f9aa 	bl	814ec <strlen>
   82198:	2400      	movs	r4, #0
   8219a:	9005      	str	r0, [sp, #20]
   8219c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   821a0:	f7ff bb6a 	b.w	81878 <_vfiprintf_r+0x2b0>
   821a4:	aa0f      	add	r2, sp, #60	; 0x3c
   821a6:	9904      	ldr	r1, [sp, #16]
   821a8:	9806      	ldr	r0, [sp, #24]
   821aa:	f7ff f9cd 	bl	81548 <__sprint_r.part.0>
   821ae:	2800      	cmp	r0, #0
   821b0:	f47f aec1 	bne.w	81f36 <_vfiprintf_r+0x96e>
   821b4:	9910      	ldr	r1, [sp, #64]	; 0x40
   821b6:	46d1      	mov	r9, sl
   821b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821ba:	1c48      	adds	r0, r1, #1
   821bc:	e5b1      	b.n	81d22 <_vfiprintf_r+0x75a>
   821be:	9910      	ldr	r1, [sp, #64]	; 0x40
   821c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   821c2:	3101      	adds	r1, #1
   821c4:	4e20      	ldr	r6, [pc, #128]	; (82248 <_vfiprintf_r+0xc80>)
   821c6:	f7ff bb9c 	b.w	81902 <_vfiprintf_r+0x33a>
   821ca:	2c06      	cmp	r4, #6
   821cc:	bf28      	it	cs
   821ce:	2406      	movcs	r4, #6
   821d0:	9507      	str	r5, [sp, #28]
   821d2:	9405      	str	r4, [sp, #20]
   821d4:	9401      	str	r4, [sp, #4]
   821d6:	f8df b074 	ldr.w	fp, [pc, #116]	; 8224c <_vfiprintf_r+0xc84>
   821da:	e4e3      	b.n	81ba4 <_vfiprintf_r+0x5dc>
   821dc:	9810      	ldr	r0, [sp, #64]	; 0x40
   821de:	4e1a      	ldr	r6, [pc, #104]	; (82248 <_vfiprintf_r+0xc80>)
   821e0:	3001      	adds	r0, #1
   821e2:	e60e      	b.n	81e02 <_vfiprintf_r+0x83a>
   821e4:	4686      	mov	lr, r0
   821e6:	4d17      	ldr	r5, [pc, #92]	; (82244 <_vfiprintf_r+0xc7c>)
   821e8:	f7ff bbe2 	b.w	819b0 <_vfiprintf_r+0x3e8>
   821ec:	9405      	str	r4, [sp, #20]
   821ee:	9507      	str	r5, [sp, #28]
   821f0:	9302      	str	r3, [sp, #8]
   821f2:	4604      	mov	r4, r0
   821f4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   821f8:	f7ff bb3e 	b.w	81878 <_vfiprintf_r+0x2b0>
   821fc:	9806      	ldr	r0, [sp, #24]
   821fe:	aa0f      	add	r2, sp, #60	; 0x3c
   82200:	4659      	mov	r1, fp
   82202:	f7ff f9a1 	bl	81548 <__sprint_r.part.0>
   82206:	2800      	cmp	r0, #0
   82208:	f43f ae2e 	beq.w	81e68 <_vfiprintf_r+0x8a0>
   8220c:	e62e      	b.n	81e6c <_vfiprintf_r+0x8a4>
   8220e:	9907      	ldr	r1, [sp, #28]
   82210:	f898 2001 	ldrb.w	r2, [r8, #1]
   82214:	680c      	ldr	r4, [r1, #0]
   82216:	3104      	adds	r1, #4
   82218:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   8221c:	46b8      	mov	r8, r7
   8221e:	9107      	str	r1, [sp, #28]
   82220:	f7ff ba44 	b.w	816ac <_vfiprintf_r+0xe4>
   82224:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82228:	e4a7      	b.n	81b7a <_vfiprintf_r+0x5b2>
   8222a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8222e:	e521      	b.n	81c74 <_vfiprintf_r+0x6ac>
   82230:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82234:	e47c      	b.n	81b30 <_vfiprintf_r+0x568>
   82236:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8223a:	e43f      	b.n	81abc <_vfiprintf_r+0x4f4>
   8223c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82240:	f7ff bbfa 	b.w	81a38 <_vfiprintf_r+0x470>
   82244:	0008406c 	.word	0x0008406c
   82248:	0008405c 	.word	0x0008405c
   8224c:	00084054 	.word	0x00084054

00082250 <__sbprintf>:
   82250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82254:	460c      	mov	r4, r1
   82256:	f04f 0e00 	mov.w	lr, #0
   8225a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8225e:	4606      	mov	r6, r0
   82260:	4617      	mov	r7, r2
   82262:	4698      	mov	r8, r3
   82264:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82266:	89e3      	ldrh	r3, [r4, #14]
   82268:	8989      	ldrh	r1, [r1, #12]
   8226a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8226e:	f021 0102 	bic.w	r1, r1, #2
   82272:	9219      	str	r2, [sp, #100]	; 0x64
   82274:	f8ad 300e 	strh.w	r3, [sp, #14]
   82278:	69e2      	ldr	r2, [r4, #28]
   8227a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8227c:	f8ad 100c 	strh.w	r1, [sp, #12]
   82280:	a816      	add	r0, sp, #88	; 0x58
   82282:	a91a      	add	r1, sp, #104	; 0x68
   82284:	f8cd e018 	str.w	lr, [sp, #24]
   82288:	9207      	str	r2, [sp, #28]
   8228a:	9309      	str	r3, [sp, #36]	; 0x24
   8228c:	9100      	str	r1, [sp, #0]
   8228e:	9104      	str	r1, [sp, #16]
   82290:	9502      	str	r5, [sp, #8]
   82292:	9505      	str	r5, [sp, #20]
   82294:	f000 fd44 	bl	82d20 <__retarget_lock_init_recursive>
   82298:	4643      	mov	r3, r8
   8229a:	463a      	mov	r2, r7
   8229c:	4669      	mov	r1, sp
   8229e:	4630      	mov	r0, r6
   822a0:	f7ff f992 	bl	815c8 <_vfiprintf_r>
   822a4:	1e05      	subs	r5, r0, #0
   822a6:	db07      	blt.n	822b8 <__sbprintf+0x68>
   822a8:	4630      	mov	r0, r6
   822aa:	4669      	mov	r1, sp
   822ac:	f000 f924 	bl	824f8 <_fflush_r>
   822b0:	2800      	cmp	r0, #0
   822b2:	bf18      	it	ne
   822b4:	f04f 35ff 	movne.w	r5, #4294967295
   822b8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   822bc:	065b      	lsls	r3, r3, #25
   822be:	d503      	bpl.n	822c8 <__sbprintf+0x78>
   822c0:	89a3      	ldrh	r3, [r4, #12]
   822c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   822c6:	81a3      	strh	r3, [r4, #12]
   822c8:	9816      	ldr	r0, [sp, #88]	; 0x58
   822ca:	f000 fd2b 	bl	82d24 <__retarget_lock_close_recursive>
   822ce:	4628      	mov	r0, r5
   822d0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   822d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000822d8 <__swsetup_r>:
   822d8:	b538      	push	{r3, r4, r5, lr}
   822da:	4b30      	ldr	r3, [pc, #192]	; (8239c <__swsetup_r+0xc4>)
   822dc:	4605      	mov	r5, r0
   822de:	6818      	ldr	r0, [r3, #0]
   822e0:	460c      	mov	r4, r1
   822e2:	b110      	cbz	r0, 822ea <__swsetup_r+0x12>
   822e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   822e6:	2b00      	cmp	r3, #0
   822e8:	d038      	beq.n	8235c <__swsetup_r+0x84>
   822ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   822ee:	b293      	uxth	r3, r2
   822f0:	0718      	lsls	r0, r3, #28
   822f2:	d50c      	bpl.n	8230e <__swsetup_r+0x36>
   822f4:	6920      	ldr	r0, [r4, #16]
   822f6:	b1a8      	cbz	r0, 82324 <__swsetup_r+0x4c>
   822f8:	f013 0201 	ands.w	r2, r3, #1
   822fc:	d01e      	beq.n	8233c <__swsetup_r+0x64>
   822fe:	2200      	movs	r2, #0
   82300:	6963      	ldr	r3, [r4, #20]
   82302:	60a2      	str	r2, [r4, #8]
   82304:	425b      	negs	r3, r3
   82306:	61a3      	str	r3, [r4, #24]
   82308:	b1f0      	cbz	r0, 82348 <__swsetup_r+0x70>
   8230a:	2000      	movs	r0, #0
   8230c:	bd38      	pop	{r3, r4, r5, pc}
   8230e:	06d9      	lsls	r1, r3, #27
   82310:	d53b      	bpl.n	8238a <__swsetup_r+0xb2>
   82312:	0758      	lsls	r0, r3, #29
   82314:	d425      	bmi.n	82362 <__swsetup_r+0x8a>
   82316:	6920      	ldr	r0, [r4, #16]
   82318:	f042 0308 	orr.w	r3, r2, #8
   8231c:	81a3      	strh	r3, [r4, #12]
   8231e:	b29b      	uxth	r3, r3
   82320:	2800      	cmp	r0, #0
   82322:	d1e9      	bne.n	822f8 <__swsetup_r+0x20>
   82324:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82328:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8232c:	d0e4      	beq.n	822f8 <__swsetup_r+0x20>
   8232e:	4628      	mov	r0, r5
   82330:	4621      	mov	r1, r4
   82332:	f000 fd2b 	bl	82d8c <__smakebuf_r>
   82336:	89a3      	ldrh	r3, [r4, #12]
   82338:	6920      	ldr	r0, [r4, #16]
   8233a:	e7dd      	b.n	822f8 <__swsetup_r+0x20>
   8233c:	0799      	lsls	r1, r3, #30
   8233e:	bf58      	it	pl
   82340:	6962      	ldrpl	r2, [r4, #20]
   82342:	60a2      	str	r2, [r4, #8]
   82344:	2800      	cmp	r0, #0
   82346:	d1e0      	bne.n	8230a <__swsetup_r+0x32>
   82348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8234c:	061a      	lsls	r2, r3, #24
   8234e:	d5dd      	bpl.n	8230c <__swsetup_r+0x34>
   82350:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82354:	81a3      	strh	r3, [r4, #12]
   82356:	f04f 30ff 	mov.w	r0, #4294967295
   8235a:	bd38      	pop	{r3, r4, r5, pc}
   8235c:	f000 f924 	bl	825a8 <__sinit>
   82360:	e7c3      	b.n	822ea <__swsetup_r+0x12>
   82362:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82364:	b151      	cbz	r1, 8237c <__swsetup_r+0xa4>
   82366:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8236a:	4299      	cmp	r1, r3
   8236c:	d004      	beq.n	82378 <__swsetup_r+0xa0>
   8236e:	4628      	mov	r0, r5
   82370:	f000 fa40 	bl	827f4 <_free_r>
   82374:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82378:	2300      	movs	r3, #0
   8237a:	6323      	str	r3, [r4, #48]	; 0x30
   8237c:	2300      	movs	r3, #0
   8237e:	6920      	ldr	r0, [r4, #16]
   82380:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   82384:	e884 0009 	stmia.w	r4, {r0, r3}
   82388:	e7c6      	b.n	82318 <__swsetup_r+0x40>
   8238a:	2309      	movs	r3, #9
   8238c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82390:	602b      	str	r3, [r5, #0]
   82392:	f04f 30ff 	mov.w	r0, #4294967295
   82396:	81a2      	strh	r2, [r4, #12]
   82398:	bd38      	pop	{r3, r4, r5, pc}
   8239a:	bf00      	nop
   8239c:	2007014c 	.word	0x2007014c

000823a0 <register_fini>:
   823a0:	4b02      	ldr	r3, [pc, #8]	; (823ac <register_fini+0xc>)
   823a2:	b113      	cbz	r3, 823aa <register_fini+0xa>
   823a4:	4802      	ldr	r0, [pc, #8]	; (823b0 <register_fini+0x10>)
   823a6:	f000 b805 	b.w	823b4 <atexit>
   823aa:	4770      	bx	lr
   823ac:	00000000 	.word	0x00000000
   823b0:	00082621 	.word	0x00082621

000823b4 <atexit>:
   823b4:	2300      	movs	r3, #0
   823b6:	4601      	mov	r1, r0
   823b8:	461a      	mov	r2, r3
   823ba:	4618      	mov	r0, r3
   823bc:	f001 bb56 	b.w	83a6c <__register_exitproc>

000823c0 <__sflush_r>:
   823c0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   823c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   823c8:	b29a      	uxth	r2, r3
   823ca:	460d      	mov	r5, r1
   823cc:	0711      	lsls	r1, r2, #28
   823ce:	4680      	mov	r8, r0
   823d0:	d43a      	bmi.n	82448 <__sflush_r+0x88>
   823d2:	686a      	ldr	r2, [r5, #4]
   823d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   823d8:	2a00      	cmp	r2, #0
   823da:	81ab      	strh	r3, [r5, #12]
   823dc:	dd70      	ble.n	824c0 <__sflush_r+0x100>
   823de:	6aac      	ldr	r4, [r5, #40]	; 0x28
   823e0:	2c00      	cmp	r4, #0
   823e2:	d04a      	beq.n	8247a <__sflush_r+0xba>
   823e4:	2200      	movs	r2, #0
   823e6:	b29b      	uxth	r3, r3
   823e8:	f8d8 6000 	ldr.w	r6, [r8]
   823ec:	f8c8 2000 	str.w	r2, [r8]
   823f0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   823f4:	d068      	beq.n	824c8 <__sflush_r+0x108>
   823f6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   823f8:	075f      	lsls	r7, r3, #29
   823fa:	d505      	bpl.n	82408 <__sflush_r+0x48>
   823fc:	6869      	ldr	r1, [r5, #4]
   823fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82400:	1a52      	subs	r2, r2, r1
   82402:	b10b      	cbz	r3, 82408 <__sflush_r+0x48>
   82404:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82406:	1ad2      	subs	r2, r2, r3
   82408:	2300      	movs	r3, #0
   8240a:	69e9      	ldr	r1, [r5, #28]
   8240c:	4640      	mov	r0, r8
   8240e:	47a0      	blx	r4
   82410:	1c44      	adds	r4, r0, #1
   82412:	d03d      	beq.n	82490 <__sflush_r+0xd0>
   82414:	2100      	movs	r1, #0
   82416:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8241a:	692a      	ldr	r2, [r5, #16]
   8241c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82420:	81ab      	strh	r3, [r5, #12]
   82422:	04db      	lsls	r3, r3, #19
   82424:	6069      	str	r1, [r5, #4]
   82426:	602a      	str	r2, [r5, #0]
   82428:	d448      	bmi.n	824bc <__sflush_r+0xfc>
   8242a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8242c:	f8c8 6000 	str.w	r6, [r8]
   82430:	b319      	cbz	r1, 8247a <__sflush_r+0xba>
   82432:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82436:	4299      	cmp	r1, r3
   82438:	d002      	beq.n	82440 <__sflush_r+0x80>
   8243a:	4640      	mov	r0, r8
   8243c:	f000 f9da 	bl	827f4 <_free_r>
   82440:	2000      	movs	r0, #0
   82442:	6328      	str	r0, [r5, #48]	; 0x30
   82444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82448:	692e      	ldr	r6, [r5, #16]
   8244a:	b1b6      	cbz	r6, 8247a <__sflush_r+0xba>
   8244c:	0791      	lsls	r1, r2, #30
   8244e:	bf18      	it	ne
   82450:	2300      	movne	r3, #0
   82452:	682c      	ldr	r4, [r5, #0]
   82454:	bf08      	it	eq
   82456:	696b      	ldreq	r3, [r5, #20]
   82458:	602e      	str	r6, [r5, #0]
   8245a:	1ba4      	subs	r4, r4, r6
   8245c:	60ab      	str	r3, [r5, #8]
   8245e:	e00a      	b.n	82476 <__sflush_r+0xb6>
   82460:	4623      	mov	r3, r4
   82462:	4632      	mov	r2, r6
   82464:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82466:	69e9      	ldr	r1, [r5, #28]
   82468:	4640      	mov	r0, r8
   8246a:	47b8      	blx	r7
   8246c:	2800      	cmp	r0, #0
   8246e:	eba4 0400 	sub.w	r4, r4, r0
   82472:	4406      	add	r6, r0
   82474:	dd04      	ble.n	82480 <__sflush_r+0xc0>
   82476:	2c00      	cmp	r4, #0
   82478:	dcf2      	bgt.n	82460 <__sflush_r+0xa0>
   8247a:	2000      	movs	r0, #0
   8247c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82480:	89ab      	ldrh	r3, [r5, #12]
   82482:	f04f 30ff 	mov.w	r0, #4294967295
   82486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8248a:	81ab      	strh	r3, [r5, #12]
   8248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82490:	f8d8 4000 	ldr.w	r4, [r8]
   82494:	2c1d      	cmp	r4, #29
   82496:	d8f3      	bhi.n	82480 <__sflush_r+0xc0>
   82498:	4b16      	ldr	r3, [pc, #88]	; (824f4 <__sflush_r+0x134>)
   8249a:	40e3      	lsrs	r3, r4
   8249c:	43db      	mvns	r3, r3
   8249e:	f013 0301 	ands.w	r3, r3, #1
   824a2:	d1ed      	bne.n	82480 <__sflush_r+0xc0>
   824a4:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   824a8:	6929      	ldr	r1, [r5, #16]
   824aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   824ae:	81aa      	strh	r2, [r5, #12]
   824b0:	04d2      	lsls	r2, r2, #19
   824b2:	606b      	str	r3, [r5, #4]
   824b4:	6029      	str	r1, [r5, #0]
   824b6:	d5b8      	bpl.n	8242a <__sflush_r+0x6a>
   824b8:	2c00      	cmp	r4, #0
   824ba:	d1b6      	bne.n	8242a <__sflush_r+0x6a>
   824bc:	6528      	str	r0, [r5, #80]	; 0x50
   824be:	e7b4      	b.n	8242a <__sflush_r+0x6a>
   824c0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   824c2:	2a00      	cmp	r2, #0
   824c4:	dc8b      	bgt.n	823de <__sflush_r+0x1e>
   824c6:	e7d8      	b.n	8247a <__sflush_r+0xba>
   824c8:	2301      	movs	r3, #1
   824ca:	69e9      	ldr	r1, [r5, #28]
   824cc:	4640      	mov	r0, r8
   824ce:	47a0      	blx	r4
   824d0:	1c43      	adds	r3, r0, #1
   824d2:	4602      	mov	r2, r0
   824d4:	d002      	beq.n	824dc <__sflush_r+0x11c>
   824d6:	89ab      	ldrh	r3, [r5, #12]
   824d8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   824da:	e78d      	b.n	823f8 <__sflush_r+0x38>
   824dc:	f8d8 3000 	ldr.w	r3, [r8]
   824e0:	2b00      	cmp	r3, #0
   824e2:	d0f8      	beq.n	824d6 <__sflush_r+0x116>
   824e4:	2b1d      	cmp	r3, #29
   824e6:	d001      	beq.n	824ec <__sflush_r+0x12c>
   824e8:	2b16      	cmp	r3, #22
   824ea:	d1c9      	bne.n	82480 <__sflush_r+0xc0>
   824ec:	f8c8 6000 	str.w	r6, [r8]
   824f0:	e7c3      	b.n	8247a <__sflush_r+0xba>
   824f2:	bf00      	nop
   824f4:	20400001 	.word	0x20400001

000824f8 <_fflush_r>:
   824f8:	b538      	push	{r3, r4, r5, lr}
   824fa:	460d      	mov	r5, r1
   824fc:	4604      	mov	r4, r0
   824fe:	b108      	cbz	r0, 82504 <_fflush_r+0xc>
   82500:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82502:	b1bb      	cbz	r3, 82534 <_fflush_r+0x3c>
   82504:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82508:	b188      	cbz	r0, 8252e <_fflush_r+0x36>
   8250a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8250c:	07db      	lsls	r3, r3, #31
   8250e:	d401      	bmi.n	82514 <_fflush_r+0x1c>
   82510:	0581      	lsls	r1, r0, #22
   82512:	d517      	bpl.n	82544 <_fflush_r+0x4c>
   82514:	4620      	mov	r0, r4
   82516:	4629      	mov	r1, r5
   82518:	f7ff ff52 	bl	823c0 <__sflush_r>
   8251c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8251e:	4604      	mov	r4, r0
   82520:	07da      	lsls	r2, r3, #31
   82522:	d402      	bmi.n	8252a <_fflush_r+0x32>
   82524:	89ab      	ldrh	r3, [r5, #12]
   82526:	059b      	lsls	r3, r3, #22
   82528:	d507      	bpl.n	8253a <_fflush_r+0x42>
   8252a:	4620      	mov	r0, r4
   8252c:	bd38      	pop	{r3, r4, r5, pc}
   8252e:	4604      	mov	r4, r0
   82530:	4620      	mov	r0, r4
   82532:	bd38      	pop	{r3, r4, r5, pc}
   82534:	f000 f838 	bl	825a8 <__sinit>
   82538:	e7e4      	b.n	82504 <_fflush_r+0xc>
   8253a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8253c:	f000 fbf6 	bl	82d2c <__retarget_lock_release_recursive>
   82540:	4620      	mov	r0, r4
   82542:	bd38      	pop	{r3, r4, r5, pc}
   82544:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82546:	f000 fbef 	bl	82d28 <__retarget_lock_acquire_recursive>
   8254a:	e7e3      	b.n	82514 <_fflush_r+0x1c>

0008254c <_cleanup_r>:
   8254c:	4901      	ldr	r1, [pc, #4]	; (82554 <_cleanup_r+0x8>)
   8254e:	f000 bbb1 	b.w	82cb4 <_fwalk_reent>
   82552:	bf00      	nop
   82554:	00083b55 	.word	0x00083b55

00082558 <std.isra.0>:
   82558:	2300      	movs	r3, #0
   8255a:	b510      	push	{r4, lr}
   8255c:	4604      	mov	r4, r0
   8255e:	8181      	strh	r1, [r0, #12]
   82560:	81c2      	strh	r2, [r0, #14]
   82562:	6003      	str	r3, [r0, #0]
   82564:	6043      	str	r3, [r0, #4]
   82566:	6083      	str	r3, [r0, #8]
   82568:	6643      	str	r3, [r0, #100]	; 0x64
   8256a:	6103      	str	r3, [r0, #16]
   8256c:	6143      	str	r3, [r0, #20]
   8256e:	6183      	str	r3, [r0, #24]
   82570:	4619      	mov	r1, r3
   82572:	2208      	movs	r2, #8
   82574:	305c      	adds	r0, #92	; 0x5c
   82576:	f7fe fe9b 	bl	812b0 <memset>
   8257a:	4807      	ldr	r0, [pc, #28]	; (82598 <std.isra.0+0x40>)
   8257c:	4907      	ldr	r1, [pc, #28]	; (8259c <std.isra.0+0x44>)
   8257e:	4a08      	ldr	r2, [pc, #32]	; (825a0 <std.isra.0+0x48>)
   82580:	4b08      	ldr	r3, [pc, #32]	; (825a4 <std.isra.0+0x4c>)
   82582:	6220      	str	r0, [r4, #32]
   82584:	61e4      	str	r4, [r4, #28]
   82586:	6261      	str	r1, [r4, #36]	; 0x24
   82588:	62a2      	str	r2, [r4, #40]	; 0x28
   8258a:	62e3      	str	r3, [r4, #44]	; 0x2c
   8258c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82594:	f000 bbc4 	b.w	82d20 <__retarget_lock_init_recursive>
   82598:	0008389d 	.word	0x0008389d
   8259c:	000838c1 	.word	0x000838c1
   825a0:	000838fd 	.word	0x000838fd
   825a4:	0008391d 	.word	0x0008391d

000825a8 <__sinit>:
   825a8:	b510      	push	{r4, lr}
   825aa:	4604      	mov	r4, r0
   825ac:	4814      	ldr	r0, [pc, #80]	; (82600 <__sinit+0x58>)
   825ae:	f000 fbbb 	bl	82d28 <__retarget_lock_acquire_recursive>
   825b2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   825b4:	b9fa      	cbnz	r2, 825f6 <__sinit+0x4e>
   825b6:	2003      	movs	r0, #3
   825b8:	4912      	ldr	r1, [pc, #72]	; (82604 <__sinit+0x5c>)
   825ba:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   825be:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   825c2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   825c6:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   825ca:	63e1      	str	r1, [r4, #60]	; 0x3c
   825cc:	6860      	ldr	r0, [r4, #4]
   825ce:	2104      	movs	r1, #4
   825d0:	f7ff ffc2 	bl	82558 <std.isra.0>
   825d4:	68a0      	ldr	r0, [r4, #8]
   825d6:	2201      	movs	r2, #1
   825d8:	2109      	movs	r1, #9
   825da:	f7ff ffbd 	bl	82558 <std.isra.0>
   825de:	68e0      	ldr	r0, [r4, #12]
   825e0:	2202      	movs	r2, #2
   825e2:	2112      	movs	r1, #18
   825e4:	f7ff ffb8 	bl	82558 <std.isra.0>
   825e8:	2301      	movs	r3, #1
   825ea:	4805      	ldr	r0, [pc, #20]	; (82600 <__sinit+0x58>)
   825ec:	63a3      	str	r3, [r4, #56]	; 0x38
   825ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   825f2:	f000 bb9b 	b.w	82d2c <__retarget_lock_release_recursive>
   825f6:	4802      	ldr	r0, [pc, #8]	; (82600 <__sinit+0x58>)
   825f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   825fc:	f000 bb96 	b.w	82d2c <__retarget_lock_release_recursive>
   82600:	20070d08 	.word	0x20070d08
   82604:	0008254d 	.word	0x0008254d

00082608 <__sfp_lock_acquire>:
   82608:	4801      	ldr	r0, [pc, #4]	; (82610 <__sfp_lock_acquire+0x8>)
   8260a:	f000 bb8d 	b.w	82d28 <__retarget_lock_acquire_recursive>
   8260e:	bf00      	nop
   82610:	20070d1c 	.word	0x20070d1c

00082614 <__sfp_lock_release>:
   82614:	4801      	ldr	r0, [pc, #4]	; (8261c <__sfp_lock_release+0x8>)
   82616:	f000 bb89 	b.w	82d2c <__retarget_lock_release_recursive>
   8261a:	bf00      	nop
   8261c:	20070d1c 	.word	0x20070d1c

00082620 <__libc_fini_array>:
   82620:	b538      	push	{r3, r4, r5, lr}
   82622:	4c0a      	ldr	r4, [pc, #40]	; (8264c <__libc_fini_array+0x2c>)
   82624:	4d0a      	ldr	r5, [pc, #40]	; (82650 <__libc_fini_array+0x30>)
   82626:	1b64      	subs	r4, r4, r5
   82628:	10a4      	asrs	r4, r4, #2
   8262a:	d00a      	beq.n	82642 <__libc_fini_array+0x22>
   8262c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82630:	3b01      	subs	r3, #1
   82632:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82636:	3c01      	subs	r4, #1
   82638:	f855 3904 	ldr.w	r3, [r5], #-4
   8263c:	4798      	blx	r3
   8263e:	2c00      	cmp	r4, #0
   82640:	d1f9      	bne.n	82636 <__libc_fini_array+0x16>
   82642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82646:	f001 bdad 	b.w	841a4 <_fini>
   8264a:	bf00      	nop
   8264c:	000841b4 	.word	0x000841b4
   82650:	000841b0 	.word	0x000841b0

00082654 <__fputwc>:
   82654:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82658:	b083      	sub	sp, #12
   8265a:	4607      	mov	r7, r0
   8265c:	4688      	mov	r8, r1
   8265e:	4614      	mov	r4, r2
   82660:	f000 fb50 	bl	82d04 <__locale_mb_cur_max>
   82664:	2801      	cmp	r0, #1
   82666:	d033      	beq.n	826d0 <__fputwc+0x7c>
   82668:	4642      	mov	r2, r8
   8266a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8266e:	a901      	add	r1, sp, #4
   82670:	4638      	mov	r0, r7
   82672:	f001 f9af 	bl	839d4 <_wcrtomb_r>
   82676:	1c42      	adds	r2, r0, #1
   82678:	4606      	mov	r6, r0
   8267a:	d022      	beq.n	826c2 <__fputwc+0x6e>
   8267c:	b390      	cbz	r0, 826e4 <__fputwc+0x90>
   8267e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82682:	2500      	movs	r5, #0
   82684:	f10d 0904 	add.w	r9, sp, #4
   82688:	e008      	b.n	8269c <__fputwc+0x48>
   8268a:	6823      	ldr	r3, [r4, #0]
   8268c:	1c5a      	adds	r2, r3, #1
   8268e:	6022      	str	r2, [r4, #0]
   82690:	7019      	strb	r1, [r3, #0]
   82692:	3501      	adds	r5, #1
   82694:	42b5      	cmp	r5, r6
   82696:	d225      	bcs.n	826e4 <__fputwc+0x90>
   82698:	f815 1009 	ldrb.w	r1, [r5, r9]
   8269c:	68a3      	ldr	r3, [r4, #8]
   8269e:	3b01      	subs	r3, #1
   826a0:	2b00      	cmp	r3, #0
   826a2:	60a3      	str	r3, [r4, #8]
   826a4:	daf1      	bge.n	8268a <__fputwc+0x36>
   826a6:	69a2      	ldr	r2, [r4, #24]
   826a8:	4293      	cmp	r3, r2
   826aa:	db01      	blt.n	826b0 <__fputwc+0x5c>
   826ac:	290a      	cmp	r1, #10
   826ae:	d1ec      	bne.n	8268a <__fputwc+0x36>
   826b0:	4622      	mov	r2, r4
   826b2:	4638      	mov	r0, r7
   826b4:	f001 f936 	bl	83924 <__swbuf_r>
   826b8:	1c43      	adds	r3, r0, #1
   826ba:	d1ea      	bne.n	82692 <__fputwc+0x3e>
   826bc:	b003      	add	sp, #12
   826be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   826c2:	89a3      	ldrh	r3, [r4, #12]
   826c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   826c8:	81a3      	strh	r3, [r4, #12]
   826ca:	b003      	add	sp, #12
   826cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   826d0:	f108 33ff 	add.w	r3, r8, #4294967295
   826d4:	2bfe      	cmp	r3, #254	; 0xfe
   826d6:	d8c7      	bhi.n	82668 <__fputwc+0x14>
   826d8:	fa5f f188 	uxtb.w	r1, r8
   826dc:	4606      	mov	r6, r0
   826de:	f88d 1004 	strb.w	r1, [sp, #4]
   826e2:	e7ce      	b.n	82682 <__fputwc+0x2e>
   826e4:	4640      	mov	r0, r8
   826e6:	b003      	add	sp, #12
   826e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000826ec <_fputwc_r>:
   826ec:	b530      	push	{r4, r5, lr}
   826ee:	6e53      	ldr	r3, [r2, #100]	; 0x64
   826f0:	4614      	mov	r4, r2
   826f2:	f013 0f01 	tst.w	r3, #1
   826f6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   826fa:	b083      	sub	sp, #12
   826fc:	4605      	mov	r5, r0
   826fe:	b29a      	uxth	r2, r3
   82700:	d101      	bne.n	82706 <_fputwc_r+0x1a>
   82702:	0590      	lsls	r0, r2, #22
   82704:	d51c      	bpl.n	82740 <_fputwc_r+0x54>
   82706:	0490      	lsls	r0, r2, #18
   82708:	d406      	bmi.n	82718 <_fputwc_r+0x2c>
   8270a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8270c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82714:	81a3      	strh	r3, [r4, #12]
   82716:	6662      	str	r2, [r4, #100]	; 0x64
   82718:	4628      	mov	r0, r5
   8271a:	4622      	mov	r2, r4
   8271c:	f7ff ff9a 	bl	82654 <__fputwc>
   82720:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82722:	4605      	mov	r5, r0
   82724:	07da      	lsls	r2, r3, #31
   82726:	d402      	bmi.n	8272e <_fputwc_r+0x42>
   82728:	89a3      	ldrh	r3, [r4, #12]
   8272a:	059b      	lsls	r3, r3, #22
   8272c:	d502      	bpl.n	82734 <_fputwc_r+0x48>
   8272e:	4628      	mov	r0, r5
   82730:	b003      	add	sp, #12
   82732:	bd30      	pop	{r4, r5, pc}
   82734:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82736:	f000 faf9 	bl	82d2c <__retarget_lock_release_recursive>
   8273a:	4628      	mov	r0, r5
   8273c:	b003      	add	sp, #12
   8273e:	bd30      	pop	{r4, r5, pc}
   82740:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82742:	9101      	str	r1, [sp, #4]
   82744:	f000 faf0 	bl	82d28 <__retarget_lock_acquire_recursive>
   82748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8274c:	9901      	ldr	r1, [sp, #4]
   8274e:	b29a      	uxth	r2, r3
   82750:	e7d9      	b.n	82706 <_fputwc_r+0x1a>
   82752:	bf00      	nop

00082754 <_malloc_trim_r>:
   82754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82756:	460c      	mov	r4, r1
   82758:	4f23      	ldr	r7, [pc, #140]	; (827e8 <_malloc_trim_r+0x94>)
   8275a:	4606      	mov	r6, r0
   8275c:	f000 feca 	bl	834f4 <__malloc_lock>
   82760:	68bb      	ldr	r3, [r7, #8]
   82762:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82766:	685d      	ldr	r5, [r3, #4]
   82768:	310f      	adds	r1, #15
   8276a:	f025 0503 	bic.w	r5, r5, #3
   8276e:	4429      	add	r1, r5
   82770:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82774:	f021 010f 	bic.w	r1, r1, #15
   82778:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8277c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82780:	db07      	blt.n	82792 <_malloc_trim_r+0x3e>
   82782:	2100      	movs	r1, #0
   82784:	4630      	mov	r0, r6
   82786:	f001 f877 	bl	83878 <_sbrk_r>
   8278a:	68bb      	ldr	r3, [r7, #8]
   8278c:	442b      	add	r3, r5
   8278e:	4298      	cmp	r0, r3
   82790:	d004      	beq.n	8279c <_malloc_trim_r+0x48>
   82792:	4630      	mov	r0, r6
   82794:	f000 feb4 	bl	83500 <__malloc_unlock>
   82798:	2000      	movs	r0, #0
   8279a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8279c:	4261      	negs	r1, r4
   8279e:	4630      	mov	r0, r6
   827a0:	f001 f86a 	bl	83878 <_sbrk_r>
   827a4:	3001      	adds	r0, #1
   827a6:	d00d      	beq.n	827c4 <_malloc_trim_r+0x70>
   827a8:	4b10      	ldr	r3, [pc, #64]	; (827ec <_malloc_trim_r+0x98>)
   827aa:	68ba      	ldr	r2, [r7, #8]
   827ac:	6819      	ldr	r1, [r3, #0]
   827ae:	1b2d      	subs	r5, r5, r4
   827b0:	f045 0501 	orr.w	r5, r5, #1
   827b4:	4630      	mov	r0, r6
   827b6:	1b09      	subs	r1, r1, r4
   827b8:	6055      	str	r5, [r2, #4]
   827ba:	6019      	str	r1, [r3, #0]
   827bc:	f000 fea0 	bl	83500 <__malloc_unlock>
   827c0:	2001      	movs	r0, #1
   827c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   827c4:	2100      	movs	r1, #0
   827c6:	4630      	mov	r0, r6
   827c8:	f001 f856 	bl	83878 <_sbrk_r>
   827cc:	68ba      	ldr	r2, [r7, #8]
   827ce:	1a83      	subs	r3, r0, r2
   827d0:	2b0f      	cmp	r3, #15
   827d2:	ddde      	ble.n	82792 <_malloc_trim_r+0x3e>
   827d4:	4c06      	ldr	r4, [pc, #24]	; (827f0 <_malloc_trim_r+0x9c>)
   827d6:	4905      	ldr	r1, [pc, #20]	; (827ec <_malloc_trim_r+0x98>)
   827d8:	6824      	ldr	r4, [r4, #0]
   827da:	f043 0301 	orr.w	r3, r3, #1
   827de:	1b00      	subs	r0, r0, r4
   827e0:	6053      	str	r3, [r2, #4]
   827e2:	6008      	str	r0, [r1, #0]
   827e4:	e7d5      	b.n	82792 <_malloc_trim_r+0x3e>
   827e6:	bf00      	nop
   827e8:	200706e8 	.word	0x200706e8
   827ec:	20070cbc 	.word	0x20070cbc
   827f0:	20070af0 	.word	0x20070af0

000827f4 <_free_r>:
   827f4:	2900      	cmp	r1, #0
   827f6:	d044      	beq.n	82882 <_free_r+0x8e>
   827f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   827fc:	460d      	mov	r5, r1
   827fe:	4680      	mov	r8, r0
   82800:	f000 fe78 	bl	834f4 <__malloc_lock>
   82804:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82808:	4969      	ldr	r1, [pc, #420]	; (829b0 <_free_r+0x1bc>)
   8280a:	f1a5 0408 	sub.w	r4, r5, #8
   8280e:	f027 0301 	bic.w	r3, r7, #1
   82812:	18e2      	adds	r2, r4, r3
   82814:	688e      	ldr	r6, [r1, #8]
   82816:	6850      	ldr	r0, [r2, #4]
   82818:	42b2      	cmp	r2, r6
   8281a:	f020 0003 	bic.w	r0, r0, #3
   8281e:	d05e      	beq.n	828de <_free_r+0xea>
   82820:	07fe      	lsls	r6, r7, #31
   82822:	6050      	str	r0, [r2, #4]
   82824:	d40b      	bmi.n	8283e <_free_r+0x4a>
   82826:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8282a:	f101 0e08 	add.w	lr, r1, #8
   8282e:	1be4      	subs	r4, r4, r7
   82830:	68a5      	ldr	r5, [r4, #8]
   82832:	443b      	add	r3, r7
   82834:	4575      	cmp	r5, lr
   82836:	d06d      	beq.n	82914 <_free_r+0x120>
   82838:	68e7      	ldr	r7, [r4, #12]
   8283a:	60ef      	str	r7, [r5, #12]
   8283c:	60bd      	str	r5, [r7, #8]
   8283e:	1815      	adds	r5, r2, r0
   82840:	686d      	ldr	r5, [r5, #4]
   82842:	07ed      	lsls	r5, r5, #31
   82844:	d53e      	bpl.n	828c4 <_free_r+0xd0>
   82846:	f043 0201 	orr.w	r2, r3, #1
   8284a:	6062      	str	r2, [r4, #4]
   8284c:	50e3      	str	r3, [r4, r3]
   8284e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82852:	d217      	bcs.n	82884 <_free_r+0x90>
   82854:	2201      	movs	r2, #1
   82856:	08db      	lsrs	r3, r3, #3
   82858:	1098      	asrs	r0, r3, #2
   8285a:	684d      	ldr	r5, [r1, #4]
   8285c:	4413      	add	r3, r2
   8285e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82862:	4082      	lsls	r2, r0
   82864:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82868:	432a      	orrs	r2, r5
   8286a:	3808      	subs	r0, #8
   8286c:	60e0      	str	r0, [r4, #12]
   8286e:	60a7      	str	r7, [r4, #8]
   82870:	604a      	str	r2, [r1, #4]
   82872:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82876:	60fc      	str	r4, [r7, #12]
   82878:	4640      	mov	r0, r8
   8287a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8287e:	f000 be3f 	b.w	83500 <__malloc_unlock>
   82882:	4770      	bx	lr
   82884:	0a5a      	lsrs	r2, r3, #9
   82886:	2a04      	cmp	r2, #4
   82888:	d852      	bhi.n	82930 <_free_r+0x13c>
   8288a:	099a      	lsrs	r2, r3, #6
   8288c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82890:	00ff      	lsls	r7, r7, #3
   82892:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82896:	19c8      	adds	r0, r1, r7
   82898:	59ca      	ldr	r2, [r1, r7]
   8289a:	3808      	subs	r0, #8
   8289c:	4290      	cmp	r0, r2
   8289e:	d04f      	beq.n	82940 <_free_r+0x14c>
   828a0:	6851      	ldr	r1, [r2, #4]
   828a2:	f021 0103 	bic.w	r1, r1, #3
   828a6:	428b      	cmp	r3, r1
   828a8:	d232      	bcs.n	82910 <_free_r+0x11c>
   828aa:	6892      	ldr	r2, [r2, #8]
   828ac:	4290      	cmp	r0, r2
   828ae:	d1f7      	bne.n	828a0 <_free_r+0xac>
   828b0:	68c3      	ldr	r3, [r0, #12]
   828b2:	60a0      	str	r0, [r4, #8]
   828b4:	60e3      	str	r3, [r4, #12]
   828b6:	609c      	str	r4, [r3, #8]
   828b8:	60c4      	str	r4, [r0, #12]
   828ba:	4640      	mov	r0, r8
   828bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   828c0:	f000 be1e 	b.w	83500 <__malloc_unlock>
   828c4:	6895      	ldr	r5, [r2, #8]
   828c6:	4f3b      	ldr	r7, [pc, #236]	; (829b4 <_free_r+0x1c0>)
   828c8:	4403      	add	r3, r0
   828ca:	42bd      	cmp	r5, r7
   828cc:	d040      	beq.n	82950 <_free_r+0x15c>
   828ce:	68d0      	ldr	r0, [r2, #12]
   828d0:	f043 0201 	orr.w	r2, r3, #1
   828d4:	60e8      	str	r0, [r5, #12]
   828d6:	6085      	str	r5, [r0, #8]
   828d8:	6062      	str	r2, [r4, #4]
   828da:	50e3      	str	r3, [r4, r3]
   828dc:	e7b7      	b.n	8284e <_free_r+0x5a>
   828de:	07ff      	lsls	r7, r7, #31
   828e0:	4403      	add	r3, r0
   828e2:	d407      	bmi.n	828f4 <_free_r+0x100>
   828e4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   828e8:	1b64      	subs	r4, r4, r5
   828ea:	68e2      	ldr	r2, [r4, #12]
   828ec:	68a0      	ldr	r0, [r4, #8]
   828ee:	442b      	add	r3, r5
   828f0:	60c2      	str	r2, [r0, #12]
   828f2:	6090      	str	r0, [r2, #8]
   828f4:	4a30      	ldr	r2, [pc, #192]	; (829b8 <_free_r+0x1c4>)
   828f6:	f043 0001 	orr.w	r0, r3, #1
   828fa:	6812      	ldr	r2, [r2, #0]
   828fc:	6060      	str	r0, [r4, #4]
   828fe:	4293      	cmp	r3, r2
   82900:	608c      	str	r4, [r1, #8]
   82902:	d3b9      	bcc.n	82878 <_free_r+0x84>
   82904:	4b2d      	ldr	r3, [pc, #180]	; (829bc <_free_r+0x1c8>)
   82906:	4640      	mov	r0, r8
   82908:	6819      	ldr	r1, [r3, #0]
   8290a:	f7ff ff23 	bl	82754 <_malloc_trim_r>
   8290e:	e7b3      	b.n	82878 <_free_r+0x84>
   82910:	4610      	mov	r0, r2
   82912:	e7cd      	b.n	828b0 <_free_r+0xbc>
   82914:	1811      	adds	r1, r2, r0
   82916:	6849      	ldr	r1, [r1, #4]
   82918:	07c9      	lsls	r1, r1, #31
   8291a:	d444      	bmi.n	829a6 <_free_r+0x1b2>
   8291c:	6891      	ldr	r1, [r2, #8]
   8291e:	4403      	add	r3, r0
   82920:	68d2      	ldr	r2, [r2, #12]
   82922:	f043 0001 	orr.w	r0, r3, #1
   82926:	60ca      	str	r2, [r1, #12]
   82928:	6091      	str	r1, [r2, #8]
   8292a:	6060      	str	r0, [r4, #4]
   8292c:	50e3      	str	r3, [r4, r3]
   8292e:	e7a3      	b.n	82878 <_free_r+0x84>
   82930:	2a14      	cmp	r2, #20
   82932:	d816      	bhi.n	82962 <_free_r+0x16e>
   82934:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82938:	00ff      	lsls	r7, r7, #3
   8293a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8293e:	e7aa      	b.n	82896 <_free_r+0xa2>
   82940:	2301      	movs	r3, #1
   82942:	10aa      	asrs	r2, r5, #2
   82944:	684d      	ldr	r5, [r1, #4]
   82946:	4093      	lsls	r3, r2
   82948:	432b      	orrs	r3, r5
   8294a:	604b      	str	r3, [r1, #4]
   8294c:	4603      	mov	r3, r0
   8294e:	e7b0      	b.n	828b2 <_free_r+0xbe>
   82950:	f043 0201 	orr.w	r2, r3, #1
   82954:	614c      	str	r4, [r1, #20]
   82956:	610c      	str	r4, [r1, #16]
   82958:	60e5      	str	r5, [r4, #12]
   8295a:	60a5      	str	r5, [r4, #8]
   8295c:	6062      	str	r2, [r4, #4]
   8295e:	50e3      	str	r3, [r4, r3]
   82960:	e78a      	b.n	82878 <_free_r+0x84>
   82962:	2a54      	cmp	r2, #84	; 0x54
   82964:	d806      	bhi.n	82974 <_free_r+0x180>
   82966:	0b1a      	lsrs	r2, r3, #12
   82968:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8296c:	00ff      	lsls	r7, r7, #3
   8296e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82972:	e790      	b.n	82896 <_free_r+0xa2>
   82974:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82978:	d806      	bhi.n	82988 <_free_r+0x194>
   8297a:	0bda      	lsrs	r2, r3, #15
   8297c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82980:	00ff      	lsls	r7, r7, #3
   82982:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82986:	e786      	b.n	82896 <_free_r+0xa2>
   82988:	f240 5054 	movw	r0, #1364	; 0x554
   8298c:	4282      	cmp	r2, r0
   8298e:	d806      	bhi.n	8299e <_free_r+0x1aa>
   82990:	0c9a      	lsrs	r2, r3, #18
   82992:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82996:	00ff      	lsls	r7, r7, #3
   82998:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8299c:	e77b      	b.n	82896 <_free_r+0xa2>
   8299e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   829a2:	257e      	movs	r5, #126	; 0x7e
   829a4:	e777      	b.n	82896 <_free_r+0xa2>
   829a6:	f043 0101 	orr.w	r1, r3, #1
   829aa:	6061      	str	r1, [r4, #4]
   829ac:	6013      	str	r3, [r2, #0]
   829ae:	e763      	b.n	82878 <_free_r+0x84>
   829b0:	200706e8 	.word	0x200706e8
   829b4:	200706f0 	.word	0x200706f0
   829b8:	20070af4 	.word	0x20070af4
   829bc:	20070cec 	.word	0x20070cec

000829c0 <__sfvwrite_r>:
   829c0:	6893      	ldr	r3, [r2, #8]
   829c2:	2b00      	cmp	r3, #0
   829c4:	d071      	beq.n	82aaa <__sfvwrite_r+0xea>
   829c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   829ca:	898b      	ldrh	r3, [r1, #12]
   829cc:	b083      	sub	sp, #12
   829ce:	460c      	mov	r4, r1
   829d0:	0719      	lsls	r1, r3, #28
   829d2:	9000      	str	r0, [sp, #0]
   829d4:	4616      	mov	r6, r2
   829d6:	d525      	bpl.n	82a24 <__sfvwrite_r+0x64>
   829d8:	6922      	ldr	r2, [r4, #16]
   829da:	b31a      	cbz	r2, 82a24 <__sfvwrite_r+0x64>
   829dc:	f013 0002 	ands.w	r0, r3, #2
   829e0:	6835      	ldr	r5, [r6, #0]
   829e2:	d02b      	beq.n	82a3c <__sfvwrite_r+0x7c>
   829e4:	f04f 0900 	mov.w	r9, #0
   829e8:	46b0      	mov	r8, r6
   829ea:	464f      	mov	r7, r9
   829ec:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82cb0 <__sfvwrite_r+0x2f0>
   829f0:	2f00      	cmp	r7, #0
   829f2:	d055      	beq.n	82aa0 <__sfvwrite_r+0xe0>
   829f4:	4557      	cmp	r7, sl
   829f6:	463b      	mov	r3, r7
   829f8:	464a      	mov	r2, r9
   829fa:	bf28      	it	cs
   829fc:	4653      	movcs	r3, sl
   829fe:	69e1      	ldr	r1, [r4, #28]
   82a00:	9800      	ldr	r0, [sp, #0]
   82a02:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82a04:	47b0      	blx	r6
   82a06:	2800      	cmp	r0, #0
   82a08:	dd56      	ble.n	82ab8 <__sfvwrite_r+0xf8>
   82a0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   82a0e:	4481      	add	r9, r0
   82a10:	1a1b      	subs	r3, r3, r0
   82a12:	1a3f      	subs	r7, r7, r0
   82a14:	f8c8 3008 	str.w	r3, [r8, #8]
   82a18:	2b00      	cmp	r3, #0
   82a1a:	d1e9      	bne.n	829f0 <__sfvwrite_r+0x30>
   82a1c:	2000      	movs	r0, #0
   82a1e:	b003      	add	sp, #12
   82a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a24:	4621      	mov	r1, r4
   82a26:	9800      	ldr	r0, [sp, #0]
   82a28:	f7ff fc56 	bl	822d8 <__swsetup_r>
   82a2c:	2800      	cmp	r0, #0
   82a2e:	f040 8135 	bne.w	82c9c <__sfvwrite_r+0x2dc>
   82a32:	89a3      	ldrh	r3, [r4, #12]
   82a34:	6835      	ldr	r5, [r6, #0]
   82a36:	f013 0002 	ands.w	r0, r3, #2
   82a3a:	d1d3      	bne.n	829e4 <__sfvwrite_r+0x24>
   82a3c:	f013 0901 	ands.w	r9, r3, #1
   82a40:	d144      	bne.n	82acc <__sfvwrite_r+0x10c>
   82a42:	464f      	mov	r7, r9
   82a44:	9601      	str	r6, [sp, #4]
   82a46:	b337      	cbz	r7, 82a96 <__sfvwrite_r+0xd6>
   82a48:	059a      	lsls	r2, r3, #22
   82a4a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82a4e:	f140 8085 	bpl.w	82b5c <__sfvwrite_r+0x19c>
   82a52:	4547      	cmp	r7, r8
   82a54:	46c3      	mov	fp, r8
   82a56:	f0c0 80ad 	bcc.w	82bb4 <__sfvwrite_r+0x1f4>
   82a5a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82a5e:	f040 80ae 	bne.w	82bbe <__sfvwrite_r+0x1fe>
   82a62:	46ba      	mov	sl, r7
   82a64:	6820      	ldr	r0, [r4, #0]
   82a66:	465a      	mov	r2, fp
   82a68:	4649      	mov	r1, r9
   82a6a:	f000 fcdf 	bl	8342c <memmove>
   82a6e:	68a2      	ldr	r2, [r4, #8]
   82a70:	6823      	ldr	r3, [r4, #0]
   82a72:	eba2 0208 	sub.w	r2, r2, r8
   82a76:	445b      	add	r3, fp
   82a78:	60a2      	str	r2, [r4, #8]
   82a7a:	6023      	str	r3, [r4, #0]
   82a7c:	9a01      	ldr	r2, [sp, #4]
   82a7e:	44d1      	add	r9, sl
   82a80:	6893      	ldr	r3, [r2, #8]
   82a82:	eba7 070a 	sub.w	r7, r7, sl
   82a86:	eba3 030a 	sub.w	r3, r3, sl
   82a8a:	6093      	str	r3, [r2, #8]
   82a8c:	2b00      	cmp	r3, #0
   82a8e:	d0c5      	beq.n	82a1c <__sfvwrite_r+0x5c>
   82a90:	89a3      	ldrh	r3, [r4, #12]
   82a92:	2f00      	cmp	r7, #0
   82a94:	d1d8      	bne.n	82a48 <__sfvwrite_r+0x88>
   82a96:	f8d5 9000 	ldr.w	r9, [r5]
   82a9a:	686f      	ldr	r7, [r5, #4]
   82a9c:	3508      	adds	r5, #8
   82a9e:	e7d2      	b.n	82a46 <__sfvwrite_r+0x86>
   82aa0:	f8d5 9000 	ldr.w	r9, [r5]
   82aa4:	686f      	ldr	r7, [r5, #4]
   82aa6:	3508      	adds	r5, #8
   82aa8:	e7a2      	b.n	829f0 <__sfvwrite_r+0x30>
   82aaa:	2000      	movs	r0, #0
   82aac:	4770      	bx	lr
   82aae:	4621      	mov	r1, r4
   82ab0:	9800      	ldr	r0, [sp, #0]
   82ab2:	f7ff fd21 	bl	824f8 <_fflush_r>
   82ab6:	b378      	cbz	r0, 82b18 <__sfvwrite_r+0x158>
   82ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82abc:	f04f 30ff 	mov.w	r0, #4294967295
   82ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ac4:	81a3      	strh	r3, [r4, #12]
   82ac6:	b003      	add	sp, #12
   82ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82acc:	4681      	mov	r9, r0
   82ace:	4633      	mov	r3, r6
   82ad0:	464e      	mov	r6, r9
   82ad2:	46a8      	mov	r8, r5
   82ad4:	469a      	mov	sl, r3
   82ad6:	464d      	mov	r5, r9
   82ad8:	b356      	cbz	r6, 82b30 <__sfvwrite_r+0x170>
   82ada:	2800      	cmp	r0, #0
   82adc:	d032      	beq.n	82b44 <__sfvwrite_r+0x184>
   82ade:	45b1      	cmp	r9, r6
   82ae0:	46cb      	mov	fp, r9
   82ae2:	bf28      	it	cs
   82ae4:	46b3      	movcs	fp, r6
   82ae6:	6820      	ldr	r0, [r4, #0]
   82ae8:	6923      	ldr	r3, [r4, #16]
   82aea:	465f      	mov	r7, fp
   82aec:	4298      	cmp	r0, r3
   82aee:	6962      	ldr	r2, [r4, #20]
   82af0:	d904      	bls.n	82afc <__sfvwrite_r+0x13c>
   82af2:	68a3      	ldr	r3, [r4, #8]
   82af4:	4413      	add	r3, r2
   82af6:	459b      	cmp	fp, r3
   82af8:	f300 80a8 	bgt.w	82c4c <__sfvwrite_r+0x28c>
   82afc:	4593      	cmp	fp, r2
   82afe:	db4d      	blt.n	82b9c <__sfvwrite_r+0x1dc>
   82b00:	4613      	mov	r3, r2
   82b02:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82b04:	462a      	mov	r2, r5
   82b06:	69e1      	ldr	r1, [r4, #28]
   82b08:	9800      	ldr	r0, [sp, #0]
   82b0a:	47b8      	blx	r7
   82b0c:	1e07      	subs	r7, r0, #0
   82b0e:	ddd3      	ble.n	82ab8 <__sfvwrite_r+0xf8>
   82b10:	ebb9 0907 	subs.w	r9, r9, r7
   82b14:	d0cb      	beq.n	82aae <__sfvwrite_r+0xee>
   82b16:	2001      	movs	r0, #1
   82b18:	f8da 3008 	ldr.w	r3, [sl, #8]
   82b1c:	443d      	add	r5, r7
   82b1e:	1bdb      	subs	r3, r3, r7
   82b20:	1bf6      	subs	r6, r6, r7
   82b22:	f8ca 3008 	str.w	r3, [sl, #8]
   82b26:	2b00      	cmp	r3, #0
   82b28:	f43f af78 	beq.w	82a1c <__sfvwrite_r+0x5c>
   82b2c:	2e00      	cmp	r6, #0
   82b2e:	d1d4      	bne.n	82ada <__sfvwrite_r+0x11a>
   82b30:	f108 0308 	add.w	r3, r8, #8
   82b34:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82b38:	4698      	mov	r8, r3
   82b3a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   82b3e:	3308      	adds	r3, #8
   82b40:	2e00      	cmp	r6, #0
   82b42:	d0f7      	beq.n	82b34 <__sfvwrite_r+0x174>
   82b44:	4632      	mov	r2, r6
   82b46:	210a      	movs	r1, #10
   82b48:	4628      	mov	r0, r5
   82b4a:	f000 fc29 	bl	833a0 <memchr>
   82b4e:	2800      	cmp	r0, #0
   82b50:	f000 80a1 	beq.w	82c96 <__sfvwrite_r+0x2d6>
   82b54:	3001      	adds	r0, #1
   82b56:	eba0 0905 	sub.w	r9, r0, r5
   82b5a:	e7c0      	b.n	82ade <__sfvwrite_r+0x11e>
   82b5c:	6820      	ldr	r0, [r4, #0]
   82b5e:	6923      	ldr	r3, [r4, #16]
   82b60:	4298      	cmp	r0, r3
   82b62:	d802      	bhi.n	82b6a <__sfvwrite_r+0x1aa>
   82b64:	6963      	ldr	r3, [r4, #20]
   82b66:	429f      	cmp	r7, r3
   82b68:	d25d      	bcs.n	82c26 <__sfvwrite_r+0x266>
   82b6a:	45b8      	cmp	r8, r7
   82b6c:	bf28      	it	cs
   82b6e:	46b8      	movcs	r8, r7
   82b70:	4649      	mov	r1, r9
   82b72:	4642      	mov	r2, r8
   82b74:	f000 fc5a 	bl	8342c <memmove>
   82b78:	68a3      	ldr	r3, [r4, #8]
   82b7a:	6822      	ldr	r2, [r4, #0]
   82b7c:	eba3 0308 	sub.w	r3, r3, r8
   82b80:	4442      	add	r2, r8
   82b82:	60a3      	str	r3, [r4, #8]
   82b84:	6022      	str	r2, [r4, #0]
   82b86:	b10b      	cbz	r3, 82b8c <__sfvwrite_r+0x1cc>
   82b88:	46c2      	mov	sl, r8
   82b8a:	e777      	b.n	82a7c <__sfvwrite_r+0xbc>
   82b8c:	4621      	mov	r1, r4
   82b8e:	9800      	ldr	r0, [sp, #0]
   82b90:	f7ff fcb2 	bl	824f8 <_fflush_r>
   82b94:	2800      	cmp	r0, #0
   82b96:	d18f      	bne.n	82ab8 <__sfvwrite_r+0xf8>
   82b98:	46c2      	mov	sl, r8
   82b9a:	e76f      	b.n	82a7c <__sfvwrite_r+0xbc>
   82b9c:	465a      	mov	r2, fp
   82b9e:	4629      	mov	r1, r5
   82ba0:	f000 fc44 	bl	8342c <memmove>
   82ba4:	68a2      	ldr	r2, [r4, #8]
   82ba6:	6823      	ldr	r3, [r4, #0]
   82ba8:	eba2 020b 	sub.w	r2, r2, fp
   82bac:	445b      	add	r3, fp
   82bae:	60a2      	str	r2, [r4, #8]
   82bb0:	6023      	str	r3, [r4, #0]
   82bb2:	e7ad      	b.n	82b10 <__sfvwrite_r+0x150>
   82bb4:	46b8      	mov	r8, r7
   82bb6:	46ba      	mov	sl, r7
   82bb8:	46bb      	mov	fp, r7
   82bba:	6820      	ldr	r0, [r4, #0]
   82bbc:	e753      	b.n	82a66 <__sfvwrite_r+0xa6>
   82bbe:	6962      	ldr	r2, [r4, #20]
   82bc0:	6820      	ldr	r0, [r4, #0]
   82bc2:	6921      	ldr	r1, [r4, #16]
   82bc4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82bc8:	eba0 0a01 	sub.w	sl, r0, r1
   82bcc:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82bd0:	f10a 0001 	add.w	r0, sl, #1
   82bd4:	ea4f 0868 	mov.w	r8, r8, asr #1
   82bd8:	4438      	add	r0, r7
   82bda:	4540      	cmp	r0, r8
   82bdc:	4642      	mov	r2, r8
   82bde:	bf84      	itt	hi
   82be0:	4680      	movhi	r8, r0
   82be2:	4642      	movhi	r2, r8
   82be4:	055b      	lsls	r3, r3, #21
   82be6:	d544      	bpl.n	82c72 <__sfvwrite_r+0x2b2>
   82be8:	4611      	mov	r1, r2
   82bea:	9800      	ldr	r0, [sp, #0]
   82bec:	f000 f920 	bl	82e30 <_malloc_r>
   82bf0:	4683      	mov	fp, r0
   82bf2:	2800      	cmp	r0, #0
   82bf4:	d055      	beq.n	82ca2 <__sfvwrite_r+0x2e2>
   82bf6:	4652      	mov	r2, sl
   82bf8:	6921      	ldr	r1, [r4, #16]
   82bfa:	f7fe fae3 	bl	811c4 <memcpy>
   82bfe:	89a3      	ldrh	r3, [r4, #12]
   82c00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82c08:	81a3      	strh	r3, [r4, #12]
   82c0a:	eb0b 000a 	add.w	r0, fp, sl
   82c0e:	eba8 030a 	sub.w	r3, r8, sl
   82c12:	f8c4 b010 	str.w	fp, [r4, #16]
   82c16:	f8c4 8014 	str.w	r8, [r4, #20]
   82c1a:	6020      	str	r0, [r4, #0]
   82c1c:	60a3      	str	r3, [r4, #8]
   82c1e:	46b8      	mov	r8, r7
   82c20:	46ba      	mov	sl, r7
   82c22:	46bb      	mov	fp, r7
   82c24:	e71f      	b.n	82a66 <__sfvwrite_r+0xa6>
   82c26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82c2a:	42ba      	cmp	r2, r7
   82c2c:	bf28      	it	cs
   82c2e:	463a      	movcs	r2, r7
   82c30:	fb92 f2f3 	sdiv	r2, r2, r3
   82c34:	69e1      	ldr	r1, [r4, #28]
   82c36:	fb03 f302 	mul.w	r3, r3, r2
   82c3a:	9800      	ldr	r0, [sp, #0]
   82c3c:	464a      	mov	r2, r9
   82c3e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82c40:	47b0      	blx	r6
   82c42:	f1b0 0a00 	subs.w	sl, r0, #0
   82c46:	f73f af19 	bgt.w	82a7c <__sfvwrite_r+0xbc>
   82c4a:	e735      	b.n	82ab8 <__sfvwrite_r+0xf8>
   82c4c:	461a      	mov	r2, r3
   82c4e:	4629      	mov	r1, r5
   82c50:	9301      	str	r3, [sp, #4]
   82c52:	f000 fbeb 	bl	8342c <memmove>
   82c56:	6822      	ldr	r2, [r4, #0]
   82c58:	9b01      	ldr	r3, [sp, #4]
   82c5a:	4621      	mov	r1, r4
   82c5c:	441a      	add	r2, r3
   82c5e:	6022      	str	r2, [r4, #0]
   82c60:	9800      	ldr	r0, [sp, #0]
   82c62:	f7ff fc49 	bl	824f8 <_fflush_r>
   82c66:	9b01      	ldr	r3, [sp, #4]
   82c68:	2800      	cmp	r0, #0
   82c6a:	f47f af25 	bne.w	82ab8 <__sfvwrite_r+0xf8>
   82c6e:	461f      	mov	r7, r3
   82c70:	e74e      	b.n	82b10 <__sfvwrite_r+0x150>
   82c72:	9800      	ldr	r0, [sp, #0]
   82c74:	f000 fc4a 	bl	8350c <_realloc_r>
   82c78:	4683      	mov	fp, r0
   82c7a:	2800      	cmp	r0, #0
   82c7c:	d1c5      	bne.n	82c0a <__sfvwrite_r+0x24a>
   82c7e:	9d00      	ldr	r5, [sp, #0]
   82c80:	6921      	ldr	r1, [r4, #16]
   82c82:	4628      	mov	r0, r5
   82c84:	f7ff fdb6 	bl	827f4 <_free_r>
   82c88:	220c      	movs	r2, #12
   82c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c8e:	602a      	str	r2, [r5, #0]
   82c90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82c94:	e712      	b.n	82abc <__sfvwrite_r+0xfc>
   82c96:	f106 0901 	add.w	r9, r6, #1
   82c9a:	e720      	b.n	82ade <__sfvwrite_r+0x11e>
   82c9c:	f04f 30ff 	mov.w	r0, #4294967295
   82ca0:	e6bd      	b.n	82a1e <__sfvwrite_r+0x5e>
   82ca2:	220c      	movs	r2, #12
   82ca4:	9900      	ldr	r1, [sp, #0]
   82ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82caa:	600a      	str	r2, [r1, #0]
   82cac:	e706      	b.n	82abc <__sfvwrite_r+0xfc>
   82cae:	bf00      	nop
   82cb0:	7ffffc00 	.word	0x7ffffc00

00082cb4 <_fwalk_reent>:
   82cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82cb8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82cbc:	d01e      	beq.n	82cfc <_fwalk_reent+0x48>
   82cbe:	4688      	mov	r8, r1
   82cc0:	4607      	mov	r7, r0
   82cc2:	f04f 0900 	mov.w	r9, #0
   82cc6:	6875      	ldr	r5, [r6, #4]
   82cc8:	68b4      	ldr	r4, [r6, #8]
   82cca:	3d01      	subs	r5, #1
   82ccc:	d410      	bmi.n	82cf0 <_fwalk_reent+0x3c>
   82cce:	89a3      	ldrh	r3, [r4, #12]
   82cd0:	3d01      	subs	r5, #1
   82cd2:	2b01      	cmp	r3, #1
   82cd4:	d908      	bls.n	82ce8 <_fwalk_reent+0x34>
   82cd6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82cda:	3301      	adds	r3, #1
   82cdc:	d004      	beq.n	82ce8 <_fwalk_reent+0x34>
   82cde:	4621      	mov	r1, r4
   82ce0:	4638      	mov	r0, r7
   82ce2:	47c0      	blx	r8
   82ce4:	ea49 0900 	orr.w	r9, r9, r0
   82ce8:	1c6b      	adds	r3, r5, #1
   82cea:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82cee:	d1ee      	bne.n	82cce <_fwalk_reent+0x1a>
   82cf0:	6836      	ldr	r6, [r6, #0]
   82cf2:	2e00      	cmp	r6, #0
   82cf4:	d1e7      	bne.n	82cc6 <_fwalk_reent+0x12>
   82cf6:	4648      	mov	r0, r9
   82cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82cfc:	46b1      	mov	r9, r6
   82cfe:	4648      	mov	r0, r9
   82d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082d04 <__locale_mb_cur_max>:
   82d04:	4b04      	ldr	r3, [pc, #16]	; (82d18 <__locale_mb_cur_max+0x14>)
   82d06:	4a05      	ldr	r2, [pc, #20]	; (82d1c <__locale_mb_cur_max+0x18>)
   82d08:	681b      	ldr	r3, [r3, #0]
   82d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82d0c:	2b00      	cmp	r3, #0
   82d0e:	bf08      	it	eq
   82d10:	4613      	moveq	r3, r2
   82d12:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82d16:	4770      	bx	lr
   82d18:	2007014c 	.word	0x2007014c
   82d1c:	2007057c 	.word	0x2007057c

00082d20 <__retarget_lock_init_recursive>:
   82d20:	4770      	bx	lr
   82d22:	bf00      	nop

00082d24 <__retarget_lock_close_recursive>:
   82d24:	4770      	bx	lr
   82d26:	bf00      	nop

00082d28 <__retarget_lock_acquire_recursive>:
   82d28:	4770      	bx	lr
   82d2a:	bf00      	nop

00082d2c <__retarget_lock_release_recursive>:
   82d2c:	4770      	bx	lr
   82d2e:	bf00      	nop

00082d30 <__swhatbuf_r>:
   82d30:	b570      	push	{r4, r5, r6, lr}
   82d32:	460c      	mov	r4, r1
   82d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82d38:	b090      	sub	sp, #64	; 0x40
   82d3a:	2900      	cmp	r1, #0
   82d3c:	4615      	mov	r5, r2
   82d3e:	461e      	mov	r6, r3
   82d40:	db14      	blt.n	82d6c <__swhatbuf_r+0x3c>
   82d42:	aa01      	add	r2, sp, #4
   82d44:	f000 ff68 	bl	83c18 <_fstat_r>
   82d48:	2800      	cmp	r0, #0
   82d4a:	db0f      	blt.n	82d6c <__swhatbuf_r+0x3c>
   82d4c:	9a02      	ldr	r2, [sp, #8]
   82d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82d52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82d56:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82d5a:	fab2 f282 	clz	r2, r2
   82d5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82d62:	0952      	lsrs	r2, r2, #5
   82d64:	6032      	str	r2, [r6, #0]
   82d66:	602b      	str	r3, [r5, #0]
   82d68:	b010      	add	sp, #64	; 0x40
   82d6a:	bd70      	pop	{r4, r5, r6, pc}
   82d6c:	2300      	movs	r3, #0
   82d6e:	89a2      	ldrh	r2, [r4, #12]
   82d70:	6033      	str	r3, [r6, #0]
   82d72:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82d76:	d004      	beq.n	82d82 <__swhatbuf_r+0x52>
   82d78:	2240      	movs	r2, #64	; 0x40
   82d7a:	4618      	mov	r0, r3
   82d7c:	602a      	str	r2, [r5, #0]
   82d7e:	b010      	add	sp, #64	; 0x40
   82d80:	bd70      	pop	{r4, r5, r6, pc}
   82d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82d86:	602b      	str	r3, [r5, #0]
   82d88:	b010      	add	sp, #64	; 0x40
   82d8a:	bd70      	pop	{r4, r5, r6, pc}

00082d8c <__smakebuf_r>:
   82d8c:	898a      	ldrh	r2, [r1, #12]
   82d8e:	460b      	mov	r3, r1
   82d90:	0792      	lsls	r2, r2, #30
   82d92:	d506      	bpl.n	82da2 <__smakebuf_r+0x16>
   82d94:	2101      	movs	r1, #1
   82d96:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82d9a:	6159      	str	r1, [r3, #20]
   82d9c:	601a      	str	r2, [r3, #0]
   82d9e:	611a      	str	r2, [r3, #16]
   82da0:	4770      	bx	lr
   82da2:	b5f0      	push	{r4, r5, r6, r7, lr}
   82da4:	b083      	sub	sp, #12
   82da6:	ab01      	add	r3, sp, #4
   82da8:	466a      	mov	r2, sp
   82daa:	460c      	mov	r4, r1
   82dac:	4606      	mov	r6, r0
   82dae:	f7ff ffbf 	bl	82d30 <__swhatbuf_r>
   82db2:	9900      	ldr	r1, [sp, #0]
   82db4:	4605      	mov	r5, r0
   82db6:	4630      	mov	r0, r6
   82db8:	f000 f83a 	bl	82e30 <_malloc_r>
   82dbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82dc0:	b1d8      	cbz	r0, 82dfa <__smakebuf_r+0x6e>
   82dc2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82dc6:	4f15      	ldr	r7, [pc, #84]	; (82e1c <__smakebuf_r+0x90>)
   82dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82dcc:	63f7      	str	r7, [r6, #60]	; 0x3c
   82dce:	81a3      	strh	r3, [r4, #12]
   82dd0:	6020      	str	r0, [r4, #0]
   82dd2:	6120      	str	r0, [r4, #16]
   82dd4:	6161      	str	r1, [r4, #20]
   82dd6:	b91a      	cbnz	r2, 82de0 <__smakebuf_r+0x54>
   82dd8:	432b      	orrs	r3, r5
   82dda:	81a3      	strh	r3, [r4, #12]
   82ddc:	b003      	add	sp, #12
   82dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82de0:	4630      	mov	r0, r6
   82de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82de6:	f000 ff2b 	bl	83c40 <_isatty_r>
   82dea:	b1a0      	cbz	r0, 82e16 <__smakebuf_r+0x8a>
   82dec:	89a3      	ldrh	r3, [r4, #12]
   82dee:	f023 0303 	bic.w	r3, r3, #3
   82df2:	f043 0301 	orr.w	r3, r3, #1
   82df6:	b21b      	sxth	r3, r3
   82df8:	e7ee      	b.n	82dd8 <__smakebuf_r+0x4c>
   82dfa:	059a      	lsls	r2, r3, #22
   82dfc:	d4ee      	bmi.n	82ddc <__smakebuf_r+0x50>
   82dfe:	2101      	movs	r1, #1
   82e00:	f023 0303 	bic.w	r3, r3, #3
   82e04:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82e08:	f043 0302 	orr.w	r3, r3, #2
   82e0c:	81a3      	strh	r3, [r4, #12]
   82e0e:	6161      	str	r1, [r4, #20]
   82e10:	6022      	str	r2, [r4, #0]
   82e12:	6122      	str	r2, [r4, #16]
   82e14:	e7e2      	b.n	82ddc <__smakebuf_r+0x50>
   82e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82e1a:	e7dd      	b.n	82dd8 <__smakebuf_r+0x4c>
   82e1c:	0008254d 	.word	0x0008254d

00082e20 <malloc>:
   82e20:	4b02      	ldr	r3, [pc, #8]	; (82e2c <malloc+0xc>)
   82e22:	4601      	mov	r1, r0
   82e24:	6818      	ldr	r0, [r3, #0]
   82e26:	f000 b803 	b.w	82e30 <_malloc_r>
   82e2a:	bf00      	nop
   82e2c:	2007014c 	.word	0x2007014c

00082e30 <_malloc_r>:
   82e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82e34:	f101 060b 	add.w	r6, r1, #11
   82e38:	2e16      	cmp	r6, #22
   82e3a:	b083      	sub	sp, #12
   82e3c:	4605      	mov	r5, r0
   82e3e:	f240 809e 	bls.w	82f7e <_malloc_r+0x14e>
   82e42:	f036 0607 	bics.w	r6, r6, #7
   82e46:	f100 80bd 	bmi.w	82fc4 <_malloc_r+0x194>
   82e4a:	42b1      	cmp	r1, r6
   82e4c:	f200 80ba 	bhi.w	82fc4 <_malloc_r+0x194>
   82e50:	f000 fb50 	bl	834f4 <__malloc_lock>
   82e54:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82e58:	f0c0 8285 	bcc.w	83366 <_malloc_r+0x536>
   82e5c:	0a73      	lsrs	r3, r6, #9
   82e5e:	f000 80b8 	beq.w	82fd2 <_malloc_r+0x1a2>
   82e62:	2b04      	cmp	r3, #4
   82e64:	f200 816c 	bhi.w	83140 <_malloc_r+0x310>
   82e68:	09b3      	lsrs	r3, r6, #6
   82e6a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82e6e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82e72:	00c1      	lsls	r1, r0, #3
   82e74:	4fb8      	ldr	r7, [pc, #736]	; (83158 <_malloc_r+0x328>)
   82e76:	4439      	add	r1, r7
   82e78:	684c      	ldr	r4, [r1, #4]
   82e7a:	3908      	subs	r1, #8
   82e7c:	42a1      	cmp	r1, r4
   82e7e:	d106      	bne.n	82e8e <_malloc_r+0x5e>
   82e80:	e00c      	b.n	82e9c <_malloc_r+0x6c>
   82e82:	2a00      	cmp	r2, #0
   82e84:	f280 80ab 	bge.w	82fde <_malloc_r+0x1ae>
   82e88:	68e4      	ldr	r4, [r4, #12]
   82e8a:	42a1      	cmp	r1, r4
   82e8c:	d006      	beq.n	82e9c <_malloc_r+0x6c>
   82e8e:	6863      	ldr	r3, [r4, #4]
   82e90:	f023 0303 	bic.w	r3, r3, #3
   82e94:	1b9a      	subs	r2, r3, r6
   82e96:	2a0f      	cmp	r2, #15
   82e98:	ddf3      	ble.n	82e82 <_malloc_r+0x52>
   82e9a:	4670      	mov	r0, lr
   82e9c:	693c      	ldr	r4, [r7, #16]
   82e9e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8316c <_malloc_r+0x33c>
   82ea2:	4574      	cmp	r4, lr
   82ea4:	f000 819e 	beq.w	831e4 <_malloc_r+0x3b4>
   82ea8:	6863      	ldr	r3, [r4, #4]
   82eaa:	f023 0303 	bic.w	r3, r3, #3
   82eae:	1b9a      	subs	r2, r3, r6
   82eb0:	2a0f      	cmp	r2, #15
   82eb2:	f300 8183 	bgt.w	831bc <_malloc_r+0x38c>
   82eb6:	2a00      	cmp	r2, #0
   82eb8:	f8c7 e014 	str.w	lr, [r7, #20]
   82ebc:	f8c7 e010 	str.w	lr, [r7, #16]
   82ec0:	f280 8091 	bge.w	82fe6 <_malloc_r+0x1b6>
   82ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82ec8:	f080 8154 	bcs.w	83174 <_malloc_r+0x344>
   82ecc:	2201      	movs	r2, #1
   82ece:	08db      	lsrs	r3, r3, #3
   82ed0:	6879      	ldr	r1, [r7, #4]
   82ed2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82ed6:	4413      	add	r3, r2
   82ed8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82edc:	fa02 f20c 	lsl.w	r2, r2, ip
   82ee0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82ee4:	430a      	orrs	r2, r1
   82ee6:	f1ac 0108 	sub.w	r1, ip, #8
   82eea:	60e1      	str	r1, [r4, #12]
   82eec:	f8c4 8008 	str.w	r8, [r4, #8]
   82ef0:	607a      	str	r2, [r7, #4]
   82ef2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82ef6:	f8c8 400c 	str.w	r4, [r8, #12]
   82efa:	2401      	movs	r4, #1
   82efc:	1083      	asrs	r3, r0, #2
   82efe:	409c      	lsls	r4, r3
   82f00:	4294      	cmp	r4, r2
   82f02:	d87d      	bhi.n	83000 <_malloc_r+0x1d0>
   82f04:	4214      	tst	r4, r2
   82f06:	d106      	bne.n	82f16 <_malloc_r+0xe6>
   82f08:	f020 0003 	bic.w	r0, r0, #3
   82f0c:	0064      	lsls	r4, r4, #1
   82f0e:	4214      	tst	r4, r2
   82f10:	f100 0004 	add.w	r0, r0, #4
   82f14:	d0fa      	beq.n	82f0c <_malloc_r+0xdc>
   82f16:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82f1a:	46cc      	mov	ip, r9
   82f1c:	4680      	mov	r8, r0
   82f1e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82f22:	459c      	cmp	ip, r3
   82f24:	d107      	bne.n	82f36 <_malloc_r+0x106>
   82f26:	e15f      	b.n	831e8 <_malloc_r+0x3b8>
   82f28:	2a00      	cmp	r2, #0
   82f2a:	f280 816d 	bge.w	83208 <_malloc_r+0x3d8>
   82f2e:	68db      	ldr	r3, [r3, #12]
   82f30:	459c      	cmp	ip, r3
   82f32:	f000 8159 	beq.w	831e8 <_malloc_r+0x3b8>
   82f36:	6859      	ldr	r1, [r3, #4]
   82f38:	f021 0103 	bic.w	r1, r1, #3
   82f3c:	1b8a      	subs	r2, r1, r6
   82f3e:	2a0f      	cmp	r2, #15
   82f40:	ddf2      	ble.n	82f28 <_malloc_r+0xf8>
   82f42:	68dc      	ldr	r4, [r3, #12]
   82f44:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82f48:	f046 0801 	orr.w	r8, r6, #1
   82f4c:	4628      	mov	r0, r5
   82f4e:	441e      	add	r6, r3
   82f50:	f042 0501 	orr.w	r5, r2, #1
   82f54:	f8c3 8004 	str.w	r8, [r3, #4]
   82f58:	f8cc 400c 	str.w	r4, [ip, #12]
   82f5c:	f8c4 c008 	str.w	ip, [r4, #8]
   82f60:	617e      	str	r6, [r7, #20]
   82f62:	613e      	str	r6, [r7, #16]
   82f64:	f8c6 e00c 	str.w	lr, [r6, #12]
   82f68:	f8c6 e008 	str.w	lr, [r6, #8]
   82f6c:	6075      	str	r5, [r6, #4]
   82f6e:	505a      	str	r2, [r3, r1]
   82f70:	9300      	str	r3, [sp, #0]
   82f72:	f000 fac5 	bl	83500 <__malloc_unlock>
   82f76:	9b00      	ldr	r3, [sp, #0]
   82f78:	f103 0408 	add.w	r4, r3, #8
   82f7c:	e01e      	b.n	82fbc <_malloc_r+0x18c>
   82f7e:	2910      	cmp	r1, #16
   82f80:	d820      	bhi.n	82fc4 <_malloc_r+0x194>
   82f82:	f000 fab7 	bl	834f4 <__malloc_lock>
   82f86:	2610      	movs	r6, #16
   82f88:	2318      	movs	r3, #24
   82f8a:	2002      	movs	r0, #2
   82f8c:	4f72      	ldr	r7, [pc, #456]	; (83158 <_malloc_r+0x328>)
   82f8e:	443b      	add	r3, r7
   82f90:	685c      	ldr	r4, [r3, #4]
   82f92:	f1a3 0208 	sub.w	r2, r3, #8
   82f96:	4294      	cmp	r4, r2
   82f98:	f000 812f 	beq.w	831fa <_malloc_r+0x3ca>
   82f9c:	6863      	ldr	r3, [r4, #4]
   82f9e:	68e1      	ldr	r1, [r4, #12]
   82fa0:	f023 0303 	bic.w	r3, r3, #3
   82fa4:	4423      	add	r3, r4
   82fa6:	685a      	ldr	r2, [r3, #4]
   82fa8:	68a6      	ldr	r6, [r4, #8]
   82faa:	f042 0201 	orr.w	r2, r2, #1
   82fae:	60f1      	str	r1, [r6, #12]
   82fb0:	4628      	mov	r0, r5
   82fb2:	608e      	str	r6, [r1, #8]
   82fb4:	605a      	str	r2, [r3, #4]
   82fb6:	f000 faa3 	bl	83500 <__malloc_unlock>
   82fba:	3408      	adds	r4, #8
   82fbc:	4620      	mov	r0, r4
   82fbe:	b003      	add	sp, #12
   82fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fc4:	2400      	movs	r4, #0
   82fc6:	230c      	movs	r3, #12
   82fc8:	4620      	mov	r0, r4
   82fca:	602b      	str	r3, [r5, #0]
   82fcc:	b003      	add	sp, #12
   82fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82fd2:	2040      	movs	r0, #64	; 0x40
   82fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
   82fd8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82fdc:	e74a      	b.n	82e74 <_malloc_r+0x44>
   82fde:	4423      	add	r3, r4
   82fe0:	685a      	ldr	r2, [r3, #4]
   82fe2:	68e1      	ldr	r1, [r4, #12]
   82fe4:	e7e0      	b.n	82fa8 <_malloc_r+0x178>
   82fe6:	4423      	add	r3, r4
   82fe8:	685a      	ldr	r2, [r3, #4]
   82fea:	4628      	mov	r0, r5
   82fec:	f042 0201 	orr.w	r2, r2, #1
   82ff0:	605a      	str	r2, [r3, #4]
   82ff2:	3408      	adds	r4, #8
   82ff4:	f000 fa84 	bl	83500 <__malloc_unlock>
   82ff8:	4620      	mov	r0, r4
   82ffa:	b003      	add	sp, #12
   82ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83000:	68bc      	ldr	r4, [r7, #8]
   83002:	6863      	ldr	r3, [r4, #4]
   83004:	f023 0803 	bic.w	r8, r3, #3
   83008:	45b0      	cmp	r8, r6
   8300a:	d304      	bcc.n	83016 <_malloc_r+0x1e6>
   8300c:	eba8 0306 	sub.w	r3, r8, r6
   83010:	2b0f      	cmp	r3, #15
   83012:	f300 8085 	bgt.w	83120 <_malloc_r+0x2f0>
   83016:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83170 <_malloc_r+0x340>
   8301a:	4b50      	ldr	r3, [pc, #320]	; (8315c <_malloc_r+0x32c>)
   8301c:	f8d9 2000 	ldr.w	r2, [r9]
   83020:	681b      	ldr	r3, [r3, #0]
   83022:	3201      	adds	r2, #1
   83024:	4433      	add	r3, r6
   83026:	eb04 0a08 	add.w	sl, r4, r8
   8302a:	f000 8154 	beq.w	832d6 <_malloc_r+0x4a6>
   8302e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83032:	330f      	adds	r3, #15
   83034:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83038:	f02b 0b0f 	bic.w	fp, fp, #15
   8303c:	4659      	mov	r1, fp
   8303e:	4628      	mov	r0, r5
   83040:	f000 fc1a 	bl	83878 <_sbrk_r>
   83044:	1c41      	adds	r1, r0, #1
   83046:	4602      	mov	r2, r0
   83048:	f000 80fb 	beq.w	83242 <_malloc_r+0x412>
   8304c:	4582      	cmp	sl, r0
   8304e:	f200 80f6 	bhi.w	8323e <_malloc_r+0x40e>
   83052:	4b43      	ldr	r3, [pc, #268]	; (83160 <_malloc_r+0x330>)
   83054:	6819      	ldr	r1, [r3, #0]
   83056:	4459      	add	r1, fp
   83058:	6019      	str	r1, [r3, #0]
   8305a:	f000 814c 	beq.w	832f6 <_malloc_r+0x4c6>
   8305e:	f8d9 0000 	ldr.w	r0, [r9]
   83062:	3001      	adds	r0, #1
   83064:	bf1b      	ittet	ne
   83066:	eba2 0a0a 	subne.w	sl, r2, sl
   8306a:	4451      	addne	r1, sl
   8306c:	f8c9 2000 	streq.w	r2, [r9]
   83070:	6019      	strne	r1, [r3, #0]
   83072:	f012 0107 	ands.w	r1, r2, #7
   83076:	f000 8114 	beq.w	832a2 <_malloc_r+0x472>
   8307a:	f1c1 0008 	rsb	r0, r1, #8
   8307e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83082:	4402      	add	r2, r0
   83084:	3108      	adds	r1, #8
   83086:	eb02 090b 	add.w	r9, r2, fp
   8308a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8308e:	eba1 0909 	sub.w	r9, r1, r9
   83092:	4649      	mov	r1, r9
   83094:	4628      	mov	r0, r5
   83096:	9301      	str	r3, [sp, #4]
   83098:	9200      	str	r2, [sp, #0]
   8309a:	f000 fbed 	bl	83878 <_sbrk_r>
   8309e:	1c43      	adds	r3, r0, #1
   830a0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   830a4:	f000 8142 	beq.w	8332c <_malloc_r+0x4fc>
   830a8:	1a80      	subs	r0, r0, r2
   830aa:	4448      	add	r0, r9
   830ac:	f040 0001 	orr.w	r0, r0, #1
   830b0:	6819      	ldr	r1, [r3, #0]
   830b2:	42bc      	cmp	r4, r7
   830b4:	4449      	add	r1, r9
   830b6:	60ba      	str	r2, [r7, #8]
   830b8:	6019      	str	r1, [r3, #0]
   830ba:	6050      	str	r0, [r2, #4]
   830bc:	d017      	beq.n	830ee <_malloc_r+0x2be>
   830be:	f1b8 0f0f 	cmp.w	r8, #15
   830c2:	f240 80fa 	bls.w	832ba <_malloc_r+0x48a>
   830c6:	f04f 0c05 	mov.w	ip, #5
   830ca:	6862      	ldr	r2, [r4, #4]
   830cc:	f1a8 000c 	sub.w	r0, r8, #12
   830d0:	f020 0007 	bic.w	r0, r0, #7
   830d4:	f002 0201 	and.w	r2, r2, #1
   830d8:	eb04 0e00 	add.w	lr, r4, r0
   830dc:	4302      	orrs	r2, r0
   830de:	280f      	cmp	r0, #15
   830e0:	6062      	str	r2, [r4, #4]
   830e2:	f8ce c004 	str.w	ip, [lr, #4]
   830e6:	f8ce c008 	str.w	ip, [lr, #8]
   830ea:	f200 8116 	bhi.w	8331a <_malloc_r+0x4ea>
   830ee:	4b1d      	ldr	r3, [pc, #116]	; (83164 <_malloc_r+0x334>)
   830f0:	68bc      	ldr	r4, [r7, #8]
   830f2:	681a      	ldr	r2, [r3, #0]
   830f4:	4291      	cmp	r1, r2
   830f6:	bf88      	it	hi
   830f8:	6019      	strhi	r1, [r3, #0]
   830fa:	4b1b      	ldr	r3, [pc, #108]	; (83168 <_malloc_r+0x338>)
   830fc:	681a      	ldr	r2, [r3, #0]
   830fe:	4291      	cmp	r1, r2
   83100:	6862      	ldr	r2, [r4, #4]
   83102:	bf88      	it	hi
   83104:	6019      	strhi	r1, [r3, #0]
   83106:	f022 0203 	bic.w	r2, r2, #3
   8310a:	4296      	cmp	r6, r2
   8310c:	eba2 0306 	sub.w	r3, r2, r6
   83110:	d801      	bhi.n	83116 <_malloc_r+0x2e6>
   83112:	2b0f      	cmp	r3, #15
   83114:	dc04      	bgt.n	83120 <_malloc_r+0x2f0>
   83116:	4628      	mov	r0, r5
   83118:	f000 f9f2 	bl	83500 <__malloc_unlock>
   8311c:	2400      	movs	r4, #0
   8311e:	e74d      	b.n	82fbc <_malloc_r+0x18c>
   83120:	f046 0201 	orr.w	r2, r6, #1
   83124:	f043 0301 	orr.w	r3, r3, #1
   83128:	4426      	add	r6, r4
   8312a:	6062      	str	r2, [r4, #4]
   8312c:	4628      	mov	r0, r5
   8312e:	60be      	str	r6, [r7, #8]
   83130:	3408      	adds	r4, #8
   83132:	6073      	str	r3, [r6, #4]
   83134:	f000 f9e4 	bl	83500 <__malloc_unlock>
   83138:	4620      	mov	r0, r4
   8313a:	b003      	add	sp, #12
   8313c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83140:	2b14      	cmp	r3, #20
   83142:	d970      	bls.n	83226 <_malloc_r+0x3f6>
   83144:	2b54      	cmp	r3, #84	; 0x54
   83146:	f200 80a2 	bhi.w	8328e <_malloc_r+0x45e>
   8314a:	0b33      	lsrs	r3, r6, #12
   8314c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83150:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83154:	00c1      	lsls	r1, r0, #3
   83156:	e68d      	b.n	82e74 <_malloc_r+0x44>
   83158:	200706e8 	.word	0x200706e8
   8315c:	20070cec 	.word	0x20070cec
   83160:	20070cbc 	.word	0x20070cbc
   83164:	20070ce4 	.word	0x20070ce4
   83168:	20070ce8 	.word	0x20070ce8
   8316c:	200706f0 	.word	0x200706f0
   83170:	20070af0 	.word	0x20070af0
   83174:	0a5a      	lsrs	r2, r3, #9
   83176:	2a04      	cmp	r2, #4
   83178:	d95b      	bls.n	83232 <_malloc_r+0x402>
   8317a:	2a14      	cmp	r2, #20
   8317c:	f200 80ae 	bhi.w	832dc <_malloc_r+0x4ac>
   83180:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   83184:	00c9      	lsls	r1, r1, #3
   83186:	325b      	adds	r2, #91	; 0x5b
   83188:	eb07 0c01 	add.w	ip, r7, r1
   8318c:	5879      	ldr	r1, [r7, r1]
   8318e:	f1ac 0c08 	sub.w	ip, ip, #8
   83192:	458c      	cmp	ip, r1
   83194:	f000 8088 	beq.w	832a8 <_malloc_r+0x478>
   83198:	684a      	ldr	r2, [r1, #4]
   8319a:	f022 0203 	bic.w	r2, r2, #3
   8319e:	4293      	cmp	r3, r2
   831a0:	d273      	bcs.n	8328a <_malloc_r+0x45a>
   831a2:	6889      	ldr	r1, [r1, #8]
   831a4:	458c      	cmp	ip, r1
   831a6:	d1f7      	bne.n	83198 <_malloc_r+0x368>
   831a8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   831ac:	687a      	ldr	r2, [r7, #4]
   831ae:	60e3      	str	r3, [r4, #12]
   831b0:	f8c4 c008 	str.w	ip, [r4, #8]
   831b4:	609c      	str	r4, [r3, #8]
   831b6:	f8cc 400c 	str.w	r4, [ip, #12]
   831ba:	e69e      	b.n	82efa <_malloc_r+0xca>
   831bc:	f046 0c01 	orr.w	ip, r6, #1
   831c0:	f042 0101 	orr.w	r1, r2, #1
   831c4:	4426      	add	r6, r4
   831c6:	f8c4 c004 	str.w	ip, [r4, #4]
   831ca:	4628      	mov	r0, r5
   831cc:	617e      	str	r6, [r7, #20]
   831ce:	613e      	str	r6, [r7, #16]
   831d0:	f8c6 e00c 	str.w	lr, [r6, #12]
   831d4:	f8c6 e008 	str.w	lr, [r6, #8]
   831d8:	6071      	str	r1, [r6, #4]
   831da:	50e2      	str	r2, [r4, r3]
   831dc:	f000 f990 	bl	83500 <__malloc_unlock>
   831e0:	3408      	adds	r4, #8
   831e2:	e6eb      	b.n	82fbc <_malloc_r+0x18c>
   831e4:	687a      	ldr	r2, [r7, #4]
   831e6:	e688      	b.n	82efa <_malloc_r+0xca>
   831e8:	f108 0801 	add.w	r8, r8, #1
   831ec:	f018 0f03 	tst.w	r8, #3
   831f0:	f10c 0c08 	add.w	ip, ip, #8
   831f4:	f47f ae93 	bne.w	82f1e <_malloc_r+0xee>
   831f8:	e02d      	b.n	83256 <_malloc_r+0x426>
   831fa:	68dc      	ldr	r4, [r3, #12]
   831fc:	42a3      	cmp	r3, r4
   831fe:	bf08      	it	eq
   83200:	3002      	addeq	r0, #2
   83202:	f43f ae4b 	beq.w	82e9c <_malloc_r+0x6c>
   83206:	e6c9      	b.n	82f9c <_malloc_r+0x16c>
   83208:	461c      	mov	r4, r3
   8320a:	4419      	add	r1, r3
   8320c:	684a      	ldr	r2, [r1, #4]
   8320e:	68db      	ldr	r3, [r3, #12]
   83210:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83214:	f042 0201 	orr.w	r2, r2, #1
   83218:	604a      	str	r2, [r1, #4]
   8321a:	4628      	mov	r0, r5
   8321c:	60f3      	str	r3, [r6, #12]
   8321e:	609e      	str	r6, [r3, #8]
   83220:	f000 f96e 	bl	83500 <__malloc_unlock>
   83224:	e6ca      	b.n	82fbc <_malloc_r+0x18c>
   83226:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8322a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8322e:	00c1      	lsls	r1, r0, #3
   83230:	e620      	b.n	82e74 <_malloc_r+0x44>
   83232:	099a      	lsrs	r2, r3, #6
   83234:	f102 0139 	add.w	r1, r2, #57	; 0x39
   83238:	00c9      	lsls	r1, r1, #3
   8323a:	3238      	adds	r2, #56	; 0x38
   8323c:	e7a4      	b.n	83188 <_malloc_r+0x358>
   8323e:	42bc      	cmp	r4, r7
   83240:	d054      	beq.n	832ec <_malloc_r+0x4bc>
   83242:	68bc      	ldr	r4, [r7, #8]
   83244:	6862      	ldr	r2, [r4, #4]
   83246:	f022 0203 	bic.w	r2, r2, #3
   8324a:	e75e      	b.n	8310a <_malloc_r+0x2da>
   8324c:	f859 3908 	ldr.w	r3, [r9], #-8
   83250:	4599      	cmp	r9, r3
   83252:	f040 8086 	bne.w	83362 <_malloc_r+0x532>
   83256:	f010 0f03 	tst.w	r0, #3
   8325a:	f100 30ff 	add.w	r0, r0, #4294967295
   8325e:	d1f5      	bne.n	8324c <_malloc_r+0x41c>
   83260:	687b      	ldr	r3, [r7, #4]
   83262:	ea23 0304 	bic.w	r3, r3, r4
   83266:	607b      	str	r3, [r7, #4]
   83268:	0064      	lsls	r4, r4, #1
   8326a:	429c      	cmp	r4, r3
   8326c:	f63f aec8 	bhi.w	83000 <_malloc_r+0x1d0>
   83270:	2c00      	cmp	r4, #0
   83272:	f43f aec5 	beq.w	83000 <_malloc_r+0x1d0>
   83276:	421c      	tst	r4, r3
   83278:	4640      	mov	r0, r8
   8327a:	f47f ae4c 	bne.w	82f16 <_malloc_r+0xe6>
   8327e:	0064      	lsls	r4, r4, #1
   83280:	421c      	tst	r4, r3
   83282:	f100 0004 	add.w	r0, r0, #4
   83286:	d0fa      	beq.n	8327e <_malloc_r+0x44e>
   83288:	e645      	b.n	82f16 <_malloc_r+0xe6>
   8328a:	468c      	mov	ip, r1
   8328c:	e78c      	b.n	831a8 <_malloc_r+0x378>
   8328e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83292:	d815      	bhi.n	832c0 <_malloc_r+0x490>
   83294:	0bf3      	lsrs	r3, r6, #15
   83296:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8329a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8329e:	00c1      	lsls	r1, r0, #3
   832a0:	e5e8      	b.n	82e74 <_malloc_r+0x44>
   832a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   832a6:	e6ee      	b.n	83086 <_malloc_r+0x256>
   832a8:	2101      	movs	r1, #1
   832aa:	687b      	ldr	r3, [r7, #4]
   832ac:	1092      	asrs	r2, r2, #2
   832ae:	fa01 f202 	lsl.w	r2, r1, r2
   832b2:	431a      	orrs	r2, r3
   832b4:	607a      	str	r2, [r7, #4]
   832b6:	4663      	mov	r3, ip
   832b8:	e779      	b.n	831ae <_malloc_r+0x37e>
   832ba:	2301      	movs	r3, #1
   832bc:	6053      	str	r3, [r2, #4]
   832be:	e72a      	b.n	83116 <_malloc_r+0x2e6>
   832c0:	f240 5254 	movw	r2, #1364	; 0x554
   832c4:	4293      	cmp	r3, r2
   832c6:	d822      	bhi.n	8330e <_malloc_r+0x4de>
   832c8:	0cb3      	lsrs	r3, r6, #18
   832ca:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   832ce:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   832d2:	00c1      	lsls	r1, r0, #3
   832d4:	e5ce      	b.n	82e74 <_malloc_r+0x44>
   832d6:	f103 0b10 	add.w	fp, r3, #16
   832da:	e6af      	b.n	8303c <_malloc_r+0x20c>
   832dc:	2a54      	cmp	r2, #84	; 0x54
   832de:	d829      	bhi.n	83334 <_malloc_r+0x504>
   832e0:	0b1a      	lsrs	r2, r3, #12
   832e2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   832e6:	00c9      	lsls	r1, r1, #3
   832e8:	326e      	adds	r2, #110	; 0x6e
   832ea:	e74d      	b.n	83188 <_malloc_r+0x358>
   832ec:	4b20      	ldr	r3, [pc, #128]	; (83370 <_malloc_r+0x540>)
   832ee:	6819      	ldr	r1, [r3, #0]
   832f0:	4459      	add	r1, fp
   832f2:	6019      	str	r1, [r3, #0]
   832f4:	e6b3      	b.n	8305e <_malloc_r+0x22e>
   832f6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   832fa:	2800      	cmp	r0, #0
   832fc:	f47f aeaf 	bne.w	8305e <_malloc_r+0x22e>
   83300:	eb08 030b 	add.w	r3, r8, fp
   83304:	68ba      	ldr	r2, [r7, #8]
   83306:	f043 0301 	orr.w	r3, r3, #1
   8330a:	6053      	str	r3, [r2, #4]
   8330c:	e6ef      	b.n	830ee <_malloc_r+0x2be>
   8330e:	207f      	movs	r0, #127	; 0x7f
   83310:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83314:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83318:	e5ac      	b.n	82e74 <_malloc_r+0x44>
   8331a:	f104 0108 	add.w	r1, r4, #8
   8331e:	4628      	mov	r0, r5
   83320:	9300      	str	r3, [sp, #0]
   83322:	f7ff fa67 	bl	827f4 <_free_r>
   83326:	9b00      	ldr	r3, [sp, #0]
   83328:	6819      	ldr	r1, [r3, #0]
   8332a:	e6e0      	b.n	830ee <_malloc_r+0x2be>
   8332c:	2001      	movs	r0, #1
   8332e:	f04f 0900 	mov.w	r9, #0
   83332:	e6bd      	b.n	830b0 <_malloc_r+0x280>
   83334:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83338:	d805      	bhi.n	83346 <_malloc_r+0x516>
   8333a:	0bda      	lsrs	r2, r3, #15
   8333c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83340:	00c9      	lsls	r1, r1, #3
   83342:	3277      	adds	r2, #119	; 0x77
   83344:	e720      	b.n	83188 <_malloc_r+0x358>
   83346:	f240 5154 	movw	r1, #1364	; 0x554
   8334a:	428a      	cmp	r2, r1
   8334c:	d805      	bhi.n	8335a <_malloc_r+0x52a>
   8334e:	0c9a      	lsrs	r2, r3, #18
   83350:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83354:	00c9      	lsls	r1, r1, #3
   83356:	327c      	adds	r2, #124	; 0x7c
   83358:	e716      	b.n	83188 <_malloc_r+0x358>
   8335a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8335e:	227e      	movs	r2, #126	; 0x7e
   83360:	e712      	b.n	83188 <_malloc_r+0x358>
   83362:	687b      	ldr	r3, [r7, #4]
   83364:	e780      	b.n	83268 <_malloc_r+0x438>
   83366:	08f0      	lsrs	r0, r6, #3
   83368:	f106 0308 	add.w	r3, r6, #8
   8336c:	e60e      	b.n	82f8c <_malloc_r+0x15c>
   8336e:	bf00      	nop
   83370:	20070cbc 	.word	0x20070cbc

00083374 <__ascii_mbtowc>:
   83374:	b082      	sub	sp, #8
   83376:	b149      	cbz	r1, 8338c <__ascii_mbtowc+0x18>
   83378:	b15a      	cbz	r2, 83392 <__ascii_mbtowc+0x1e>
   8337a:	b16b      	cbz	r3, 83398 <__ascii_mbtowc+0x24>
   8337c:	7813      	ldrb	r3, [r2, #0]
   8337e:	600b      	str	r3, [r1, #0]
   83380:	7812      	ldrb	r2, [r2, #0]
   83382:	1c10      	adds	r0, r2, #0
   83384:	bf18      	it	ne
   83386:	2001      	movne	r0, #1
   83388:	b002      	add	sp, #8
   8338a:	4770      	bx	lr
   8338c:	a901      	add	r1, sp, #4
   8338e:	2a00      	cmp	r2, #0
   83390:	d1f3      	bne.n	8337a <__ascii_mbtowc+0x6>
   83392:	4610      	mov	r0, r2
   83394:	b002      	add	sp, #8
   83396:	4770      	bx	lr
   83398:	f06f 0001 	mvn.w	r0, #1
   8339c:	e7f4      	b.n	83388 <__ascii_mbtowc+0x14>
   8339e:	bf00      	nop

000833a0 <memchr>:
   833a0:	0783      	lsls	r3, r0, #30
   833a2:	b470      	push	{r4, r5, r6}
   833a4:	b2cd      	uxtb	r5, r1
   833a6:	d03d      	beq.n	83424 <memchr+0x84>
   833a8:	1e54      	subs	r4, r2, #1
   833aa:	b30a      	cbz	r2, 833f0 <memchr+0x50>
   833ac:	7803      	ldrb	r3, [r0, #0]
   833ae:	42ab      	cmp	r3, r5
   833b0:	d01f      	beq.n	833f2 <memchr+0x52>
   833b2:	1c43      	adds	r3, r0, #1
   833b4:	e005      	b.n	833c2 <memchr+0x22>
   833b6:	f114 34ff 	adds.w	r4, r4, #4294967295
   833ba:	d319      	bcc.n	833f0 <memchr+0x50>
   833bc:	7802      	ldrb	r2, [r0, #0]
   833be:	42aa      	cmp	r2, r5
   833c0:	d017      	beq.n	833f2 <memchr+0x52>
   833c2:	f013 0f03 	tst.w	r3, #3
   833c6:	4618      	mov	r0, r3
   833c8:	f103 0301 	add.w	r3, r3, #1
   833cc:	d1f3      	bne.n	833b6 <memchr+0x16>
   833ce:	2c03      	cmp	r4, #3
   833d0:	d811      	bhi.n	833f6 <memchr+0x56>
   833d2:	b34c      	cbz	r4, 83428 <memchr+0x88>
   833d4:	7803      	ldrb	r3, [r0, #0]
   833d6:	42ab      	cmp	r3, r5
   833d8:	d00b      	beq.n	833f2 <memchr+0x52>
   833da:	4404      	add	r4, r0
   833dc:	1c43      	adds	r3, r0, #1
   833de:	e002      	b.n	833e6 <memchr+0x46>
   833e0:	7802      	ldrb	r2, [r0, #0]
   833e2:	42aa      	cmp	r2, r5
   833e4:	d005      	beq.n	833f2 <memchr+0x52>
   833e6:	429c      	cmp	r4, r3
   833e8:	4618      	mov	r0, r3
   833ea:	f103 0301 	add.w	r3, r3, #1
   833ee:	d1f7      	bne.n	833e0 <memchr+0x40>
   833f0:	2000      	movs	r0, #0
   833f2:	bc70      	pop	{r4, r5, r6}
   833f4:	4770      	bx	lr
   833f6:	0209      	lsls	r1, r1, #8
   833f8:	b289      	uxth	r1, r1
   833fa:	4329      	orrs	r1, r5
   833fc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83400:	6803      	ldr	r3, [r0, #0]
   83402:	4606      	mov	r6, r0
   83404:	404b      	eors	r3, r1
   83406:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8340a:	ea22 0303 	bic.w	r3, r2, r3
   8340e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83412:	f100 0004 	add.w	r0, r0, #4
   83416:	d103      	bne.n	83420 <memchr+0x80>
   83418:	3c04      	subs	r4, #4
   8341a:	2c03      	cmp	r4, #3
   8341c:	d8f0      	bhi.n	83400 <memchr+0x60>
   8341e:	e7d8      	b.n	833d2 <memchr+0x32>
   83420:	4630      	mov	r0, r6
   83422:	e7d7      	b.n	833d4 <memchr+0x34>
   83424:	4614      	mov	r4, r2
   83426:	e7d2      	b.n	833ce <memchr+0x2e>
   83428:	4620      	mov	r0, r4
   8342a:	e7e2      	b.n	833f2 <memchr+0x52>

0008342c <memmove>:
   8342c:	4288      	cmp	r0, r1
   8342e:	b5f0      	push	{r4, r5, r6, r7, lr}
   83430:	d90d      	bls.n	8344e <memmove+0x22>
   83432:	188b      	adds	r3, r1, r2
   83434:	4298      	cmp	r0, r3
   83436:	d20a      	bcs.n	8344e <memmove+0x22>
   83438:	1884      	adds	r4, r0, r2
   8343a:	2a00      	cmp	r2, #0
   8343c:	d051      	beq.n	834e2 <memmove+0xb6>
   8343e:	4622      	mov	r2, r4
   83440:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83444:	4299      	cmp	r1, r3
   83446:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8344a:	d1f9      	bne.n	83440 <memmove+0x14>
   8344c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8344e:	2a0f      	cmp	r2, #15
   83450:	d948      	bls.n	834e4 <memmove+0xb8>
   83452:	ea41 0300 	orr.w	r3, r1, r0
   83456:	079b      	lsls	r3, r3, #30
   83458:	d146      	bne.n	834e8 <memmove+0xbc>
   8345a:	4615      	mov	r5, r2
   8345c:	f100 0410 	add.w	r4, r0, #16
   83460:	f101 0310 	add.w	r3, r1, #16
   83464:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83468:	3d10      	subs	r5, #16
   8346a:	f844 6c10 	str.w	r6, [r4, #-16]
   8346e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83472:	2d0f      	cmp	r5, #15
   83474:	f844 6c0c 	str.w	r6, [r4, #-12]
   83478:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8347c:	f104 0410 	add.w	r4, r4, #16
   83480:	f844 6c18 	str.w	r6, [r4, #-24]
   83484:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83488:	f103 0310 	add.w	r3, r3, #16
   8348c:	f844 6c14 	str.w	r6, [r4, #-20]
   83490:	d8e8      	bhi.n	83464 <memmove+0x38>
   83492:	f1a2 0310 	sub.w	r3, r2, #16
   83496:	f023 030f 	bic.w	r3, r3, #15
   8349a:	f002 0e0f 	and.w	lr, r2, #15
   8349e:	3310      	adds	r3, #16
   834a0:	f1be 0f03 	cmp.w	lr, #3
   834a4:	4419      	add	r1, r3
   834a6:	4403      	add	r3, r0
   834a8:	d921      	bls.n	834ee <memmove+0xc2>
   834aa:	460e      	mov	r6, r1
   834ac:	4674      	mov	r4, lr
   834ae:	1f1d      	subs	r5, r3, #4
   834b0:	f856 7b04 	ldr.w	r7, [r6], #4
   834b4:	3c04      	subs	r4, #4
   834b6:	2c03      	cmp	r4, #3
   834b8:	f845 7f04 	str.w	r7, [r5, #4]!
   834bc:	d8f8      	bhi.n	834b0 <memmove+0x84>
   834be:	f1ae 0404 	sub.w	r4, lr, #4
   834c2:	f024 0403 	bic.w	r4, r4, #3
   834c6:	3404      	adds	r4, #4
   834c8:	4421      	add	r1, r4
   834ca:	4423      	add	r3, r4
   834cc:	f002 0203 	and.w	r2, r2, #3
   834d0:	b162      	cbz	r2, 834ec <memmove+0xc0>
   834d2:	3b01      	subs	r3, #1
   834d4:	440a      	add	r2, r1
   834d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   834da:	428a      	cmp	r2, r1
   834dc:	f803 4f01 	strb.w	r4, [r3, #1]!
   834e0:	d1f9      	bne.n	834d6 <memmove+0xaa>
   834e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   834e4:	4603      	mov	r3, r0
   834e6:	e7f3      	b.n	834d0 <memmove+0xa4>
   834e8:	4603      	mov	r3, r0
   834ea:	e7f2      	b.n	834d2 <memmove+0xa6>
   834ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   834ee:	4672      	mov	r2, lr
   834f0:	e7ee      	b.n	834d0 <memmove+0xa4>
   834f2:	bf00      	nop

000834f4 <__malloc_lock>:
   834f4:	4801      	ldr	r0, [pc, #4]	; (834fc <__malloc_lock+0x8>)
   834f6:	f7ff bc17 	b.w	82d28 <__retarget_lock_acquire_recursive>
   834fa:	bf00      	nop
   834fc:	20070d0c 	.word	0x20070d0c

00083500 <__malloc_unlock>:
   83500:	4801      	ldr	r0, [pc, #4]	; (83508 <__malloc_unlock+0x8>)
   83502:	f7ff bc13 	b.w	82d2c <__retarget_lock_release_recursive>
   83506:	bf00      	nop
   83508:	20070d0c 	.word	0x20070d0c

0008350c <_realloc_r>:
   8350c:	2900      	cmp	r1, #0
   8350e:	f000 8094 	beq.w	8363a <_realloc_r+0x12e>
   83512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83516:	460c      	mov	r4, r1
   83518:	4615      	mov	r5, r2
   8351a:	b083      	sub	sp, #12
   8351c:	4680      	mov	r8, r0
   8351e:	f105 060b 	add.w	r6, r5, #11
   83522:	f7ff ffe7 	bl	834f4 <__malloc_lock>
   83526:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8352a:	2e16      	cmp	r6, #22
   8352c:	f02e 0703 	bic.w	r7, lr, #3
   83530:	f1a4 0908 	sub.w	r9, r4, #8
   83534:	d83c      	bhi.n	835b0 <_realloc_r+0xa4>
   83536:	2210      	movs	r2, #16
   83538:	4616      	mov	r6, r2
   8353a:	42b5      	cmp	r5, r6
   8353c:	d83d      	bhi.n	835ba <_realloc_r+0xae>
   8353e:	4297      	cmp	r7, r2
   83540:	da43      	bge.n	835ca <_realloc_r+0xbe>
   83542:	4bc6      	ldr	r3, [pc, #792]	; (8385c <_realloc_r+0x350>)
   83544:	eb09 0007 	add.w	r0, r9, r7
   83548:	6899      	ldr	r1, [r3, #8]
   8354a:	4288      	cmp	r0, r1
   8354c:	f000 80c3 	beq.w	836d6 <_realloc_r+0x1ca>
   83550:	6843      	ldr	r3, [r0, #4]
   83552:	f023 0101 	bic.w	r1, r3, #1
   83556:	4401      	add	r1, r0
   83558:	6849      	ldr	r1, [r1, #4]
   8355a:	07c9      	lsls	r1, r1, #31
   8355c:	d54d      	bpl.n	835fa <_realloc_r+0xee>
   8355e:	f01e 0f01 	tst.w	lr, #1
   83562:	f000 809b 	beq.w	8369c <_realloc_r+0x190>
   83566:	4629      	mov	r1, r5
   83568:	4640      	mov	r0, r8
   8356a:	f7ff fc61 	bl	82e30 <_malloc_r>
   8356e:	4605      	mov	r5, r0
   83570:	2800      	cmp	r0, #0
   83572:	d03b      	beq.n	835ec <_realloc_r+0xe0>
   83574:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83578:	f1a0 0208 	sub.w	r2, r0, #8
   8357c:	f023 0301 	bic.w	r3, r3, #1
   83580:	444b      	add	r3, r9
   83582:	429a      	cmp	r2, r3
   83584:	f000 812b 	beq.w	837de <_realloc_r+0x2d2>
   83588:	1f3a      	subs	r2, r7, #4
   8358a:	2a24      	cmp	r2, #36	; 0x24
   8358c:	f200 8118 	bhi.w	837c0 <_realloc_r+0x2b4>
   83590:	2a13      	cmp	r2, #19
   83592:	f200 80eb 	bhi.w	8376c <_realloc_r+0x260>
   83596:	4603      	mov	r3, r0
   83598:	4622      	mov	r2, r4
   8359a:	6811      	ldr	r1, [r2, #0]
   8359c:	6019      	str	r1, [r3, #0]
   8359e:	6851      	ldr	r1, [r2, #4]
   835a0:	6059      	str	r1, [r3, #4]
   835a2:	6892      	ldr	r2, [r2, #8]
   835a4:	609a      	str	r2, [r3, #8]
   835a6:	4621      	mov	r1, r4
   835a8:	4640      	mov	r0, r8
   835aa:	f7ff f923 	bl	827f4 <_free_r>
   835ae:	e01d      	b.n	835ec <_realloc_r+0xe0>
   835b0:	f026 0607 	bic.w	r6, r6, #7
   835b4:	2e00      	cmp	r6, #0
   835b6:	4632      	mov	r2, r6
   835b8:	dabf      	bge.n	8353a <_realloc_r+0x2e>
   835ba:	2500      	movs	r5, #0
   835bc:	230c      	movs	r3, #12
   835be:	4628      	mov	r0, r5
   835c0:	f8c8 3000 	str.w	r3, [r8]
   835c4:	b003      	add	sp, #12
   835c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835ca:	4625      	mov	r5, r4
   835cc:	1bbb      	subs	r3, r7, r6
   835ce:	2b0f      	cmp	r3, #15
   835d0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   835d4:	d81d      	bhi.n	83612 <_realloc_r+0x106>
   835d6:	f002 0201 	and.w	r2, r2, #1
   835da:	433a      	orrs	r2, r7
   835dc:	eb09 0107 	add.w	r1, r9, r7
   835e0:	f8c9 2004 	str.w	r2, [r9, #4]
   835e4:	684b      	ldr	r3, [r1, #4]
   835e6:	f043 0301 	orr.w	r3, r3, #1
   835ea:	604b      	str	r3, [r1, #4]
   835ec:	4640      	mov	r0, r8
   835ee:	f7ff ff87 	bl	83500 <__malloc_unlock>
   835f2:	4628      	mov	r0, r5
   835f4:	b003      	add	sp, #12
   835f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   835fa:	f023 0303 	bic.w	r3, r3, #3
   835fe:	18f9      	adds	r1, r7, r3
   83600:	4291      	cmp	r1, r2
   83602:	db1d      	blt.n	83640 <_realloc_r+0x134>
   83604:	68c3      	ldr	r3, [r0, #12]
   83606:	6882      	ldr	r2, [r0, #8]
   83608:	4625      	mov	r5, r4
   8360a:	60d3      	str	r3, [r2, #12]
   8360c:	460f      	mov	r7, r1
   8360e:	609a      	str	r2, [r3, #8]
   83610:	e7dc      	b.n	835cc <_realloc_r+0xc0>
   83612:	f002 0201 	and.w	r2, r2, #1
   83616:	eb09 0106 	add.w	r1, r9, r6
   8361a:	f043 0301 	orr.w	r3, r3, #1
   8361e:	4332      	orrs	r2, r6
   83620:	f8c9 2004 	str.w	r2, [r9, #4]
   83624:	444f      	add	r7, r9
   83626:	604b      	str	r3, [r1, #4]
   83628:	687b      	ldr	r3, [r7, #4]
   8362a:	3108      	adds	r1, #8
   8362c:	f043 0301 	orr.w	r3, r3, #1
   83630:	607b      	str	r3, [r7, #4]
   83632:	4640      	mov	r0, r8
   83634:	f7ff f8de 	bl	827f4 <_free_r>
   83638:	e7d8      	b.n	835ec <_realloc_r+0xe0>
   8363a:	4611      	mov	r1, r2
   8363c:	f7ff bbf8 	b.w	82e30 <_malloc_r>
   83640:	f01e 0f01 	tst.w	lr, #1
   83644:	d18f      	bne.n	83566 <_realloc_r+0x5a>
   83646:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8364a:	eba9 0a01 	sub.w	sl, r9, r1
   8364e:	f8da 1004 	ldr.w	r1, [sl, #4]
   83652:	f021 0103 	bic.w	r1, r1, #3
   83656:	440b      	add	r3, r1
   83658:	443b      	add	r3, r7
   8365a:	4293      	cmp	r3, r2
   8365c:	db26      	blt.n	836ac <_realloc_r+0x1a0>
   8365e:	4655      	mov	r5, sl
   83660:	68c1      	ldr	r1, [r0, #12]
   83662:	6880      	ldr	r0, [r0, #8]
   83664:	1f3a      	subs	r2, r7, #4
   83666:	60c1      	str	r1, [r0, #12]
   83668:	6088      	str	r0, [r1, #8]
   8366a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8366e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83672:	2a24      	cmp	r2, #36	; 0x24
   83674:	60c1      	str	r1, [r0, #12]
   83676:	6088      	str	r0, [r1, #8]
   83678:	d826      	bhi.n	836c8 <_realloc_r+0x1bc>
   8367a:	2a13      	cmp	r2, #19
   8367c:	f240 8081 	bls.w	83782 <_realloc_r+0x276>
   83680:	6821      	ldr	r1, [r4, #0]
   83682:	2a1b      	cmp	r2, #27
   83684:	f8ca 1008 	str.w	r1, [sl, #8]
   83688:	6861      	ldr	r1, [r4, #4]
   8368a:	f8ca 100c 	str.w	r1, [sl, #12]
   8368e:	f200 80ad 	bhi.w	837ec <_realloc_r+0x2e0>
   83692:	f104 0008 	add.w	r0, r4, #8
   83696:	f10a 0210 	add.w	r2, sl, #16
   8369a:	e074      	b.n	83786 <_realloc_r+0x27a>
   8369c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   836a0:	eba9 0a03 	sub.w	sl, r9, r3
   836a4:	f8da 1004 	ldr.w	r1, [sl, #4]
   836a8:	f021 0103 	bic.w	r1, r1, #3
   836ac:	187b      	adds	r3, r7, r1
   836ae:	4293      	cmp	r3, r2
   836b0:	f6ff af59 	blt.w	83566 <_realloc_r+0x5a>
   836b4:	4655      	mov	r5, sl
   836b6:	f8da 100c 	ldr.w	r1, [sl, #12]
   836ba:	f855 0f08 	ldr.w	r0, [r5, #8]!
   836be:	1f3a      	subs	r2, r7, #4
   836c0:	2a24      	cmp	r2, #36	; 0x24
   836c2:	60c1      	str	r1, [r0, #12]
   836c4:	6088      	str	r0, [r1, #8]
   836c6:	d9d8      	bls.n	8367a <_realloc_r+0x16e>
   836c8:	4621      	mov	r1, r4
   836ca:	4628      	mov	r0, r5
   836cc:	461f      	mov	r7, r3
   836ce:	46d1      	mov	r9, sl
   836d0:	f7ff feac 	bl	8342c <memmove>
   836d4:	e77a      	b.n	835cc <_realloc_r+0xc0>
   836d6:	6841      	ldr	r1, [r0, #4]
   836d8:	f106 0010 	add.w	r0, r6, #16
   836dc:	f021 0b03 	bic.w	fp, r1, #3
   836e0:	44bb      	add	fp, r7
   836e2:	4583      	cmp	fp, r0
   836e4:	da58      	bge.n	83798 <_realloc_r+0x28c>
   836e6:	f01e 0f01 	tst.w	lr, #1
   836ea:	f47f af3c 	bne.w	83566 <_realloc_r+0x5a>
   836ee:	f854 1c08 	ldr.w	r1, [r4, #-8]
   836f2:	eba9 0a01 	sub.w	sl, r9, r1
   836f6:	f8da 1004 	ldr.w	r1, [sl, #4]
   836fa:	f021 0103 	bic.w	r1, r1, #3
   836fe:	448b      	add	fp, r1
   83700:	4558      	cmp	r0, fp
   83702:	dcd3      	bgt.n	836ac <_realloc_r+0x1a0>
   83704:	4655      	mov	r5, sl
   83706:	f8da 100c 	ldr.w	r1, [sl, #12]
   8370a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8370e:	1f3a      	subs	r2, r7, #4
   83710:	2a24      	cmp	r2, #36	; 0x24
   83712:	60c1      	str	r1, [r0, #12]
   83714:	6088      	str	r0, [r1, #8]
   83716:	f200 808d 	bhi.w	83834 <_realloc_r+0x328>
   8371a:	2a13      	cmp	r2, #19
   8371c:	f240 8087 	bls.w	8382e <_realloc_r+0x322>
   83720:	6821      	ldr	r1, [r4, #0]
   83722:	2a1b      	cmp	r2, #27
   83724:	f8ca 1008 	str.w	r1, [sl, #8]
   83728:	6861      	ldr	r1, [r4, #4]
   8372a:	f8ca 100c 	str.w	r1, [sl, #12]
   8372e:	f200 8088 	bhi.w	83842 <_realloc_r+0x336>
   83732:	f104 0108 	add.w	r1, r4, #8
   83736:	f10a 0210 	add.w	r2, sl, #16
   8373a:	6808      	ldr	r0, [r1, #0]
   8373c:	6010      	str	r0, [r2, #0]
   8373e:	6848      	ldr	r0, [r1, #4]
   83740:	6050      	str	r0, [r2, #4]
   83742:	6889      	ldr	r1, [r1, #8]
   83744:	6091      	str	r1, [r2, #8]
   83746:	ebab 0206 	sub.w	r2, fp, r6
   8374a:	eb0a 0106 	add.w	r1, sl, r6
   8374e:	f042 0201 	orr.w	r2, r2, #1
   83752:	6099      	str	r1, [r3, #8]
   83754:	604a      	str	r2, [r1, #4]
   83756:	f8da 3004 	ldr.w	r3, [sl, #4]
   8375a:	4640      	mov	r0, r8
   8375c:	f003 0301 	and.w	r3, r3, #1
   83760:	431e      	orrs	r6, r3
   83762:	f8ca 6004 	str.w	r6, [sl, #4]
   83766:	f7ff fecb 	bl	83500 <__malloc_unlock>
   8376a:	e742      	b.n	835f2 <_realloc_r+0xe6>
   8376c:	6823      	ldr	r3, [r4, #0]
   8376e:	2a1b      	cmp	r2, #27
   83770:	6003      	str	r3, [r0, #0]
   83772:	6863      	ldr	r3, [r4, #4]
   83774:	6043      	str	r3, [r0, #4]
   83776:	d827      	bhi.n	837c8 <_realloc_r+0x2bc>
   83778:	f100 0308 	add.w	r3, r0, #8
   8377c:	f104 0208 	add.w	r2, r4, #8
   83780:	e70b      	b.n	8359a <_realloc_r+0x8e>
   83782:	4620      	mov	r0, r4
   83784:	462a      	mov	r2, r5
   83786:	6801      	ldr	r1, [r0, #0]
   83788:	461f      	mov	r7, r3
   8378a:	6011      	str	r1, [r2, #0]
   8378c:	6841      	ldr	r1, [r0, #4]
   8378e:	46d1      	mov	r9, sl
   83790:	6051      	str	r1, [r2, #4]
   83792:	6883      	ldr	r3, [r0, #8]
   83794:	6093      	str	r3, [r2, #8]
   83796:	e719      	b.n	835cc <_realloc_r+0xc0>
   83798:	ebab 0b06 	sub.w	fp, fp, r6
   8379c:	eb09 0106 	add.w	r1, r9, r6
   837a0:	f04b 0201 	orr.w	r2, fp, #1
   837a4:	6099      	str	r1, [r3, #8]
   837a6:	604a      	str	r2, [r1, #4]
   837a8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   837ac:	4640      	mov	r0, r8
   837ae:	f003 0301 	and.w	r3, r3, #1
   837b2:	431e      	orrs	r6, r3
   837b4:	f844 6c04 	str.w	r6, [r4, #-4]
   837b8:	f7ff fea2 	bl	83500 <__malloc_unlock>
   837bc:	4625      	mov	r5, r4
   837be:	e718      	b.n	835f2 <_realloc_r+0xe6>
   837c0:	4621      	mov	r1, r4
   837c2:	f7ff fe33 	bl	8342c <memmove>
   837c6:	e6ee      	b.n	835a6 <_realloc_r+0x9a>
   837c8:	68a3      	ldr	r3, [r4, #8]
   837ca:	2a24      	cmp	r2, #36	; 0x24
   837cc:	6083      	str	r3, [r0, #8]
   837ce:	68e3      	ldr	r3, [r4, #12]
   837d0:	60c3      	str	r3, [r0, #12]
   837d2:	d018      	beq.n	83806 <_realloc_r+0x2fa>
   837d4:	f100 0310 	add.w	r3, r0, #16
   837d8:	f104 0210 	add.w	r2, r4, #16
   837dc:	e6dd      	b.n	8359a <_realloc_r+0x8e>
   837de:	f850 3c04 	ldr.w	r3, [r0, #-4]
   837e2:	4625      	mov	r5, r4
   837e4:	f023 0303 	bic.w	r3, r3, #3
   837e8:	441f      	add	r7, r3
   837ea:	e6ef      	b.n	835cc <_realloc_r+0xc0>
   837ec:	68a1      	ldr	r1, [r4, #8]
   837ee:	2a24      	cmp	r2, #36	; 0x24
   837f0:	f8ca 1010 	str.w	r1, [sl, #16]
   837f4:	68e1      	ldr	r1, [r4, #12]
   837f6:	f8ca 1014 	str.w	r1, [sl, #20]
   837fa:	d00d      	beq.n	83818 <_realloc_r+0x30c>
   837fc:	f104 0010 	add.w	r0, r4, #16
   83800:	f10a 0218 	add.w	r2, sl, #24
   83804:	e7bf      	b.n	83786 <_realloc_r+0x27a>
   83806:	6922      	ldr	r2, [r4, #16]
   83808:	f100 0318 	add.w	r3, r0, #24
   8380c:	6102      	str	r2, [r0, #16]
   8380e:	6961      	ldr	r1, [r4, #20]
   83810:	f104 0218 	add.w	r2, r4, #24
   83814:	6141      	str	r1, [r0, #20]
   83816:	e6c0      	b.n	8359a <_realloc_r+0x8e>
   83818:	6922      	ldr	r2, [r4, #16]
   8381a:	f104 0018 	add.w	r0, r4, #24
   8381e:	f8ca 2018 	str.w	r2, [sl, #24]
   83822:	6961      	ldr	r1, [r4, #20]
   83824:	f10a 0220 	add.w	r2, sl, #32
   83828:	f8ca 101c 	str.w	r1, [sl, #28]
   8382c:	e7ab      	b.n	83786 <_realloc_r+0x27a>
   8382e:	4621      	mov	r1, r4
   83830:	462a      	mov	r2, r5
   83832:	e782      	b.n	8373a <_realloc_r+0x22e>
   83834:	4621      	mov	r1, r4
   83836:	4628      	mov	r0, r5
   83838:	9301      	str	r3, [sp, #4]
   8383a:	f7ff fdf7 	bl	8342c <memmove>
   8383e:	9b01      	ldr	r3, [sp, #4]
   83840:	e781      	b.n	83746 <_realloc_r+0x23a>
   83842:	68a1      	ldr	r1, [r4, #8]
   83844:	2a24      	cmp	r2, #36	; 0x24
   83846:	f8ca 1010 	str.w	r1, [sl, #16]
   8384a:	68e1      	ldr	r1, [r4, #12]
   8384c:	f8ca 1014 	str.w	r1, [sl, #20]
   83850:	d006      	beq.n	83860 <_realloc_r+0x354>
   83852:	f104 0110 	add.w	r1, r4, #16
   83856:	f10a 0218 	add.w	r2, sl, #24
   8385a:	e76e      	b.n	8373a <_realloc_r+0x22e>
   8385c:	200706e8 	.word	0x200706e8
   83860:	6922      	ldr	r2, [r4, #16]
   83862:	f104 0118 	add.w	r1, r4, #24
   83866:	f8ca 2018 	str.w	r2, [sl, #24]
   8386a:	6960      	ldr	r0, [r4, #20]
   8386c:	f10a 0220 	add.w	r2, sl, #32
   83870:	f8ca 001c 	str.w	r0, [sl, #28]
   83874:	e761      	b.n	8373a <_realloc_r+0x22e>
   83876:	bf00      	nop

00083878 <_sbrk_r>:
   83878:	b538      	push	{r3, r4, r5, lr}
   8387a:	2300      	movs	r3, #0
   8387c:	4c06      	ldr	r4, [pc, #24]	; (83898 <_sbrk_r+0x20>)
   8387e:	4605      	mov	r5, r0
   83880:	4608      	mov	r0, r1
   83882:	6023      	str	r3, [r4, #0]
   83884:	f7fd fbe4 	bl	81050 <_sbrk>
   83888:	1c43      	adds	r3, r0, #1
   8388a:	d000      	beq.n	8388e <_sbrk_r+0x16>
   8388c:	bd38      	pop	{r3, r4, r5, pc}
   8388e:	6823      	ldr	r3, [r4, #0]
   83890:	2b00      	cmp	r3, #0
   83892:	d0fb      	beq.n	8388c <_sbrk_r+0x14>
   83894:	602b      	str	r3, [r5, #0]
   83896:	bd38      	pop	{r3, r4, r5, pc}
   83898:	20070d20 	.word	0x20070d20

0008389c <__sread>:
   8389c:	b510      	push	{r4, lr}
   8389e:	460c      	mov	r4, r1
   838a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   838a4:	f000 f9f4 	bl	83c90 <_read_r>
   838a8:	2800      	cmp	r0, #0
   838aa:	db03      	blt.n	838b4 <__sread+0x18>
   838ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
   838ae:	4403      	add	r3, r0
   838b0:	6523      	str	r3, [r4, #80]	; 0x50
   838b2:	bd10      	pop	{r4, pc}
   838b4:	89a3      	ldrh	r3, [r4, #12]
   838b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   838ba:	81a3      	strh	r3, [r4, #12]
   838bc:	bd10      	pop	{r4, pc}
   838be:	bf00      	nop

000838c0 <__swrite>:
   838c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   838c4:	460c      	mov	r4, r1
   838c6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   838ca:	461f      	mov	r7, r3
   838cc:	05cb      	lsls	r3, r1, #23
   838ce:	4616      	mov	r6, r2
   838d0:	4605      	mov	r5, r0
   838d2:	d507      	bpl.n	838e4 <__swrite+0x24>
   838d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   838d8:	2302      	movs	r3, #2
   838da:	2200      	movs	r2, #0
   838dc:	f000 f9c2 	bl	83c64 <_lseek_r>
   838e0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   838e4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   838e8:	81a1      	strh	r1, [r4, #12]
   838ea:	463b      	mov	r3, r7
   838ec:	4632      	mov	r2, r6
   838ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   838f2:	4628      	mov	r0, r5
   838f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   838f8:	f000 b8a2 	b.w	83a40 <_write_r>

000838fc <__sseek>:
   838fc:	b510      	push	{r4, lr}
   838fe:	460c      	mov	r4, r1
   83900:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83904:	f000 f9ae 	bl	83c64 <_lseek_r>
   83908:	89a3      	ldrh	r3, [r4, #12]
   8390a:	1c42      	adds	r2, r0, #1
   8390c:	bf0e      	itee	eq
   8390e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83916:	6520      	strne	r0, [r4, #80]	; 0x50
   83918:	81a3      	strh	r3, [r4, #12]
   8391a:	bd10      	pop	{r4, pc}

0008391c <__sclose>:
   8391c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83920:	f000 b906 	b.w	83b30 <_close_r>

00083924 <__swbuf_r>:
   83924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83926:	460d      	mov	r5, r1
   83928:	4614      	mov	r4, r2
   8392a:	4606      	mov	r6, r0
   8392c:	b110      	cbz	r0, 83934 <__swbuf_r+0x10>
   8392e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83930:	2b00      	cmp	r3, #0
   83932:	d04b      	beq.n	839cc <__swbuf_r+0xa8>
   83934:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83938:	69a3      	ldr	r3, [r4, #24]
   8393a:	b291      	uxth	r1, r2
   8393c:	0708      	lsls	r0, r1, #28
   8393e:	60a3      	str	r3, [r4, #8]
   83940:	d539      	bpl.n	839b6 <__swbuf_r+0x92>
   83942:	6923      	ldr	r3, [r4, #16]
   83944:	2b00      	cmp	r3, #0
   83946:	d036      	beq.n	839b6 <__swbuf_r+0x92>
   83948:	b2ed      	uxtb	r5, r5
   8394a:	0489      	lsls	r1, r1, #18
   8394c:	462f      	mov	r7, r5
   8394e:	d515      	bpl.n	8397c <__swbuf_r+0x58>
   83950:	6822      	ldr	r2, [r4, #0]
   83952:	6961      	ldr	r1, [r4, #20]
   83954:	1ad3      	subs	r3, r2, r3
   83956:	428b      	cmp	r3, r1
   83958:	da1c      	bge.n	83994 <__swbuf_r+0x70>
   8395a:	3301      	adds	r3, #1
   8395c:	68a1      	ldr	r1, [r4, #8]
   8395e:	1c50      	adds	r0, r2, #1
   83960:	3901      	subs	r1, #1
   83962:	60a1      	str	r1, [r4, #8]
   83964:	6020      	str	r0, [r4, #0]
   83966:	7015      	strb	r5, [r2, #0]
   83968:	6962      	ldr	r2, [r4, #20]
   8396a:	429a      	cmp	r2, r3
   8396c:	d01a      	beq.n	839a4 <__swbuf_r+0x80>
   8396e:	89a3      	ldrh	r3, [r4, #12]
   83970:	07db      	lsls	r3, r3, #31
   83972:	d501      	bpl.n	83978 <__swbuf_r+0x54>
   83974:	2d0a      	cmp	r5, #10
   83976:	d015      	beq.n	839a4 <__swbuf_r+0x80>
   83978:	4638      	mov	r0, r7
   8397a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8397c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8397e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83982:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83986:	81a2      	strh	r2, [r4, #12]
   83988:	6822      	ldr	r2, [r4, #0]
   8398a:	6661      	str	r1, [r4, #100]	; 0x64
   8398c:	6961      	ldr	r1, [r4, #20]
   8398e:	1ad3      	subs	r3, r2, r3
   83990:	428b      	cmp	r3, r1
   83992:	dbe2      	blt.n	8395a <__swbuf_r+0x36>
   83994:	4621      	mov	r1, r4
   83996:	4630      	mov	r0, r6
   83998:	f7fe fdae 	bl	824f8 <_fflush_r>
   8399c:	b940      	cbnz	r0, 839b0 <__swbuf_r+0x8c>
   8399e:	2301      	movs	r3, #1
   839a0:	6822      	ldr	r2, [r4, #0]
   839a2:	e7db      	b.n	8395c <__swbuf_r+0x38>
   839a4:	4621      	mov	r1, r4
   839a6:	4630      	mov	r0, r6
   839a8:	f7fe fda6 	bl	824f8 <_fflush_r>
   839ac:	2800      	cmp	r0, #0
   839ae:	d0e3      	beq.n	83978 <__swbuf_r+0x54>
   839b0:	f04f 37ff 	mov.w	r7, #4294967295
   839b4:	e7e0      	b.n	83978 <__swbuf_r+0x54>
   839b6:	4621      	mov	r1, r4
   839b8:	4630      	mov	r0, r6
   839ba:	f7fe fc8d 	bl	822d8 <__swsetup_r>
   839be:	2800      	cmp	r0, #0
   839c0:	d1f6      	bne.n	839b0 <__swbuf_r+0x8c>
   839c2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   839c6:	6923      	ldr	r3, [r4, #16]
   839c8:	b291      	uxth	r1, r2
   839ca:	e7bd      	b.n	83948 <__swbuf_r+0x24>
   839cc:	f7fe fdec 	bl	825a8 <__sinit>
   839d0:	e7b0      	b.n	83934 <__swbuf_r+0x10>
   839d2:	bf00      	nop

000839d4 <_wcrtomb_r>:
   839d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   839d6:	4606      	mov	r6, r0
   839d8:	b085      	sub	sp, #20
   839da:	461f      	mov	r7, r3
   839dc:	b189      	cbz	r1, 83a02 <_wcrtomb_r+0x2e>
   839de:	4c10      	ldr	r4, [pc, #64]	; (83a20 <_wcrtomb_r+0x4c>)
   839e0:	4d10      	ldr	r5, [pc, #64]	; (83a24 <_wcrtomb_r+0x50>)
   839e2:	6824      	ldr	r4, [r4, #0]
   839e4:	6b64      	ldr	r4, [r4, #52]	; 0x34
   839e6:	2c00      	cmp	r4, #0
   839e8:	bf08      	it	eq
   839ea:	462c      	moveq	r4, r5
   839ec:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   839f0:	47a0      	blx	r4
   839f2:	1c43      	adds	r3, r0, #1
   839f4:	d103      	bne.n	839fe <_wcrtomb_r+0x2a>
   839f6:	2200      	movs	r2, #0
   839f8:	238a      	movs	r3, #138	; 0x8a
   839fa:	603a      	str	r2, [r7, #0]
   839fc:	6033      	str	r3, [r6, #0]
   839fe:	b005      	add	sp, #20
   83a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83a02:	460c      	mov	r4, r1
   83a04:	4a06      	ldr	r2, [pc, #24]	; (83a20 <_wcrtomb_r+0x4c>)
   83a06:	4d07      	ldr	r5, [pc, #28]	; (83a24 <_wcrtomb_r+0x50>)
   83a08:	6811      	ldr	r1, [r2, #0]
   83a0a:	4622      	mov	r2, r4
   83a0c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83a0e:	a901      	add	r1, sp, #4
   83a10:	2c00      	cmp	r4, #0
   83a12:	bf08      	it	eq
   83a14:	462c      	moveq	r4, r5
   83a16:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83a1a:	47a0      	blx	r4
   83a1c:	e7e9      	b.n	839f2 <_wcrtomb_r+0x1e>
   83a1e:	bf00      	nop
   83a20:	2007014c 	.word	0x2007014c
   83a24:	2007057c 	.word	0x2007057c

00083a28 <__ascii_wctomb>:
   83a28:	b119      	cbz	r1, 83a32 <__ascii_wctomb+0xa>
   83a2a:	2aff      	cmp	r2, #255	; 0xff
   83a2c:	d803      	bhi.n	83a36 <__ascii_wctomb+0xe>
   83a2e:	700a      	strb	r2, [r1, #0]
   83a30:	2101      	movs	r1, #1
   83a32:	4608      	mov	r0, r1
   83a34:	4770      	bx	lr
   83a36:	238a      	movs	r3, #138	; 0x8a
   83a38:	f04f 31ff 	mov.w	r1, #4294967295
   83a3c:	6003      	str	r3, [r0, #0]
   83a3e:	e7f8      	b.n	83a32 <__ascii_wctomb+0xa>

00083a40 <_write_r>:
   83a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a42:	460e      	mov	r6, r1
   83a44:	2500      	movs	r5, #0
   83a46:	4c08      	ldr	r4, [pc, #32]	; (83a68 <_write_r+0x28>)
   83a48:	4611      	mov	r1, r2
   83a4a:	4607      	mov	r7, r0
   83a4c:	461a      	mov	r2, r3
   83a4e:	4630      	mov	r0, r6
   83a50:	6025      	str	r5, [r4, #0]
   83a52:	f7fc fef5 	bl	80840 <_write>
   83a56:	1c43      	adds	r3, r0, #1
   83a58:	d000      	beq.n	83a5c <_write_r+0x1c>
   83a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a5c:	6823      	ldr	r3, [r4, #0]
   83a5e:	2b00      	cmp	r3, #0
   83a60:	d0fb      	beq.n	83a5a <_write_r+0x1a>
   83a62:	603b      	str	r3, [r7, #0]
   83a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a66:	bf00      	nop
   83a68:	20070d20 	.word	0x20070d20

00083a6c <__register_exitproc>:
   83a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83a70:	4d2c      	ldr	r5, [pc, #176]	; (83b24 <__register_exitproc+0xb8>)
   83a72:	4606      	mov	r6, r0
   83a74:	6828      	ldr	r0, [r5, #0]
   83a76:	4698      	mov	r8, r3
   83a78:	460f      	mov	r7, r1
   83a7a:	4691      	mov	r9, r2
   83a7c:	f7ff f954 	bl	82d28 <__retarget_lock_acquire_recursive>
   83a80:	4b29      	ldr	r3, [pc, #164]	; (83b28 <__register_exitproc+0xbc>)
   83a82:	681c      	ldr	r4, [r3, #0]
   83a84:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83a88:	2b00      	cmp	r3, #0
   83a8a:	d03e      	beq.n	83b0a <__register_exitproc+0x9e>
   83a8c:	685a      	ldr	r2, [r3, #4]
   83a8e:	2a1f      	cmp	r2, #31
   83a90:	dc1c      	bgt.n	83acc <__register_exitproc+0x60>
   83a92:	f102 0e01 	add.w	lr, r2, #1
   83a96:	b176      	cbz	r6, 83ab6 <__register_exitproc+0x4a>
   83a98:	2101      	movs	r1, #1
   83a9a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83a9e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83aa2:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83aa6:	4091      	lsls	r1, r2
   83aa8:	4308      	orrs	r0, r1
   83aaa:	2e02      	cmp	r6, #2
   83aac:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83ab0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83ab4:	d023      	beq.n	83afe <__register_exitproc+0x92>
   83ab6:	3202      	adds	r2, #2
   83ab8:	f8c3 e004 	str.w	lr, [r3, #4]
   83abc:	6828      	ldr	r0, [r5, #0]
   83abe:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83ac2:	f7ff f933 	bl	82d2c <__retarget_lock_release_recursive>
   83ac6:	2000      	movs	r0, #0
   83ac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83acc:	4b17      	ldr	r3, [pc, #92]	; (83b2c <__register_exitproc+0xc0>)
   83ace:	b30b      	cbz	r3, 83b14 <__register_exitproc+0xa8>
   83ad0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83ad4:	f7ff f9a4 	bl	82e20 <malloc>
   83ad8:	4603      	mov	r3, r0
   83ada:	b1d8      	cbz	r0, 83b14 <__register_exitproc+0xa8>
   83adc:	2000      	movs	r0, #0
   83ade:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83ae2:	f04f 0e01 	mov.w	lr, #1
   83ae6:	6058      	str	r0, [r3, #4]
   83ae8:	6019      	str	r1, [r3, #0]
   83aea:	4602      	mov	r2, r0
   83aec:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83af0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83af4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83af8:	2e00      	cmp	r6, #0
   83afa:	d0dc      	beq.n	83ab6 <__register_exitproc+0x4a>
   83afc:	e7cc      	b.n	83a98 <__register_exitproc+0x2c>
   83afe:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83b02:	4301      	orrs	r1, r0
   83b04:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83b08:	e7d5      	b.n	83ab6 <__register_exitproc+0x4a>
   83b0a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83b0e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83b12:	e7bb      	b.n	83a8c <__register_exitproc+0x20>
   83b14:	6828      	ldr	r0, [r5, #0]
   83b16:	f7ff f909 	bl	82d2c <__retarget_lock_release_recursive>
   83b1a:	f04f 30ff 	mov.w	r0, #4294967295
   83b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83b22:	bf00      	nop
   83b24:	20070578 	.word	0x20070578
   83b28:	00084028 	.word	0x00084028
   83b2c:	00082e21 	.word	0x00082e21

00083b30 <_close_r>:
   83b30:	b538      	push	{r3, r4, r5, lr}
   83b32:	2300      	movs	r3, #0
   83b34:	4c06      	ldr	r4, [pc, #24]	; (83b50 <_close_r+0x20>)
   83b36:	4605      	mov	r5, r0
   83b38:	4608      	mov	r0, r1
   83b3a:	6023      	str	r3, [r4, #0]
   83b3c:	f7fd faa4 	bl	81088 <_close>
   83b40:	1c43      	adds	r3, r0, #1
   83b42:	d000      	beq.n	83b46 <_close_r+0x16>
   83b44:	bd38      	pop	{r3, r4, r5, pc}
   83b46:	6823      	ldr	r3, [r4, #0]
   83b48:	2b00      	cmp	r3, #0
   83b4a:	d0fb      	beq.n	83b44 <_close_r+0x14>
   83b4c:	602b      	str	r3, [r5, #0]
   83b4e:	bd38      	pop	{r3, r4, r5, pc}
   83b50:	20070d20 	.word	0x20070d20

00083b54 <_fclose_r>:
   83b54:	b570      	push	{r4, r5, r6, lr}
   83b56:	b159      	cbz	r1, 83b70 <_fclose_r+0x1c>
   83b58:	4605      	mov	r5, r0
   83b5a:	460c      	mov	r4, r1
   83b5c:	b110      	cbz	r0, 83b64 <_fclose_r+0x10>
   83b5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b60:	2b00      	cmp	r3, #0
   83b62:	d03c      	beq.n	83bde <_fclose_r+0x8a>
   83b64:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83b66:	07d8      	lsls	r0, r3, #31
   83b68:	d505      	bpl.n	83b76 <_fclose_r+0x22>
   83b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b6e:	b92b      	cbnz	r3, 83b7c <_fclose_r+0x28>
   83b70:	2600      	movs	r6, #0
   83b72:	4630      	mov	r0, r6
   83b74:	bd70      	pop	{r4, r5, r6, pc}
   83b76:	89a3      	ldrh	r3, [r4, #12]
   83b78:	0599      	lsls	r1, r3, #22
   83b7a:	d53c      	bpl.n	83bf6 <_fclose_r+0xa2>
   83b7c:	4621      	mov	r1, r4
   83b7e:	4628      	mov	r0, r5
   83b80:	f7fe fc1e 	bl	823c0 <__sflush_r>
   83b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83b86:	4606      	mov	r6, r0
   83b88:	b133      	cbz	r3, 83b98 <_fclose_r+0x44>
   83b8a:	69e1      	ldr	r1, [r4, #28]
   83b8c:	4628      	mov	r0, r5
   83b8e:	4798      	blx	r3
   83b90:	2800      	cmp	r0, #0
   83b92:	bfb8      	it	lt
   83b94:	f04f 36ff 	movlt.w	r6, #4294967295
   83b98:	89a3      	ldrh	r3, [r4, #12]
   83b9a:	061a      	lsls	r2, r3, #24
   83b9c:	d422      	bmi.n	83be4 <_fclose_r+0x90>
   83b9e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83ba0:	b141      	cbz	r1, 83bb4 <_fclose_r+0x60>
   83ba2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83ba6:	4299      	cmp	r1, r3
   83ba8:	d002      	beq.n	83bb0 <_fclose_r+0x5c>
   83baa:	4628      	mov	r0, r5
   83bac:	f7fe fe22 	bl	827f4 <_free_r>
   83bb0:	2300      	movs	r3, #0
   83bb2:	6323      	str	r3, [r4, #48]	; 0x30
   83bb4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83bb6:	b121      	cbz	r1, 83bc2 <_fclose_r+0x6e>
   83bb8:	4628      	mov	r0, r5
   83bba:	f7fe fe1b 	bl	827f4 <_free_r>
   83bbe:	2300      	movs	r3, #0
   83bc0:	6463      	str	r3, [r4, #68]	; 0x44
   83bc2:	f7fe fd21 	bl	82608 <__sfp_lock_acquire>
   83bc6:	2200      	movs	r2, #0
   83bc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83bca:	81a2      	strh	r2, [r4, #12]
   83bcc:	07db      	lsls	r3, r3, #31
   83bce:	d50e      	bpl.n	83bee <_fclose_r+0x9a>
   83bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83bd2:	f7ff f8a7 	bl	82d24 <__retarget_lock_close_recursive>
   83bd6:	f7fe fd1d 	bl	82614 <__sfp_lock_release>
   83bda:	4630      	mov	r0, r6
   83bdc:	bd70      	pop	{r4, r5, r6, pc}
   83bde:	f7fe fce3 	bl	825a8 <__sinit>
   83be2:	e7bf      	b.n	83b64 <_fclose_r+0x10>
   83be4:	6921      	ldr	r1, [r4, #16]
   83be6:	4628      	mov	r0, r5
   83be8:	f7fe fe04 	bl	827f4 <_free_r>
   83bec:	e7d7      	b.n	83b9e <_fclose_r+0x4a>
   83bee:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83bf0:	f7ff f89c 	bl	82d2c <__retarget_lock_release_recursive>
   83bf4:	e7ec      	b.n	83bd0 <_fclose_r+0x7c>
   83bf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83bf8:	f7ff f896 	bl	82d28 <__retarget_lock_acquire_recursive>
   83bfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c00:	2b00      	cmp	r3, #0
   83c02:	d1bb      	bne.n	83b7c <_fclose_r+0x28>
   83c04:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83c06:	f016 0601 	ands.w	r6, r6, #1
   83c0a:	d1b1      	bne.n	83b70 <_fclose_r+0x1c>
   83c0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c0e:	f7ff f88d 	bl	82d2c <__retarget_lock_release_recursive>
   83c12:	4630      	mov	r0, r6
   83c14:	bd70      	pop	{r4, r5, r6, pc}
   83c16:	bf00      	nop

00083c18 <_fstat_r>:
   83c18:	b570      	push	{r4, r5, r6, lr}
   83c1a:	460d      	mov	r5, r1
   83c1c:	2300      	movs	r3, #0
   83c1e:	4c07      	ldr	r4, [pc, #28]	; (83c3c <_fstat_r+0x24>)
   83c20:	4606      	mov	r6, r0
   83c22:	4611      	mov	r1, r2
   83c24:	4628      	mov	r0, r5
   83c26:	6023      	str	r3, [r4, #0]
   83c28:	f7fd fa31 	bl	8108e <_fstat>
   83c2c:	1c43      	adds	r3, r0, #1
   83c2e:	d000      	beq.n	83c32 <_fstat_r+0x1a>
   83c30:	bd70      	pop	{r4, r5, r6, pc}
   83c32:	6823      	ldr	r3, [r4, #0]
   83c34:	2b00      	cmp	r3, #0
   83c36:	d0fb      	beq.n	83c30 <_fstat_r+0x18>
   83c38:	6033      	str	r3, [r6, #0]
   83c3a:	bd70      	pop	{r4, r5, r6, pc}
   83c3c:	20070d20 	.word	0x20070d20

00083c40 <_isatty_r>:
   83c40:	b538      	push	{r3, r4, r5, lr}
   83c42:	2300      	movs	r3, #0
   83c44:	4c06      	ldr	r4, [pc, #24]	; (83c60 <_isatty_r+0x20>)
   83c46:	4605      	mov	r5, r0
   83c48:	4608      	mov	r0, r1
   83c4a:	6023      	str	r3, [r4, #0]
   83c4c:	f7fd fa24 	bl	81098 <_isatty>
   83c50:	1c43      	adds	r3, r0, #1
   83c52:	d000      	beq.n	83c56 <_isatty_r+0x16>
   83c54:	bd38      	pop	{r3, r4, r5, pc}
   83c56:	6823      	ldr	r3, [r4, #0]
   83c58:	2b00      	cmp	r3, #0
   83c5a:	d0fb      	beq.n	83c54 <_isatty_r+0x14>
   83c5c:	602b      	str	r3, [r5, #0]
   83c5e:	bd38      	pop	{r3, r4, r5, pc}
   83c60:	20070d20 	.word	0x20070d20

00083c64 <_lseek_r>:
   83c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c66:	460e      	mov	r6, r1
   83c68:	2500      	movs	r5, #0
   83c6a:	4c08      	ldr	r4, [pc, #32]	; (83c8c <_lseek_r+0x28>)
   83c6c:	4611      	mov	r1, r2
   83c6e:	4607      	mov	r7, r0
   83c70:	461a      	mov	r2, r3
   83c72:	4630      	mov	r0, r6
   83c74:	6025      	str	r5, [r4, #0]
   83c76:	f7fd fa11 	bl	8109c <_lseek>
   83c7a:	1c43      	adds	r3, r0, #1
   83c7c:	d000      	beq.n	83c80 <_lseek_r+0x1c>
   83c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c80:	6823      	ldr	r3, [r4, #0]
   83c82:	2b00      	cmp	r3, #0
   83c84:	d0fb      	beq.n	83c7e <_lseek_r+0x1a>
   83c86:	603b      	str	r3, [r7, #0]
   83c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c8a:	bf00      	nop
   83c8c:	20070d20 	.word	0x20070d20

00083c90 <_read_r>:
   83c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c92:	460e      	mov	r6, r1
   83c94:	2500      	movs	r5, #0
   83c96:	4c08      	ldr	r4, [pc, #32]	; (83cb8 <_read_r+0x28>)
   83c98:	4611      	mov	r1, r2
   83c9a:	4607      	mov	r7, r0
   83c9c:	461a      	mov	r2, r3
   83c9e:	4630      	mov	r0, r6
   83ca0:	6025      	str	r5, [r4, #0]
   83ca2:	f7fc fa5d 	bl	80160 <_read>
   83ca6:	1c43      	adds	r3, r0, #1
   83ca8:	d000      	beq.n	83cac <_read_r+0x1c>
   83caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cac:	6823      	ldr	r3, [r4, #0]
   83cae:	2b00      	cmp	r3, #0
   83cb0:	d0fb      	beq.n	83caa <_read_r+0x1a>
   83cb2:	603b      	str	r3, [r7, #0]
   83cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cb6:	bf00      	nop
   83cb8:	20070d20 	.word	0x20070d20

00083cbc <__aeabi_uldivmod>:
   83cbc:	b953      	cbnz	r3, 83cd4 <__aeabi_uldivmod+0x18>
   83cbe:	b94a      	cbnz	r2, 83cd4 <__aeabi_uldivmod+0x18>
   83cc0:	2900      	cmp	r1, #0
   83cc2:	bf08      	it	eq
   83cc4:	2800      	cmpeq	r0, #0
   83cc6:	bf1c      	itt	ne
   83cc8:	f04f 31ff 	movne.w	r1, #4294967295
   83ccc:	f04f 30ff 	movne.w	r0, #4294967295
   83cd0:	f000 b97a 	b.w	83fc8 <__aeabi_idiv0>
   83cd4:	f1ad 0c08 	sub.w	ip, sp, #8
   83cd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83cdc:	f000 f806 	bl	83cec <__udivmoddi4>
   83ce0:	f8dd e004 	ldr.w	lr, [sp, #4]
   83ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83ce8:	b004      	add	sp, #16
   83cea:	4770      	bx	lr

00083cec <__udivmoddi4>:
   83cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83cf0:	468c      	mov	ip, r1
   83cf2:	460e      	mov	r6, r1
   83cf4:	4604      	mov	r4, r0
   83cf6:	9d08      	ldr	r5, [sp, #32]
   83cf8:	2b00      	cmp	r3, #0
   83cfa:	d150      	bne.n	83d9e <__udivmoddi4+0xb2>
   83cfc:	428a      	cmp	r2, r1
   83cfe:	4617      	mov	r7, r2
   83d00:	d96c      	bls.n	83ddc <__udivmoddi4+0xf0>
   83d02:	fab2 fe82 	clz	lr, r2
   83d06:	f1be 0f00 	cmp.w	lr, #0
   83d0a:	d00b      	beq.n	83d24 <__udivmoddi4+0x38>
   83d0c:	f1ce 0c20 	rsb	ip, lr, #32
   83d10:	fa01 f60e 	lsl.w	r6, r1, lr
   83d14:	fa20 fc0c 	lsr.w	ip, r0, ip
   83d18:	fa02 f70e 	lsl.w	r7, r2, lr
   83d1c:	ea4c 0c06 	orr.w	ip, ip, r6
   83d20:	fa00 f40e 	lsl.w	r4, r0, lr
   83d24:	0c3a      	lsrs	r2, r7, #16
   83d26:	fbbc f9f2 	udiv	r9, ip, r2
   83d2a:	b2bb      	uxth	r3, r7
   83d2c:	fb02 cc19 	mls	ip, r2, r9, ip
   83d30:	fb09 fa03 	mul.w	sl, r9, r3
   83d34:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83d38:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83d3c:	45b2      	cmp	sl, r6
   83d3e:	d90a      	bls.n	83d56 <__udivmoddi4+0x6a>
   83d40:	19f6      	adds	r6, r6, r7
   83d42:	f109 31ff 	add.w	r1, r9, #4294967295
   83d46:	f080 8125 	bcs.w	83f94 <__udivmoddi4+0x2a8>
   83d4a:	45b2      	cmp	sl, r6
   83d4c:	f240 8122 	bls.w	83f94 <__udivmoddi4+0x2a8>
   83d50:	f1a9 0902 	sub.w	r9, r9, #2
   83d54:	443e      	add	r6, r7
   83d56:	eba6 060a 	sub.w	r6, r6, sl
   83d5a:	fbb6 f0f2 	udiv	r0, r6, r2
   83d5e:	fb02 6610 	mls	r6, r2, r0, r6
   83d62:	fb00 f303 	mul.w	r3, r0, r3
   83d66:	b2a4      	uxth	r4, r4
   83d68:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83d6c:	42a3      	cmp	r3, r4
   83d6e:	d909      	bls.n	83d84 <__udivmoddi4+0x98>
   83d70:	19e4      	adds	r4, r4, r7
   83d72:	f100 32ff 	add.w	r2, r0, #4294967295
   83d76:	f080 810b 	bcs.w	83f90 <__udivmoddi4+0x2a4>
   83d7a:	42a3      	cmp	r3, r4
   83d7c:	f240 8108 	bls.w	83f90 <__udivmoddi4+0x2a4>
   83d80:	3802      	subs	r0, #2
   83d82:	443c      	add	r4, r7
   83d84:	2100      	movs	r1, #0
   83d86:	1ae4      	subs	r4, r4, r3
   83d88:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83d8c:	2d00      	cmp	r5, #0
   83d8e:	d062      	beq.n	83e56 <__udivmoddi4+0x16a>
   83d90:	2300      	movs	r3, #0
   83d92:	fa24 f40e 	lsr.w	r4, r4, lr
   83d96:	602c      	str	r4, [r5, #0]
   83d98:	606b      	str	r3, [r5, #4]
   83d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d9e:	428b      	cmp	r3, r1
   83da0:	d907      	bls.n	83db2 <__udivmoddi4+0xc6>
   83da2:	2d00      	cmp	r5, #0
   83da4:	d055      	beq.n	83e52 <__udivmoddi4+0x166>
   83da6:	2100      	movs	r1, #0
   83da8:	e885 0041 	stmia.w	r5, {r0, r6}
   83dac:	4608      	mov	r0, r1
   83dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83db2:	fab3 f183 	clz	r1, r3
   83db6:	2900      	cmp	r1, #0
   83db8:	f040 808f 	bne.w	83eda <__udivmoddi4+0x1ee>
   83dbc:	42b3      	cmp	r3, r6
   83dbe:	d302      	bcc.n	83dc6 <__udivmoddi4+0xda>
   83dc0:	4282      	cmp	r2, r0
   83dc2:	f200 80fc 	bhi.w	83fbe <__udivmoddi4+0x2d2>
   83dc6:	1a84      	subs	r4, r0, r2
   83dc8:	eb66 0603 	sbc.w	r6, r6, r3
   83dcc:	2001      	movs	r0, #1
   83dce:	46b4      	mov	ip, r6
   83dd0:	2d00      	cmp	r5, #0
   83dd2:	d040      	beq.n	83e56 <__udivmoddi4+0x16a>
   83dd4:	e885 1010 	stmia.w	r5, {r4, ip}
   83dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83ddc:	b912      	cbnz	r2, 83de4 <__udivmoddi4+0xf8>
   83dde:	2701      	movs	r7, #1
   83de0:	fbb7 f7f2 	udiv	r7, r7, r2
   83de4:	fab7 fe87 	clz	lr, r7
   83de8:	f1be 0f00 	cmp.w	lr, #0
   83dec:	d135      	bne.n	83e5a <__udivmoddi4+0x16e>
   83dee:	2101      	movs	r1, #1
   83df0:	1bf6      	subs	r6, r6, r7
   83df2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83df6:	fa1f f887 	uxth.w	r8, r7
   83dfa:	fbb6 f2fc 	udiv	r2, r6, ip
   83dfe:	fb0c 6612 	mls	r6, ip, r2, r6
   83e02:	fb08 f002 	mul.w	r0, r8, r2
   83e06:	0c23      	lsrs	r3, r4, #16
   83e08:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83e0c:	42b0      	cmp	r0, r6
   83e0e:	d907      	bls.n	83e20 <__udivmoddi4+0x134>
   83e10:	19f6      	adds	r6, r6, r7
   83e12:	f102 33ff 	add.w	r3, r2, #4294967295
   83e16:	d202      	bcs.n	83e1e <__udivmoddi4+0x132>
   83e18:	42b0      	cmp	r0, r6
   83e1a:	f200 80d2 	bhi.w	83fc2 <__udivmoddi4+0x2d6>
   83e1e:	461a      	mov	r2, r3
   83e20:	1a36      	subs	r6, r6, r0
   83e22:	fbb6 f0fc 	udiv	r0, r6, ip
   83e26:	fb0c 6610 	mls	r6, ip, r0, r6
   83e2a:	fb08 f800 	mul.w	r8, r8, r0
   83e2e:	b2a3      	uxth	r3, r4
   83e30:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83e34:	45a0      	cmp	r8, r4
   83e36:	d907      	bls.n	83e48 <__udivmoddi4+0x15c>
   83e38:	19e4      	adds	r4, r4, r7
   83e3a:	f100 33ff 	add.w	r3, r0, #4294967295
   83e3e:	d202      	bcs.n	83e46 <__udivmoddi4+0x15a>
   83e40:	45a0      	cmp	r8, r4
   83e42:	f200 80b9 	bhi.w	83fb8 <__udivmoddi4+0x2cc>
   83e46:	4618      	mov	r0, r3
   83e48:	eba4 0408 	sub.w	r4, r4, r8
   83e4c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83e50:	e79c      	b.n	83d8c <__udivmoddi4+0xa0>
   83e52:	4629      	mov	r1, r5
   83e54:	4628      	mov	r0, r5
   83e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83e5a:	fa07 f70e 	lsl.w	r7, r7, lr
   83e5e:	f1ce 0320 	rsb	r3, lr, #32
   83e62:	fa26 f203 	lsr.w	r2, r6, r3
   83e66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83e6a:	fbb2 f1fc 	udiv	r1, r2, ip
   83e6e:	fa1f f887 	uxth.w	r8, r7
   83e72:	fb0c 2211 	mls	r2, ip, r1, r2
   83e76:	fa06 f60e 	lsl.w	r6, r6, lr
   83e7a:	fa20 f303 	lsr.w	r3, r0, r3
   83e7e:	fb01 f908 	mul.w	r9, r1, r8
   83e82:	4333      	orrs	r3, r6
   83e84:	0c1e      	lsrs	r6, r3, #16
   83e86:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83e8a:	45b1      	cmp	r9, r6
   83e8c:	fa00 f40e 	lsl.w	r4, r0, lr
   83e90:	d909      	bls.n	83ea6 <__udivmoddi4+0x1ba>
   83e92:	19f6      	adds	r6, r6, r7
   83e94:	f101 32ff 	add.w	r2, r1, #4294967295
   83e98:	f080 808c 	bcs.w	83fb4 <__udivmoddi4+0x2c8>
   83e9c:	45b1      	cmp	r9, r6
   83e9e:	f240 8089 	bls.w	83fb4 <__udivmoddi4+0x2c8>
   83ea2:	3902      	subs	r1, #2
   83ea4:	443e      	add	r6, r7
   83ea6:	eba6 0609 	sub.w	r6, r6, r9
   83eaa:	fbb6 f0fc 	udiv	r0, r6, ip
   83eae:	fb0c 6210 	mls	r2, ip, r0, r6
   83eb2:	fb00 f908 	mul.w	r9, r0, r8
   83eb6:	b29e      	uxth	r6, r3
   83eb8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83ebc:	45b1      	cmp	r9, r6
   83ebe:	d907      	bls.n	83ed0 <__udivmoddi4+0x1e4>
   83ec0:	19f6      	adds	r6, r6, r7
   83ec2:	f100 33ff 	add.w	r3, r0, #4294967295
   83ec6:	d271      	bcs.n	83fac <__udivmoddi4+0x2c0>
   83ec8:	45b1      	cmp	r9, r6
   83eca:	d96f      	bls.n	83fac <__udivmoddi4+0x2c0>
   83ecc:	3802      	subs	r0, #2
   83ece:	443e      	add	r6, r7
   83ed0:	eba6 0609 	sub.w	r6, r6, r9
   83ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83ed8:	e78f      	b.n	83dfa <__udivmoddi4+0x10e>
   83eda:	f1c1 0720 	rsb	r7, r1, #32
   83ede:	fa22 f807 	lsr.w	r8, r2, r7
   83ee2:	408b      	lsls	r3, r1
   83ee4:	ea48 0303 	orr.w	r3, r8, r3
   83ee8:	fa26 f407 	lsr.w	r4, r6, r7
   83eec:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83ef0:	fbb4 f9fe 	udiv	r9, r4, lr
   83ef4:	fa1f fc83 	uxth.w	ip, r3
   83ef8:	fb0e 4419 	mls	r4, lr, r9, r4
   83efc:	408e      	lsls	r6, r1
   83efe:	fa20 f807 	lsr.w	r8, r0, r7
   83f02:	fb09 fa0c 	mul.w	sl, r9, ip
   83f06:	ea48 0806 	orr.w	r8, r8, r6
   83f0a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83f0e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83f12:	45a2      	cmp	sl, r4
   83f14:	fa02 f201 	lsl.w	r2, r2, r1
   83f18:	fa00 f601 	lsl.w	r6, r0, r1
   83f1c:	d908      	bls.n	83f30 <__udivmoddi4+0x244>
   83f1e:	18e4      	adds	r4, r4, r3
   83f20:	f109 30ff 	add.w	r0, r9, #4294967295
   83f24:	d244      	bcs.n	83fb0 <__udivmoddi4+0x2c4>
   83f26:	45a2      	cmp	sl, r4
   83f28:	d942      	bls.n	83fb0 <__udivmoddi4+0x2c4>
   83f2a:	f1a9 0902 	sub.w	r9, r9, #2
   83f2e:	441c      	add	r4, r3
   83f30:	eba4 040a 	sub.w	r4, r4, sl
   83f34:	fbb4 f0fe 	udiv	r0, r4, lr
   83f38:	fb0e 4410 	mls	r4, lr, r0, r4
   83f3c:	fb00 fc0c 	mul.w	ip, r0, ip
   83f40:	fa1f f888 	uxth.w	r8, r8
   83f44:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83f48:	45a4      	cmp	ip, r4
   83f4a:	d907      	bls.n	83f5c <__udivmoddi4+0x270>
   83f4c:	18e4      	adds	r4, r4, r3
   83f4e:	f100 3eff 	add.w	lr, r0, #4294967295
   83f52:	d229      	bcs.n	83fa8 <__udivmoddi4+0x2bc>
   83f54:	45a4      	cmp	ip, r4
   83f56:	d927      	bls.n	83fa8 <__udivmoddi4+0x2bc>
   83f58:	3802      	subs	r0, #2
   83f5a:	441c      	add	r4, r3
   83f5c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83f60:	fba0 8902 	umull	r8, r9, r0, r2
   83f64:	eba4 0c0c 	sub.w	ip, r4, ip
   83f68:	45cc      	cmp	ip, r9
   83f6a:	46c2      	mov	sl, r8
   83f6c:	46ce      	mov	lr, r9
   83f6e:	d315      	bcc.n	83f9c <__udivmoddi4+0x2b0>
   83f70:	d012      	beq.n	83f98 <__udivmoddi4+0x2ac>
   83f72:	b155      	cbz	r5, 83f8a <__udivmoddi4+0x29e>
   83f74:	ebb6 030a 	subs.w	r3, r6, sl
   83f78:	eb6c 060e 	sbc.w	r6, ip, lr
   83f7c:	fa06 f707 	lsl.w	r7, r6, r7
   83f80:	40cb      	lsrs	r3, r1
   83f82:	431f      	orrs	r7, r3
   83f84:	40ce      	lsrs	r6, r1
   83f86:	602f      	str	r7, [r5, #0]
   83f88:	606e      	str	r6, [r5, #4]
   83f8a:	2100      	movs	r1, #0
   83f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83f90:	4610      	mov	r0, r2
   83f92:	e6f7      	b.n	83d84 <__udivmoddi4+0x98>
   83f94:	4689      	mov	r9, r1
   83f96:	e6de      	b.n	83d56 <__udivmoddi4+0x6a>
   83f98:	4546      	cmp	r6, r8
   83f9a:	d2ea      	bcs.n	83f72 <__udivmoddi4+0x286>
   83f9c:	ebb8 0a02 	subs.w	sl, r8, r2
   83fa0:	eb69 0e03 	sbc.w	lr, r9, r3
   83fa4:	3801      	subs	r0, #1
   83fa6:	e7e4      	b.n	83f72 <__udivmoddi4+0x286>
   83fa8:	4670      	mov	r0, lr
   83faa:	e7d7      	b.n	83f5c <__udivmoddi4+0x270>
   83fac:	4618      	mov	r0, r3
   83fae:	e78f      	b.n	83ed0 <__udivmoddi4+0x1e4>
   83fb0:	4681      	mov	r9, r0
   83fb2:	e7bd      	b.n	83f30 <__udivmoddi4+0x244>
   83fb4:	4611      	mov	r1, r2
   83fb6:	e776      	b.n	83ea6 <__udivmoddi4+0x1ba>
   83fb8:	3802      	subs	r0, #2
   83fba:	443c      	add	r4, r7
   83fbc:	e744      	b.n	83e48 <__udivmoddi4+0x15c>
   83fbe:	4608      	mov	r0, r1
   83fc0:	e706      	b.n	83dd0 <__udivmoddi4+0xe4>
   83fc2:	3a02      	subs	r2, #2
   83fc4:	443e      	add	r6, r7
   83fc6:	e72b      	b.n	83e20 <__udivmoddi4+0x134>

00083fc8 <__aeabi_idiv0>:
   83fc8:	4770      	bx	lr
   83fca:	bf00      	nop
   83fcc:	72412d2d 	.word	0x72412d2d
   83fd0:	6e697564 	.word	0x6e697564
   83fd4:	7544206f 	.word	0x7544206f
   83fd8:	614d2065 	.word	0x614d2065
   83fdc:	72657473 	.word	0x72657473
   83fe0:	000a2d2d 	.word	0x000a2d2d
   83fe4:	2d2d2d2d 	.word	0x2d2d2d2d
   83fe8:	2d2d2d2d 	.word	0x2d2d2d2d
   83fec:	2d2d2d2d 	.word	0x2d2d2d2d
   83ff0:	2d2d2d2d 	.word	0x2d2d2d2d
   83ff4:	2d2d2d2d 	.word	0x2d2d2d2d
   83ff8:	2d2d2d2d 	.word	0x2d2d2d2d
   83ffc:	0a2d2d2d 	.word	0x0a2d2d2d
   84000:	00000000 	.word	0x00000000
   84004:	65636572 	.word	0x65636572
   84008:	64657669 	.word	0x64657669
   8400c:	63615020 	.word	0x63615020
   84010:	2074656b 	.word	0x2074656b
   84014:	6d6f7266 	.word	0x6d6f7266
   84018:	67654d20 	.word	0x67654d20
   8401c:	005b3a61 	.word	0x005b3a61
   84020:	00206425 	.word	0x00206425
   84024:	00000a5d 	.word	0x00000a5d

00084028 <_global_impure_ptr>:
   84028:	20070150 33323130 37363534 42413938     P.. 0123456789AB
   84038:	46454443 00000000 33323130 37363534     CDEF....01234567
   84048:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84058:	0000296c                                l)..

0008405c <blanks.7217>:
   8405c:	20202020 20202020 20202020 20202020                     

0008406c <zeroes.7218>:
   8406c:	30303030 30303030 30303030 30303030     0000000000000000
   8407c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008408c <_ctype_>:
   8408c:	20202000 20202020 28282020 20282828     .         ((((( 
   8409c:	20202020 20202020 20202020 20202020                     
   840ac:	10108820 10101010 10101010 10101010      ...............
   840bc:	04040410 04040404 10040404 10101010     ................
   840cc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   840dc:	01010101 01010101 01010101 10101010     ................
   840ec:	42421010 42424242 02020202 02020202     ..BBBBBB........
   840fc:	02020202 02020202 02020202 10101010     ................
   8410c:	00000020 00000000 00000000 00000000      ...............
	...

00084190 <_init>:
   84190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84192:	bf00      	nop
   84194:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84196:	bc08      	pop	{r3}
   84198:	469e      	mov	lr, r3
   8419a:	4770      	bx	lr

0008419c <__init_array_start>:
   8419c:	000823a1 	.word	0x000823a1

000841a0 <__frame_dummy_init_array_entry>:
   841a0:	00080119                                ....

000841a4 <_fini>:
   841a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   841a6:	bf00      	nop
   841a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   841aa:	bc08      	pop	{r3}
   841ac:	469e      	mov	lr, r3
   841ae:	4770      	bx	lr

000841b0 <__fini_array_start>:
   841b0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070134 	.word	0x20070134

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <xNextTaskUnblockTime>:
2007012c:	ffffffff                                ....

20070130 <g_interrupt_enabled>:
20070130:	00000001                                ....

20070134 <SystemCoreClock>:
20070134:	003d0900                                ..=.

20070138 <packet_pos>:
	...
20070140:	20070cb0 0000000a 00000008              ... ........

2007014c <_impure_ptr>:
2007014c:	20070150                                P.. 

20070150 <impure_data>:
20070150:	00000000 2007043c 200704a4 2007050c     ....<.. ... ... 
	...
200701f8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070208:	0005deec 0000000b 00000000 00000000     ................
	...

20070578 <__atexit_recursive_mutex>:
20070578:	20070cfc                                ... 

2007057c <__global_locale>:
2007057c:	00000043 00000000 00000000 00000000     C...............
	...
2007059c:	00000043 00000000 00000000 00000000     C...............
	...
200705bc:	00000043 00000000 00000000 00000000     C...............
	...
200705dc:	00000043 00000000 00000000 00000000     C...............
	...
200705fc:	00000043 00000000 00000000 00000000     C...............
	...
2007061c:	00000043 00000000 00000000 00000000     C...............
	...
2007063c:	00000043 00000000 00000000 00000000     C...............
	...
2007065c:	00083a29 00083375 00000000 0008408c     ):..u3.......@..
2007066c:	00084088 00084000 00084000 00084000     .@...@...@...@..
2007067c:	00084000 00084000 00084000 00084000     .@...@...@...@..
2007068c:	00084000 00084000 ffffffff ffffffff     .@...@..........
2007069c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706c4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706e8 <__malloc_av_>:
	...
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 
20070ae0:	20070ad8 20070ad8 20070ae0 20070ae0     ... ... ... ... 

20070af0 <__malloc_sbrk_base>:
20070af0:	ffffffff                                ....

20070af4 <__malloc_trim_threshold>:
20070af4:	00020000                                ....
