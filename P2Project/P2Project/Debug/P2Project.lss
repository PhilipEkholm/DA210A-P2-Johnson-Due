
P2Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040f0  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000840f0  000840f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae8  20070000  000840f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000224  20070ae8  00084be0  00020ae8  2**2
                  ALLOC
  4 .stack        00002004  20070d0c  00084e04  00020ae8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b11  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b62d  00000000  00000000  00020b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000040d9  00000000  00000000  0003c197  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005bc0  00000000  00000000  00040270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cd0  00000000  00000000  00045e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c60  00000000  00000000  00046b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001bc03  00000000  00000000  00047760  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013895  00000000  00000000  00063363  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00069bfc  00000000  00000000  00076bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002938  00000000  00000000  000e07f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	10 2d 07 20 39 0e 08 00 35 0e 08 00 35 0e 08 00     .-. 9...5...5...
   80010:	35 0e 08 00 35 0e 08 00 35 0e 08 00 00 00 00 00     5...5...5.......
	...
   8002c:	35 03 08 00 35 0e 08 00 00 00 00 00 6d 03 08 00     5...5.......m...
   8003c:	a9 03 08 00 35 0e 08 00 35 0e 08 00 35 0e 08 00     ....5...5...5...
   8004c:	35 0e 08 00 35 0e 08 00 35 0e 08 00 35 0e 08 00     5...5...5...5...
   8005c:	35 0e 08 00 35 0e 08 00 35 0e 08 00 00 00 00 00     5...5...5.......
   8006c:	a9 0c 08 00 bd 0c 08 00 d1 0c 08 00 e5 0c 08 00     ................
	...
   80084:	9d 05 08 00 35 0e 08 00 35 0e 08 00 35 0e 08 00     ....5...5...5...
   80094:	35 0e 08 00 35 0e 08 00 35 0e 08 00 35 0e 08 00     5...5...5...5...
   800a4:	00 00 00 00 35 0e 08 00 35 0e 08 00 35 0e 08 00     ....5...5...5...
   800b4:	35 0e 08 00 35 0e 08 00 35 0e 08 00 35 0e 08 00     5...5...5...5...
   800c4:	35 0e 08 00 35 0e 08 00 35 0e 08 00 35 0e 08 00     5...5...5...5...
   800d4:	35 0e 08 00 35 0e 08 00 35 0e 08 00 35 0e 08 00     5...5...5...5...
   800e4:	35 0e 08 00 35 0e 08 00 35 0e 08 00 35 0e 08 00     5...5...5...5...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae8 	.word	0x20070ae8
   80110:	00000000 	.word	0x00000000
   80114:	000840f8 	.word	0x000840f8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000840f8 	.word	0x000840f8
   80154:	20070aec 	.word	0x20070aec
   80158:	000840f8 	.word	0x000840f8
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	20070ce0 	.word	0x20070ce0
   80198:	20070cd8 	.word	0x20070cd8

0008019c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8019c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8019e:	0189      	lsls	r1, r1, #6
   801a0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   801a2:	2402      	movs	r4, #2
   801a4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   801a6:	f04f 31ff 	mov.w	r1, #4294967295
   801aa:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   801ac:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   801ae:	605a      	str	r2, [r3, #4]
}
   801b0:	bc10      	pop	{r4}
   801b2:	4770      	bx	lr

000801b4 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   801b4:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   801b8:	4770      	bx	lr

000801ba <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   801ba:	0189      	lsls	r1, r1, #6
   801bc:	2302      	movs	r3, #2
   801be:	5043      	str	r3, [r0, r1]
   801c0:	4770      	bx	lr
	...

000801c4 <delayInit>:
#include "asf.h"
#include "DelayFunctions.h"


int delayInit(void)		/* Initializes the timer used for delays */
{
   801c4:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC3);	/* power on the peripheral clock for timers */
   801c6:	201e      	movs	r0, #30
   801c8:	4b08      	ldr	r3, [pc, #32]	; (801ec <delayInit+0x28>)
   801ca:	4798      	blx	r3
	tc_init(TC1,0,0);				/* TC1, channel 0, TCLK1 och capturemode */
   801cc:	4c08      	ldr	r4, [pc, #32]	; (801f0 <delayInit+0x2c>)
   801ce:	2200      	movs	r2, #0
   801d0:	4611      	mov	r1, r2
   801d2:	4620      	mov	r0, r4
   801d4:	4b07      	ldr	r3, [pc, #28]	; (801f4 <delayInit+0x30>)
   801d6:	4798      	blx	r3
	tc_set_block_mode(TC1,0);
   801d8:	2100      	movs	r1, #0
   801da:	4620      	mov	r0, r4
   801dc:	4b06      	ldr	r3, [pc, #24]	; (801f8 <delayInit+0x34>)
   801de:	4798      	blx	r3
	tc_stop(TC1,0);					/* making sure the timer does not run  */
   801e0:	2100      	movs	r1, #0
   801e2:	4620      	mov	r0, r4
   801e4:	4b05      	ldr	r3, [pc, #20]	; (801fc <delayInit+0x38>)
   801e6:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   801e8:	2000      	movs	r0, #0
   801ea:	bd10      	pop	{r4, pc}
   801ec:	00080de1 	.word	0x00080de1
   801f0:	40084000 	.word	0x40084000
   801f4:	0008019d 	.word	0x0008019d
   801f8:	000801b5 	.word	0x000801b5
   801fc:	000801bb 	.word	0x000801bb

00080200 <Twi_master_init>:

/* Low level time limit of I2C Fast Mode. */
#define LOW_LEVEL_TIME_LIMIT 384000
#define I2C_FAST_MODE_SPEED  400000

void Twi_master_init(){
   80200:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_TWI1); /* power the clock for the TWI with pmc */
   80202:	2017      	movs	r0, #23
   80204:	4b14      	ldr	r3, [pc, #80]	; (80258 <Twi_master_init+0x58>)
   80206:	4798      	blx	r3

	PIOA->PIO_PDR|= (PIO_PB12)|(PIO_PB13);	/* Enable TWI pios */
   80208:	4a14      	ldr	r2, [pc, #80]	; (8025c <Twi_master_init+0x5c>)
   8020a:	6853      	ldr	r3, [r2, #4]
   8020c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   80210:	6053      	str	r3, [r2, #4]
	TWI1->TWI_CR = (0x1u << 7);				// TWIn software reset
   80212:	4b13      	ldr	r3, [pc, #76]	; (80260 <Twi_master_init+0x60>)
   80214:	2280      	movs	r2, #128	; 0x80
   80216:	601a      	str	r2, [r3, #0]
	TWI1->TWI_RHR;							// Flush reception buffer
   80218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	/* Set Master Disable bit and Slave Disable bit */
	TWI1->TWI_CR = TWI_CR_MSDIS;
   8021a:	2208      	movs	r2, #8
   8021c:	601a      	str	r2, [r3, #0]
	TWI1->TWI_CR = TWI_CR_SVDIS;
   8021e:	2220      	movs	r2, #32
   80220:	601a      	str	r2, [r3, #0]
	TWI1->TWI_CR |= (0x1u << 2);			/* Set Master Enable bit */
   80222:	681a      	ldr	r2, [r3, #0]
   80224:	f042 0204 	orr.w	r2, r2, #4
   80228:	601a      	str	r2, [r3, #0]
	TWI1->TWI_MMR |= TWI_MMR_DADR(unoAddress);//device address
   8022a:	685a      	ldr	r2, [r3, #4]
   8022c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80230:	605a      	str	r2, [r3, #4]
	TWI1->TWI_PTCR |= (0x1u << 0)|(0x1u << 8);//Receiver/transmitter Transfer Enable 
   80232:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   80236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8023a:	f042 0201 	orr.w	r2, r2, #1
   8023e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	TWI0->TWI_IDR = ~0UL;					/* Disable TWI interrupts */
   80242:	f04f 31ff 	mov.w	r1, #4294967295
   80246:	4a07      	ldr	r2, [pc, #28]	; (80264 <Twi_master_init+0x64>)
   80248:	6291      	str	r1, [r2, #40]	; 0x28
	TWI1->TWI_CWGR |= I2C_FAST_MODE_SPEED;
   8024a:	691a      	ldr	r2, [r3, #16]
   8024c:	f442 22c3 	orr.w	r2, r2, #399360	; 0x61800
   80250:	f442 7220 	orr.w	r2, r2, #640	; 0x280
   80254:	611a      	str	r2, [r3, #16]
   80256:	bd08      	pop	{r3, pc}
   80258:	00080de1 	.word	0x00080de1
   8025c:	400e0e00 	.word	0x400e0e00
   80260:	40090000 	.word	0x40090000
   80264:	4008c000 	.word	0x4008c000

00080268 <twi_Start>:
}
void twi_Start(Twi* pTWI, uint8_t slave_address, uint8_t R_W) { //read=1, write=0
	//set slave address
	pTWI->TWI_MMR = (pTWI->TWI_MMR & ~TWI_MMR_DADR_Msk)|TWI_MMR_DADR(slave_address);
   80268:	6843      	ldr	r3, [r0, #4]
   8026a:	0409      	lsls	r1, r1, #16
   8026c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
   80270:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
   80274:	4319      	orrs	r1, r3
   80276:	6041      	str	r1, [r0, #4]
	//set read/write direction
	if (R_W == 0) { //write
   80278:	b962      	cbnz	r2, 80294 <twi_Start+0x2c>
		pTWI->TWI_MMR &= ~(0x1u << 12);//Master write Direction 
   8027a:	6843      	ldr	r3, [r0, #4]
   8027c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   80280:	6043      	str	r3, [r0, #4]
	}
	else if (R_W == 1) { //read
		pTWI->TWI_MMR |= (0x1u << 12); //Master Read Direction 
	}
	pTWI->TWI_CR |= (0x1u << 0);//send start condition
   80282:	6803      	ldr	r3, [r0, #0]
   80284:	f043 0301 	orr.w	r3, r3, #1
   80288:	6003      	str	r3, [r0, #0]
	while (!(pTWI->TWI_SR & TWI_SR_TXRDY));//wait for ack
   8028a:	6a03      	ldr	r3, [r0, #32]
   8028c:	f013 0f04 	tst.w	r3, #4
   80290:	d0fb      	beq.n	8028a <twi_Start+0x22>
}
   80292:	4770      	bx	lr
	else if (R_W == 1) { //read
   80294:	2a01      	cmp	r2, #1
   80296:	d1f4      	bne.n	80282 <twi_Start+0x1a>
		pTWI->TWI_MMR |= (0x1u << 12); //Master Read Direction 
   80298:	6843      	ldr	r3, [r0, #4]
   8029a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   8029e:	6043      	str	r3, [r0, #4]
   802a0:	e7ef      	b.n	80282 <twi_Start+0x1a>
	...

000802a4 <master_read>:
	return received;
}

/***************************   Stop    ****************************/
void twi_Stop(Twi* pTWI) {
	pTWI->TWI_CR |= (0x1u << 1); //Sett a STOP Condition 
   802a4:	4a06      	ldr	r2, [pc, #24]	; (802c0 <master_read+0x1c>)
   802a6:	6813      	ldr	r3, [r2, #0]
   802a8:	f043 0302 	orr.w	r3, r3, #2
   802ac:	6013      	str	r3, [r2, #0]
	while (!(TWI1 ->TWI_SR & TWI_SR_RXRDY)){}
   802ae:	6a13      	ldr	r3, [r2, #32]
   802b0:	f013 0f02 	tst.w	r3, #2
   802b4:	d0fb      	beq.n	802ae <master_read+0xa>
	received =TWI1->TWI_RHR; 
   802b6:	4b02      	ldr	r3, [pc, #8]	; (802c0 <master_read+0x1c>)
   802b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
}
   802ba:	b2c0      	uxtb	r0, r0
   802bc:	4770      	bx	lr
   802be:	bf00      	nop
   802c0:	40090000 	.word	0x40090000

000802c4 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   802c4:	6943      	ldr	r3, [r0, #20]
   802c6:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   802ca:	bf1d      	ittte	ne
   802cc:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   802d0:	61c1      	strne	r1, [r0, #28]
	return 0;
   802d2:	2000      	movne	r0, #0
		return 1;
   802d4:	2001      	moveq	r0, #1
}
   802d6:	4770      	bx	lr

000802d8 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   802d8:	6943      	ldr	r3, [r0, #20]
   802da:	f013 0f01 	tst.w	r3, #1
   802de:	d005      	beq.n	802ec <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   802e0:	6983      	ldr	r3, [r0, #24]
   802e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   802e6:	600b      	str	r3, [r1, #0]

	return 0;
   802e8:	2000      	movs	r0, #0
   802ea:	4770      	bx	lr
		return 1;
   802ec:	2001      	movs	r0, #1
}
   802ee:	4770      	bx	lr

000802f0 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   802f0:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   802f2:	685a      	ldr	r2, [r3, #4]
   802f4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   802f6:	6842      	ldr	r2, [r0, #4]
   802f8:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   802fa:	685a      	ldr	r2, [r3, #4]
   802fc:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   802fe:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80300:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80302:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80304:	6803      	ldr	r3, [r0, #0]
   80306:	3301      	adds	r3, #1
   80308:	6003      	str	r3, [r0, #0]
   8030a:	4770      	bx	lr

0008030c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8030c:	6843      	ldr	r3, [r0, #4]
   8030e:	6882      	ldr	r2, [r0, #8]
   80310:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80312:	6883      	ldr	r3, [r0, #8]
   80314:	6842      	ldr	r2, [r0, #4]
   80316:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80318:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8031a:	685a      	ldr	r2, [r3, #4]
   8031c:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8031e:	bf04      	itt	eq
   80320:	6882      	ldreq	r2, [r0, #8]
   80322:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80324:	2200      	movs	r2, #0
   80326:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80328:	681a      	ldr	r2, [r3, #0]
   8032a:	3a01      	subs	r2, #1
   8032c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8032e:	6818      	ldr	r0, [r3, #0]
}
   80330:	4770      	bx	lr
	...

00080334 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80334:	4b06      	ldr	r3, [pc, #24]	; (80350 <pxCurrentTCBConst2>)
   80336:	6819      	ldr	r1, [r3, #0]
   80338:	6808      	ldr	r0, [r1, #0]
   8033a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8033e:	f380 8809 	msr	PSP, r0
   80342:	f04f 0000 	mov.w	r0, #0
   80346:	f380 8811 	msr	BASEPRI, r0
   8034a:	f04e 0e0d 	orr.w	lr, lr, #13
   8034e:	4770      	bx	lr

00080350 <pxCurrentTCBConst2>:
   80350:	20070b04 	.word	0x20070b04

00080354 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80354:	f3ef 8011 	mrs	r0, BASEPRI
   80358:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8035c:	f381 8811 	msr	BASEPRI, r1
   80360:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80362:	2000      	movs	r0, #0

00080364 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80364:	f380 8811 	msr	BASEPRI, r0
   80368:	4770      	bx	lr
	...

0008036c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8036c:	f3ef 8009 	mrs	r0, PSP
   80370:	4b0c      	ldr	r3, [pc, #48]	; (803a4 <pxCurrentTCBConst>)
   80372:	681a      	ldr	r2, [r3, #0]
   80374:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80378:	6010      	str	r0, [r2, #0]
   8037a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8037e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80382:	f380 8811 	msr	BASEPRI, r0
   80386:	f000 f8b9 	bl	804fc <vTaskSwitchContext>
   8038a:	f04f 0000 	mov.w	r0, #0
   8038e:	f380 8811 	msr	BASEPRI, r0
   80392:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80396:	6819      	ldr	r1, [r3, #0]
   80398:	6808      	ldr	r0, [r1, #0]
   8039a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8039e:	f380 8809 	msr	PSP, r0
   803a2:	4770      	bx	lr

000803a4 <pxCurrentTCBConst>:
   803a4:	20070b04 	.word	0x20070b04

000803a8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   803a8:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   803aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   803ae:	4b05      	ldr	r3, [pc, #20]	; (803c4 <SysTick_Handler+0x1c>)
   803b0:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   803b2:	4b05      	ldr	r3, [pc, #20]	; (803c8 <SysTick_Handler+0x20>)
   803b4:	4798      	blx	r3
	{
		vTaskIncrementTick();
   803b6:	4b05      	ldr	r3, [pc, #20]	; (803cc <SysTick_Handler+0x24>)
   803b8:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   803ba:	2000      	movs	r0, #0
   803bc:	4b04      	ldr	r3, [pc, #16]	; (803d0 <SysTick_Handler+0x28>)
   803be:	4798      	blx	r3
   803c0:	bd08      	pop	{r3, pc}
   803c2:	bf00      	nop
   803c4:	e000ed04 	.word	0xe000ed04
   803c8:	00080355 	.word	0x00080355
   803cc:	000803d5 	.word	0x000803d5
   803d0:	00080365 	.word	0x00080365

000803d4 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   803d4:	4b3d      	ldr	r3, [pc, #244]	; (804cc <vTaskIncrementTick+0xf8>)
   803d6:	681b      	ldr	r3, [r3, #0]
   803d8:	2b00      	cmp	r3, #0
   803da:	d16f      	bne.n	804bc <vTaskIncrementTick+0xe8>
{
   803dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   803e0:	4b3b      	ldr	r3, [pc, #236]	; (804d0 <vTaskIncrementTick+0xfc>)
   803e2:	681a      	ldr	r2, [r3, #0]
   803e4:	3201      	adds	r2, #1
   803e6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   803e8:	681b      	ldr	r3, [r3, #0]
   803ea:	b9ab      	cbnz	r3, 80418 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   803ec:	4b39      	ldr	r3, [pc, #228]	; (804d4 <vTaskIncrementTick+0x100>)
   803ee:	681b      	ldr	r3, [r3, #0]
   803f0:	681b      	ldr	r3, [r3, #0]
   803f2:	2b00      	cmp	r3, #0
   803f4:	d128      	bne.n	80448 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   803f6:	4b37      	ldr	r3, [pc, #220]	; (804d4 <vTaskIncrementTick+0x100>)
   803f8:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   803fa:	4a37      	ldr	r2, [pc, #220]	; (804d8 <vTaskIncrementTick+0x104>)
   803fc:	6810      	ldr	r0, [r2, #0]
   803fe:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80400:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80402:	4936      	ldr	r1, [pc, #216]	; (804dc <vTaskIncrementTick+0x108>)
   80404:	680a      	ldr	r2, [r1, #0]
   80406:	3201      	adds	r2, #1
   80408:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8040a:	681b      	ldr	r3, [r3, #0]
   8040c:	681b      	ldr	r3, [r3, #0]
   8040e:	b9fb      	cbnz	r3, 80450 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80410:	f04f 32ff 	mov.w	r2, #4294967295
   80414:	4b32      	ldr	r3, [pc, #200]	; (804e0 <vTaskIncrementTick+0x10c>)
   80416:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80418:	4b2d      	ldr	r3, [pc, #180]	; (804d0 <vTaskIncrementTick+0xfc>)
   8041a:	681a      	ldr	r2, [r3, #0]
   8041c:	4b30      	ldr	r3, [pc, #192]	; (804e0 <vTaskIncrementTick+0x10c>)
   8041e:	681b      	ldr	r3, [r3, #0]
   80420:	429a      	cmp	r2, r3
   80422:	d350      	bcc.n	804c6 <vTaskIncrementTick+0xf2>
   80424:	4b2b      	ldr	r3, [pc, #172]	; (804d4 <vTaskIncrementTick+0x100>)
   80426:	681b      	ldr	r3, [r3, #0]
   80428:	681b      	ldr	r3, [r3, #0]
   8042a:	b1cb      	cbz	r3, 80460 <vTaskIncrementTick+0x8c>
   8042c:	4b29      	ldr	r3, [pc, #164]	; (804d4 <vTaskIncrementTick+0x100>)
   8042e:	681b      	ldr	r3, [r3, #0]
   80430:	68db      	ldr	r3, [r3, #12]
   80432:	68dc      	ldr	r4, [r3, #12]
   80434:	6863      	ldr	r3, [r4, #4]
   80436:	4a26      	ldr	r2, [pc, #152]	; (804d0 <vTaskIncrementTick+0xfc>)
   80438:	6812      	ldr	r2, [r2, #0]
   8043a:	4293      	cmp	r3, r2
   8043c:	d816      	bhi.n	8046c <vTaskIncrementTick+0x98>
   8043e:	4e29      	ldr	r6, [pc, #164]	; (804e4 <vTaskIncrementTick+0x110>)
   80440:	4f29      	ldr	r7, [pc, #164]	; (804e8 <vTaskIncrementTick+0x114>)
   80442:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 804f8 <vTaskIncrementTick+0x124>
   80446:	e02f      	b.n	804a8 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80448:	4b28      	ldr	r3, [pc, #160]	; (804ec <vTaskIncrementTick+0x118>)
   8044a:	4798      	blx	r3
   8044c:	bf00      	nop
   8044e:	e7fd      	b.n	8044c <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80450:	4b20      	ldr	r3, [pc, #128]	; (804d4 <vTaskIncrementTick+0x100>)
   80452:	681b      	ldr	r3, [r3, #0]
   80454:	68db      	ldr	r3, [r3, #12]
   80456:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80458:	685a      	ldr	r2, [r3, #4]
   8045a:	4b21      	ldr	r3, [pc, #132]	; (804e0 <vTaskIncrementTick+0x10c>)
   8045c:	601a      	str	r2, [r3, #0]
   8045e:	e7db      	b.n	80418 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   80460:	f04f 32ff 	mov.w	r2, #4294967295
   80464:	4b1e      	ldr	r3, [pc, #120]	; (804e0 <vTaskIncrementTick+0x10c>)
   80466:	601a      	str	r2, [r3, #0]
   80468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8046c:	4a1c      	ldr	r2, [pc, #112]	; (804e0 <vTaskIncrementTick+0x10c>)
   8046e:	6013      	str	r3, [r2, #0]
   80470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80474:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80476:	683b      	ldr	r3, [r7, #0]
   80478:	4298      	cmp	r0, r3
   8047a:	bf88      	it	hi
   8047c:	6038      	strhi	r0, [r7, #0]
   8047e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80482:	4629      	mov	r1, r5
   80484:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80488:	4b19      	ldr	r3, [pc, #100]	; (804f0 <vTaskIncrementTick+0x11c>)
   8048a:	4798      	blx	r3
   8048c:	4b11      	ldr	r3, [pc, #68]	; (804d4 <vTaskIncrementTick+0x100>)
   8048e:	681b      	ldr	r3, [r3, #0]
   80490:	681b      	ldr	r3, [r3, #0]
   80492:	2b00      	cmp	r3, #0
   80494:	d0e4      	beq.n	80460 <vTaskIncrementTick+0x8c>
   80496:	4b0f      	ldr	r3, [pc, #60]	; (804d4 <vTaskIncrementTick+0x100>)
   80498:	681b      	ldr	r3, [r3, #0]
   8049a:	68db      	ldr	r3, [r3, #12]
   8049c:	68dc      	ldr	r4, [r3, #12]
   8049e:	6863      	ldr	r3, [r4, #4]
   804a0:	4a0b      	ldr	r2, [pc, #44]	; (804d0 <vTaskIncrementTick+0xfc>)
   804a2:	6812      	ldr	r2, [r2, #0]
   804a4:	4293      	cmp	r3, r2
   804a6:	d8e1      	bhi.n	8046c <vTaskIncrementTick+0x98>
   804a8:	1d25      	adds	r5, r4, #4
   804aa:	4628      	mov	r0, r5
   804ac:	47b0      	blx	r6
   804ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   804b0:	2b00      	cmp	r3, #0
   804b2:	d0df      	beq.n	80474 <vTaskIncrementTick+0xa0>
   804b4:	f104 0018 	add.w	r0, r4, #24
   804b8:	47b0      	blx	r6
   804ba:	e7db      	b.n	80474 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   804bc:	4a0d      	ldr	r2, [pc, #52]	; (804f4 <vTaskIncrementTick+0x120>)
   804be:	6813      	ldr	r3, [r2, #0]
   804c0:	3301      	adds	r3, #1
   804c2:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   804c4:	4770      	bx	lr
   804c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804ca:	bf00      	nop
   804cc:	20070b78 	.word	0x20070b78
   804d0:	20070b88 	.word	0x20070b88
   804d4:	20070b08 	.word	0x20070b08
   804d8:	20070b0c 	.word	0x20070b0c
   804dc:	20070b84 	.word	0x20070b84
   804e0:	2007012c 	.word	0x2007012c
   804e4:	0008030d 	.word	0x0008030d
   804e8:	20070b7c 	.word	0x20070b7c
   804ec:	00080355 	.word	0x00080355
   804f0:	000802f1 	.word	0x000802f1
   804f4:	20070b74 	.word	0x20070b74
   804f8:	20070b10 	.word	0x20070b10

000804fc <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   804fc:	4b21      	ldr	r3, [pc, #132]	; (80584 <vTaskSwitchContext+0x88>)
   804fe:	681b      	ldr	r3, [r3, #0]
   80500:	b9eb      	cbnz	r3, 8053e <vTaskSwitchContext+0x42>
{
   80502:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80504:	4b20      	ldr	r3, [pc, #128]	; (80588 <vTaskSwitchContext+0x8c>)
   80506:	681b      	ldr	r3, [r3, #0]
   80508:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8050c:	009b      	lsls	r3, r3, #2
   8050e:	4a1f      	ldr	r2, [pc, #124]	; (8058c <vTaskSwitchContext+0x90>)
   80510:	58d3      	ldr	r3, [r2, r3]
   80512:	b9c3      	cbnz	r3, 80546 <vTaskSwitchContext+0x4a>
   80514:	4b1c      	ldr	r3, [pc, #112]	; (80588 <vTaskSwitchContext+0x8c>)
   80516:	681b      	ldr	r3, [r3, #0]
   80518:	b16b      	cbz	r3, 80536 <vTaskSwitchContext+0x3a>
   8051a:	4a1b      	ldr	r2, [pc, #108]	; (80588 <vTaskSwitchContext+0x8c>)
   8051c:	491b      	ldr	r1, [pc, #108]	; (8058c <vTaskSwitchContext+0x90>)
   8051e:	6813      	ldr	r3, [r2, #0]
   80520:	3b01      	subs	r3, #1
   80522:	6013      	str	r3, [r2, #0]
   80524:	6813      	ldr	r3, [r2, #0]
   80526:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8052a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8052e:	b953      	cbnz	r3, 80546 <vTaskSwitchContext+0x4a>
   80530:	6813      	ldr	r3, [r2, #0]
   80532:	2b00      	cmp	r3, #0
   80534:	d1f3      	bne.n	8051e <vTaskSwitchContext+0x22>
   80536:	4b16      	ldr	r3, [pc, #88]	; (80590 <vTaskSwitchContext+0x94>)
   80538:	4798      	blx	r3
   8053a:	bf00      	nop
   8053c:	e7fd      	b.n	8053a <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   8053e:	2201      	movs	r2, #1
   80540:	4b14      	ldr	r3, [pc, #80]	; (80594 <vTaskSwitchContext+0x98>)
   80542:	601a      	str	r2, [r3, #0]
   80544:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   80546:	4b10      	ldr	r3, [pc, #64]	; (80588 <vTaskSwitchContext+0x8c>)
   80548:	681b      	ldr	r3, [r3, #0]
   8054a:	4a10      	ldr	r2, [pc, #64]	; (8058c <vTaskSwitchContext+0x90>)
   8054c:	0099      	lsls	r1, r3, #2
   8054e:	18c8      	adds	r0, r1, r3
   80550:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   80554:	6844      	ldr	r4, [r0, #4]
   80556:	6864      	ldr	r4, [r4, #4]
   80558:	6044      	str	r4, [r0, #4]
   8055a:	4419      	add	r1, r3
   8055c:	4602      	mov	r2, r0
   8055e:	3208      	adds	r2, #8
   80560:	4294      	cmp	r4, r2
   80562:	d009      	beq.n	80578 <vTaskSwitchContext+0x7c>
   80564:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80568:	4a08      	ldr	r2, [pc, #32]	; (8058c <vTaskSwitchContext+0x90>)
   8056a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8056e:	685b      	ldr	r3, [r3, #4]
   80570:	68da      	ldr	r2, [r3, #12]
   80572:	4b09      	ldr	r3, [pc, #36]	; (80598 <vTaskSwitchContext+0x9c>)
   80574:	601a      	str	r2, [r3, #0]
   80576:	bd10      	pop	{r4, pc}
   80578:	6860      	ldr	r0, [r4, #4]
   8057a:	4a04      	ldr	r2, [pc, #16]	; (8058c <vTaskSwitchContext+0x90>)
   8057c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   80580:	6050      	str	r0, [r2, #4]
   80582:	e7ef      	b.n	80564 <vTaskSwitchContext+0x68>
   80584:	20070b78 	.word	0x20070b78
   80588:	20070b7c 	.word	0x20070b7c
   8058c:	20070b10 	.word	0x20070b10
   80590:	00080355 	.word	0x00080355
   80594:	20070b80 	.word	0x20070b80
   80598:	20070b04 	.word	0x20070b04

0008059c <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   8059c:	b500      	push	{lr}
   8059e:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   805a0:	2201      	movs	r2, #1
   805a2:	f10d 0107 	add.w	r1, sp, #7
   805a6:	4810      	ldr	r0, [pc, #64]	; (805e8 <USART0_Handler+0x4c>)
   805a8:	4b10      	ldr	r3, [pc, #64]	; (805ec <USART0_Handler+0x50>)
   805aa:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   805ac:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   805ae:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   805b2:	2200      	movs	r2, #0
   805b4:	4b0e      	ldr	r3, [pc, #56]	; (805f0 <USART0_Handler+0x54>)
   805b6:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   805b8:	4b0e      	ldr	r3, [pc, #56]	; (805f4 <USART0_Handler+0x58>)
   805ba:	781b      	ldrb	r3, [r3, #0]
   805bc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   805c0:	4a0d      	ldr	r2, [pc, #52]	; (805f8 <USART0_Handler+0x5c>)
   805c2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   805c4:	2b9b      	cmp	r3, #155	; 0x9b
   805c6:	d00b      	beq.n	805e0 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   805c8:	3301      	adds	r3, #1
   805ca:	4a0a      	ldr	r2, [pc, #40]	; (805f4 <USART0_Handler+0x58>)
   805cc:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   805ce:	2201      	movs	r2, #1
   805d0:	4b07      	ldr	r3, [pc, #28]	; (805f0 <USART0_Handler+0x54>)
   805d2:	701a      	strb	r2, [r3, #0]
   805d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   805d8:	b662      	cpsie	i
}
   805da:	b003      	add	sp, #12
   805dc:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   805e0:	2200      	movs	r2, #0
   805e2:	4b04      	ldr	r3, [pc, #16]	; (805f4 <USART0_Handler+0x58>)
   805e4:	701a      	strb	r2, [r3, #0]
   805e6:	e7f2      	b.n	805ce <USART0_Handler+0x32>
   805e8:	40098000 	.word	0x40098000
   805ec:	00080829 	.word	0x00080829
   805f0:	20070130 	.word	0x20070130
   805f4:	20070c28 	.word	0x20070c28
   805f8:	20070b8c 	.word	0x20070b8c

000805fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   805fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   805fe:	b083      	sub	sp, #12
   80600:	4604      	mov	r4, r0
   80602:	460d      	mov	r5, r1
	uint32_t val = 0;
   80604:	2300      	movs	r3, #0
   80606:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80608:	4b20      	ldr	r3, [pc, #128]	; (8068c <usart_serial_getchar+0x90>)
   8060a:	4298      	cmp	r0, r3
   8060c:	d00d      	beq.n	8062a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8060e:	4b20      	ldr	r3, [pc, #128]	; (80690 <usart_serial_getchar+0x94>)
   80610:	4298      	cmp	r0, r3
   80612:	d012      	beq.n	8063a <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80614:	4b1f      	ldr	r3, [pc, #124]	; (80694 <usart_serial_getchar+0x98>)
   80616:	4298      	cmp	r0, r3
   80618:	d019      	beq.n	8064e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8061a:	4b1f      	ldr	r3, [pc, #124]	; (80698 <usart_serial_getchar+0x9c>)
   8061c:	429c      	cmp	r4, r3
   8061e:	d020      	beq.n	80662 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80620:	4b1e      	ldr	r3, [pc, #120]	; (8069c <usart_serial_getchar+0xa0>)
   80622:	429c      	cmp	r4, r3
   80624:	d027      	beq.n	80676 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80626:	b003      	add	sp, #12
   80628:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8062a:	461f      	mov	r7, r3
   8062c:	4e1c      	ldr	r6, [pc, #112]	; (806a0 <usart_serial_getchar+0xa4>)
   8062e:	4629      	mov	r1, r5
   80630:	4638      	mov	r0, r7
   80632:	47b0      	blx	r6
   80634:	2800      	cmp	r0, #0
   80636:	d1fa      	bne.n	8062e <usart_serial_getchar+0x32>
   80638:	e7ef      	b.n	8061a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8063a:	461f      	mov	r7, r3
   8063c:	4e19      	ldr	r6, [pc, #100]	; (806a4 <usart_serial_getchar+0xa8>)
   8063e:	a901      	add	r1, sp, #4
   80640:	4638      	mov	r0, r7
   80642:	47b0      	blx	r6
   80644:	2800      	cmp	r0, #0
   80646:	d1fa      	bne.n	8063e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80648:	9b01      	ldr	r3, [sp, #4]
   8064a:	702b      	strb	r3, [r5, #0]
   8064c:	e7e8      	b.n	80620 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8064e:	461e      	mov	r6, r3
   80650:	4c14      	ldr	r4, [pc, #80]	; (806a4 <usart_serial_getchar+0xa8>)
   80652:	a901      	add	r1, sp, #4
   80654:	4630      	mov	r0, r6
   80656:	47a0      	blx	r4
   80658:	2800      	cmp	r0, #0
   8065a:	d1fa      	bne.n	80652 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   8065c:	9b01      	ldr	r3, [sp, #4]
   8065e:	702b      	strb	r3, [r5, #0]
   80660:	e7e1      	b.n	80626 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80662:	461e      	mov	r6, r3
   80664:	4c0f      	ldr	r4, [pc, #60]	; (806a4 <usart_serial_getchar+0xa8>)
   80666:	a901      	add	r1, sp, #4
   80668:	4630      	mov	r0, r6
   8066a:	47a0      	blx	r4
   8066c:	2800      	cmp	r0, #0
   8066e:	d1fa      	bne.n	80666 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80670:	9b01      	ldr	r3, [sp, #4]
   80672:	702b      	strb	r3, [r5, #0]
   80674:	e7d7      	b.n	80626 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80676:	461e      	mov	r6, r3
   80678:	4c0a      	ldr	r4, [pc, #40]	; (806a4 <usart_serial_getchar+0xa8>)
   8067a:	a901      	add	r1, sp, #4
   8067c:	4630      	mov	r0, r6
   8067e:	47a0      	blx	r4
   80680:	2800      	cmp	r0, #0
   80682:	d1fa      	bne.n	8067a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80684:	9b01      	ldr	r3, [sp, #4]
   80686:	702b      	strb	r3, [r5, #0]
}
   80688:	e7cd      	b.n	80626 <usart_serial_getchar+0x2a>
   8068a:	bf00      	nop
   8068c:	400e0800 	.word	0x400e0800
   80690:	40098000 	.word	0x40098000
   80694:	4009c000 	.word	0x4009c000
   80698:	400a0000 	.word	0x400a0000
   8069c:	400a4000 	.word	0x400a4000
   806a0:	00080937 	.word	0x00080937
   806a4:	000802d9 	.word	0x000802d9

000806a8 <usart_serial_putchar>:
{
   806a8:	b570      	push	{r4, r5, r6, lr}
   806aa:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   806ac:	4b1e      	ldr	r3, [pc, #120]	; (80728 <usart_serial_putchar+0x80>)
   806ae:	4298      	cmp	r0, r3
   806b0:	d00d      	beq.n	806ce <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   806b2:	4b1e      	ldr	r3, [pc, #120]	; (8072c <usart_serial_putchar+0x84>)
   806b4:	4298      	cmp	r0, r3
   806b6:	d013      	beq.n	806e0 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   806b8:	4b1d      	ldr	r3, [pc, #116]	; (80730 <usart_serial_putchar+0x88>)
   806ba:	4298      	cmp	r0, r3
   806bc:	d019      	beq.n	806f2 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   806be:	4b1d      	ldr	r3, [pc, #116]	; (80734 <usart_serial_putchar+0x8c>)
   806c0:	4298      	cmp	r0, r3
   806c2:	d01f      	beq.n	80704 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   806c4:	4b1c      	ldr	r3, [pc, #112]	; (80738 <usart_serial_putchar+0x90>)
   806c6:	4298      	cmp	r0, r3
   806c8:	d025      	beq.n	80716 <usart_serial_putchar+0x6e>
	return 0;
   806ca:	2000      	movs	r0, #0
}
   806cc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   806ce:	461e      	mov	r6, r3
   806d0:	4d1a      	ldr	r5, [pc, #104]	; (8073c <usart_serial_putchar+0x94>)
   806d2:	4621      	mov	r1, r4
   806d4:	4630      	mov	r0, r6
   806d6:	47a8      	blx	r5
   806d8:	2800      	cmp	r0, #0
   806da:	d1fa      	bne.n	806d2 <usart_serial_putchar+0x2a>
		return 1;
   806dc:	2001      	movs	r0, #1
   806de:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   806e0:	461e      	mov	r6, r3
   806e2:	4d17      	ldr	r5, [pc, #92]	; (80740 <usart_serial_putchar+0x98>)
   806e4:	4621      	mov	r1, r4
   806e6:	4630      	mov	r0, r6
   806e8:	47a8      	blx	r5
   806ea:	2800      	cmp	r0, #0
   806ec:	d1fa      	bne.n	806e4 <usart_serial_putchar+0x3c>
		return 1;
   806ee:	2001      	movs	r0, #1
   806f0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   806f2:	461e      	mov	r6, r3
   806f4:	4d12      	ldr	r5, [pc, #72]	; (80740 <usart_serial_putchar+0x98>)
   806f6:	4621      	mov	r1, r4
   806f8:	4630      	mov	r0, r6
   806fa:	47a8      	blx	r5
   806fc:	2800      	cmp	r0, #0
   806fe:	d1fa      	bne.n	806f6 <usart_serial_putchar+0x4e>
		return 1;
   80700:	2001      	movs	r0, #1
   80702:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80704:	461e      	mov	r6, r3
   80706:	4d0e      	ldr	r5, [pc, #56]	; (80740 <usart_serial_putchar+0x98>)
   80708:	4621      	mov	r1, r4
   8070a:	4630      	mov	r0, r6
   8070c:	47a8      	blx	r5
   8070e:	2800      	cmp	r0, #0
   80710:	d1fa      	bne.n	80708 <usart_serial_putchar+0x60>
		return 1;
   80712:	2001      	movs	r0, #1
   80714:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80716:	461e      	mov	r6, r3
   80718:	4d09      	ldr	r5, [pc, #36]	; (80740 <usart_serial_putchar+0x98>)
   8071a:	4621      	mov	r1, r4
   8071c:	4630      	mov	r0, r6
   8071e:	47a8      	blx	r5
   80720:	2800      	cmp	r0, #0
   80722:	d1fa      	bne.n	8071a <usart_serial_putchar+0x72>
		return 1;
   80724:	2001      	movs	r0, #1
   80726:	bd70      	pop	{r4, r5, r6, pc}
   80728:	400e0800 	.word	0x400e0800
   8072c:	40098000 	.word	0x40098000
   80730:	4009c000 	.word	0x4009c000
   80734:	400a0000 	.word	0x400a0000
   80738:	400a4000 	.word	0x400a4000
   8073c:	00080927 	.word	0x00080927
   80740:	000802c5 	.word	0x000802c5

00080744 <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   80744:	b530      	push	{r4, r5, lr}
   80746:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80748:	2008      	movs	r0, #8
   8074a:	4d15      	ldr	r5, [pc, #84]	; (807a0 <configureConsole+0x5c>)
   8074c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8074e:	4c15      	ldr	r4, [pc, #84]	; (807a4 <configureConsole+0x60>)
   80750:	4b15      	ldr	r3, [pc, #84]	; (807a8 <configureConsole+0x64>)
   80752:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80754:	4a15      	ldr	r2, [pc, #84]	; (807ac <configureConsole+0x68>)
   80756:	4b16      	ldr	r3, [pc, #88]	; (807b0 <configureConsole+0x6c>)
   80758:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8075a:	4a16      	ldr	r2, [pc, #88]	; (807b4 <configureConsole+0x70>)
   8075c:	4b16      	ldr	r3, [pc, #88]	; (807b8 <configureConsole+0x74>)
   8075e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80760:	4b16      	ldr	r3, [pc, #88]	; (807bc <configureConsole+0x78>)
   80762:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80764:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80768:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8076a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8076e:	9303      	str	r3, [sp, #12]
   80770:	2008      	movs	r0, #8
   80772:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80774:	a901      	add	r1, sp, #4
   80776:	4620      	mov	r0, r4
   80778:	4b11      	ldr	r3, [pc, #68]	; (807c0 <configureConsole+0x7c>)
   8077a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8077c:	4d11      	ldr	r5, [pc, #68]	; (807c4 <configureConsole+0x80>)
   8077e:	682b      	ldr	r3, [r5, #0]
   80780:	2100      	movs	r1, #0
   80782:	6898      	ldr	r0, [r3, #8]
   80784:	4c10      	ldr	r4, [pc, #64]	; (807c8 <configureConsole+0x84>)
   80786:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80788:	682b      	ldr	r3, [r5, #0]
   8078a:	2100      	movs	r1, #0
   8078c:	6858      	ldr	r0, [r3, #4]
   8078e:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80790:	480e      	ldr	r0, [pc, #56]	; (807cc <configureConsole+0x88>)
   80792:	4c0f      	ldr	r4, [pc, #60]	; (807d0 <configureConsole+0x8c>)
   80794:	47a0      	blx	r4
	printf("=============\n");
   80796:	480f      	ldr	r0, [pc, #60]	; (807d4 <configureConsole+0x90>)
   80798:	47a0      	blx	r4
   8079a:	b005      	add	sp, #20
   8079c:	bd30      	pop	{r4, r5, pc}
   8079e:	bf00      	nop
   807a0:	00080de1 	.word	0x00080de1
   807a4:	400e0800 	.word	0x400e0800
   807a8:	20070ce0 	.word	0x20070ce0
   807ac:	000806a9 	.word	0x000806a9
   807b0:	20070cdc 	.word	0x20070cdc
   807b4:	000805fd 	.word	0x000805fd
   807b8:	20070cd8 	.word	0x20070cd8
   807bc:	0501bd00 	.word	0x0501bd00
   807c0:	000808f1 	.word	0x000808f1
   807c4:	20070138 	.word	0x20070138
   807c8:	000812b5 	.word	0x000812b5
   807cc:	00083f34 	.word	0x00083f34
   807d0:	00081105 	.word	0x00081105
   807d4:	00083f44 	.word	0x00083f44

000807d8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   807d8:	3801      	subs	r0, #1
   807da:	2802      	cmp	r0, #2
   807dc:	d815      	bhi.n	8080a <_write+0x32>
{
   807de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807e2:	460e      	mov	r6, r1
   807e4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   807e6:	b19a      	cbz	r2, 80810 <_write+0x38>
   807e8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   807ea:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80824 <_write+0x4c>
   807ee:	4f0c      	ldr	r7, [pc, #48]	; (80820 <_write+0x48>)
   807f0:	f8d8 0000 	ldr.w	r0, [r8]
   807f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   807f8:	683b      	ldr	r3, [r7, #0]
   807fa:	4798      	blx	r3
   807fc:	2800      	cmp	r0, #0
   807fe:	db0a      	blt.n	80816 <_write+0x3e>
   80800:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   80802:	3c01      	subs	r4, #1
   80804:	d1f4      	bne.n	807f0 <_write+0x18>
   80806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8080a:	f04f 30ff 	mov.w	r0, #4294967295
   8080e:	4770      	bx	lr
	for (; len != 0; --len) {
   80810:	4610      	mov	r0, r2
   80812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80816:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8081a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8081e:	bf00      	nop
   80820:	20070cdc 	.word	0x20070cdc
   80824:	20070ce0 	.word	0x20070ce0

00080828 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80828:	2a00      	cmp	r2, #0
   8082a:	d051      	beq.n	808d0 <usart_serial_read_packet+0xa8>
{
   8082c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80830:	b083      	sub	sp, #12
   80832:	4605      	mov	r5, r0
   80834:	460c      	mov	r4, r1
   80836:	4692      	mov	sl, r2
   80838:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   8083a:	4f26      	ldr	r7, [pc, #152]	; (808d4 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   8083c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 808e8 <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   80840:	4e25      	ldr	r6, [pc, #148]	; (808d8 <usart_serial_read_packet+0xb0>)
   80842:	e01d      	b.n	80880 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   80844:	4621      	mov	r1, r4
   80846:	4638      	mov	r0, r7
   80848:	47c8      	blx	r9
   8084a:	2800      	cmp	r0, #0
   8084c:	d1fa      	bne.n	80844 <usart_serial_read_packet+0x1c>
   8084e:	e021      	b.n	80894 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80850:	469b      	mov	fp, r3
   80852:	f8df 8098 	ldr.w	r8, [pc, #152]	; 808ec <usart_serial_read_packet+0xc4>
   80856:	a901      	add	r1, sp, #4
   80858:	4658      	mov	r0, fp
   8085a:	47c0      	blx	r8
   8085c:	2800      	cmp	r0, #0
   8085e:	d1fa      	bne.n	80856 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   80860:	9b01      	ldr	r3, [sp, #4]
   80862:	7023      	strb	r3, [r4, #0]
   80864:	e019      	b.n	8089a <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   80866:	469b      	mov	fp, r3
   80868:	f8df 8080 	ldr.w	r8, [pc, #128]	; 808ec <usart_serial_read_packet+0xc4>
   8086c:	a901      	add	r1, sp, #4
   8086e:	4658      	mov	r0, fp
   80870:	47c0      	blx	r8
   80872:	2800      	cmp	r0, #0
   80874:	d1fa      	bne.n	8086c <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   80876:	9b01      	ldr	r3, [sp, #4]
   80878:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   8087a:	3401      	adds	r4, #1
	while (len) {
   8087c:	4554      	cmp	r4, sl
   8087e:	d023      	beq.n	808c8 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   80880:	2300      	movs	r3, #0
   80882:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80884:	42bd      	cmp	r5, r7
   80886:	d0dd      	beq.n	80844 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   80888:	4b14      	ldr	r3, [pc, #80]	; (808dc <usart_serial_read_packet+0xb4>)
   8088a:	429d      	cmp	r5, r3
   8088c:	d0e0      	beq.n	80850 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   8088e:	4b14      	ldr	r3, [pc, #80]	; (808e0 <usart_serial_read_packet+0xb8>)
   80890:	429d      	cmp	r5, r3
   80892:	d0e8      	beq.n	80866 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   80894:	4b13      	ldr	r3, [pc, #76]	; (808e4 <usart_serial_read_packet+0xbc>)
   80896:	429d      	cmp	r5, r3
   80898:	d00b      	beq.n	808b2 <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   8089a:	42b5      	cmp	r5, r6
   8089c:	d1ed      	bne.n	8087a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8089e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 808ec <usart_serial_read_packet+0xc4>
   808a2:	a901      	add	r1, sp, #4
   808a4:	4630      	mov	r0, r6
   808a6:	47c0      	blx	r8
   808a8:	2800      	cmp	r0, #0
   808aa:	d1fa      	bne.n	808a2 <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   808ac:	9b01      	ldr	r3, [sp, #4]
   808ae:	7023      	strb	r3, [r4, #0]
   808b0:	e7e3      	b.n	8087a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   808b2:	469b      	mov	fp, r3
   808b4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 808ec <usart_serial_read_packet+0xc4>
   808b8:	a901      	add	r1, sp, #4
   808ba:	4658      	mov	r0, fp
   808bc:	47c0      	blx	r8
   808be:	2800      	cmp	r0, #0
   808c0:	d1fa      	bne.n	808b8 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   808c2:	9b01      	ldr	r3, [sp, #4]
   808c4:	7023      	strb	r3, [r4, #0]
   808c6:	e7d8      	b.n	8087a <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   808c8:	2000      	movs	r0, #0
   808ca:	b003      	add	sp, #12
   808cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   808d0:	2000      	movs	r0, #0
   808d2:	4770      	bx	lr
   808d4:	400e0800 	.word	0x400e0800
   808d8:	400a4000 	.word	0x400a4000
   808dc:	40098000 	.word	0x40098000
   808e0:	4009c000 	.word	0x4009c000
   808e4:	400a0000 	.word	0x400a0000
   808e8:	00080937 	.word	0x00080937
   808ec:	000802d9 	.word	0x000802d9

000808f0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   808f0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   808f2:	23ac      	movs	r3, #172	; 0xac
   808f4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   808f6:	680b      	ldr	r3, [r1, #0]
   808f8:	684a      	ldr	r2, [r1, #4]
   808fa:	fbb3 f3f2 	udiv	r3, r3, r2
   808fe:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80900:	1e5c      	subs	r4, r3, #1
   80902:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80906:	4294      	cmp	r4, r2
   80908:	d80b      	bhi.n	80922 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8090a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8090c:	688b      	ldr	r3, [r1, #8]
   8090e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80910:	f240 2302 	movw	r3, #514	; 0x202
   80914:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80918:	2350      	movs	r3, #80	; 0x50
   8091a:	6003      	str	r3, [r0, #0]

	return 0;
   8091c:	2000      	movs	r0, #0
}
   8091e:	bc10      	pop	{r4}
   80920:	4770      	bx	lr
		return 1;
   80922:	2001      	movs	r0, #1
   80924:	e7fb      	b.n	8091e <uart_init+0x2e>

00080926 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80926:	6943      	ldr	r3, [r0, #20]
   80928:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8092c:	bf1a      	itte	ne
   8092e:	61c1      	strne	r1, [r0, #28]
	return 0;
   80930:	2000      	movne	r0, #0
		return 1;
   80932:	2001      	moveq	r0, #1
}
   80934:	4770      	bx	lr

00080936 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80936:	6943      	ldr	r3, [r0, #20]
   80938:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8093c:	bf1d      	ittte	ne
   8093e:	6983      	ldrne	r3, [r0, #24]
   80940:	700b      	strbne	r3, [r1, #0]
	return 0;
   80942:	2000      	movne	r0, #0
		return 1;
   80944:	2001      	moveq	r0, #1
}
   80946:	4770      	bx	lr

00080948 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80948:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8094a:	480e      	ldr	r0, [pc, #56]	; (80984 <sysclk_init+0x3c>)
   8094c:	4b0e      	ldr	r3, [pc, #56]	; (80988 <sysclk_init+0x40>)
   8094e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80950:	213e      	movs	r1, #62	; 0x3e
   80952:	2000      	movs	r0, #0
   80954:	4b0d      	ldr	r3, [pc, #52]	; (8098c <sysclk_init+0x44>)
   80956:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80958:	4c0d      	ldr	r4, [pc, #52]	; (80990 <sysclk_init+0x48>)
   8095a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8095c:	2800      	cmp	r0, #0
   8095e:	d0fc      	beq.n	8095a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80960:	4b0c      	ldr	r3, [pc, #48]	; (80994 <sysclk_init+0x4c>)
   80962:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80964:	4a0c      	ldr	r2, [pc, #48]	; (80998 <sysclk_init+0x50>)
   80966:	4b0d      	ldr	r3, [pc, #52]	; (8099c <sysclk_init+0x54>)
   80968:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8096a:	4c0d      	ldr	r4, [pc, #52]	; (809a0 <sysclk_init+0x58>)
   8096c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8096e:	2800      	cmp	r0, #0
   80970:	d0fc      	beq.n	8096c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80972:	2010      	movs	r0, #16
   80974:	4b0b      	ldr	r3, [pc, #44]	; (809a4 <sysclk_init+0x5c>)
   80976:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80978:	4b0b      	ldr	r3, [pc, #44]	; (809a8 <sysclk_init+0x60>)
   8097a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8097c:	4801      	ldr	r0, [pc, #4]	; (80984 <sysclk_init+0x3c>)
   8097e:	4b02      	ldr	r3, [pc, #8]	; (80988 <sysclk_init+0x40>)
   80980:	4798      	blx	r3
   80982:	bd10      	pop	{r4, pc}
   80984:	0501bd00 	.word	0x0501bd00
   80988:	200700a5 	.word	0x200700a5
   8098c:	00080d5d 	.word	0x00080d5d
   80990:	00080db1 	.word	0x00080db1
   80994:	00080dc1 	.word	0x00080dc1
   80998:	200d3f01 	.word	0x200d3f01
   8099c:	400e0600 	.word	0x400e0600
   809a0:	00080dd1 	.word	0x00080dd1
   809a4:	00080cf9 	.word	0x00080cf9
   809a8:	00080ed1 	.word	0x00080ed1

000809ac <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   809ac:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   809ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   809b2:	4b1e      	ldr	r3, [pc, #120]	; (80a2c <board_init+0x80>)
   809b4:	605a      	str	r2, [r3, #4]
   809b6:	200b      	movs	r0, #11
   809b8:	4c1d      	ldr	r4, [pc, #116]	; (80a30 <board_init+0x84>)
   809ba:	47a0      	blx	r4
   809bc:	200c      	movs	r0, #12
   809be:	47a0      	blx	r4
   809c0:	200d      	movs	r0, #13
   809c2:	47a0      	blx	r4
   809c4:	200e      	movs	r0, #14
   809c6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   809c8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809cc:	203b      	movs	r0, #59	; 0x3b
   809ce:	4c19      	ldr	r4, [pc, #100]	; (80a34 <board_init+0x88>)
   809d0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   809d2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809d6:	2055      	movs	r0, #85	; 0x55
   809d8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   809da:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809de:	2056      	movs	r0, #86	; 0x56
   809e0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   809e2:	4915      	ldr	r1, [pc, #84]	; (80a38 <board_init+0x8c>)
   809e4:	2068      	movs	r0, #104	; 0x68
   809e6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   809e8:	4914      	ldr	r1, [pc, #80]	; (80a3c <board_init+0x90>)
   809ea:	205c      	movs	r0, #92	; 0x5c
   809ec:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   809ee:	4a14      	ldr	r2, [pc, #80]	; (80a40 <board_init+0x94>)
   809f0:	f44f 7140 	mov.w	r1, #768	; 0x300
   809f4:	4813      	ldr	r0, [pc, #76]	; (80a44 <board_init+0x98>)
   809f6:	4b14      	ldr	r3, [pc, #80]	; (80a48 <board_init+0x9c>)
   809f8:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   809fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809fe:	2011      	movs	r0, #17
   80a00:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   80a02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a06:	2012      	movs	r0, #18
   80a08:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   80a0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a0e:	202c      	movs	r0, #44	; 0x2c
   80a10:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   80a12:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a16:	202d      	movs	r0, #45	; 0x2d
   80a18:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80a1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a1e:	202b      	movs	r0, #43	; 0x2b
   80a20:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80a22:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a26:	202a      	movs	r0, #42	; 0x2a
   80a28:	47a0      	blx	r4
   80a2a:	bd10      	pop	{r4, pc}
   80a2c:	400e1a50 	.word	0x400e1a50
   80a30:	00080de1 	.word	0x00080de1
   80a34:	00080aed 	.word	0x00080aed
   80a38:	28000079 	.word	0x28000079
   80a3c:	28000001 	.word	0x28000001
   80a40:	08000001 	.word	0x08000001
   80a44:	400e0e00 	.word	0x400e0e00
   80a48:	00080bbd 	.word	0x00080bbd

00080a4c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80a4c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80a4e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80a52:	d016      	beq.n	80a82 <pio_set_peripheral+0x36>
   80a54:	d80b      	bhi.n	80a6e <pio_set_peripheral+0x22>
   80a56:	b149      	cbz	r1, 80a6c <pio_set_peripheral+0x20>
   80a58:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80a5c:	d105      	bne.n	80a6a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80a5e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80a60:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80a62:	400b      	ands	r3, r1
   80a64:	ea23 0302 	bic.w	r3, r3, r2
   80a68:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80a6a:	6042      	str	r2, [r0, #4]
   80a6c:	4770      	bx	lr
	switch (ul_type) {
   80a6e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80a72:	d0fb      	beq.n	80a6c <pio_set_peripheral+0x20>
   80a74:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80a78:	d0f8      	beq.n	80a6c <pio_set_peripheral+0x20>
   80a7a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80a7e:	d1f4      	bne.n	80a6a <pio_set_peripheral+0x1e>
   80a80:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80a82:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80a84:	4313      	orrs	r3, r2
   80a86:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80a88:	e7ef      	b.n	80a6a <pio_set_peripheral+0x1e>

00080a8a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a8a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a8c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80a90:	bf14      	ite	ne
   80a92:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a94:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80a96:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80a9a:	bf14      	ite	ne
   80a9c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80a9e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80aa0:	f012 0f02 	tst.w	r2, #2
   80aa4:	d107      	bne.n	80ab6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80aa6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80aaa:	bf18      	it	ne
   80aac:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80ab0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80ab2:	6001      	str	r1, [r0, #0]
   80ab4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80ab6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80aba:	e7f9      	b.n	80ab0 <pio_set_input+0x26>

00080abc <pio_set_output>:
{
   80abc:	b410      	push	{r4}
   80abe:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80ac0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80ac2:	b944      	cbnz	r4, 80ad6 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80ac4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80ac6:	b143      	cbz	r3, 80ada <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80ac8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80aca:	b942      	cbnz	r2, 80ade <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80acc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80ace:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80ad0:	6001      	str	r1, [r0, #0]
}
   80ad2:	bc10      	pop	{r4}
   80ad4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80ad6:	6641      	str	r1, [r0, #100]	; 0x64
   80ad8:	e7f5      	b.n	80ac6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80ada:	6541      	str	r1, [r0, #84]	; 0x54
   80adc:	e7f5      	b.n	80aca <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80ade:	6301      	str	r1, [r0, #48]	; 0x30
   80ae0:	e7f5      	b.n	80ace <pio_set_output+0x12>

00080ae2 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80ae2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80ae4:	4770      	bx	lr

00080ae6 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80ae6:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80ae8:	4770      	bx	lr
	...

00080aec <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80aec:	b570      	push	{r4, r5, r6, lr}
   80aee:	b082      	sub	sp, #8
   80af0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80af2:	0943      	lsrs	r3, r0, #5
   80af4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80af8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80afc:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80afe:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80b02:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80b06:	d031      	beq.n	80b6c <pio_configure_pin+0x80>
   80b08:	d816      	bhi.n	80b38 <pio_configure_pin+0x4c>
   80b0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80b0e:	d01b      	beq.n	80b48 <pio_configure_pin+0x5c>
   80b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80b14:	d116      	bne.n	80b44 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80b16:	f000 001f 	and.w	r0, r0, #31
   80b1a:	2601      	movs	r6, #1
   80b1c:	4086      	lsls	r6, r0
   80b1e:	4632      	mov	r2, r6
   80b20:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b24:	4620      	mov	r0, r4
   80b26:	4b22      	ldr	r3, [pc, #136]	; (80bb0 <pio_configure_pin+0xc4>)
   80b28:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b2a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b2e:	bf14      	ite	ne
   80b30:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b32:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80b34:	2001      	movs	r0, #1
   80b36:	e017      	b.n	80b68 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80b38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80b3c:	d021      	beq.n	80b82 <pio_configure_pin+0x96>
   80b3e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80b42:	d01e      	beq.n	80b82 <pio_configure_pin+0x96>
		return 0;
   80b44:	2000      	movs	r0, #0
   80b46:	e00f      	b.n	80b68 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80b48:	f000 001f 	and.w	r0, r0, #31
   80b4c:	2601      	movs	r6, #1
   80b4e:	4086      	lsls	r6, r0
   80b50:	4632      	mov	r2, r6
   80b52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b56:	4620      	mov	r0, r4
   80b58:	4b15      	ldr	r3, [pc, #84]	; (80bb0 <pio_configure_pin+0xc4>)
   80b5a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b5c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b60:	bf14      	ite	ne
   80b62:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b64:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80b66:	2001      	movs	r0, #1
}
   80b68:	b002      	add	sp, #8
   80b6a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80b6c:	f000 011f 	and.w	r1, r0, #31
   80b70:	2601      	movs	r6, #1
   80b72:	462a      	mov	r2, r5
   80b74:	fa06 f101 	lsl.w	r1, r6, r1
   80b78:	4620      	mov	r0, r4
   80b7a:	4b0e      	ldr	r3, [pc, #56]	; (80bb4 <pio_configure_pin+0xc8>)
   80b7c:	4798      	blx	r3
	return 1;
   80b7e:	4630      	mov	r0, r6
		break;
   80b80:	e7f2      	b.n	80b68 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b82:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b86:	f000 011f 	and.w	r1, r0, #31
   80b8a:	2601      	movs	r6, #1
   80b8c:	ea05 0306 	and.w	r3, r5, r6
   80b90:	9300      	str	r3, [sp, #0]
   80b92:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b96:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b9a:	bf14      	ite	ne
   80b9c:	2200      	movne	r2, #0
   80b9e:	2201      	moveq	r2, #1
   80ba0:	fa06 f101 	lsl.w	r1, r6, r1
   80ba4:	4620      	mov	r0, r4
   80ba6:	4c04      	ldr	r4, [pc, #16]	; (80bb8 <pio_configure_pin+0xcc>)
   80ba8:	47a0      	blx	r4
	return 1;
   80baa:	4630      	mov	r0, r6
		break;
   80bac:	e7dc      	b.n	80b68 <pio_configure_pin+0x7c>
   80bae:	bf00      	nop
   80bb0:	00080a4d 	.word	0x00080a4d
   80bb4:	00080a8b 	.word	0x00080a8b
   80bb8:	00080abd 	.word	0x00080abd

00080bbc <pio_configure_pin_group>:
{
   80bbc:	b570      	push	{r4, r5, r6, lr}
   80bbe:	b082      	sub	sp, #8
   80bc0:	4605      	mov	r5, r0
   80bc2:	460e      	mov	r6, r1
   80bc4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80bc6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80bca:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80bce:	d027      	beq.n	80c20 <pio_configure_pin_group+0x64>
   80bd0:	d811      	bhi.n	80bf6 <pio_configure_pin_group+0x3a>
   80bd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80bd6:	d016      	beq.n	80c06 <pio_configure_pin_group+0x4a>
   80bd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80bdc:	d111      	bne.n	80c02 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80bde:	460a      	mov	r2, r1
   80be0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80be4:	4b19      	ldr	r3, [pc, #100]	; (80c4c <pio_configure_pin_group+0x90>)
   80be6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80be8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80bec:	bf14      	ite	ne
   80bee:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80bf0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80bf2:	2001      	movs	r0, #1
   80bf4:	e012      	b.n	80c1c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80bf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80bfa:	d015      	beq.n	80c28 <pio_configure_pin_group+0x6c>
   80bfc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80c00:	d012      	beq.n	80c28 <pio_configure_pin_group+0x6c>
		return 0;
   80c02:	2000      	movs	r0, #0
   80c04:	e00a      	b.n	80c1c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80c06:	460a      	mov	r2, r1
   80c08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c0c:	4b0f      	ldr	r3, [pc, #60]	; (80c4c <pio_configure_pin_group+0x90>)
   80c0e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80c10:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80c14:	bf14      	ite	ne
   80c16:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80c18:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80c1a:	2001      	movs	r0, #1
}
   80c1c:	b002      	add	sp, #8
   80c1e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80c20:	4b0b      	ldr	r3, [pc, #44]	; (80c50 <pio_configure_pin_group+0x94>)
   80c22:	4798      	blx	r3
	return 1;
   80c24:	2001      	movs	r0, #1
		break;
   80c26:	e7f9      	b.n	80c1c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80c28:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80c2c:	f004 0301 	and.w	r3, r4, #1
   80c30:	9300      	str	r3, [sp, #0]
   80c32:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80c36:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80c3a:	bf14      	ite	ne
   80c3c:	2200      	movne	r2, #0
   80c3e:	2201      	moveq	r2, #1
   80c40:	4631      	mov	r1, r6
   80c42:	4628      	mov	r0, r5
   80c44:	4c03      	ldr	r4, [pc, #12]	; (80c54 <pio_configure_pin_group+0x98>)
   80c46:	47a0      	blx	r4
	return 1;
   80c48:	2001      	movs	r0, #1
		break;
   80c4a:	e7e7      	b.n	80c1c <pio_configure_pin_group+0x60>
   80c4c:	00080a4d 	.word	0x00080a4d
   80c50:	00080a8b 	.word	0x00080a8b
   80c54:	00080abd 	.word	0x00080abd

00080c58 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c5c:	4604      	mov	r4, r0
   80c5e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80c60:	4b0e      	ldr	r3, [pc, #56]	; (80c9c <pio_handler_process+0x44>)
   80c62:	4798      	blx	r3
   80c64:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80c66:	4620      	mov	r0, r4
   80c68:	4b0d      	ldr	r3, [pc, #52]	; (80ca0 <pio_handler_process+0x48>)
   80c6a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80c6c:	4005      	ands	r5, r0
   80c6e:	d013      	beq.n	80c98 <pio_handler_process+0x40>
   80c70:	4c0c      	ldr	r4, [pc, #48]	; (80ca4 <pio_handler_process+0x4c>)
   80c72:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80c76:	e003      	b.n	80c80 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80c78:	42b4      	cmp	r4, r6
   80c7a:	d00d      	beq.n	80c98 <pio_handler_process+0x40>
   80c7c:	3410      	adds	r4, #16
		while (status != 0) {
   80c7e:	b15d      	cbz	r5, 80c98 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80c80:	6820      	ldr	r0, [r4, #0]
   80c82:	4540      	cmp	r0, r8
   80c84:	d1f8      	bne.n	80c78 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c86:	6861      	ldr	r1, [r4, #4]
   80c88:	4229      	tst	r1, r5
   80c8a:	d0f5      	beq.n	80c78 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c8c:	68e3      	ldr	r3, [r4, #12]
   80c8e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80c90:	6863      	ldr	r3, [r4, #4]
   80c92:	ea25 0503 	bic.w	r5, r5, r3
   80c96:	e7ef      	b.n	80c78 <pio_handler_process+0x20>
   80c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c9c:	00080ae3 	.word	0x00080ae3
   80ca0:	00080ae7 	.word	0x00080ae7
   80ca4:	20070c2c 	.word	0x20070c2c

00080ca8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80ca8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80caa:	210b      	movs	r1, #11
   80cac:	4801      	ldr	r0, [pc, #4]	; (80cb4 <PIOA_Handler+0xc>)
   80cae:	4b02      	ldr	r3, [pc, #8]	; (80cb8 <PIOA_Handler+0x10>)
   80cb0:	4798      	blx	r3
   80cb2:	bd08      	pop	{r3, pc}
   80cb4:	400e0e00 	.word	0x400e0e00
   80cb8:	00080c59 	.word	0x00080c59

00080cbc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80cbc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80cbe:	210c      	movs	r1, #12
   80cc0:	4801      	ldr	r0, [pc, #4]	; (80cc8 <PIOB_Handler+0xc>)
   80cc2:	4b02      	ldr	r3, [pc, #8]	; (80ccc <PIOB_Handler+0x10>)
   80cc4:	4798      	blx	r3
   80cc6:	bd08      	pop	{r3, pc}
   80cc8:	400e1000 	.word	0x400e1000
   80ccc:	00080c59 	.word	0x00080c59

00080cd0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80cd0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80cd2:	210d      	movs	r1, #13
   80cd4:	4801      	ldr	r0, [pc, #4]	; (80cdc <PIOC_Handler+0xc>)
   80cd6:	4b02      	ldr	r3, [pc, #8]	; (80ce0 <PIOC_Handler+0x10>)
   80cd8:	4798      	blx	r3
   80cda:	bd08      	pop	{r3, pc}
   80cdc:	400e1200 	.word	0x400e1200
   80ce0:	00080c59 	.word	0x00080c59

00080ce4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80ce4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80ce6:	210e      	movs	r1, #14
   80ce8:	4801      	ldr	r0, [pc, #4]	; (80cf0 <PIOD_Handler+0xc>)
   80cea:	4b02      	ldr	r3, [pc, #8]	; (80cf4 <PIOD_Handler+0x10>)
   80cec:	4798      	blx	r3
   80cee:	bd08      	pop	{r3, pc}
   80cf0:	400e1400 	.word	0x400e1400
   80cf4:	00080c59 	.word	0x00080c59

00080cf8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80cf8:	4a17      	ldr	r2, [pc, #92]	; (80d58 <pmc_switch_mck_to_pllack+0x60>)
   80cfa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80d00:	4318      	orrs	r0, r3
   80d02:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d04:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d06:	f013 0f08 	tst.w	r3, #8
   80d0a:	d10a      	bne.n	80d22 <pmc_switch_mck_to_pllack+0x2a>
   80d0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d10:	4911      	ldr	r1, [pc, #68]	; (80d58 <pmc_switch_mck_to_pllack+0x60>)
   80d12:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d14:	f012 0f08 	tst.w	r2, #8
   80d18:	d103      	bne.n	80d22 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d1a:	3b01      	subs	r3, #1
   80d1c:	d1f9      	bne.n	80d12 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80d1e:	2001      	movs	r0, #1
   80d20:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80d22:	4a0d      	ldr	r2, [pc, #52]	; (80d58 <pmc_switch_mck_to_pllack+0x60>)
   80d24:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d26:	f023 0303 	bic.w	r3, r3, #3
   80d2a:	f043 0302 	orr.w	r3, r3, #2
   80d2e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d30:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d32:	f013 0f08 	tst.w	r3, #8
   80d36:	d10a      	bne.n	80d4e <pmc_switch_mck_to_pllack+0x56>
   80d38:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d3c:	4906      	ldr	r1, [pc, #24]	; (80d58 <pmc_switch_mck_to_pllack+0x60>)
   80d3e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d40:	f012 0f08 	tst.w	r2, #8
   80d44:	d105      	bne.n	80d52 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d46:	3b01      	subs	r3, #1
   80d48:	d1f9      	bne.n	80d3e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80d4a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80d4c:	4770      	bx	lr
	return 0;
   80d4e:	2000      	movs	r0, #0
   80d50:	4770      	bx	lr
   80d52:	2000      	movs	r0, #0
   80d54:	4770      	bx	lr
   80d56:	bf00      	nop
   80d58:	400e0600 	.word	0x400e0600

00080d5c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80d5c:	b9c8      	cbnz	r0, 80d92 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d5e:	4a11      	ldr	r2, [pc, #68]	; (80da4 <pmc_switch_mainck_to_xtal+0x48>)
   80d60:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80d62:	0209      	lsls	r1, r1, #8
   80d64:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d66:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80d6a:	f023 0303 	bic.w	r3, r3, #3
   80d6e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d72:	f043 0301 	orr.w	r3, r3, #1
   80d76:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d78:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d7a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d7c:	f013 0f01 	tst.w	r3, #1
   80d80:	d0fb      	beq.n	80d7a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80d82:	4a08      	ldr	r2, [pc, #32]	; (80da4 <pmc_switch_mainck_to_xtal+0x48>)
   80d84:	6a13      	ldr	r3, [r2, #32]
   80d86:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80d8e:	6213      	str	r3, [r2, #32]
   80d90:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d92:	4904      	ldr	r1, [pc, #16]	; (80da4 <pmc_switch_mainck_to_xtal+0x48>)
   80d94:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80d96:	4a04      	ldr	r2, [pc, #16]	; (80da8 <pmc_switch_mainck_to_xtal+0x4c>)
   80d98:	401a      	ands	r2, r3
   80d9a:	4b04      	ldr	r3, [pc, #16]	; (80dac <pmc_switch_mainck_to_xtal+0x50>)
   80d9c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d9e:	620b      	str	r3, [r1, #32]
   80da0:	4770      	bx	lr
   80da2:	bf00      	nop
   80da4:	400e0600 	.word	0x400e0600
   80da8:	fec8fffc 	.word	0xfec8fffc
   80dac:	01370002 	.word	0x01370002

00080db0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80db0:	4b02      	ldr	r3, [pc, #8]	; (80dbc <pmc_osc_is_ready_mainck+0xc>)
   80db2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80db4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80db8:	4770      	bx	lr
   80dba:	bf00      	nop
   80dbc:	400e0600 	.word	0x400e0600

00080dc0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80dc0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80dc4:	4b01      	ldr	r3, [pc, #4]	; (80dcc <pmc_disable_pllack+0xc>)
   80dc6:	629a      	str	r2, [r3, #40]	; 0x28
   80dc8:	4770      	bx	lr
   80dca:	bf00      	nop
   80dcc:	400e0600 	.word	0x400e0600

00080dd0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80dd0:	4b02      	ldr	r3, [pc, #8]	; (80ddc <pmc_is_locked_pllack+0xc>)
   80dd2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80dd4:	f000 0002 	and.w	r0, r0, #2
   80dd8:	4770      	bx	lr
   80dda:	bf00      	nop
   80ddc:	400e0600 	.word	0x400e0600

00080de0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80de0:	282c      	cmp	r0, #44	; 0x2c
   80de2:	d81e      	bhi.n	80e22 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80de4:	281f      	cmp	r0, #31
   80de6:	d80c      	bhi.n	80e02 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80de8:	4b11      	ldr	r3, [pc, #68]	; (80e30 <pmc_enable_periph_clk+0x50>)
   80dea:	699a      	ldr	r2, [r3, #24]
   80dec:	2301      	movs	r3, #1
   80dee:	4083      	lsls	r3, r0
   80df0:	4393      	bics	r3, r2
   80df2:	d018      	beq.n	80e26 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80df4:	2301      	movs	r3, #1
   80df6:	fa03 f000 	lsl.w	r0, r3, r0
   80dfa:	4b0d      	ldr	r3, [pc, #52]	; (80e30 <pmc_enable_periph_clk+0x50>)
   80dfc:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80dfe:	2000      	movs	r0, #0
   80e00:	4770      	bx	lr
		ul_id -= 32;
   80e02:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80e04:	4b0a      	ldr	r3, [pc, #40]	; (80e30 <pmc_enable_periph_clk+0x50>)
   80e06:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80e0a:	2301      	movs	r3, #1
   80e0c:	4083      	lsls	r3, r0
   80e0e:	4393      	bics	r3, r2
   80e10:	d00b      	beq.n	80e2a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80e12:	2301      	movs	r3, #1
   80e14:	fa03 f000 	lsl.w	r0, r3, r0
   80e18:	4b05      	ldr	r3, [pc, #20]	; (80e30 <pmc_enable_periph_clk+0x50>)
   80e1a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80e1e:	2000      	movs	r0, #0
   80e20:	4770      	bx	lr
		return 1;
   80e22:	2001      	movs	r0, #1
   80e24:	4770      	bx	lr
	return 0;
   80e26:	2000      	movs	r0, #0
   80e28:	4770      	bx	lr
   80e2a:	2000      	movs	r0, #0
}
   80e2c:	4770      	bx	lr
   80e2e:	bf00      	nop
   80e30:	400e0600 	.word	0x400e0600

00080e34 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80e34:	e7fe      	b.n	80e34 <Dummy_Handler>
	...

00080e38 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80e38:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80e3a:	4b1c      	ldr	r3, [pc, #112]	; (80eac <Reset_Handler+0x74>)
   80e3c:	4a1c      	ldr	r2, [pc, #112]	; (80eb0 <Reset_Handler+0x78>)
   80e3e:	429a      	cmp	r2, r3
   80e40:	d010      	beq.n	80e64 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80e42:	4b1c      	ldr	r3, [pc, #112]	; (80eb4 <Reset_Handler+0x7c>)
   80e44:	4a19      	ldr	r2, [pc, #100]	; (80eac <Reset_Handler+0x74>)
   80e46:	429a      	cmp	r2, r3
   80e48:	d20c      	bcs.n	80e64 <Reset_Handler+0x2c>
   80e4a:	3b01      	subs	r3, #1
   80e4c:	1a9b      	subs	r3, r3, r2
   80e4e:	f023 0303 	bic.w	r3, r3, #3
   80e52:	3304      	adds	r3, #4
   80e54:	4413      	add	r3, r2
   80e56:	4916      	ldr	r1, [pc, #88]	; (80eb0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80e58:	f851 0b04 	ldr.w	r0, [r1], #4
   80e5c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80e60:	429a      	cmp	r2, r3
   80e62:	d1f9      	bne.n	80e58 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e64:	4b14      	ldr	r3, [pc, #80]	; (80eb8 <Reset_Handler+0x80>)
   80e66:	4a15      	ldr	r2, [pc, #84]	; (80ebc <Reset_Handler+0x84>)
   80e68:	429a      	cmp	r2, r3
   80e6a:	d20a      	bcs.n	80e82 <Reset_Handler+0x4a>
   80e6c:	3b01      	subs	r3, #1
   80e6e:	1a9b      	subs	r3, r3, r2
   80e70:	f023 0303 	bic.w	r3, r3, #3
   80e74:	3304      	adds	r3, #4
   80e76:	4413      	add	r3, r2
		*pDest++ = 0;
   80e78:	2100      	movs	r1, #0
   80e7a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80e7e:	4293      	cmp	r3, r2
   80e80:	d1fb      	bne.n	80e7a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e82:	4b0f      	ldr	r3, [pc, #60]	; (80ec0 <Reset_Handler+0x88>)
   80e84:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80e88:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80e8c:	490d      	ldr	r1, [pc, #52]	; (80ec4 <Reset_Handler+0x8c>)
   80e8e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e90:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80e94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80e98:	d203      	bcs.n	80ea2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e9a:	688b      	ldr	r3, [r1, #8]
   80e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80ea0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80ea2:	4b09      	ldr	r3, [pc, #36]	; (80ec8 <Reset_Handler+0x90>)
   80ea4:	4798      	blx	r3

	/* Branch to main function */
	main();
   80ea6:	4b09      	ldr	r3, [pc, #36]	; (80ecc <Reset_Handler+0x94>)
   80ea8:	4798      	blx	r3
   80eaa:	e7fe      	b.n	80eaa <Reset_Handler+0x72>
   80eac:	20070000 	.word	0x20070000
   80eb0:	000840f8 	.word	0x000840f8
   80eb4:	20070ae8 	.word	0x20070ae8
   80eb8:	20070d0c 	.word	0x20070d0c
   80ebc:	20070ae8 	.word	0x20070ae8
   80ec0:	00080000 	.word	0x00080000
   80ec4:	e000ed00 	.word	0xe000ed00
   80ec8:	000810b5 	.word	0x000810b5
   80ecc:	00081039 	.word	0x00081039

00080ed0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80ed0:	4b3d      	ldr	r3, [pc, #244]	; (80fc8 <SystemCoreClockUpdate+0xf8>)
   80ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ed4:	f003 0303 	and.w	r3, r3, #3
   80ed8:	2b03      	cmp	r3, #3
   80eda:	d80e      	bhi.n	80efa <SystemCoreClockUpdate+0x2a>
   80edc:	e8df f003 	tbb	[pc, r3]
   80ee0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80ee4:	4b39      	ldr	r3, [pc, #228]	; (80fcc <SystemCoreClockUpdate+0xfc>)
   80ee6:	695b      	ldr	r3, [r3, #20]
   80ee8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80eec:	bf14      	ite	ne
   80eee:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80ef2:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80ef6:	4b36      	ldr	r3, [pc, #216]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80ef8:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80efa:	4b33      	ldr	r3, [pc, #204]	; (80fc8 <SystemCoreClockUpdate+0xf8>)
   80efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80efe:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f02:	2b70      	cmp	r3, #112	; 0x70
   80f04:	d057      	beq.n	80fb6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80f06:	4b30      	ldr	r3, [pc, #192]	; (80fc8 <SystemCoreClockUpdate+0xf8>)
   80f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80f0a:	4931      	ldr	r1, [pc, #196]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f0c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80f10:	680b      	ldr	r3, [r1, #0]
   80f12:	40d3      	lsrs	r3, r2
   80f14:	600b      	str	r3, [r1, #0]
   80f16:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f18:	4b2b      	ldr	r3, [pc, #172]	; (80fc8 <SystemCoreClockUpdate+0xf8>)
   80f1a:	6a1b      	ldr	r3, [r3, #32]
   80f1c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f20:	d003      	beq.n	80f2a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f22:	4a2c      	ldr	r2, [pc, #176]	; (80fd4 <SystemCoreClockUpdate+0x104>)
   80f24:	4b2a      	ldr	r3, [pc, #168]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f26:	601a      	str	r2, [r3, #0]
   80f28:	e7e7      	b.n	80efa <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f2a:	4a2b      	ldr	r2, [pc, #172]	; (80fd8 <SystemCoreClockUpdate+0x108>)
   80f2c:	4b28      	ldr	r3, [pc, #160]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f2e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f30:	4b25      	ldr	r3, [pc, #148]	; (80fc8 <SystemCoreClockUpdate+0xf8>)
   80f32:	6a1b      	ldr	r3, [r3, #32]
   80f34:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f38:	2b10      	cmp	r3, #16
   80f3a:	d005      	beq.n	80f48 <SystemCoreClockUpdate+0x78>
   80f3c:	2b20      	cmp	r3, #32
   80f3e:	d1dc      	bne.n	80efa <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80f40:	4a24      	ldr	r2, [pc, #144]	; (80fd4 <SystemCoreClockUpdate+0x104>)
   80f42:	4b23      	ldr	r3, [pc, #140]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f44:	601a      	str	r2, [r3, #0]
				break;
   80f46:	e7d8      	b.n	80efa <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80f48:	4a24      	ldr	r2, [pc, #144]	; (80fdc <SystemCoreClockUpdate+0x10c>)
   80f4a:	4b21      	ldr	r3, [pc, #132]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f4c:	601a      	str	r2, [r3, #0]
				break;
   80f4e:	e7d4      	b.n	80efa <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f50:	4b1d      	ldr	r3, [pc, #116]	; (80fc8 <SystemCoreClockUpdate+0xf8>)
   80f52:	6a1b      	ldr	r3, [r3, #32]
   80f54:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f58:	d00c      	beq.n	80f74 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f5a:	4a1e      	ldr	r2, [pc, #120]	; (80fd4 <SystemCoreClockUpdate+0x104>)
   80f5c:	4b1c      	ldr	r3, [pc, #112]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f5e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f60:	4b19      	ldr	r3, [pc, #100]	; (80fc8 <SystemCoreClockUpdate+0xf8>)
   80f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f64:	f003 0303 	and.w	r3, r3, #3
   80f68:	2b02      	cmp	r3, #2
   80f6a:	d016      	beq.n	80f9a <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f6c:	4a1c      	ldr	r2, [pc, #112]	; (80fe0 <SystemCoreClockUpdate+0x110>)
   80f6e:	4b18      	ldr	r3, [pc, #96]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f70:	601a      	str	r2, [r3, #0]
   80f72:	e7c2      	b.n	80efa <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f74:	4a18      	ldr	r2, [pc, #96]	; (80fd8 <SystemCoreClockUpdate+0x108>)
   80f76:	4b16      	ldr	r3, [pc, #88]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f78:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f7a:	4b13      	ldr	r3, [pc, #76]	; (80fc8 <SystemCoreClockUpdate+0xf8>)
   80f7c:	6a1b      	ldr	r3, [r3, #32]
   80f7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f82:	2b10      	cmp	r3, #16
   80f84:	d005      	beq.n	80f92 <SystemCoreClockUpdate+0xc2>
   80f86:	2b20      	cmp	r3, #32
   80f88:	d1ea      	bne.n	80f60 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80f8a:	4a12      	ldr	r2, [pc, #72]	; (80fd4 <SystemCoreClockUpdate+0x104>)
   80f8c:	4b10      	ldr	r3, [pc, #64]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f8e:	601a      	str	r2, [r3, #0]
				break;
   80f90:	e7e6      	b.n	80f60 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80f92:	4a12      	ldr	r2, [pc, #72]	; (80fdc <SystemCoreClockUpdate+0x10c>)
   80f94:	4b0e      	ldr	r3, [pc, #56]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80f96:	601a      	str	r2, [r3, #0]
				break;
   80f98:	e7e2      	b.n	80f60 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f9a:	4a0b      	ldr	r2, [pc, #44]	; (80fc8 <SystemCoreClockUpdate+0xf8>)
   80f9c:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f9e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80fa0:	480b      	ldr	r0, [pc, #44]	; (80fd0 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80fa2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80fa6:	6803      	ldr	r3, [r0, #0]
   80fa8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80fac:	b2d2      	uxtb	r2, r2
   80fae:	fbb3 f3f2 	udiv	r3, r3, r2
   80fb2:	6003      	str	r3, [r0, #0]
   80fb4:	e7a1      	b.n	80efa <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80fb6:	4a06      	ldr	r2, [pc, #24]	; (80fd0 <SystemCoreClockUpdate+0x100>)
   80fb8:	6813      	ldr	r3, [r2, #0]
   80fba:	490a      	ldr	r1, [pc, #40]	; (80fe4 <SystemCoreClockUpdate+0x114>)
   80fbc:	fba1 1303 	umull	r1, r3, r1, r3
   80fc0:	085b      	lsrs	r3, r3, #1
   80fc2:	6013      	str	r3, [r2, #0]
   80fc4:	4770      	bx	lr
   80fc6:	bf00      	nop
   80fc8:	400e0600 	.word	0x400e0600
   80fcc:	400e1a10 	.word	0x400e1a10
   80fd0:	20070134 	.word	0x20070134
   80fd4:	00b71b00 	.word	0x00b71b00
   80fd8:	003d0900 	.word	0x003d0900
   80fdc:	007a1200 	.word	0x007a1200
   80fe0:	0e4e1c00 	.word	0x0e4e1c00
   80fe4:	aaaaaaab 	.word	0xaaaaaaab

00080fe8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80fe8:	4b0a      	ldr	r3, [pc, #40]	; (81014 <_sbrk+0x2c>)
   80fea:	681b      	ldr	r3, [r3, #0]
   80fec:	b153      	cbz	r3, 81004 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80fee:	4b09      	ldr	r3, [pc, #36]	; (81014 <_sbrk+0x2c>)
   80ff0:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80ff2:	181a      	adds	r2, r3, r0
   80ff4:	4908      	ldr	r1, [pc, #32]	; (81018 <_sbrk+0x30>)
   80ff6:	4291      	cmp	r1, r2
   80ff8:	db08      	blt.n	8100c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80ffa:	4610      	mov	r0, r2
   80ffc:	4a05      	ldr	r2, [pc, #20]	; (81014 <_sbrk+0x2c>)
   80ffe:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81000:	4618      	mov	r0, r3
   81002:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81004:	4a05      	ldr	r2, [pc, #20]	; (8101c <_sbrk+0x34>)
   81006:	4b03      	ldr	r3, [pc, #12]	; (81014 <_sbrk+0x2c>)
   81008:	601a      	str	r2, [r3, #0]
   8100a:	e7f0      	b.n	80fee <_sbrk+0x6>
		return (caddr_t) -1;	
   8100c:	f04f 30ff 	mov.w	r0, #4294967295
}
   81010:	4770      	bx	lr
   81012:	bf00      	nop
   81014:	20070c9c 	.word	0x20070c9c
   81018:	20087ffc 	.word	0x20087ffc
   8101c:	20072d10 	.word	0x20072d10

00081020 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81020:	f04f 30ff 	mov.w	r0, #4294967295
   81024:	4770      	bx	lr

00081026 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8102a:	604b      	str	r3, [r1, #4]

	return 0;
}
   8102c:	2000      	movs	r0, #0
   8102e:	4770      	bx	lr

00081030 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81030:	2001      	movs	r0, #1
   81032:	4770      	bx	lr

00081034 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81034:	2000      	movs	r0, #0
   81036:	4770      	bx	lr

00081038 <main>:
xSemaphoreHandle signal = NULL ;
int32_t arr[9];
uint8_t x = 0;
uint8_t y=0 ;
int main (void)
{
   81038:	b580      	push	{r7, lr}
	board_init();
   8103a:	4b12      	ldr	r3, [pc, #72]	; (81084 <main+0x4c>)
   8103c:	4798      	blx	r3
	sysclk_init();
   8103e:	4b12      	ldr	r3, [pc, #72]	; (81088 <main+0x50>)
   81040:	4798      	blx	r3
   81042:	200b      	movs	r0, #11
   81044:	4c11      	ldr	r4, [pc, #68]	; (8108c <main+0x54>)
   81046:	47a0      	blx	r4
   81048:	200c      	movs	r0, #12
   8104a:	47a0      	blx	r4
   8104c:	200d      	movs	r0, #13
   8104e:	47a0      	blx	r4
   81050:	200e      	movs	r0, #14
   81052:	47a0      	blx	r4
	ioport_init();
	configureConsole();
   81054:	4b0e      	ldr	r3, [pc, #56]	; (81090 <main+0x58>)
   81056:	4798      	blx	r3
	delayInit();
   81058:	4b0e      	ldr	r3, [pc, #56]	; (81094 <main+0x5c>)
   8105a:	4798      	blx	r3
	Twi_master_init();
   8105c:	4b0e      	ldr	r3, [pc, #56]	; (81098 <main+0x60>)
   8105e:	4798      	blx	r3
	while (1)
	{
		twi_Start(TWI1,unoAddress,1);
   81060:	4f0e      	ldr	r7, [pc, #56]	; (8109c <main+0x64>)
   81062:	4e0f      	ldr	r6, [pc, #60]	; (810a0 <main+0x68>)
		//master_write_byte(TWI1, x);
		y=master_read();
   81064:	4d0f      	ldr	r5, [pc, #60]	; (810a4 <main+0x6c>)
		twi_Start(TWI1,unoAddress,1);
   81066:	2201      	movs	r2, #1
   81068:	2108      	movs	r1, #8
   8106a:	4638      	mov	r0, r7
   8106c:	47b0      	blx	r6
		y=master_read();
   8106e:	47a8      	blx	r5
   81070:	4601      	mov	r1, r0
   81072:	4c0d      	ldr	r4, [pc, #52]	; (810a8 <main+0x70>)
   81074:	7020      	strb	r0, [r4, #0]
		printf("received: %d\n",y);
   81076:	480d      	ldr	r0, [pc, #52]	; (810ac <main+0x74>)
   81078:	4b0d      	ldr	r3, [pc, #52]	; (810b0 <main+0x78>)
   8107a:	4798      	blx	r3
		y=0;
   8107c:	2300      	movs	r3, #0
   8107e:	7023      	strb	r3, [r4, #0]
   81080:	e7f1      	b.n	81066 <main+0x2e>
   81082:	bf00      	nop
   81084:	000809ad 	.word	0x000809ad
   81088:	00080949 	.word	0x00080949
   8108c:	00080de1 	.word	0x00080de1
   81090:	00080745 	.word	0x00080745
   81094:	000801c5 	.word	0x000801c5
   81098:	00080201 	.word	0x00080201
   8109c:	40090000 	.word	0x40090000
   810a0:	00080269 	.word	0x00080269
   810a4:	000802a5 	.word	0x000802a5
   810a8:	20070ca0 	.word	0x20070ca0
   810ac:	00083f54 	.word	0x00083f54
   810b0:	00081105 	.word	0x00081105

000810b4 <__libc_init_array>:
   810b4:	b570      	push	{r4, r5, r6, lr}
   810b6:	4e0f      	ldr	r6, [pc, #60]	; (810f4 <__libc_init_array+0x40>)
   810b8:	4d0f      	ldr	r5, [pc, #60]	; (810f8 <__libc_init_array+0x44>)
   810ba:	1b76      	subs	r6, r6, r5
   810bc:	10b6      	asrs	r6, r6, #2
   810be:	bf18      	it	ne
   810c0:	2400      	movne	r4, #0
   810c2:	d005      	beq.n	810d0 <__libc_init_array+0x1c>
   810c4:	3401      	adds	r4, #1
   810c6:	f855 3b04 	ldr.w	r3, [r5], #4
   810ca:	4798      	blx	r3
   810cc:	42a6      	cmp	r6, r4
   810ce:	d1f9      	bne.n	810c4 <__libc_init_array+0x10>
   810d0:	4e0a      	ldr	r6, [pc, #40]	; (810fc <__libc_init_array+0x48>)
   810d2:	4d0b      	ldr	r5, [pc, #44]	; (81100 <__libc_init_array+0x4c>)
   810d4:	f002 fffa 	bl	840cc <_init>
   810d8:	1b76      	subs	r6, r6, r5
   810da:	10b6      	asrs	r6, r6, #2
   810dc:	bf18      	it	ne
   810de:	2400      	movne	r4, #0
   810e0:	d006      	beq.n	810f0 <__libc_init_array+0x3c>
   810e2:	3401      	adds	r4, #1
   810e4:	f855 3b04 	ldr.w	r3, [r5], #4
   810e8:	4798      	blx	r3
   810ea:	42a6      	cmp	r6, r4
   810ec:	d1f9      	bne.n	810e2 <__libc_init_array+0x2e>
   810ee:	bd70      	pop	{r4, r5, r6, pc}
   810f0:	bd70      	pop	{r4, r5, r6, pc}
   810f2:	bf00      	nop
   810f4:	000840d8 	.word	0x000840d8
   810f8:	000840d8 	.word	0x000840d8
   810fc:	000840e0 	.word	0x000840e0
   81100:	000840d8 	.word	0x000840d8

00081104 <iprintf>:
   81104:	b40f      	push	{r0, r1, r2, r3}
   81106:	b510      	push	{r4, lr}
   81108:	4b07      	ldr	r3, [pc, #28]	; (81128 <iprintf+0x24>)
   8110a:	b082      	sub	sp, #8
   8110c:	ac04      	add	r4, sp, #16
   8110e:	f854 2b04 	ldr.w	r2, [r4], #4
   81112:	6818      	ldr	r0, [r3, #0]
   81114:	4623      	mov	r3, r4
   81116:	6881      	ldr	r1, [r0, #8]
   81118:	9401      	str	r4, [sp, #4]
   8111a:	f000 fa09 	bl	81530 <_vfiprintf_r>
   8111e:	b002      	add	sp, #8
   81120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81124:	b004      	add	sp, #16
   81126:	4770      	bx	lr
   81128:	20070138 	.word	0x20070138

0008112c <memcpy>:
   8112c:	4684      	mov	ip, r0
   8112e:	ea41 0300 	orr.w	r3, r1, r0
   81132:	f013 0303 	ands.w	r3, r3, #3
   81136:	d149      	bne.n	811cc <memcpy+0xa0>
   81138:	3a40      	subs	r2, #64	; 0x40
   8113a:	d323      	bcc.n	81184 <memcpy+0x58>
   8113c:	680b      	ldr	r3, [r1, #0]
   8113e:	6003      	str	r3, [r0, #0]
   81140:	684b      	ldr	r3, [r1, #4]
   81142:	6043      	str	r3, [r0, #4]
   81144:	688b      	ldr	r3, [r1, #8]
   81146:	6083      	str	r3, [r0, #8]
   81148:	68cb      	ldr	r3, [r1, #12]
   8114a:	60c3      	str	r3, [r0, #12]
   8114c:	690b      	ldr	r3, [r1, #16]
   8114e:	6103      	str	r3, [r0, #16]
   81150:	694b      	ldr	r3, [r1, #20]
   81152:	6143      	str	r3, [r0, #20]
   81154:	698b      	ldr	r3, [r1, #24]
   81156:	6183      	str	r3, [r0, #24]
   81158:	69cb      	ldr	r3, [r1, #28]
   8115a:	61c3      	str	r3, [r0, #28]
   8115c:	6a0b      	ldr	r3, [r1, #32]
   8115e:	6203      	str	r3, [r0, #32]
   81160:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81162:	6243      	str	r3, [r0, #36]	; 0x24
   81164:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81166:	6283      	str	r3, [r0, #40]	; 0x28
   81168:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8116a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8116c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8116e:	6303      	str	r3, [r0, #48]	; 0x30
   81170:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81172:	6343      	str	r3, [r0, #52]	; 0x34
   81174:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81176:	6383      	str	r3, [r0, #56]	; 0x38
   81178:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8117a:	63c3      	str	r3, [r0, #60]	; 0x3c
   8117c:	3040      	adds	r0, #64	; 0x40
   8117e:	3140      	adds	r1, #64	; 0x40
   81180:	3a40      	subs	r2, #64	; 0x40
   81182:	d2db      	bcs.n	8113c <memcpy+0x10>
   81184:	3230      	adds	r2, #48	; 0x30
   81186:	d30b      	bcc.n	811a0 <memcpy+0x74>
   81188:	680b      	ldr	r3, [r1, #0]
   8118a:	6003      	str	r3, [r0, #0]
   8118c:	684b      	ldr	r3, [r1, #4]
   8118e:	6043      	str	r3, [r0, #4]
   81190:	688b      	ldr	r3, [r1, #8]
   81192:	6083      	str	r3, [r0, #8]
   81194:	68cb      	ldr	r3, [r1, #12]
   81196:	60c3      	str	r3, [r0, #12]
   81198:	3010      	adds	r0, #16
   8119a:	3110      	adds	r1, #16
   8119c:	3a10      	subs	r2, #16
   8119e:	d2f3      	bcs.n	81188 <memcpy+0x5c>
   811a0:	320c      	adds	r2, #12
   811a2:	d305      	bcc.n	811b0 <memcpy+0x84>
   811a4:	f851 3b04 	ldr.w	r3, [r1], #4
   811a8:	f840 3b04 	str.w	r3, [r0], #4
   811ac:	3a04      	subs	r2, #4
   811ae:	d2f9      	bcs.n	811a4 <memcpy+0x78>
   811b0:	3204      	adds	r2, #4
   811b2:	d008      	beq.n	811c6 <memcpy+0x9a>
   811b4:	07d2      	lsls	r2, r2, #31
   811b6:	bf1c      	itt	ne
   811b8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   811bc:	f800 3b01 	strbne.w	r3, [r0], #1
   811c0:	d301      	bcc.n	811c6 <memcpy+0x9a>
   811c2:	880b      	ldrh	r3, [r1, #0]
   811c4:	8003      	strh	r3, [r0, #0]
   811c6:	4660      	mov	r0, ip
   811c8:	4770      	bx	lr
   811ca:	bf00      	nop
   811cc:	2a08      	cmp	r2, #8
   811ce:	d313      	bcc.n	811f8 <memcpy+0xcc>
   811d0:	078b      	lsls	r3, r1, #30
   811d2:	d0b1      	beq.n	81138 <memcpy+0xc>
   811d4:	f010 0303 	ands.w	r3, r0, #3
   811d8:	d0ae      	beq.n	81138 <memcpy+0xc>
   811da:	f1c3 0304 	rsb	r3, r3, #4
   811de:	1ad2      	subs	r2, r2, r3
   811e0:	07db      	lsls	r3, r3, #31
   811e2:	bf1c      	itt	ne
   811e4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   811e8:	f800 3b01 	strbne.w	r3, [r0], #1
   811ec:	d3a4      	bcc.n	81138 <memcpy+0xc>
   811ee:	f831 3b02 	ldrh.w	r3, [r1], #2
   811f2:	f820 3b02 	strh.w	r3, [r0], #2
   811f6:	e79f      	b.n	81138 <memcpy+0xc>
   811f8:	3a04      	subs	r2, #4
   811fa:	d3d9      	bcc.n	811b0 <memcpy+0x84>
   811fc:	3a01      	subs	r2, #1
   811fe:	f811 3b01 	ldrb.w	r3, [r1], #1
   81202:	f800 3b01 	strb.w	r3, [r0], #1
   81206:	d2f9      	bcs.n	811fc <memcpy+0xd0>
   81208:	780b      	ldrb	r3, [r1, #0]
   8120a:	7003      	strb	r3, [r0, #0]
   8120c:	784b      	ldrb	r3, [r1, #1]
   8120e:	7043      	strb	r3, [r0, #1]
   81210:	788b      	ldrb	r3, [r1, #2]
   81212:	7083      	strb	r3, [r0, #2]
   81214:	4660      	mov	r0, ip
   81216:	4770      	bx	lr

00081218 <memset>:
   81218:	b470      	push	{r4, r5, r6}
   8121a:	0786      	lsls	r6, r0, #30
   8121c:	d046      	beq.n	812ac <memset+0x94>
   8121e:	1e54      	subs	r4, r2, #1
   81220:	2a00      	cmp	r2, #0
   81222:	d041      	beq.n	812a8 <memset+0x90>
   81224:	b2ca      	uxtb	r2, r1
   81226:	4603      	mov	r3, r0
   81228:	e002      	b.n	81230 <memset+0x18>
   8122a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8122e:	d33b      	bcc.n	812a8 <memset+0x90>
   81230:	f803 2b01 	strb.w	r2, [r3], #1
   81234:	079d      	lsls	r5, r3, #30
   81236:	d1f8      	bne.n	8122a <memset+0x12>
   81238:	2c03      	cmp	r4, #3
   8123a:	d92e      	bls.n	8129a <memset+0x82>
   8123c:	b2cd      	uxtb	r5, r1
   8123e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81242:	2c0f      	cmp	r4, #15
   81244:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81248:	d919      	bls.n	8127e <memset+0x66>
   8124a:	4626      	mov	r6, r4
   8124c:	f103 0210 	add.w	r2, r3, #16
   81250:	3e10      	subs	r6, #16
   81252:	2e0f      	cmp	r6, #15
   81254:	f842 5c10 	str.w	r5, [r2, #-16]
   81258:	f842 5c0c 	str.w	r5, [r2, #-12]
   8125c:	f842 5c08 	str.w	r5, [r2, #-8]
   81260:	f842 5c04 	str.w	r5, [r2, #-4]
   81264:	f102 0210 	add.w	r2, r2, #16
   81268:	d8f2      	bhi.n	81250 <memset+0x38>
   8126a:	f1a4 0210 	sub.w	r2, r4, #16
   8126e:	f022 020f 	bic.w	r2, r2, #15
   81272:	f004 040f 	and.w	r4, r4, #15
   81276:	3210      	adds	r2, #16
   81278:	2c03      	cmp	r4, #3
   8127a:	4413      	add	r3, r2
   8127c:	d90d      	bls.n	8129a <memset+0x82>
   8127e:	461e      	mov	r6, r3
   81280:	4622      	mov	r2, r4
   81282:	3a04      	subs	r2, #4
   81284:	2a03      	cmp	r2, #3
   81286:	f846 5b04 	str.w	r5, [r6], #4
   8128a:	d8fa      	bhi.n	81282 <memset+0x6a>
   8128c:	1f22      	subs	r2, r4, #4
   8128e:	f022 0203 	bic.w	r2, r2, #3
   81292:	3204      	adds	r2, #4
   81294:	4413      	add	r3, r2
   81296:	f004 0403 	and.w	r4, r4, #3
   8129a:	b12c      	cbz	r4, 812a8 <memset+0x90>
   8129c:	b2c9      	uxtb	r1, r1
   8129e:	441c      	add	r4, r3
   812a0:	f803 1b01 	strb.w	r1, [r3], #1
   812a4:	429c      	cmp	r4, r3
   812a6:	d1fb      	bne.n	812a0 <memset+0x88>
   812a8:	bc70      	pop	{r4, r5, r6}
   812aa:	4770      	bx	lr
   812ac:	4614      	mov	r4, r2
   812ae:	4603      	mov	r3, r0
   812b0:	e7c2      	b.n	81238 <memset+0x20>
   812b2:	bf00      	nop

000812b4 <setbuf>:
   812b4:	2900      	cmp	r1, #0
   812b6:	bf0c      	ite	eq
   812b8:	2202      	moveq	r2, #2
   812ba:	2200      	movne	r2, #0
   812bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   812c0:	f000 b800 	b.w	812c4 <setvbuf>

000812c4 <setvbuf>:
   812c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   812c8:	4d61      	ldr	r5, [pc, #388]	; (81450 <setvbuf+0x18c>)
   812ca:	b083      	sub	sp, #12
   812cc:	682d      	ldr	r5, [r5, #0]
   812ce:	4604      	mov	r4, r0
   812d0:	460f      	mov	r7, r1
   812d2:	4690      	mov	r8, r2
   812d4:	461e      	mov	r6, r3
   812d6:	b115      	cbz	r5, 812de <setvbuf+0x1a>
   812d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   812da:	2b00      	cmp	r3, #0
   812dc:	d064      	beq.n	813a8 <setvbuf+0xe4>
   812de:	f1b8 0f02 	cmp.w	r8, #2
   812e2:	d006      	beq.n	812f2 <setvbuf+0x2e>
   812e4:	f1b8 0f01 	cmp.w	r8, #1
   812e8:	f200 809f 	bhi.w	8142a <setvbuf+0x166>
   812ec:	2e00      	cmp	r6, #0
   812ee:	f2c0 809c 	blt.w	8142a <setvbuf+0x166>
   812f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   812f4:	07d8      	lsls	r0, r3, #31
   812f6:	d534      	bpl.n	81362 <setvbuf+0x9e>
   812f8:	4621      	mov	r1, r4
   812fa:	4628      	mov	r0, r5
   812fc:	f001 f8b0 	bl	82460 <_fflush_r>
   81300:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81302:	b141      	cbz	r1, 81316 <setvbuf+0x52>
   81304:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81308:	4299      	cmp	r1, r3
   8130a:	d002      	beq.n	81312 <setvbuf+0x4e>
   8130c:	4628      	mov	r0, r5
   8130e:	f001 fa25 	bl	8275c <_free_r>
   81312:	2300      	movs	r3, #0
   81314:	6323      	str	r3, [r4, #48]	; 0x30
   81316:	2200      	movs	r2, #0
   81318:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8131c:	61a2      	str	r2, [r4, #24]
   8131e:	6062      	str	r2, [r4, #4]
   81320:	061a      	lsls	r2, r3, #24
   81322:	d43a      	bmi.n	8139a <setvbuf+0xd6>
   81324:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81328:	f023 0303 	bic.w	r3, r3, #3
   8132c:	f1b8 0f02 	cmp.w	r8, #2
   81330:	81a3      	strh	r3, [r4, #12]
   81332:	d01d      	beq.n	81370 <setvbuf+0xac>
   81334:	ab01      	add	r3, sp, #4
   81336:	466a      	mov	r2, sp
   81338:	4621      	mov	r1, r4
   8133a:	4628      	mov	r0, r5
   8133c:	f001 fcac 	bl	82c98 <__swhatbuf_r>
   81340:	89a3      	ldrh	r3, [r4, #12]
   81342:	4318      	orrs	r0, r3
   81344:	81a0      	strh	r0, [r4, #12]
   81346:	2e00      	cmp	r6, #0
   81348:	d132      	bne.n	813b0 <setvbuf+0xec>
   8134a:	9e00      	ldr	r6, [sp, #0]
   8134c:	4630      	mov	r0, r6
   8134e:	f001 fd1b 	bl	82d88 <malloc>
   81352:	4607      	mov	r7, r0
   81354:	2800      	cmp	r0, #0
   81356:	d06b      	beq.n	81430 <setvbuf+0x16c>
   81358:	89a3      	ldrh	r3, [r4, #12]
   8135a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8135e:	81a3      	strh	r3, [r4, #12]
   81360:	e028      	b.n	813b4 <setvbuf+0xf0>
   81362:	89a3      	ldrh	r3, [r4, #12]
   81364:	0599      	lsls	r1, r3, #22
   81366:	d4c7      	bmi.n	812f8 <setvbuf+0x34>
   81368:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8136a:	f001 fc91 	bl	82c90 <__retarget_lock_acquire_recursive>
   8136e:	e7c3      	b.n	812f8 <setvbuf+0x34>
   81370:	2500      	movs	r5, #0
   81372:	2600      	movs	r6, #0
   81374:	2001      	movs	r0, #1
   81376:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81378:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8137c:	f043 0302 	orr.w	r3, r3, #2
   81380:	60a6      	str	r6, [r4, #8]
   81382:	07ce      	lsls	r6, r1, #31
   81384:	81a3      	strh	r3, [r4, #12]
   81386:	6160      	str	r0, [r4, #20]
   81388:	6022      	str	r2, [r4, #0]
   8138a:	6122      	str	r2, [r4, #16]
   8138c:	d401      	bmi.n	81392 <setvbuf+0xce>
   8138e:	0598      	lsls	r0, r3, #22
   81390:	d53e      	bpl.n	81410 <setvbuf+0x14c>
   81392:	4628      	mov	r0, r5
   81394:	b003      	add	sp, #12
   81396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8139a:	6921      	ldr	r1, [r4, #16]
   8139c:	4628      	mov	r0, r5
   8139e:	f001 f9dd 	bl	8275c <_free_r>
   813a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   813a6:	e7bd      	b.n	81324 <setvbuf+0x60>
   813a8:	4628      	mov	r0, r5
   813aa:	f001 f8b1 	bl	82510 <__sinit>
   813ae:	e796      	b.n	812de <setvbuf+0x1a>
   813b0:	2f00      	cmp	r7, #0
   813b2:	d0cb      	beq.n	8134c <setvbuf+0x88>
   813b4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   813b6:	2b00      	cmp	r3, #0
   813b8:	d033      	beq.n	81422 <setvbuf+0x15e>
   813ba:	9b00      	ldr	r3, [sp, #0]
   813bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   813c0:	429e      	cmp	r6, r3
   813c2:	bf1c      	itt	ne
   813c4:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   813c8:	81a2      	strhne	r2, [r4, #12]
   813ca:	f1b8 0f01 	cmp.w	r8, #1
   813ce:	bf04      	itt	eq
   813d0:	f042 0201 	orreq.w	r2, r2, #1
   813d4:	81a2      	strheq	r2, [r4, #12]
   813d6:	b292      	uxth	r2, r2
   813d8:	f012 0308 	ands.w	r3, r2, #8
   813dc:	6027      	str	r7, [r4, #0]
   813de:	6127      	str	r7, [r4, #16]
   813e0:	6166      	str	r6, [r4, #20]
   813e2:	d00e      	beq.n	81402 <setvbuf+0x13e>
   813e4:	07d1      	lsls	r1, r2, #31
   813e6:	d51a      	bpl.n	8141e <setvbuf+0x15a>
   813e8:	2300      	movs	r3, #0
   813ea:	6e65      	ldr	r5, [r4, #100]	; 0x64
   813ec:	4276      	negs	r6, r6
   813ee:	f015 0501 	ands.w	r5, r5, #1
   813f2:	61a6      	str	r6, [r4, #24]
   813f4:	60a3      	str	r3, [r4, #8]
   813f6:	d009      	beq.n	8140c <setvbuf+0x148>
   813f8:	2500      	movs	r5, #0
   813fa:	4628      	mov	r0, r5
   813fc:	b003      	add	sp, #12
   813fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81402:	60a3      	str	r3, [r4, #8]
   81404:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81406:	f015 0501 	ands.w	r5, r5, #1
   8140a:	d1f5      	bne.n	813f8 <setvbuf+0x134>
   8140c:	0593      	lsls	r3, r2, #22
   8140e:	d4c0      	bmi.n	81392 <setvbuf+0xce>
   81410:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81412:	f001 fc3f 	bl	82c94 <__retarget_lock_release_recursive>
   81416:	4628      	mov	r0, r5
   81418:	b003      	add	sp, #12
   8141a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8141e:	60a6      	str	r6, [r4, #8]
   81420:	e7f0      	b.n	81404 <setvbuf+0x140>
   81422:	4628      	mov	r0, r5
   81424:	f001 f874 	bl	82510 <__sinit>
   81428:	e7c7      	b.n	813ba <setvbuf+0xf6>
   8142a:	f04f 35ff 	mov.w	r5, #4294967295
   8142e:	e7b0      	b.n	81392 <setvbuf+0xce>
   81430:	f8dd 9000 	ldr.w	r9, [sp]
   81434:	45b1      	cmp	r9, r6
   81436:	d004      	beq.n	81442 <setvbuf+0x17e>
   81438:	4648      	mov	r0, r9
   8143a:	f001 fca5 	bl	82d88 <malloc>
   8143e:	4607      	mov	r7, r0
   81440:	b920      	cbnz	r0, 8144c <setvbuf+0x188>
   81442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81446:	f04f 35ff 	mov.w	r5, #4294967295
   8144a:	e792      	b.n	81372 <setvbuf+0xae>
   8144c:	464e      	mov	r6, r9
   8144e:	e783      	b.n	81358 <setvbuf+0x94>
   81450:	20070138 	.word	0x20070138

00081454 <strlen>:
   81454:	f020 0103 	bic.w	r1, r0, #3
   81458:	f010 0003 	ands.w	r0, r0, #3
   8145c:	f1c0 0000 	rsb	r0, r0, #0
   81460:	f851 3b04 	ldr.w	r3, [r1], #4
   81464:	f100 0c04 	add.w	ip, r0, #4
   81468:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8146c:	f06f 0200 	mvn.w	r2, #0
   81470:	bf1c      	itt	ne
   81472:	fa22 f20c 	lsrne.w	r2, r2, ip
   81476:	4313      	orrne	r3, r2
   81478:	f04f 0c01 	mov.w	ip, #1
   8147c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81480:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81484:	eba3 020c 	sub.w	r2, r3, ip
   81488:	ea22 0203 	bic.w	r2, r2, r3
   8148c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81490:	bf04      	itt	eq
   81492:	f851 3b04 	ldreq.w	r3, [r1], #4
   81496:	3004      	addeq	r0, #4
   81498:	d0f4      	beq.n	81484 <strlen+0x30>
   8149a:	f1c2 0100 	rsb	r1, r2, #0
   8149e:	ea02 0201 	and.w	r2, r2, r1
   814a2:	fab2 f282 	clz	r2, r2
   814a6:	f1c2 021f 	rsb	r2, r2, #31
   814aa:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   814ae:	4770      	bx	lr

000814b0 <__sprint_r.part.0>:
   814b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814b4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   814b6:	4693      	mov	fp, r2
   814b8:	049c      	lsls	r4, r3, #18
   814ba:	d52f      	bpl.n	8151c <__sprint_r.part.0+0x6c>
   814bc:	6893      	ldr	r3, [r2, #8]
   814be:	6812      	ldr	r2, [r2, #0]
   814c0:	b353      	cbz	r3, 81518 <__sprint_r.part.0+0x68>
   814c2:	460e      	mov	r6, r1
   814c4:	4607      	mov	r7, r0
   814c6:	f102 0908 	add.w	r9, r2, #8
   814ca:	e919 0420 	ldmdb	r9, {r5, sl}
   814ce:	ea5f 089a 	movs.w	r8, sl, lsr #2
   814d2:	d017      	beq.n	81504 <__sprint_r.part.0+0x54>
   814d4:	2400      	movs	r4, #0
   814d6:	3d04      	subs	r5, #4
   814d8:	e001      	b.n	814de <__sprint_r.part.0+0x2e>
   814da:	45a0      	cmp	r8, r4
   814dc:	d010      	beq.n	81500 <__sprint_r.part.0+0x50>
   814de:	4632      	mov	r2, r6
   814e0:	f855 1f04 	ldr.w	r1, [r5, #4]!
   814e4:	4638      	mov	r0, r7
   814e6:	f001 f8b5 	bl	82654 <_fputwc_r>
   814ea:	1c43      	adds	r3, r0, #1
   814ec:	f104 0401 	add.w	r4, r4, #1
   814f0:	d1f3      	bne.n	814da <__sprint_r.part.0+0x2a>
   814f2:	2300      	movs	r3, #0
   814f4:	f8cb 3008 	str.w	r3, [fp, #8]
   814f8:	f8cb 3004 	str.w	r3, [fp, #4]
   814fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81500:	f8db 3008 	ldr.w	r3, [fp, #8]
   81504:	f02a 0a03 	bic.w	sl, sl, #3
   81508:	eba3 030a 	sub.w	r3, r3, sl
   8150c:	f8cb 3008 	str.w	r3, [fp, #8]
   81510:	f109 0908 	add.w	r9, r9, #8
   81514:	2b00      	cmp	r3, #0
   81516:	d1d8      	bne.n	814ca <__sprint_r.part.0+0x1a>
   81518:	2000      	movs	r0, #0
   8151a:	e7ea      	b.n	814f2 <__sprint_r.part.0+0x42>
   8151c:	f001 fa04 	bl	82928 <__sfvwrite_r>
   81520:	2300      	movs	r3, #0
   81522:	f8cb 3008 	str.w	r3, [fp, #8]
   81526:	f8cb 3004 	str.w	r3, [fp, #4]
   8152a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8152e:	bf00      	nop

00081530 <_vfiprintf_r>:
   81530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81534:	b0ad      	sub	sp, #180	; 0xb4
   81536:	461d      	mov	r5, r3
   81538:	468b      	mov	fp, r1
   8153a:	4690      	mov	r8, r2
   8153c:	9307      	str	r3, [sp, #28]
   8153e:	9006      	str	r0, [sp, #24]
   81540:	b118      	cbz	r0, 8154a <_vfiprintf_r+0x1a>
   81542:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81544:	2b00      	cmp	r3, #0
   81546:	f000 80f3 	beq.w	81730 <_vfiprintf_r+0x200>
   8154a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8154e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81552:	07df      	lsls	r7, r3, #31
   81554:	b281      	uxth	r1, r0
   81556:	d402      	bmi.n	8155e <_vfiprintf_r+0x2e>
   81558:	058e      	lsls	r6, r1, #22
   8155a:	f140 80fc 	bpl.w	81756 <_vfiprintf_r+0x226>
   8155e:	048c      	lsls	r4, r1, #18
   81560:	d40a      	bmi.n	81578 <_vfiprintf_r+0x48>
   81562:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81566:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   8156a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8156e:	f8ab 100c 	strh.w	r1, [fp, #12]
   81572:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   81576:	b289      	uxth	r1, r1
   81578:	0708      	lsls	r0, r1, #28
   8157a:	f140 80b3 	bpl.w	816e4 <_vfiprintf_r+0x1b4>
   8157e:	f8db 3010 	ldr.w	r3, [fp, #16]
   81582:	2b00      	cmp	r3, #0
   81584:	f000 80ae 	beq.w	816e4 <_vfiprintf_r+0x1b4>
   81588:	f001 031a 	and.w	r3, r1, #26
   8158c:	2b0a      	cmp	r3, #10
   8158e:	f000 80b5 	beq.w	816fc <_vfiprintf_r+0x1cc>
   81592:	2300      	movs	r3, #0
   81594:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81598:	46d1      	mov	r9, sl
   8159a:	930b      	str	r3, [sp, #44]	; 0x2c
   8159c:	9303      	str	r3, [sp, #12]
   8159e:	9311      	str	r3, [sp, #68]	; 0x44
   815a0:	9310      	str	r3, [sp, #64]	; 0x40
   815a2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   815a6:	f8cd b010 	str.w	fp, [sp, #16]
   815aa:	f898 3000 	ldrb.w	r3, [r8]
   815ae:	4644      	mov	r4, r8
   815b0:	b1fb      	cbz	r3, 815f2 <_vfiprintf_r+0xc2>
   815b2:	2b25      	cmp	r3, #37	; 0x25
   815b4:	d102      	bne.n	815bc <_vfiprintf_r+0x8c>
   815b6:	e01c      	b.n	815f2 <_vfiprintf_r+0xc2>
   815b8:	2b25      	cmp	r3, #37	; 0x25
   815ba:	d003      	beq.n	815c4 <_vfiprintf_r+0x94>
   815bc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   815c0:	2b00      	cmp	r3, #0
   815c2:	d1f9      	bne.n	815b8 <_vfiprintf_r+0x88>
   815c4:	eba4 0508 	sub.w	r5, r4, r8
   815c8:	b19d      	cbz	r5, 815f2 <_vfiprintf_r+0xc2>
   815ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
   815cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   815ce:	3301      	adds	r3, #1
   815d0:	442a      	add	r2, r5
   815d2:	2b07      	cmp	r3, #7
   815d4:	f8c9 8000 	str.w	r8, [r9]
   815d8:	f8c9 5004 	str.w	r5, [r9, #4]
   815dc:	9211      	str	r2, [sp, #68]	; 0x44
   815de:	9310      	str	r3, [sp, #64]	; 0x40
   815e0:	dd7a      	ble.n	816d8 <_vfiprintf_r+0x1a8>
   815e2:	2a00      	cmp	r2, #0
   815e4:	f040 84b5 	bne.w	81f52 <_vfiprintf_r+0xa22>
   815e8:	46d1      	mov	r9, sl
   815ea:	9b03      	ldr	r3, [sp, #12]
   815ec:	9210      	str	r2, [sp, #64]	; 0x40
   815ee:	442b      	add	r3, r5
   815f0:	9303      	str	r3, [sp, #12]
   815f2:	7823      	ldrb	r3, [r4, #0]
   815f4:	2b00      	cmp	r3, #0
   815f6:	f000 83e5 	beq.w	81dc4 <_vfiprintf_r+0x894>
   815fa:	2000      	movs	r0, #0
   815fc:	f04f 0300 	mov.w	r3, #0
   81600:	f104 0801 	add.w	r8, r4, #1
   81604:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81608:	7862      	ldrb	r2, [r4, #1]
   8160a:	4606      	mov	r6, r0
   8160c:	4605      	mov	r5, r0
   8160e:	4603      	mov	r3, r0
   81610:	f04f 34ff 	mov.w	r4, #4294967295
   81614:	f108 0801 	add.w	r8, r8, #1
   81618:	f1a2 0120 	sub.w	r1, r2, #32
   8161c:	2958      	cmp	r1, #88	; 0x58
   8161e:	f200 82d9 	bhi.w	81bd4 <_vfiprintf_r+0x6a4>
   81622:	e8df f011 	tbh	[pc, r1, lsl #1]
   81626:	0228      	.short	0x0228
   81628:	02d702d7 	.word	0x02d702d7
   8162c:	02d70230 	.word	0x02d70230
   81630:	02d702d7 	.word	0x02d702d7
   81634:	02d702d7 	.word	0x02d702d7
   81638:	00a002d7 	.word	0x00a002d7
   8163c:	02d70288 	.word	0x02d70288
   81640:	02b800a8 	.word	0x02b800a8
   81644:	01a602d7 	.word	0x01a602d7
   81648:	01ab01ab 	.word	0x01ab01ab
   8164c:	01ab01ab 	.word	0x01ab01ab
   81650:	01ab01ab 	.word	0x01ab01ab
   81654:	01ab01ab 	.word	0x01ab01ab
   81658:	02d701ab 	.word	0x02d701ab
   8165c:	02d702d7 	.word	0x02d702d7
   81660:	02d702d7 	.word	0x02d702d7
   81664:	02d702d7 	.word	0x02d702d7
   81668:	02d702d7 	.word	0x02d702d7
   8166c:	01b902d7 	.word	0x01b902d7
   81670:	02d702d7 	.word	0x02d702d7
   81674:	02d702d7 	.word	0x02d702d7
   81678:	02d702d7 	.word	0x02d702d7
   8167c:	02d702d7 	.word	0x02d702d7
   81680:	02d702d7 	.word	0x02d702d7
   81684:	02d7019e 	.word	0x02d7019e
   81688:	02d702d7 	.word	0x02d702d7
   8168c:	02d702d7 	.word	0x02d702d7
   81690:	02d701a2 	.word	0x02d701a2
   81694:	025a02d7 	.word	0x025a02d7
   81698:	02d702d7 	.word	0x02d702d7
   8169c:	02d702d7 	.word	0x02d702d7
   816a0:	02d702d7 	.word	0x02d702d7
   816a4:	02d702d7 	.word	0x02d702d7
   816a8:	02d702d7 	.word	0x02d702d7
   816ac:	02220261 	.word	0x02220261
   816b0:	02d702d7 	.word	0x02d702d7
   816b4:	027602d7 	.word	0x027602d7
   816b8:	02d70222 	.word	0x02d70222
   816bc:	027b02d7 	.word	0x027b02d7
   816c0:	01fc02d7 	.word	0x01fc02d7
   816c4:	02100189 	.word	0x02100189
   816c8:	02d702d2 	.word	0x02d702d2
   816cc:	02d70295 	.word	0x02d70295
   816d0:	02d700ad 	.word	0x02d700ad
   816d4:	023502d7 	.word	0x023502d7
   816d8:	f109 0908 	add.w	r9, r9, #8
   816dc:	9b03      	ldr	r3, [sp, #12]
   816de:	442b      	add	r3, r5
   816e0:	9303      	str	r3, [sp, #12]
   816e2:	e786      	b.n	815f2 <_vfiprintf_r+0xc2>
   816e4:	4659      	mov	r1, fp
   816e6:	9806      	ldr	r0, [sp, #24]
   816e8:	f000 fdaa 	bl	82240 <__swsetup_r>
   816ec:	bb18      	cbnz	r0, 81736 <_vfiprintf_r+0x206>
   816ee:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   816f2:	f001 031a 	and.w	r3, r1, #26
   816f6:	2b0a      	cmp	r3, #10
   816f8:	f47f af4b 	bne.w	81592 <_vfiprintf_r+0x62>
   816fc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81700:	2b00      	cmp	r3, #0
   81702:	f6ff af46 	blt.w	81592 <_vfiprintf_r+0x62>
   81706:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8170a:	07db      	lsls	r3, r3, #31
   8170c:	d405      	bmi.n	8171a <_vfiprintf_r+0x1ea>
   8170e:	058f      	lsls	r7, r1, #22
   81710:	d403      	bmi.n	8171a <_vfiprintf_r+0x1ea>
   81712:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81716:	f001 fabd 	bl	82c94 <__retarget_lock_release_recursive>
   8171a:	462b      	mov	r3, r5
   8171c:	4642      	mov	r2, r8
   8171e:	4659      	mov	r1, fp
   81720:	9806      	ldr	r0, [sp, #24]
   81722:	f000 fd49 	bl	821b8 <__sbprintf>
   81726:	9003      	str	r0, [sp, #12]
   81728:	9803      	ldr	r0, [sp, #12]
   8172a:	b02d      	add	sp, #180	; 0xb4
   8172c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81730:	f000 feee 	bl	82510 <__sinit>
   81734:	e709      	b.n	8154a <_vfiprintf_r+0x1a>
   81736:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8173a:	07d9      	lsls	r1, r3, #31
   8173c:	d404      	bmi.n	81748 <_vfiprintf_r+0x218>
   8173e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81742:	059a      	lsls	r2, r3, #22
   81744:	f140 84ae 	bpl.w	820a4 <_vfiprintf_r+0xb74>
   81748:	f04f 33ff 	mov.w	r3, #4294967295
   8174c:	9303      	str	r3, [sp, #12]
   8174e:	9803      	ldr	r0, [sp, #12]
   81750:	b02d      	add	sp, #180	; 0xb4
   81752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81756:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8175a:	f001 fa99 	bl	82c90 <__retarget_lock_acquire_recursive>
   8175e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81762:	b281      	uxth	r1, r0
   81764:	e6fb      	b.n	8155e <_vfiprintf_r+0x2e>
   81766:	9907      	ldr	r1, [sp, #28]
   81768:	460a      	mov	r2, r1
   8176a:	680d      	ldr	r5, [r1, #0]
   8176c:	3204      	adds	r2, #4
   8176e:	2d00      	cmp	r5, #0
   81770:	9207      	str	r2, [sp, #28]
   81772:	da02      	bge.n	8177a <_vfiprintf_r+0x24a>
   81774:	426d      	negs	r5, r5
   81776:	f043 0304 	orr.w	r3, r3, #4
   8177a:	f898 2000 	ldrb.w	r2, [r8]
   8177e:	e749      	b.n	81614 <_vfiprintf_r+0xe4>
   81780:	9508      	str	r5, [sp, #32]
   81782:	069e      	lsls	r6, r3, #26
   81784:	f100 845a 	bmi.w	8203c <_vfiprintf_r+0xb0c>
   81788:	9907      	ldr	r1, [sp, #28]
   8178a:	06dd      	lsls	r5, r3, #27
   8178c:	460a      	mov	r2, r1
   8178e:	f100 83ef 	bmi.w	81f70 <_vfiprintf_r+0xa40>
   81792:	0658      	lsls	r0, r3, #25
   81794:	f140 83ec 	bpl.w	81f70 <_vfiprintf_r+0xa40>
   81798:	2700      	movs	r7, #0
   8179a:	2201      	movs	r2, #1
   8179c:	880e      	ldrh	r6, [r1, #0]
   8179e:	3104      	adds	r1, #4
   817a0:	9107      	str	r1, [sp, #28]
   817a2:	f04f 0100 	mov.w	r1, #0
   817a6:	2500      	movs	r5, #0
   817a8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   817ac:	1c61      	adds	r1, r4, #1
   817ae:	f000 8117 	beq.w	819e0 <_vfiprintf_r+0x4b0>
   817b2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   817b6:	9102      	str	r1, [sp, #8]
   817b8:	ea56 0107 	orrs.w	r1, r6, r7
   817bc:	f040 8115 	bne.w	819ea <_vfiprintf_r+0x4ba>
   817c0:	2c00      	cmp	r4, #0
   817c2:	f040 835b 	bne.w	81e7c <_vfiprintf_r+0x94c>
   817c6:	2a00      	cmp	r2, #0
   817c8:	f040 83b6 	bne.w	81f38 <_vfiprintf_r+0xa08>
   817cc:	f013 0301 	ands.w	r3, r3, #1
   817d0:	9305      	str	r3, [sp, #20]
   817d2:	f000 8455 	beq.w	82080 <_vfiprintf_r+0xb50>
   817d6:	2330      	movs	r3, #48	; 0x30
   817d8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   817dc:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   817e0:	9b05      	ldr	r3, [sp, #20]
   817e2:	42a3      	cmp	r3, r4
   817e4:	bfb8      	it	lt
   817e6:	4623      	movlt	r3, r4
   817e8:	9301      	str	r3, [sp, #4]
   817ea:	b10d      	cbz	r5, 817f0 <_vfiprintf_r+0x2c0>
   817ec:	3301      	adds	r3, #1
   817ee:	9301      	str	r3, [sp, #4]
   817f0:	9b02      	ldr	r3, [sp, #8]
   817f2:	f013 0302 	ands.w	r3, r3, #2
   817f6:	9309      	str	r3, [sp, #36]	; 0x24
   817f8:	d002      	beq.n	81800 <_vfiprintf_r+0x2d0>
   817fa:	9b01      	ldr	r3, [sp, #4]
   817fc:	3302      	adds	r3, #2
   817fe:	9301      	str	r3, [sp, #4]
   81800:	9b02      	ldr	r3, [sp, #8]
   81802:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81806:	930a      	str	r3, [sp, #40]	; 0x28
   81808:	f040 8215 	bne.w	81c36 <_vfiprintf_r+0x706>
   8180c:	9b08      	ldr	r3, [sp, #32]
   8180e:	9a01      	ldr	r2, [sp, #4]
   81810:	1a9d      	subs	r5, r3, r2
   81812:	2d00      	cmp	r5, #0
   81814:	f340 820f 	ble.w	81c36 <_vfiprintf_r+0x706>
   81818:	2d10      	cmp	r5, #16
   8181a:	f340 8484 	ble.w	82126 <_vfiprintf_r+0xbf6>
   8181e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81820:	46ce      	mov	lr, r9
   81822:	2710      	movs	r7, #16
   81824:	46a1      	mov	r9, r4
   81826:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81828:	4ec5      	ldr	r6, [pc, #788]	; (81b40 <_vfiprintf_r+0x610>)
   8182a:	4619      	mov	r1, r3
   8182c:	9c06      	ldr	r4, [sp, #24]
   8182e:	e007      	b.n	81840 <_vfiprintf_r+0x310>
   81830:	f101 0c02 	add.w	ip, r1, #2
   81834:	4601      	mov	r1, r0
   81836:	f10e 0e08 	add.w	lr, lr, #8
   8183a:	3d10      	subs	r5, #16
   8183c:	2d10      	cmp	r5, #16
   8183e:	dd11      	ble.n	81864 <_vfiprintf_r+0x334>
   81840:	1c48      	adds	r0, r1, #1
   81842:	3210      	adds	r2, #16
   81844:	2807      	cmp	r0, #7
   81846:	9211      	str	r2, [sp, #68]	; 0x44
   81848:	e88e 00c0 	stmia.w	lr, {r6, r7}
   8184c:	9010      	str	r0, [sp, #64]	; 0x40
   8184e:	ddef      	ble.n	81830 <_vfiprintf_r+0x300>
   81850:	2a00      	cmp	r2, #0
   81852:	f040 81d9 	bne.w	81c08 <_vfiprintf_r+0x6d8>
   81856:	3d10      	subs	r5, #16
   81858:	2d10      	cmp	r5, #16
   8185a:	4611      	mov	r1, r2
   8185c:	f04f 0c01 	mov.w	ip, #1
   81860:	46d6      	mov	lr, sl
   81862:	dced      	bgt.n	81840 <_vfiprintf_r+0x310>
   81864:	464c      	mov	r4, r9
   81866:	4661      	mov	r1, ip
   81868:	46f1      	mov	r9, lr
   8186a:	442a      	add	r2, r5
   8186c:	2907      	cmp	r1, #7
   8186e:	9211      	str	r2, [sp, #68]	; 0x44
   81870:	f8c9 6000 	str.w	r6, [r9]
   81874:	f8c9 5004 	str.w	r5, [r9, #4]
   81878:	9110      	str	r1, [sp, #64]	; 0x40
   8187a:	f300 82eb 	bgt.w	81e54 <_vfiprintf_r+0x924>
   8187e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81882:	f109 0908 	add.w	r9, r9, #8
   81886:	1c48      	adds	r0, r1, #1
   81888:	2d00      	cmp	r5, #0
   8188a:	f040 81dc 	bne.w	81c46 <_vfiprintf_r+0x716>
   8188e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81890:	2b00      	cmp	r3, #0
   81892:	f000 81f6 	beq.w	81c82 <_vfiprintf_r+0x752>
   81896:	2102      	movs	r1, #2
   81898:	ab0e      	add	r3, sp, #56	; 0x38
   8189a:	440a      	add	r2, r1
   8189c:	2807      	cmp	r0, #7
   8189e:	9211      	str	r2, [sp, #68]	; 0x44
   818a0:	9010      	str	r0, [sp, #64]	; 0x40
   818a2:	f8c9 1004 	str.w	r1, [r9, #4]
   818a6:	f8c9 3000 	str.w	r3, [r9]
   818aa:	f340 81e6 	ble.w	81c7a <_vfiprintf_r+0x74a>
   818ae:	2a00      	cmp	r2, #0
   818b0:	f040 8395 	bne.w	81fde <_vfiprintf_r+0xaae>
   818b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   818b6:	2001      	movs	r0, #1
   818b8:	2b80      	cmp	r3, #128	; 0x80
   818ba:	4611      	mov	r1, r2
   818bc:	46d1      	mov	r9, sl
   818be:	f040 81e4 	bne.w	81c8a <_vfiprintf_r+0x75a>
   818c2:	9b08      	ldr	r3, [sp, #32]
   818c4:	9d01      	ldr	r5, [sp, #4]
   818c6:	1b5e      	subs	r6, r3, r5
   818c8:	2e00      	cmp	r6, #0
   818ca:	f340 81de 	ble.w	81c8a <_vfiprintf_r+0x75a>
   818ce:	2e10      	cmp	r6, #16
   818d0:	f340 843c 	ble.w	8214c <_vfiprintf_r+0xc1c>
   818d4:	46cc      	mov	ip, r9
   818d6:	2710      	movs	r7, #16
   818d8:	46a1      	mov	r9, r4
   818da:	4d9a      	ldr	r5, [pc, #616]	; (81b44 <_vfiprintf_r+0x614>)
   818dc:	9c06      	ldr	r4, [sp, #24]
   818de:	e007      	b.n	818f0 <_vfiprintf_r+0x3c0>
   818e0:	f101 0e02 	add.w	lr, r1, #2
   818e4:	4601      	mov	r1, r0
   818e6:	f10c 0c08 	add.w	ip, ip, #8
   818ea:	3e10      	subs	r6, #16
   818ec:	2e10      	cmp	r6, #16
   818ee:	dd11      	ble.n	81914 <_vfiprintf_r+0x3e4>
   818f0:	1c48      	adds	r0, r1, #1
   818f2:	3210      	adds	r2, #16
   818f4:	2807      	cmp	r0, #7
   818f6:	9211      	str	r2, [sp, #68]	; 0x44
   818f8:	e88c 00a0 	stmia.w	ip, {r5, r7}
   818fc:	9010      	str	r0, [sp, #64]	; 0x40
   818fe:	ddef      	ble.n	818e0 <_vfiprintf_r+0x3b0>
   81900:	2a00      	cmp	r2, #0
   81902:	f040 829b 	bne.w	81e3c <_vfiprintf_r+0x90c>
   81906:	3e10      	subs	r6, #16
   81908:	2e10      	cmp	r6, #16
   8190a:	f04f 0e01 	mov.w	lr, #1
   8190e:	4611      	mov	r1, r2
   81910:	46d4      	mov	ip, sl
   81912:	dced      	bgt.n	818f0 <_vfiprintf_r+0x3c0>
   81914:	464c      	mov	r4, r9
   81916:	46e1      	mov	r9, ip
   81918:	4432      	add	r2, r6
   8191a:	f1be 0f07 	cmp.w	lr, #7
   8191e:	9211      	str	r2, [sp, #68]	; 0x44
   81920:	e889 0060 	stmia.w	r9, {r5, r6}
   81924:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81928:	f300 8366 	bgt.w	81ff8 <_vfiprintf_r+0xac8>
   8192c:	f109 0908 	add.w	r9, r9, #8
   81930:	f10e 0001 	add.w	r0, lr, #1
   81934:	4671      	mov	r1, lr
   81936:	e1a8      	b.n	81c8a <_vfiprintf_r+0x75a>
   81938:	9508      	str	r5, [sp, #32]
   8193a:	f013 0220 	ands.w	r2, r3, #32
   8193e:	f040 8389 	bne.w	82054 <_vfiprintf_r+0xb24>
   81942:	f013 0110 	ands.w	r1, r3, #16
   81946:	f040 8319 	bne.w	81f7c <_vfiprintf_r+0xa4c>
   8194a:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   8194e:	f000 8315 	beq.w	81f7c <_vfiprintf_r+0xa4c>
   81952:	9807      	ldr	r0, [sp, #28]
   81954:	460a      	mov	r2, r1
   81956:	4601      	mov	r1, r0
   81958:	3104      	adds	r1, #4
   8195a:	8806      	ldrh	r6, [r0, #0]
   8195c:	2700      	movs	r7, #0
   8195e:	9107      	str	r1, [sp, #28]
   81960:	e71f      	b.n	817a2 <_vfiprintf_r+0x272>
   81962:	9508      	str	r5, [sp, #32]
   81964:	f043 0310 	orr.w	r3, r3, #16
   81968:	e7e7      	b.n	8193a <_vfiprintf_r+0x40a>
   8196a:	9508      	str	r5, [sp, #32]
   8196c:	f043 0310 	orr.w	r3, r3, #16
   81970:	e707      	b.n	81782 <_vfiprintf_r+0x252>
   81972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81976:	f898 2000 	ldrb.w	r2, [r8]
   8197a:	e64b      	b.n	81614 <_vfiprintf_r+0xe4>
   8197c:	2500      	movs	r5, #0
   8197e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81982:	f818 2b01 	ldrb.w	r2, [r8], #1
   81986:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8198a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   8198e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81992:	2909      	cmp	r1, #9
   81994:	d9f5      	bls.n	81982 <_vfiprintf_r+0x452>
   81996:	e63f      	b.n	81618 <_vfiprintf_r+0xe8>
   81998:	9508      	str	r5, [sp, #32]
   8199a:	2800      	cmp	r0, #0
   8199c:	f040 8402 	bne.w	821a4 <_vfiprintf_r+0xc74>
   819a0:	f043 0310 	orr.w	r3, r3, #16
   819a4:	069e      	lsls	r6, r3, #26
   819a6:	f100 833d 	bmi.w	82024 <_vfiprintf_r+0xaf4>
   819aa:	9907      	ldr	r1, [sp, #28]
   819ac:	06dd      	lsls	r5, r3, #27
   819ae:	460a      	mov	r2, r1
   819b0:	f100 82f0 	bmi.w	81f94 <_vfiprintf_r+0xa64>
   819b4:	0658      	lsls	r0, r3, #25
   819b6:	f140 82ed 	bpl.w	81f94 <_vfiprintf_r+0xa64>
   819ba:	f9b1 6000 	ldrsh.w	r6, [r1]
   819be:	3204      	adds	r2, #4
   819c0:	17f7      	asrs	r7, r6, #31
   819c2:	4630      	mov	r0, r6
   819c4:	4639      	mov	r1, r7
   819c6:	9207      	str	r2, [sp, #28]
   819c8:	2800      	cmp	r0, #0
   819ca:	f171 0200 	sbcs.w	r2, r1, #0
   819ce:	f2c0 835a 	blt.w	82086 <_vfiprintf_r+0xb56>
   819d2:	1c61      	adds	r1, r4, #1
   819d4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   819d8:	f04f 0201 	mov.w	r2, #1
   819dc:	f47f aee9 	bne.w	817b2 <_vfiprintf_r+0x282>
   819e0:	ea56 0107 	orrs.w	r1, r6, r7
   819e4:	f000 824b 	beq.w	81e7e <_vfiprintf_r+0x94e>
   819e8:	9302      	str	r3, [sp, #8]
   819ea:	2a01      	cmp	r2, #1
   819ec:	f000 828a 	beq.w	81f04 <_vfiprintf_r+0x9d4>
   819f0:	2a02      	cmp	r2, #2
   819f2:	f040 825a 	bne.w	81eaa <_vfiprintf_r+0x97a>
   819f6:	46d3      	mov	fp, sl
   819f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   819fa:	0933      	lsrs	r3, r6, #4
   819fc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81a00:	0939      	lsrs	r1, r7, #4
   81a02:	f006 020f 	and.w	r2, r6, #15
   81a06:	460f      	mov	r7, r1
   81a08:	461e      	mov	r6, r3
   81a0a:	5c83      	ldrb	r3, [r0, r2]
   81a0c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81a10:	ea56 0307 	orrs.w	r3, r6, r7
   81a14:	d1f1      	bne.n	819fa <_vfiprintf_r+0x4ca>
   81a16:	ebaa 030b 	sub.w	r3, sl, fp
   81a1a:	9305      	str	r3, [sp, #20]
   81a1c:	e6e0      	b.n	817e0 <_vfiprintf_r+0x2b0>
   81a1e:	2800      	cmp	r0, #0
   81a20:	f040 83bd 	bne.w	8219e <_vfiprintf_r+0xc6e>
   81a24:	0699      	lsls	r1, r3, #26
   81a26:	f100 8359 	bmi.w	820dc <_vfiprintf_r+0xbac>
   81a2a:	06da      	lsls	r2, r3, #27
   81a2c:	f100 80e5 	bmi.w	81bfa <_vfiprintf_r+0x6ca>
   81a30:	065b      	lsls	r3, r3, #25
   81a32:	f140 80e2 	bpl.w	81bfa <_vfiprintf_r+0x6ca>
   81a36:	9a07      	ldr	r2, [sp, #28]
   81a38:	6813      	ldr	r3, [r2, #0]
   81a3a:	3204      	adds	r2, #4
   81a3c:	9207      	str	r2, [sp, #28]
   81a3e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   81a42:	801a      	strh	r2, [r3, #0]
   81a44:	e5b1      	b.n	815aa <_vfiprintf_r+0x7a>
   81a46:	2278      	movs	r2, #120	; 0x78
   81a48:	2130      	movs	r1, #48	; 0x30
   81a4a:	9508      	str	r5, [sp, #32]
   81a4c:	9d07      	ldr	r5, [sp, #28]
   81a4e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81a52:	1d2a      	adds	r2, r5, #4
   81a54:	9207      	str	r2, [sp, #28]
   81a56:	4a3c      	ldr	r2, [pc, #240]	; (81b48 <_vfiprintf_r+0x618>)
   81a58:	682e      	ldr	r6, [r5, #0]
   81a5a:	920b      	str	r2, [sp, #44]	; 0x2c
   81a5c:	f043 0302 	orr.w	r3, r3, #2
   81a60:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81a64:	2700      	movs	r7, #0
   81a66:	2202      	movs	r2, #2
   81a68:	e69b      	b.n	817a2 <_vfiprintf_r+0x272>
   81a6a:	9508      	str	r5, [sp, #32]
   81a6c:	2800      	cmp	r0, #0
   81a6e:	d099      	beq.n	819a4 <_vfiprintf_r+0x474>
   81a70:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81a74:	e796      	b.n	819a4 <_vfiprintf_r+0x474>
   81a76:	f898 2000 	ldrb.w	r2, [r8]
   81a7a:	2e00      	cmp	r6, #0
   81a7c:	f47f adca 	bne.w	81614 <_vfiprintf_r+0xe4>
   81a80:	2001      	movs	r0, #1
   81a82:	2620      	movs	r6, #32
   81a84:	e5c6      	b.n	81614 <_vfiprintf_r+0xe4>
   81a86:	f043 0301 	orr.w	r3, r3, #1
   81a8a:	f898 2000 	ldrb.w	r2, [r8]
   81a8e:	e5c1      	b.n	81614 <_vfiprintf_r+0xe4>
   81a90:	9508      	str	r5, [sp, #32]
   81a92:	2800      	cmp	r0, #0
   81a94:	f040 8380 	bne.w	82198 <_vfiprintf_r+0xc68>
   81a98:	492b      	ldr	r1, [pc, #172]	; (81b48 <_vfiprintf_r+0x618>)
   81a9a:	910b      	str	r1, [sp, #44]	; 0x2c
   81a9c:	069f      	lsls	r7, r3, #26
   81a9e:	f100 82e5 	bmi.w	8206c <_vfiprintf_r+0xb3c>
   81aa2:	9807      	ldr	r0, [sp, #28]
   81aa4:	06de      	lsls	r6, r3, #27
   81aa6:	4601      	mov	r1, r0
   81aa8:	f100 826f 	bmi.w	81f8a <_vfiprintf_r+0xa5a>
   81aac:	065d      	lsls	r5, r3, #25
   81aae:	f140 826c 	bpl.w	81f8a <_vfiprintf_r+0xa5a>
   81ab2:	2700      	movs	r7, #0
   81ab4:	3104      	adds	r1, #4
   81ab6:	8806      	ldrh	r6, [r0, #0]
   81ab8:	9107      	str	r1, [sp, #28]
   81aba:	07d8      	lsls	r0, r3, #31
   81abc:	f140 8220 	bpl.w	81f00 <_vfiprintf_r+0x9d0>
   81ac0:	ea56 0107 	orrs.w	r1, r6, r7
   81ac4:	f000 821c 	beq.w	81f00 <_vfiprintf_r+0x9d0>
   81ac8:	2130      	movs	r1, #48	; 0x30
   81aca:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81ace:	f043 0302 	orr.w	r3, r3, #2
   81ad2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81ad6:	2202      	movs	r2, #2
   81ad8:	e663      	b.n	817a2 <_vfiprintf_r+0x272>
   81ada:	9508      	str	r5, [sp, #32]
   81adc:	2800      	cmp	r0, #0
   81ade:	f040 8355 	bne.w	8218c <_vfiprintf_r+0xc5c>
   81ae2:	491a      	ldr	r1, [pc, #104]	; (81b4c <_vfiprintf_r+0x61c>)
   81ae4:	910b      	str	r1, [sp, #44]	; 0x2c
   81ae6:	e7d9      	b.n	81a9c <_vfiprintf_r+0x56c>
   81ae8:	2201      	movs	r2, #1
   81aea:	9807      	ldr	r0, [sp, #28]
   81aec:	4611      	mov	r1, r2
   81aee:	9201      	str	r2, [sp, #4]
   81af0:	6802      	ldr	r2, [r0, #0]
   81af2:	f04f 0400 	mov.w	r4, #0
   81af6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81afa:	4602      	mov	r2, r0
   81afc:	3204      	adds	r2, #4
   81afe:	9508      	str	r5, [sp, #32]
   81b00:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81b04:	9105      	str	r1, [sp, #20]
   81b06:	9207      	str	r2, [sp, #28]
   81b08:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81b0c:	9302      	str	r3, [sp, #8]
   81b0e:	2400      	movs	r4, #0
   81b10:	e66e      	b.n	817f0 <_vfiprintf_r+0x2c0>
   81b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81b16:	f898 2000 	ldrb.w	r2, [r8]
   81b1a:	e57b      	b.n	81614 <_vfiprintf_r+0xe4>
   81b1c:	f898 2000 	ldrb.w	r2, [r8]
   81b20:	2a6c      	cmp	r2, #108	; 0x6c
   81b22:	bf03      	ittte	eq
   81b24:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81b28:	f043 0320 	orreq.w	r3, r3, #32
   81b2c:	f108 0801 	addeq.w	r8, r8, #1
   81b30:	f043 0310 	orrne.w	r3, r3, #16
   81b34:	e56e      	b.n	81614 <_vfiprintf_r+0xe4>
   81b36:	f898 2000 	ldrb.w	r2, [r8]
   81b3a:	2001      	movs	r0, #1
   81b3c:	262b      	movs	r6, #43	; 0x2b
   81b3e:	e569      	b.n	81614 <_vfiprintf_r+0xe4>
   81b40:	00083f98 	.word	0x00083f98
   81b44:	00083fa8 	.word	0x00083fa8
   81b48:	00083f7c 	.word	0x00083f7c
   81b4c:	00083f68 	.word	0x00083f68
   81b50:	f04f 0200 	mov.w	r2, #0
   81b54:	9907      	ldr	r1, [sp, #28]
   81b56:	9508      	str	r5, [sp, #32]
   81b58:	f8d1 b000 	ldr.w	fp, [r1]
   81b5c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81b60:	1d0d      	adds	r5, r1, #4
   81b62:	f1bb 0f00 	cmp.w	fp, #0
   81b66:	f000 82e4 	beq.w	82132 <_vfiprintf_r+0xc02>
   81b6a:	1c67      	adds	r7, r4, #1
   81b6c:	f000 82c3 	beq.w	820f6 <_vfiprintf_r+0xbc6>
   81b70:	4622      	mov	r2, r4
   81b72:	2100      	movs	r1, #0
   81b74:	4658      	mov	r0, fp
   81b76:	9301      	str	r3, [sp, #4]
   81b78:	f001 fbc6 	bl	83308 <memchr>
   81b7c:	9b01      	ldr	r3, [sp, #4]
   81b7e:	2800      	cmp	r0, #0
   81b80:	f000 82e8 	beq.w	82154 <_vfiprintf_r+0xc24>
   81b84:	eba0 020b 	sub.w	r2, r0, fp
   81b88:	9507      	str	r5, [sp, #28]
   81b8a:	9205      	str	r2, [sp, #20]
   81b8c:	9302      	str	r3, [sp, #8]
   81b8e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81b92:	2400      	movs	r4, #0
   81b94:	e624      	b.n	817e0 <_vfiprintf_r+0x2b0>
   81b96:	f898 2000 	ldrb.w	r2, [r8]
   81b9a:	f108 0701 	add.w	r7, r8, #1
   81b9e:	2a2a      	cmp	r2, #42	; 0x2a
   81ba0:	f000 82e9 	beq.w	82176 <_vfiprintf_r+0xc46>
   81ba4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81ba8:	2909      	cmp	r1, #9
   81baa:	46b8      	mov	r8, r7
   81bac:	f04f 0400 	mov.w	r4, #0
   81bb0:	f63f ad32 	bhi.w	81618 <_vfiprintf_r+0xe8>
   81bb4:	f818 2b01 	ldrb.w	r2, [r8], #1
   81bb8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81bbc:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81bc0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81bc4:	2909      	cmp	r1, #9
   81bc6:	d9f5      	bls.n	81bb4 <_vfiprintf_r+0x684>
   81bc8:	e526      	b.n	81618 <_vfiprintf_r+0xe8>
   81bca:	f043 0320 	orr.w	r3, r3, #32
   81bce:	f898 2000 	ldrb.w	r2, [r8]
   81bd2:	e51f      	b.n	81614 <_vfiprintf_r+0xe4>
   81bd4:	9508      	str	r5, [sp, #32]
   81bd6:	2800      	cmp	r0, #0
   81bd8:	f040 82db 	bne.w	82192 <_vfiprintf_r+0xc62>
   81bdc:	2a00      	cmp	r2, #0
   81bde:	f000 80f1 	beq.w	81dc4 <_vfiprintf_r+0x894>
   81be2:	2101      	movs	r1, #1
   81be4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81be8:	f04f 0200 	mov.w	r2, #0
   81bec:	9101      	str	r1, [sp, #4]
   81bee:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81bf2:	9105      	str	r1, [sp, #20]
   81bf4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81bf8:	e788      	b.n	81b0c <_vfiprintf_r+0x5dc>
   81bfa:	9a07      	ldr	r2, [sp, #28]
   81bfc:	6813      	ldr	r3, [r2, #0]
   81bfe:	3204      	adds	r2, #4
   81c00:	9207      	str	r2, [sp, #28]
   81c02:	9a03      	ldr	r2, [sp, #12]
   81c04:	601a      	str	r2, [r3, #0]
   81c06:	e4d0      	b.n	815aa <_vfiprintf_r+0x7a>
   81c08:	aa0f      	add	r2, sp, #60	; 0x3c
   81c0a:	9904      	ldr	r1, [sp, #16]
   81c0c:	4620      	mov	r0, r4
   81c0e:	f7ff fc4f 	bl	814b0 <__sprint_r.part.0>
   81c12:	2800      	cmp	r0, #0
   81c14:	f040 8143 	bne.w	81e9e <_vfiprintf_r+0x96e>
   81c18:	9910      	ldr	r1, [sp, #64]	; 0x40
   81c1a:	46d6      	mov	lr, sl
   81c1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81c1e:	f101 0c01 	add.w	ip, r1, #1
   81c22:	e60a      	b.n	8183a <_vfiprintf_r+0x30a>
   81c24:	aa0f      	add	r2, sp, #60	; 0x3c
   81c26:	9904      	ldr	r1, [sp, #16]
   81c28:	9806      	ldr	r0, [sp, #24]
   81c2a:	f7ff fc41 	bl	814b0 <__sprint_r.part.0>
   81c2e:	2800      	cmp	r0, #0
   81c30:	f040 8135 	bne.w	81e9e <_vfiprintf_r+0x96e>
   81c34:	46d1      	mov	r9, sl
   81c36:	9910      	ldr	r1, [sp, #64]	; 0x40
   81c38:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81c3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81c3e:	1c48      	adds	r0, r1, #1
   81c40:	2d00      	cmp	r5, #0
   81c42:	f43f ae24 	beq.w	8188e <_vfiprintf_r+0x35e>
   81c46:	2101      	movs	r1, #1
   81c48:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81c4c:	440a      	add	r2, r1
   81c4e:	2807      	cmp	r0, #7
   81c50:	9211      	str	r2, [sp, #68]	; 0x44
   81c52:	9010      	str	r0, [sp, #64]	; 0x40
   81c54:	f8c9 1004 	str.w	r1, [r9, #4]
   81c58:	f8c9 5000 	str.w	r5, [r9]
   81c5c:	f340 8109 	ble.w	81e72 <_vfiprintf_r+0x942>
   81c60:	2a00      	cmp	r2, #0
   81c62:	f040 81af 	bne.w	81fc4 <_vfiprintf_r+0xa94>
   81c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81c68:	2b00      	cmp	r3, #0
   81c6a:	f43f ae23 	beq.w	818b4 <_vfiprintf_r+0x384>
   81c6e:	2202      	movs	r2, #2
   81c70:	4608      	mov	r0, r1
   81c72:	46d1      	mov	r9, sl
   81c74:	ab0e      	add	r3, sp, #56	; 0x38
   81c76:	921d      	str	r2, [sp, #116]	; 0x74
   81c78:	931c      	str	r3, [sp, #112]	; 0x70
   81c7a:	4601      	mov	r1, r0
   81c7c:	f109 0908 	add.w	r9, r9, #8
   81c80:	3001      	adds	r0, #1
   81c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81c84:	2b80      	cmp	r3, #128	; 0x80
   81c86:	f43f ae1c 	beq.w	818c2 <_vfiprintf_r+0x392>
   81c8a:	9b05      	ldr	r3, [sp, #20]
   81c8c:	1ae4      	subs	r4, r4, r3
   81c8e:	2c00      	cmp	r4, #0
   81c90:	dd2f      	ble.n	81cf2 <_vfiprintf_r+0x7c2>
   81c92:	2c10      	cmp	r4, #16
   81c94:	f340 8220 	ble.w	820d8 <_vfiprintf_r+0xba8>
   81c98:	46ce      	mov	lr, r9
   81c9a:	2610      	movs	r6, #16
   81c9c:	4db2      	ldr	r5, [pc, #712]	; (81f68 <_vfiprintf_r+0xa38>)
   81c9e:	9f06      	ldr	r7, [sp, #24]
   81ca0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81ca4:	e006      	b.n	81cb4 <_vfiprintf_r+0x784>
   81ca6:	1c88      	adds	r0, r1, #2
   81ca8:	4619      	mov	r1, r3
   81caa:	f10e 0e08 	add.w	lr, lr, #8
   81cae:	3c10      	subs	r4, #16
   81cb0:	2c10      	cmp	r4, #16
   81cb2:	dd10      	ble.n	81cd6 <_vfiprintf_r+0x7a6>
   81cb4:	1c4b      	adds	r3, r1, #1
   81cb6:	3210      	adds	r2, #16
   81cb8:	2b07      	cmp	r3, #7
   81cba:	9211      	str	r2, [sp, #68]	; 0x44
   81cbc:	e88e 0060 	stmia.w	lr, {r5, r6}
   81cc0:	9310      	str	r3, [sp, #64]	; 0x40
   81cc2:	ddf0      	ble.n	81ca6 <_vfiprintf_r+0x776>
   81cc4:	2a00      	cmp	r2, #0
   81cc6:	d165      	bne.n	81d94 <_vfiprintf_r+0x864>
   81cc8:	3c10      	subs	r4, #16
   81cca:	2c10      	cmp	r4, #16
   81ccc:	f04f 0001 	mov.w	r0, #1
   81cd0:	4611      	mov	r1, r2
   81cd2:	46d6      	mov	lr, sl
   81cd4:	dcee      	bgt.n	81cb4 <_vfiprintf_r+0x784>
   81cd6:	46f1      	mov	r9, lr
   81cd8:	4422      	add	r2, r4
   81cda:	2807      	cmp	r0, #7
   81cdc:	9211      	str	r2, [sp, #68]	; 0x44
   81cde:	f8c9 5000 	str.w	r5, [r9]
   81ce2:	f8c9 4004 	str.w	r4, [r9, #4]
   81ce6:	9010      	str	r0, [sp, #64]	; 0x40
   81ce8:	f300 8085 	bgt.w	81df6 <_vfiprintf_r+0x8c6>
   81cec:	f109 0908 	add.w	r9, r9, #8
   81cf0:	3001      	adds	r0, #1
   81cf2:	9905      	ldr	r1, [sp, #20]
   81cf4:	2807      	cmp	r0, #7
   81cf6:	440a      	add	r2, r1
   81cf8:	9211      	str	r2, [sp, #68]	; 0x44
   81cfa:	f8c9 b000 	str.w	fp, [r9]
   81cfe:	f8c9 1004 	str.w	r1, [r9, #4]
   81d02:	9010      	str	r0, [sp, #64]	; 0x40
   81d04:	f340 8082 	ble.w	81e0c <_vfiprintf_r+0x8dc>
   81d08:	2a00      	cmp	r2, #0
   81d0a:	f040 8118 	bne.w	81f3e <_vfiprintf_r+0xa0e>
   81d0e:	9b02      	ldr	r3, [sp, #8]
   81d10:	9210      	str	r2, [sp, #64]	; 0x40
   81d12:	0758      	lsls	r0, r3, #29
   81d14:	d535      	bpl.n	81d82 <_vfiprintf_r+0x852>
   81d16:	9b08      	ldr	r3, [sp, #32]
   81d18:	9901      	ldr	r1, [sp, #4]
   81d1a:	1a5c      	subs	r4, r3, r1
   81d1c:	2c00      	cmp	r4, #0
   81d1e:	f340 80e7 	ble.w	81ef0 <_vfiprintf_r+0x9c0>
   81d22:	46d1      	mov	r9, sl
   81d24:	2c10      	cmp	r4, #16
   81d26:	f340 820d 	ble.w	82144 <_vfiprintf_r+0xc14>
   81d2a:	2510      	movs	r5, #16
   81d2c:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d2e:	4e8f      	ldr	r6, [pc, #572]	; (81f6c <_vfiprintf_r+0xa3c>)
   81d30:	9f06      	ldr	r7, [sp, #24]
   81d32:	f8dd b010 	ldr.w	fp, [sp, #16]
   81d36:	e006      	b.n	81d46 <_vfiprintf_r+0x816>
   81d38:	1c88      	adds	r0, r1, #2
   81d3a:	4619      	mov	r1, r3
   81d3c:	f109 0908 	add.w	r9, r9, #8
   81d40:	3c10      	subs	r4, #16
   81d42:	2c10      	cmp	r4, #16
   81d44:	dd11      	ble.n	81d6a <_vfiprintf_r+0x83a>
   81d46:	1c4b      	adds	r3, r1, #1
   81d48:	3210      	adds	r2, #16
   81d4a:	2b07      	cmp	r3, #7
   81d4c:	9211      	str	r2, [sp, #68]	; 0x44
   81d4e:	f8c9 6000 	str.w	r6, [r9]
   81d52:	f8c9 5004 	str.w	r5, [r9, #4]
   81d56:	9310      	str	r3, [sp, #64]	; 0x40
   81d58:	ddee      	ble.n	81d38 <_vfiprintf_r+0x808>
   81d5a:	bb42      	cbnz	r2, 81dae <_vfiprintf_r+0x87e>
   81d5c:	3c10      	subs	r4, #16
   81d5e:	2c10      	cmp	r4, #16
   81d60:	f04f 0001 	mov.w	r0, #1
   81d64:	4611      	mov	r1, r2
   81d66:	46d1      	mov	r9, sl
   81d68:	dced      	bgt.n	81d46 <_vfiprintf_r+0x816>
   81d6a:	4422      	add	r2, r4
   81d6c:	2807      	cmp	r0, #7
   81d6e:	9211      	str	r2, [sp, #68]	; 0x44
   81d70:	f8c9 6000 	str.w	r6, [r9]
   81d74:	f8c9 4004 	str.w	r4, [r9, #4]
   81d78:	9010      	str	r0, [sp, #64]	; 0x40
   81d7a:	dd51      	ble.n	81e20 <_vfiprintf_r+0x8f0>
   81d7c:	2a00      	cmp	r2, #0
   81d7e:	f040 819a 	bne.w	820b6 <_vfiprintf_r+0xb86>
   81d82:	9b03      	ldr	r3, [sp, #12]
   81d84:	9a08      	ldr	r2, [sp, #32]
   81d86:	9901      	ldr	r1, [sp, #4]
   81d88:	428a      	cmp	r2, r1
   81d8a:	bfac      	ite	ge
   81d8c:	189b      	addge	r3, r3, r2
   81d8e:	185b      	addlt	r3, r3, r1
   81d90:	9303      	str	r3, [sp, #12]
   81d92:	e04e      	b.n	81e32 <_vfiprintf_r+0x902>
   81d94:	aa0f      	add	r2, sp, #60	; 0x3c
   81d96:	4649      	mov	r1, r9
   81d98:	4638      	mov	r0, r7
   81d9a:	f7ff fb89 	bl	814b0 <__sprint_r.part.0>
   81d9e:	2800      	cmp	r0, #0
   81da0:	f040 813e 	bne.w	82020 <_vfiprintf_r+0xaf0>
   81da4:	9910      	ldr	r1, [sp, #64]	; 0x40
   81da6:	46d6      	mov	lr, sl
   81da8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81daa:	1c48      	adds	r0, r1, #1
   81dac:	e77f      	b.n	81cae <_vfiprintf_r+0x77e>
   81dae:	aa0f      	add	r2, sp, #60	; 0x3c
   81db0:	4659      	mov	r1, fp
   81db2:	4638      	mov	r0, r7
   81db4:	f7ff fb7c 	bl	814b0 <__sprint_r.part.0>
   81db8:	b960      	cbnz	r0, 81dd4 <_vfiprintf_r+0x8a4>
   81dba:	9910      	ldr	r1, [sp, #64]	; 0x40
   81dbc:	46d1      	mov	r9, sl
   81dbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81dc0:	1c48      	adds	r0, r1, #1
   81dc2:	e7bd      	b.n	81d40 <_vfiprintf_r+0x810>
   81dc4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81dc6:	f8dd b010 	ldr.w	fp, [sp, #16]
   81dca:	2b00      	cmp	r3, #0
   81dcc:	f040 81ca 	bne.w	82164 <_vfiprintf_r+0xc34>
   81dd0:	2300      	movs	r3, #0
   81dd2:	9310      	str	r3, [sp, #64]	; 0x40
   81dd4:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81dd8:	f013 0f01 	tst.w	r3, #1
   81ddc:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81de0:	d102      	bne.n	81de8 <_vfiprintf_r+0x8b8>
   81de2:	059a      	lsls	r2, r3, #22
   81de4:	f140 80dd 	bpl.w	81fa2 <_vfiprintf_r+0xa72>
   81de8:	065b      	lsls	r3, r3, #25
   81dea:	f53f acad 	bmi.w	81748 <_vfiprintf_r+0x218>
   81dee:	9803      	ldr	r0, [sp, #12]
   81df0:	b02d      	add	sp, #180	; 0xb4
   81df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81df6:	2a00      	cmp	r2, #0
   81df8:	f040 8105 	bne.w	82006 <_vfiprintf_r+0xad6>
   81dfc:	2301      	movs	r3, #1
   81dfe:	46d1      	mov	r9, sl
   81e00:	9a05      	ldr	r2, [sp, #20]
   81e02:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81e06:	921d      	str	r2, [sp, #116]	; 0x74
   81e08:	9211      	str	r2, [sp, #68]	; 0x44
   81e0a:	9310      	str	r3, [sp, #64]	; 0x40
   81e0c:	f109 0908 	add.w	r9, r9, #8
   81e10:	9b02      	ldr	r3, [sp, #8]
   81e12:	0759      	lsls	r1, r3, #29
   81e14:	d504      	bpl.n	81e20 <_vfiprintf_r+0x8f0>
   81e16:	9b08      	ldr	r3, [sp, #32]
   81e18:	9901      	ldr	r1, [sp, #4]
   81e1a:	1a5c      	subs	r4, r3, r1
   81e1c:	2c00      	cmp	r4, #0
   81e1e:	dc81      	bgt.n	81d24 <_vfiprintf_r+0x7f4>
   81e20:	9b03      	ldr	r3, [sp, #12]
   81e22:	9908      	ldr	r1, [sp, #32]
   81e24:	9801      	ldr	r0, [sp, #4]
   81e26:	4281      	cmp	r1, r0
   81e28:	bfac      	ite	ge
   81e2a:	185b      	addge	r3, r3, r1
   81e2c:	181b      	addlt	r3, r3, r0
   81e2e:	9303      	str	r3, [sp, #12]
   81e30:	bb72      	cbnz	r2, 81e90 <_vfiprintf_r+0x960>
   81e32:	2300      	movs	r3, #0
   81e34:	46d1      	mov	r9, sl
   81e36:	9310      	str	r3, [sp, #64]	; 0x40
   81e38:	f7ff bbb7 	b.w	815aa <_vfiprintf_r+0x7a>
   81e3c:	aa0f      	add	r2, sp, #60	; 0x3c
   81e3e:	9904      	ldr	r1, [sp, #16]
   81e40:	4620      	mov	r0, r4
   81e42:	f7ff fb35 	bl	814b0 <__sprint_r.part.0>
   81e46:	bb50      	cbnz	r0, 81e9e <_vfiprintf_r+0x96e>
   81e48:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e4a:	46d4      	mov	ip, sl
   81e4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e4e:	f101 0e01 	add.w	lr, r1, #1
   81e52:	e54a      	b.n	818ea <_vfiprintf_r+0x3ba>
   81e54:	2a00      	cmp	r2, #0
   81e56:	f47f aee5 	bne.w	81c24 <_vfiprintf_r+0x6f4>
   81e5a:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81e5e:	2900      	cmp	r1, #0
   81e60:	f000 811a 	beq.w	82098 <_vfiprintf_r+0xb68>
   81e64:	2201      	movs	r2, #1
   81e66:	46d1      	mov	r9, sl
   81e68:	4610      	mov	r0, r2
   81e6a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81e6e:	921d      	str	r2, [sp, #116]	; 0x74
   81e70:	911c      	str	r1, [sp, #112]	; 0x70
   81e72:	4601      	mov	r1, r0
   81e74:	f109 0908 	add.w	r9, r9, #8
   81e78:	3001      	adds	r0, #1
   81e7a:	e508      	b.n	8188e <_vfiprintf_r+0x35e>
   81e7c:	9b02      	ldr	r3, [sp, #8]
   81e7e:	2a01      	cmp	r2, #1
   81e80:	f000 8097 	beq.w	81fb2 <_vfiprintf_r+0xa82>
   81e84:	2a02      	cmp	r2, #2
   81e86:	d10d      	bne.n	81ea4 <_vfiprintf_r+0x974>
   81e88:	9302      	str	r3, [sp, #8]
   81e8a:	2600      	movs	r6, #0
   81e8c:	2700      	movs	r7, #0
   81e8e:	e5b2      	b.n	819f6 <_vfiprintf_r+0x4c6>
   81e90:	aa0f      	add	r2, sp, #60	; 0x3c
   81e92:	9904      	ldr	r1, [sp, #16]
   81e94:	9806      	ldr	r0, [sp, #24]
   81e96:	f7ff fb0b 	bl	814b0 <__sprint_r.part.0>
   81e9a:	2800      	cmp	r0, #0
   81e9c:	d0c9      	beq.n	81e32 <_vfiprintf_r+0x902>
   81e9e:	f8dd b010 	ldr.w	fp, [sp, #16]
   81ea2:	e797      	b.n	81dd4 <_vfiprintf_r+0x8a4>
   81ea4:	2600      	movs	r6, #0
   81ea6:	2700      	movs	r7, #0
   81ea8:	9302      	str	r3, [sp, #8]
   81eaa:	4651      	mov	r1, sl
   81eac:	e000      	b.n	81eb0 <_vfiprintf_r+0x980>
   81eae:	4659      	mov	r1, fp
   81eb0:	08f2      	lsrs	r2, r6, #3
   81eb2:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81eb6:	08f8      	lsrs	r0, r7, #3
   81eb8:	f006 0307 	and.w	r3, r6, #7
   81ebc:	4607      	mov	r7, r0
   81ebe:	4616      	mov	r6, r2
   81ec0:	3330      	adds	r3, #48	; 0x30
   81ec2:	ea56 0207 	orrs.w	r2, r6, r7
   81ec6:	f801 3c01 	strb.w	r3, [r1, #-1]
   81eca:	f101 3bff 	add.w	fp, r1, #4294967295
   81ece:	d1ee      	bne.n	81eae <_vfiprintf_r+0x97e>
   81ed0:	9a02      	ldr	r2, [sp, #8]
   81ed2:	07d6      	lsls	r6, r2, #31
   81ed4:	f57f ad9f 	bpl.w	81a16 <_vfiprintf_r+0x4e6>
   81ed8:	2b30      	cmp	r3, #48	; 0x30
   81eda:	f43f ad9c 	beq.w	81a16 <_vfiprintf_r+0x4e6>
   81ede:	2330      	movs	r3, #48	; 0x30
   81ee0:	3902      	subs	r1, #2
   81ee2:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81ee6:	ebaa 0301 	sub.w	r3, sl, r1
   81eea:	9305      	str	r3, [sp, #20]
   81eec:	468b      	mov	fp, r1
   81eee:	e477      	b.n	817e0 <_vfiprintf_r+0x2b0>
   81ef0:	9b03      	ldr	r3, [sp, #12]
   81ef2:	9a08      	ldr	r2, [sp, #32]
   81ef4:	428a      	cmp	r2, r1
   81ef6:	bfac      	ite	ge
   81ef8:	189b      	addge	r3, r3, r2
   81efa:	185b      	addlt	r3, r3, r1
   81efc:	9303      	str	r3, [sp, #12]
   81efe:	e798      	b.n	81e32 <_vfiprintf_r+0x902>
   81f00:	2202      	movs	r2, #2
   81f02:	e44e      	b.n	817a2 <_vfiprintf_r+0x272>
   81f04:	2f00      	cmp	r7, #0
   81f06:	bf08      	it	eq
   81f08:	2e0a      	cmpeq	r6, #10
   81f0a:	d351      	bcc.n	81fb0 <_vfiprintf_r+0xa80>
   81f0c:	46d3      	mov	fp, sl
   81f0e:	4630      	mov	r0, r6
   81f10:	4639      	mov	r1, r7
   81f12:	220a      	movs	r2, #10
   81f14:	2300      	movs	r3, #0
   81f16:	f001 fe85 	bl	83c24 <__aeabi_uldivmod>
   81f1a:	3230      	adds	r2, #48	; 0x30
   81f1c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81f20:	4630      	mov	r0, r6
   81f22:	4639      	mov	r1, r7
   81f24:	2300      	movs	r3, #0
   81f26:	220a      	movs	r2, #10
   81f28:	f001 fe7c 	bl	83c24 <__aeabi_uldivmod>
   81f2c:	4606      	mov	r6, r0
   81f2e:	460f      	mov	r7, r1
   81f30:	ea56 0307 	orrs.w	r3, r6, r7
   81f34:	d1eb      	bne.n	81f0e <_vfiprintf_r+0x9de>
   81f36:	e56e      	b.n	81a16 <_vfiprintf_r+0x4e6>
   81f38:	9405      	str	r4, [sp, #20]
   81f3a:	46d3      	mov	fp, sl
   81f3c:	e450      	b.n	817e0 <_vfiprintf_r+0x2b0>
   81f3e:	aa0f      	add	r2, sp, #60	; 0x3c
   81f40:	9904      	ldr	r1, [sp, #16]
   81f42:	9806      	ldr	r0, [sp, #24]
   81f44:	f7ff fab4 	bl	814b0 <__sprint_r.part.0>
   81f48:	2800      	cmp	r0, #0
   81f4a:	d1a8      	bne.n	81e9e <_vfiprintf_r+0x96e>
   81f4c:	46d1      	mov	r9, sl
   81f4e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f50:	e75e      	b.n	81e10 <_vfiprintf_r+0x8e0>
   81f52:	aa0f      	add	r2, sp, #60	; 0x3c
   81f54:	9904      	ldr	r1, [sp, #16]
   81f56:	9806      	ldr	r0, [sp, #24]
   81f58:	f7ff faaa 	bl	814b0 <__sprint_r.part.0>
   81f5c:	2800      	cmp	r0, #0
   81f5e:	d19e      	bne.n	81e9e <_vfiprintf_r+0x96e>
   81f60:	46d1      	mov	r9, sl
   81f62:	f7ff bbbb 	b.w	816dc <_vfiprintf_r+0x1ac>
   81f66:	bf00      	nop
   81f68:	00083fa8 	.word	0x00083fa8
   81f6c:	00083f98 	.word	0x00083f98
   81f70:	3104      	adds	r1, #4
   81f72:	6816      	ldr	r6, [r2, #0]
   81f74:	2700      	movs	r7, #0
   81f76:	2201      	movs	r2, #1
   81f78:	9107      	str	r1, [sp, #28]
   81f7a:	e412      	b.n	817a2 <_vfiprintf_r+0x272>
   81f7c:	9807      	ldr	r0, [sp, #28]
   81f7e:	2700      	movs	r7, #0
   81f80:	4601      	mov	r1, r0
   81f82:	3104      	adds	r1, #4
   81f84:	6806      	ldr	r6, [r0, #0]
   81f86:	9107      	str	r1, [sp, #28]
   81f88:	e40b      	b.n	817a2 <_vfiprintf_r+0x272>
   81f8a:	680e      	ldr	r6, [r1, #0]
   81f8c:	3104      	adds	r1, #4
   81f8e:	9107      	str	r1, [sp, #28]
   81f90:	2700      	movs	r7, #0
   81f92:	e592      	b.n	81aba <_vfiprintf_r+0x58a>
   81f94:	6816      	ldr	r6, [r2, #0]
   81f96:	3204      	adds	r2, #4
   81f98:	17f7      	asrs	r7, r6, #31
   81f9a:	9207      	str	r2, [sp, #28]
   81f9c:	4630      	mov	r0, r6
   81f9e:	4639      	mov	r1, r7
   81fa0:	e512      	b.n	819c8 <_vfiprintf_r+0x498>
   81fa2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81fa6:	f000 fe75 	bl	82c94 <__retarget_lock_release_recursive>
   81faa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81fae:	e71b      	b.n	81de8 <_vfiprintf_r+0x8b8>
   81fb0:	9b02      	ldr	r3, [sp, #8]
   81fb2:	9302      	str	r3, [sp, #8]
   81fb4:	2301      	movs	r3, #1
   81fb6:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81fba:	3630      	adds	r6, #48	; 0x30
   81fbc:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   81fc0:	9305      	str	r3, [sp, #20]
   81fc2:	e40d      	b.n	817e0 <_vfiprintf_r+0x2b0>
   81fc4:	aa0f      	add	r2, sp, #60	; 0x3c
   81fc6:	9904      	ldr	r1, [sp, #16]
   81fc8:	9806      	ldr	r0, [sp, #24]
   81fca:	f7ff fa71 	bl	814b0 <__sprint_r.part.0>
   81fce:	2800      	cmp	r0, #0
   81fd0:	f47f af65 	bne.w	81e9e <_vfiprintf_r+0x96e>
   81fd4:	9910      	ldr	r1, [sp, #64]	; 0x40
   81fd6:	46d1      	mov	r9, sl
   81fd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81fda:	1c48      	adds	r0, r1, #1
   81fdc:	e457      	b.n	8188e <_vfiprintf_r+0x35e>
   81fde:	aa0f      	add	r2, sp, #60	; 0x3c
   81fe0:	9904      	ldr	r1, [sp, #16]
   81fe2:	9806      	ldr	r0, [sp, #24]
   81fe4:	f7ff fa64 	bl	814b0 <__sprint_r.part.0>
   81fe8:	2800      	cmp	r0, #0
   81fea:	f47f af58 	bne.w	81e9e <_vfiprintf_r+0x96e>
   81fee:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ff0:	46d1      	mov	r9, sl
   81ff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ff4:	1c48      	adds	r0, r1, #1
   81ff6:	e644      	b.n	81c82 <_vfiprintf_r+0x752>
   81ff8:	2a00      	cmp	r2, #0
   81ffa:	f040 8087 	bne.w	8210c <_vfiprintf_r+0xbdc>
   81ffe:	2001      	movs	r0, #1
   82000:	4611      	mov	r1, r2
   82002:	46d1      	mov	r9, sl
   82004:	e641      	b.n	81c8a <_vfiprintf_r+0x75a>
   82006:	aa0f      	add	r2, sp, #60	; 0x3c
   82008:	9904      	ldr	r1, [sp, #16]
   8200a:	9806      	ldr	r0, [sp, #24]
   8200c:	f7ff fa50 	bl	814b0 <__sprint_r.part.0>
   82010:	2800      	cmp	r0, #0
   82012:	f47f af44 	bne.w	81e9e <_vfiprintf_r+0x96e>
   82016:	9810      	ldr	r0, [sp, #64]	; 0x40
   82018:	46d1      	mov	r9, sl
   8201a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8201c:	3001      	adds	r0, #1
   8201e:	e668      	b.n	81cf2 <_vfiprintf_r+0x7c2>
   82020:	46cb      	mov	fp, r9
   82022:	e6d7      	b.n	81dd4 <_vfiprintf_r+0x8a4>
   82024:	9d07      	ldr	r5, [sp, #28]
   82026:	3507      	adds	r5, #7
   82028:	f025 0507 	bic.w	r5, r5, #7
   8202c:	f105 0208 	add.w	r2, r5, #8
   82030:	e9d5 0100 	ldrd	r0, r1, [r5]
   82034:	9207      	str	r2, [sp, #28]
   82036:	4606      	mov	r6, r0
   82038:	460f      	mov	r7, r1
   8203a:	e4c5      	b.n	819c8 <_vfiprintf_r+0x498>
   8203c:	9d07      	ldr	r5, [sp, #28]
   8203e:	3507      	adds	r5, #7
   82040:	f025 0207 	bic.w	r2, r5, #7
   82044:	f102 0108 	add.w	r1, r2, #8
   82048:	e9d2 6700 	ldrd	r6, r7, [r2]
   8204c:	9107      	str	r1, [sp, #28]
   8204e:	2201      	movs	r2, #1
   82050:	f7ff bba7 	b.w	817a2 <_vfiprintf_r+0x272>
   82054:	9d07      	ldr	r5, [sp, #28]
   82056:	3507      	adds	r5, #7
   82058:	f025 0207 	bic.w	r2, r5, #7
   8205c:	f102 0108 	add.w	r1, r2, #8
   82060:	e9d2 6700 	ldrd	r6, r7, [r2]
   82064:	9107      	str	r1, [sp, #28]
   82066:	2200      	movs	r2, #0
   82068:	f7ff bb9b 	b.w	817a2 <_vfiprintf_r+0x272>
   8206c:	9d07      	ldr	r5, [sp, #28]
   8206e:	3507      	adds	r5, #7
   82070:	f025 0107 	bic.w	r1, r5, #7
   82074:	f101 0008 	add.w	r0, r1, #8
   82078:	9007      	str	r0, [sp, #28]
   8207a:	e9d1 6700 	ldrd	r6, r7, [r1]
   8207e:	e51c      	b.n	81aba <_vfiprintf_r+0x58a>
   82080:	46d3      	mov	fp, sl
   82082:	f7ff bbad 	b.w	817e0 <_vfiprintf_r+0x2b0>
   82086:	252d      	movs	r5, #45	; 0x2d
   82088:	4276      	negs	r6, r6
   8208a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   8208e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82092:	2201      	movs	r2, #1
   82094:	f7ff bb8a 	b.w	817ac <_vfiprintf_r+0x27c>
   82098:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8209a:	b9b3      	cbnz	r3, 820ca <_vfiprintf_r+0xb9a>
   8209c:	4611      	mov	r1, r2
   8209e:	2001      	movs	r0, #1
   820a0:	46d1      	mov	r9, sl
   820a2:	e5f2      	b.n	81c8a <_vfiprintf_r+0x75a>
   820a4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   820a8:	f000 fdf4 	bl	82c94 <__retarget_lock_release_recursive>
   820ac:	f04f 33ff 	mov.w	r3, #4294967295
   820b0:	9303      	str	r3, [sp, #12]
   820b2:	f7ff bb4c 	b.w	8174e <_vfiprintf_r+0x21e>
   820b6:	aa0f      	add	r2, sp, #60	; 0x3c
   820b8:	9904      	ldr	r1, [sp, #16]
   820ba:	9806      	ldr	r0, [sp, #24]
   820bc:	f7ff f9f8 	bl	814b0 <__sprint_r.part.0>
   820c0:	2800      	cmp	r0, #0
   820c2:	f47f aeec 	bne.w	81e9e <_vfiprintf_r+0x96e>
   820c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   820c8:	e6aa      	b.n	81e20 <_vfiprintf_r+0x8f0>
   820ca:	2202      	movs	r2, #2
   820cc:	ab0e      	add	r3, sp, #56	; 0x38
   820ce:	921d      	str	r2, [sp, #116]	; 0x74
   820d0:	931c      	str	r3, [sp, #112]	; 0x70
   820d2:	2001      	movs	r0, #1
   820d4:	46d1      	mov	r9, sl
   820d6:	e5d0      	b.n	81c7a <_vfiprintf_r+0x74a>
   820d8:	4d34      	ldr	r5, [pc, #208]	; (821ac <_vfiprintf_r+0xc7c>)
   820da:	e5fd      	b.n	81cd8 <_vfiprintf_r+0x7a8>
   820dc:	9a07      	ldr	r2, [sp, #28]
   820de:	4613      	mov	r3, r2
   820e0:	3304      	adds	r3, #4
   820e2:	9307      	str	r3, [sp, #28]
   820e4:	9b03      	ldr	r3, [sp, #12]
   820e6:	6811      	ldr	r1, [r2, #0]
   820e8:	17dd      	asrs	r5, r3, #31
   820ea:	461a      	mov	r2, r3
   820ec:	462b      	mov	r3, r5
   820ee:	e9c1 2300 	strd	r2, r3, [r1]
   820f2:	f7ff ba5a 	b.w	815aa <_vfiprintf_r+0x7a>
   820f6:	4658      	mov	r0, fp
   820f8:	9507      	str	r5, [sp, #28]
   820fa:	9302      	str	r3, [sp, #8]
   820fc:	f7ff f9aa 	bl	81454 <strlen>
   82100:	2400      	movs	r4, #0
   82102:	9005      	str	r0, [sp, #20]
   82104:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82108:	f7ff bb6a 	b.w	817e0 <_vfiprintf_r+0x2b0>
   8210c:	aa0f      	add	r2, sp, #60	; 0x3c
   8210e:	9904      	ldr	r1, [sp, #16]
   82110:	9806      	ldr	r0, [sp, #24]
   82112:	f7ff f9cd 	bl	814b0 <__sprint_r.part.0>
   82116:	2800      	cmp	r0, #0
   82118:	f47f aec1 	bne.w	81e9e <_vfiprintf_r+0x96e>
   8211c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8211e:	46d1      	mov	r9, sl
   82120:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82122:	1c48      	adds	r0, r1, #1
   82124:	e5b1      	b.n	81c8a <_vfiprintf_r+0x75a>
   82126:	9910      	ldr	r1, [sp, #64]	; 0x40
   82128:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8212a:	3101      	adds	r1, #1
   8212c:	4e20      	ldr	r6, [pc, #128]	; (821b0 <_vfiprintf_r+0xc80>)
   8212e:	f7ff bb9c 	b.w	8186a <_vfiprintf_r+0x33a>
   82132:	2c06      	cmp	r4, #6
   82134:	bf28      	it	cs
   82136:	2406      	movcs	r4, #6
   82138:	9507      	str	r5, [sp, #28]
   8213a:	9405      	str	r4, [sp, #20]
   8213c:	9401      	str	r4, [sp, #4]
   8213e:	f8df b074 	ldr.w	fp, [pc, #116]	; 821b4 <_vfiprintf_r+0xc84>
   82142:	e4e3      	b.n	81b0c <_vfiprintf_r+0x5dc>
   82144:	9810      	ldr	r0, [sp, #64]	; 0x40
   82146:	4e1a      	ldr	r6, [pc, #104]	; (821b0 <_vfiprintf_r+0xc80>)
   82148:	3001      	adds	r0, #1
   8214a:	e60e      	b.n	81d6a <_vfiprintf_r+0x83a>
   8214c:	4686      	mov	lr, r0
   8214e:	4d17      	ldr	r5, [pc, #92]	; (821ac <_vfiprintf_r+0xc7c>)
   82150:	f7ff bbe2 	b.w	81918 <_vfiprintf_r+0x3e8>
   82154:	9405      	str	r4, [sp, #20]
   82156:	9507      	str	r5, [sp, #28]
   82158:	9302      	str	r3, [sp, #8]
   8215a:	4604      	mov	r4, r0
   8215c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82160:	f7ff bb3e 	b.w	817e0 <_vfiprintf_r+0x2b0>
   82164:	9806      	ldr	r0, [sp, #24]
   82166:	aa0f      	add	r2, sp, #60	; 0x3c
   82168:	4659      	mov	r1, fp
   8216a:	f7ff f9a1 	bl	814b0 <__sprint_r.part.0>
   8216e:	2800      	cmp	r0, #0
   82170:	f43f ae2e 	beq.w	81dd0 <_vfiprintf_r+0x8a0>
   82174:	e62e      	b.n	81dd4 <_vfiprintf_r+0x8a4>
   82176:	9907      	ldr	r1, [sp, #28]
   82178:	f898 2001 	ldrb.w	r2, [r8, #1]
   8217c:	680c      	ldr	r4, [r1, #0]
   8217e:	3104      	adds	r1, #4
   82180:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   82184:	46b8      	mov	r8, r7
   82186:	9107      	str	r1, [sp, #28]
   82188:	f7ff ba44 	b.w	81614 <_vfiprintf_r+0xe4>
   8218c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82190:	e4a7      	b.n	81ae2 <_vfiprintf_r+0x5b2>
   82192:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82196:	e521      	b.n	81bdc <_vfiprintf_r+0x6ac>
   82198:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8219c:	e47c      	b.n	81a98 <_vfiprintf_r+0x568>
   8219e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   821a2:	e43f      	b.n	81a24 <_vfiprintf_r+0x4f4>
   821a4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   821a8:	f7ff bbfa 	b.w	819a0 <_vfiprintf_r+0x470>
   821ac:	00083fa8 	.word	0x00083fa8
   821b0:	00083f98 	.word	0x00083f98
   821b4:	00083f90 	.word	0x00083f90

000821b8 <__sbprintf>:
   821b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   821bc:	460c      	mov	r4, r1
   821be:	f04f 0e00 	mov.w	lr, #0
   821c2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   821c6:	4606      	mov	r6, r0
   821c8:	4617      	mov	r7, r2
   821ca:	4698      	mov	r8, r3
   821cc:	6e62      	ldr	r2, [r4, #100]	; 0x64
   821ce:	89e3      	ldrh	r3, [r4, #14]
   821d0:	8989      	ldrh	r1, [r1, #12]
   821d2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   821d6:	f021 0102 	bic.w	r1, r1, #2
   821da:	9219      	str	r2, [sp, #100]	; 0x64
   821dc:	f8ad 300e 	strh.w	r3, [sp, #14]
   821e0:	69e2      	ldr	r2, [r4, #28]
   821e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   821e4:	f8ad 100c 	strh.w	r1, [sp, #12]
   821e8:	a816      	add	r0, sp, #88	; 0x58
   821ea:	a91a      	add	r1, sp, #104	; 0x68
   821ec:	f8cd e018 	str.w	lr, [sp, #24]
   821f0:	9207      	str	r2, [sp, #28]
   821f2:	9309      	str	r3, [sp, #36]	; 0x24
   821f4:	9100      	str	r1, [sp, #0]
   821f6:	9104      	str	r1, [sp, #16]
   821f8:	9502      	str	r5, [sp, #8]
   821fa:	9505      	str	r5, [sp, #20]
   821fc:	f000 fd44 	bl	82c88 <__retarget_lock_init_recursive>
   82200:	4643      	mov	r3, r8
   82202:	463a      	mov	r2, r7
   82204:	4669      	mov	r1, sp
   82206:	4630      	mov	r0, r6
   82208:	f7ff f992 	bl	81530 <_vfiprintf_r>
   8220c:	1e05      	subs	r5, r0, #0
   8220e:	db07      	blt.n	82220 <__sbprintf+0x68>
   82210:	4630      	mov	r0, r6
   82212:	4669      	mov	r1, sp
   82214:	f000 f924 	bl	82460 <_fflush_r>
   82218:	2800      	cmp	r0, #0
   8221a:	bf18      	it	ne
   8221c:	f04f 35ff 	movne.w	r5, #4294967295
   82220:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82224:	065b      	lsls	r3, r3, #25
   82226:	d503      	bpl.n	82230 <__sbprintf+0x78>
   82228:	89a3      	ldrh	r3, [r4, #12]
   8222a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8222e:	81a3      	strh	r3, [r4, #12]
   82230:	9816      	ldr	r0, [sp, #88]	; 0x58
   82232:	f000 fd2b 	bl	82c8c <__retarget_lock_close_recursive>
   82236:	4628      	mov	r0, r5
   82238:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8223c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082240 <__swsetup_r>:
   82240:	b538      	push	{r3, r4, r5, lr}
   82242:	4b30      	ldr	r3, [pc, #192]	; (82304 <__swsetup_r+0xc4>)
   82244:	4605      	mov	r5, r0
   82246:	6818      	ldr	r0, [r3, #0]
   82248:	460c      	mov	r4, r1
   8224a:	b110      	cbz	r0, 82252 <__swsetup_r+0x12>
   8224c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8224e:	2b00      	cmp	r3, #0
   82250:	d038      	beq.n	822c4 <__swsetup_r+0x84>
   82252:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82256:	b293      	uxth	r3, r2
   82258:	0718      	lsls	r0, r3, #28
   8225a:	d50c      	bpl.n	82276 <__swsetup_r+0x36>
   8225c:	6920      	ldr	r0, [r4, #16]
   8225e:	b1a8      	cbz	r0, 8228c <__swsetup_r+0x4c>
   82260:	f013 0201 	ands.w	r2, r3, #1
   82264:	d01e      	beq.n	822a4 <__swsetup_r+0x64>
   82266:	2200      	movs	r2, #0
   82268:	6963      	ldr	r3, [r4, #20]
   8226a:	60a2      	str	r2, [r4, #8]
   8226c:	425b      	negs	r3, r3
   8226e:	61a3      	str	r3, [r4, #24]
   82270:	b1f0      	cbz	r0, 822b0 <__swsetup_r+0x70>
   82272:	2000      	movs	r0, #0
   82274:	bd38      	pop	{r3, r4, r5, pc}
   82276:	06d9      	lsls	r1, r3, #27
   82278:	d53b      	bpl.n	822f2 <__swsetup_r+0xb2>
   8227a:	0758      	lsls	r0, r3, #29
   8227c:	d425      	bmi.n	822ca <__swsetup_r+0x8a>
   8227e:	6920      	ldr	r0, [r4, #16]
   82280:	f042 0308 	orr.w	r3, r2, #8
   82284:	81a3      	strh	r3, [r4, #12]
   82286:	b29b      	uxth	r3, r3
   82288:	2800      	cmp	r0, #0
   8228a:	d1e9      	bne.n	82260 <__swsetup_r+0x20>
   8228c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82290:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82294:	d0e4      	beq.n	82260 <__swsetup_r+0x20>
   82296:	4628      	mov	r0, r5
   82298:	4621      	mov	r1, r4
   8229a:	f000 fd2b 	bl	82cf4 <__smakebuf_r>
   8229e:	89a3      	ldrh	r3, [r4, #12]
   822a0:	6920      	ldr	r0, [r4, #16]
   822a2:	e7dd      	b.n	82260 <__swsetup_r+0x20>
   822a4:	0799      	lsls	r1, r3, #30
   822a6:	bf58      	it	pl
   822a8:	6962      	ldrpl	r2, [r4, #20]
   822aa:	60a2      	str	r2, [r4, #8]
   822ac:	2800      	cmp	r0, #0
   822ae:	d1e0      	bne.n	82272 <__swsetup_r+0x32>
   822b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   822b4:	061a      	lsls	r2, r3, #24
   822b6:	d5dd      	bpl.n	82274 <__swsetup_r+0x34>
   822b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   822bc:	81a3      	strh	r3, [r4, #12]
   822be:	f04f 30ff 	mov.w	r0, #4294967295
   822c2:	bd38      	pop	{r3, r4, r5, pc}
   822c4:	f000 f924 	bl	82510 <__sinit>
   822c8:	e7c3      	b.n	82252 <__swsetup_r+0x12>
   822ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   822cc:	b151      	cbz	r1, 822e4 <__swsetup_r+0xa4>
   822ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
   822d2:	4299      	cmp	r1, r3
   822d4:	d004      	beq.n	822e0 <__swsetup_r+0xa0>
   822d6:	4628      	mov	r0, r5
   822d8:	f000 fa40 	bl	8275c <_free_r>
   822dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   822e0:	2300      	movs	r3, #0
   822e2:	6323      	str	r3, [r4, #48]	; 0x30
   822e4:	2300      	movs	r3, #0
   822e6:	6920      	ldr	r0, [r4, #16]
   822e8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   822ec:	e884 0009 	stmia.w	r4, {r0, r3}
   822f0:	e7c6      	b.n	82280 <__swsetup_r+0x40>
   822f2:	2309      	movs	r3, #9
   822f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   822f8:	602b      	str	r3, [r5, #0]
   822fa:	f04f 30ff 	mov.w	r0, #4294967295
   822fe:	81a2      	strh	r2, [r4, #12]
   82300:	bd38      	pop	{r3, r4, r5, pc}
   82302:	bf00      	nop
   82304:	20070138 	.word	0x20070138

00082308 <register_fini>:
   82308:	4b02      	ldr	r3, [pc, #8]	; (82314 <register_fini+0xc>)
   8230a:	b113      	cbz	r3, 82312 <register_fini+0xa>
   8230c:	4802      	ldr	r0, [pc, #8]	; (82318 <register_fini+0x10>)
   8230e:	f000 b805 	b.w	8231c <atexit>
   82312:	4770      	bx	lr
   82314:	00000000 	.word	0x00000000
   82318:	00082589 	.word	0x00082589

0008231c <atexit>:
   8231c:	2300      	movs	r3, #0
   8231e:	4601      	mov	r1, r0
   82320:	461a      	mov	r2, r3
   82322:	4618      	mov	r0, r3
   82324:	f001 bb56 	b.w	839d4 <__register_exitproc>

00082328 <__sflush_r>:
   82328:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8232c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82330:	b29a      	uxth	r2, r3
   82332:	460d      	mov	r5, r1
   82334:	0711      	lsls	r1, r2, #28
   82336:	4680      	mov	r8, r0
   82338:	d43a      	bmi.n	823b0 <__sflush_r+0x88>
   8233a:	686a      	ldr	r2, [r5, #4]
   8233c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82340:	2a00      	cmp	r2, #0
   82342:	81ab      	strh	r3, [r5, #12]
   82344:	dd70      	ble.n	82428 <__sflush_r+0x100>
   82346:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82348:	2c00      	cmp	r4, #0
   8234a:	d04a      	beq.n	823e2 <__sflush_r+0xba>
   8234c:	2200      	movs	r2, #0
   8234e:	b29b      	uxth	r3, r3
   82350:	f8d8 6000 	ldr.w	r6, [r8]
   82354:	f8c8 2000 	str.w	r2, [r8]
   82358:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   8235c:	d068      	beq.n	82430 <__sflush_r+0x108>
   8235e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82360:	075f      	lsls	r7, r3, #29
   82362:	d505      	bpl.n	82370 <__sflush_r+0x48>
   82364:	6869      	ldr	r1, [r5, #4]
   82366:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82368:	1a52      	subs	r2, r2, r1
   8236a:	b10b      	cbz	r3, 82370 <__sflush_r+0x48>
   8236c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8236e:	1ad2      	subs	r2, r2, r3
   82370:	2300      	movs	r3, #0
   82372:	69e9      	ldr	r1, [r5, #28]
   82374:	4640      	mov	r0, r8
   82376:	47a0      	blx	r4
   82378:	1c44      	adds	r4, r0, #1
   8237a:	d03d      	beq.n	823f8 <__sflush_r+0xd0>
   8237c:	2100      	movs	r1, #0
   8237e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82382:	692a      	ldr	r2, [r5, #16]
   82384:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82388:	81ab      	strh	r3, [r5, #12]
   8238a:	04db      	lsls	r3, r3, #19
   8238c:	6069      	str	r1, [r5, #4]
   8238e:	602a      	str	r2, [r5, #0]
   82390:	d448      	bmi.n	82424 <__sflush_r+0xfc>
   82392:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82394:	f8c8 6000 	str.w	r6, [r8]
   82398:	b319      	cbz	r1, 823e2 <__sflush_r+0xba>
   8239a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8239e:	4299      	cmp	r1, r3
   823a0:	d002      	beq.n	823a8 <__sflush_r+0x80>
   823a2:	4640      	mov	r0, r8
   823a4:	f000 f9da 	bl	8275c <_free_r>
   823a8:	2000      	movs	r0, #0
   823aa:	6328      	str	r0, [r5, #48]	; 0x30
   823ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823b0:	692e      	ldr	r6, [r5, #16]
   823b2:	b1b6      	cbz	r6, 823e2 <__sflush_r+0xba>
   823b4:	0791      	lsls	r1, r2, #30
   823b6:	bf18      	it	ne
   823b8:	2300      	movne	r3, #0
   823ba:	682c      	ldr	r4, [r5, #0]
   823bc:	bf08      	it	eq
   823be:	696b      	ldreq	r3, [r5, #20]
   823c0:	602e      	str	r6, [r5, #0]
   823c2:	1ba4      	subs	r4, r4, r6
   823c4:	60ab      	str	r3, [r5, #8]
   823c6:	e00a      	b.n	823de <__sflush_r+0xb6>
   823c8:	4623      	mov	r3, r4
   823ca:	4632      	mov	r2, r6
   823cc:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   823ce:	69e9      	ldr	r1, [r5, #28]
   823d0:	4640      	mov	r0, r8
   823d2:	47b8      	blx	r7
   823d4:	2800      	cmp	r0, #0
   823d6:	eba4 0400 	sub.w	r4, r4, r0
   823da:	4406      	add	r6, r0
   823dc:	dd04      	ble.n	823e8 <__sflush_r+0xc0>
   823de:	2c00      	cmp	r4, #0
   823e0:	dcf2      	bgt.n	823c8 <__sflush_r+0xa0>
   823e2:	2000      	movs	r0, #0
   823e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823e8:	89ab      	ldrh	r3, [r5, #12]
   823ea:	f04f 30ff 	mov.w	r0, #4294967295
   823ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823f2:	81ab      	strh	r3, [r5, #12]
   823f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823f8:	f8d8 4000 	ldr.w	r4, [r8]
   823fc:	2c1d      	cmp	r4, #29
   823fe:	d8f3      	bhi.n	823e8 <__sflush_r+0xc0>
   82400:	4b16      	ldr	r3, [pc, #88]	; (8245c <__sflush_r+0x134>)
   82402:	40e3      	lsrs	r3, r4
   82404:	43db      	mvns	r3, r3
   82406:	f013 0301 	ands.w	r3, r3, #1
   8240a:	d1ed      	bne.n	823e8 <__sflush_r+0xc0>
   8240c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82410:	6929      	ldr	r1, [r5, #16]
   82412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82416:	81aa      	strh	r2, [r5, #12]
   82418:	04d2      	lsls	r2, r2, #19
   8241a:	606b      	str	r3, [r5, #4]
   8241c:	6029      	str	r1, [r5, #0]
   8241e:	d5b8      	bpl.n	82392 <__sflush_r+0x6a>
   82420:	2c00      	cmp	r4, #0
   82422:	d1b6      	bne.n	82392 <__sflush_r+0x6a>
   82424:	6528      	str	r0, [r5, #80]	; 0x50
   82426:	e7b4      	b.n	82392 <__sflush_r+0x6a>
   82428:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8242a:	2a00      	cmp	r2, #0
   8242c:	dc8b      	bgt.n	82346 <__sflush_r+0x1e>
   8242e:	e7d8      	b.n	823e2 <__sflush_r+0xba>
   82430:	2301      	movs	r3, #1
   82432:	69e9      	ldr	r1, [r5, #28]
   82434:	4640      	mov	r0, r8
   82436:	47a0      	blx	r4
   82438:	1c43      	adds	r3, r0, #1
   8243a:	4602      	mov	r2, r0
   8243c:	d002      	beq.n	82444 <__sflush_r+0x11c>
   8243e:	89ab      	ldrh	r3, [r5, #12]
   82440:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82442:	e78d      	b.n	82360 <__sflush_r+0x38>
   82444:	f8d8 3000 	ldr.w	r3, [r8]
   82448:	2b00      	cmp	r3, #0
   8244a:	d0f8      	beq.n	8243e <__sflush_r+0x116>
   8244c:	2b1d      	cmp	r3, #29
   8244e:	d001      	beq.n	82454 <__sflush_r+0x12c>
   82450:	2b16      	cmp	r3, #22
   82452:	d1c9      	bne.n	823e8 <__sflush_r+0xc0>
   82454:	f8c8 6000 	str.w	r6, [r8]
   82458:	e7c3      	b.n	823e2 <__sflush_r+0xba>
   8245a:	bf00      	nop
   8245c:	20400001 	.word	0x20400001

00082460 <_fflush_r>:
   82460:	b538      	push	{r3, r4, r5, lr}
   82462:	460d      	mov	r5, r1
   82464:	4604      	mov	r4, r0
   82466:	b108      	cbz	r0, 8246c <_fflush_r+0xc>
   82468:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8246a:	b1bb      	cbz	r3, 8249c <_fflush_r+0x3c>
   8246c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82470:	b188      	cbz	r0, 82496 <_fflush_r+0x36>
   82472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82474:	07db      	lsls	r3, r3, #31
   82476:	d401      	bmi.n	8247c <_fflush_r+0x1c>
   82478:	0581      	lsls	r1, r0, #22
   8247a:	d517      	bpl.n	824ac <_fflush_r+0x4c>
   8247c:	4620      	mov	r0, r4
   8247e:	4629      	mov	r1, r5
   82480:	f7ff ff52 	bl	82328 <__sflush_r>
   82484:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82486:	4604      	mov	r4, r0
   82488:	07da      	lsls	r2, r3, #31
   8248a:	d402      	bmi.n	82492 <_fflush_r+0x32>
   8248c:	89ab      	ldrh	r3, [r5, #12]
   8248e:	059b      	lsls	r3, r3, #22
   82490:	d507      	bpl.n	824a2 <_fflush_r+0x42>
   82492:	4620      	mov	r0, r4
   82494:	bd38      	pop	{r3, r4, r5, pc}
   82496:	4604      	mov	r4, r0
   82498:	4620      	mov	r0, r4
   8249a:	bd38      	pop	{r3, r4, r5, pc}
   8249c:	f000 f838 	bl	82510 <__sinit>
   824a0:	e7e4      	b.n	8246c <_fflush_r+0xc>
   824a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   824a4:	f000 fbf6 	bl	82c94 <__retarget_lock_release_recursive>
   824a8:	4620      	mov	r0, r4
   824aa:	bd38      	pop	{r3, r4, r5, pc}
   824ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
   824ae:	f000 fbef 	bl	82c90 <__retarget_lock_acquire_recursive>
   824b2:	e7e3      	b.n	8247c <_fflush_r+0x1c>

000824b4 <_cleanup_r>:
   824b4:	4901      	ldr	r1, [pc, #4]	; (824bc <_cleanup_r+0x8>)
   824b6:	f000 bbb1 	b.w	82c1c <_fwalk_reent>
   824ba:	bf00      	nop
   824bc:	00083abd 	.word	0x00083abd

000824c0 <std.isra.0>:
   824c0:	2300      	movs	r3, #0
   824c2:	b510      	push	{r4, lr}
   824c4:	4604      	mov	r4, r0
   824c6:	8181      	strh	r1, [r0, #12]
   824c8:	81c2      	strh	r2, [r0, #14]
   824ca:	6003      	str	r3, [r0, #0]
   824cc:	6043      	str	r3, [r0, #4]
   824ce:	6083      	str	r3, [r0, #8]
   824d0:	6643      	str	r3, [r0, #100]	; 0x64
   824d2:	6103      	str	r3, [r0, #16]
   824d4:	6143      	str	r3, [r0, #20]
   824d6:	6183      	str	r3, [r0, #24]
   824d8:	4619      	mov	r1, r3
   824da:	2208      	movs	r2, #8
   824dc:	305c      	adds	r0, #92	; 0x5c
   824de:	f7fe fe9b 	bl	81218 <memset>
   824e2:	4807      	ldr	r0, [pc, #28]	; (82500 <std.isra.0+0x40>)
   824e4:	4907      	ldr	r1, [pc, #28]	; (82504 <std.isra.0+0x44>)
   824e6:	4a08      	ldr	r2, [pc, #32]	; (82508 <std.isra.0+0x48>)
   824e8:	4b08      	ldr	r3, [pc, #32]	; (8250c <std.isra.0+0x4c>)
   824ea:	6220      	str	r0, [r4, #32]
   824ec:	61e4      	str	r4, [r4, #28]
   824ee:	6261      	str	r1, [r4, #36]	; 0x24
   824f0:	62a2      	str	r2, [r4, #40]	; 0x28
   824f2:	62e3      	str	r3, [r4, #44]	; 0x2c
   824f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   824f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   824fc:	f000 bbc4 	b.w	82c88 <__retarget_lock_init_recursive>
   82500:	00083805 	.word	0x00083805
   82504:	00083829 	.word	0x00083829
   82508:	00083865 	.word	0x00083865
   8250c:	00083885 	.word	0x00083885

00082510 <__sinit>:
   82510:	b510      	push	{r4, lr}
   82512:	4604      	mov	r4, r0
   82514:	4814      	ldr	r0, [pc, #80]	; (82568 <__sinit+0x58>)
   82516:	f000 fbbb 	bl	82c90 <__retarget_lock_acquire_recursive>
   8251a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8251c:	b9fa      	cbnz	r2, 8255e <__sinit+0x4e>
   8251e:	2003      	movs	r0, #3
   82520:	4912      	ldr	r1, [pc, #72]	; (8256c <__sinit+0x5c>)
   82522:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   82526:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8252a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8252e:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82532:	63e1      	str	r1, [r4, #60]	; 0x3c
   82534:	6860      	ldr	r0, [r4, #4]
   82536:	2104      	movs	r1, #4
   82538:	f7ff ffc2 	bl	824c0 <std.isra.0>
   8253c:	68a0      	ldr	r0, [r4, #8]
   8253e:	2201      	movs	r2, #1
   82540:	2109      	movs	r1, #9
   82542:	f7ff ffbd 	bl	824c0 <std.isra.0>
   82546:	68e0      	ldr	r0, [r4, #12]
   82548:	2202      	movs	r2, #2
   8254a:	2112      	movs	r1, #18
   8254c:	f7ff ffb8 	bl	824c0 <std.isra.0>
   82550:	2301      	movs	r3, #1
   82552:	4805      	ldr	r0, [pc, #20]	; (82568 <__sinit+0x58>)
   82554:	63a3      	str	r3, [r4, #56]	; 0x38
   82556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8255a:	f000 bb9b 	b.w	82c94 <__retarget_lock_release_recursive>
   8255e:	4802      	ldr	r0, [pc, #8]	; (82568 <__sinit+0x58>)
   82560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82564:	f000 bb96 	b.w	82c94 <__retarget_lock_release_recursive>
   82568:	20070cf0 	.word	0x20070cf0
   8256c:	000824b5 	.word	0x000824b5

00082570 <__sfp_lock_acquire>:
   82570:	4801      	ldr	r0, [pc, #4]	; (82578 <__sfp_lock_acquire+0x8>)
   82572:	f000 bb8d 	b.w	82c90 <__retarget_lock_acquire_recursive>
   82576:	bf00      	nop
   82578:	20070d04 	.word	0x20070d04

0008257c <__sfp_lock_release>:
   8257c:	4801      	ldr	r0, [pc, #4]	; (82584 <__sfp_lock_release+0x8>)
   8257e:	f000 bb89 	b.w	82c94 <__retarget_lock_release_recursive>
   82582:	bf00      	nop
   82584:	20070d04 	.word	0x20070d04

00082588 <__libc_fini_array>:
   82588:	b538      	push	{r3, r4, r5, lr}
   8258a:	4c0a      	ldr	r4, [pc, #40]	; (825b4 <__libc_fini_array+0x2c>)
   8258c:	4d0a      	ldr	r5, [pc, #40]	; (825b8 <__libc_fini_array+0x30>)
   8258e:	1b64      	subs	r4, r4, r5
   82590:	10a4      	asrs	r4, r4, #2
   82592:	d00a      	beq.n	825aa <__libc_fini_array+0x22>
   82594:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82598:	3b01      	subs	r3, #1
   8259a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8259e:	3c01      	subs	r4, #1
   825a0:	f855 3904 	ldr.w	r3, [r5], #-4
   825a4:	4798      	blx	r3
   825a6:	2c00      	cmp	r4, #0
   825a8:	d1f9      	bne.n	8259e <__libc_fini_array+0x16>
   825aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   825ae:	f001 bd97 	b.w	840e0 <_fini>
   825b2:	bf00      	nop
   825b4:	000840f0 	.word	0x000840f0
   825b8:	000840ec 	.word	0x000840ec

000825bc <__fputwc>:
   825bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   825c0:	b083      	sub	sp, #12
   825c2:	4607      	mov	r7, r0
   825c4:	4688      	mov	r8, r1
   825c6:	4614      	mov	r4, r2
   825c8:	f000 fb50 	bl	82c6c <__locale_mb_cur_max>
   825cc:	2801      	cmp	r0, #1
   825ce:	d033      	beq.n	82638 <__fputwc+0x7c>
   825d0:	4642      	mov	r2, r8
   825d2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   825d6:	a901      	add	r1, sp, #4
   825d8:	4638      	mov	r0, r7
   825da:	f001 f9af 	bl	8393c <_wcrtomb_r>
   825de:	1c42      	adds	r2, r0, #1
   825e0:	4606      	mov	r6, r0
   825e2:	d022      	beq.n	8262a <__fputwc+0x6e>
   825e4:	b390      	cbz	r0, 8264c <__fputwc+0x90>
   825e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   825ea:	2500      	movs	r5, #0
   825ec:	f10d 0904 	add.w	r9, sp, #4
   825f0:	e008      	b.n	82604 <__fputwc+0x48>
   825f2:	6823      	ldr	r3, [r4, #0]
   825f4:	1c5a      	adds	r2, r3, #1
   825f6:	6022      	str	r2, [r4, #0]
   825f8:	7019      	strb	r1, [r3, #0]
   825fa:	3501      	adds	r5, #1
   825fc:	42b5      	cmp	r5, r6
   825fe:	d225      	bcs.n	8264c <__fputwc+0x90>
   82600:	f815 1009 	ldrb.w	r1, [r5, r9]
   82604:	68a3      	ldr	r3, [r4, #8]
   82606:	3b01      	subs	r3, #1
   82608:	2b00      	cmp	r3, #0
   8260a:	60a3      	str	r3, [r4, #8]
   8260c:	daf1      	bge.n	825f2 <__fputwc+0x36>
   8260e:	69a2      	ldr	r2, [r4, #24]
   82610:	4293      	cmp	r3, r2
   82612:	db01      	blt.n	82618 <__fputwc+0x5c>
   82614:	290a      	cmp	r1, #10
   82616:	d1ec      	bne.n	825f2 <__fputwc+0x36>
   82618:	4622      	mov	r2, r4
   8261a:	4638      	mov	r0, r7
   8261c:	f001 f936 	bl	8388c <__swbuf_r>
   82620:	1c43      	adds	r3, r0, #1
   82622:	d1ea      	bne.n	825fa <__fputwc+0x3e>
   82624:	b003      	add	sp, #12
   82626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8262a:	89a3      	ldrh	r3, [r4, #12]
   8262c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82630:	81a3      	strh	r3, [r4, #12]
   82632:	b003      	add	sp, #12
   82634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82638:	f108 33ff 	add.w	r3, r8, #4294967295
   8263c:	2bfe      	cmp	r3, #254	; 0xfe
   8263e:	d8c7      	bhi.n	825d0 <__fputwc+0x14>
   82640:	fa5f f188 	uxtb.w	r1, r8
   82644:	4606      	mov	r6, r0
   82646:	f88d 1004 	strb.w	r1, [sp, #4]
   8264a:	e7ce      	b.n	825ea <__fputwc+0x2e>
   8264c:	4640      	mov	r0, r8
   8264e:	b003      	add	sp, #12
   82650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00082654 <_fputwc_r>:
   82654:	b530      	push	{r4, r5, lr}
   82656:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82658:	4614      	mov	r4, r2
   8265a:	f013 0f01 	tst.w	r3, #1
   8265e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   82662:	b083      	sub	sp, #12
   82664:	4605      	mov	r5, r0
   82666:	b29a      	uxth	r2, r3
   82668:	d101      	bne.n	8266e <_fputwc_r+0x1a>
   8266a:	0590      	lsls	r0, r2, #22
   8266c:	d51c      	bpl.n	826a8 <_fputwc_r+0x54>
   8266e:	0490      	lsls	r0, r2, #18
   82670:	d406      	bmi.n	82680 <_fputwc_r+0x2c>
   82672:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8267c:	81a3      	strh	r3, [r4, #12]
   8267e:	6662      	str	r2, [r4, #100]	; 0x64
   82680:	4628      	mov	r0, r5
   82682:	4622      	mov	r2, r4
   82684:	f7ff ff9a 	bl	825bc <__fputwc>
   82688:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8268a:	4605      	mov	r5, r0
   8268c:	07da      	lsls	r2, r3, #31
   8268e:	d402      	bmi.n	82696 <_fputwc_r+0x42>
   82690:	89a3      	ldrh	r3, [r4, #12]
   82692:	059b      	lsls	r3, r3, #22
   82694:	d502      	bpl.n	8269c <_fputwc_r+0x48>
   82696:	4628      	mov	r0, r5
   82698:	b003      	add	sp, #12
   8269a:	bd30      	pop	{r4, r5, pc}
   8269c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8269e:	f000 faf9 	bl	82c94 <__retarget_lock_release_recursive>
   826a2:	4628      	mov	r0, r5
   826a4:	b003      	add	sp, #12
   826a6:	bd30      	pop	{r4, r5, pc}
   826a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   826aa:	9101      	str	r1, [sp, #4]
   826ac:	f000 faf0 	bl	82c90 <__retarget_lock_acquire_recursive>
   826b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   826b4:	9901      	ldr	r1, [sp, #4]
   826b6:	b29a      	uxth	r2, r3
   826b8:	e7d9      	b.n	8266e <_fputwc_r+0x1a>
   826ba:	bf00      	nop

000826bc <_malloc_trim_r>:
   826bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   826be:	460c      	mov	r4, r1
   826c0:	4f23      	ldr	r7, [pc, #140]	; (82750 <_malloc_trim_r+0x94>)
   826c2:	4606      	mov	r6, r0
   826c4:	f000 feca 	bl	8345c <__malloc_lock>
   826c8:	68bb      	ldr	r3, [r7, #8]
   826ca:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   826ce:	685d      	ldr	r5, [r3, #4]
   826d0:	310f      	adds	r1, #15
   826d2:	f025 0503 	bic.w	r5, r5, #3
   826d6:	4429      	add	r1, r5
   826d8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   826dc:	f021 010f 	bic.w	r1, r1, #15
   826e0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   826e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   826e8:	db07      	blt.n	826fa <_malloc_trim_r+0x3e>
   826ea:	2100      	movs	r1, #0
   826ec:	4630      	mov	r0, r6
   826ee:	f001 f877 	bl	837e0 <_sbrk_r>
   826f2:	68bb      	ldr	r3, [r7, #8]
   826f4:	442b      	add	r3, r5
   826f6:	4298      	cmp	r0, r3
   826f8:	d004      	beq.n	82704 <_malloc_trim_r+0x48>
   826fa:	4630      	mov	r0, r6
   826fc:	f000 feb4 	bl	83468 <__malloc_unlock>
   82700:	2000      	movs	r0, #0
   82702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82704:	4261      	negs	r1, r4
   82706:	4630      	mov	r0, r6
   82708:	f001 f86a 	bl	837e0 <_sbrk_r>
   8270c:	3001      	adds	r0, #1
   8270e:	d00d      	beq.n	8272c <_malloc_trim_r+0x70>
   82710:	4b10      	ldr	r3, [pc, #64]	; (82754 <_malloc_trim_r+0x98>)
   82712:	68ba      	ldr	r2, [r7, #8]
   82714:	6819      	ldr	r1, [r3, #0]
   82716:	1b2d      	subs	r5, r5, r4
   82718:	f045 0501 	orr.w	r5, r5, #1
   8271c:	4630      	mov	r0, r6
   8271e:	1b09      	subs	r1, r1, r4
   82720:	6055      	str	r5, [r2, #4]
   82722:	6019      	str	r1, [r3, #0]
   82724:	f000 fea0 	bl	83468 <__malloc_unlock>
   82728:	2001      	movs	r0, #1
   8272a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8272c:	2100      	movs	r1, #0
   8272e:	4630      	mov	r0, r6
   82730:	f001 f856 	bl	837e0 <_sbrk_r>
   82734:	68ba      	ldr	r2, [r7, #8]
   82736:	1a83      	subs	r3, r0, r2
   82738:	2b0f      	cmp	r3, #15
   8273a:	ddde      	ble.n	826fa <_malloc_trim_r+0x3e>
   8273c:	4c06      	ldr	r4, [pc, #24]	; (82758 <_malloc_trim_r+0x9c>)
   8273e:	4905      	ldr	r1, [pc, #20]	; (82754 <_malloc_trim_r+0x98>)
   82740:	6824      	ldr	r4, [r4, #0]
   82742:	f043 0301 	orr.w	r3, r3, #1
   82746:	1b00      	subs	r0, r0, r4
   82748:	6053      	str	r3, [r2, #4]
   8274a:	6008      	str	r0, [r1, #0]
   8274c:	e7d5      	b.n	826fa <_malloc_trim_r+0x3e>
   8274e:	bf00      	nop
   82750:	200706d8 	.word	0x200706d8
   82754:	20070ca4 	.word	0x20070ca4
   82758:	20070ae0 	.word	0x20070ae0

0008275c <_free_r>:
   8275c:	2900      	cmp	r1, #0
   8275e:	d044      	beq.n	827ea <_free_r+0x8e>
   82760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82764:	460d      	mov	r5, r1
   82766:	4680      	mov	r8, r0
   82768:	f000 fe78 	bl	8345c <__malloc_lock>
   8276c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82770:	4969      	ldr	r1, [pc, #420]	; (82918 <_free_r+0x1bc>)
   82772:	f1a5 0408 	sub.w	r4, r5, #8
   82776:	f027 0301 	bic.w	r3, r7, #1
   8277a:	18e2      	adds	r2, r4, r3
   8277c:	688e      	ldr	r6, [r1, #8]
   8277e:	6850      	ldr	r0, [r2, #4]
   82780:	42b2      	cmp	r2, r6
   82782:	f020 0003 	bic.w	r0, r0, #3
   82786:	d05e      	beq.n	82846 <_free_r+0xea>
   82788:	07fe      	lsls	r6, r7, #31
   8278a:	6050      	str	r0, [r2, #4]
   8278c:	d40b      	bmi.n	827a6 <_free_r+0x4a>
   8278e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   82792:	f101 0e08 	add.w	lr, r1, #8
   82796:	1be4      	subs	r4, r4, r7
   82798:	68a5      	ldr	r5, [r4, #8]
   8279a:	443b      	add	r3, r7
   8279c:	4575      	cmp	r5, lr
   8279e:	d06d      	beq.n	8287c <_free_r+0x120>
   827a0:	68e7      	ldr	r7, [r4, #12]
   827a2:	60ef      	str	r7, [r5, #12]
   827a4:	60bd      	str	r5, [r7, #8]
   827a6:	1815      	adds	r5, r2, r0
   827a8:	686d      	ldr	r5, [r5, #4]
   827aa:	07ed      	lsls	r5, r5, #31
   827ac:	d53e      	bpl.n	8282c <_free_r+0xd0>
   827ae:	f043 0201 	orr.w	r2, r3, #1
   827b2:	6062      	str	r2, [r4, #4]
   827b4:	50e3      	str	r3, [r4, r3]
   827b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   827ba:	d217      	bcs.n	827ec <_free_r+0x90>
   827bc:	2201      	movs	r2, #1
   827be:	08db      	lsrs	r3, r3, #3
   827c0:	1098      	asrs	r0, r3, #2
   827c2:	684d      	ldr	r5, [r1, #4]
   827c4:	4413      	add	r3, r2
   827c6:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   827ca:	4082      	lsls	r2, r0
   827cc:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   827d0:	432a      	orrs	r2, r5
   827d2:	3808      	subs	r0, #8
   827d4:	60e0      	str	r0, [r4, #12]
   827d6:	60a7      	str	r7, [r4, #8]
   827d8:	604a      	str	r2, [r1, #4]
   827da:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   827de:	60fc      	str	r4, [r7, #12]
   827e0:	4640      	mov	r0, r8
   827e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   827e6:	f000 be3f 	b.w	83468 <__malloc_unlock>
   827ea:	4770      	bx	lr
   827ec:	0a5a      	lsrs	r2, r3, #9
   827ee:	2a04      	cmp	r2, #4
   827f0:	d852      	bhi.n	82898 <_free_r+0x13c>
   827f2:	099a      	lsrs	r2, r3, #6
   827f4:	f102 0739 	add.w	r7, r2, #57	; 0x39
   827f8:	00ff      	lsls	r7, r7, #3
   827fa:	f102 0538 	add.w	r5, r2, #56	; 0x38
   827fe:	19c8      	adds	r0, r1, r7
   82800:	59ca      	ldr	r2, [r1, r7]
   82802:	3808      	subs	r0, #8
   82804:	4290      	cmp	r0, r2
   82806:	d04f      	beq.n	828a8 <_free_r+0x14c>
   82808:	6851      	ldr	r1, [r2, #4]
   8280a:	f021 0103 	bic.w	r1, r1, #3
   8280e:	428b      	cmp	r3, r1
   82810:	d232      	bcs.n	82878 <_free_r+0x11c>
   82812:	6892      	ldr	r2, [r2, #8]
   82814:	4290      	cmp	r0, r2
   82816:	d1f7      	bne.n	82808 <_free_r+0xac>
   82818:	68c3      	ldr	r3, [r0, #12]
   8281a:	60a0      	str	r0, [r4, #8]
   8281c:	60e3      	str	r3, [r4, #12]
   8281e:	609c      	str	r4, [r3, #8]
   82820:	60c4      	str	r4, [r0, #12]
   82822:	4640      	mov	r0, r8
   82824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82828:	f000 be1e 	b.w	83468 <__malloc_unlock>
   8282c:	6895      	ldr	r5, [r2, #8]
   8282e:	4f3b      	ldr	r7, [pc, #236]	; (8291c <_free_r+0x1c0>)
   82830:	4403      	add	r3, r0
   82832:	42bd      	cmp	r5, r7
   82834:	d040      	beq.n	828b8 <_free_r+0x15c>
   82836:	68d0      	ldr	r0, [r2, #12]
   82838:	f043 0201 	orr.w	r2, r3, #1
   8283c:	60e8      	str	r0, [r5, #12]
   8283e:	6085      	str	r5, [r0, #8]
   82840:	6062      	str	r2, [r4, #4]
   82842:	50e3      	str	r3, [r4, r3]
   82844:	e7b7      	b.n	827b6 <_free_r+0x5a>
   82846:	07ff      	lsls	r7, r7, #31
   82848:	4403      	add	r3, r0
   8284a:	d407      	bmi.n	8285c <_free_r+0x100>
   8284c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82850:	1b64      	subs	r4, r4, r5
   82852:	68e2      	ldr	r2, [r4, #12]
   82854:	68a0      	ldr	r0, [r4, #8]
   82856:	442b      	add	r3, r5
   82858:	60c2      	str	r2, [r0, #12]
   8285a:	6090      	str	r0, [r2, #8]
   8285c:	4a30      	ldr	r2, [pc, #192]	; (82920 <_free_r+0x1c4>)
   8285e:	f043 0001 	orr.w	r0, r3, #1
   82862:	6812      	ldr	r2, [r2, #0]
   82864:	6060      	str	r0, [r4, #4]
   82866:	4293      	cmp	r3, r2
   82868:	608c      	str	r4, [r1, #8]
   8286a:	d3b9      	bcc.n	827e0 <_free_r+0x84>
   8286c:	4b2d      	ldr	r3, [pc, #180]	; (82924 <_free_r+0x1c8>)
   8286e:	4640      	mov	r0, r8
   82870:	6819      	ldr	r1, [r3, #0]
   82872:	f7ff ff23 	bl	826bc <_malloc_trim_r>
   82876:	e7b3      	b.n	827e0 <_free_r+0x84>
   82878:	4610      	mov	r0, r2
   8287a:	e7cd      	b.n	82818 <_free_r+0xbc>
   8287c:	1811      	adds	r1, r2, r0
   8287e:	6849      	ldr	r1, [r1, #4]
   82880:	07c9      	lsls	r1, r1, #31
   82882:	d444      	bmi.n	8290e <_free_r+0x1b2>
   82884:	6891      	ldr	r1, [r2, #8]
   82886:	4403      	add	r3, r0
   82888:	68d2      	ldr	r2, [r2, #12]
   8288a:	f043 0001 	orr.w	r0, r3, #1
   8288e:	60ca      	str	r2, [r1, #12]
   82890:	6091      	str	r1, [r2, #8]
   82892:	6060      	str	r0, [r4, #4]
   82894:	50e3      	str	r3, [r4, r3]
   82896:	e7a3      	b.n	827e0 <_free_r+0x84>
   82898:	2a14      	cmp	r2, #20
   8289a:	d816      	bhi.n	828ca <_free_r+0x16e>
   8289c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   828a0:	00ff      	lsls	r7, r7, #3
   828a2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   828a6:	e7aa      	b.n	827fe <_free_r+0xa2>
   828a8:	2301      	movs	r3, #1
   828aa:	10aa      	asrs	r2, r5, #2
   828ac:	684d      	ldr	r5, [r1, #4]
   828ae:	4093      	lsls	r3, r2
   828b0:	432b      	orrs	r3, r5
   828b2:	604b      	str	r3, [r1, #4]
   828b4:	4603      	mov	r3, r0
   828b6:	e7b0      	b.n	8281a <_free_r+0xbe>
   828b8:	f043 0201 	orr.w	r2, r3, #1
   828bc:	614c      	str	r4, [r1, #20]
   828be:	610c      	str	r4, [r1, #16]
   828c0:	60e5      	str	r5, [r4, #12]
   828c2:	60a5      	str	r5, [r4, #8]
   828c4:	6062      	str	r2, [r4, #4]
   828c6:	50e3      	str	r3, [r4, r3]
   828c8:	e78a      	b.n	827e0 <_free_r+0x84>
   828ca:	2a54      	cmp	r2, #84	; 0x54
   828cc:	d806      	bhi.n	828dc <_free_r+0x180>
   828ce:	0b1a      	lsrs	r2, r3, #12
   828d0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   828d4:	00ff      	lsls	r7, r7, #3
   828d6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   828da:	e790      	b.n	827fe <_free_r+0xa2>
   828dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   828e0:	d806      	bhi.n	828f0 <_free_r+0x194>
   828e2:	0bda      	lsrs	r2, r3, #15
   828e4:	f102 0778 	add.w	r7, r2, #120	; 0x78
   828e8:	00ff      	lsls	r7, r7, #3
   828ea:	f102 0577 	add.w	r5, r2, #119	; 0x77
   828ee:	e786      	b.n	827fe <_free_r+0xa2>
   828f0:	f240 5054 	movw	r0, #1364	; 0x554
   828f4:	4282      	cmp	r2, r0
   828f6:	d806      	bhi.n	82906 <_free_r+0x1aa>
   828f8:	0c9a      	lsrs	r2, r3, #18
   828fa:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   828fe:	00ff      	lsls	r7, r7, #3
   82900:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82904:	e77b      	b.n	827fe <_free_r+0xa2>
   82906:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8290a:	257e      	movs	r5, #126	; 0x7e
   8290c:	e777      	b.n	827fe <_free_r+0xa2>
   8290e:	f043 0101 	orr.w	r1, r3, #1
   82912:	6061      	str	r1, [r4, #4]
   82914:	6013      	str	r3, [r2, #0]
   82916:	e763      	b.n	827e0 <_free_r+0x84>
   82918:	200706d8 	.word	0x200706d8
   8291c:	200706e0 	.word	0x200706e0
   82920:	20070ae4 	.word	0x20070ae4
   82924:	20070cd4 	.word	0x20070cd4

00082928 <__sfvwrite_r>:
   82928:	6893      	ldr	r3, [r2, #8]
   8292a:	2b00      	cmp	r3, #0
   8292c:	d071      	beq.n	82a12 <__sfvwrite_r+0xea>
   8292e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82932:	898b      	ldrh	r3, [r1, #12]
   82934:	b083      	sub	sp, #12
   82936:	460c      	mov	r4, r1
   82938:	0719      	lsls	r1, r3, #28
   8293a:	9000      	str	r0, [sp, #0]
   8293c:	4616      	mov	r6, r2
   8293e:	d525      	bpl.n	8298c <__sfvwrite_r+0x64>
   82940:	6922      	ldr	r2, [r4, #16]
   82942:	b31a      	cbz	r2, 8298c <__sfvwrite_r+0x64>
   82944:	f013 0002 	ands.w	r0, r3, #2
   82948:	6835      	ldr	r5, [r6, #0]
   8294a:	d02b      	beq.n	829a4 <__sfvwrite_r+0x7c>
   8294c:	f04f 0900 	mov.w	r9, #0
   82950:	46b0      	mov	r8, r6
   82952:	464f      	mov	r7, r9
   82954:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82c18 <__sfvwrite_r+0x2f0>
   82958:	2f00      	cmp	r7, #0
   8295a:	d055      	beq.n	82a08 <__sfvwrite_r+0xe0>
   8295c:	4557      	cmp	r7, sl
   8295e:	463b      	mov	r3, r7
   82960:	464a      	mov	r2, r9
   82962:	bf28      	it	cs
   82964:	4653      	movcs	r3, sl
   82966:	69e1      	ldr	r1, [r4, #28]
   82968:	9800      	ldr	r0, [sp, #0]
   8296a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8296c:	47b0      	blx	r6
   8296e:	2800      	cmp	r0, #0
   82970:	dd56      	ble.n	82a20 <__sfvwrite_r+0xf8>
   82972:	f8d8 3008 	ldr.w	r3, [r8, #8]
   82976:	4481      	add	r9, r0
   82978:	1a1b      	subs	r3, r3, r0
   8297a:	1a3f      	subs	r7, r7, r0
   8297c:	f8c8 3008 	str.w	r3, [r8, #8]
   82980:	2b00      	cmp	r3, #0
   82982:	d1e9      	bne.n	82958 <__sfvwrite_r+0x30>
   82984:	2000      	movs	r0, #0
   82986:	b003      	add	sp, #12
   82988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8298c:	4621      	mov	r1, r4
   8298e:	9800      	ldr	r0, [sp, #0]
   82990:	f7ff fc56 	bl	82240 <__swsetup_r>
   82994:	2800      	cmp	r0, #0
   82996:	f040 8135 	bne.w	82c04 <__sfvwrite_r+0x2dc>
   8299a:	89a3      	ldrh	r3, [r4, #12]
   8299c:	6835      	ldr	r5, [r6, #0]
   8299e:	f013 0002 	ands.w	r0, r3, #2
   829a2:	d1d3      	bne.n	8294c <__sfvwrite_r+0x24>
   829a4:	f013 0901 	ands.w	r9, r3, #1
   829a8:	d144      	bne.n	82a34 <__sfvwrite_r+0x10c>
   829aa:	464f      	mov	r7, r9
   829ac:	9601      	str	r6, [sp, #4]
   829ae:	b337      	cbz	r7, 829fe <__sfvwrite_r+0xd6>
   829b0:	059a      	lsls	r2, r3, #22
   829b2:	f8d4 8008 	ldr.w	r8, [r4, #8]
   829b6:	f140 8085 	bpl.w	82ac4 <__sfvwrite_r+0x19c>
   829ba:	4547      	cmp	r7, r8
   829bc:	46c3      	mov	fp, r8
   829be:	f0c0 80ad 	bcc.w	82b1c <__sfvwrite_r+0x1f4>
   829c2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   829c6:	f040 80ae 	bne.w	82b26 <__sfvwrite_r+0x1fe>
   829ca:	46ba      	mov	sl, r7
   829cc:	6820      	ldr	r0, [r4, #0]
   829ce:	465a      	mov	r2, fp
   829d0:	4649      	mov	r1, r9
   829d2:	f000 fcdf 	bl	83394 <memmove>
   829d6:	68a2      	ldr	r2, [r4, #8]
   829d8:	6823      	ldr	r3, [r4, #0]
   829da:	eba2 0208 	sub.w	r2, r2, r8
   829de:	445b      	add	r3, fp
   829e0:	60a2      	str	r2, [r4, #8]
   829e2:	6023      	str	r3, [r4, #0]
   829e4:	9a01      	ldr	r2, [sp, #4]
   829e6:	44d1      	add	r9, sl
   829e8:	6893      	ldr	r3, [r2, #8]
   829ea:	eba7 070a 	sub.w	r7, r7, sl
   829ee:	eba3 030a 	sub.w	r3, r3, sl
   829f2:	6093      	str	r3, [r2, #8]
   829f4:	2b00      	cmp	r3, #0
   829f6:	d0c5      	beq.n	82984 <__sfvwrite_r+0x5c>
   829f8:	89a3      	ldrh	r3, [r4, #12]
   829fa:	2f00      	cmp	r7, #0
   829fc:	d1d8      	bne.n	829b0 <__sfvwrite_r+0x88>
   829fe:	f8d5 9000 	ldr.w	r9, [r5]
   82a02:	686f      	ldr	r7, [r5, #4]
   82a04:	3508      	adds	r5, #8
   82a06:	e7d2      	b.n	829ae <__sfvwrite_r+0x86>
   82a08:	f8d5 9000 	ldr.w	r9, [r5]
   82a0c:	686f      	ldr	r7, [r5, #4]
   82a0e:	3508      	adds	r5, #8
   82a10:	e7a2      	b.n	82958 <__sfvwrite_r+0x30>
   82a12:	2000      	movs	r0, #0
   82a14:	4770      	bx	lr
   82a16:	4621      	mov	r1, r4
   82a18:	9800      	ldr	r0, [sp, #0]
   82a1a:	f7ff fd21 	bl	82460 <_fflush_r>
   82a1e:	b378      	cbz	r0, 82a80 <__sfvwrite_r+0x158>
   82a20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82a24:	f04f 30ff 	mov.w	r0, #4294967295
   82a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82a2c:	81a3      	strh	r3, [r4, #12]
   82a2e:	b003      	add	sp, #12
   82a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a34:	4681      	mov	r9, r0
   82a36:	4633      	mov	r3, r6
   82a38:	464e      	mov	r6, r9
   82a3a:	46a8      	mov	r8, r5
   82a3c:	469a      	mov	sl, r3
   82a3e:	464d      	mov	r5, r9
   82a40:	b356      	cbz	r6, 82a98 <__sfvwrite_r+0x170>
   82a42:	2800      	cmp	r0, #0
   82a44:	d032      	beq.n	82aac <__sfvwrite_r+0x184>
   82a46:	45b1      	cmp	r9, r6
   82a48:	46cb      	mov	fp, r9
   82a4a:	bf28      	it	cs
   82a4c:	46b3      	movcs	fp, r6
   82a4e:	6820      	ldr	r0, [r4, #0]
   82a50:	6923      	ldr	r3, [r4, #16]
   82a52:	465f      	mov	r7, fp
   82a54:	4298      	cmp	r0, r3
   82a56:	6962      	ldr	r2, [r4, #20]
   82a58:	d904      	bls.n	82a64 <__sfvwrite_r+0x13c>
   82a5a:	68a3      	ldr	r3, [r4, #8]
   82a5c:	4413      	add	r3, r2
   82a5e:	459b      	cmp	fp, r3
   82a60:	f300 80a8 	bgt.w	82bb4 <__sfvwrite_r+0x28c>
   82a64:	4593      	cmp	fp, r2
   82a66:	db4d      	blt.n	82b04 <__sfvwrite_r+0x1dc>
   82a68:	4613      	mov	r3, r2
   82a6a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82a6c:	462a      	mov	r2, r5
   82a6e:	69e1      	ldr	r1, [r4, #28]
   82a70:	9800      	ldr	r0, [sp, #0]
   82a72:	47b8      	blx	r7
   82a74:	1e07      	subs	r7, r0, #0
   82a76:	ddd3      	ble.n	82a20 <__sfvwrite_r+0xf8>
   82a78:	ebb9 0907 	subs.w	r9, r9, r7
   82a7c:	d0cb      	beq.n	82a16 <__sfvwrite_r+0xee>
   82a7e:	2001      	movs	r0, #1
   82a80:	f8da 3008 	ldr.w	r3, [sl, #8]
   82a84:	443d      	add	r5, r7
   82a86:	1bdb      	subs	r3, r3, r7
   82a88:	1bf6      	subs	r6, r6, r7
   82a8a:	f8ca 3008 	str.w	r3, [sl, #8]
   82a8e:	2b00      	cmp	r3, #0
   82a90:	f43f af78 	beq.w	82984 <__sfvwrite_r+0x5c>
   82a94:	2e00      	cmp	r6, #0
   82a96:	d1d4      	bne.n	82a42 <__sfvwrite_r+0x11a>
   82a98:	f108 0308 	add.w	r3, r8, #8
   82a9c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82aa0:	4698      	mov	r8, r3
   82aa2:	f853 5c08 	ldr.w	r5, [r3, #-8]
   82aa6:	3308      	adds	r3, #8
   82aa8:	2e00      	cmp	r6, #0
   82aaa:	d0f7      	beq.n	82a9c <__sfvwrite_r+0x174>
   82aac:	4632      	mov	r2, r6
   82aae:	210a      	movs	r1, #10
   82ab0:	4628      	mov	r0, r5
   82ab2:	f000 fc29 	bl	83308 <memchr>
   82ab6:	2800      	cmp	r0, #0
   82ab8:	f000 80a1 	beq.w	82bfe <__sfvwrite_r+0x2d6>
   82abc:	3001      	adds	r0, #1
   82abe:	eba0 0905 	sub.w	r9, r0, r5
   82ac2:	e7c0      	b.n	82a46 <__sfvwrite_r+0x11e>
   82ac4:	6820      	ldr	r0, [r4, #0]
   82ac6:	6923      	ldr	r3, [r4, #16]
   82ac8:	4298      	cmp	r0, r3
   82aca:	d802      	bhi.n	82ad2 <__sfvwrite_r+0x1aa>
   82acc:	6963      	ldr	r3, [r4, #20]
   82ace:	429f      	cmp	r7, r3
   82ad0:	d25d      	bcs.n	82b8e <__sfvwrite_r+0x266>
   82ad2:	45b8      	cmp	r8, r7
   82ad4:	bf28      	it	cs
   82ad6:	46b8      	movcs	r8, r7
   82ad8:	4649      	mov	r1, r9
   82ada:	4642      	mov	r2, r8
   82adc:	f000 fc5a 	bl	83394 <memmove>
   82ae0:	68a3      	ldr	r3, [r4, #8]
   82ae2:	6822      	ldr	r2, [r4, #0]
   82ae4:	eba3 0308 	sub.w	r3, r3, r8
   82ae8:	4442      	add	r2, r8
   82aea:	60a3      	str	r3, [r4, #8]
   82aec:	6022      	str	r2, [r4, #0]
   82aee:	b10b      	cbz	r3, 82af4 <__sfvwrite_r+0x1cc>
   82af0:	46c2      	mov	sl, r8
   82af2:	e777      	b.n	829e4 <__sfvwrite_r+0xbc>
   82af4:	4621      	mov	r1, r4
   82af6:	9800      	ldr	r0, [sp, #0]
   82af8:	f7ff fcb2 	bl	82460 <_fflush_r>
   82afc:	2800      	cmp	r0, #0
   82afe:	d18f      	bne.n	82a20 <__sfvwrite_r+0xf8>
   82b00:	46c2      	mov	sl, r8
   82b02:	e76f      	b.n	829e4 <__sfvwrite_r+0xbc>
   82b04:	465a      	mov	r2, fp
   82b06:	4629      	mov	r1, r5
   82b08:	f000 fc44 	bl	83394 <memmove>
   82b0c:	68a2      	ldr	r2, [r4, #8]
   82b0e:	6823      	ldr	r3, [r4, #0]
   82b10:	eba2 020b 	sub.w	r2, r2, fp
   82b14:	445b      	add	r3, fp
   82b16:	60a2      	str	r2, [r4, #8]
   82b18:	6023      	str	r3, [r4, #0]
   82b1a:	e7ad      	b.n	82a78 <__sfvwrite_r+0x150>
   82b1c:	46b8      	mov	r8, r7
   82b1e:	46ba      	mov	sl, r7
   82b20:	46bb      	mov	fp, r7
   82b22:	6820      	ldr	r0, [r4, #0]
   82b24:	e753      	b.n	829ce <__sfvwrite_r+0xa6>
   82b26:	6962      	ldr	r2, [r4, #20]
   82b28:	6820      	ldr	r0, [r4, #0]
   82b2a:	6921      	ldr	r1, [r4, #16]
   82b2c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82b30:	eba0 0a01 	sub.w	sl, r0, r1
   82b34:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82b38:	f10a 0001 	add.w	r0, sl, #1
   82b3c:	ea4f 0868 	mov.w	r8, r8, asr #1
   82b40:	4438      	add	r0, r7
   82b42:	4540      	cmp	r0, r8
   82b44:	4642      	mov	r2, r8
   82b46:	bf84      	itt	hi
   82b48:	4680      	movhi	r8, r0
   82b4a:	4642      	movhi	r2, r8
   82b4c:	055b      	lsls	r3, r3, #21
   82b4e:	d544      	bpl.n	82bda <__sfvwrite_r+0x2b2>
   82b50:	4611      	mov	r1, r2
   82b52:	9800      	ldr	r0, [sp, #0]
   82b54:	f000 f920 	bl	82d98 <_malloc_r>
   82b58:	4683      	mov	fp, r0
   82b5a:	2800      	cmp	r0, #0
   82b5c:	d055      	beq.n	82c0a <__sfvwrite_r+0x2e2>
   82b5e:	4652      	mov	r2, sl
   82b60:	6921      	ldr	r1, [r4, #16]
   82b62:	f7fe fae3 	bl	8112c <memcpy>
   82b66:	89a3      	ldrh	r3, [r4, #12]
   82b68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82b70:	81a3      	strh	r3, [r4, #12]
   82b72:	eb0b 000a 	add.w	r0, fp, sl
   82b76:	eba8 030a 	sub.w	r3, r8, sl
   82b7a:	f8c4 b010 	str.w	fp, [r4, #16]
   82b7e:	f8c4 8014 	str.w	r8, [r4, #20]
   82b82:	6020      	str	r0, [r4, #0]
   82b84:	60a3      	str	r3, [r4, #8]
   82b86:	46b8      	mov	r8, r7
   82b88:	46ba      	mov	sl, r7
   82b8a:	46bb      	mov	fp, r7
   82b8c:	e71f      	b.n	829ce <__sfvwrite_r+0xa6>
   82b8e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82b92:	42ba      	cmp	r2, r7
   82b94:	bf28      	it	cs
   82b96:	463a      	movcs	r2, r7
   82b98:	fb92 f2f3 	sdiv	r2, r2, r3
   82b9c:	69e1      	ldr	r1, [r4, #28]
   82b9e:	fb03 f302 	mul.w	r3, r3, r2
   82ba2:	9800      	ldr	r0, [sp, #0]
   82ba4:	464a      	mov	r2, r9
   82ba6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82ba8:	47b0      	blx	r6
   82baa:	f1b0 0a00 	subs.w	sl, r0, #0
   82bae:	f73f af19 	bgt.w	829e4 <__sfvwrite_r+0xbc>
   82bb2:	e735      	b.n	82a20 <__sfvwrite_r+0xf8>
   82bb4:	461a      	mov	r2, r3
   82bb6:	4629      	mov	r1, r5
   82bb8:	9301      	str	r3, [sp, #4]
   82bba:	f000 fbeb 	bl	83394 <memmove>
   82bbe:	6822      	ldr	r2, [r4, #0]
   82bc0:	9b01      	ldr	r3, [sp, #4]
   82bc2:	4621      	mov	r1, r4
   82bc4:	441a      	add	r2, r3
   82bc6:	6022      	str	r2, [r4, #0]
   82bc8:	9800      	ldr	r0, [sp, #0]
   82bca:	f7ff fc49 	bl	82460 <_fflush_r>
   82bce:	9b01      	ldr	r3, [sp, #4]
   82bd0:	2800      	cmp	r0, #0
   82bd2:	f47f af25 	bne.w	82a20 <__sfvwrite_r+0xf8>
   82bd6:	461f      	mov	r7, r3
   82bd8:	e74e      	b.n	82a78 <__sfvwrite_r+0x150>
   82bda:	9800      	ldr	r0, [sp, #0]
   82bdc:	f000 fc4a 	bl	83474 <_realloc_r>
   82be0:	4683      	mov	fp, r0
   82be2:	2800      	cmp	r0, #0
   82be4:	d1c5      	bne.n	82b72 <__sfvwrite_r+0x24a>
   82be6:	9d00      	ldr	r5, [sp, #0]
   82be8:	6921      	ldr	r1, [r4, #16]
   82bea:	4628      	mov	r0, r5
   82bec:	f7ff fdb6 	bl	8275c <_free_r>
   82bf0:	220c      	movs	r2, #12
   82bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82bf6:	602a      	str	r2, [r5, #0]
   82bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82bfc:	e712      	b.n	82a24 <__sfvwrite_r+0xfc>
   82bfe:	f106 0901 	add.w	r9, r6, #1
   82c02:	e720      	b.n	82a46 <__sfvwrite_r+0x11e>
   82c04:	f04f 30ff 	mov.w	r0, #4294967295
   82c08:	e6bd      	b.n	82986 <__sfvwrite_r+0x5e>
   82c0a:	220c      	movs	r2, #12
   82c0c:	9900      	ldr	r1, [sp, #0]
   82c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82c12:	600a      	str	r2, [r1, #0]
   82c14:	e706      	b.n	82a24 <__sfvwrite_r+0xfc>
   82c16:	bf00      	nop
   82c18:	7ffffc00 	.word	0x7ffffc00

00082c1c <_fwalk_reent>:
   82c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82c20:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82c24:	d01e      	beq.n	82c64 <_fwalk_reent+0x48>
   82c26:	4688      	mov	r8, r1
   82c28:	4607      	mov	r7, r0
   82c2a:	f04f 0900 	mov.w	r9, #0
   82c2e:	6875      	ldr	r5, [r6, #4]
   82c30:	68b4      	ldr	r4, [r6, #8]
   82c32:	3d01      	subs	r5, #1
   82c34:	d410      	bmi.n	82c58 <_fwalk_reent+0x3c>
   82c36:	89a3      	ldrh	r3, [r4, #12]
   82c38:	3d01      	subs	r5, #1
   82c3a:	2b01      	cmp	r3, #1
   82c3c:	d908      	bls.n	82c50 <_fwalk_reent+0x34>
   82c3e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82c42:	3301      	adds	r3, #1
   82c44:	d004      	beq.n	82c50 <_fwalk_reent+0x34>
   82c46:	4621      	mov	r1, r4
   82c48:	4638      	mov	r0, r7
   82c4a:	47c0      	blx	r8
   82c4c:	ea49 0900 	orr.w	r9, r9, r0
   82c50:	1c6b      	adds	r3, r5, #1
   82c52:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82c56:	d1ee      	bne.n	82c36 <_fwalk_reent+0x1a>
   82c58:	6836      	ldr	r6, [r6, #0]
   82c5a:	2e00      	cmp	r6, #0
   82c5c:	d1e7      	bne.n	82c2e <_fwalk_reent+0x12>
   82c5e:	4648      	mov	r0, r9
   82c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82c64:	46b1      	mov	r9, r6
   82c66:	4648      	mov	r0, r9
   82c68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082c6c <__locale_mb_cur_max>:
   82c6c:	4b04      	ldr	r3, [pc, #16]	; (82c80 <__locale_mb_cur_max+0x14>)
   82c6e:	4a05      	ldr	r2, [pc, #20]	; (82c84 <__locale_mb_cur_max+0x18>)
   82c70:	681b      	ldr	r3, [r3, #0]
   82c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82c74:	2b00      	cmp	r3, #0
   82c76:	bf08      	it	eq
   82c78:	4613      	moveq	r3, r2
   82c7a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82c7e:	4770      	bx	lr
   82c80:	20070138 	.word	0x20070138
   82c84:	2007056c 	.word	0x2007056c

00082c88 <__retarget_lock_init_recursive>:
   82c88:	4770      	bx	lr
   82c8a:	bf00      	nop

00082c8c <__retarget_lock_close_recursive>:
   82c8c:	4770      	bx	lr
   82c8e:	bf00      	nop

00082c90 <__retarget_lock_acquire_recursive>:
   82c90:	4770      	bx	lr
   82c92:	bf00      	nop

00082c94 <__retarget_lock_release_recursive>:
   82c94:	4770      	bx	lr
   82c96:	bf00      	nop

00082c98 <__swhatbuf_r>:
   82c98:	b570      	push	{r4, r5, r6, lr}
   82c9a:	460c      	mov	r4, r1
   82c9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82ca0:	b090      	sub	sp, #64	; 0x40
   82ca2:	2900      	cmp	r1, #0
   82ca4:	4615      	mov	r5, r2
   82ca6:	461e      	mov	r6, r3
   82ca8:	db14      	blt.n	82cd4 <__swhatbuf_r+0x3c>
   82caa:	aa01      	add	r2, sp, #4
   82cac:	f000 ff68 	bl	83b80 <_fstat_r>
   82cb0:	2800      	cmp	r0, #0
   82cb2:	db0f      	blt.n	82cd4 <__swhatbuf_r+0x3c>
   82cb4:	9a02      	ldr	r2, [sp, #8]
   82cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82cba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82cbe:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82cc2:	fab2 f282 	clz	r2, r2
   82cc6:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82cca:	0952      	lsrs	r2, r2, #5
   82ccc:	6032      	str	r2, [r6, #0]
   82cce:	602b      	str	r3, [r5, #0]
   82cd0:	b010      	add	sp, #64	; 0x40
   82cd2:	bd70      	pop	{r4, r5, r6, pc}
   82cd4:	2300      	movs	r3, #0
   82cd6:	89a2      	ldrh	r2, [r4, #12]
   82cd8:	6033      	str	r3, [r6, #0]
   82cda:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82cde:	d004      	beq.n	82cea <__swhatbuf_r+0x52>
   82ce0:	2240      	movs	r2, #64	; 0x40
   82ce2:	4618      	mov	r0, r3
   82ce4:	602a      	str	r2, [r5, #0]
   82ce6:	b010      	add	sp, #64	; 0x40
   82ce8:	bd70      	pop	{r4, r5, r6, pc}
   82cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82cee:	602b      	str	r3, [r5, #0]
   82cf0:	b010      	add	sp, #64	; 0x40
   82cf2:	bd70      	pop	{r4, r5, r6, pc}

00082cf4 <__smakebuf_r>:
   82cf4:	898a      	ldrh	r2, [r1, #12]
   82cf6:	460b      	mov	r3, r1
   82cf8:	0792      	lsls	r2, r2, #30
   82cfa:	d506      	bpl.n	82d0a <__smakebuf_r+0x16>
   82cfc:	2101      	movs	r1, #1
   82cfe:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82d02:	6159      	str	r1, [r3, #20]
   82d04:	601a      	str	r2, [r3, #0]
   82d06:	611a      	str	r2, [r3, #16]
   82d08:	4770      	bx	lr
   82d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
   82d0c:	b083      	sub	sp, #12
   82d0e:	ab01      	add	r3, sp, #4
   82d10:	466a      	mov	r2, sp
   82d12:	460c      	mov	r4, r1
   82d14:	4606      	mov	r6, r0
   82d16:	f7ff ffbf 	bl	82c98 <__swhatbuf_r>
   82d1a:	9900      	ldr	r1, [sp, #0]
   82d1c:	4605      	mov	r5, r0
   82d1e:	4630      	mov	r0, r6
   82d20:	f000 f83a 	bl	82d98 <_malloc_r>
   82d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82d28:	b1d8      	cbz	r0, 82d62 <__smakebuf_r+0x6e>
   82d2a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82d2e:	4f15      	ldr	r7, [pc, #84]	; (82d84 <__smakebuf_r+0x90>)
   82d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82d34:	63f7      	str	r7, [r6, #60]	; 0x3c
   82d36:	81a3      	strh	r3, [r4, #12]
   82d38:	6020      	str	r0, [r4, #0]
   82d3a:	6120      	str	r0, [r4, #16]
   82d3c:	6161      	str	r1, [r4, #20]
   82d3e:	b91a      	cbnz	r2, 82d48 <__smakebuf_r+0x54>
   82d40:	432b      	orrs	r3, r5
   82d42:	81a3      	strh	r3, [r4, #12]
   82d44:	b003      	add	sp, #12
   82d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82d48:	4630      	mov	r0, r6
   82d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82d4e:	f000 ff2b 	bl	83ba8 <_isatty_r>
   82d52:	b1a0      	cbz	r0, 82d7e <__smakebuf_r+0x8a>
   82d54:	89a3      	ldrh	r3, [r4, #12]
   82d56:	f023 0303 	bic.w	r3, r3, #3
   82d5a:	f043 0301 	orr.w	r3, r3, #1
   82d5e:	b21b      	sxth	r3, r3
   82d60:	e7ee      	b.n	82d40 <__smakebuf_r+0x4c>
   82d62:	059a      	lsls	r2, r3, #22
   82d64:	d4ee      	bmi.n	82d44 <__smakebuf_r+0x50>
   82d66:	2101      	movs	r1, #1
   82d68:	f023 0303 	bic.w	r3, r3, #3
   82d6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82d70:	f043 0302 	orr.w	r3, r3, #2
   82d74:	81a3      	strh	r3, [r4, #12]
   82d76:	6161      	str	r1, [r4, #20]
   82d78:	6022      	str	r2, [r4, #0]
   82d7a:	6122      	str	r2, [r4, #16]
   82d7c:	e7e2      	b.n	82d44 <__smakebuf_r+0x50>
   82d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82d82:	e7dd      	b.n	82d40 <__smakebuf_r+0x4c>
   82d84:	000824b5 	.word	0x000824b5

00082d88 <malloc>:
   82d88:	4b02      	ldr	r3, [pc, #8]	; (82d94 <malloc+0xc>)
   82d8a:	4601      	mov	r1, r0
   82d8c:	6818      	ldr	r0, [r3, #0]
   82d8e:	f000 b803 	b.w	82d98 <_malloc_r>
   82d92:	bf00      	nop
   82d94:	20070138 	.word	0x20070138

00082d98 <_malloc_r>:
   82d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82d9c:	f101 060b 	add.w	r6, r1, #11
   82da0:	2e16      	cmp	r6, #22
   82da2:	b083      	sub	sp, #12
   82da4:	4605      	mov	r5, r0
   82da6:	f240 809e 	bls.w	82ee6 <_malloc_r+0x14e>
   82daa:	f036 0607 	bics.w	r6, r6, #7
   82dae:	f100 80bd 	bmi.w	82f2c <_malloc_r+0x194>
   82db2:	42b1      	cmp	r1, r6
   82db4:	f200 80ba 	bhi.w	82f2c <_malloc_r+0x194>
   82db8:	f000 fb50 	bl	8345c <__malloc_lock>
   82dbc:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82dc0:	f0c0 8285 	bcc.w	832ce <_malloc_r+0x536>
   82dc4:	0a73      	lsrs	r3, r6, #9
   82dc6:	f000 80b8 	beq.w	82f3a <_malloc_r+0x1a2>
   82dca:	2b04      	cmp	r3, #4
   82dcc:	f200 816c 	bhi.w	830a8 <_malloc_r+0x310>
   82dd0:	09b3      	lsrs	r3, r6, #6
   82dd2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82dd6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82dda:	00c1      	lsls	r1, r0, #3
   82ddc:	4fb8      	ldr	r7, [pc, #736]	; (830c0 <_malloc_r+0x328>)
   82dde:	4439      	add	r1, r7
   82de0:	684c      	ldr	r4, [r1, #4]
   82de2:	3908      	subs	r1, #8
   82de4:	42a1      	cmp	r1, r4
   82de6:	d106      	bne.n	82df6 <_malloc_r+0x5e>
   82de8:	e00c      	b.n	82e04 <_malloc_r+0x6c>
   82dea:	2a00      	cmp	r2, #0
   82dec:	f280 80ab 	bge.w	82f46 <_malloc_r+0x1ae>
   82df0:	68e4      	ldr	r4, [r4, #12]
   82df2:	42a1      	cmp	r1, r4
   82df4:	d006      	beq.n	82e04 <_malloc_r+0x6c>
   82df6:	6863      	ldr	r3, [r4, #4]
   82df8:	f023 0303 	bic.w	r3, r3, #3
   82dfc:	1b9a      	subs	r2, r3, r6
   82dfe:	2a0f      	cmp	r2, #15
   82e00:	ddf3      	ble.n	82dea <_malloc_r+0x52>
   82e02:	4670      	mov	r0, lr
   82e04:	693c      	ldr	r4, [r7, #16]
   82e06:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 830d4 <_malloc_r+0x33c>
   82e0a:	4574      	cmp	r4, lr
   82e0c:	f000 819e 	beq.w	8314c <_malloc_r+0x3b4>
   82e10:	6863      	ldr	r3, [r4, #4]
   82e12:	f023 0303 	bic.w	r3, r3, #3
   82e16:	1b9a      	subs	r2, r3, r6
   82e18:	2a0f      	cmp	r2, #15
   82e1a:	f300 8183 	bgt.w	83124 <_malloc_r+0x38c>
   82e1e:	2a00      	cmp	r2, #0
   82e20:	f8c7 e014 	str.w	lr, [r7, #20]
   82e24:	f8c7 e010 	str.w	lr, [r7, #16]
   82e28:	f280 8091 	bge.w	82f4e <_malloc_r+0x1b6>
   82e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82e30:	f080 8154 	bcs.w	830dc <_malloc_r+0x344>
   82e34:	2201      	movs	r2, #1
   82e36:	08db      	lsrs	r3, r3, #3
   82e38:	6879      	ldr	r1, [r7, #4]
   82e3a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82e3e:	4413      	add	r3, r2
   82e40:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82e44:	fa02 f20c 	lsl.w	r2, r2, ip
   82e48:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82e4c:	430a      	orrs	r2, r1
   82e4e:	f1ac 0108 	sub.w	r1, ip, #8
   82e52:	60e1      	str	r1, [r4, #12]
   82e54:	f8c4 8008 	str.w	r8, [r4, #8]
   82e58:	607a      	str	r2, [r7, #4]
   82e5a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82e5e:	f8c8 400c 	str.w	r4, [r8, #12]
   82e62:	2401      	movs	r4, #1
   82e64:	1083      	asrs	r3, r0, #2
   82e66:	409c      	lsls	r4, r3
   82e68:	4294      	cmp	r4, r2
   82e6a:	d87d      	bhi.n	82f68 <_malloc_r+0x1d0>
   82e6c:	4214      	tst	r4, r2
   82e6e:	d106      	bne.n	82e7e <_malloc_r+0xe6>
   82e70:	f020 0003 	bic.w	r0, r0, #3
   82e74:	0064      	lsls	r4, r4, #1
   82e76:	4214      	tst	r4, r2
   82e78:	f100 0004 	add.w	r0, r0, #4
   82e7c:	d0fa      	beq.n	82e74 <_malloc_r+0xdc>
   82e7e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82e82:	46cc      	mov	ip, r9
   82e84:	4680      	mov	r8, r0
   82e86:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82e8a:	459c      	cmp	ip, r3
   82e8c:	d107      	bne.n	82e9e <_malloc_r+0x106>
   82e8e:	e15f      	b.n	83150 <_malloc_r+0x3b8>
   82e90:	2a00      	cmp	r2, #0
   82e92:	f280 816d 	bge.w	83170 <_malloc_r+0x3d8>
   82e96:	68db      	ldr	r3, [r3, #12]
   82e98:	459c      	cmp	ip, r3
   82e9a:	f000 8159 	beq.w	83150 <_malloc_r+0x3b8>
   82e9e:	6859      	ldr	r1, [r3, #4]
   82ea0:	f021 0103 	bic.w	r1, r1, #3
   82ea4:	1b8a      	subs	r2, r1, r6
   82ea6:	2a0f      	cmp	r2, #15
   82ea8:	ddf2      	ble.n	82e90 <_malloc_r+0xf8>
   82eaa:	68dc      	ldr	r4, [r3, #12]
   82eac:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82eb0:	f046 0801 	orr.w	r8, r6, #1
   82eb4:	4628      	mov	r0, r5
   82eb6:	441e      	add	r6, r3
   82eb8:	f042 0501 	orr.w	r5, r2, #1
   82ebc:	f8c3 8004 	str.w	r8, [r3, #4]
   82ec0:	f8cc 400c 	str.w	r4, [ip, #12]
   82ec4:	f8c4 c008 	str.w	ip, [r4, #8]
   82ec8:	617e      	str	r6, [r7, #20]
   82eca:	613e      	str	r6, [r7, #16]
   82ecc:	f8c6 e00c 	str.w	lr, [r6, #12]
   82ed0:	f8c6 e008 	str.w	lr, [r6, #8]
   82ed4:	6075      	str	r5, [r6, #4]
   82ed6:	505a      	str	r2, [r3, r1]
   82ed8:	9300      	str	r3, [sp, #0]
   82eda:	f000 fac5 	bl	83468 <__malloc_unlock>
   82ede:	9b00      	ldr	r3, [sp, #0]
   82ee0:	f103 0408 	add.w	r4, r3, #8
   82ee4:	e01e      	b.n	82f24 <_malloc_r+0x18c>
   82ee6:	2910      	cmp	r1, #16
   82ee8:	d820      	bhi.n	82f2c <_malloc_r+0x194>
   82eea:	f000 fab7 	bl	8345c <__malloc_lock>
   82eee:	2610      	movs	r6, #16
   82ef0:	2318      	movs	r3, #24
   82ef2:	2002      	movs	r0, #2
   82ef4:	4f72      	ldr	r7, [pc, #456]	; (830c0 <_malloc_r+0x328>)
   82ef6:	443b      	add	r3, r7
   82ef8:	685c      	ldr	r4, [r3, #4]
   82efa:	f1a3 0208 	sub.w	r2, r3, #8
   82efe:	4294      	cmp	r4, r2
   82f00:	f000 812f 	beq.w	83162 <_malloc_r+0x3ca>
   82f04:	6863      	ldr	r3, [r4, #4]
   82f06:	68e1      	ldr	r1, [r4, #12]
   82f08:	f023 0303 	bic.w	r3, r3, #3
   82f0c:	4423      	add	r3, r4
   82f0e:	685a      	ldr	r2, [r3, #4]
   82f10:	68a6      	ldr	r6, [r4, #8]
   82f12:	f042 0201 	orr.w	r2, r2, #1
   82f16:	60f1      	str	r1, [r6, #12]
   82f18:	4628      	mov	r0, r5
   82f1a:	608e      	str	r6, [r1, #8]
   82f1c:	605a      	str	r2, [r3, #4]
   82f1e:	f000 faa3 	bl	83468 <__malloc_unlock>
   82f22:	3408      	adds	r4, #8
   82f24:	4620      	mov	r0, r4
   82f26:	b003      	add	sp, #12
   82f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f2c:	2400      	movs	r4, #0
   82f2e:	230c      	movs	r3, #12
   82f30:	4620      	mov	r0, r4
   82f32:	602b      	str	r3, [r5, #0]
   82f34:	b003      	add	sp, #12
   82f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f3a:	2040      	movs	r0, #64	; 0x40
   82f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
   82f40:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82f44:	e74a      	b.n	82ddc <_malloc_r+0x44>
   82f46:	4423      	add	r3, r4
   82f48:	685a      	ldr	r2, [r3, #4]
   82f4a:	68e1      	ldr	r1, [r4, #12]
   82f4c:	e7e0      	b.n	82f10 <_malloc_r+0x178>
   82f4e:	4423      	add	r3, r4
   82f50:	685a      	ldr	r2, [r3, #4]
   82f52:	4628      	mov	r0, r5
   82f54:	f042 0201 	orr.w	r2, r2, #1
   82f58:	605a      	str	r2, [r3, #4]
   82f5a:	3408      	adds	r4, #8
   82f5c:	f000 fa84 	bl	83468 <__malloc_unlock>
   82f60:	4620      	mov	r0, r4
   82f62:	b003      	add	sp, #12
   82f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f68:	68bc      	ldr	r4, [r7, #8]
   82f6a:	6863      	ldr	r3, [r4, #4]
   82f6c:	f023 0803 	bic.w	r8, r3, #3
   82f70:	45b0      	cmp	r8, r6
   82f72:	d304      	bcc.n	82f7e <_malloc_r+0x1e6>
   82f74:	eba8 0306 	sub.w	r3, r8, r6
   82f78:	2b0f      	cmp	r3, #15
   82f7a:	f300 8085 	bgt.w	83088 <_malloc_r+0x2f0>
   82f7e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 830d8 <_malloc_r+0x340>
   82f82:	4b50      	ldr	r3, [pc, #320]	; (830c4 <_malloc_r+0x32c>)
   82f84:	f8d9 2000 	ldr.w	r2, [r9]
   82f88:	681b      	ldr	r3, [r3, #0]
   82f8a:	3201      	adds	r2, #1
   82f8c:	4433      	add	r3, r6
   82f8e:	eb04 0a08 	add.w	sl, r4, r8
   82f92:	f000 8154 	beq.w	8323e <_malloc_r+0x4a6>
   82f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82f9a:	330f      	adds	r3, #15
   82f9c:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82fa0:	f02b 0b0f 	bic.w	fp, fp, #15
   82fa4:	4659      	mov	r1, fp
   82fa6:	4628      	mov	r0, r5
   82fa8:	f000 fc1a 	bl	837e0 <_sbrk_r>
   82fac:	1c41      	adds	r1, r0, #1
   82fae:	4602      	mov	r2, r0
   82fb0:	f000 80fb 	beq.w	831aa <_malloc_r+0x412>
   82fb4:	4582      	cmp	sl, r0
   82fb6:	f200 80f6 	bhi.w	831a6 <_malloc_r+0x40e>
   82fba:	4b43      	ldr	r3, [pc, #268]	; (830c8 <_malloc_r+0x330>)
   82fbc:	6819      	ldr	r1, [r3, #0]
   82fbe:	4459      	add	r1, fp
   82fc0:	6019      	str	r1, [r3, #0]
   82fc2:	f000 814c 	beq.w	8325e <_malloc_r+0x4c6>
   82fc6:	f8d9 0000 	ldr.w	r0, [r9]
   82fca:	3001      	adds	r0, #1
   82fcc:	bf1b      	ittet	ne
   82fce:	eba2 0a0a 	subne.w	sl, r2, sl
   82fd2:	4451      	addne	r1, sl
   82fd4:	f8c9 2000 	streq.w	r2, [r9]
   82fd8:	6019      	strne	r1, [r3, #0]
   82fda:	f012 0107 	ands.w	r1, r2, #7
   82fde:	f000 8114 	beq.w	8320a <_malloc_r+0x472>
   82fe2:	f1c1 0008 	rsb	r0, r1, #8
   82fe6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82fea:	4402      	add	r2, r0
   82fec:	3108      	adds	r1, #8
   82fee:	eb02 090b 	add.w	r9, r2, fp
   82ff2:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82ff6:	eba1 0909 	sub.w	r9, r1, r9
   82ffa:	4649      	mov	r1, r9
   82ffc:	4628      	mov	r0, r5
   82ffe:	9301      	str	r3, [sp, #4]
   83000:	9200      	str	r2, [sp, #0]
   83002:	f000 fbed 	bl	837e0 <_sbrk_r>
   83006:	1c43      	adds	r3, r0, #1
   83008:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8300c:	f000 8142 	beq.w	83294 <_malloc_r+0x4fc>
   83010:	1a80      	subs	r0, r0, r2
   83012:	4448      	add	r0, r9
   83014:	f040 0001 	orr.w	r0, r0, #1
   83018:	6819      	ldr	r1, [r3, #0]
   8301a:	42bc      	cmp	r4, r7
   8301c:	4449      	add	r1, r9
   8301e:	60ba      	str	r2, [r7, #8]
   83020:	6019      	str	r1, [r3, #0]
   83022:	6050      	str	r0, [r2, #4]
   83024:	d017      	beq.n	83056 <_malloc_r+0x2be>
   83026:	f1b8 0f0f 	cmp.w	r8, #15
   8302a:	f240 80fa 	bls.w	83222 <_malloc_r+0x48a>
   8302e:	f04f 0c05 	mov.w	ip, #5
   83032:	6862      	ldr	r2, [r4, #4]
   83034:	f1a8 000c 	sub.w	r0, r8, #12
   83038:	f020 0007 	bic.w	r0, r0, #7
   8303c:	f002 0201 	and.w	r2, r2, #1
   83040:	eb04 0e00 	add.w	lr, r4, r0
   83044:	4302      	orrs	r2, r0
   83046:	280f      	cmp	r0, #15
   83048:	6062      	str	r2, [r4, #4]
   8304a:	f8ce c004 	str.w	ip, [lr, #4]
   8304e:	f8ce c008 	str.w	ip, [lr, #8]
   83052:	f200 8116 	bhi.w	83282 <_malloc_r+0x4ea>
   83056:	4b1d      	ldr	r3, [pc, #116]	; (830cc <_malloc_r+0x334>)
   83058:	68bc      	ldr	r4, [r7, #8]
   8305a:	681a      	ldr	r2, [r3, #0]
   8305c:	4291      	cmp	r1, r2
   8305e:	bf88      	it	hi
   83060:	6019      	strhi	r1, [r3, #0]
   83062:	4b1b      	ldr	r3, [pc, #108]	; (830d0 <_malloc_r+0x338>)
   83064:	681a      	ldr	r2, [r3, #0]
   83066:	4291      	cmp	r1, r2
   83068:	6862      	ldr	r2, [r4, #4]
   8306a:	bf88      	it	hi
   8306c:	6019      	strhi	r1, [r3, #0]
   8306e:	f022 0203 	bic.w	r2, r2, #3
   83072:	4296      	cmp	r6, r2
   83074:	eba2 0306 	sub.w	r3, r2, r6
   83078:	d801      	bhi.n	8307e <_malloc_r+0x2e6>
   8307a:	2b0f      	cmp	r3, #15
   8307c:	dc04      	bgt.n	83088 <_malloc_r+0x2f0>
   8307e:	4628      	mov	r0, r5
   83080:	f000 f9f2 	bl	83468 <__malloc_unlock>
   83084:	2400      	movs	r4, #0
   83086:	e74d      	b.n	82f24 <_malloc_r+0x18c>
   83088:	f046 0201 	orr.w	r2, r6, #1
   8308c:	f043 0301 	orr.w	r3, r3, #1
   83090:	4426      	add	r6, r4
   83092:	6062      	str	r2, [r4, #4]
   83094:	4628      	mov	r0, r5
   83096:	60be      	str	r6, [r7, #8]
   83098:	3408      	adds	r4, #8
   8309a:	6073      	str	r3, [r6, #4]
   8309c:	f000 f9e4 	bl	83468 <__malloc_unlock>
   830a0:	4620      	mov	r0, r4
   830a2:	b003      	add	sp, #12
   830a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830a8:	2b14      	cmp	r3, #20
   830aa:	d970      	bls.n	8318e <_malloc_r+0x3f6>
   830ac:	2b54      	cmp	r3, #84	; 0x54
   830ae:	f200 80a2 	bhi.w	831f6 <_malloc_r+0x45e>
   830b2:	0b33      	lsrs	r3, r6, #12
   830b4:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   830b8:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   830bc:	00c1      	lsls	r1, r0, #3
   830be:	e68d      	b.n	82ddc <_malloc_r+0x44>
   830c0:	200706d8 	.word	0x200706d8
   830c4:	20070cd4 	.word	0x20070cd4
   830c8:	20070ca4 	.word	0x20070ca4
   830cc:	20070ccc 	.word	0x20070ccc
   830d0:	20070cd0 	.word	0x20070cd0
   830d4:	200706e0 	.word	0x200706e0
   830d8:	20070ae0 	.word	0x20070ae0
   830dc:	0a5a      	lsrs	r2, r3, #9
   830de:	2a04      	cmp	r2, #4
   830e0:	d95b      	bls.n	8319a <_malloc_r+0x402>
   830e2:	2a14      	cmp	r2, #20
   830e4:	f200 80ae 	bhi.w	83244 <_malloc_r+0x4ac>
   830e8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   830ec:	00c9      	lsls	r1, r1, #3
   830ee:	325b      	adds	r2, #91	; 0x5b
   830f0:	eb07 0c01 	add.w	ip, r7, r1
   830f4:	5879      	ldr	r1, [r7, r1]
   830f6:	f1ac 0c08 	sub.w	ip, ip, #8
   830fa:	458c      	cmp	ip, r1
   830fc:	f000 8088 	beq.w	83210 <_malloc_r+0x478>
   83100:	684a      	ldr	r2, [r1, #4]
   83102:	f022 0203 	bic.w	r2, r2, #3
   83106:	4293      	cmp	r3, r2
   83108:	d273      	bcs.n	831f2 <_malloc_r+0x45a>
   8310a:	6889      	ldr	r1, [r1, #8]
   8310c:	458c      	cmp	ip, r1
   8310e:	d1f7      	bne.n	83100 <_malloc_r+0x368>
   83110:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83114:	687a      	ldr	r2, [r7, #4]
   83116:	60e3      	str	r3, [r4, #12]
   83118:	f8c4 c008 	str.w	ip, [r4, #8]
   8311c:	609c      	str	r4, [r3, #8]
   8311e:	f8cc 400c 	str.w	r4, [ip, #12]
   83122:	e69e      	b.n	82e62 <_malloc_r+0xca>
   83124:	f046 0c01 	orr.w	ip, r6, #1
   83128:	f042 0101 	orr.w	r1, r2, #1
   8312c:	4426      	add	r6, r4
   8312e:	f8c4 c004 	str.w	ip, [r4, #4]
   83132:	4628      	mov	r0, r5
   83134:	617e      	str	r6, [r7, #20]
   83136:	613e      	str	r6, [r7, #16]
   83138:	f8c6 e00c 	str.w	lr, [r6, #12]
   8313c:	f8c6 e008 	str.w	lr, [r6, #8]
   83140:	6071      	str	r1, [r6, #4]
   83142:	50e2      	str	r2, [r4, r3]
   83144:	f000 f990 	bl	83468 <__malloc_unlock>
   83148:	3408      	adds	r4, #8
   8314a:	e6eb      	b.n	82f24 <_malloc_r+0x18c>
   8314c:	687a      	ldr	r2, [r7, #4]
   8314e:	e688      	b.n	82e62 <_malloc_r+0xca>
   83150:	f108 0801 	add.w	r8, r8, #1
   83154:	f018 0f03 	tst.w	r8, #3
   83158:	f10c 0c08 	add.w	ip, ip, #8
   8315c:	f47f ae93 	bne.w	82e86 <_malloc_r+0xee>
   83160:	e02d      	b.n	831be <_malloc_r+0x426>
   83162:	68dc      	ldr	r4, [r3, #12]
   83164:	42a3      	cmp	r3, r4
   83166:	bf08      	it	eq
   83168:	3002      	addeq	r0, #2
   8316a:	f43f ae4b 	beq.w	82e04 <_malloc_r+0x6c>
   8316e:	e6c9      	b.n	82f04 <_malloc_r+0x16c>
   83170:	461c      	mov	r4, r3
   83172:	4419      	add	r1, r3
   83174:	684a      	ldr	r2, [r1, #4]
   83176:	68db      	ldr	r3, [r3, #12]
   83178:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8317c:	f042 0201 	orr.w	r2, r2, #1
   83180:	604a      	str	r2, [r1, #4]
   83182:	4628      	mov	r0, r5
   83184:	60f3      	str	r3, [r6, #12]
   83186:	609e      	str	r6, [r3, #8]
   83188:	f000 f96e 	bl	83468 <__malloc_unlock>
   8318c:	e6ca      	b.n	82f24 <_malloc_r+0x18c>
   8318e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   83192:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   83196:	00c1      	lsls	r1, r0, #3
   83198:	e620      	b.n	82ddc <_malloc_r+0x44>
   8319a:	099a      	lsrs	r2, r3, #6
   8319c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   831a0:	00c9      	lsls	r1, r1, #3
   831a2:	3238      	adds	r2, #56	; 0x38
   831a4:	e7a4      	b.n	830f0 <_malloc_r+0x358>
   831a6:	42bc      	cmp	r4, r7
   831a8:	d054      	beq.n	83254 <_malloc_r+0x4bc>
   831aa:	68bc      	ldr	r4, [r7, #8]
   831ac:	6862      	ldr	r2, [r4, #4]
   831ae:	f022 0203 	bic.w	r2, r2, #3
   831b2:	e75e      	b.n	83072 <_malloc_r+0x2da>
   831b4:	f859 3908 	ldr.w	r3, [r9], #-8
   831b8:	4599      	cmp	r9, r3
   831ba:	f040 8086 	bne.w	832ca <_malloc_r+0x532>
   831be:	f010 0f03 	tst.w	r0, #3
   831c2:	f100 30ff 	add.w	r0, r0, #4294967295
   831c6:	d1f5      	bne.n	831b4 <_malloc_r+0x41c>
   831c8:	687b      	ldr	r3, [r7, #4]
   831ca:	ea23 0304 	bic.w	r3, r3, r4
   831ce:	607b      	str	r3, [r7, #4]
   831d0:	0064      	lsls	r4, r4, #1
   831d2:	429c      	cmp	r4, r3
   831d4:	f63f aec8 	bhi.w	82f68 <_malloc_r+0x1d0>
   831d8:	2c00      	cmp	r4, #0
   831da:	f43f aec5 	beq.w	82f68 <_malloc_r+0x1d0>
   831de:	421c      	tst	r4, r3
   831e0:	4640      	mov	r0, r8
   831e2:	f47f ae4c 	bne.w	82e7e <_malloc_r+0xe6>
   831e6:	0064      	lsls	r4, r4, #1
   831e8:	421c      	tst	r4, r3
   831ea:	f100 0004 	add.w	r0, r0, #4
   831ee:	d0fa      	beq.n	831e6 <_malloc_r+0x44e>
   831f0:	e645      	b.n	82e7e <_malloc_r+0xe6>
   831f2:	468c      	mov	ip, r1
   831f4:	e78c      	b.n	83110 <_malloc_r+0x378>
   831f6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   831fa:	d815      	bhi.n	83228 <_malloc_r+0x490>
   831fc:	0bf3      	lsrs	r3, r6, #15
   831fe:	f103 0078 	add.w	r0, r3, #120	; 0x78
   83202:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   83206:	00c1      	lsls	r1, r0, #3
   83208:	e5e8      	b.n	82ddc <_malloc_r+0x44>
   8320a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8320e:	e6ee      	b.n	82fee <_malloc_r+0x256>
   83210:	2101      	movs	r1, #1
   83212:	687b      	ldr	r3, [r7, #4]
   83214:	1092      	asrs	r2, r2, #2
   83216:	fa01 f202 	lsl.w	r2, r1, r2
   8321a:	431a      	orrs	r2, r3
   8321c:	607a      	str	r2, [r7, #4]
   8321e:	4663      	mov	r3, ip
   83220:	e779      	b.n	83116 <_malloc_r+0x37e>
   83222:	2301      	movs	r3, #1
   83224:	6053      	str	r3, [r2, #4]
   83226:	e72a      	b.n	8307e <_malloc_r+0x2e6>
   83228:	f240 5254 	movw	r2, #1364	; 0x554
   8322c:	4293      	cmp	r3, r2
   8322e:	d822      	bhi.n	83276 <_malloc_r+0x4de>
   83230:	0cb3      	lsrs	r3, r6, #18
   83232:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   83236:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8323a:	00c1      	lsls	r1, r0, #3
   8323c:	e5ce      	b.n	82ddc <_malloc_r+0x44>
   8323e:	f103 0b10 	add.w	fp, r3, #16
   83242:	e6af      	b.n	82fa4 <_malloc_r+0x20c>
   83244:	2a54      	cmp	r2, #84	; 0x54
   83246:	d829      	bhi.n	8329c <_malloc_r+0x504>
   83248:	0b1a      	lsrs	r2, r3, #12
   8324a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8324e:	00c9      	lsls	r1, r1, #3
   83250:	326e      	adds	r2, #110	; 0x6e
   83252:	e74d      	b.n	830f0 <_malloc_r+0x358>
   83254:	4b20      	ldr	r3, [pc, #128]	; (832d8 <_malloc_r+0x540>)
   83256:	6819      	ldr	r1, [r3, #0]
   83258:	4459      	add	r1, fp
   8325a:	6019      	str	r1, [r3, #0]
   8325c:	e6b3      	b.n	82fc6 <_malloc_r+0x22e>
   8325e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   83262:	2800      	cmp	r0, #0
   83264:	f47f aeaf 	bne.w	82fc6 <_malloc_r+0x22e>
   83268:	eb08 030b 	add.w	r3, r8, fp
   8326c:	68ba      	ldr	r2, [r7, #8]
   8326e:	f043 0301 	orr.w	r3, r3, #1
   83272:	6053      	str	r3, [r2, #4]
   83274:	e6ef      	b.n	83056 <_malloc_r+0x2be>
   83276:	207f      	movs	r0, #127	; 0x7f
   83278:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8327c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83280:	e5ac      	b.n	82ddc <_malloc_r+0x44>
   83282:	f104 0108 	add.w	r1, r4, #8
   83286:	4628      	mov	r0, r5
   83288:	9300      	str	r3, [sp, #0]
   8328a:	f7ff fa67 	bl	8275c <_free_r>
   8328e:	9b00      	ldr	r3, [sp, #0]
   83290:	6819      	ldr	r1, [r3, #0]
   83292:	e6e0      	b.n	83056 <_malloc_r+0x2be>
   83294:	2001      	movs	r0, #1
   83296:	f04f 0900 	mov.w	r9, #0
   8329a:	e6bd      	b.n	83018 <_malloc_r+0x280>
   8329c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   832a0:	d805      	bhi.n	832ae <_malloc_r+0x516>
   832a2:	0bda      	lsrs	r2, r3, #15
   832a4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   832a8:	00c9      	lsls	r1, r1, #3
   832aa:	3277      	adds	r2, #119	; 0x77
   832ac:	e720      	b.n	830f0 <_malloc_r+0x358>
   832ae:	f240 5154 	movw	r1, #1364	; 0x554
   832b2:	428a      	cmp	r2, r1
   832b4:	d805      	bhi.n	832c2 <_malloc_r+0x52a>
   832b6:	0c9a      	lsrs	r2, r3, #18
   832b8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   832bc:	00c9      	lsls	r1, r1, #3
   832be:	327c      	adds	r2, #124	; 0x7c
   832c0:	e716      	b.n	830f0 <_malloc_r+0x358>
   832c2:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   832c6:	227e      	movs	r2, #126	; 0x7e
   832c8:	e712      	b.n	830f0 <_malloc_r+0x358>
   832ca:	687b      	ldr	r3, [r7, #4]
   832cc:	e780      	b.n	831d0 <_malloc_r+0x438>
   832ce:	08f0      	lsrs	r0, r6, #3
   832d0:	f106 0308 	add.w	r3, r6, #8
   832d4:	e60e      	b.n	82ef4 <_malloc_r+0x15c>
   832d6:	bf00      	nop
   832d8:	20070ca4 	.word	0x20070ca4

000832dc <__ascii_mbtowc>:
   832dc:	b082      	sub	sp, #8
   832de:	b149      	cbz	r1, 832f4 <__ascii_mbtowc+0x18>
   832e0:	b15a      	cbz	r2, 832fa <__ascii_mbtowc+0x1e>
   832e2:	b16b      	cbz	r3, 83300 <__ascii_mbtowc+0x24>
   832e4:	7813      	ldrb	r3, [r2, #0]
   832e6:	600b      	str	r3, [r1, #0]
   832e8:	7812      	ldrb	r2, [r2, #0]
   832ea:	1c10      	adds	r0, r2, #0
   832ec:	bf18      	it	ne
   832ee:	2001      	movne	r0, #1
   832f0:	b002      	add	sp, #8
   832f2:	4770      	bx	lr
   832f4:	a901      	add	r1, sp, #4
   832f6:	2a00      	cmp	r2, #0
   832f8:	d1f3      	bne.n	832e2 <__ascii_mbtowc+0x6>
   832fa:	4610      	mov	r0, r2
   832fc:	b002      	add	sp, #8
   832fe:	4770      	bx	lr
   83300:	f06f 0001 	mvn.w	r0, #1
   83304:	e7f4      	b.n	832f0 <__ascii_mbtowc+0x14>
   83306:	bf00      	nop

00083308 <memchr>:
   83308:	0783      	lsls	r3, r0, #30
   8330a:	b470      	push	{r4, r5, r6}
   8330c:	b2cd      	uxtb	r5, r1
   8330e:	d03d      	beq.n	8338c <memchr+0x84>
   83310:	1e54      	subs	r4, r2, #1
   83312:	b30a      	cbz	r2, 83358 <memchr+0x50>
   83314:	7803      	ldrb	r3, [r0, #0]
   83316:	42ab      	cmp	r3, r5
   83318:	d01f      	beq.n	8335a <memchr+0x52>
   8331a:	1c43      	adds	r3, r0, #1
   8331c:	e005      	b.n	8332a <memchr+0x22>
   8331e:	f114 34ff 	adds.w	r4, r4, #4294967295
   83322:	d319      	bcc.n	83358 <memchr+0x50>
   83324:	7802      	ldrb	r2, [r0, #0]
   83326:	42aa      	cmp	r2, r5
   83328:	d017      	beq.n	8335a <memchr+0x52>
   8332a:	f013 0f03 	tst.w	r3, #3
   8332e:	4618      	mov	r0, r3
   83330:	f103 0301 	add.w	r3, r3, #1
   83334:	d1f3      	bne.n	8331e <memchr+0x16>
   83336:	2c03      	cmp	r4, #3
   83338:	d811      	bhi.n	8335e <memchr+0x56>
   8333a:	b34c      	cbz	r4, 83390 <memchr+0x88>
   8333c:	7803      	ldrb	r3, [r0, #0]
   8333e:	42ab      	cmp	r3, r5
   83340:	d00b      	beq.n	8335a <memchr+0x52>
   83342:	4404      	add	r4, r0
   83344:	1c43      	adds	r3, r0, #1
   83346:	e002      	b.n	8334e <memchr+0x46>
   83348:	7802      	ldrb	r2, [r0, #0]
   8334a:	42aa      	cmp	r2, r5
   8334c:	d005      	beq.n	8335a <memchr+0x52>
   8334e:	429c      	cmp	r4, r3
   83350:	4618      	mov	r0, r3
   83352:	f103 0301 	add.w	r3, r3, #1
   83356:	d1f7      	bne.n	83348 <memchr+0x40>
   83358:	2000      	movs	r0, #0
   8335a:	bc70      	pop	{r4, r5, r6}
   8335c:	4770      	bx	lr
   8335e:	0209      	lsls	r1, r1, #8
   83360:	b289      	uxth	r1, r1
   83362:	4329      	orrs	r1, r5
   83364:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83368:	6803      	ldr	r3, [r0, #0]
   8336a:	4606      	mov	r6, r0
   8336c:	404b      	eors	r3, r1
   8336e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   83372:	ea22 0303 	bic.w	r3, r2, r3
   83376:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8337a:	f100 0004 	add.w	r0, r0, #4
   8337e:	d103      	bne.n	83388 <memchr+0x80>
   83380:	3c04      	subs	r4, #4
   83382:	2c03      	cmp	r4, #3
   83384:	d8f0      	bhi.n	83368 <memchr+0x60>
   83386:	e7d8      	b.n	8333a <memchr+0x32>
   83388:	4630      	mov	r0, r6
   8338a:	e7d7      	b.n	8333c <memchr+0x34>
   8338c:	4614      	mov	r4, r2
   8338e:	e7d2      	b.n	83336 <memchr+0x2e>
   83390:	4620      	mov	r0, r4
   83392:	e7e2      	b.n	8335a <memchr+0x52>

00083394 <memmove>:
   83394:	4288      	cmp	r0, r1
   83396:	b5f0      	push	{r4, r5, r6, r7, lr}
   83398:	d90d      	bls.n	833b6 <memmove+0x22>
   8339a:	188b      	adds	r3, r1, r2
   8339c:	4298      	cmp	r0, r3
   8339e:	d20a      	bcs.n	833b6 <memmove+0x22>
   833a0:	1884      	adds	r4, r0, r2
   833a2:	2a00      	cmp	r2, #0
   833a4:	d051      	beq.n	8344a <memmove+0xb6>
   833a6:	4622      	mov	r2, r4
   833a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   833ac:	4299      	cmp	r1, r3
   833ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
   833b2:	d1f9      	bne.n	833a8 <memmove+0x14>
   833b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   833b6:	2a0f      	cmp	r2, #15
   833b8:	d948      	bls.n	8344c <memmove+0xb8>
   833ba:	ea41 0300 	orr.w	r3, r1, r0
   833be:	079b      	lsls	r3, r3, #30
   833c0:	d146      	bne.n	83450 <memmove+0xbc>
   833c2:	4615      	mov	r5, r2
   833c4:	f100 0410 	add.w	r4, r0, #16
   833c8:	f101 0310 	add.w	r3, r1, #16
   833cc:	f853 6c10 	ldr.w	r6, [r3, #-16]
   833d0:	3d10      	subs	r5, #16
   833d2:	f844 6c10 	str.w	r6, [r4, #-16]
   833d6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   833da:	2d0f      	cmp	r5, #15
   833dc:	f844 6c0c 	str.w	r6, [r4, #-12]
   833e0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   833e4:	f104 0410 	add.w	r4, r4, #16
   833e8:	f844 6c18 	str.w	r6, [r4, #-24]
   833ec:	f853 6c04 	ldr.w	r6, [r3, #-4]
   833f0:	f103 0310 	add.w	r3, r3, #16
   833f4:	f844 6c14 	str.w	r6, [r4, #-20]
   833f8:	d8e8      	bhi.n	833cc <memmove+0x38>
   833fa:	f1a2 0310 	sub.w	r3, r2, #16
   833fe:	f023 030f 	bic.w	r3, r3, #15
   83402:	f002 0e0f 	and.w	lr, r2, #15
   83406:	3310      	adds	r3, #16
   83408:	f1be 0f03 	cmp.w	lr, #3
   8340c:	4419      	add	r1, r3
   8340e:	4403      	add	r3, r0
   83410:	d921      	bls.n	83456 <memmove+0xc2>
   83412:	460e      	mov	r6, r1
   83414:	4674      	mov	r4, lr
   83416:	1f1d      	subs	r5, r3, #4
   83418:	f856 7b04 	ldr.w	r7, [r6], #4
   8341c:	3c04      	subs	r4, #4
   8341e:	2c03      	cmp	r4, #3
   83420:	f845 7f04 	str.w	r7, [r5, #4]!
   83424:	d8f8      	bhi.n	83418 <memmove+0x84>
   83426:	f1ae 0404 	sub.w	r4, lr, #4
   8342a:	f024 0403 	bic.w	r4, r4, #3
   8342e:	3404      	adds	r4, #4
   83430:	4421      	add	r1, r4
   83432:	4423      	add	r3, r4
   83434:	f002 0203 	and.w	r2, r2, #3
   83438:	b162      	cbz	r2, 83454 <memmove+0xc0>
   8343a:	3b01      	subs	r3, #1
   8343c:	440a      	add	r2, r1
   8343e:	f811 4b01 	ldrb.w	r4, [r1], #1
   83442:	428a      	cmp	r2, r1
   83444:	f803 4f01 	strb.w	r4, [r3, #1]!
   83448:	d1f9      	bne.n	8343e <memmove+0xaa>
   8344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8344c:	4603      	mov	r3, r0
   8344e:	e7f3      	b.n	83438 <memmove+0xa4>
   83450:	4603      	mov	r3, r0
   83452:	e7f2      	b.n	8343a <memmove+0xa6>
   83454:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83456:	4672      	mov	r2, lr
   83458:	e7ee      	b.n	83438 <memmove+0xa4>
   8345a:	bf00      	nop

0008345c <__malloc_lock>:
   8345c:	4801      	ldr	r0, [pc, #4]	; (83464 <__malloc_lock+0x8>)
   8345e:	f7ff bc17 	b.w	82c90 <__retarget_lock_acquire_recursive>
   83462:	bf00      	nop
   83464:	20070cf4 	.word	0x20070cf4

00083468 <__malloc_unlock>:
   83468:	4801      	ldr	r0, [pc, #4]	; (83470 <__malloc_unlock+0x8>)
   8346a:	f7ff bc13 	b.w	82c94 <__retarget_lock_release_recursive>
   8346e:	bf00      	nop
   83470:	20070cf4 	.word	0x20070cf4

00083474 <_realloc_r>:
   83474:	2900      	cmp	r1, #0
   83476:	f000 8094 	beq.w	835a2 <_realloc_r+0x12e>
   8347a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8347e:	460c      	mov	r4, r1
   83480:	4615      	mov	r5, r2
   83482:	b083      	sub	sp, #12
   83484:	4680      	mov	r8, r0
   83486:	f105 060b 	add.w	r6, r5, #11
   8348a:	f7ff ffe7 	bl	8345c <__malloc_lock>
   8348e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83492:	2e16      	cmp	r6, #22
   83494:	f02e 0703 	bic.w	r7, lr, #3
   83498:	f1a4 0908 	sub.w	r9, r4, #8
   8349c:	d83c      	bhi.n	83518 <_realloc_r+0xa4>
   8349e:	2210      	movs	r2, #16
   834a0:	4616      	mov	r6, r2
   834a2:	42b5      	cmp	r5, r6
   834a4:	d83d      	bhi.n	83522 <_realloc_r+0xae>
   834a6:	4297      	cmp	r7, r2
   834a8:	da43      	bge.n	83532 <_realloc_r+0xbe>
   834aa:	4bc6      	ldr	r3, [pc, #792]	; (837c4 <_realloc_r+0x350>)
   834ac:	eb09 0007 	add.w	r0, r9, r7
   834b0:	6899      	ldr	r1, [r3, #8]
   834b2:	4288      	cmp	r0, r1
   834b4:	f000 80c3 	beq.w	8363e <_realloc_r+0x1ca>
   834b8:	6843      	ldr	r3, [r0, #4]
   834ba:	f023 0101 	bic.w	r1, r3, #1
   834be:	4401      	add	r1, r0
   834c0:	6849      	ldr	r1, [r1, #4]
   834c2:	07c9      	lsls	r1, r1, #31
   834c4:	d54d      	bpl.n	83562 <_realloc_r+0xee>
   834c6:	f01e 0f01 	tst.w	lr, #1
   834ca:	f000 809b 	beq.w	83604 <_realloc_r+0x190>
   834ce:	4629      	mov	r1, r5
   834d0:	4640      	mov	r0, r8
   834d2:	f7ff fc61 	bl	82d98 <_malloc_r>
   834d6:	4605      	mov	r5, r0
   834d8:	2800      	cmp	r0, #0
   834da:	d03b      	beq.n	83554 <_realloc_r+0xe0>
   834dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   834e0:	f1a0 0208 	sub.w	r2, r0, #8
   834e4:	f023 0301 	bic.w	r3, r3, #1
   834e8:	444b      	add	r3, r9
   834ea:	429a      	cmp	r2, r3
   834ec:	f000 812b 	beq.w	83746 <_realloc_r+0x2d2>
   834f0:	1f3a      	subs	r2, r7, #4
   834f2:	2a24      	cmp	r2, #36	; 0x24
   834f4:	f200 8118 	bhi.w	83728 <_realloc_r+0x2b4>
   834f8:	2a13      	cmp	r2, #19
   834fa:	f200 80eb 	bhi.w	836d4 <_realloc_r+0x260>
   834fe:	4603      	mov	r3, r0
   83500:	4622      	mov	r2, r4
   83502:	6811      	ldr	r1, [r2, #0]
   83504:	6019      	str	r1, [r3, #0]
   83506:	6851      	ldr	r1, [r2, #4]
   83508:	6059      	str	r1, [r3, #4]
   8350a:	6892      	ldr	r2, [r2, #8]
   8350c:	609a      	str	r2, [r3, #8]
   8350e:	4621      	mov	r1, r4
   83510:	4640      	mov	r0, r8
   83512:	f7ff f923 	bl	8275c <_free_r>
   83516:	e01d      	b.n	83554 <_realloc_r+0xe0>
   83518:	f026 0607 	bic.w	r6, r6, #7
   8351c:	2e00      	cmp	r6, #0
   8351e:	4632      	mov	r2, r6
   83520:	dabf      	bge.n	834a2 <_realloc_r+0x2e>
   83522:	2500      	movs	r5, #0
   83524:	230c      	movs	r3, #12
   83526:	4628      	mov	r0, r5
   83528:	f8c8 3000 	str.w	r3, [r8]
   8352c:	b003      	add	sp, #12
   8352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83532:	4625      	mov	r5, r4
   83534:	1bbb      	subs	r3, r7, r6
   83536:	2b0f      	cmp	r3, #15
   83538:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8353c:	d81d      	bhi.n	8357a <_realloc_r+0x106>
   8353e:	f002 0201 	and.w	r2, r2, #1
   83542:	433a      	orrs	r2, r7
   83544:	eb09 0107 	add.w	r1, r9, r7
   83548:	f8c9 2004 	str.w	r2, [r9, #4]
   8354c:	684b      	ldr	r3, [r1, #4]
   8354e:	f043 0301 	orr.w	r3, r3, #1
   83552:	604b      	str	r3, [r1, #4]
   83554:	4640      	mov	r0, r8
   83556:	f7ff ff87 	bl	83468 <__malloc_unlock>
   8355a:	4628      	mov	r0, r5
   8355c:	b003      	add	sp, #12
   8355e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83562:	f023 0303 	bic.w	r3, r3, #3
   83566:	18f9      	adds	r1, r7, r3
   83568:	4291      	cmp	r1, r2
   8356a:	db1d      	blt.n	835a8 <_realloc_r+0x134>
   8356c:	68c3      	ldr	r3, [r0, #12]
   8356e:	6882      	ldr	r2, [r0, #8]
   83570:	4625      	mov	r5, r4
   83572:	60d3      	str	r3, [r2, #12]
   83574:	460f      	mov	r7, r1
   83576:	609a      	str	r2, [r3, #8]
   83578:	e7dc      	b.n	83534 <_realloc_r+0xc0>
   8357a:	f002 0201 	and.w	r2, r2, #1
   8357e:	eb09 0106 	add.w	r1, r9, r6
   83582:	f043 0301 	orr.w	r3, r3, #1
   83586:	4332      	orrs	r2, r6
   83588:	f8c9 2004 	str.w	r2, [r9, #4]
   8358c:	444f      	add	r7, r9
   8358e:	604b      	str	r3, [r1, #4]
   83590:	687b      	ldr	r3, [r7, #4]
   83592:	3108      	adds	r1, #8
   83594:	f043 0301 	orr.w	r3, r3, #1
   83598:	607b      	str	r3, [r7, #4]
   8359a:	4640      	mov	r0, r8
   8359c:	f7ff f8de 	bl	8275c <_free_r>
   835a0:	e7d8      	b.n	83554 <_realloc_r+0xe0>
   835a2:	4611      	mov	r1, r2
   835a4:	f7ff bbf8 	b.w	82d98 <_malloc_r>
   835a8:	f01e 0f01 	tst.w	lr, #1
   835ac:	d18f      	bne.n	834ce <_realloc_r+0x5a>
   835ae:	f854 1c08 	ldr.w	r1, [r4, #-8]
   835b2:	eba9 0a01 	sub.w	sl, r9, r1
   835b6:	f8da 1004 	ldr.w	r1, [sl, #4]
   835ba:	f021 0103 	bic.w	r1, r1, #3
   835be:	440b      	add	r3, r1
   835c0:	443b      	add	r3, r7
   835c2:	4293      	cmp	r3, r2
   835c4:	db26      	blt.n	83614 <_realloc_r+0x1a0>
   835c6:	4655      	mov	r5, sl
   835c8:	68c1      	ldr	r1, [r0, #12]
   835ca:	6880      	ldr	r0, [r0, #8]
   835cc:	1f3a      	subs	r2, r7, #4
   835ce:	60c1      	str	r1, [r0, #12]
   835d0:	6088      	str	r0, [r1, #8]
   835d2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   835d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   835da:	2a24      	cmp	r2, #36	; 0x24
   835dc:	60c1      	str	r1, [r0, #12]
   835de:	6088      	str	r0, [r1, #8]
   835e0:	d826      	bhi.n	83630 <_realloc_r+0x1bc>
   835e2:	2a13      	cmp	r2, #19
   835e4:	f240 8081 	bls.w	836ea <_realloc_r+0x276>
   835e8:	6821      	ldr	r1, [r4, #0]
   835ea:	2a1b      	cmp	r2, #27
   835ec:	f8ca 1008 	str.w	r1, [sl, #8]
   835f0:	6861      	ldr	r1, [r4, #4]
   835f2:	f8ca 100c 	str.w	r1, [sl, #12]
   835f6:	f200 80ad 	bhi.w	83754 <_realloc_r+0x2e0>
   835fa:	f104 0008 	add.w	r0, r4, #8
   835fe:	f10a 0210 	add.w	r2, sl, #16
   83602:	e074      	b.n	836ee <_realloc_r+0x27a>
   83604:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83608:	eba9 0a03 	sub.w	sl, r9, r3
   8360c:	f8da 1004 	ldr.w	r1, [sl, #4]
   83610:	f021 0103 	bic.w	r1, r1, #3
   83614:	187b      	adds	r3, r7, r1
   83616:	4293      	cmp	r3, r2
   83618:	f6ff af59 	blt.w	834ce <_realloc_r+0x5a>
   8361c:	4655      	mov	r5, sl
   8361e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83622:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83626:	1f3a      	subs	r2, r7, #4
   83628:	2a24      	cmp	r2, #36	; 0x24
   8362a:	60c1      	str	r1, [r0, #12]
   8362c:	6088      	str	r0, [r1, #8]
   8362e:	d9d8      	bls.n	835e2 <_realloc_r+0x16e>
   83630:	4621      	mov	r1, r4
   83632:	4628      	mov	r0, r5
   83634:	461f      	mov	r7, r3
   83636:	46d1      	mov	r9, sl
   83638:	f7ff feac 	bl	83394 <memmove>
   8363c:	e77a      	b.n	83534 <_realloc_r+0xc0>
   8363e:	6841      	ldr	r1, [r0, #4]
   83640:	f106 0010 	add.w	r0, r6, #16
   83644:	f021 0b03 	bic.w	fp, r1, #3
   83648:	44bb      	add	fp, r7
   8364a:	4583      	cmp	fp, r0
   8364c:	da58      	bge.n	83700 <_realloc_r+0x28c>
   8364e:	f01e 0f01 	tst.w	lr, #1
   83652:	f47f af3c 	bne.w	834ce <_realloc_r+0x5a>
   83656:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8365a:	eba9 0a01 	sub.w	sl, r9, r1
   8365e:	f8da 1004 	ldr.w	r1, [sl, #4]
   83662:	f021 0103 	bic.w	r1, r1, #3
   83666:	448b      	add	fp, r1
   83668:	4558      	cmp	r0, fp
   8366a:	dcd3      	bgt.n	83614 <_realloc_r+0x1a0>
   8366c:	4655      	mov	r5, sl
   8366e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83672:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83676:	1f3a      	subs	r2, r7, #4
   83678:	2a24      	cmp	r2, #36	; 0x24
   8367a:	60c1      	str	r1, [r0, #12]
   8367c:	6088      	str	r0, [r1, #8]
   8367e:	f200 808d 	bhi.w	8379c <_realloc_r+0x328>
   83682:	2a13      	cmp	r2, #19
   83684:	f240 8087 	bls.w	83796 <_realloc_r+0x322>
   83688:	6821      	ldr	r1, [r4, #0]
   8368a:	2a1b      	cmp	r2, #27
   8368c:	f8ca 1008 	str.w	r1, [sl, #8]
   83690:	6861      	ldr	r1, [r4, #4]
   83692:	f8ca 100c 	str.w	r1, [sl, #12]
   83696:	f200 8088 	bhi.w	837aa <_realloc_r+0x336>
   8369a:	f104 0108 	add.w	r1, r4, #8
   8369e:	f10a 0210 	add.w	r2, sl, #16
   836a2:	6808      	ldr	r0, [r1, #0]
   836a4:	6010      	str	r0, [r2, #0]
   836a6:	6848      	ldr	r0, [r1, #4]
   836a8:	6050      	str	r0, [r2, #4]
   836aa:	6889      	ldr	r1, [r1, #8]
   836ac:	6091      	str	r1, [r2, #8]
   836ae:	ebab 0206 	sub.w	r2, fp, r6
   836b2:	eb0a 0106 	add.w	r1, sl, r6
   836b6:	f042 0201 	orr.w	r2, r2, #1
   836ba:	6099      	str	r1, [r3, #8]
   836bc:	604a      	str	r2, [r1, #4]
   836be:	f8da 3004 	ldr.w	r3, [sl, #4]
   836c2:	4640      	mov	r0, r8
   836c4:	f003 0301 	and.w	r3, r3, #1
   836c8:	431e      	orrs	r6, r3
   836ca:	f8ca 6004 	str.w	r6, [sl, #4]
   836ce:	f7ff fecb 	bl	83468 <__malloc_unlock>
   836d2:	e742      	b.n	8355a <_realloc_r+0xe6>
   836d4:	6823      	ldr	r3, [r4, #0]
   836d6:	2a1b      	cmp	r2, #27
   836d8:	6003      	str	r3, [r0, #0]
   836da:	6863      	ldr	r3, [r4, #4]
   836dc:	6043      	str	r3, [r0, #4]
   836de:	d827      	bhi.n	83730 <_realloc_r+0x2bc>
   836e0:	f100 0308 	add.w	r3, r0, #8
   836e4:	f104 0208 	add.w	r2, r4, #8
   836e8:	e70b      	b.n	83502 <_realloc_r+0x8e>
   836ea:	4620      	mov	r0, r4
   836ec:	462a      	mov	r2, r5
   836ee:	6801      	ldr	r1, [r0, #0]
   836f0:	461f      	mov	r7, r3
   836f2:	6011      	str	r1, [r2, #0]
   836f4:	6841      	ldr	r1, [r0, #4]
   836f6:	46d1      	mov	r9, sl
   836f8:	6051      	str	r1, [r2, #4]
   836fa:	6883      	ldr	r3, [r0, #8]
   836fc:	6093      	str	r3, [r2, #8]
   836fe:	e719      	b.n	83534 <_realloc_r+0xc0>
   83700:	ebab 0b06 	sub.w	fp, fp, r6
   83704:	eb09 0106 	add.w	r1, r9, r6
   83708:	f04b 0201 	orr.w	r2, fp, #1
   8370c:	6099      	str	r1, [r3, #8]
   8370e:	604a      	str	r2, [r1, #4]
   83710:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83714:	4640      	mov	r0, r8
   83716:	f003 0301 	and.w	r3, r3, #1
   8371a:	431e      	orrs	r6, r3
   8371c:	f844 6c04 	str.w	r6, [r4, #-4]
   83720:	f7ff fea2 	bl	83468 <__malloc_unlock>
   83724:	4625      	mov	r5, r4
   83726:	e718      	b.n	8355a <_realloc_r+0xe6>
   83728:	4621      	mov	r1, r4
   8372a:	f7ff fe33 	bl	83394 <memmove>
   8372e:	e6ee      	b.n	8350e <_realloc_r+0x9a>
   83730:	68a3      	ldr	r3, [r4, #8]
   83732:	2a24      	cmp	r2, #36	; 0x24
   83734:	6083      	str	r3, [r0, #8]
   83736:	68e3      	ldr	r3, [r4, #12]
   83738:	60c3      	str	r3, [r0, #12]
   8373a:	d018      	beq.n	8376e <_realloc_r+0x2fa>
   8373c:	f100 0310 	add.w	r3, r0, #16
   83740:	f104 0210 	add.w	r2, r4, #16
   83744:	e6dd      	b.n	83502 <_realloc_r+0x8e>
   83746:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8374a:	4625      	mov	r5, r4
   8374c:	f023 0303 	bic.w	r3, r3, #3
   83750:	441f      	add	r7, r3
   83752:	e6ef      	b.n	83534 <_realloc_r+0xc0>
   83754:	68a1      	ldr	r1, [r4, #8]
   83756:	2a24      	cmp	r2, #36	; 0x24
   83758:	f8ca 1010 	str.w	r1, [sl, #16]
   8375c:	68e1      	ldr	r1, [r4, #12]
   8375e:	f8ca 1014 	str.w	r1, [sl, #20]
   83762:	d00d      	beq.n	83780 <_realloc_r+0x30c>
   83764:	f104 0010 	add.w	r0, r4, #16
   83768:	f10a 0218 	add.w	r2, sl, #24
   8376c:	e7bf      	b.n	836ee <_realloc_r+0x27a>
   8376e:	6922      	ldr	r2, [r4, #16]
   83770:	f100 0318 	add.w	r3, r0, #24
   83774:	6102      	str	r2, [r0, #16]
   83776:	6961      	ldr	r1, [r4, #20]
   83778:	f104 0218 	add.w	r2, r4, #24
   8377c:	6141      	str	r1, [r0, #20]
   8377e:	e6c0      	b.n	83502 <_realloc_r+0x8e>
   83780:	6922      	ldr	r2, [r4, #16]
   83782:	f104 0018 	add.w	r0, r4, #24
   83786:	f8ca 2018 	str.w	r2, [sl, #24]
   8378a:	6961      	ldr	r1, [r4, #20]
   8378c:	f10a 0220 	add.w	r2, sl, #32
   83790:	f8ca 101c 	str.w	r1, [sl, #28]
   83794:	e7ab      	b.n	836ee <_realloc_r+0x27a>
   83796:	4621      	mov	r1, r4
   83798:	462a      	mov	r2, r5
   8379a:	e782      	b.n	836a2 <_realloc_r+0x22e>
   8379c:	4621      	mov	r1, r4
   8379e:	4628      	mov	r0, r5
   837a0:	9301      	str	r3, [sp, #4]
   837a2:	f7ff fdf7 	bl	83394 <memmove>
   837a6:	9b01      	ldr	r3, [sp, #4]
   837a8:	e781      	b.n	836ae <_realloc_r+0x23a>
   837aa:	68a1      	ldr	r1, [r4, #8]
   837ac:	2a24      	cmp	r2, #36	; 0x24
   837ae:	f8ca 1010 	str.w	r1, [sl, #16]
   837b2:	68e1      	ldr	r1, [r4, #12]
   837b4:	f8ca 1014 	str.w	r1, [sl, #20]
   837b8:	d006      	beq.n	837c8 <_realloc_r+0x354>
   837ba:	f104 0110 	add.w	r1, r4, #16
   837be:	f10a 0218 	add.w	r2, sl, #24
   837c2:	e76e      	b.n	836a2 <_realloc_r+0x22e>
   837c4:	200706d8 	.word	0x200706d8
   837c8:	6922      	ldr	r2, [r4, #16]
   837ca:	f104 0118 	add.w	r1, r4, #24
   837ce:	f8ca 2018 	str.w	r2, [sl, #24]
   837d2:	6960      	ldr	r0, [r4, #20]
   837d4:	f10a 0220 	add.w	r2, sl, #32
   837d8:	f8ca 001c 	str.w	r0, [sl, #28]
   837dc:	e761      	b.n	836a2 <_realloc_r+0x22e>
   837de:	bf00      	nop

000837e0 <_sbrk_r>:
   837e0:	b538      	push	{r3, r4, r5, lr}
   837e2:	2300      	movs	r3, #0
   837e4:	4c06      	ldr	r4, [pc, #24]	; (83800 <_sbrk_r+0x20>)
   837e6:	4605      	mov	r5, r0
   837e8:	4608      	mov	r0, r1
   837ea:	6023      	str	r3, [r4, #0]
   837ec:	f7fd fbfc 	bl	80fe8 <_sbrk>
   837f0:	1c43      	adds	r3, r0, #1
   837f2:	d000      	beq.n	837f6 <_sbrk_r+0x16>
   837f4:	bd38      	pop	{r3, r4, r5, pc}
   837f6:	6823      	ldr	r3, [r4, #0]
   837f8:	2b00      	cmp	r3, #0
   837fa:	d0fb      	beq.n	837f4 <_sbrk_r+0x14>
   837fc:	602b      	str	r3, [r5, #0]
   837fe:	bd38      	pop	{r3, r4, r5, pc}
   83800:	20070d08 	.word	0x20070d08

00083804 <__sread>:
   83804:	b510      	push	{r4, lr}
   83806:	460c      	mov	r4, r1
   83808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8380c:	f000 f9f4 	bl	83bf8 <_read_r>
   83810:	2800      	cmp	r0, #0
   83812:	db03      	blt.n	8381c <__sread+0x18>
   83814:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83816:	4403      	add	r3, r0
   83818:	6523      	str	r3, [r4, #80]	; 0x50
   8381a:	bd10      	pop	{r4, pc}
   8381c:	89a3      	ldrh	r3, [r4, #12]
   8381e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83822:	81a3      	strh	r3, [r4, #12]
   83824:	bd10      	pop	{r4, pc}
   83826:	bf00      	nop

00083828 <__swrite>:
   83828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8382c:	460c      	mov	r4, r1
   8382e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83832:	461f      	mov	r7, r3
   83834:	05cb      	lsls	r3, r1, #23
   83836:	4616      	mov	r6, r2
   83838:	4605      	mov	r5, r0
   8383a:	d507      	bpl.n	8384c <__swrite+0x24>
   8383c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83840:	2302      	movs	r3, #2
   83842:	2200      	movs	r2, #0
   83844:	f000 f9c2 	bl	83bcc <_lseek_r>
   83848:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8384c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83850:	81a1      	strh	r1, [r4, #12]
   83852:	463b      	mov	r3, r7
   83854:	4632      	mov	r2, r6
   83856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8385a:	4628      	mov	r0, r5
   8385c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83860:	f000 b8a2 	b.w	839a8 <_write_r>

00083864 <__sseek>:
   83864:	b510      	push	{r4, lr}
   83866:	460c      	mov	r4, r1
   83868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8386c:	f000 f9ae 	bl	83bcc <_lseek_r>
   83870:	89a3      	ldrh	r3, [r4, #12]
   83872:	1c42      	adds	r2, r0, #1
   83874:	bf0e      	itee	eq
   83876:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8387a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8387e:	6520      	strne	r0, [r4, #80]	; 0x50
   83880:	81a3      	strh	r3, [r4, #12]
   83882:	bd10      	pop	{r4, pc}

00083884 <__sclose>:
   83884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83888:	f000 b906 	b.w	83a98 <_close_r>

0008388c <__swbuf_r>:
   8388c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8388e:	460d      	mov	r5, r1
   83890:	4614      	mov	r4, r2
   83892:	4606      	mov	r6, r0
   83894:	b110      	cbz	r0, 8389c <__swbuf_r+0x10>
   83896:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83898:	2b00      	cmp	r3, #0
   8389a:	d04b      	beq.n	83934 <__swbuf_r+0xa8>
   8389c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   838a0:	69a3      	ldr	r3, [r4, #24]
   838a2:	b291      	uxth	r1, r2
   838a4:	0708      	lsls	r0, r1, #28
   838a6:	60a3      	str	r3, [r4, #8]
   838a8:	d539      	bpl.n	8391e <__swbuf_r+0x92>
   838aa:	6923      	ldr	r3, [r4, #16]
   838ac:	2b00      	cmp	r3, #0
   838ae:	d036      	beq.n	8391e <__swbuf_r+0x92>
   838b0:	b2ed      	uxtb	r5, r5
   838b2:	0489      	lsls	r1, r1, #18
   838b4:	462f      	mov	r7, r5
   838b6:	d515      	bpl.n	838e4 <__swbuf_r+0x58>
   838b8:	6822      	ldr	r2, [r4, #0]
   838ba:	6961      	ldr	r1, [r4, #20]
   838bc:	1ad3      	subs	r3, r2, r3
   838be:	428b      	cmp	r3, r1
   838c0:	da1c      	bge.n	838fc <__swbuf_r+0x70>
   838c2:	3301      	adds	r3, #1
   838c4:	68a1      	ldr	r1, [r4, #8]
   838c6:	1c50      	adds	r0, r2, #1
   838c8:	3901      	subs	r1, #1
   838ca:	60a1      	str	r1, [r4, #8]
   838cc:	6020      	str	r0, [r4, #0]
   838ce:	7015      	strb	r5, [r2, #0]
   838d0:	6962      	ldr	r2, [r4, #20]
   838d2:	429a      	cmp	r2, r3
   838d4:	d01a      	beq.n	8390c <__swbuf_r+0x80>
   838d6:	89a3      	ldrh	r3, [r4, #12]
   838d8:	07db      	lsls	r3, r3, #31
   838da:	d501      	bpl.n	838e0 <__swbuf_r+0x54>
   838dc:	2d0a      	cmp	r5, #10
   838de:	d015      	beq.n	8390c <__swbuf_r+0x80>
   838e0:	4638      	mov	r0, r7
   838e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   838e4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   838e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   838ea:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   838ee:	81a2      	strh	r2, [r4, #12]
   838f0:	6822      	ldr	r2, [r4, #0]
   838f2:	6661      	str	r1, [r4, #100]	; 0x64
   838f4:	6961      	ldr	r1, [r4, #20]
   838f6:	1ad3      	subs	r3, r2, r3
   838f8:	428b      	cmp	r3, r1
   838fa:	dbe2      	blt.n	838c2 <__swbuf_r+0x36>
   838fc:	4621      	mov	r1, r4
   838fe:	4630      	mov	r0, r6
   83900:	f7fe fdae 	bl	82460 <_fflush_r>
   83904:	b940      	cbnz	r0, 83918 <__swbuf_r+0x8c>
   83906:	2301      	movs	r3, #1
   83908:	6822      	ldr	r2, [r4, #0]
   8390a:	e7db      	b.n	838c4 <__swbuf_r+0x38>
   8390c:	4621      	mov	r1, r4
   8390e:	4630      	mov	r0, r6
   83910:	f7fe fda6 	bl	82460 <_fflush_r>
   83914:	2800      	cmp	r0, #0
   83916:	d0e3      	beq.n	838e0 <__swbuf_r+0x54>
   83918:	f04f 37ff 	mov.w	r7, #4294967295
   8391c:	e7e0      	b.n	838e0 <__swbuf_r+0x54>
   8391e:	4621      	mov	r1, r4
   83920:	4630      	mov	r0, r6
   83922:	f7fe fc8d 	bl	82240 <__swsetup_r>
   83926:	2800      	cmp	r0, #0
   83928:	d1f6      	bne.n	83918 <__swbuf_r+0x8c>
   8392a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8392e:	6923      	ldr	r3, [r4, #16]
   83930:	b291      	uxth	r1, r2
   83932:	e7bd      	b.n	838b0 <__swbuf_r+0x24>
   83934:	f7fe fdec 	bl	82510 <__sinit>
   83938:	e7b0      	b.n	8389c <__swbuf_r+0x10>
   8393a:	bf00      	nop

0008393c <_wcrtomb_r>:
   8393c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8393e:	4606      	mov	r6, r0
   83940:	b085      	sub	sp, #20
   83942:	461f      	mov	r7, r3
   83944:	b189      	cbz	r1, 8396a <_wcrtomb_r+0x2e>
   83946:	4c10      	ldr	r4, [pc, #64]	; (83988 <_wcrtomb_r+0x4c>)
   83948:	4d10      	ldr	r5, [pc, #64]	; (8398c <_wcrtomb_r+0x50>)
   8394a:	6824      	ldr	r4, [r4, #0]
   8394c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8394e:	2c00      	cmp	r4, #0
   83950:	bf08      	it	eq
   83952:	462c      	moveq	r4, r5
   83954:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83958:	47a0      	blx	r4
   8395a:	1c43      	adds	r3, r0, #1
   8395c:	d103      	bne.n	83966 <_wcrtomb_r+0x2a>
   8395e:	2200      	movs	r2, #0
   83960:	238a      	movs	r3, #138	; 0x8a
   83962:	603a      	str	r2, [r7, #0]
   83964:	6033      	str	r3, [r6, #0]
   83966:	b005      	add	sp, #20
   83968:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8396a:	460c      	mov	r4, r1
   8396c:	4a06      	ldr	r2, [pc, #24]	; (83988 <_wcrtomb_r+0x4c>)
   8396e:	4d07      	ldr	r5, [pc, #28]	; (8398c <_wcrtomb_r+0x50>)
   83970:	6811      	ldr	r1, [r2, #0]
   83972:	4622      	mov	r2, r4
   83974:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83976:	a901      	add	r1, sp, #4
   83978:	2c00      	cmp	r4, #0
   8397a:	bf08      	it	eq
   8397c:	462c      	moveq	r4, r5
   8397e:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83982:	47a0      	blx	r4
   83984:	e7e9      	b.n	8395a <_wcrtomb_r+0x1e>
   83986:	bf00      	nop
   83988:	20070138 	.word	0x20070138
   8398c:	2007056c 	.word	0x2007056c

00083990 <__ascii_wctomb>:
   83990:	b119      	cbz	r1, 8399a <__ascii_wctomb+0xa>
   83992:	2aff      	cmp	r2, #255	; 0xff
   83994:	d803      	bhi.n	8399e <__ascii_wctomb+0xe>
   83996:	700a      	strb	r2, [r1, #0]
   83998:	2101      	movs	r1, #1
   8399a:	4608      	mov	r0, r1
   8399c:	4770      	bx	lr
   8399e:	238a      	movs	r3, #138	; 0x8a
   839a0:	f04f 31ff 	mov.w	r1, #4294967295
   839a4:	6003      	str	r3, [r0, #0]
   839a6:	e7f8      	b.n	8399a <__ascii_wctomb+0xa>

000839a8 <_write_r>:
   839a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   839aa:	460e      	mov	r6, r1
   839ac:	2500      	movs	r5, #0
   839ae:	4c08      	ldr	r4, [pc, #32]	; (839d0 <_write_r+0x28>)
   839b0:	4611      	mov	r1, r2
   839b2:	4607      	mov	r7, r0
   839b4:	461a      	mov	r2, r3
   839b6:	4630      	mov	r0, r6
   839b8:	6025      	str	r5, [r4, #0]
   839ba:	f7fc ff0d 	bl	807d8 <_write>
   839be:	1c43      	adds	r3, r0, #1
   839c0:	d000      	beq.n	839c4 <_write_r+0x1c>
   839c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839c4:	6823      	ldr	r3, [r4, #0]
   839c6:	2b00      	cmp	r3, #0
   839c8:	d0fb      	beq.n	839c2 <_write_r+0x1a>
   839ca:	603b      	str	r3, [r7, #0]
   839cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839ce:	bf00      	nop
   839d0:	20070d08 	.word	0x20070d08

000839d4 <__register_exitproc>:
   839d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   839d8:	4d2c      	ldr	r5, [pc, #176]	; (83a8c <__register_exitproc+0xb8>)
   839da:	4606      	mov	r6, r0
   839dc:	6828      	ldr	r0, [r5, #0]
   839de:	4698      	mov	r8, r3
   839e0:	460f      	mov	r7, r1
   839e2:	4691      	mov	r9, r2
   839e4:	f7ff f954 	bl	82c90 <__retarget_lock_acquire_recursive>
   839e8:	4b29      	ldr	r3, [pc, #164]	; (83a90 <__register_exitproc+0xbc>)
   839ea:	681c      	ldr	r4, [r3, #0]
   839ec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   839f0:	2b00      	cmp	r3, #0
   839f2:	d03e      	beq.n	83a72 <__register_exitproc+0x9e>
   839f4:	685a      	ldr	r2, [r3, #4]
   839f6:	2a1f      	cmp	r2, #31
   839f8:	dc1c      	bgt.n	83a34 <__register_exitproc+0x60>
   839fa:	f102 0e01 	add.w	lr, r2, #1
   839fe:	b176      	cbz	r6, 83a1e <__register_exitproc+0x4a>
   83a00:	2101      	movs	r1, #1
   83a02:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83a06:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83a0a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83a0e:	4091      	lsls	r1, r2
   83a10:	4308      	orrs	r0, r1
   83a12:	2e02      	cmp	r6, #2
   83a14:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83a18:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83a1c:	d023      	beq.n	83a66 <__register_exitproc+0x92>
   83a1e:	3202      	adds	r2, #2
   83a20:	f8c3 e004 	str.w	lr, [r3, #4]
   83a24:	6828      	ldr	r0, [r5, #0]
   83a26:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83a2a:	f7ff f933 	bl	82c94 <__retarget_lock_release_recursive>
   83a2e:	2000      	movs	r0, #0
   83a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83a34:	4b17      	ldr	r3, [pc, #92]	; (83a94 <__register_exitproc+0xc0>)
   83a36:	b30b      	cbz	r3, 83a7c <__register_exitproc+0xa8>
   83a38:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83a3c:	f7ff f9a4 	bl	82d88 <malloc>
   83a40:	4603      	mov	r3, r0
   83a42:	b1d8      	cbz	r0, 83a7c <__register_exitproc+0xa8>
   83a44:	2000      	movs	r0, #0
   83a46:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83a4a:	f04f 0e01 	mov.w	lr, #1
   83a4e:	6058      	str	r0, [r3, #4]
   83a50:	6019      	str	r1, [r3, #0]
   83a52:	4602      	mov	r2, r0
   83a54:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83a58:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83a5c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83a60:	2e00      	cmp	r6, #0
   83a62:	d0dc      	beq.n	83a1e <__register_exitproc+0x4a>
   83a64:	e7cc      	b.n	83a00 <__register_exitproc+0x2c>
   83a66:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83a6a:	4301      	orrs	r1, r0
   83a6c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83a70:	e7d5      	b.n	83a1e <__register_exitproc+0x4a>
   83a72:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83a76:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83a7a:	e7bb      	b.n	839f4 <__register_exitproc+0x20>
   83a7c:	6828      	ldr	r0, [r5, #0]
   83a7e:	f7ff f909 	bl	82c94 <__retarget_lock_release_recursive>
   83a82:	f04f 30ff 	mov.w	r0, #4294967295
   83a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83a8a:	bf00      	nop
   83a8c:	20070568 	.word	0x20070568
   83a90:	00083f64 	.word	0x00083f64
   83a94:	00082d89 	.word	0x00082d89

00083a98 <_close_r>:
   83a98:	b538      	push	{r3, r4, r5, lr}
   83a9a:	2300      	movs	r3, #0
   83a9c:	4c06      	ldr	r4, [pc, #24]	; (83ab8 <_close_r+0x20>)
   83a9e:	4605      	mov	r5, r0
   83aa0:	4608      	mov	r0, r1
   83aa2:	6023      	str	r3, [r4, #0]
   83aa4:	f7fd fabc 	bl	81020 <_close>
   83aa8:	1c43      	adds	r3, r0, #1
   83aaa:	d000      	beq.n	83aae <_close_r+0x16>
   83aac:	bd38      	pop	{r3, r4, r5, pc}
   83aae:	6823      	ldr	r3, [r4, #0]
   83ab0:	2b00      	cmp	r3, #0
   83ab2:	d0fb      	beq.n	83aac <_close_r+0x14>
   83ab4:	602b      	str	r3, [r5, #0]
   83ab6:	bd38      	pop	{r3, r4, r5, pc}
   83ab8:	20070d08 	.word	0x20070d08

00083abc <_fclose_r>:
   83abc:	b570      	push	{r4, r5, r6, lr}
   83abe:	b159      	cbz	r1, 83ad8 <_fclose_r+0x1c>
   83ac0:	4605      	mov	r5, r0
   83ac2:	460c      	mov	r4, r1
   83ac4:	b110      	cbz	r0, 83acc <_fclose_r+0x10>
   83ac6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83ac8:	2b00      	cmp	r3, #0
   83aca:	d03c      	beq.n	83b46 <_fclose_r+0x8a>
   83acc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83ace:	07d8      	lsls	r0, r3, #31
   83ad0:	d505      	bpl.n	83ade <_fclose_r+0x22>
   83ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ad6:	b92b      	cbnz	r3, 83ae4 <_fclose_r+0x28>
   83ad8:	2600      	movs	r6, #0
   83ada:	4630      	mov	r0, r6
   83adc:	bd70      	pop	{r4, r5, r6, pc}
   83ade:	89a3      	ldrh	r3, [r4, #12]
   83ae0:	0599      	lsls	r1, r3, #22
   83ae2:	d53c      	bpl.n	83b5e <_fclose_r+0xa2>
   83ae4:	4621      	mov	r1, r4
   83ae6:	4628      	mov	r0, r5
   83ae8:	f7fe fc1e 	bl	82328 <__sflush_r>
   83aec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83aee:	4606      	mov	r6, r0
   83af0:	b133      	cbz	r3, 83b00 <_fclose_r+0x44>
   83af2:	69e1      	ldr	r1, [r4, #28]
   83af4:	4628      	mov	r0, r5
   83af6:	4798      	blx	r3
   83af8:	2800      	cmp	r0, #0
   83afa:	bfb8      	it	lt
   83afc:	f04f 36ff 	movlt.w	r6, #4294967295
   83b00:	89a3      	ldrh	r3, [r4, #12]
   83b02:	061a      	lsls	r2, r3, #24
   83b04:	d422      	bmi.n	83b4c <_fclose_r+0x90>
   83b06:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83b08:	b141      	cbz	r1, 83b1c <_fclose_r+0x60>
   83b0a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83b0e:	4299      	cmp	r1, r3
   83b10:	d002      	beq.n	83b18 <_fclose_r+0x5c>
   83b12:	4628      	mov	r0, r5
   83b14:	f7fe fe22 	bl	8275c <_free_r>
   83b18:	2300      	movs	r3, #0
   83b1a:	6323      	str	r3, [r4, #48]	; 0x30
   83b1c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83b1e:	b121      	cbz	r1, 83b2a <_fclose_r+0x6e>
   83b20:	4628      	mov	r0, r5
   83b22:	f7fe fe1b 	bl	8275c <_free_r>
   83b26:	2300      	movs	r3, #0
   83b28:	6463      	str	r3, [r4, #68]	; 0x44
   83b2a:	f7fe fd21 	bl	82570 <__sfp_lock_acquire>
   83b2e:	2200      	movs	r2, #0
   83b30:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83b32:	81a2      	strh	r2, [r4, #12]
   83b34:	07db      	lsls	r3, r3, #31
   83b36:	d50e      	bpl.n	83b56 <_fclose_r+0x9a>
   83b38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b3a:	f7ff f8a7 	bl	82c8c <__retarget_lock_close_recursive>
   83b3e:	f7fe fd1d 	bl	8257c <__sfp_lock_release>
   83b42:	4630      	mov	r0, r6
   83b44:	bd70      	pop	{r4, r5, r6, pc}
   83b46:	f7fe fce3 	bl	82510 <__sinit>
   83b4a:	e7bf      	b.n	83acc <_fclose_r+0x10>
   83b4c:	6921      	ldr	r1, [r4, #16]
   83b4e:	4628      	mov	r0, r5
   83b50:	f7fe fe04 	bl	8275c <_free_r>
   83b54:	e7d7      	b.n	83b06 <_fclose_r+0x4a>
   83b56:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b58:	f7ff f89c 	bl	82c94 <__retarget_lock_release_recursive>
   83b5c:	e7ec      	b.n	83b38 <_fclose_r+0x7c>
   83b5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b60:	f7ff f896 	bl	82c90 <__retarget_lock_acquire_recursive>
   83b64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b68:	2b00      	cmp	r3, #0
   83b6a:	d1bb      	bne.n	83ae4 <_fclose_r+0x28>
   83b6c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83b6e:	f016 0601 	ands.w	r6, r6, #1
   83b72:	d1b1      	bne.n	83ad8 <_fclose_r+0x1c>
   83b74:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b76:	f7ff f88d 	bl	82c94 <__retarget_lock_release_recursive>
   83b7a:	4630      	mov	r0, r6
   83b7c:	bd70      	pop	{r4, r5, r6, pc}
   83b7e:	bf00      	nop

00083b80 <_fstat_r>:
   83b80:	b570      	push	{r4, r5, r6, lr}
   83b82:	460d      	mov	r5, r1
   83b84:	2300      	movs	r3, #0
   83b86:	4c07      	ldr	r4, [pc, #28]	; (83ba4 <_fstat_r+0x24>)
   83b88:	4606      	mov	r6, r0
   83b8a:	4611      	mov	r1, r2
   83b8c:	4628      	mov	r0, r5
   83b8e:	6023      	str	r3, [r4, #0]
   83b90:	f7fd fa49 	bl	81026 <_fstat>
   83b94:	1c43      	adds	r3, r0, #1
   83b96:	d000      	beq.n	83b9a <_fstat_r+0x1a>
   83b98:	bd70      	pop	{r4, r5, r6, pc}
   83b9a:	6823      	ldr	r3, [r4, #0]
   83b9c:	2b00      	cmp	r3, #0
   83b9e:	d0fb      	beq.n	83b98 <_fstat_r+0x18>
   83ba0:	6033      	str	r3, [r6, #0]
   83ba2:	bd70      	pop	{r4, r5, r6, pc}
   83ba4:	20070d08 	.word	0x20070d08

00083ba8 <_isatty_r>:
   83ba8:	b538      	push	{r3, r4, r5, lr}
   83baa:	2300      	movs	r3, #0
   83bac:	4c06      	ldr	r4, [pc, #24]	; (83bc8 <_isatty_r+0x20>)
   83bae:	4605      	mov	r5, r0
   83bb0:	4608      	mov	r0, r1
   83bb2:	6023      	str	r3, [r4, #0]
   83bb4:	f7fd fa3c 	bl	81030 <_isatty>
   83bb8:	1c43      	adds	r3, r0, #1
   83bba:	d000      	beq.n	83bbe <_isatty_r+0x16>
   83bbc:	bd38      	pop	{r3, r4, r5, pc}
   83bbe:	6823      	ldr	r3, [r4, #0]
   83bc0:	2b00      	cmp	r3, #0
   83bc2:	d0fb      	beq.n	83bbc <_isatty_r+0x14>
   83bc4:	602b      	str	r3, [r5, #0]
   83bc6:	bd38      	pop	{r3, r4, r5, pc}
   83bc8:	20070d08 	.word	0x20070d08

00083bcc <_lseek_r>:
   83bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bce:	460e      	mov	r6, r1
   83bd0:	2500      	movs	r5, #0
   83bd2:	4c08      	ldr	r4, [pc, #32]	; (83bf4 <_lseek_r+0x28>)
   83bd4:	4611      	mov	r1, r2
   83bd6:	4607      	mov	r7, r0
   83bd8:	461a      	mov	r2, r3
   83bda:	4630      	mov	r0, r6
   83bdc:	6025      	str	r5, [r4, #0]
   83bde:	f7fd fa29 	bl	81034 <_lseek>
   83be2:	1c43      	adds	r3, r0, #1
   83be4:	d000      	beq.n	83be8 <_lseek_r+0x1c>
   83be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83be8:	6823      	ldr	r3, [r4, #0]
   83bea:	2b00      	cmp	r3, #0
   83bec:	d0fb      	beq.n	83be6 <_lseek_r+0x1a>
   83bee:	603b      	str	r3, [r7, #0]
   83bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83bf2:	bf00      	nop
   83bf4:	20070d08 	.word	0x20070d08

00083bf8 <_read_r>:
   83bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bfa:	460e      	mov	r6, r1
   83bfc:	2500      	movs	r5, #0
   83bfe:	4c08      	ldr	r4, [pc, #32]	; (83c20 <_read_r+0x28>)
   83c00:	4611      	mov	r1, r2
   83c02:	4607      	mov	r7, r0
   83c04:	461a      	mov	r2, r3
   83c06:	4630      	mov	r0, r6
   83c08:	6025      	str	r5, [r4, #0]
   83c0a:	f7fc faa9 	bl	80160 <_read>
   83c0e:	1c43      	adds	r3, r0, #1
   83c10:	d000      	beq.n	83c14 <_read_r+0x1c>
   83c12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c14:	6823      	ldr	r3, [r4, #0]
   83c16:	2b00      	cmp	r3, #0
   83c18:	d0fb      	beq.n	83c12 <_read_r+0x1a>
   83c1a:	603b      	str	r3, [r7, #0]
   83c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c1e:	bf00      	nop
   83c20:	20070d08 	.word	0x20070d08

00083c24 <__aeabi_uldivmod>:
   83c24:	b953      	cbnz	r3, 83c3c <__aeabi_uldivmod+0x18>
   83c26:	b94a      	cbnz	r2, 83c3c <__aeabi_uldivmod+0x18>
   83c28:	2900      	cmp	r1, #0
   83c2a:	bf08      	it	eq
   83c2c:	2800      	cmpeq	r0, #0
   83c2e:	bf1c      	itt	ne
   83c30:	f04f 31ff 	movne.w	r1, #4294967295
   83c34:	f04f 30ff 	movne.w	r0, #4294967295
   83c38:	f000 b97a 	b.w	83f30 <__aeabi_idiv0>
   83c3c:	f1ad 0c08 	sub.w	ip, sp, #8
   83c40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83c44:	f000 f806 	bl	83c54 <__udivmoddi4>
   83c48:	f8dd e004 	ldr.w	lr, [sp, #4]
   83c4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83c50:	b004      	add	sp, #16
   83c52:	4770      	bx	lr

00083c54 <__udivmoddi4>:
   83c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83c58:	468c      	mov	ip, r1
   83c5a:	460e      	mov	r6, r1
   83c5c:	4604      	mov	r4, r0
   83c5e:	9d08      	ldr	r5, [sp, #32]
   83c60:	2b00      	cmp	r3, #0
   83c62:	d150      	bne.n	83d06 <__udivmoddi4+0xb2>
   83c64:	428a      	cmp	r2, r1
   83c66:	4617      	mov	r7, r2
   83c68:	d96c      	bls.n	83d44 <__udivmoddi4+0xf0>
   83c6a:	fab2 fe82 	clz	lr, r2
   83c6e:	f1be 0f00 	cmp.w	lr, #0
   83c72:	d00b      	beq.n	83c8c <__udivmoddi4+0x38>
   83c74:	f1ce 0c20 	rsb	ip, lr, #32
   83c78:	fa01 f60e 	lsl.w	r6, r1, lr
   83c7c:	fa20 fc0c 	lsr.w	ip, r0, ip
   83c80:	fa02 f70e 	lsl.w	r7, r2, lr
   83c84:	ea4c 0c06 	orr.w	ip, ip, r6
   83c88:	fa00 f40e 	lsl.w	r4, r0, lr
   83c8c:	0c3a      	lsrs	r2, r7, #16
   83c8e:	fbbc f9f2 	udiv	r9, ip, r2
   83c92:	b2bb      	uxth	r3, r7
   83c94:	fb02 cc19 	mls	ip, r2, r9, ip
   83c98:	fb09 fa03 	mul.w	sl, r9, r3
   83c9c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83ca0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83ca4:	45b2      	cmp	sl, r6
   83ca6:	d90a      	bls.n	83cbe <__udivmoddi4+0x6a>
   83ca8:	19f6      	adds	r6, r6, r7
   83caa:	f109 31ff 	add.w	r1, r9, #4294967295
   83cae:	f080 8125 	bcs.w	83efc <__udivmoddi4+0x2a8>
   83cb2:	45b2      	cmp	sl, r6
   83cb4:	f240 8122 	bls.w	83efc <__udivmoddi4+0x2a8>
   83cb8:	f1a9 0902 	sub.w	r9, r9, #2
   83cbc:	443e      	add	r6, r7
   83cbe:	eba6 060a 	sub.w	r6, r6, sl
   83cc2:	fbb6 f0f2 	udiv	r0, r6, r2
   83cc6:	fb02 6610 	mls	r6, r2, r0, r6
   83cca:	fb00 f303 	mul.w	r3, r0, r3
   83cce:	b2a4      	uxth	r4, r4
   83cd0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83cd4:	42a3      	cmp	r3, r4
   83cd6:	d909      	bls.n	83cec <__udivmoddi4+0x98>
   83cd8:	19e4      	adds	r4, r4, r7
   83cda:	f100 32ff 	add.w	r2, r0, #4294967295
   83cde:	f080 810b 	bcs.w	83ef8 <__udivmoddi4+0x2a4>
   83ce2:	42a3      	cmp	r3, r4
   83ce4:	f240 8108 	bls.w	83ef8 <__udivmoddi4+0x2a4>
   83ce8:	3802      	subs	r0, #2
   83cea:	443c      	add	r4, r7
   83cec:	2100      	movs	r1, #0
   83cee:	1ae4      	subs	r4, r4, r3
   83cf0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83cf4:	2d00      	cmp	r5, #0
   83cf6:	d062      	beq.n	83dbe <__udivmoddi4+0x16a>
   83cf8:	2300      	movs	r3, #0
   83cfa:	fa24 f40e 	lsr.w	r4, r4, lr
   83cfe:	602c      	str	r4, [r5, #0]
   83d00:	606b      	str	r3, [r5, #4]
   83d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d06:	428b      	cmp	r3, r1
   83d08:	d907      	bls.n	83d1a <__udivmoddi4+0xc6>
   83d0a:	2d00      	cmp	r5, #0
   83d0c:	d055      	beq.n	83dba <__udivmoddi4+0x166>
   83d0e:	2100      	movs	r1, #0
   83d10:	e885 0041 	stmia.w	r5, {r0, r6}
   83d14:	4608      	mov	r0, r1
   83d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d1a:	fab3 f183 	clz	r1, r3
   83d1e:	2900      	cmp	r1, #0
   83d20:	f040 808f 	bne.w	83e42 <__udivmoddi4+0x1ee>
   83d24:	42b3      	cmp	r3, r6
   83d26:	d302      	bcc.n	83d2e <__udivmoddi4+0xda>
   83d28:	4282      	cmp	r2, r0
   83d2a:	f200 80fc 	bhi.w	83f26 <__udivmoddi4+0x2d2>
   83d2e:	1a84      	subs	r4, r0, r2
   83d30:	eb66 0603 	sbc.w	r6, r6, r3
   83d34:	2001      	movs	r0, #1
   83d36:	46b4      	mov	ip, r6
   83d38:	2d00      	cmp	r5, #0
   83d3a:	d040      	beq.n	83dbe <__udivmoddi4+0x16a>
   83d3c:	e885 1010 	stmia.w	r5, {r4, ip}
   83d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d44:	b912      	cbnz	r2, 83d4c <__udivmoddi4+0xf8>
   83d46:	2701      	movs	r7, #1
   83d48:	fbb7 f7f2 	udiv	r7, r7, r2
   83d4c:	fab7 fe87 	clz	lr, r7
   83d50:	f1be 0f00 	cmp.w	lr, #0
   83d54:	d135      	bne.n	83dc2 <__udivmoddi4+0x16e>
   83d56:	2101      	movs	r1, #1
   83d58:	1bf6      	subs	r6, r6, r7
   83d5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83d5e:	fa1f f887 	uxth.w	r8, r7
   83d62:	fbb6 f2fc 	udiv	r2, r6, ip
   83d66:	fb0c 6612 	mls	r6, ip, r2, r6
   83d6a:	fb08 f002 	mul.w	r0, r8, r2
   83d6e:	0c23      	lsrs	r3, r4, #16
   83d70:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83d74:	42b0      	cmp	r0, r6
   83d76:	d907      	bls.n	83d88 <__udivmoddi4+0x134>
   83d78:	19f6      	adds	r6, r6, r7
   83d7a:	f102 33ff 	add.w	r3, r2, #4294967295
   83d7e:	d202      	bcs.n	83d86 <__udivmoddi4+0x132>
   83d80:	42b0      	cmp	r0, r6
   83d82:	f200 80d2 	bhi.w	83f2a <__udivmoddi4+0x2d6>
   83d86:	461a      	mov	r2, r3
   83d88:	1a36      	subs	r6, r6, r0
   83d8a:	fbb6 f0fc 	udiv	r0, r6, ip
   83d8e:	fb0c 6610 	mls	r6, ip, r0, r6
   83d92:	fb08 f800 	mul.w	r8, r8, r0
   83d96:	b2a3      	uxth	r3, r4
   83d98:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83d9c:	45a0      	cmp	r8, r4
   83d9e:	d907      	bls.n	83db0 <__udivmoddi4+0x15c>
   83da0:	19e4      	adds	r4, r4, r7
   83da2:	f100 33ff 	add.w	r3, r0, #4294967295
   83da6:	d202      	bcs.n	83dae <__udivmoddi4+0x15a>
   83da8:	45a0      	cmp	r8, r4
   83daa:	f200 80b9 	bhi.w	83f20 <__udivmoddi4+0x2cc>
   83dae:	4618      	mov	r0, r3
   83db0:	eba4 0408 	sub.w	r4, r4, r8
   83db4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83db8:	e79c      	b.n	83cf4 <__udivmoddi4+0xa0>
   83dba:	4629      	mov	r1, r5
   83dbc:	4628      	mov	r0, r5
   83dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83dc2:	fa07 f70e 	lsl.w	r7, r7, lr
   83dc6:	f1ce 0320 	rsb	r3, lr, #32
   83dca:	fa26 f203 	lsr.w	r2, r6, r3
   83dce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83dd2:	fbb2 f1fc 	udiv	r1, r2, ip
   83dd6:	fa1f f887 	uxth.w	r8, r7
   83dda:	fb0c 2211 	mls	r2, ip, r1, r2
   83dde:	fa06 f60e 	lsl.w	r6, r6, lr
   83de2:	fa20 f303 	lsr.w	r3, r0, r3
   83de6:	fb01 f908 	mul.w	r9, r1, r8
   83dea:	4333      	orrs	r3, r6
   83dec:	0c1e      	lsrs	r6, r3, #16
   83dee:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83df2:	45b1      	cmp	r9, r6
   83df4:	fa00 f40e 	lsl.w	r4, r0, lr
   83df8:	d909      	bls.n	83e0e <__udivmoddi4+0x1ba>
   83dfa:	19f6      	adds	r6, r6, r7
   83dfc:	f101 32ff 	add.w	r2, r1, #4294967295
   83e00:	f080 808c 	bcs.w	83f1c <__udivmoddi4+0x2c8>
   83e04:	45b1      	cmp	r9, r6
   83e06:	f240 8089 	bls.w	83f1c <__udivmoddi4+0x2c8>
   83e0a:	3902      	subs	r1, #2
   83e0c:	443e      	add	r6, r7
   83e0e:	eba6 0609 	sub.w	r6, r6, r9
   83e12:	fbb6 f0fc 	udiv	r0, r6, ip
   83e16:	fb0c 6210 	mls	r2, ip, r0, r6
   83e1a:	fb00 f908 	mul.w	r9, r0, r8
   83e1e:	b29e      	uxth	r6, r3
   83e20:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83e24:	45b1      	cmp	r9, r6
   83e26:	d907      	bls.n	83e38 <__udivmoddi4+0x1e4>
   83e28:	19f6      	adds	r6, r6, r7
   83e2a:	f100 33ff 	add.w	r3, r0, #4294967295
   83e2e:	d271      	bcs.n	83f14 <__udivmoddi4+0x2c0>
   83e30:	45b1      	cmp	r9, r6
   83e32:	d96f      	bls.n	83f14 <__udivmoddi4+0x2c0>
   83e34:	3802      	subs	r0, #2
   83e36:	443e      	add	r6, r7
   83e38:	eba6 0609 	sub.w	r6, r6, r9
   83e3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83e40:	e78f      	b.n	83d62 <__udivmoddi4+0x10e>
   83e42:	f1c1 0720 	rsb	r7, r1, #32
   83e46:	fa22 f807 	lsr.w	r8, r2, r7
   83e4a:	408b      	lsls	r3, r1
   83e4c:	ea48 0303 	orr.w	r3, r8, r3
   83e50:	fa26 f407 	lsr.w	r4, r6, r7
   83e54:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83e58:	fbb4 f9fe 	udiv	r9, r4, lr
   83e5c:	fa1f fc83 	uxth.w	ip, r3
   83e60:	fb0e 4419 	mls	r4, lr, r9, r4
   83e64:	408e      	lsls	r6, r1
   83e66:	fa20 f807 	lsr.w	r8, r0, r7
   83e6a:	fb09 fa0c 	mul.w	sl, r9, ip
   83e6e:	ea48 0806 	orr.w	r8, r8, r6
   83e72:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83e76:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83e7a:	45a2      	cmp	sl, r4
   83e7c:	fa02 f201 	lsl.w	r2, r2, r1
   83e80:	fa00 f601 	lsl.w	r6, r0, r1
   83e84:	d908      	bls.n	83e98 <__udivmoddi4+0x244>
   83e86:	18e4      	adds	r4, r4, r3
   83e88:	f109 30ff 	add.w	r0, r9, #4294967295
   83e8c:	d244      	bcs.n	83f18 <__udivmoddi4+0x2c4>
   83e8e:	45a2      	cmp	sl, r4
   83e90:	d942      	bls.n	83f18 <__udivmoddi4+0x2c4>
   83e92:	f1a9 0902 	sub.w	r9, r9, #2
   83e96:	441c      	add	r4, r3
   83e98:	eba4 040a 	sub.w	r4, r4, sl
   83e9c:	fbb4 f0fe 	udiv	r0, r4, lr
   83ea0:	fb0e 4410 	mls	r4, lr, r0, r4
   83ea4:	fb00 fc0c 	mul.w	ip, r0, ip
   83ea8:	fa1f f888 	uxth.w	r8, r8
   83eac:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83eb0:	45a4      	cmp	ip, r4
   83eb2:	d907      	bls.n	83ec4 <__udivmoddi4+0x270>
   83eb4:	18e4      	adds	r4, r4, r3
   83eb6:	f100 3eff 	add.w	lr, r0, #4294967295
   83eba:	d229      	bcs.n	83f10 <__udivmoddi4+0x2bc>
   83ebc:	45a4      	cmp	ip, r4
   83ebe:	d927      	bls.n	83f10 <__udivmoddi4+0x2bc>
   83ec0:	3802      	subs	r0, #2
   83ec2:	441c      	add	r4, r3
   83ec4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83ec8:	fba0 8902 	umull	r8, r9, r0, r2
   83ecc:	eba4 0c0c 	sub.w	ip, r4, ip
   83ed0:	45cc      	cmp	ip, r9
   83ed2:	46c2      	mov	sl, r8
   83ed4:	46ce      	mov	lr, r9
   83ed6:	d315      	bcc.n	83f04 <__udivmoddi4+0x2b0>
   83ed8:	d012      	beq.n	83f00 <__udivmoddi4+0x2ac>
   83eda:	b155      	cbz	r5, 83ef2 <__udivmoddi4+0x29e>
   83edc:	ebb6 030a 	subs.w	r3, r6, sl
   83ee0:	eb6c 060e 	sbc.w	r6, ip, lr
   83ee4:	fa06 f707 	lsl.w	r7, r6, r7
   83ee8:	40cb      	lsrs	r3, r1
   83eea:	431f      	orrs	r7, r3
   83eec:	40ce      	lsrs	r6, r1
   83eee:	602f      	str	r7, [r5, #0]
   83ef0:	606e      	str	r6, [r5, #4]
   83ef2:	2100      	movs	r1, #0
   83ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83ef8:	4610      	mov	r0, r2
   83efa:	e6f7      	b.n	83cec <__udivmoddi4+0x98>
   83efc:	4689      	mov	r9, r1
   83efe:	e6de      	b.n	83cbe <__udivmoddi4+0x6a>
   83f00:	4546      	cmp	r6, r8
   83f02:	d2ea      	bcs.n	83eda <__udivmoddi4+0x286>
   83f04:	ebb8 0a02 	subs.w	sl, r8, r2
   83f08:	eb69 0e03 	sbc.w	lr, r9, r3
   83f0c:	3801      	subs	r0, #1
   83f0e:	e7e4      	b.n	83eda <__udivmoddi4+0x286>
   83f10:	4670      	mov	r0, lr
   83f12:	e7d7      	b.n	83ec4 <__udivmoddi4+0x270>
   83f14:	4618      	mov	r0, r3
   83f16:	e78f      	b.n	83e38 <__udivmoddi4+0x1e4>
   83f18:	4681      	mov	r9, r0
   83f1a:	e7bd      	b.n	83e98 <__udivmoddi4+0x244>
   83f1c:	4611      	mov	r1, r2
   83f1e:	e776      	b.n	83e0e <__udivmoddi4+0x1ba>
   83f20:	3802      	subs	r0, #2
   83f22:	443c      	add	r4, r7
   83f24:	e744      	b.n	83db0 <__udivmoddi4+0x15c>
   83f26:	4608      	mov	r0, r1
   83f28:	e706      	b.n	83d38 <__udivmoddi4+0xe4>
   83f2a:	3a02      	subs	r2, #2
   83f2c:	443e      	add	r6, r7
   83f2e:	e72b      	b.n	83d88 <__udivmoddi4+0x134>

00083f30 <__aeabi_idiv0>:
   83f30:	4770      	bx	lr
   83f32:	bf00      	nop
   83f34:	736e6f43 	.word	0x736e6f43
   83f38:	20656c6f 	.word	0x20656c6f
   83f3c:	64616572 	.word	0x64616572
   83f40:	00000a79 	.word	0x00000a79
   83f44:	3d3d3d3d 	.word	0x3d3d3d3d
   83f48:	3d3d3d3d 	.word	0x3d3d3d3d
   83f4c:	3d3d3d3d 	.word	0x3d3d3d3d
   83f50:	00000a3d 	.word	0x00000a3d
   83f54:	65636572 	.word	0x65636572
   83f58:	64657669 	.word	0x64657669
   83f5c:	6425203a 	.word	0x6425203a
   83f60:	0000000a 	.word	0x0000000a

00083f64 <_global_impure_ptr>:
   83f64:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   83f74:	46454443 00000000 33323130 37363534     CDEF....01234567
   83f84:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83f94:	0000296c                                l)..

00083f98 <blanks.7217>:
   83f98:	20202020 20202020 20202020 20202020                     

00083fa8 <zeroes.7218>:
   83fa8:	30303030 30303030 30303030 30303030     0000000000000000
   83fb8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00083fc8 <_ctype_>:
   83fc8:	20202000 20202020 28282020 20282828     .         ((((( 
   83fd8:	20202020 20202020 20202020 20202020                     
   83fe8:	10108820 10101010 10101010 10101010      ...............
   83ff8:	04040410 04040404 10040404 10101010     ................
   84008:	41411010 41414141 01010101 01010101     ..AAAAAA........
   84018:	01010101 01010101 01010101 10101010     ................
   84028:	42421010 42424242 02020202 02020202     ..BBBBBB........
   84038:	02020202 02020202 02020202 10101010     ................
   84048:	00000020 00000000 00000000 00000000      ...............
	...

000840cc <_init>:
   840cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   840ce:	bf00      	nop
   840d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   840d2:	bc08      	pop	{r3}
   840d4:	469e      	mov	lr, r3
   840d6:	4770      	bx	lr

000840d8 <__init_array_start>:
   840d8:	00082309 	.word	0x00082309

000840dc <__frame_dummy_init_array_entry>:
   840dc:	00080119                                ....

000840e0 <_fini>:
   840e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   840e2:	bf00      	nop
   840e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   840e6:	bc08      	pop	{r3}
   840e8:	469e      	mov	lr, r3
   840ea:	4770      	bx	lr

000840ec <__fini_array_start>:
   840ec:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070134 	.word	0x20070134

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <xNextTaskUnblockTime>:
2007012c:	ffffffff                                ....

20070130 <g_interrupt_enabled>:
20070130:	00000001                                ....

20070134 <SystemCoreClock>:
20070134:	003d0900                                ..=.

20070138 <_impure_ptr>:
20070138:	20070140 00000000                       @.. ....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <__atexit_recursive_mutex>:
20070568:	20070ce4                                ... 

2007056c <__global_locale>:
2007056c:	00000043 00000000 00000000 00000000     C...............
	...
2007058c:	00000043 00000000 00000000 00000000     C...............
	...
200705ac:	00000043 00000000 00000000 00000000     C...............
	...
200705cc:	00000043 00000000 00000000 00000000     C...............
	...
200705ec:	00000043 00000000 00000000 00000000     C...............
	...
2007060c:	00000043 00000000 00000000 00000000     C...............
	...
2007062c:	00000043 00000000 00000000 00000000     C...............
	...
2007064c:	00083991 000832dd 00000000 00083fc8     .9...2.......?..
2007065c:	00083fc4 00083f78 00083f78 00083f78     .?..x?..x?..x?..
2007066c:	00083f78 00083f78 00083f78 00083f78     x?..x?..x?..x?..
2007067c:	00083f78 00083f78 ffffffff ffffffff     x?..x?..........
2007068c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706b4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d8 <__malloc_av_>:
	...
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 

20070ae0 <__malloc_sbrk_base>:
20070ae0:	ffffffff                                ....

20070ae4 <__malloc_trim_threshold>:
20070ae4:	00020000                                ....
