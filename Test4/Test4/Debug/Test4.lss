
Test4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000050c0  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000850c0  000850c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b00  20070000  000850c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000234  20070b00  00085bc8  00020b00  2**2
                  ALLOC
  4 .stack        00002004  20070d34  00085dfc  00020b00  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b00  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b29  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001c017  00000000  00000000  00020b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000041a0  00000000  00000000  0003cb99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005aff  00000000  00000000  00040d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000c78  00000000  00000000  00046838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c08  00000000  00000000  000474b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001c2f1  00000000  00000000  000480b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00013c15  00000000  00000000  000643a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006aea8  00000000  00000000  00077fbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002bb8  00000000  00000000  000e2e68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	38 2d 07 20 69 0c 08 00 65 0c 08 00 65 0c 08 00     8-. i...e...e...
   80010:	65 0c 08 00 65 0c 08 00 65 0c 08 00 00 00 00 00     e...e...e.......
	...
   8002c:	ad 0e 08 00 65 0c 08 00 00 00 00 00 e5 0e 08 00     ....e...........
   8003c:	21 0f 08 00 65 0c 08 00 65 0c 08 00 65 0c 08 00     !...e...e...e...
   8004c:	65 0c 08 00 65 0c 08 00 65 0c 08 00 65 0c 08 00     e...e...e...e...
   8005c:	65 0c 08 00 65 0c 08 00 65 0c 08 00 00 00 00 00     e...e...e.......
   8006c:	55 0a 08 00 69 0a 08 00 7d 0a 08 00 91 0a 08 00     U...i...}.......
	...
   80084:	15 11 08 00 65 0c 08 00 65 0c 08 00 65 0c 08 00     ....e...e...e...
   80094:	65 0c 08 00 65 0c 08 00 65 0c 08 00 65 0c 08 00     e...e...e...e...
   800a4:	00 00 00 00 65 0c 08 00 65 0c 08 00 65 0c 08 00     ....e...e...e...
   800b4:	65 0c 08 00 65 0c 08 00 65 0c 08 00 65 0c 08 00     e...e...e...e...
   800c4:	65 0c 08 00 65 0c 08 00 65 0c 08 00 65 0c 08 00     e...e...e...e...
   800d4:	65 0c 08 00 65 0c 08 00 65 0c 08 00 65 0c 08 00     e...e...e...e...
   800e4:	65 0c 08 00 65 0c 08 00 65 0c 08 00 65 0c 08 00     e...e...e...e...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b00 	.word	0x20070b00
   80110:	00000000 	.word	0x00000000
   80114:	000850c8 	.word	0x000850c8

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000850c8 	.word	0x000850c8
   80154:	20070b04 	.word	0x20070b04
   80158:	000850c8 	.word	0x000850c8
   8015c:	00000000 	.word	0x00000000

00080160 <get_euclid_distance>:
#define pi 3.14159265359
int calculate_bow (int distance, int angel){
	return angel*(pi*(distance)/180);
}
// beräkanr avståndet till objektet.
int get_euclid_distance(int x, int y) {
   80160:	b508      	push	{r3, lr}
	return sqrt((x*x) + (y*y));
   80162:	fb01 f101 	mul.w	r1, r1, r1
   80166:	fb00 1000 	mla	r0, r0, r0, r1
   8016a:	4b03      	ldr	r3, [pc, #12]	; (80178 <get_euclid_distance+0x18>)
   8016c:	4798      	blx	r3
   8016e:	4b03      	ldr	r3, [pc, #12]	; (8017c <get_euclid_distance+0x1c>)
   80170:	4798      	blx	r3
   80172:	4b03      	ldr	r3, [pc, #12]	; (80180 <get_euclid_distance+0x20>)
   80174:	4798      	blx	r3
}
   80176:	bd08      	pop	{r3, pc}
   80178:	00081971 	.word	0x00081971
   8017c:	00081495 	.word	0x00081495
   80180:	00081f9d 	.word	0x00081f9d
   80184:	00000000 	.word	0x00000000

00080188 <motorA>:
int16_t u = 0;
uint16_t Uv = 0;
uint16_t Uh = 0;
uint8_t k = 4;

 void motorA(uint16_t speed1){
   80188:	b538      	push	{r3, r4, r5, lr}
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8018a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8018e:	4b10      	ldr	r3, [pc, #64]	; (801d0 <motorA+0x48>)
   80190:	631a      	str	r2, [r3, #48]	; 0x30
	 ioport_set_pin_level(motor1, 1);
	 delay_us(speed1);
   80192:	b938      	cbnz	r0, 801a4 <motorA+0x1c>
   80194:	2006      	movs	r0, #6
   80196:	4b0f      	ldr	r3, [pc, #60]	; (801d4 <motorA+0x4c>)
   80198:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8019a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   8019e:	4b0c      	ldr	r3, [pc, #48]	; (801d0 <motorA+0x48>)
   801a0:	635a      	str	r2, [r3, #52]	; 0x34
   801a2:	bd38      	pop	{r3, r4, r5, pc}
   801a4:	4601      	mov	r1, r0
   801a6:	4a0c      	ldr	r2, [pc, #48]	; (801d8 <motorA+0x50>)
   801a8:	2300      	movs	r3, #0
   801aa:	a507      	add	r5, pc, #28	; (adr r5, 801c8 <motorA+0x40>)
   801ac:	e9d5 4500 	ldrd	r4, r5, [r5]
   801b0:	480a      	ldr	r0, [pc, #40]	; (801dc <motorA+0x54>)
   801b2:	fbe0 4501 	umlal	r4, r5, r0, r1
   801b6:	4620      	mov	r0, r4
   801b8:	4629      	mov	r1, r5
   801ba:	4c09      	ldr	r4, [pc, #36]	; (801e0 <motorA+0x58>)
   801bc:	47a0      	blx	r4
   801be:	4b05      	ldr	r3, [pc, #20]	; (801d4 <motorA+0x4c>)
   801c0:	4798      	blx	r3
   801c2:	e7ea      	b.n	8019a <motorA+0x12>
   801c4:	f3af 8000 	nop.w
   801c8:	00d59f7f 	.word	0x00d59f7f
   801cc:	00000000 	.word	0x00000000
   801d0:	400e1000 	.word	0x400e1000
   801d4:	20070001 	.word	0x20070001
   801d8:	00d59f80 	.word	0x00d59f80
   801dc:	0501bd00 	.word	0x0501bd00
   801e0:	0008202d 	.word	0x0008202d
   801e4:	00000000 	.word	0x00000000

000801e8 <motorB>:
	 ioport_set_pin_level(motor1, 0);
 }
 
 void motorB(uint16_t speed2){
   801e8:	b538      	push	{r3, r4, r5, lr}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   801ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   801ee:	4b10      	ldr	r3, [pc, #64]	; (80230 <motorB+0x48>)
   801f0:	631a      	str	r2, [r3, #48]	; 0x30
	 ioport_set_pin_level(motor2, 1);
	 delay_us(speed2);
   801f2:	b938      	cbnz	r0, 80204 <motorB+0x1c>
   801f4:	2006      	movs	r0, #6
   801f6:	4b0f      	ldr	r3, [pc, #60]	; (80234 <motorB+0x4c>)
   801f8:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   801fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   801fe:	4b0c      	ldr	r3, [pc, #48]	; (80230 <motorB+0x48>)
   80200:	635a      	str	r2, [r3, #52]	; 0x34
   80202:	bd38      	pop	{r3, r4, r5, pc}
   80204:	4601      	mov	r1, r0
   80206:	4a0c      	ldr	r2, [pc, #48]	; (80238 <motorB+0x50>)
   80208:	2300      	movs	r3, #0
   8020a:	a507      	add	r5, pc, #28	; (adr r5, 80228 <motorB+0x40>)
   8020c:	e9d5 4500 	ldrd	r4, r5, [r5]
   80210:	480a      	ldr	r0, [pc, #40]	; (8023c <motorB+0x54>)
   80212:	fbe0 4501 	umlal	r4, r5, r0, r1
   80216:	4620      	mov	r0, r4
   80218:	4629      	mov	r1, r5
   8021a:	4c09      	ldr	r4, [pc, #36]	; (80240 <motorB+0x58>)
   8021c:	47a0      	blx	r4
   8021e:	4b05      	ldr	r3, [pc, #20]	; (80234 <motorB+0x4c>)
   80220:	4798      	blx	r3
   80222:	e7ea      	b.n	801fa <motorB+0x12>
   80224:	f3af 8000 	nop.w
   80228:	00d59f7f 	.word	0x00d59f7f
   8022c:	00000000 	.word	0x00000000
   80230:	400e0e00 	.word	0x400e0e00
   80234:	20070001 	.word	0x20070001
   80238:	00d59f80 	.word	0x00d59f80
   8023c:	0501bd00 	.word	0x0501bd00
   80240:	0008202d 	.word	0x0008202d
   80244:	00000000 	.word	0x00000000

00080248 <distance>:
	 ioport_set_pin_level(motor2, 0);
 }
  
  uint16_t distance(uint16_t cm){
   80248:	b510      	push	{r4, lr}
		return cm/1.4;
   8024a:	4b07      	ldr	r3, [pc, #28]	; (80268 <distance+0x20>)
   8024c:	4798      	blx	r3
   8024e:	a304      	add	r3, pc, #16	; (adr r3, 80260 <distance+0x18>)
   80250:	e9d3 2300 	ldrd	r2, r3, [r3]
   80254:	4c05      	ldr	r4, [pc, #20]	; (8026c <distance+0x24>)
   80256:	47a0      	blx	r4
   80258:	4b05      	ldr	r3, [pc, #20]	; (80270 <distance+0x28>)
   8025a:	4798      	blx	r3
  }
   8025c:	b280      	uxth	r0, r0
   8025e:	bd10      	pop	{r4, pc}
   80260:	66666666 	.word	0x66666666
   80264:	3ff66666 	.word	0x3ff66666
   80268:	00081971 	.word	0x00081971
   8026c:	00081c91 	.word	0x00081c91
   80270:	00081fed 	.word	0x00081fed

00080274 <drive>:
  
  void drive(uint16_t U0v, uint16_t U0h){
   80274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80278:	4604      	mov	r4, r0
   8027a:	4688      	mov	r8, r1
	  e = (get_counterA() - get_counterB());
   8027c:	4f1a      	ldr	r7, [pc, #104]	; (802e8 <drive+0x74>)
   8027e:	47b8      	blx	r7
   80280:	4605      	mov	r5, r0
   80282:	4e1a      	ldr	r6, [pc, #104]	; (802ec <drive+0x78>)
   80284:	47b0      	blx	r6
   80286:	1a28      	subs	r0, r5, r0
   80288:	b280      	uxth	r0, r0
   8028a:	4d19      	ldr	r5, [pc, #100]	; (802f0 <drive+0x7c>)
   8028c:	8028      	strh	r0, [r5, #0]
	  u = (k*e);
   8028e:	4b19      	ldr	r3, [pc, #100]	; (802f4 <drive+0x80>)
   80290:	7819      	ldrb	r1, [r3, #0]
   80292:	fb01 f100 	mul.w	r1, r1, r0
   80296:	b289      	uxth	r1, r1
   80298:	4b17      	ldr	r3, [pc, #92]	; (802f8 <drive+0x84>)
   8029a:	8019      	strh	r1, [r3, #0]
	  
	  Uv = U0v - u;
   8029c:	1a60      	subs	r0, r4, r1
   8029e:	b280      	uxth	r0, r0
   802a0:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80320 <drive+0xac>
   802a4:	f8a9 0000 	strh.w	r0, [r9]
	  Uh = u + U0h;
   802a8:	4c14      	ldr	r4, [pc, #80]	; (802fc <drive+0x88>)
   802aa:	4441      	add	r1, r8
   802ac:	8021      	strh	r1, [r4, #0]
	  
	  motorA(Uv);
   802ae:	4b14      	ldr	r3, [pc, #80]	; (80300 <drive+0x8c>)
   802b0:	4798      	blx	r3
	  motorB(Uh);
   802b2:	8820      	ldrh	r0, [r4, #0]
   802b4:	4b13      	ldr	r3, [pc, #76]	; (80304 <drive+0x90>)
   802b6:	4798      	blx	r3
	  
	  delay_us(1);
   802b8:	2006      	movs	r0, #6
   802ba:	4b13      	ldr	r3, [pc, #76]	; (80308 <drive+0x94>)
   802bc:	4798      	blx	r3
	  printf("encoder A %d och encoder B %d\n",get_counterA(), get_counterB());
   802be:	47b8      	blx	r7
   802c0:	4607      	mov	r7, r0
   802c2:	47b0      	blx	r6
   802c4:	4602      	mov	r2, r0
   802c6:	4639      	mov	r1, r7
   802c8:	4810      	ldr	r0, [pc, #64]	; (8030c <drive+0x98>)
   802ca:	4e11      	ldr	r6, [pc, #68]	; (80310 <drive+0x9c>)
   802cc:	47b0      	blx	r6
	  printf("Motor A %d och motor B %d\n",Uv,Uh);
   802ce:	8822      	ldrh	r2, [r4, #0]
   802d0:	f8b9 1000 	ldrh.w	r1, [r9]
   802d4:	480f      	ldr	r0, [pc, #60]	; (80314 <drive+0xa0>)
   802d6:	47b0      	blx	r6
	  printf("e = %d\n",e);
   802d8:	f9b5 1000 	ldrsh.w	r1, [r5]
   802dc:	480e      	ldr	r0, [pc, #56]	; (80318 <drive+0xa4>)
   802de:	47b0      	blx	r6
	  printf("Fram=============\n");
   802e0:	480e      	ldr	r0, [pc, #56]	; (8031c <drive+0xa8>)
   802e2:	47b0      	blx	r6
   802e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   802e8:	00080429 	.word	0x00080429
   802ec:	00080435 	.word	0x00080435
   802f0:	20070b20 	.word	0x20070b20
   802f4:	2007013c 	.word	0x2007013c
   802f8:	20070b22 	.word	0x20070b22
   802fc:	20070b1c 	.word	0x20070b1c
   80300:	00080189 	.word	0x00080189
   80304:	000801e9 	.word	0x000801e9
   80308:	20070001 	.word	0x20070001
   8030c:	00084eb8 	.word	0x00084eb8
   80310:	00082399 	.word	0x00082399
   80314:	00084ed8 	.word	0x00084ed8
   80318:	00084ef4 	.word	0x00084ef4
   8031c:	00084efc 	.word	0x00084efc
   80320:	20070b1e 	.word	0x20070b1e

00080324 <getHoger>:
  int hoger = 1750;
  int venster = 1250;
  
  int getHoger(){
	  return hoger;
  }
   80324:	4b01      	ldr	r3, [pc, #4]	; (8032c <getHoger+0x8>)
   80326:	6818      	ldr	r0, [r3, #0]
   80328:	4770      	bx	lr
   8032a:	bf00      	nop
   8032c:	20070138 	.word	0x20070138

00080330 <getVenster>:
  int getVenster(){
	  return venster;
  }
   80330:	4b01      	ldr	r3, [pc, #4]	; (80338 <getVenster+0x8>)
   80332:	6818      	ldr	r0, [r3, #0]
   80334:	4770      	bx	lr
   80336:	bf00      	nop
   80338:	20070140 	.word	0x20070140

0008033c <driveVinkel>:

  void driveVinkel(int alpha){
   8033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	  alpha = alpha/4;
   8033e:	2800      	cmp	r0, #0
   80340:	bfb8      	it	lt
   80342:	3003      	addlt	r0, #3
	  if(alpha < 0){
   80344:	1084      	asrs	r4, r0, #2
   80346:	d403      	bmi.n	80350 <driveVinkel+0x14>
		  alpha = alpha * (-1);
		  while((get_counterA() < alpha) && (get_counterB() < alpha)){
			  drive(1250, 1725);
		  }
	  }else{
		  while((get_counterA() < alpha) && (get_counterB() < alpha)){
   80348:	4d1f      	ldr	r5, [pc, #124]	; (803c8 <driveVinkel+0x8c>)
   8034a:	4e20      	ldr	r6, [pc, #128]	; (803cc <driveVinkel+0x90>)
			  drive(1725, 1250);
   8034c:	4f20      	ldr	r7, [pc, #128]	; (803d0 <driveVinkel+0x94>)
   8034e:	e015      	b.n	8037c <driveVinkel+0x40>
		  alpha = alpha * (-1);
   80350:	4264      	negs	r4, r4
		  while((get_counterA() < alpha) && (get_counterB() < alpha)){
   80352:	4d1d      	ldr	r5, [pc, #116]	; (803c8 <driveVinkel+0x8c>)
   80354:	4e1d      	ldr	r6, [pc, #116]	; (803cc <driveVinkel+0x90>)
			  drive(1250, 1725);
   80356:	4f1e      	ldr	r7, [pc, #120]	; (803d0 <driveVinkel+0x94>)
		  while((get_counterA() < alpha) && (get_counterB() < alpha)){
   80358:	e004      	b.n	80364 <driveVinkel+0x28>
			  drive(1250, 1725);
   8035a:	f240 61bd 	movw	r1, #1725	; 0x6bd
   8035e:	f240 40e2 	movw	r0, #1250	; 0x4e2
   80362:	47b8      	blx	r7
		  while((get_counterA() < alpha) && (get_counterB() < alpha)){
   80364:	47a8      	blx	r5
   80366:	4284      	cmp	r4, r0
   80368:	dd0e      	ble.n	80388 <driveVinkel+0x4c>
   8036a:	47b0      	blx	r6
   8036c:	4284      	cmp	r4, r0
   8036e:	dcf4      	bgt.n	8035a <driveVinkel+0x1e>
   80370:	e00a      	b.n	80388 <driveVinkel+0x4c>
			  drive(1725, 1250);
   80372:	f240 41e2 	movw	r1, #1250	; 0x4e2
   80376:	f240 60bd 	movw	r0, #1725	; 0x6bd
   8037a:	47b8      	blx	r7
		  while((get_counterA() < alpha) && (get_counterB() < alpha)){
   8037c:	47a8      	blx	r5
   8037e:	4284      	cmp	r4, r0
   80380:	dd02      	ble.n	80388 <driveVinkel+0x4c>
   80382:	47b0      	blx	r6
   80384:	4284      	cmp	r4, r0
   80386:	dcf4      	bgt.n	80372 <driveVinkel+0x36>
		  }
	  }
	  drive(1500,1500);
   80388:	f240 51dc 	movw	r1, #1500	; 0x5dc
   8038c:	4608      	mov	r0, r1
   8038e:	4b10      	ldr	r3, [pc, #64]	; (803d0 <driveVinkel+0x94>)
   80390:	4798      	blx	r3

	  
	  delay_us(1);
   80392:	2006      	movs	r0, #6
   80394:	4b0f      	ldr	r3, [pc, #60]	; (803d4 <driveVinkel+0x98>)
   80396:	4798      	blx	r3
	  
	  printf("encoder A %d och encoder B %d\n",get_counterA(), get_counterB());
   80398:	4b0b      	ldr	r3, [pc, #44]	; (803c8 <driveVinkel+0x8c>)
   8039a:	4798      	blx	r3
   8039c:	4604      	mov	r4, r0
   8039e:	4b0b      	ldr	r3, [pc, #44]	; (803cc <driveVinkel+0x90>)
   803a0:	4798      	blx	r3
   803a2:	4602      	mov	r2, r0
   803a4:	4621      	mov	r1, r4
   803a6:	480c      	ldr	r0, [pc, #48]	; (803d8 <driveVinkel+0x9c>)
   803a8:	4c0c      	ldr	r4, [pc, #48]	; (803dc <driveVinkel+0xa0>)
   803aa:	47a0      	blx	r4
	  printf("Motor A %d och motor B %d\n",Uv,Uh);
   803ac:	4b0c      	ldr	r3, [pc, #48]	; (803e0 <driveVinkel+0xa4>)
   803ae:	881a      	ldrh	r2, [r3, #0]
   803b0:	4b0c      	ldr	r3, [pc, #48]	; (803e4 <driveVinkel+0xa8>)
   803b2:	8819      	ldrh	r1, [r3, #0]
   803b4:	480c      	ldr	r0, [pc, #48]	; (803e8 <driveVinkel+0xac>)
   803b6:	47a0      	blx	r4
	  printf("e = %d\n",e);
   803b8:	4b0c      	ldr	r3, [pc, #48]	; (803ec <driveVinkel+0xb0>)
   803ba:	f9b3 1000 	ldrsh.w	r1, [r3]
   803be:	480c      	ldr	r0, [pc, #48]	; (803f0 <driveVinkel+0xb4>)
   803c0:	47a0      	blx	r4
	  printf("Fram=============\n");
   803c2:	480c      	ldr	r0, [pc, #48]	; (803f4 <driveVinkel+0xb8>)
   803c4:	47a0      	blx	r4
   803c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   803c8:	00080429 	.word	0x00080429
   803cc:	00080435 	.word	0x00080435
   803d0:	00080275 	.word	0x00080275
   803d4:	20070001 	.word	0x20070001
   803d8:	00084eb8 	.word	0x00084eb8
   803dc:	00082399 	.word	0x00082399
   803e0:	20070b1c 	.word	0x20070b1c
   803e4:	20070b1e 	.word	0x20070b1e
   803e8:	00084ed8 	.word	0x00084ed8
   803ec:	20070b20 	.word	0x20070b20
   803f0:	00084ef4 	.word	0x00084ef4
   803f4:	00084efc 	.word	0x00084efc

000803f8 <pio_interruptA>:
	counterB = b;
}

void pio_interruptA(void) {
	// Save all triggered interrupts
	uint32_t status1 = PIOA->PIO_ISR;
   803f8:	4b03      	ldr	r3, [pc, #12]	; (80408 <pio_interruptA+0x10>)
   803fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	counterA++;
   803fc:	4a03      	ldr	r2, [pc, #12]	; (8040c <pio_interruptA+0x14>)
   803fe:	6813      	ldr	r3, [r2, #0]
   80400:	3301      	adds	r3, #1
   80402:	6013      	str	r3, [r2, #0]
   80404:	4770      	bx	lr
   80406:	bf00      	nop
   80408:	400e0e00 	.word	0x400e0e00
   8040c:	20070b24 	.word	0x20070b24

00080410 <pio_interruptB>:
}

void pio_interruptB(void) {
	// Save all triggered interrupts
	uint32_t status2 = PIOD->PIO_ISR;
   80410:	4b03      	ldr	r3, [pc, #12]	; (80420 <pio_interruptB+0x10>)
   80412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	counterB++;
   80414:	4a03      	ldr	r2, [pc, #12]	; (80424 <pio_interruptB+0x14>)
   80416:	6813      	ldr	r3, [r2, #0]
   80418:	3301      	adds	r3, #1
   8041a:	6013      	str	r3, [r2, #0]
   8041c:	4770      	bx	lr
   8041e:	bf00      	nop
   80420:	400e1400 	.word	0x400e1400
   80424:	20070b28 	.word	0x20070b28

00080428 <get_counterA>:
	return counterA;
   80428:	4b01      	ldr	r3, [pc, #4]	; (80430 <get_counterA+0x8>)
   8042a:	6818      	ldr	r0, [r3, #0]
}
   8042c:	4770      	bx	lr
   8042e:	bf00      	nop
   80430:	20070b24 	.word	0x20070b24

00080434 <get_counterB>:
	return counterB;
   80434:	4b01      	ldr	r3, [pc, #4]	; (8043c <get_counterB+0x8>)
   80436:	6818      	ldr	r0, [r3, #0]
}
   80438:	4770      	bx	lr
   8043a:	bf00      	nop
   8043c:	20070b28 	.word	0x20070b28

00080440 <set_counterA>:
	counterA = a;
   80440:	4b01      	ldr	r3, [pc, #4]	; (80448 <set_counterA+0x8>)
   80442:	6018      	str	r0, [r3, #0]
   80444:	4770      	bx	lr
   80446:	bf00      	nop
   80448:	20070b24 	.word	0x20070b24

0008044c <set_counterB>:
	counterB = b;
   8044c:	4b01      	ldr	r3, [pc, #4]	; (80454 <set_counterB+0x8>)
   8044e:	6018      	str	r0, [r3, #0]
   80450:	4770      	bx	lr
   80452:	bf00      	nop
   80454:	20070b28 	.word	0x20070b28

00080458 <pins_init>:
}

void pins_init(void) {
   80458:	b570      	push	{r4, r5, r6, lr}
   8045a:	b082      	sub	sp, #8
	// Enable Clock for PIOB - needed for sampling falling edge
	pmc_enable_periph_clk(ID_PIOA);
   8045c:	200b      	movs	r0, #11
   8045e:	4c29      	ldr	r4, [pc, #164]	; (80504 <pins_init+0xac>)
   80460:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
   80462:	200e      	movs	r0, #14
   80464:	47a0      	blx	r4
	
	pio_set_input(PIOA, PIO_PA15, PIO_PULLUP); 
   80466:	4d28      	ldr	r5, [pc, #160]	; (80508 <pins_init+0xb0>)
   80468:	2201      	movs	r2, #1
   8046a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   8046e:	4628      	mov	r0, r5
   80470:	4e26      	ldr	r6, [pc, #152]	; (8050c <pins_init+0xb4>)
   80472:	47b0      	blx	r6
	pio_set_input(PIOD, PIO_PD0, PIO_PULLUP);
   80474:	4c26      	ldr	r4, [pc, #152]	; (80510 <pins_init+0xb8>)
   80476:	2201      	movs	r2, #1
   80478:	4611      	mov	r1, r2
   8047a:	4620      	mov	r0, r4
   8047c:	47b0      	blx	r6
	
	// Enable Glitch/Debouncing filter
	PIOA->PIO_IFER = PIO_PA15;
   8047e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80482:	622a      	str	r2, [r5, #32]
	PIOD->PIO_IFER = PIO_PD0;
   80484:	2301      	movs	r3, #1
   80486:	6223      	str	r3, [r4, #32]
	
	// Select Debouncing filter
	PIOA->PIO_DIFSR = PIO_PA15;
   80488:	f8c5 2084 	str.w	r2, [r5, #132]	; 0x84
	PIOD->PIO_DIFSR = PIO_PD0;
   8048c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	
	if(getVenster() < 1500){
   80490:	4b20      	ldr	r3, [pc, #128]	; (80514 <pins_init+0xbc>)
   80492:	4798      	blx	r3
   80494:	f240 53db 	movw	r3, #1499	; 0x5db
   80498:	4298      	cmp	r0, r3
   8049a:	dc29      	bgt.n	804f0 <pins_init+0x98>
		pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_FALL_EDGE, pio_interruptA);
   8049c:	4b1e      	ldr	r3, [pc, #120]	; (80518 <pins_init+0xc0>)
   8049e:	9300      	str	r3, [sp, #0]
   804a0:	2350      	movs	r3, #80	; 0x50
   804a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804a6:	210b      	movs	r1, #11
   804a8:	4628      	mov	r0, r5
   804aa:	4c1c      	ldr	r4, [pc, #112]	; (8051c <pins_init+0xc4>)
   804ac:	47a0      	blx	r4
	}
	else{
		pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_RISE_EDGE, pio_interruptA);
	}
	pio_enable_interrupt(PIOA, PIO_PA15);
   804ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   804b2:	4815      	ldr	r0, [pc, #84]	; (80508 <pins_init+0xb0>)
   804b4:	4b1a      	ldr	r3, [pc, #104]	; (80520 <pins_init+0xc8>)
   804b6:	4798      	blx	r3


	if(getHoger() < 1500){
   804b8:	4b1a      	ldr	r3, [pc, #104]	; (80524 <pins_init+0xcc>)
   804ba:	4798      	blx	r3
   804bc:	f240 53db 	movw	r3, #1499	; 0x5db
   804c0:	4298      	cmp	r0, r3
		pio_handler_set(PIOD, ID_PIOD, PIO_PD0, PIO_IT_FALL_EDGE, pio_interruptB);
   804c2:	4b19      	ldr	r3, [pc, #100]	; (80528 <pins_init+0xd0>)
   804c4:	9300      	str	r3, [sp, #0]
   804c6:	bfd4      	ite	le
   804c8:	2350      	movle	r3, #80	; 0x50
	}
	else{
		pio_handler_set(PIOD, ID_PIOD, PIO_PD0, PIO_IT_RISE_EDGE, pio_interruptB);
   804ca:	2370      	movgt	r3, #112	; 0x70
   804cc:	2201      	movs	r2, #1
   804ce:	210e      	movs	r1, #14
   804d0:	480f      	ldr	r0, [pc, #60]	; (80510 <pins_init+0xb8>)
   804d2:	4c12      	ldr	r4, [pc, #72]	; (8051c <pins_init+0xc4>)
   804d4:	47a0      	blx	r4
	}
	
	pio_enable_interrupt(PIOD, PIO_PD0);
   804d6:	2101      	movs	r1, #1
   804d8:	480d      	ldr	r0, [pc, #52]	; (80510 <pins_init+0xb8>)
   804da:	4b11      	ldr	r3, [pc, #68]	; (80520 <pins_init+0xc8>)
   804dc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   804de:	4b13      	ldr	r3, [pc, #76]	; (8052c <pins_init+0xd4>)
   804e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   804e4:	601a      	str	r2, [r3, #0]
   804e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   804ea:	601a      	str	r2, [r3, #0]
	
	// Enable Interrupt Handling in NVIC
	NVIC_EnableIRQ(PIOA_IRQn);
	NVIC_EnableIRQ(PIOD_IRQn);
}
   804ec:	b002      	add	sp, #8
   804ee:	bd70      	pop	{r4, r5, r6, pc}
		pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_RISE_EDGE, pio_interruptA);
   804f0:	4b09      	ldr	r3, [pc, #36]	; (80518 <pins_init+0xc0>)
   804f2:	9300      	str	r3, [sp, #0]
   804f4:	2370      	movs	r3, #112	; 0x70
   804f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   804fa:	210b      	movs	r1, #11
   804fc:	4802      	ldr	r0, [pc, #8]	; (80508 <pins_init+0xb0>)
   804fe:	4c07      	ldr	r4, [pc, #28]	; (8051c <pins_init+0xc4>)
   80500:	47a0      	blx	r4
   80502:	e7d4      	b.n	804ae <pins_init+0x56>
   80504:	00080b8d 	.word	0x00080b8d
   80508:	400e0e00 	.word	0x400e0e00
   8050c:	00080797 	.word	0x00080797
   80510:	400e1400 	.word	0x400e1400
   80514:	00080331 	.word	0x00080331
   80518:	000803f9 	.word	0x000803f9
   8051c:	000809e5 	.word	0x000809e5
   80520:	0008081d 	.word	0x0008081d
   80524:	00080325 	.word	0x00080325
   80528:	00080411 	.word	0x00080411
   8052c:	e000e100 	.word	0xe000e100

00080530 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80530:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80532:	480e      	ldr	r0, [pc, #56]	; (8056c <sysclk_init+0x3c>)
   80534:	4b0e      	ldr	r3, [pc, #56]	; (80570 <sysclk_init+0x40>)
   80536:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80538:	213e      	movs	r1, #62	; 0x3e
   8053a:	2000      	movs	r0, #0
   8053c:	4b0d      	ldr	r3, [pc, #52]	; (80574 <sysclk_init+0x44>)
   8053e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80540:	4c0d      	ldr	r4, [pc, #52]	; (80578 <sysclk_init+0x48>)
   80542:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80544:	2800      	cmp	r0, #0
   80546:	d0fc      	beq.n	80542 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80548:	4b0c      	ldr	r3, [pc, #48]	; (8057c <sysclk_init+0x4c>)
   8054a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8054c:	4a0c      	ldr	r2, [pc, #48]	; (80580 <sysclk_init+0x50>)
   8054e:	4b0d      	ldr	r3, [pc, #52]	; (80584 <sysclk_init+0x54>)
   80550:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80552:	4c0d      	ldr	r4, [pc, #52]	; (80588 <sysclk_init+0x58>)
   80554:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80556:	2800      	cmp	r0, #0
   80558:	d0fc      	beq.n	80554 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8055a:	2010      	movs	r0, #16
   8055c:	4b0b      	ldr	r3, [pc, #44]	; (8058c <sysclk_init+0x5c>)
   8055e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80560:	4b0b      	ldr	r3, [pc, #44]	; (80590 <sysclk_init+0x60>)
   80562:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80564:	4801      	ldr	r0, [pc, #4]	; (8056c <sysclk_init+0x3c>)
   80566:	4b02      	ldr	r3, [pc, #8]	; (80570 <sysclk_init+0x40>)
   80568:	4798      	blx	r3
   8056a:	bd10      	pop	{r4, pc}
   8056c:	0501bd00 	.word	0x0501bd00
   80570:	200700b1 	.word	0x200700b1
   80574:	00080b09 	.word	0x00080b09
   80578:	00080b5d 	.word	0x00080b5d
   8057c:	00080b6d 	.word	0x00080b6d
   80580:	200d3f01 	.word	0x200d3f01
   80584:	400e0600 	.word	0x400e0600
   80588:	00080b7d 	.word	0x00080b7d
   8058c:	00080aa5 	.word	0x00080aa5
   80590:	00080d01 	.word	0x00080d01

00080594 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80594:	2a00      	cmp	r2, #0
   80596:	d051      	beq.n	8063c <usart_serial_read_packet+0xa8>
{
   80598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8059c:	b083      	sub	sp, #12
   8059e:	4605      	mov	r5, r0
   805a0:	460c      	mov	r4, r1
   805a2:	4692      	mov	sl, r2
   805a4:	448a      	add	sl, r1

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   805a6:	4f26      	ldr	r7, [pc, #152]	; (80640 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   805a8:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80654 <usart_serial_read_packet+0xc0>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   805ac:	4e25      	ldr	r6, [pc, #148]	; (80644 <usart_serial_read_packet+0xb0>)
   805ae:	e01d      	b.n	805ec <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   805b0:	4621      	mov	r1, r4
   805b2:	4638      	mov	r0, r7
   805b4:	47c8      	blx	r9
   805b6:	2800      	cmp	r0, #0
   805b8:	d1fa      	bne.n	805b0 <usart_serial_read_packet+0x1c>
   805ba:	e021      	b.n	80600 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   805bc:	469b      	mov	fp, r3
   805be:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80658 <usart_serial_read_packet+0xc4>
   805c2:	a901      	add	r1, sp, #4
   805c4:	4658      	mov	r0, fp
   805c6:	47c0      	blx	r8
   805c8:	2800      	cmp	r0, #0
   805ca:	d1fa      	bne.n	805c2 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   805cc:	9b01      	ldr	r3, [sp, #4]
   805ce:	7023      	strb	r3, [r4, #0]
   805d0:	e019      	b.n	80606 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   805d2:	469b      	mov	fp, r3
   805d4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80658 <usart_serial_read_packet+0xc4>
   805d8:	a901      	add	r1, sp, #4
   805da:	4658      	mov	r0, fp
   805dc:	47c0      	blx	r8
   805de:	2800      	cmp	r0, #0
   805e0:	d1fa      	bne.n	805d8 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   805e2:	9b01      	ldr	r3, [sp, #4]
   805e4:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   805e6:	3401      	adds	r4, #1
	while (len) {
   805e8:	4554      	cmp	r4, sl
   805ea:	d023      	beq.n	80634 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   805ec:	2300      	movs	r3, #0
   805ee:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   805f0:	42bd      	cmp	r5, r7
   805f2:	d0dd      	beq.n	805b0 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   805f4:	4b14      	ldr	r3, [pc, #80]	; (80648 <usart_serial_read_packet+0xb4>)
   805f6:	429d      	cmp	r5, r3
   805f8:	d0e0      	beq.n	805bc <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   805fa:	4b14      	ldr	r3, [pc, #80]	; (8064c <usart_serial_read_packet+0xb8>)
   805fc:	429d      	cmp	r5, r3
   805fe:	d0e8      	beq.n	805d2 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   80600:	4b13      	ldr	r3, [pc, #76]	; (80650 <usart_serial_read_packet+0xbc>)
   80602:	429d      	cmp	r5, r3
   80604:	d00b      	beq.n	8061e <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   80606:	42b5      	cmp	r5, r6
   80608:	d1ed      	bne.n	805e6 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8060a:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80658 <usart_serial_read_packet+0xc4>
   8060e:	a901      	add	r1, sp, #4
   80610:	4630      	mov	r0, r6
   80612:	47c0      	blx	r8
   80614:	2800      	cmp	r0, #0
   80616:	d1fa      	bne.n	8060e <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80618:	9b01      	ldr	r3, [sp, #4]
   8061a:	7023      	strb	r3, [r4, #0]
   8061c:	e7e3      	b.n	805e6 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8061e:	469b      	mov	fp, r3
   80620:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80658 <usart_serial_read_packet+0xc4>
   80624:	a901      	add	r1, sp, #4
   80626:	4658      	mov	r0, fp
   80628:	47c0      	blx	r8
   8062a:	2800      	cmp	r0, #0
   8062c:	d1fa      	bne.n	80624 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   8062e:	9b01      	ldr	r3, [sp, #4]
   80630:	7023      	strb	r3, [r4, #0]
   80632:	e7d8      	b.n	805e6 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   80634:	2000      	movs	r0, #0
   80636:	b003      	add	sp, #12
   80638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8063c:	2000      	movs	r0, #0
   8063e:	4770      	bx	lr
   80640:	400e0800 	.word	0x400e0800
   80644:	400a4000 	.word	0x400a4000
   80648:	40098000 	.word	0x40098000
   8064c:	4009c000 	.word	0x4009c000
   80650:	400a0000 	.word	0x400a0000
   80654:	00080c27 	.word	0x00080c27
   80658:	00080c4d 	.word	0x00080c4d

0008065c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8065c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80660:	b980      	cbnz	r0, 80684 <_read+0x28>
   80662:	460c      	mov	r4, r1
   80664:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   80666:	2a00      	cmp	r2, #0
   80668:	dd0f      	ble.n	8068a <_read+0x2e>
   8066a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8066c:	4e08      	ldr	r6, [pc, #32]	; (80690 <_read+0x34>)
   8066e:	4d09      	ldr	r5, [pc, #36]	; (80694 <_read+0x38>)
   80670:	6830      	ldr	r0, [r6, #0]
   80672:	4621      	mov	r1, r4
   80674:	682b      	ldr	r3, [r5, #0]
   80676:	4798      	blx	r3
		ptr++;
   80678:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8067a:	42bc      	cmp	r4, r7
   8067c:	d1f8      	bne.n	80670 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8067e:	4640      	mov	r0, r8
   80680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80684:	f04f 38ff 	mov.w	r8, #4294967295
   80688:	e7f9      	b.n	8067e <_read+0x22>
	for (; len > 0; --len) {
   8068a:	4680      	mov	r8, r0
   8068c:	e7f7      	b.n	8067e <_read+0x22>
   8068e:	bf00      	nop
   80690:	20070d08 	.word	0x20070d08
   80694:	20070d00 	.word	0x20070d00

00080698 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80698:	3801      	subs	r0, #1
   8069a:	2802      	cmp	r0, #2
   8069c:	d815      	bhi.n	806ca <_write+0x32>
{
   8069e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806a2:	460e      	mov	r6, r1
   806a4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   806a6:	b19a      	cbz	r2, 806d0 <_write+0x38>
   806a8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   806aa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 806e4 <_write+0x4c>
   806ae:	4f0c      	ldr	r7, [pc, #48]	; (806e0 <_write+0x48>)
   806b0:	f8d8 0000 	ldr.w	r0, [r8]
   806b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   806b8:	683b      	ldr	r3, [r7, #0]
   806ba:	4798      	blx	r3
   806bc:	2800      	cmp	r0, #0
   806be:	db0a      	blt.n	806d6 <_write+0x3e>
   806c0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   806c2:	3c01      	subs	r4, #1
   806c4:	d1f4      	bne.n	806b0 <_write+0x18>
   806c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   806ca:	f04f 30ff 	mov.w	r0, #4294967295
   806ce:	4770      	bx	lr
	for (; len != 0; --len) {
   806d0:	4610      	mov	r0, r2
   806d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   806d6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   806da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   806de:	bf00      	nop
   806e0:	20070d04 	.word	0x20070d04
   806e4:	20070d08 	.word	0x20070d08

000806e8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   806e8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   806ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   806ee:	4b12      	ldr	r3, [pc, #72]	; (80738 <board_init+0x50>)
   806f0:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   806f2:	200b      	movs	r0, #11
   806f4:	4c11      	ldr	r4, [pc, #68]	; (8073c <board_init+0x54>)
   806f6:	47a0      	blx	r4
   806f8:	200c      	movs	r0, #12
   806fa:	47a0      	blx	r4
   806fc:	200d      	movs	r0, #13
   806fe:	47a0      	blx	r4
   80700:	200e      	movs	r0, #14
   80702:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80704:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80708:	203b      	movs	r0, #59	; 0x3b
   8070a:	4c0d      	ldr	r4, [pc, #52]	; (80740 <board_init+0x58>)
   8070c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8070e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80712:	2055      	movs	r0, #85	; 0x55
   80714:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80716:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8071a:	2056      	movs	r0, #86	; 0x56
   8071c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8071e:	4909      	ldr	r1, [pc, #36]	; (80744 <board_init+0x5c>)
   80720:	2068      	movs	r0, #104	; 0x68
   80722:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80724:	4908      	ldr	r1, [pc, #32]	; (80748 <board_init+0x60>)
   80726:	205c      	movs	r0, #92	; 0x5c
   80728:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8072a:	4a08      	ldr	r2, [pc, #32]	; (8074c <board_init+0x64>)
   8072c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80730:	4807      	ldr	r0, [pc, #28]	; (80750 <board_init+0x68>)
   80732:	4b08      	ldr	r3, [pc, #32]	; (80754 <board_init+0x6c>)
   80734:	4798      	blx	r3
   80736:	bd10      	pop	{r4, pc}
   80738:	400e1a50 	.word	0x400e1a50
   8073c:	00080b8d 	.word	0x00080b8d
   80740:	00080829 	.word	0x00080829
   80744:	28000079 	.word	0x28000079
   80748:	28000001 	.word	0x28000001
   8074c:	08000001 	.word	0x08000001
   80750:	400e0e00 	.word	0x400e0e00
   80754:	000808f9 	.word	0x000808f9

00080758 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80758:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8075a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8075e:	d016      	beq.n	8078e <pio_set_peripheral+0x36>
   80760:	d80b      	bhi.n	8077a <pio_set_peripheral+0x22>
   80762:	b149      	cbz	r1, 80778 <pio_set_peripheral+0x20>
   80764:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80768:	d105      	bne.n	80776 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8076a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8076c:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8076e:	400b      	ands	r3, r1
   80770:	ea23 0302 	bic.w	r3, r3, r2
   80774:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80776:	6042      	str	r2, [r0, #4]
   80778:	4770      	bx	lr
	switch (ul_type) {
   8077a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8077e:	d0fb      	beq.n	80778 <pio_set_peripheral+0x20>
   80780:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80784:	d0f8      	beq.n	80778 <pio_set_peripheral+0x20>
   80786:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8078a:	d1f4      	bne.n	80776 <pio_set_peripheral+0x1e>
   8078c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8078e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80790:	4313      	orrs	r3, r2
   80792:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80794:	e7ef      	b.n	80776 <pio_set_peripheral+0x1e>

00080796 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80796:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80798:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8079c:	bf14      	ite	ne
   8079e:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   807a0:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   807a2:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   807a6:	bf14      	ite	ne
   807a8:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   807aa:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   807ac:	f012 0f02 	tst.w	r2, #2
   807b0:	d107      	bne.n	807c2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   807b2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   807b6:	bf18      	it	ne
   807b8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   807bc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   807be:	6001      	str	r1, [r0, #0]
   807c0:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   807c2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   807c6:	e7f9      	b.n	807bc <pio_set_input+0x26>

000807c8 <pio_set_output>:
{
   807c8:	b410      	push	{r4}
   807ca:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   807cc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   807ce:	b944      	cbnz	r4, 807e2 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   807d0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   807d2:	b143      	cbz	r3, 807e6 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   807d4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   807d6:	b942      	cbnz	r2, 807ea <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   807d8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   807da:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   807dc:	6001      	str	r1, [r0, #0]
}
   807de:	bc10      	pop	{r4}
   807e0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   807e2:	6641      	str	r1, [r0, #100]	; 0x64
   807e4:	e7f5      	b.n	807d2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   807e6:	6541      	str	r1, [r0, #84]	; 0x54
   807e8:	e7f5      	b.n	807d6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   807ea:	6301      	str	r1, [r0, #48]	; 0x30
   807ec:	e7f5      	b.n	807da <pio_set_output+0x12>

000807ee <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   807ee:	f012 0f10 	tst.w	r2, #16
   807f2:	d010      	beq.n	80816 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   807f4:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   807f8:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   807fc:	bf14      	ite	ne
   807fe:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   80802:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   80806:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   8080a:	bf14      	ite	ne
   8080c:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   80810:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80814:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   80816:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   8081a:	4770      	bx	lr

0008081c <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   8081c:	6401      	str	r1, [r0, #64]	; 0x40
   8081e:	4770      	bx	lr

00080820 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80820:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80822:	4770      	bx	lr

00080824 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80824:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80826:	4770      	bx	lr

00080828 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80828:	b570      	push	{r4, r5, r6, lr}
   8082a:	b082      	sub	sp, #8
   8082c:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8082e:	0943      	lsrs	r3, r0, #5
   80830:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80834:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80838:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8083a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8083e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80842:	d031      	beq.n	808a8 <pio_configure_pin+0x80>
   80844:	d816      	bhi.n	80874 <pio_configure_pin+0x4c>
   80846:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8084a:	d01b      	beq.n	80884 <pio_configure_pin+0x5c>
   8084c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80850:	d116      	bne.n	80880 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80852:	f000 001f 	and.w	r0, r0, #31
   80856:	2601      	movs	r6, #1
   80858:	4086      	lsls	r6, r0
   8085a:	4632      	mov	r2, r6
   8085c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80860:	4620      	mov	r0, r4
   80862:	4b22      	ldr	r3, [pc, #136]	; (808ec <pio_configure_pin+0xc4>)
   80864:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80866:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8086a:	bf14      	ite	ne
   8086c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8086e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80870:	2001      	movs	r0, #1
   80872:	e017      	b.n	808a4 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80874:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80878:	d021      	beq.n	808be <pio_configure_pin+0x96>
   8087a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8087e:	d01e      	beq.n	808be <pio_configure_pin+0x96>
		return 0;
   80880:	2000      	movs	r0, #0
   80882:	e00f      	b.n	808a4 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80884:	f000 001f 	and.w	r0, r0, #31
   80888:	2601      	movs	r6, #1
   8088a:	4086      	lsls	r6, r0
   8088c:	4632      	mov	r2, r6
   8088e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80892:	4620      	mov	r0, r4
   80894:	4b15      	ldr	r3, [pc, #84]	; (808ec <pio_configure_pin+0xc4>)
   80896:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80898:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8089c:	bf14      	ite	ne
   8089e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   808a0:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   808a2:	2001      	movs	r0, #1
}
   808a4:	b002      	add	sp, #8
   808a6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   808a8:	f000 011f 	and.w	r1, r0, #31
   808ac:	2601      	movs	r6, #1
   808ae:	462a      	mov	r2, r5
   808b0:	fa06 f101 	lsl.w	r1, r6, r1
   808b4:	4620      	mov	r0, r4
   808b6:	4b0e      	ldr	r3, [pc, #56]	; (808f0 <pio_configure_pin+0xc8>)
   808b8:	4798      	blx	r3
	return 1;
   808ba:	4630      	mov	r0, r6
		break;
   808bc:	e7f2      	b.n	808a4 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   808be:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   808c2:	f000 011f 	and.w	r1, r0, #31
   808c6:	2601      	movs	r6, #1
   808c8:	ea05 0306 	and.w	r3, r5, r6
   808cc:	9300      	str	r3, [sp, #0]
   808ce:	f3c5 0380 	ubfx	r3, r5, #2, #1
   808d2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   808d6:	bf14      	ite	ne
   808d8:	2200      	movne	r2, #0
   808da:	2201      	moveq	r2, #1
   808dc:	fa06 f101 	lsl.w	r1, r6, r1
   808e0:	4620      	mov	r0, r4
   808e2:	4c04      	ldr	r4, [pc, #16]	; (808f4 <pio_configure_pin+0xcc>)
   808e4:	47a0      	blx	r4
	return 1;
   808e6:	4630      	mov	r0, r6
		break;
   808e8:	e7dc      	b.n	808a4 <pio_configure_pin+0x7c>
   808ea:	bf00      	nop
   808ec:	00080759 	.word	0x00080759
   808f0:	00080797 	.word	0x00080797
   808f4:	000807c9 	.word	0x000807c9

000808f8 <pio_configure_pin_group>:
{
   808f8:	b570      	push	{r4, r5, r6, lr}
   808fa:	b082      	sub	sp, #8
   808fc:	4605      	mov	r5, r0
   808fe:	460e      	mov	r6, r1
   80900:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80902:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80906:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8090a:	d027      	beq.n	8095c <pio_configure_pin_group+0x64>
   8090c:	d811      	bhi.n	80932 <pio_configure_pin_group+0x3a>
   8090e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80912:	d016      	beq.n	80942 <pio_configure_pin_group+0x4a>
   80914:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80918:	d111      	bne.n	8093e <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8091a:	460a      	mov	r2, r1
   8091c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80920:	4b19      	ldr	r3, [pc, #100]	; (80988 <pio_configure_pin_group+0x90>)
   80922:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80924:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80928:	bf14      	ite	ne
   8092a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8092c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8092e:	2001      	movs	r0, #1
   80930:	e012      	b.n	80958 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80932:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80936:	d015      	beq.n	80964 <pio_configure_pin_group+0x6c>
   80938:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8093c:	d012      	beq.n	80964 <pio_configure_pin_group+0x6c>
		return 0;
   8093e:	2000      	movs	r0, #0
   80940:	e00a      	b.n	80958 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80942:	460a      	mov	r2, r1
   80944:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80948:	4b0f      	ldr	r3, [pc, #60]	; (80988 <pio_configure_pin_group+0x90>)
   8094a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8094c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80950:	bf14      	ite	ne
   80952:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80954:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80956:	2001      	movs	r0, #1
}
   80958:	b002      	add	sp, #8
   8095a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   8095c:	4b0b      	ldr	r3, [pc, #44]	; (8098c <pio_configure_pin_group+0x94>)
   8095e:	4798      	blx	r3
	return 1;
   80960:	2001      	movs	r0, #1
		break;
   80962:	e7f9      	b.n	80958 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80964:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80968:	f004 0301 	and.w	r3, r4, #1
   8096c:	9300      	str	r3, [sp, #0]
   8096e:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80972:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80976:	bf14      	ite	ne
   80978:	2200      	movne	r2, #0
   8097a:	2201      	moveq	r2, #1
   8097c:	4631      	mov	r1, r6
   8097e:	4628      	mov	r0, r5
   80980:	4c03      	ldr	r4, [pc, #12]	; (80990 <pio_configure_pin_group+0x98>)
   80982:	47a0      	blx	r4
	return 1;
   80984:	2001      	movs	r0, #1
		break;
   80986:	e7e7      	b.n	80958 <pio_configure_pin_group+0x60>
   80988:	00080759 	.word	0x00080759
   8098c:	00080797 	.word	0x00080797
   80990:	000807c9 	.word	0x000807c9

00080994 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80998:	4604      	mov	r4, r0
   8099a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8099c:	4b0e      	ldr	r3, [pc, #56]	; (809d8 <pio_handler_process+0x44>)
   8099e:	4798      	blx	r3
   809a0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   809a2:	4620      	mov	r0, r4
   809a4:	4b0d      	ldr	r3, [pc, #52]	; (809dc <pio_handler_process+0x48>)
   809a6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   809a8:	4005      	ands	r5, r0
   809aa:	d013      	beq.n	809d4 <pio_handler_process+0x40>
   809ac:	4c0c      	ldr	r4, [pc, #48]	; (809e0 <pio_handler_process+0x4c>)
   809ae:	f104 0660 	add.w	r6, r4, #96	; 0x60
   809b2:	e003      	b.n	809bc <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   809b4:	42b4      	cmp	r4, r6
   809b6:	d00d      	beq.n	809d4 <pio_handler_process+0x40>
   809b8:	3410      	adds	r4, #16
		while (status != 0) {
   809ba:	b15d      	cbz	r5, 809d4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   809bc:	6820      	ldr	r0, [r4, #0]
   809be:	4540      	cmp	r0, r8
   809c0:	d1f8      	bne.n	809b4 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   809c2:	6861      	ldr	r1, [r4, #4]
   809c4:	4229      	tst	r1, r5
   809c6:	d0f5      	beq.n	809b4 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   809c8:	68e3      	ldr	r3, [r4, #12]
   809ca:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   809cc:	6863      	ldr	r3, [r4, #4]
   809ce:	ea25 0503 	bic.w	r5, r5, r3
   809d2:	e7ef      	b.n	809b4 <pio_handler_process+0x20>
   809d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   809d8:	00080821 	.word	0x00080821
   809dc:	00080825 	.word	0x00080825
   809e0:	20070b2c 	.word	0x20070b2c

000809e4 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   809e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   809e6:	4c18      	ldr	r4, [pc, #96]	; (80a48 <pio_handler_set+0x64>)
   809e8:	6826      	ldr	r6, [r4, #0]
   809ea:	2e06      	cmp	r6, #6
   809ec:	d829      	bhi.n	80a42 <pio_handler_set+0x5e>
   809ee:	f04f 0c00 	mov.w	ip, #0
   809f2:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   809f4:	4f15      	ldr	r7, [pc, #84]	; (80a4c <pio_handler_set+0x68>)
   809f6:	e004      	b.n	80a02 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   809f8:	3401      	adds	r4, #1
   809fa:	b2e4      	uxtb	r4, r4
   809fc:	46a4      	mov	ip, r4
   809fe:	42a6      	cmp	r6, r4
   80a00:	d309      	bcc.n	80a16 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80a02:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80a04:	0125      	lsls	r5, r4, #4
   80a06:	597d      	ldr	r5, [r7, r5]
   80a08:	428d      	cmp	r5, r1
   80a0a:	d1f5      	bne.n	809f8 <pio_handler_set+0x14>
   80a0c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   80a10:	686d      	ldr	r5, [r5, #4]
   80a12:	4295      	cmp	r5, r2
   80a14:	d1f0      	bne.n	809f8 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   80a16:	4d0d      	ldr	r5, [pc, #52]	; (80a4c <pio_handler_set+0x68>)
   80a18:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   80a1c:	eb05 040e 	add.w	r4, r5, lr
   80a20:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   80a24:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   80a26:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   80a28:	9906      	ldr	r1, [sp, #24]
   80a2a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   80a2c:	3601      	adds	r6, #1
   80a2e:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   80a30:	bf04      	itt	eq
   80a32:	4905      	ldreq	r1, [pc, #20]	; (80a48 <pio_handler_set+0x64>)
   80a34:	600e      	streq	r6, [r1, #0]
   80a36:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80a38:	461a      	mov	r2, r3
   80a3a:	4b05      	ldr	r3, [pc, #20]	; (80a50 <pio_handler_set+0x6c>)
   80a3c:	4798      	blx	r3

	return 0;
   80a3e:	2000      	movs	r0, #0
   80a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   80a42:	2001      	movs	r0, #1
}
   80a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80a46:	bf00      	nop
   80a48:	20070b9c 	.word	0x20070b9c
   80a4c:	20070b2c 	.word	0x20070b2c
   80a50:	000807ef 	.word	0x000807ef

00080a54 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80a54:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80a56:	210b      	movs	r1, #11
   80a58:	4801      	ldr	r0, [pc, #4]	; (80a60 <PIOA_Handler+0xc>)
   80a5a:	4b02      	ldr	r3, [pc, #8]	; (80a64 <PIOA_Handler+0x10>)
   80a5c:	4798      	blx	r3
   80a5e:	bd08      	pop	{r3, pc}
   80a60:	400e0e00 	.word	0x400e0e00
   80a64:	00080995 	.word	0x00080995

00080a68 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80a68:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80a6a:	210c      	movs	r1, #12
   80a6c:	4801      	ldr	r0, [pc, #4]	; (80a74 <PIOB_Handler+0xc>)
   80a6e:	4b02      	ldr	r3, [pc, #8]	; (80a78 <PIOB_Handler+0x10>)
   80a70:	4798      	blx	r3
   80a72:	bd08      	pop	{r3, pc}
   80a74:	400e1000 	.word	0x400e1000
   80a78:	00080995 	.word	0x00080995

00080a7c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80a7c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80a7e:	210d      	movs	r1, #13
   80a80:	4801      	ldr	r0, [pc, #4]	; (80a88 <PIOC_Handler+0xc>)
   80a82:	4b02      	ldr	r3, [pc, #8]	; (80a8c <PIOC_Handler+0x10>)
   80a84:	4798      	blx	r3
   80a86:	bd08      	pop	{r3, pc}
   80a88:	400e1200 	.word	0x400e1200
   80a8c:	00080995 	.word	0x00080995

00080a90 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80a90:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80a92:	210e      	movs	r1, #14
   80a94:	4801      	ldr	r0, [pc, #4]	; (80a9c <PIOD_Handler+0xc>)
   80a96:	4b02      	ldr	r3, [pc, #8]	; (80aa0 <PIOD_Handler+0x10>)
   80a98:	4798      	blx	r3
   80a9a:	bd08      	pop	{r3, pc}
   80a9c:	400e1400 	.word	0x400e1400
   80aa0:	00080995 	.word	0x00080995

00080aa4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80aa4:	4a17      	ldr	r2, [pc, #92]	; (80b04 <pmc_switch_mck_to_pllack+0x60>)
   80aa6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80aac:	4318      	orrs	r0, r3
   80aae:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ab0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80ab2:	f013 0f08 	tst.w	r3, #8
   80ab6:	d10a      	bne.n	80ace <pmc_switch_mck_to_pllack+0x2a>
   80ab8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80abc:	4911      	ldr	r1, [pc, #68]	; (80b04 <pmc_switch_mck_to_pllack+0x60>)
   80abe:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80ac0:	f012 0f08 	tst.w	r2, #8
   80ac4:	d103      	bne.n	80ace <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ac6:	3b01      	subs	r3, #1
   80ac8:	d1f9      	bne.n	80abe <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80aca:	2001      	movs	r0, #1
   80acc:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80ace:	4a0d      	ldr	r2, [pc, #52]	; (80b04 <pmc_switch_mck_to_pllack+0x60>)
   80ad0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80ad2:	f023 0303 	bic.w	r3, r3, #3
   80ad6:	f043 0302 	orr.w	r3, r3, #2
   80ada:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80adc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80ade:	f013 0f08 	tst.w	r3, #8
   80ae2:	d10a      	bne.n	80afa <pmc_switch_mck_to_pllack+0x56>
   80ae4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80ae8:	4906      	ldr	r1, [pc, #24]	; (80b04 <pmc_switch_mck_to_pllack+0x60>)
   80aea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80aec:	f012 0f08 	tst.w	r2, #8
   80af0:	d105      	bne.n	80afe <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80af2:	3b01      	subs	r3, #1
   80af4:	d1f9      	bne.n	80aea <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80af6:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80af8:	4770      	bx	lr
	return 0;
   80afa:	2000      	movs	r0, #0
   80afc:	4770      	bx	lr
   80afe:	2000      	movs	r0, #0
   80b00:	4770      	bx	lr
   80b02:	bf00      	nop
   80b04:	400e0600 	.word	0x400e0600

00080b08 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80b08:	b9c8      	cbnz	r0, 80b3e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b0a:	4a11      	ldr	r2, [pc, #68]	; (80b50 <pmc_switch_mainck_to_xtal+0x48>)
   80b0c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80b0e:	0209      	lsls	r1, r1, #8
   80b10:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80b12:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80b16:	f023 0303 	bic.w	r3, r3, #3
   80b1a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80b1e:	f043 0301 	orr.w	r3, r3, #1
   80b22:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80b24:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80b26:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80b28:	f013 0f01 	tst.w	r3, #1
   80b2c:	d0fb      	beq.n	80b26 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80b2e:	4a08      	ldr	r2, [pc, #32]	; (80b50 <pmc_switch_mainck_to_xtal+0x48>)
   80b30:	6a13      	ldr	r3, [r2, #32]
   80b32:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80b3a:	6213      	str	r3, [r2, #32]
   80b3c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b3e:	4904      	ldr	r1, [pc, #16]	; (80b50 <pmc_switch_mainck_to_xtal+0x48>)
   80b40:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80b42:	4a04      	ldr	r2, [pc, #16]	; (80b54 <pmc_switch_mainck_to_xtal+0x4c>)
   80b44:	401a      	ands	r2, r3
   80b46:	4b04      	ldr	r3, [pc, #16]	; (80b58 <pmc_switch_mainck_to_xtal+0x50>)
   80b48:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80b4a:	620b      	str	r3, [r1, #32]
   80b4c:	4770      	bx	lr
   80b4e:	bf00      	nop
   80b50:	400e0600 	.word	0x400e0600
   80b54:	fec8fffc 	.word	0xfec8fffc
   80b58:	01370002 	.word	0x01370002

00080b5c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80b5c:	4b02      	ldr	r3, [pc, #8]	; (80b68 <pmc_osc_is_ready_mainck+0xc>)
   80b5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80b60:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80b64:	4770      	bx	lr
   80b66:	bf00      	nop
   80b68:	400e0600 	.word	0x400e0600

00080b6c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80b6c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80b70:	4b01      	ldr	r3, [pc, #4]	; (80b78 <pmc_disable_pllack+0xc>)
   80b72:	629a      	str	r2, [r3, #40]	; 0x28
   80b74:	4770      	bx	lr
   80b76:	bf00      	nop
   80b78:	400e0600 	.word	0x400e0600

00080b7c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80b7c:	4b02      	ldr	r3, [pc, #8]	; (80b88 <pmc_is_locked_pllack+0xc>)
   80b7e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80b80:	f000 0002 	and.w	r0, r0, #2
   80b84:	4770      	bx	lr
   80b86:	bf00      	nop
   80b88:	400e0600 	.word	0x400e0600

00080b8c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80b8c:	282c      	cmp	r0, #44	; 0x2c
   80b8e:	d81e      	bhi.n	80bce <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80b90:	281f      	cmp	r0, #31
   80b92:	d80c      	bhi.n	80bae <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80b94:	4b11      	ldr	r3, [pc, #68]	; (80bdc <pmc_enable_periph_clk+0x50>)
   80b96:	699a      	ldr	r2, [r3, #24]
   80b98:	2301      	movs	r3, #1
   80b9a:	4083      	lsls	r3, r0
   80b9c:	4393      	bics	r3, r2
   80b9e:	d018      	beq.n	80bd2 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80ba0:	2301      	movs	r3, #1
   80ba2:	fa03 f000 	lsl.w	r0, r3, r0
   80ba6:	4b0d      	ldr	r3, [pc, #52]	; (80bdc <pmc_enable_periph_clk+0x50>)
   80ba8:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80baa:	2000      	movs	r0, #0
   80bac:	4770      	bx	lr
		ul_id -= 32;
   80bae:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80bb0:	4b0a      	ldr	r3, [pc, #40]	; (80bdc <pmc_enable_periph_clk+0x50>)
   80bb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80bb6:	2301      	movs	r3, #1
   80bb8:	4083      	lsls	r3, r0
   80bba:	4393      	bics	r3, r2
   80bbc:	d00b      	beq.n	80bd6 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80bbe:	2301      	movs	r3, #1
   80bc0:	fa03 f000 	lsl.w	r0, r3, r0
   80bc4:	4b05      	ldr	r3, [pc, #20]	; (80bdc <pmc_enable_periph_clk+0x50>)
   80bc6:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80bca:	2000      	movs	r0, #0
   80bcc:	4770      	bx	lr
		return 1;
   80bce:	2001      	movs	r0, #1
   80bd0:	4770      	bx	lr
	return 0;
   80bd2:	2000      	movs	r0, #0
   80bd4:	4770      	bx	lr
   80bd6:	2000      	movs	r0, #0
}
   80bd8:	4770      	bx	lr
   80bda:	bf00      	nop
   80bdc:	400e0600 	.word	0x400e0600

00080be0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80be0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80be2:	23ac      	movs	r3, #172	; 0xac
   80be4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80be6:	680b      	ldr	r3, [r1, #0]
   80be8:	684a      	ldr	r2, [r1, #4]
   80bea:	fbb3 f3f2 	udiv	r3, r3, r2
   80bee:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80bf0:	1e5c      	subs	r4, r3, #1
   80bf2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80bf6:	4294      	cmp	r4, r2
   80bf8:	d80b      	bhi.n	80c12 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80bfa:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80bfc:	688b      	ldr	r3, [r1, #8]
   80bfe:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80c00:	f240 2302 	movw	r3, #514	; 0x202
   80c04:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80c08:	2350      	movs	r3, #80	; 0x50
   80c0a:	6003      	str	r3, [r0, #0]

	return 0;
   80c0c:	2000      	movs	r0, #0
}
   80c0e:	bc10      	pop	{r4}
   80c10:	4770      	bx	lr
		return 1;
   80c12:	2001      	movs	r0, #1
   80c14:	e7fb      	b.n	80c0e <uart_init+0x2e>

00080c16 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80c16:	6943      	ldr	r3, [r0, #20]
   80c18:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80c1c:	bf1a      	itte	ne
   80c1e:	61c1      	strne	r1, [r0, #28]
	return 0;
   80c20:	2000      	movne	r0, #0
		return 1;
   80c22:	2001      	moveq	r0, #1
}
   80c24:	4770      	bx	lr

00080c26 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80c26:	6943      	ldr	r3, [r0, #20]
   80c28:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80c2c:	bf1d      	ittte	ne
   80c2e:	6983      	ldrne	r3, [r0, #24]
   80c30:	700b      	strbne	r3, [r1, #0]
	return 0;
   80c32:	2000      	movne	r0, #0
		return 1;
   80c34:	2001      	moveq	r0, #1
}
   80c36:	4770      	bx	lr

00080c38 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80c38:	6943      	ldr	r3, [r0, #20]
   80c3a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80c3e:	bf1d      	ittte	ne
   80c40:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80c44:	61c1      	strne	r1, [r0, #28]
	return 0;
   80c46:	2000      	movne	r0, #0
		return 1;
   80c48:	2001      	moveq	r0, #1
}
   80c4a:	4770      	bx	lr

00080c4c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80c4c:	6943      	ldr	r3, [r0, #20]
   80c4e:	f013 0f01 	tst.w	r3, #1
   80c52:	d005      	beq.n	80c60 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80c54:	6983      	ldr	r3, [r0, #24]
   80c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80c5a:	600b      	str	r3, [r1, #0]

	return 0;
   80c5c:	2000      	movs	r0, #0
   80c5e:	4770      	bx	lr
		return 1;
   80c60:	2001      	movs	r0, #1
}
   80c62:	4770      	bx	lr

00080c64 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80c64:	e7fe      	b.n	80c64 <Dummy_Handler>
	...

00080c68 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80c68:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80c6a:	4b1c      	ldr	r3, [pc, #112]	; (80cdc <Reset_Handler+0x74>)
   80c6c:	4a1c      	ldr	r2, [pc, #112]	; (80ce0 <Reset_Handler+0x78>)
   80c6e:	429a      	cmp	r2, r3
   80c70:	d010      	beq.n	80c94 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80c72:	4b1c      	ldr	r3, [pc, #112]	; (80ce4 <Reset_Handler+0x7c>)
   80c74:	4a19      	ldr	r2, [pc, #100]	; (80cdc <Reset_Handler+0x74>)
   80c76:	429a      	cmp	r2, r3
   80c78:	d20c      	bcs.n	80c94 <Reset_Handler+0x2c>
   80c7a:	3b01      	subs	r3, #1
   80c7c:	1a9b      	subs	r3, r3, r2
   80c7e:	f023 0303 	bic.w	r3, r3, #3
   80c82:	3304      	adds	r3, #4
   80c84:	4413      	add	r3, r2
   80c86:	4916      	ldr	r1, [pc, #88]	; (80ce0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80c88:	f851 0b04 	ldr.w	r0, [r1], #4
   80c8c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80c90:	429a      	cmp	r2, r3
   80c92:	d1f9      	bne.n	80c88 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80c94:	4b14      	ldr	r3, [pc, #80]	; (80ce8 <Reset_Handler+0x80>)
   80c96:	4a15      	ldr	r2, [pc, #84]	; (80cec <Reset_Handler+0x84>)
   80c98:	429a      	cmp	r2, r3
   80c9a:	d20a      	bcs.n	80cb2 <Reset_Handler+0x4a>
   80c9c:	3b01      	subs	r3, #1
   80c9e:	1a9b      	subs	r3, r3, r2
   80ca0:	f023 0303 	bic.w	r3, r3, #3
   80ca4:	3304      	adds	r3, #4
   80ca6:	4413      	add	r3, r2
		*pDest++ = 0;
   80ca8:	2100      	movs	r1, #0
   80caa:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80cae:	4293      	cmp	r3, r2
   80cb0:	d1fb      	bne.n	80caa <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80cb2:	4b0f      	ldr	r3, [pc, #60]	; (80cf0 <Reset_Handler+0x88>)
   80cb4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80cb8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80cbc:	490d      	ldr	r1, [pc, #52]	; (80cf4 <Reset_Handler+0x8c>)
   80cbe:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80cc0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80cc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80cc8:	d203      	bcs.n	80cd2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80cca:	688b      	ldr	r3, [r1, #8]
   80ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80cd0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80cd2:	4b09      	ldr	r3, [pc, #36]	; (80cf8 <Reset_Handler+0x90>)
   80cd4:	4798      	blx	r3

	/* Branch to main function */
	main();
   80cd6:	4b09      	ldr	r3, [pc, #36]	; (80cfc <Reset_Handler+0x94>)
   80cd8:	4798      	blx	r3
   80cda:	e7fe      	b.n	80cda <Reset_Handler+0x72>
   80cdc:	20070000 	.word	0x20070000
   80ce0:	000850c8 	.word	0x000850c8
   80ce4:	20070b00 	.word	0x20070b00
   80ce8:	20070d34 	.word	0x20070d34
   80cec:	20070b00 	.word	0x20070b00
   80cf0:	00080000 	.word	0x00080000
   80cf4:	e000ed00 	.word	0xe000ed00
   80cf8:	00082349 	.word	0x00082349
   80cfc:	000812bd 	.word	0x000812bd

00080d00 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80d00:	4b3d      	ldr	r3, [pc, #244]	; (80df8 <SystemCoreClockUpdate+0xf8>)
   80d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d04:	f003 0303 	and.w	r3, r3, #3
   80d08:	2b03      	cmp	r3, #3
   80d0a:	d80e      	bhi.n	80d2a <SystemCoreClockUpdate+0x2a>
   80d0c:	e8df f003 	tbb	[pc, r3]
   80d10:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80d14:	4b39      	ldr	r3, [pc, #228]	; (80dfc <SystemCoreClockUpdate+0xfc>)
   80d16:	695b      	ldr	r3, [r3, #20]
   80d18:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80d1c:	bf14      	ite	ne
   80d1e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80d22:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80d26:	4b36      	ldr	r3, [pc, #216]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80d28:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80d2a:	4b33      	ldr	r3, [pc, #204]	; (80df8 <SystemCoreClockUpdate+0xf8>)
   80d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d32:	2b70      	cmp	r3, #112	; 0x70
   80d34:	d057      	beq.n	80de6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80d36:	4b30      	ldr	r3, [pc, #192]	; (80df8 <SystemCoreClockUpdate+0xf8>)
   80d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80d3a:	4931      	ldr	r1, [pc, #196]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80d3c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80d40:	680b      	ldr	r3, [r1, #0]
   80d42:	40d3      	lsrs	r3, r2
   80d44:	600b      	str	r3, [r1, #0]
   80d46:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d48:	4b2b      	ldr	r3, [pc, #172]	; (80df8 <SystemCoreClockUpdate+0xf8>)
   80d4a:	6a1b      	ldr	r3, [r3, #32]
   80d4c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d50:	d003      	beq.n	80d5a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d52:	4a2c      	ldr	r2, [pc, #176]	; (80e04 <SystemCoreClockUpdate+0x104>)
   80d54:	4b2a      	ldr	r3, [pc, #168]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80d56:	601a      	str	r2, [r3, #0]
   80d58:	e7e7      	b.n	80d2a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80d5a:	4a2b      	ldr	r2, [pc, #172]	; (80e08 <SystemCoreClockUpdate+0x108>)
   80d5c:	4b28      	ldr	r3, [pc, #160]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80d5e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80d60:	4b25      	ldr	r3, [pc, #148]	; (80df8 <SystemCoreClockUpdate+0xf8>)
   80d62:	6a1b      	ldr	r3, [r3, #32]
   80d64:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80d68:	2b10      	cmp	r3, #16
   80d6a:	d005      	beq.n	80d78 <SystemCoreClockUpdate+0x78>
   80d6c:	2b20      	cmp	r3, #32
   80d6e:	d1dc      	bne.n	80d2a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80d70:	4a24      	ldr	r2, [pc, #144]	; (80e04 <SystemCoreClockUpdate+0x104>)
   80d72:	4b23      	ldr	r3, [pc, #140]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80d74:	601a      	str	r2, [r3, #0]
				break;
   80d76:	e7d8      	b.n	80d2a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80d78:	4a24      	ldr	r2, [pc, #144]	; (80e0c <SystemCoreClockUpdate+0x10c>)
   80d7a:	4b21      	ldr	r3, [pc, #132]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80d7c:	601a      	str	r2, [r3, #0]
				break;
   80d7e:	e7d4      	b.n	80d2a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80d80:	4b1d      	ldr	r3, [pc, #116]	; (80df8 <SystemCoreClockUpdate+0xf8>)
   80d82:	6a1b      	ldr	r3, [r3, #32]
   80d84:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80d88:	d00c      	beq.n	80da4 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80d8a:	4a1e      	ldr	r2, [pc, #120]	; (80e04 <SystemCoreClockUpdate+0x104>)
   80d8c:	4b1c      	ldr	r3, [pc, #112]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80d8e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80d90:	4b19      	ldr	r3, [pc, #100]	; (80df8 <SystemCoreClockUpdate+0xf8>)
   80d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80d94:	f003 0303 	and.w	r3, r3, #3
   80d98:	2b02      	cmp	r3, #2
   80d9a:	d016      	beq.n	80dca <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80d9c:	4a1c      	ldr	r2, [pc, #112]	; (80e10 <SystemCoreClockUpdate+0x110>)
   80d9e:	4b18      	ldr	r3, [pc, #96]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80da0:	601a      	str	r2, [r3, #0]
   80da2:	e7c2      	b.n	80d2a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80da4:	4a18      	ldr	r2, [pc, #96]	; (80e08 <SystemCoreClockUpdate+0x108>)
   80da6:	4b16      	ldr	r3, [pc, #88]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80da8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80daa:	4b13      	ldr	r3, [pc, #76]	; (80df8 <SystemCoreClockUpdate+0xf8>)
   80dac:	6a1b      	ldr	r3, [r3, #32]
   80dae:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80db2:	2b10      	cmp	r3, #16
   80db4:	d005      	beq.n	80dc2 <SystemCoreClockUpdate+0xc2>
   80db6:	2b20      	cmp	r3, #32
   80db8:	d1ea      	bne.n	80d90 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80dba:	4a12      	ldr	r2, [pc, #72]	; (80e04 <SystemCoreClockUpdate+0x104>)
   80dbc:	4b10      	ldr	r3, [pc, #64]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80dbe:	601a      	str	r2, [r3, #0]
				break;
   80dc0:	e7e6      	b.n	80d90 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80dc2:	4a12      	ldr	r2, [pc, #72]	; (80e0c <SystemCoreClockUpdate+0x10c>)
   80dc4:	4b0e      	ldr	r3, [pc, #56]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80dc6:	601a      	str	r2, [r3, #0]
				break;
   80dc8:	e7e2      	b.n	80d90 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dca:	4a0b      	ldr	r2, [pc, #44]	; (80df8 <SystemCoreClockUpdate+0xf8>)
   80dcc:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80dce:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80dd0:	480b      	ldr	r0, [pc, #44]	; (80e00 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80dd2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80dd6:	6803      	ldr	r3, [r0, #0]
   80dd8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80ddc:	b2d2      	uxtb	r2, r2
   80dde:	fbb3 f3f2 	udiv	r3, r3, r2
   80de2:	6003      	str	r3, [r0, #0]
   80de4:	e7a1      	b.n	80d2a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80de6:	4a06      	ldr	r2, [pc, #24]	; (80e00 <SystemCoreClockUpdate+0x100>)
   80de8:	6813      	ldr	r3, [r2, #0]
   80dea:	490a      	ldr	r1, [pc, #40]	; (80e14 <SystemCoreClockUpdate+0x114>)
   80dec:	fba1 1303 	umull	r1, r3, r1, r3
   80df0:	085b      	lsrs	r3, r3, #1
   80df2:	6013      	str	r3, [r2, #0]
   80df4:	4770      	bx	lr
   80df6:	bf00      	nop
   80df8:	400e0600 	.word	0x400e0600
   80dfc:	400e1a10 	.word	0x400e1a10
   80e00:	20070148 	.word	0x20070148
   80e04:	00b71b00 	.word	0x00b71b00
   80e08:	003d0900 	.word	0x003d0900
   80e0c:	007a1200 	.word	0x007a1200
   80e10:	0e4e1c00 	.word	0x0e4e1c00
   80e14:	aaaaaaab 	.word	0xaaaaaaab

00080e18 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80e18:	4b0a      	ldr	r3, [pc, #40]	; (80e44 <_sbrk+0x2c>)
   80e1a:	681b      	ldr	r3, [r3, #0]
   80e1c:	b153      	cbz	r3, 80e34 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80e1e:	4b09      	ldr	r3, [pc, #36]	; (80e44 <_sbrk+0x2c>)
   80e20:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80e22:	181a      	adds	r2, r3, r0
   80e24:	4908      	ldr	r1, [pc, #32]	; (80e48 <_sbrk+0x30>)
   80e26:	4291      	cmp	r1, r2
   80e28:	db08      	blt.n	80e3c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80e2a:	4610      	mov	r0, r2
   80e2c:	4a05      	ldr	r2, [pc, #20]	; (80e44 <_sbrk+0x2c>)
   80e2e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80e30:	4618      	mov	r0, r3
   80e32:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80e34:	4a05      	ldr	r2, [pc, #20]	; (80e4c <_sbrk+0x34>)
   80e36:	4b03      	ldr	r3, [pc, #12]	; (80e44 <_sbrk+0x2c>)
   80e38:	601a      	str	r2, [r3, #0]
   80e3a:	e7f0      	b.n	80e1e <_sbrk+0x6>
		return (caddr_t) -1;	
   80e3c:	f04f 30ff 	mov.w	r0, #4294967295
}
   80e40:	4770      	bx	lr
   80e42:	bf00      	nop
   80e44:	20070ba0 	.word	0x20070ba0
   80e48:	20087ffc 	.word	0x20087ffc
   80e4c:	20072d38 	.word	0x20072d38

00080e50 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80e50:	f04f 30ff 	mov.w	r0, #4294967295
   80e54:	4770      	bx	lr

00080e56 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80e56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80e5a:	604b      	str	r3, [r1, #4]

	return 0;
}
   80e5c:	2000      	movs	r0, #0
   80e5e:	4770      	bx	lr

00080e60 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80e60:	2001      	movs	r0, #1
   80e62:	4770      	bx	lr

00080e64 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80e64:	2000      	movs	r0, #0
   80e66:	4770      	bx	lr

00080e68 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80e68:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80e6a:	685a      	ldr	r2, [r3, #4]
   80e6c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80e6e:	6842      	ldr	r2, [r0, #4]
   80e70:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80e72:	685a      	ldr	r2, [r3, #4]
   80e74:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80e76:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80e78:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80e7a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80e7c:	6803      	ldr	r3, [r0, #0]
   80e7e:	3301      	adds	r3, #1
   80e80:	6003      	str	r3, [r0, #0]
   80e82:	4770      	bx	lr

00080e84 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80e84:	6843      	ldr	r3, [r0, #4]
   80e86:	6882      	ldr	r2, [r0, #8]
   80e88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80e8a:	6883      	ldr	r3, [r0, #8]
   80e8c:	6842      	ldr	r2, [r0, #4]
   80e8e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80e90:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80e92:	685a      	ldr	r2, [r3, #4]
   80e94:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80e96:	bf04      	itt	eq
   80e98:	6882      	ldreq	r2, [r0, #8]
   80e9a:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80e9c:	2200      	movs	r2, #0
   80e9e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80ea0:	681a      	ldr	r2, [r3, #0]
   80ea2:	3a01      	subs	r2, #1
   80ea4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80ea6:	6818      	ldr	r0, [r3, #0]
}
   80ea8:	4770      	bx	lr
	...

00080eac <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80eac:	4b06      	ldr	r3, [pc, #24]	; (80ec8 <pxCurrentTCBConst2>)
   80eae:	6819      	ldr	r1, [r3, #0]
   80eb0:	6808      	ldr	r0, [r1, #0]
   80eb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80eb6:	f380 8809 	msr	PSP, r0
   80eba:	f04f 0000 	mov.w	r0, #0
   80ebe:	f380 8811 	msr	BASEPRI, r0
   80ec2:	f04e 0e0d 	orr.w	lr, lr, #13
   80ec6:	4770      	bx	lr

00080ec8 <pxCurrentTCBConst2>:
   80ec8:	20070ba4 	.word	0x20070ba4

00080ecc <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80ecc:	f3ef 8011 	mrs	r0, BASEPRI
   80ed0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80ed4:	f381 8811 	msr	BASEPRI, r1
   80ed8:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80eda:	2000      	movs	r0, #0

00080edc <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80edc:	f380 8811 	msr	BASEPRI, r0
   80ee0:	4770      	bx	lr
	...

00080ee4 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80ee4:	f3ef 8009 	mrs	r0, PSP
   80ee8:	4b0c      	ldr	r3, [pc, #48]	; (80f1c <pxCurrentTCBConst>)
   80eea:	681a      	ldr	r2, [r3, #0]
   80eec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80ef0:	6010      	str	r0, [r2, #0]
   80ef2:	e92d 4008 	stmdb	sp!, {r3, lr}
   80ef6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80efa:	f380 8811 	msr	BASEPRI, r0
   80efe:	f000 f8b9 	bl	81074 <vTaskSwitchContext>
   80f02:	f04f 0000 	mov.w	r0, #0
   80f06:	f380 8811 	msr	BASEPRI, r0
   80f0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80f0e:	6819      	ldr	r1, [r3, #0]
   80f10:	6808      	ldr	r0, [r1, #0]
   80f12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80f16:	f380 8809 	msr	PSP, r0
   80f1a:	4770      	bx	lr

00080f1c <pxCurrentTCBConst>:
   80f1c:	20070ba4 	.word	0x20070ba4

00080f20 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80f20:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80f26:	4b05      	ldr	r3, [pc, #20]	; (80f3c <SysTick_Handler+0x1c>)
   80f28:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80f2a:	4b05      	ldr	r3, [pc, #20]	; (80f40 <SysTick_Handler+0x20>)
   80f2c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80f2e:	4b05      	ldr	r3, [pc, #20]	; (80f44 <SysTick_Handler+0x24>)
   80f30:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80f32:	2000      	movs	r0, #0
   80f34:	4b04      	ldr	r3, [pc, #16]	; (80f48 <SysTick_Handler+0x28>)
   80f36:	4798      	blx	r3
   80f38:	bd08      	pop	{r3, pc}
   80f3a:	bf00      	nop
   80f3c:	e000ed04 	.word	0xe000ed04
   80f40:	00080ecd 	.word	0x00080ecd
   80f44:	00080f4d 	.word	0x00080f4d
   80f48:	00080edd 	.word	0x00080edd

00080f4c <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80f4c:	4b3d      	ldr	r3, [pc, #244]	; (81044 <vTaskIncrementTick+0xf8>)
   80f4e:	681b      	ldr	r3, [r3, #0]
   80f50:	2b00      	cmp	r3, #0
   80f52:	d16f      	bne.n	81034 <vTaskIncrementTick+0xe8>
{
   80f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   80f58:	4b3b      	ldr	r3, [pc, #236]	; (81048 <vTaskIncrementTick+0xfc>)
   80f5a:	681a      	ldr	r2, [r3, #0]
   80f5c:	3201      	adds	r2, #1
   80f5e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80f60:	681b      	ldr	r3, [r3, #0]
   80f62:	b9ab      	cbnz	r3, 80f90 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80f64:	4b39      	ldr	r3, [pc, #228]	; (8104c <vTaskIncrementTick+0x100>)
   80f66:	681b      	ldr	r3, [r3, #0]
   80f68:	681b      	ldr	r3, [r3, #0]
   80f6a:	2b00      	cmp	r3, #0
   80f6c:	d128      	bne.n	80fc0 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   80f6e:	4b37      	ldr	r3, [pc, #220]	; (8104c <vTaskIncrementTick+0x100>)
   80f70:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80f72:	4a37      	ldr	r2, [pc, #220]	; (81050 <vTaskIncrementTick+0x104>)
   80f74:	6810      	ldr	r0, [r2, #0]
   80f76:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80f78:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80f7a:	4936      	ldr	r1, [pc, #216]	; (81054 <vTaskIncrementTick+0x108>)
   80f7c:	680a      	ldr	r2, [r1, #0]
   80f7e:	3201      	adds	r2, #1
   80f80:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80f82:	681b      	ldr	r3, [r3, #0]
   80f84:	681b      	ldr	r3, [r3, #0]
   80f86:	b9fb      	cbnz	r3, 80fc8 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80f88:	f04f 32ff 	mov.w	r2, #4294967295
   80f8c:	4b32      	ldr	r3, [pc, #200]	; (81058 <vTaskIncrementTick+0x10c>)
   80f8e:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80f90:	4b2d      	ldr	r3, [pc, #180]	; (81048 <vTaskIncrementTick+0xfc>)
   80f92:	681a      	ldr	r2, [r3, #0]
   80f94:	4b30      	ldr	r3, [pc, #192]	; (81058 <vTaskIncrementTick+0x10c>)
   80f96:	681b      	ldr	r3, [r3, #0]
   80f98:	429a      	cmp	r2, r3
   80f9a:	d350      	bcc.n	8103e <vTaskIncrementTick+0xf2>
   80f9c:	4b2b      	ldr	r3, [pc, #172]	; (8104c <vTaskIncrementTick+0x100>)
   80f9e:	681b      	ldr	r3, [r3, #0]
   80fa0:	681b      	ldr	r3, [r3, #0]
   80fa2:	b1cb      	cbz	r3, 80fd8 <vTaskIncrementTick+0x8c>
   80fa4:	4b29      	ldr	r3, [pc, #164]	; (8104c <vTaskIncrementTick+0x100>)
   80fa6:	681b      	ldr	r3, [r3, #0]
   80fa8:	68db      	ldr	r3, [r3, #12]
   80faa:	68dc      	ldr	r4, [r3, #12]
   80fac:	6863      	ldr	r3, [r4, #4]
   80fae:	4a26      	ldr	r2, [pc, #152]	; (81048 <vTaskIncrementTick+0xfc>)
   80fb0:	6812      	ldr	r2, [r2, #0]
   80fb2:	4293      	cmp	r3, r2
   80fb4:	d816      	bhi.n	80fe4 <vTaskIncrementTick+0x98>
   80fb6:	4e29      	ldr	r6, [pc, #164]	; (8105c <vTaskIncrementTick+0x110>)
   80fb8:	4f29      	ldr	r7, [pc, #164]	; (81060 <vTaskIncrementTick+0x114>)
   80fba:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 81070 <vTaskIncrementTick+0x124>
   80fbe:	e02f      	b.n	81020 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80fc0:	4b28      	ldr	r3, [pc, #160]	; (81064 <vTaskIncrementTick+0x118>)
   80fc2:	4798      	blx	r3
   80fc4:	bf00      	nop
   80fc6:	e7fd      	b.n	80fc4 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80fc8:	4b20      	ldr	r3, [pc, #128]	; (8104c <vTaskIncrementTick+0x100>)
   80fca:	681b      	ldr	r3, [r3, #0]
   80fcc:	68db      	ldr	r3, [r3, #12]
   80fce:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80fd0:	685a      	ldr	r2, [r3, #4]
   80fd2:	4b21      	ldr	r3, [pc, #132]	; (81058 <vTaskIncrementTick+0x10c>)
   80fd4:	601a      	str	r2, [r3, #0]
   80fd6:	e7db      	b.n	80f90 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   80fd8:	f04f 32ff 	mov.w	r2, #4294967295
   80fdc:	4b1e      	ldr	r3, [pc, #120]	; (81058 <vTaskIncrementTick+0x10c>)
   80fde:	601a      	str	r2, [r3, #0]
   80fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80fe4:	4a1c      	ldr	r2, [pc, #112]	; (81058 <vTaskIncrementTick+0x10c>)
   80fe6:	6013      	str	r3, [r2, #0]
   80fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80fec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80fee:	683b      	ldr	r3, [r7, #0]
   80ff0:	4298      	cmp	r0, r3
   80ff2:	bf88      	it	hi
   80ff4:	6038      	strhi	r0, [r7, #0]
   80ff6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80ffa:	4629      	mov	r1, r5
   80ffc:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81000:	4b19      	ldr	r3, [pc, #100]	; (81068 <vTaskIncrementTick+0x11c>)
   81002:	4798      	blx	r3
   81004:	4b11      	ldr	r3, [pc, #68]	; (8104c <vTaskIncrementTick+0x100>)
   81006:	681b      	ldr	r3, [r3, #0]
   81008:	681b      	ldr	r3, [r3, #0]
   8100a:	2b00      	cmp	r3, #0
   8100c:	d0e4      	beq.n	80fd8 <vTaskIncrementTick+0x8c>
   8100e:	4b0f      	ldr	r3, [pc, #60]	; (8104c <vTaskIncrementTick+0x100>)
   81010:	681b      	ldr	r3, [r3, #0]
   81012:	68db      	ldr	r3, [r3, #12]
   81014:	68dc      	ldr	r4, [r3, #12]
   81016:	6863      	ldr	r3, [r4, #4]
   81018:	4a0b      	ldr	r2, [pc, #44]	; (81048 <vTaskIncrementTick+0xfc>)
   8101a:	6812      	ldr	r2, [r2, #0]
   8101c:	4293      	cmp	r3, r2
   8101e:	d8e1      	bhi.n	80fe4 <vTaskIncrementTick+0x98>
   81020:	1d25      	adds	r5, r4, #4
   81022:	4628      	mov	r0, r5
   81024:	47b0      	blx	r6
   81026:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81028:	2b00      	cmp	r3, #0
   8102a:	d0df      	beq.n	80fec <vTaskIncrementTick+0xa0>
   8102c:	f104 0018 	add.w	r0, r4, #24
   81030:	47b0      	blx	r6
   81032:	e7db      	b.n	80fec <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   81034:	4a0d      	ldr	r2, [pc, #52]	; (8106c <vTaskIncrementTick+0x120>)
   81036:	6813      	ldr	r3, [r2, #0]
   81038:	3301      	adds	r3, #1
   8103a:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   8103c:	4770      	bx	lr
   8103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81042:	bf00      	nop
   81044:	20070c18 	.word	0x20070c18
   81048:	20070c28 	.word	0x20070c28
   8104c:	20070ba8 	.word	0x20070ba8
   81050:	20070bac 	.word	0x20070bac
   81054:	20070c24 	.word	0x20070c24
   81058:	2007014c 	.word	0x2007014c
   8105c:	00080e85 	.word	0x00080e85
   81060:	20070c1c 	.word	0x20070c1c
   81064:	00080ecd 	.word	0x00080ecd
   81068:	00080e69 	.word	0x00080e69
   8106c:	20070c14 	.word	0x20070c14
   81070:	20070bb0 	.word	0x20070bb0

00081074 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81074:	4b21      	ldr	r3, [pc, #132]	; (810fc <vTaskSwitchContext+0x88>)
   81076:	681b      	ldr	r3, [r3, #0]
   81078:	b9eb      	cbnz	r3, 810b6 <vTaskSwitchContext+0x42>
{
   8107a:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8107c:	4b20      	ldr	r3, [pc, #128]	; (81100 <vTaskSwitchContext+0x8c>)
   8107e:	681b      	ldr	r3, [r3, #0]
   81080:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81084:	009b      	lsls	r3, r3, #2
   81086:	4a1f      	ldr	r2, [pc, #124]	; (81104 <vTaskSwitchContext+0x90>)
   81088:	58d3      	ldr	r3, [r2, r3]
   8108a:	b9c3      	cbnz	r3, 810be <vTaskSwitchContext+0x4a>
   8108c:	4b1c      	ldr	r3, [pc, #112]	; (81100 <vTaskSwitchContext+0x8c>)
   8108e:	681b      	ldr	r3, [r3, #0]
   81090:	b16b      	cbz	r3, 810ae <vTaskSwitchContext+0x3a>
   81092:	4a1b      	ldr	r2, [pc, #108]	; (81100 <vTaskSwitchContext+0x8c>)
   81094:	491b      	ldr	r1, [pc, #108]	; (81104 <vTaskSwitchContext+0x90>)
   81096:	6813      	ldr	r3, [r2, #0]
   81098:	3b01      	subs	r3, #1
   8109a:	6013      	str	r3, [r2, #0]
   8109c:	6813      	ldr	r3, [r2, #0]
   8109e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   810a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   810a6:	b953      	cbnz	r3, 810be <vTaskSwitchContext+0x4a>
   810a8:	6813      	ldr	r3, [r2, #0]
   810aa:	2b00      	cmp	r3, #0
   810ac:	d1f3      	bne.n	81096 <vTaskSwitchContext+0x22>
   810ae:	4b16      	ldr	r3, [pc, #88]	; (81108 <vTaskSwitchContext+0x94>)
   810b0:	4798      	blx	r3
   810b2:	bf00      	nop
   810b4:	e7fd      	b.n	810b2 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   810b6:	2201      	movs	r2, #1
   810b8:	4b14      	ldr	r3, [pc, #80]	; (8110c <vTaskSwitchContext+0x98>)
   810ba:	601a      	str	r2, [r3, #0]
   810bc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   810be:	4b10      	ldr	r3, [pc, #64]	; (81100 <vTaskSwitchContext+0x8c>)
   810c0:	681b      	ldr	r3, [r3, #0]
   810c2:	4a10      	ldr	r2, [pc, #64]	; (81104 <vTaskSwitchContext+0x90>)
   810c4:	0099      	lsls	r1, r3, #2
   810c6:	18c8      	adds	r0, r1, r3
   810c8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   810cc:	6844      	ldr	r4, [r0, #4]
   810ce:	6864      	ldr	r4, [r4, #4]
   810d0:	6044      	str	r4, [r0, #4]
   810d2:	4419      	add	r1, r3
   810d4:	4602      	mov	r2, r0
   810d6:	3208      	adds	r2, #8
   810d8:	4294      	cmp	r4, r2
   810da:	d009      	beq.n	810f0 <vTaskSwitchContext+0x7c>
   810dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   810e0:	4a08      	ldr	r2, [pc, #32]	; (81104 <vTaskSwitchContext+0x90>)
   810e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   810e6:	685b      	ldr	r3, [r3, #4]
   810e8:	68da      	ldr	r2, [r3, #12]
   810ea:	4b09      	ldr	r3, [pc, #36]	; (81110 <vTaskSwitchContext+0x9c>)
   810ec:	601a      	str	r2, [r3, #0]
   810ee:	bd10      	pop	{r4, pc}
   810f0:	6860      	ldr	r0, [r4, #4]
   810f2:	4a04      	ldr	r2, [pc, #16]	; (81104 <vTaskSwitchContext+0x90>)
   810f4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   810f8:	6050      	str	r0, [r2, #4]
   810fa:	e7ef      	b.n	810dc <vTaskSwitchContext+0x68>
   810fc:	20070c18 	.word	0x20070c18
   81100:	20070c1c 	.word	0x20070c1c
   81104:	20070bb0 	.word	0x20070bb0
   81108:	00080ecd 	.word	0x00080ecd
   8110c:	20070c20 	.word	0x20070c20
   81110:	20070ba4 	.word	0x20070ba4

00081114 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   81114:	b500      	push	{lr}
   81116:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   81118:	2201      	movs	r2, #1
   8111a:	f10d 0107 	add.w	r1, sp, #7
   8111e:	4810      	ldr	r0, [pc, #64]	; (81160 <USART0_Handler+0x4c>)
   81120:	4b10      	ldr	r3, [pc, #64]	; (81164 <USART0_Handler+0x50>)
   81122:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81124:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   81126:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8112a:	2200      	movs	r2, #0
   8112c:	4b0e      	ldr	r3, [pc, #56]	; (81168 <USART0_Handler+0x54>)
   8112e:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   81130:	4b0e      	ldr	r3, [pc, #56]	; (8116c <USART0_Handler+0x58>)
   81132:	781b      	ldrb	r3, [r3, #0]
   81134:	f89d 1007 	ldrb.w	r1, [sp, #7]
   81138:	4a0d      	ldr	r2, [pc, #52]	; (81170 <USART0_Handler+0x5c>)
   8113a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   8113c:	2b9b      	cmp	r3, #155	; 0x9b
   8113e:	d00b      	beq.n	81158 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   81140:	3301      	adds	r3, #1
   81142:	4a0a      	ldr	r2, [pc, #40]	; (8116c <USART0_Handler+0x58>)
   81144:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   81146:	2201      	movs	r2, #1
   81148:	4b07      	ldr	r3, [pc, #28]	; (81168 <USART0_Handler+0x54>)
   8114a:	701a      	strb	r2, [r3, #0]
   8114c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81150:	b662      	cpsie	i
}
   81152:	b003      	add	sp, #12
   81154:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   81158:	2200      	movs	r2, #0
   8115a:	4b04      	ldr	r3, [pc, #16]	; (8116c <USART0_Handler+0x58>)
   8115c:	701a      	strb	r2, [r3, #0]
   8115e:	e7f2      	b.n	81146 <USART0_Handler+0x32>
   81160:	40098000 	.word	0x40098000
   81164:	00080595 	.word	0x00080595
   81168:	20070144 	.word	0x20070144
   8116c:	20070cc8 	.word	0x20070cc8
   81170:	20070c2c 	.word	0x20070c2c

00081174 <usart_serial_getchar>:
{
   81174:	b5f0      	push	{r4, r5, r6, r7, lr}
   81176:	b083      	sub	sp, #12
   81178:	4604      	mov	r4, r0
   8117a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8117c:	2300      	movs	r3, #0
   8117e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   81180:	4b20      	ldr	r3, [pc, #128]	; (81204 <usart_serial_getchar+0x90>)
   81182:	4298      	cmp	r0, r3
   81184:	d00d      	beq.n	811a2 <usart_serial_getchar+0x2e>
	if (USART0 == p_usart) {
   81186:	4b20      	ldr	r3, [pc, #128]	; (81208 <usart_serial_getchar+0x94>)
   81188:	4298      	cmp	r0, r3
   8118a:	d012      	beq.n	811b2 <usart_serial_getchar+0x3e>
	if (USART1 == p_usart) {
   8118c:	4b1f      	ldr	r3, [pc, #124]	; (8120c <usart_serial_getchar+0x98>)
   8118e:	4298      	cmp	r0, r3
   81190:	d019      	beq.n	811c6 <usart_serial_getchar+0x52>
	if (USART2 == p_usart) {
   81192:	4b1f      	ldr	r3, [pc, #124]	; (81210 <usart_serial_getchar+0x9c>)
   81194:	429c      	cmp	r4, r3
   81196:	d020      	beq.n	811da <usart_serial_getchar+0x66>
	if (USART3 == p_usart) {
   81198:	4b1e      	ldr	r3, [pc, #120]	; (81214 <usart_serial_getchar+0xa0>)
   8119a:	429c      	cmp	r4, r3
   8119c:	d027      	beq.n	811ee <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8119e:	b003      	add	sp, #12
   811a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   811a2:	461f      	mov	r7, r3
   811a4:	4e1c      	ldr	r6, [pc, #112]	; (81218 <usart_serial_getchar+0xa4>)
   811a6:	4629      	mov	r1, r5
   811a8:	4638      	mov	r0, r7
   811aa:	47b0      	blx	r6
   811ac:	2800      	cmp	r0, #0
   811ae:	d1fa      	bne.n	811a6 <usart_serial_getchar+0x32>
   811b0:	e7ef      	b.n	81192 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   811b2:	461f      	mov	r7, r3
   811b4:	4e19      	ldr	r6, [pc, #100]	; (8121c <usart_serial_getchar+0xa8>)
   811b6:	a901      	add	r1, sp, #4
   811b8:	4638      	mov	r0, r7
   811ba:	47b0      	blx	r6
   811bc:	2800      	cmp	r0, #0
   811be:	d1fa      	bne.n	811b6 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   811c0:	9b01      	ldr	r3, [sp, #4]
   811c2:	702b      	strb	r3, [r5, #0]
   811c4:	e7e8      	b.n	81198 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   811c6:	461e      	mov	r6, r3
   811c8:	4c14      	ldr	r4, [pc, #80]	; (8121c <usart_serial_getchar+0xa8>)
   811ca:	a901      	add	r1, sp, #4
   811cc:	4630      	mov	r0, r6
   811ce:	47a0      	blx	r4
   811d0:	2800      	cmp	r0, #0
   811d2:	d1fa      	bne.n	811ca <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   811d4:	9b01      	ldr	r3, [sp, #4]
   811d6:	702b      	strb	r3, [r5, #0]
   811d8:	e7e1      	b.n	8119e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   811da:	461e      	mov	r6, r3
   811dc:	4c0f      	ldr	r4, [pc, #60]	; (8121c <usart_serial_getchar+0xa8>)
   811de:	a901      	add	r1, sp, #4
   811e0:	4630      	mov	r0, r6
   811e2:	47a0      	blx	r4
   811e4:	2800      	cmp	r0, #0
   811e6:	d1fa      	bne.n	811de <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   811e8:	9b01      	ldr	r3, [sp, #4]
   811ea:	702b      	strb	r3, [r5, #0]
   811ec:	e7d7      	b.n	8119e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   811ee:	461e      	mov	r6, r3
   811f0:	4c0a      	ldr	r4, [pc, #40]	; (8121c <usart_serial_getchar+0xa8>)
   811f2:	a901      	add	r1, sp, #4
   811f4:	4630      	mov	r0, r6
   811f6:	47a0      	blx	r4
   811f8:	2800      	cmp	r0, #0
   811fa:	d1fa      	bne.n	811f2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   811fc:	9b01      	ldr	r3, [sp, #4]
   811fe:	702b      	strb	r3, [r5, #0]
}
   81200:	e7cd      	b.n	8119e <usart_serial_getchar+0x2a>
   81202:	bf00      	nop
   81204:	400e0800 	.word	0x400e0800
   81208:	40098000 	.word	0x40098000
   8120c:	4009c000 	.word	0x4009c000
   81210:	400a0000 	.word	0x400a0000
   81214:	400a4000 	.word	0x400a4000
   81218:	00080c27 	.word	0x00080c27
   8121c:	00080c4d 	.word	0x00080c4d

00081220 <usart_serial_putchar>:
{
   81220:	b570      	push	{r4, r5, r6, lr}
   81222:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   81224:	4b1e      	ldr	r3, [pc, #120]	; (812a0 <usart_serial_putchar+0x80>)
   81226:	4298      	cmp	r0, r3
   81228:	d00d      	beq.n	81246 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   8122a:	4b1e      	ldr	r3, [pc, #120]	; (812a4 <usart_serial_putchar+0x84>)
   8122c:	4298      	cmp	r0, r3
   8122e:	d013      	beq.n	81258 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   81230:	4b1d      	ldr	r3, [pc, #116]	; (812a8 <usart_serial_putchar+0x88>)
   81232:	4298      	cmp	r0, r3
   81234:	d019      	beq.n	8126a <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   81236:	4b1d      	ldr	r3, [pc, #116]	; (812ac <usart_serial_putchar+0x8c>)
   81238:	4298      	cmp	r0, r3
   8123a:	d01f      	beq.n	8127c <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   8123c:	4b1c      	ldr	r3, [pc, #112]	; (812b0 <usart_serial_putchar+0x90>)
   8123e:	4298      	cmp	r0, r3
   81240:	d025      	beq.n	8128e <usart_serial_putchar+0x6e>
	return 0;
   81242:	2000      	movs	r0, #0
}
   81244:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   81246:	461e      	mov	r6, r3
   81248:	4d1a      	ldr	r5, [pc, #104]	; (812b4 <usart_serial_putchar+0x94>)
   8124a:	4621      	mov	r1, r4
   8124c:	4630      	mov	r0, r6
   8124e:	47a8      	blx	r5
   81250:	2800      	cmp	r0, #0
   81252:	d1fa      	bne.n	8124a <usart_serial_putchar+0x2a>
		return 1;
   81254:	2001      	movs	r0, #1
   81256:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81258:	461e      	mov	r6, r3
   8125a:	4d17      	ldr	r5, [pc, #92]	; (812b8 <usart_serial_putchar+0x98>)
   8125c:	4621      	mov	r1, r4
   8125e:	4630      	mov	r0, r6
   81260:	47a8      	blx	r5
   81262:	2800      	cmp	r0, #0
   81264:	d1fa      	bne.n	8125c <usart_serial_putchar+0x3c>
		return 1;
   81266:	2001      	movs	r0, #1
   81268:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8126a:	461e      	mov	r6, r3
   8126c:	4d12      	ldr	r5, [pc, #72]	; (812b8 <usart_serial_putchar+0x98>)
   8126e:	4621      	mov	r1, r4
   81270:	4630      	mov	r0, r6
   81272:	47a8      	blx	r5
   81274:	2800      	cmp	r0, #0
   81276:	d1fa      	bne.n	8126e <usart_serial_putchar+0x4e>
		return 1;
   81278:	2001      	movs	r0, #1
   8127a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8127c:	461e      	mov	r6, r3
   8127e:	4d0e      	ldr	r5, [pc, #56]	; (812b8 <usart_serial_putchar+0x98>)
   81280:	4621      	mov	r1, r4
   81282:	4630      	mov	r0, r6
   81284:	47a8      	blx	r5
   81286:	2800      	cmp	r0, #0
   81288:	d1fa      	bne.n	81280 <usart_serial_putchar+0x60>
		return 1;
   8128a:	2001      	movs	r0, #1
   8128c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8128e:	461e      	mov	r6, r3
   81290:	4d09      	ldr	r5, [pc, #36]	; (812b8 <usart_serial_putchar+0x98>)
   81292:	4621      	mov	r1, r4
   81294:	4630      	mov	r0, r6
   81296:	47a8      	blx	r5
   81298:	2800      	cmp	r0, #0
   8129a:	d1fa      	bne.n	81292 <usart_serial_putchar+0x72>
		return 1;
   8129c:	2001      	movs	r0, #1
   8129e:	bd70      	pop	{r4, r5, r6, pc}
   812a0:	400e0800 	.word	0x400e0800
   812a4:	40098000 	.word	0x40098000
   812a8:	4009c000 	.word	0x4009c000
   812ac:	400a0000 	.word	0x400a0000
   812b0:	400a4000 	.word	0x400a4000
   812b4:	00080c17 	.word	0x00080c17
   812b8:	00080c39 	.word	0x00080c39

000812bc <main>:
}

int32_t alpha = 0;
int counter = 0;
int main (void)
{
   812bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   812be:	b085      	sub	sp, #20
	/* Insert system clock initialization code here (sysclk_init()). */
	sysclk_init();
   812c0:	4b55      	ldr	r3, [pc, #340]	; (81418 <main+0x15c>)
   812c2:	4798      	blx	r3
	board_init();
   812c4:	4b55      	ldr	r3, [pc, #340]	; (8141c <main+0x160>)
   812c6:	4798      	blx	r3
   812c8:	2008      	movs	r0, #8
   812ca:	4c55      	ldr	r4, [pc, #340]	; (81420 <main+0x164>)
   812cc:	47a0      	blx	r4
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   812ce:	4d55      	ldr	r5, [pc, #340]	; (81424 <main+0x168>)
   812d0:	4b55      	ldr	r3, [pc, #340]	; (81428 <main+0x16c>)
   812d2:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   812d4:	4a55      	ldr	r2, [pc, #340]	; (8142c <main+0x170>)
   812d6:	4b56      	ldr	r3, [pc, #344]	; (81430 <main+0x174>)
   812d8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   812da:	4a56      	ldr	r2, [pc, #344]	; (81434 <main+0x178>)
   812dc:	4b56      	ldr	r3, [pc, #344]	; (81438 <main+0x17c>)
   812de:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   812e0:	4b56      	ldr	r3, [pc, #344]	; (8143c <main+0x180>)
   812e2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   812e4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   812e8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   812ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
   812ee:	9303      	str	r3, [sp, #12]
   812f0:	2008      	movs	r0, #8
   812f2:	47a0      	blx	r4
		uart_init((Uart*)p_usart, &uart_settings);
   812f4:	a901      	add	r1, sp, #4
   812f6:	4628      	mov	r0, r5
   812f8:	4b51      	ldr	r3, [pc, #324]	; (81440 <main+0x184>)
   812fa:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   812fc:	4e51      	ldr	r6, [pc, #324]	; (81444 <main+0x188>)
   812fe:	6833      	ldr	r3, [r6, #0]
   81300:	2100      	movs	r1, #0
   81302:	6898      	ldr	r0, [r3, #8]
   81304:	4d50      	ldr	r5, [pc, #320]	; (81448 <main+0x18c>)
   81306:	47a8      	blx	r5
	setbuf(stdin, NULL);
   81308:	6833      	ldr	r3, [r6, #0]
   8130a:	2100      	movs	r1, #0
   8130c:	6858      	ldr	r0, [r3, #4]
   8130e:	47a8      	blx	r5
	 printf("Console ready\n");
   81310:	484e      	ldr	r0, [pc, #312]	; (8144c <main+0x190>)
   81312:	4d4f      	ldr	r5, [pc, #316]	; (81450 <main+0x194>)
   81314:	47a8      	blx	r5
	 printf("=============\n");
   81316:	484f      	ldr	r0, [pc, #316]	; (81454 <main+0x198>)
   81318:	47a8      	blx	r5
   8131a:	200b      	movs	r0, #11
   8131c:	47a0      	blx	r4
   8131e:	200c      	movs	r0, #12
   81320:	47a0      	blx	r4
   81322:	200d      	movs	r0, #13
   81324:	47a0      	blx	r4
   81326:	200e      	movs	r0, #14
   81328:	47a0      	blx	r4
	configure_console();
	ioport_init();
	pins_init();
   8132a:	4b4b      	ldr	r3, [pc, #300]	; (81458 <main+0x19c>)
   8132c:	4798      	blx	r3
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   8132e:	4b4b      	ldr	r3, [pc, #300]	; (8145c <main+0x1a0>)
   81330:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81334:	601a      	str	r2, [r3, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81336:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81338:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   8133c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
   81340:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81344:	601a      	str	r2, [r3, #0]
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81346:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81348:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	ioport_set_pin_dir(motor1, IOPORT_DIR_OUTPUT);

	ioport_enable_pin(motor2);
	ioport_set_pin_dir(motor2, IOPORT_DIR_OUTPUT);
	
	avstand = get_euclid_distance(370,600);
   8134c:	f44f 7116 	mov.w	r1, #600	; 0x258
   81350:	f44f 70b9 	mov.w	r0, #370	; 0x172
   81354:	4b42      	ldr	r3, [pc, #264]	; (81460 <main+0x1a4>)
   81356:	4798      	blx	r3
   81358:	4c42      	ldr	r4, [pc, #264]	; (81464 <main+0x1a8>)
   8135a:	8020      	strh	r0, [r4, #0]
	printf("Avstad = %d" , avstand);
   8135c:	b281      	uxth	r1, r0
   8135e:	4842      	ldr	r0, [pc, #264]	; (81468 <main+0x1ac>)
   81360:	47a8      	blx	r5
	avstand = distance(avstand);
   81362:	8820      	ldrh	r0, [r4, #0]
   81364:	4b41      	ldr	r3, [pc, #260]	; (8146c <main+0x1b0>)
   81366:	4798      	blx	r3
   81368:	8020      	strh	r0, [r4, #0]
//	alpha = calculate_alpha(370,600) * (180/pi);
//	printf("alpha  = %d\n", alpha);
	delay_s(3);
   8136a:	4841      	ldr	r0, [pc, #260]	; (81470 <main+0x1b4>)
   8136c:	4e41      	ldr	r6, [pc, #260]	; (81474 <main+0x1b8>)
   8136e:	47b0      	blx	r6
	set_counterA(0);
   81370:	2000      	movs	r0, #0
   81372:	4d41      	ldr	r5, [pc, #260]	; (81478 <main+0x1bc>)
   81374:	47a8      	blx	r5
	set_counterB(0);
   81376:	2000      	movs	r0, #0
   81378:	4c40      	ldr	r4, [pc, #256]	; (8147c <main+0x1c0>)
   8137a:	47a0      	blx	r4
	driveVinkel(58);
   8137c:	203a      	movs	r0, #58	; 0x3a
   8137e:	4b40      	ldr	r3, [pc, #256]	; (81480 <main+0x1c4>)
   81380:	4798      	blx	r3
	delay_s(2);
   81382:	4840      	ldr	r0, [pc, #256]	; (81484 <main+0x1c8>)
   81384:	47b0      	blx	r6
 	set_counterA(0);
   81386:	2000      	movs	r0, #0
   81388:	47a8      	blx	r5
 	set_counterB(0);
   8138a:	2000      	movs	r0, #0
   8138c:	47a0      	blx	r4
	while (get_counterA() < avstand && get_counterB() < avstand){
   8138e:	4d3e      	ldr	r5, [pc, #248]	; (81488 <main+0x1cc>)
   81390:	4c34      	ldr	r4, [pc, #208]	; (81464 <main+0x1a8>)
   81392:	4e3e      	ldr	r6, [pc, #248]	; (8148c <main+0x1d0>)
   81394:	e005      	b.n	813a2 <main+0xe6>
		drive(1753,1793);
   81396:	f240 7101 	movw	r1, #1793	; 0x701
   8139a:	f240 60d9 	movw	r0, #1753	; 0x6d9
   8139e:	4b3c      	ldr	r3, [pc, #240]	; (81490 <main+0x1d4>)
   813a0:	4798      	blx	r3
	while (get_counterA() < avstand && get_counterB() < avstand){
   813a2:	47a8      	blx	r5
   813a4:	8823      	ldrh	r3, [r4, #0]
   813a6:	4298      	cmp	r0, r3
   813a8:	da03      	bge.n	813b2 <main+0xf6>
   813aa:	47b0      	blx	r6
   813ac:	8823      	ldrh	r3, [r4, #0]
   813ae:	4298      	cmp	r0, r3
   813b0:	dbf1      	blt.n	81396 <main+0xda>
	}
	drive(1500, 1500);
   813b2:	f240 51dc 	movw	r1, #1500	; 0x5dc
   813b6:	4608      	mov	r0, r1
   813b8:	4b35      	ldr	r3, [pc, #212]	; (81490 <main+0x1d4>)
   813ba:	4798      	blx	r3
	delay_s(2);
   813bc:	4f31      	ldr	r7, [pc, #196]	; (81484 <main+0x1c8>)
   813be:	4638      	mov	r0, r7
   813c0:	4e2c      	ldr	r6, [pc, #176]	; (81474 <main+0x1b8>)
   813c2:	47b0      	blx	r6
	set_counterA(0);
   813c4:	2000      	movs	r0, #0
   813c6:	4d2c      	ldr	r5, [pc, #176]	; (81478 <main+0x1bc>)
   813c8:	47a8      	blx	r5
	set_counterB(0);
   813ca:	2000      	movs	r0, #0
   813cc:	4c2b      	ldr	r4, [pc, #172]	; (8147c <main+0x1c0>)
   813ce:	47a0      	blx	r4
	driveVinkel(180);
   813d0:	20b4      	movs	r0, #180	; 0xb4
   813d2:	4b2b      	ldr	r3, [pc, #172]	; (81480 <main+0x1c4>)
   813d4:	4798      	blx	r3
	delay_s(2);
   813d6:	4638      	mov	r0, r7
   813d8:	47b0      	blx	r6
	set_counterA(0);
   813da:	2000      	movs	r0, #0
   813dc:	47a8      	blx	r5
	set_counterB(0);
   813de:	2000      	movs	r0, #0
   813e0:	47a0      	blx	r4
	while (get_counterA() < avstand && get_counterB() < avstand){
   813e2:	4d29      	ldr	r5, [pc, #164]	; (81488 <main+0x1cc>)
   813e4:	4c1f      	ldr	r4, [pc, #124]	; (81464 <main+0x1a8>)
   813e6:	4e29      	ldr	r6, [pc, #164]	; (8148c <main+0x1d0>)
   813e8:	e005      	b.n	813f6 <main+0x13a>
		drive(1753,1793);
   813ea:	f240 7101 	movw	r1, #1793	; 0x701
   813ee:	f240 60d9 	movw	r0, #1753	; 0x6d9
   813f2:	4b27      	ldr	r3, [pc, #156]	; (81490 <main+0x1d4>)
   813f4:	4798      	blx	r3
	while (get_counterA() < avstand && get_counterB() < avstand){
   813f6:	47a8      	blx	r5
   813f8:	8823      	ldrh	r3, [r4, #0]
   813fa:	4298      	cmp	r0, r3
   813fc:	da03      	bge.n	81406 <main+0x14a>
   813fe:	47b0      	blx	r6
   81400:	8823      	ldrh	r3, [r4, #0]
   81402:	4298      	cmp	r0, r3
   81404:	dbf1      	blt.n	813ea <main+0x12e>
	}
	drive(1500, 1500);
   81406:	f240 51dc 	movw	r1, #1500	; 0x5dc
   8140a:	4608      	mov	r0, r1
   8140c:	4b20      	ldr	r3, [pc, #128]	; (81490 <main+0x1d4>)
   8140e:	4798      	blx	r3
}
   81410:	2000      	movs	r0, #0
   81412:	b005      	add	sp, #20
   81414:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81416:	bf00      	nop
   81418:	00080531 	.word	0x00080531
   8141c:	000806e9 	.word	0x000806e9
   81420:	00080b8d 	.word	0x00080b8d
   81424:	400e0800 	.word	0x400e0800
   81428:	20070d08 	.word	0x20070d08
   8142c:	00081221 	.word	0x00081221
   81430:	20070d04 	.word	0x20070d04
   81434:	00081175 	.word	0x00081175
   81438:	20070d00 	.word	0x20070d00
   8143c:	0501bd00 	.word	0x0501bd00
   81440:	00080be1 	.word	0x00080be1
   81444:	20070154 	.word	0x20070154
   81448:	00082549 	.word	0x00082549
   8144c:	00084f10 	.word	0x00084f10
   81450:	00082399 	.word	0x00082399
   81454:	00084f00 	.word	0x00084f00
   81458:	00080459 	.word	0x00080459
   8145c:	400e1000 	.word	0x400e1000
   81460:	00080161 	.word	0x00080161
   81464:	20070cca 	.word	0x20070cca
   81468:	00084f20 	.word	0x00084f20
   8146c:	00080249 	.word	0x00080249
   81470:	0112a880 	.word	0x0112a880
   81474:	20070001 	.word	0x20070001
   81478:	00080441 	.word	0x00080441
   8147c:	0008044d 	.word	0x0008044d
   81480:	0008033d 	.word	0x0008033d
   81484:	00b71b00 	.word	0x00b71b00
   81488:	00080429 	.word	0x00080429
   8148c:	00080435 	.word	0x00080435
   81490:	00080275 	.word	0x00080275

00081494 <sqrt>:
   81494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81498:	b08b      	sub	sp, #44	; 0x2c
   8149a:	4604      	mov	r4, r0
   8149c:	460d      	mov	r5, r1
   8149e:	f000 f857 	bl	81550 <__ieee754_sqrt>
   814a2:	4b29      	ldr	r3, [pc, #164]	; (81548 <sqrt+0xb4>)
   814a4:	4606      	mov	r6, r0
   814a6:	f993 a000 	ldrsb.w	sl, [r3]
   814aa:	460f      	mov	r7, r1
   814ac:	f1ba 3fff 	cmp.w	sl, #4294967295
   814b0:	d012      	beq.n	814d8 <sqrt+0x44>
   814b2:	4622      	mov	r2, r4
   814b4:	462b      	mov	r3, r5
   814b6:	4620      	mov	r0, r4
   814b8:	4629      	mov	r1, r5
   814ba:	f000 fd59 	bl	81f70 <__aeabi_dcmpun>
   814be:	4683      	mov	fp, r0
   814c0:	b950      	cbnz	r0, 814d8 <sqrt+0x44>
   814c2:	f04f 0800 	mov.w	r8, #0
   814c6:	f04f 0900 	mov.w	r9, #0
   814ca:	4620      	mov	r0, r4
   814cc:	4629      	mov	r1, r5
   814ce:	4642      	mov	r2, r8
   814d0:	464b      	mov	r3, r9
   814d2:	f000 fd25 	bl	81f20 <__aeabi_dcmplt>
   814d6:	b920      	cbnz	r0, 814e2 <sqrt+0x4e>
   814d8:	4630      	mov	r0, r6
   814da:	4639      	mov	r1, r7
   814dc:	b00b      	add	sp, #44	; 0x2c
   814de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814e2:	2201      	movs	r2, #1
   814e4:	4b19      	ldr	r3, [pc, #100]	; (8154c <sqrt+0xb8>)
   814e6:	f8cd b020 	str.w	fp, [sp, #32]
   814ea:	e9cd 4504 	strd	r4, r5, [sp, #16]
   814ee:	e9cd 4502 	strd	r4, r5, [sp, #8]
   814f2:	e88d 000c 	stmia.w	sp, {r2, r3}
   814f6:	f1ba 0f00 	cmp.w	sl, #0
   814fa:	d017      	beq.n	8152c <sqrt+0x98>
   814fc:	4642      	mov	r2, r8
   814fe:	464b      	mov	r3, r9
   81500:	4640      	mov	r0, r8
   81502:	4649      	mov	r1, r9
   81504:	f000 fbc4 	bl	81c90 <__aeabi_ddiv>
   81508:	f1ba 0f02 	cmp.w	sl, #2
   8150c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   81510:	d10e      	bne.n	81530 <sqrt+0x9c>
   81512:	f000 ff13 	bl	8233c <__errno>
   81516:	2321      	movs	r3, #33	; 0x21
   81518:	6003      	str	r3, [r0, #0]
   8151a:	9b08      	ldr	r3, [sp, #32]
   8151c:	b973      	cbnz	r3, 8153c <sqrt+0xa8>
   8151e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   81522:	4630      	mov	r0, r6
   81524:	4639      	mov	r1, r7
   81526:	b00b      	add	sp, #44	; 0x2c
   81528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8152c:	e9cd 8906 	strd	r8, r9, [sp, #24]
   81530:	4668      	mov	r0, sp
   81532:	f000 f8c9 	bl	816c8 <matherr>
   81536:	2800      	cmp	r0, #0
   81538:	d1ef      	bne.n	8151a <sqrt+0x86>
   8153a:	e7ea      	b.n	81512 <sqrt+0x7e>
   8153c:	f000 fefe 	bl	8233c <__errno>
   81540:	9b08      	ldr	r3, [sp, #32]
   81542:	6003      	str	r3, [r0, #0]
   81544:	e7eb      	b.n	8151e <sqrt+0x8a>
   81546:	bf00      	nop
   81548:	20070150 	.word	0x20070150
   8154c:	00084f2c 	.word	0x00084f2c

00081550 <__ieee754_sqrt>:
   81550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81554:	4f5b      	ldr	r7, [pc, #364]	; (816c4 <__ieee754_sqrt+0x174>)
   81556:	4605      	mov	r5, r0
   81558:	438f      	bics	r7, r1
   8155a:	460c      	mov	r4, r1
   8155c:	f000 8092 	beq.w	81684 <__ieee754_sqrt+0x134>
   81560:	2900      	cmp	r1, #0
   81562:	460b      	mov	r3, r1
   81564:	4602      	mov	r2, r0
   81566:	dd6f      	ble.n	81648 <__ieee754_sqrt+0xf8>
   81568:	150f      	asrs	r7, r1, #20
   8156a:	d07b      	beq.n	81664 <__ieee754_sqrt+0x114>
   8156c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   81570:	f3c3 0313 	ubfx	r3, r3, #0, #20
   81574:	07f8      	lsls	r0, r7, #31
   81576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8157a:	d45c      	bmi.n	81636 <__ieee754_sqrt+0xe6>
   8157c:	2600      	movs	r6, #0
   8157e:	2016      	movs	r0, #22
   81580:	46b6      	mov	lr, r6
   81582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   81586:	eb03 74d2 	add.w	r4, r3, r2, lsr #31
   8158a:	107f      	asrs	r7, r7, #1
   8158c:	4423      	add	r3, r4
   8158e:	0052      	lsls	r2, r2, #1
   81590:	eb0e 0401 	add.w	r4, lr, r1
   81594:	429c      	cmp	r4, r3
   81596:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   8159a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8159e:	dc03      	bgt.n	815a8 <__ieee754_sqrt+0x58>
   815a0:	1b1b      	subs	r3, r3, r4
   815a2:	eb04 0e01 	add.w	lr, r4, r1
   815a6:	440e      	add	r6, r1
   815a8:	3801      	subs	r0, #1
   815aa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   815ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
   815b2:	d1ed      	bne.n	81590 <__ieee754_sqrt+0x40>
   815b4:	2420      	movs	r4, #32
   815b6:	4684      	mov	ip, r0
   815b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   815bc:	e009      	b.n	815d2 <__ieee754_sqrt+0x82>
   815be:	d020      	beq.n	81602 <__ieee754_sqrt+0xb2>
   815c0:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   815c4:	3c01      	subs	r4, #1
   815c6:	ea4f 0151 	mov.w	r1, r1, lsr #1
   815ca:	442b      	add	r3, r5
   815cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
   815d0:	d020      	beq.n	81614 <__ieee754_sqrt+0xc4>
   815d2:	4573      	cmp	r3, lr
   815d4:	eb01 050c 	add.w	r5, r1, ip
   815d8:	ddf1      	ble.n	815be <__ieee754_sqrt+0x6e>
   815da:	2d00      	cmp	r5, #0
   815dc:	eb05 0c01 	add.w	ip, r5, r1
   815e0:	db09      	blt.n	815f6 <__ieee754_sqrt+0xa6>
   815e2:	46f0      	mov	r8, lr
   815e4:	4295      	cmp	r5, r2
   815e6:	eba3 030e 	sub.w	r3, r3, lr
   815ea:	d900      	bls.n	815ee <__ieee754_sqrt+0x9e>
   815ec:	3b01      	subs	r3, #1
   815ee:	46c6      	mov	lr, r8
   815f0:	1b52      	subs	r2, r2, r5
   815f2:	4408      	add	r0, r1
   815f4:	e7e4      	b.n	815c0 <__ieee754_sqrt+0x70>
   815f6:	f1bc 0f00 	cmp.w	ip, #0
   815fa:	dbf2      	blt.n	815e2 <__ieee754_sqrt+0x92>
   815fc:	f10e 0801 	add.w	r8, lr, #1
   81600:	e7f0      	b.n	815e4 <__ieee754_sqrt+0x94>
   81602:	4295      	cmp	r5, r2
   81604:	d8dc      	bhi.n	815c0 <__ieee754_sqrt+0x70>
   81606:	2d00      	cmp	r5, #0
   81608:	eb05 0c01 	add.w	ip, r5, r1
   8160c:	db44      	blt.n	81698 <__ieee754_sqrt+0x148>
   8160e:	4698      	mov	r8, r3
   81610:	2300      	movs	r3, #0
   81612:	e7ec      	b.n	815ee <__ieee754_sqrt+0x9e>
   81614:	4313      	orrs	r3, r2
   81616:	d113      	bne.n	81640 <__ieee754_sqrt+0xf0>
   81618:	0840      	lsrs	r0, r0, #1
   8161a:	1073      	asrs	r3, r6, #1
   8161c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   81620:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81624:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   81628:	4649      	mov	r1, r9
   8162a:	07f2      	lsls	r2, r6, #31
   8162c:	bf48      	it	mi
   8162e:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   81632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81636:	005b      	lsls	r3, r3, #1
   81638:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   8163c:	0052      	lsls	r2, r2, #1
   8163e:	e79d      	b.n	8157c <__ieee754_sqrt+0x2c>
   81640:	1c41      	adds	r1, r0, #1
   81642:	d02d      	beq.n	816a0 <__ieee754_sqrt+0x150>
   81644:	3001      	adds	r0, #1
   81646:	e7e7      	b.n	81618 <__ieee754_sqrt+0xc8>
   81648:	4606      	mov	r6, r0
   8164a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   8164e:	433e      	orrs	r6, r7
   81650:	d0ef      	beq.n	81632 <__ieee754_sqrt+0xe2>
   81652:	bb69      	cbnz	r1, 816b0 <__ieee754_sqrt+0x160>
   81654:	460f      	mov	r7, r1
   81656:	0ad3      	lsrs	r3, r2, #11
   81658:	3f15      	subs	r7, #21
   8165a:	0552      	lsls	r2, r2, #21
   8165c:	2b00      	cmp	r3, #0
   8165e:	d0fa      	beq.n	81656 <__ieee754_sqrt+0x106>
   81660:	02de      	lsls	r6, r3, #11
   81662:	d420      	bmi.n	816a6 <__ieee754_sqrt+0x156>
   81664:	2400      	movs	r4, #0
   81666:	e000      	b.n	8166a <__ieee754_sqrt+0x11a>
   81668:	4604      	mov	r4, r0
   8166a:	005b      	lsls	r3, r3, #1
   8166c:	02dd      	lsls	r5, r3, #11
   8166e:	f104 0001 	add.w	r0, r4, #1
   81672:	d5f9      	bpl.n	81668 <__ieee754_sqrt+0x118>
   81674:	f1c0 0120 	rsb	r1, r0, #32
   81678:	fa22 f101 	lsr.w	r1, r2, r1
   8167c:	430b      	orrs	r3, r1
   8167e:	1b3f      	subs	r7, r7, r4
   81680:	4082      	lsls	r2, r0
   81682:	e773      	b.n	8156c <__ieee754_sqrt+0x1c>
   81684:	4602      	mov	r2, r0
   81686:	460b      	mov	r3, r1
   81688:	f000 f9d8 	bl	81a3c <__aeabi_dmul>
   8168c:	462a      	mov	r2, r5
   8168e:	4623      	mov	r3, r4
   81690:	f000 f822 	bl	816d8 <__adddf3>
   81694:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81698:	f1bc 0f00 	cmp.w	ip, #0
   8169c:	daae      	bge.n	815fc <__ieee754_sqrt+0xac>
   8169e:	e7b6      	b.n	8160e <__ieee754_sqrt+0xbe>
   816a0:	3601      	adds	r6, #1
   816a2:	4620      	mov	r0, r4
   816a4:	e7b9      	b.n	8161a <__ieee754_sqrt+0xca>
   816a6:	2000      	movs	r0, #0
   816a8:	2120      	movs	r1, #32
   816aa:	f04f 34ff 	mov.w	r4, #4294967295
   816ae:	e7e3      	b.n	81678 <__ieee754_sqrt+0x128>
   816b0:	4602      	mov	r2, r0
   816b2:	460b      	mov	r3, r1
   816b4:	f000 f80e 	bl	816d4 <__aeabi_dsub>
   816b8:	4602      	mov	r2, r0
   816ba:	460b      	mov	r3, r1
   816bc:	f000 fae8 	bl	81c90 <__aeabi_ddiv>
   816c0:	e7b7      	b.n	81632 <__ieee754_sqrt+0xe2>
   816c2:	bf00      	nop
   816c4:	7ff00000 	.word	0x7ff00000

000816c8 <matherr>:
   816c8:	2000      	movs	r0, #0
   816ca:	4770      	bx	lr

000816cc <__aeabi_drsub>:
   816cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   816d0:	e002      	b.n	816d8 <__adddf3>
   816d2:	bf00      	nop

000816d4 <__aeabi_dsub>:
   816d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000816d8 <__adddf3>:
   816d8:	b530      	push	{r4, r5, lr}
   816da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   816de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   816e2:	ea94 0f05 	teq	r4, r5
   816e6:	bf08      	it	eq
   816e8:	ea90 0f02 	teqeq	r0, r2
   816ec:	bf1f      	itttt	ne
   816ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   816f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   816f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   816fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   816fe:	f000 80e2 	beq.w	818c6 <__adddf3+0x1ee>
   81702:	ea4f 5454 	mov.w	r4, r4, lsr #21
   81706:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8170a:	bfb8      	it	lt
   8170c:	426d      	neglt	r5, r5
   8170e:	dd0c      	ble.n	8172a <__adddf3+0x52>
   81710:	442c      	add	r4, r5
   81712:	ea80 0202 	eor.w	r2, r0, r2
   81716:	ea81 0303 	eor.w	r3, r1, r3
   8171a:	ea82 0000 	eor.w	r0, r2, r0
   8171e:	ea83 0101 	eor.w	r1, r3, r1
   81722:	ea80 0202 	eor.w	r2, r0, r2
   81726:	ea81 0303 	eor.w	r3, r1, r3
   8172a:	2d36      	cmp	r5, #54	; 0x36
   8172c:	bf88      	it	hi
   8172e:	bd30      	pophi	{r4, r5, pc}
   81730:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81734:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81738:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8173c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   81740:	d002      	beq.n	81748 <__adddf3+0x70>
   81742:	4240      	negs	r0, r0
   81744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   81748:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8174c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81750:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   81754:	d002      	beq.n	8175c <__adddf3+0x84>
   81756:	4252      	negs	r2, r2
   81758:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8175c:	ea94 0f05 	teq	r4, r5
   81760:	f000 80a7 	beq.w	818b2 <__adddf3+0x1da>
   81764:	f1a4 0401 	sub.w	r4, r4, #1
   81768:	f1d5 0e20 	rsbs	lr, r5, #32
   8176c:	db0d      	blt.n	8178a <__adddf3+0xb2>
   8176e:	fa02 fc0e 	lsl.w	ip, r2, lr
   81772:	fa22 f205 	lsr.w	r2, r2, r5
   81776:	1880      	adds	r0, r0, r2
   81778:	f141 0100 	adc.w	r1, r1, #0
   8177c:	fa03 f20e 	lsl.w	r2, r3, lr
   81780:	1880      	adds	r0, r0, r2
   81782:	fa43 f305 	asr.w	r3, r3, r5
   81786:	4159      	adcs	r1, r3
   81788:	e00e      	b.n	817a8 <__adddf3+0xd0>
   8178a:	f1a5 0520 	sub.w	r5, r5, #32
   8178e:	f10e 0e20 	add.w	lr, lr, #32
   81792:	2a01      	cmp	r2, #1
   81794:	fa03 fc0e 	lsl.w	ip, r3, lr
   81798:	bf28      	it	cs
   8179a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8179e:	fa43 f305 	asr.w	r3, r3, r5
   817a2:	18c0      	adds	r0, r0, r3
   817a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   817a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   817ac:	d507      	bpl.n	817be <__adddf3+0xe6>
   817ae:	f04f 0e00 	mov.w	lr, #0
   817b2:	f1dc 0c00 	rsbs	ip, ip, #0
   817b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   817ba:	eb6e 0101 	sbc.w	r1, lr, r1
   817be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   817c2:	d31b      	bcc.n	817fc <__adddf3+0x124>
   817c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   817c8:	d30c      	bcc.n	817e4 <__adddf3+0x10c>
   817ca:	0849      	lsrs	r1, r1, #1
   817cc:	ea5f 0030 	movs.w	r0, r0, rrx
   817d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   817d4:	f104 0401 	add.w	r4, r4, #1
   817d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   817dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   817e0:	f080 809a 	bcs.w	81918 <__adddf3+0x240>
   817e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   817e8:	bf08      	it	eq
   817ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   817ee:	f150 0000 	adcs.w	r0, r0, #0
   817f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   817f6:	ea41 0105 	orr.w	r1, r1, r5
   817fa:	bd30      	pop	{r4, r5, pc}
   817fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81800:	4140      	adcs	r0, r0
   81802:	eb41 0101 	adc.w	r1, r1, r1
   81806:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8180a:	f1a4 0401 	sub.w	r4, r4, #1
   8180e:	d1e9      	bne.n	817e4 <__adddf3+0x10c>
   81810:	f091 0f00 	teq	r1, #0
   81814:	bf04      	itt	eq
   81816:	4601      	moveq	r1, r0
   81818:	2000      	moveq	r0, #0
   8181a:	fab1 f381 	clz	r3, r1
   8181e:	bf08      	it	eq
   81820:	3320      	addeq	r3, #32
   81822:	f1a3 030b 	sub.w	r3, r3, #11
   81826:	f1b3 0220 	subs.w	r2, r3, #32
   8182a:	da0c      	bge.n	81846 <__adddf3+0x16e>
   8182c:	320c      	adds	r2, #12
   8182e:	dd08      	ble.n	81842 <__adddf3+0x16a>
   81830:	f102 0c14 	add.w	ip, r2, #20
   81834:	f1c2 020c 	rsb	r2, r2, #12
   81838:	fa01 f00c 	lsl.w	r0, r1, ip
   8183c:	fa21 f102 	lsr.w	r1, r1, r2
   81840:	e00c      	b.n	8185c <__adddf3+0x184>
   81842:	f102 0214 	add.w	r2, r2, #20
   81846:	bfd8      	it	le
   81848:	f1c2 0c20 	rsble	ip, r2, #32
   8184c:	fa01 f102 	lsl.w	r1, r1, r2
   81850:	fa20 fc0c 	lsr.w	ip, r0, ip
   81854:	bfdc      	itt	le
   81856:	ea41 010c 	orrle.w	r1, r1, ip
   8185a:	4090      	lslle	r0, r2
   8185c:	1ae4      	subs	r4, r4, r3
   8185e:	bfa2      	ittt	ge
   81860:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   81864:	4329      	orrge	r1, r5
   81866:	bd30      	popge	{r4, r5, pc}
   81868:	ea6f 0404 	mvn.w	r4, r4
   8186c:	3c1f      	subs	r4, #31
   8186e:	da1c      	bge.n	818aa <__adddf3+0x1d2>
   81870:	340c      	adds	r4, #12
   81872:	dc0e      	bgt.n	81892 <__adddf3+0x1ba>
   81874:	f104 0414 	add.w	r4, r4, #20
   81878:	f1c4 0220 	rsb	r2, r4, #32
   8187c:	fa20 f004 	lsr.w	r0, r0, r4
   81880:	fa01 f302 	lsl.w	r3, r1, r2
   81884:	ea40 0003 	orr.w	r0, r0, r3
   81888:	fa21 f304 	lsr.w	r3, r1, r4
   8188c:	ea45 0103 	orr.w	r1, r5, r3
   81890:	bd30      	pop	{r4, r5, pc}
   81892:	f1c4 040c 	rsb	r4, r4, #12
   81896:	f1c4 0220 	rsb	r2, r4, #32
   8189a:	fa20 f002 	lsr.w	r0, r0, r2
   8189e:	fa01 f304 	lsl.w	r3, r1, r4
   818a2:	ea40 0003 	orr.w	r0, r0, r3
   818a6:	4629      	mov	r1, r5
   818a8:	bd30      	pop	{r4, r5, pc}
   818aa:	fa21 f004 	lsr.w	r0, r1, r4
   818ae:	4629      	mov	r1, r5
   818b0:	bd30      	pop	{r4, r5, pc}
   818b2:	f094 0f00 	teq	r4, #0
   818b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   818ba:	bf06      	itte	eq
   818bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   818c0:	3401      	addeq	r4, #1
   818c2:	3d01      	subne	r5, #1
   818c4:	e74e      	b.n	81764 <__adddf3+0x8c>
   818c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   818ca:	bf18      	it	ne
   818cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   818d0:	d029      	beq.n	81926 <__adddf3+0x24e>
   818d2:	ea94 0f05 	teq	r4, r5
   818d6:	bf08      	it	eq
   818d8:	ea90 0f02 	teqeq	r0, r2
   818dc:	d005      	beq.n	818ea <__adddf3+0x212>
   818de:	ea54 0c00 	orrs.w	ip, r4, r0
   818e2:	bf04      	itt	eq
   818e4:	4619      	moveq	r1, r3
   818e6:	4610      	moveq	r0, r2
   818e8:	bd30      	pop	{r4, r5, pc}
   818ea:	ea91 0f03 	teq	r1, r3
   818ee:	bf1e      	ittt	ne
   818f0:	2100      	movne	r1, #0
   818f2:	2000      	movne	r0, #0
   818f4:	bd30      	popne	{r4, r5, pc}
   818f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   818fa:	d105      	bne.n	81908 <__adddf3+0x230>
   818fc:	0040      	lsls	r0, r0, #1
   818fe:	4149      	adcs	r1, r1
   81900:	bf28      	it	cs
   81902:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   81906:	bd30      	pop	{r4, r5, pc}
   81908:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8190c:	bf3c      	itt	cc
   8190e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   81912:	bd30      	popcc	{r4, r5, pc}
   81914:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81918:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8191c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81920:	f04f 0000 	mov.w	r0, #0
   81924:	bd30      	pop	{r4, r5, pc}
   81926:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8192a:	bf1a      	itte	ne
   8192c:	4619      	movne	r1, r3
   8192e:	4610      	movne	r0, r2
   81930:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   81934:	bf1c      	itt	ne
   81936:	460b      	movne	r3, r1
   81938:	4602      	movne	r2, r0
   8193a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8193e:	bf06      	itte	eq
   81940:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   81944:	ea91 0f03 	teqeq	r1, r3
   81948:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8194c:	bd30      	pop	{r4, r5, pc}
   8194e:	bf00      	nop

00081950 <__aeabi_ui2d>:
   81950:	f090 0f00 	teq	r0, #0
   81954:	bf04      	itt	eq
   81956:	2100      	moveq	r1, #0
   81958:	4770      	bxeq	lr
   8195a:	b530      	push	{r4, r5, lr}
   8195c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81960:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81964:	f04f 0500 	mov.w	r5, #0
   81968:	f04f 0100 	mov.w	r1, #0
   8196c:	e750      	b.n	81810 <__adddf3+0x138>
   8196e:	bf00      	nop

00081970 <__aeabi_i2d>:
   81970:	f090 0f00 	teq	r0, #0
   81974:	bf04      	itt	eq
   81976:	2100      	moveq	r1, #0
   81978:	4770      	bxeq	lr
   8197a:	b530      	push	{r4, r5, lr}
   8197c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81980:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81984:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   81988:	bf48      	it	mi
   8198a:	4240      	negmi	r0, r0
   8198c:	f04f 0100 	mov.w	r1, #0
   81990:	e73e      	b.n	81810 <__adddf3+0x138>
   81992:	bf00      	nop

00081994 <__aeabi_f2d>:
   81994:	0042      	lsls	r2, r0, #1
   81996:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8199a:	ea4f 0131 	mov.w	r1, r1, rrx
   8199e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   819a2:	bf1f      	itttt	ne
   819a4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   819a8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   819ac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   819b0:	4770      	bxne	lr
   819b2:	f092 0f00 	teq	r2, #0
   819b6:	bf14      	ite	ne
   819b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   819bc:	4770      	bxeq	lr
   819be:	b530      	push	{r4, r5, lr}
   819c0:	f44f 7460 	mov.w	r4, #896	; 0x380
   819c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   819c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   819cc:	e720      	b.n	81810 <__adddf3+0x138>
   819ce:	bf00      	nop

000819d0 <__aeabi_ul2d>:
   819d0:	ea50 0201 	orrs.w	r2, r0, r1
   819d4:	bf08      	it	eq
   819d6:	4770      	bxeq	lr
   819d8:	b530      	push	{r4, r5, lr}
   819da:	f04f 0500 	mov.w	r5, #0
   819de:	e00a      	b.n	819f6 <__aeabi_l2d+0x16>

000819e0 <__aeabi_l2d>:
   819e0:	ea50 0201 	orrs.w	r2, r0, r1
   819e4:	bf08      	it	eq
   819e6:	4770      	bxeq	lr
   819e8:	b530      	push	{r4, r5, lr}
   819ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   819ee:	d502      	bpl.n	819f6 <__aeabi_l2d+0x16>
   819f0:	4240      	negs	r0, r0
   819f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   819f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   819fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   819fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   81a02:	f43f aedc 	beq.w	817be <__adddf3+0xe6>
   81a06:	f04f 0203 	mov.w	r2, #3
   81a0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81a0e:	bf18      	it	ne
   81a10:	3203      	addne	r2, #3
   81a12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81a16:	bf18      	it	ne
   81a18:	3203      	addne	r2, #3
   81a1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81a1e:	f1c2 0320 	rsb	r3, r2, #32
   81a22:	fa00 fc03 	lsl.w	ip, r0, r3
   81a26:	fa20 f002 	lsr.w	r0, r0, r2
   81a2a:	fa01 fe03 	lsl.w	lr, r1, r3
   81a2e:	ea40 000e 	orr.w	r0, r0, lr
   81a32:	fa21 f102 	lsr.w	r1, r1, r2
   81a36:	4414      	add	r4, r2
   81a38:	e6c1      	b.n	817be <__adddf3+0xe6>
   81a3a:	bf00      	nop

00081a3c <__aeabi_dmul>:
   81a3c:	b570      	push	{r4, r5, r6, lr}
   81a3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81a42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81a46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81a4a:	bf1d      	ittte	ne
   81a4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81a50:	ea94 0f0c 	teqne	r4, ip
   81a54:	ea95 0f0c 	teqne	r5, ip
   81a58:	f000 f8de 	bleq	81c18 <__aeabi_dmul+0x1dc>
   81a5c:	442c      	add	r4, r5
   81a5e:	ea81 0603 	eor.w	r6, r1, r3
   81a62:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   81a66:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   81a6a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   81a6e:	bf18      	it	ne
   81a70:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   81a74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81a78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   81a7c:	d038      	beq.n	81af0 <__aeabi_dmul+0xb4>
   81a7e:	fba0 ce02 	umull	ip, lr, r0, r2
   81a82:	f04f 0500 	mov.w	r5, #0
   81a86:	fbe1 e502 	umlal	lr, r5, r1, r2
   81a8a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   81a8e:	fbe0 e503 	umlal	lr, r5, r0, r3
   81a92:	f04f 0600 	mov.w	r6, #0
   81a96:	fbe1 5603 	umlal	r5, r6, r1, r3
   81a9a:	f09c 0f00 	teq	ip, #0
   81a9e:	bf18      	it	ne
   81aa0:	f04e 0e01 	orrne.w	lr, lr, #1
   81aa4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81aa8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81aac:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81ab0:	d204      	bcs.n	81abc <__aeabi_dmul+0x80>
   81ab2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   81ab6:	416d      	adcs	r5, r5
   81ab8:	eb46 0606 	adc.w	r6, r6, r6
   81abc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81ac0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   81ac4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81ac8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81acc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81ad0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81ad4:	bf88      	it	hi
   81ad6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81ada:	d81e      	bhi.n	81b1a <__aeabi_dmul+0xde>
   81adc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81ae0:	bf08      	it	eq
   81ae2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   81ae6:	f150 0000 	adcs.w	r0, r0, #0
   81aea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81aee:	bd70      	pop	{r4, r5, r6, pc}
   81af0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   81af4:	ea46 0101 	orr.w	r1, r6, r1
   81af8:	ea40 0002 	orr.w	r0, r0, r2
   81afc:	ea81 0103 	eor.w	r1, r1, r3
   81b00:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   81b04:	bfc2      	ittt	gt
   81b06:	ebd4 050c 	rsbsgt	r5, r4, ip
   81b0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81b0e:	bd70      	popgt	{r4, r5, r6, pc}
   81b10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81b14:	f04f 0e00 	mov.w	lr, #0
   81b18:	3c01      	subs	r4, #1
   81b1a:	f300 80ab 	bgt.w	81c74 <__aeabi_dmul+0x238>
   81b1e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   81b22:	bfde      	ittt	le
   81b24:	2000      	movle	r0, #0
   81b26:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81b2a:	bd70      	pople	{r4, r5, r6, pc}
   81b2c:	f1c4 0400 	rsb	r4, r4, #0
   81b30:	3c20      	subs	r4, #32
   81b32:	da35      	bge.n	81ba0 <__aeabi_dmul+0x164>
   81b34:	340c      	adds	r4, #12
   81b36:	dc1b      	bgt.n	81b70 <__aeabi_dmul+0x134>
   81b38:	f104 0414 	add.w	r4, r4, #20
   81b3c:	f1c4 0520 	rsb	r5, r4, #32
   81b40:	fa00 f305 	lsl.w	r3, r0, r5
   81b44:	fa20 f004 	lsr.w	r0, r0, r4
   81b48:	fa01 f205 	lsl.w	r2, r1, r5
   81b4c:	ea40 0002 	orr.w	r0, r0, r2
   81b50:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   81b54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81b58:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81b5c:	fa21 f604 	lsr.w	r6, r1, r4
   81b60:	eb42 0106 	adc.w	r1, r2, r6
   81b64:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81b68:	bf08      	it	eq
   81b6a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81b6e:	bd70      	pop	{r4, r5, r6, pc}
   81b70:	f1c4 040c 	rsb	r4, r4, #12
   81b74:	f1c4 0520 	rsb	r5, r4, #32
   81b78:	fa00 f304 	lsl.w	r3, r0, r4
   81b7c:	fa20 f005 	lsr.w	r0, r0, r5
   81b80:	fa01 f204 	lsl.w	r2, r1, r4
   81b84:	ea40 0002 	orr.w	r0, r0, r2
   81b88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81b8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   81b90:	f141 0100 	adc.w	r1, r1, #0
   81b94:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81b98:	bf08      	it	eq
   81b9a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81b9e:	bd70      	pop	{r4, r5, r6, pc}
   81ba0:	f1c4 0520 	rsb	r5, r4, #32
   81ba4:	fa00 f205 	lsl.w	r2, r0, r5
   81ba8:	ea4e 0e02 	orr.w	lr, lr, r2
   81bac:	fa20 f304 	lsr.w	r3, r0, r4
   81bb0:	fa01 f205 	lsl.w	r2, r1, r5
   81bb4:	ea43 0302 	orr.w	r3, r3, r2
   81bb8:	fa21 f004 	lsr.w	r0, r1, r4
   81bbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81bc0:	fa21 f204 	lsr.w	r2, r1, r4
   81bc4:	ea20 0002 	bic.w	r0, r0, r2
   81bc8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81bcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81bd0:	bf08      	it	eq
   81bd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81bd6:	bd70      	pop	{r4, r5, r6, pc}
   81bd8:	f094 0f00 	teq	r4, #0
   81bdc:	d10f      	bne.n	81bfe <__aeabi_dmul+0x1c2>
   81bde:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   81be2:	0040      	lsls	r0, r0, #1
   81be4:	eb41 0101 	adc.w	r1, r1, r1
   81be8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81bec:	bf08      	it	eq
   81bee:	3c01      	subeq	r4, #1
   81bf0:	d0f7      	beq.n	81be2 <__aeabi_dmul+0x1a6>
   81bf2:	ea41 0106 	orr.w	r1, r1, r6
   81bf6:	f095 0f00 	teq	r5, #0
   81bfa:	bf18      	it	ne
   81bfc:	4770      	bxne	lr
   81bfe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   81c02:	0052      	lsls	r2, r2, #1
   81c04:	eb43 0303 	adc.w	r3, r3, r3
   81c08:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81c0c:	bf08      	it	eq
   81c0e:	3d01      	subeq	r5, #1
   81c10:	d0f7      	beq.n	81c02 <__aeabi_dmul+0x1c6>
   81c12:	ea43 0306 	orr.w	r3, r3, r6
   81c16:	4770      	bx	lr
   81c18:	ea94 0f0c 	teq	r4, ip
   81c1c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81c20:	bf18      	it	ne
   81c22:	ea95 0f0c 	teqne	r5, ip
   81c26:	d00c      	beq.n	81c42 <__aeabi_dmul+0x206>
   81c28:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81c2c:	bf18      	it	ne
   81c2e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81c32:	d1d1      	bne.n	81bd8 <__aeabi_dmul+0x19c>
   81c34:	ea81 0103 	eor.w	r1, r1, r3
   81c38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81c3c:	f04f 0000 	mov.w	r0, #0
   81c40:	bd70      	pop	{r4, r5, r6, pc}
   81c42:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81c46:	bf06      	itte	eq
   81c48:	4610      	moveq	r0, r2
   81c4a:	4619      	moveq	r1, r3
   81c4c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81c50:	d019      	beq.n	81c86 <__aeabi_dmul+0x24a>
   81c52:	ea94 0f0c 	teq	r4, ip
   81c56:	d102      	bne.n	81c5e <__aeabi_dmul+0x222>
   81c58:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   81c5c:	d113      	bne.n	81c86 <__aeabi_dmul+0x24a>
   81c5e:	ea95 0f0c 	teq	r5, ip
   81c62:	d105      	bne.n	81c70 <__aeabi_dmul+0x234>
   81c64:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   81c68:	bf1c      	itt	ne
   81c6a:	4610      	movne	r0, r2
   81c6c:	4619      	movne	r1, r3
   81c6e:	d10a      	bne.n	81c86 <__aeabi_dmul+0x24a>
   81c70:	ea81 0103 	eor.w	r1, r1, r3
   81c74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81c78:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81c7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81c80:	f04f 0000 	mov.w	r0, #0
   81c84:	bd70      	pop	{r4, r5, r6, pc}
   81c86:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   81c8a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   81c8e:	bd70      	pop	{r4, r5, r6, pc}

00081c90 <__aeabi_ddiv>:
   81c90:	b570      	push	{r4, r5, r6, lr}
   81c92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   81c96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81c9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81c9e:	bf1d      	ittte	ne
   81ca0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   81ca4:	ea94 0f0c 	teqne	r4, ip
   81ca8:	ea95 0f0c 	teqne	r5, ip
   81cac:	f000 f8a7 	bleq	81dfe <__aeabi_ddiv+0x16e>
   81cb0:	eba4 0405 	sub.w	r4, r4, r5
   81cb4:	ea81 0e03 	eor.w	lr, r1, r3
   81cb8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81cbc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81cc0:	f000 8088 	beq.w	81dd4 <__aeabi_ddiv+0x144>
   81cc4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81cc8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81ccc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81cd0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   81cd4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81cd8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81cdc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81ce0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   81ce4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81ce8:	429d      	cmp	r5, r3
   81cea:	bf08      	it	eq
   81cec:	4296      	cmpeq	r6, r2
   81cee:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   81cf2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   81cf6:	d202      	bcs.n	81cfe <__aeabi_ddiv+0x6e>
   81cf8:	085b      	lsrs	r3, r3, #1
   81cfa:	ea4f 0232 	mov.w	r2, r2, rrx
   81cfe:	1ab6      	subs	r6, r6, r2
   81d00:	eb65 0503 	sbc.w	r5, r5, r3
   81d04:	085b      	lsrs	r3, r3, #1
   81d06:	ea4f 0232 	mov.w	r2, r2, rrx
   81d0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81d0e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   81d12:	ebb6 0e02 	subs.w	lr, r6, r2
   81d16:	eb75 0e03 	sbcs.w	lr, r5, r3
   81d1a:	bf22      	ittt	cs
   81d1c:	1ab6      	subcs	r6, r6, r2
   81d1e:	4675      	movcs	r5, lr
   81d20:	ea40 000c 	orrcs.w	r0, r0, ip
   81d24:	085b      	lsrs	r3, r3, #1
   81d26:	ea4f 0232 	mov.w	r2, r2, rrx
   81d2a:	ebb6 0e02 	subs.w	lr, r6, r2
   81d2e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81d32:	bf22      	ittt	cs
   81d34:	1ab6      	subcs	r6, r6, r2
   81d36:	4675      	movcs	r5, lr
   81d38:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   81d3c:	085b      	lsrs	r3, r3, #1
   81d3e:	ea4f 0232 	mov.w	r2, r2, rrx
   81d42:	ebb6 0e02 	subs.w	lr, r6, r2
   81d46:	eb75 0e03 	sbcs.w	lr, r5, r3
   81d4a:	bf22      	ittt	cs
   81d4c:	1ab6      	subcs	r6, r6, r2
   81d4e:	4675      	movcs	r5, lr
   81d50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   81d54:	085b      	lsrs	r3, r3, #1
   81d56:	ea4f 0232 	mov.w	r2, r2, rrx
   81d5a:	ebb6 0e02 	subs.w	lr, r6, r2
   81d5e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81d62:	bf22      	ittt	cs
   81d64:	1ab6      	subcs	r6, r6, r2
   81d66:	4675      	movcs	r5, lr
   81d68:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   81d6c:	ea55 0e06 	orrs.w	lr, r5, r6
   81d70:	d018      	beq.n	81da4 <__aeabi_ddiv+0x114>
   81d72:	ea4f 1505 	mov.w	r5, r5, lsl #4
   81d76:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   81d7a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   81d7e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   81d82:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   81d86:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   81d8a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   81d8e:	d1c0      	bne.n	81d12 <__aeabi_ddiv+0x82>
   81d90:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81d94:	d10b      	bne.n	81dae <__aeabi_ddiv+0x11e>
   81d96:	ea41 0100 	orr.w	r1, r1, r0
   81d9a:	f04f 0000 	mov.w	r0, #0
   81d9e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   81da2:	e7b6      	b.n	81d12 <__aeabi_ddiv+0x82>
   81da4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81da8:	bf04      	itt	eq
   81daa:	4301      	orreq	r1, r0
   81dac:	2000      	moveq	r0, #0
   81dae:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   81db2:	bf88      	it	hi
   81db4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81db8:	f63f aeaf 	bhi.w	81b1a <__aeabi_dmul+0xde>
   81dbc:	ebb5 0c03 	subs.w	ip, r5, r3
   81dc0:	bf04      	itt	eq
   81dc2:	ebb6 0c02 	subseq.w	ip, r6, r2
   81dc6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81dca:	f150 0000 	adcs.w	r0, r0, #0
   81dce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81dd2:	bd70      	pop	{r4, r5, r6, pc}
   81dd4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81dd8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81ddc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81de0:	bfc2      	ittt	gt
   81de2:	ebd4 050c 	rsbsgt	r5, r4, ip
   81de6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81dea:	bd70      	popgt	{r4, r5, r6, pc}
   81dec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81df0:	f04f 0e00 	mov.w	lr, #0
   81df4:	3c01      	subs	r4, #1
   81df6:	e690      	b.n	81b1a <__aeabi_dmul+0xde>
   81df8:	ea45 0e06 	orr.w	lr, r5, r6
   81dfc:	e68d      	b.n	81b1a <__aeabi_dmul+0xde>
   81dfe:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81e02:	ea94 0f0c 	teq	r4, ip
   81e06:	bf08      	it	eq
   81e08:	ea95 0f0c 	teqeq	r5, ip
   81e0c:	f43f af3b 	beq.w	81c86 <__aeabi_dmul+0x24a>
   81e10:	ea94 0f0c 	teq	r4, ip
   81e14:	d10a      	bne.n	81e2c <__aeabi_ddiv+0x19c>
   81e16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81e1a:	f47f af34 	bne.w	81c86 <__aeabi_dmul+0x24a>
   81e1e:	ea95 0f0c 	teq	r5, ip
   81e22:	f47f af25 	bne.w	81c70 <__aeabi_dmul+0x234>
   81e26:	4610      	mov	r0, r2
   81e28:	4619      	mov	r1, r3
   81e2a:	e72c      	b.n	81c86 <__aeabi_dmul+0x24a>
   81e2c:	ea95 0f0c 	teq	r5, ip
   81e30:	d106      	bne.n	81e40 <__aeabi_ddiv+0x1b0>
   81e32:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81e36:	f43f aefd 	beq.w	81c34 <__aeabi_dmul+0x1f8>
   81e3a:	4610      	mov	r0, r2
   81e3c:	4619      	mov	r1, r3
   81e3e:	e722      	b.n	81c86 <__aeabi_dmul+0x24a>
   81e40:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81e44:	bf18      	it	ne
   81e46:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   81e4a:	f47f aec5 	bne.w	81bd8 <__aeabi_dmul+0x19c>
   81e4e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   81e52:	f47f af0d 	bne.w	81c70 <__aeabi_dmul+0x234>
   81e56:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   81e5a:	f47f aeeb 	bne.w	81c34 <__aeabi_dmul+0x1f8>
   81e5e:	e712      	b.n	81c86 <__aeabi_dmul+0x24a>

00081e60 <__gedf2>:
   81e60:	f04f 3cff 	mov.w	ip, #4294967295
   81e64:	e006      	b.n	81e74 <__cmpdf2+0x4>
   81e66:	bf00      	nop

00081e68 <__ledf2>:
   81e68:	f04f 0c01 	mov.w	ip, #1
   81e6c:	e002      	b.n	81e74 <__cmpdf2+0x4>
   81e6e:	bf00      	nop

00081e70 <__cmpdf2>:
   81e70:	f04f 0c01 	mov.w	ip, #1
   81e74:	f84d cd04 	str.w	ip, [sp, #-4]!
   81e78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81e7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81e80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   81e84:	bf18      	it	ne
   81e86:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   81e8a:	d01b      	beq.n	81ec4 <__cmpdf2+0x54>
   81e8c:	b001      	add	sp, #4
   81e8e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   81e92:	bf0c      	ite	eq
   81e94:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   81e98:	ea91 0f03 	teqne	r1, r3
   81e9c:	bf02      	ittt	eq
   81e9e:	ea90 0f02 	teqeq	r0, r2
   81ea2:	2000      	moveq	r0, #0
   81ea4:	4770      	bxeq	lr
   81ea6:	f110 0f00 	cmn.w	r0, #0
   81eaa:	ea91 0f03 	teq	r1, r3
   81eae:	bf58      	it	pl
   81eb0:	4299      	cmppl	r1, r3
   81eb2:	bf08      	it	eq
   81eb4:	4290      	cmpeq	r0, r2
   81eb6:	bf2c      	ite	cs
   81eb8:	17d8      	asrcs	r0, r3, #31
   81eba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   81ebe:	f040 0001 	orr.w	r0, r0, #1
   81ec2:	4770      	bx	lr
   81ec4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81ec8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81ecc:	d102      	bne.n	81ed4 <__cmpdf2+0x64>
   81ece:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   81ed2:	d107      	bne.n	81ee4 <__cmpdf2+0x74>
   81ed4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   81ed8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81edc:	d1d6      	bne.n	81e8c <__cmpdf2+0x1c>
   81ede:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   81ee2:	d0d3      	beq.n	81e8c <__cmpdf2+0x1c>
   81ee4:	f85d 0b04 	ldr.w	r0, [sp], #4
   81ee8:	4770      	bx	lr
   81eea:	bf00      	nop

00081eec <__aeabi_cdrcmple>:
   81eec:	4684      	mov	ip, r0
   81eee:	4610      	mov	r0, r2
   81ef0:	4662      	mov	r2, ip
   81ef2:	468c      	mov	ip, r1
   81ef4:	4619      	mov	r1, r3
   81ef6:	4663      	mov	r3, ip
   81ef8:	e000      	b.n	81efc <__aeabi_cdcmpeq>
   81efa:	bf00      	nop

00081efc <__aeabi_cdcmpeq>:
   81efc:	b501      	push	{r0, lr}
   81efe:	f7ff ffb7 	bl	81e70 <__cmpdf2>
   81f02:	2800      	cmp	r0, #0
   81f04:	bf48      	it	mi
   81f06:	f110 0f00 	cmnmi.w	r0, #0
   81f0a:	bd01      	pop	{r0, pc}

00081f0c <__aeabi_dcmpeq>:
   81f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81f10:	f7ff fff4 	bl	81efc <__aeabi_cdcmpeq>
   81f14:	bf0c      	ite	eq
   81f16:	2001      	moveq	r0, #1
   81f18:	2000      	movne	r0, #0
   81f1a:	f85d fb08 	ldr.w	pc, [sp], #8
   81f1e:	bf00      	nop

00081f20 <__aeabi_dcmplt>:
   81f20:	f84d ed08 	str.w	lr, [sp, #-8]!
   81f24:	f7ff ffea 	bl	81efc <__aeabi_cdcmpeq>
   81f28:	bf34      	ite	cc
   81f2a:	2001      	movcc	r0, #1
   81f2c:	2000      	movcs	r0, #0
   81f2e:	f85d fb08 	ldr.w	pc, [sp], #8
   81f32:	bf00      	nop

00081f34 <__aeabi_dcmple>:
   81f34:	f84d ed08 	str.w	lr, [sp, #-8]!
   81f38:	f7ff ffe0 	bl	81efc <__aeabi_cdcmpeq>
   81f3c:	bf94      	ite	ls
   81f3e:	2001      	movls	r0, #1
   81f40:	2000      	movhi	r0, #0
   81f42:	f85d fb08 	ldr.w	pc, [sp], #8
   81f46:	bf00      	nop

00081f48 <__aeabi_dcmpge>:
   81f48:	f84d ed08 	str.w	lr, [sp, #-8]!
   81f4c:	f7ff ffce 	bl	81eec <__aeabi_cdrcmple>
   81f50:	bf94      	ite	ls
   81f52:	2001      	movls	r0, #1
   81f54:	2000      	movhi	r0, #0
   81f56:	f85d fb08 	ldr.w	pc, [sp], #8
   81f5a:	bf00      	nop

00081f5c <__aeabi_dcmpgt>:
   81f5c:	f84d ed08 	str.w	lr, [sp, #-8]!
   81f60:	f7ff ffc4 	bl	81eec <__aeabi_cdrcmple>
   81f64:	bf34      	ite	cc
   81f66:	2001      	movcc	r0, #1
   81f68:	2000      	movcs	r0, #0
   81f6a:	f85d fb08 	ldr.w	pc, [sp], #8
   81f6e:	bf00      	nop

00081f70 <__aeabi_dcmpun>:
   81f70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   81f74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81f78:	d102      	bne.n	81f80 <__aeabi_dcmpun+0x10>
   81f7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   81f7e:	d10a      	bne.n	81f96 <__aeabi_dcmpun+0x26>
   81f80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   81f84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   81f88:	d102      	bne.n	81f90 <__aeabi_dcmpun+0x20>
   81f8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   81f8e:	d102      	bne.n	81f96 <__aeabi_dcmpun+0x26>
   81f90:	f04f 0000 	mov.w	r0, #0
   81f94:	4770      	bx	lr
   81f96:	f04f 0001 	mov.w	r0, #1
   81f9a:	4770      	bx	lr

00081f9c <__aeabi_d2iz>:
   81f9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   81fa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81fa4:	d215      	bcs.n	81fd2 <__aeabi_d2iz+0x36>
   81fa6:	d511      	bpl.n	81fcc <__aeabi_d2iz+0x30>
   81fa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81fac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   81fb0:	d912      	bls.n	81fd8 <__aeabi_d2iz+0x3c>
   81fb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   81fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   81fba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   81fbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   81fc2:	fa23 f002 	lsr.w	r0, r3, r2
   81fc6:	bf18      	it	ne
   81fc8:	4240      	negne	r0, r0
   81fca:	4770      	bx	lr
   81fcc:	f04f 0000 	mov.w	r0, #0
   81fd0:	4770      	bx	lr
   81fd2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81fd6:	d105      	bne.n	81fe4 <__aeabi_d2iz+0x48>
   81fd8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81fdc:	bf08      	it	eq
   81fde:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81fe2:	4770      	bx	lr
   81fe4:	f04f 0000 	mov.w	r0, #0
   81fe8:	4770      	bx	lr
   81fea:	bf00      	nop

00081fec <__aeabi_d2uiz>:
   81fec:	004a      	lsls	r2, r1, #1
   81fee:	d211      	bcs.n	82014 <__aeabi_d2uiz+0x28>
   81ff0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   81ff4:	d211      	bcs.n	8201a <__aeabi_d2uiz+0x2e>
   81ff6:	d50d      	bpl.n	82014 <__aeabi_d2uiz+0x28>
   81ff8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   81ffc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   82000:	d40e      	bmi.n	82020 <__aeabi_d2uiz+0x34>
   82002:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   82006:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8200a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8200e:	fa23 f002 	lsr.w	r0, r3, r2
   82012:	4770      	bx	lr
   82014:	f04f 0000 	mov.w	r0, #0
   82018:	4770      	bx	lr
   8201a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8201e:	d102      	bne.n	82026 <__aeabi_d2uiz+0x3a>
   82020:	f04f 30ff 	mov.w	r0, #4294967295
   82024:	4770      	bx	lr
   82026:	f04f 0000 	mov.w	r0, #0
   8202a:	4770      	bx	lr

0008202c <__aeabi_uldivmod>:
   8202c:	b953      	cbnz	r3, 82044 <__aeabi_uldivmod+0x18>
   8202e:	b94a      	cbnz	r2, 82044 <__aeabi_uldivmod+0x18>
   82030:	2900      	cmp	r1, #0
   82032:	bf08      	it	eq
   82034:	2800      	cmpeq	r0, #0
   82036:	bf1c      	itt	ne
   82038:	f04f 31ff 	movne.w	r1, #4294967295
   8203c:	f04f 30ff 	movne.w	r0, #4294967295
   82040:	f000 b97a 	b.w	82338 <__aeabi_idiv0>
   82044:	f1ad 0c08 	sub.w	ip, sp, #8
   82048:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8204c:	f000 f806 	bl	8205c <__udivmoddi4>
   82050:	f8dd e004 	ldr.w	lr, [sp, #4]
   82054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   82058:	b004      	add	sp, #16
   8205a:	4770      	bx	lr

0008205c <__udivmoddi4>:
   8205c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82060:	468c      	mov	ip, r1
   82062:	460e      	mov	r6, r1
   82064:	4604      	mov	r4, r0
   82066:	9d08      	ldr	r5, [sp, #32]
   82068:	2b00      	cmp	r3, #0
   8206a:	d150      	bne.n	8210e <__udivmoddi4+0xb2>
   8206c:	428a      	cmp	r2, r1
   8206e:	4617      	mov	r7, r2
   82070:	d96c      	bls.n	8214c <__udivmoddi4+0xf0>
   82072:	fab2 fe82 	clz	lr, r2
   82076:	f1be 0f00 	cmp.w	lr, #0
   8207a:	d00b      	beq.n	82094 <__udivmoddi4+0x38>
   8207c:	f1ce 0c20 	rsb	ip, lr, #32
   82080:	fa01 f60e 	lsl.w	r6, r1, lr
   82084:	fa20 fc0c 	lsr.w	ip, r0, ip
   82088:	fa02 f70e 	lsl.w	r7, r2, lr
   8208c:	ea4c 0c06 	orr.w	ip, ip, r6
   82090:	fa00 f40e 	lsl.w	r4, r0, lr
   82094:	0c3a      	lsrs	r2, r7, #16
   82096:	fbbc f9f2 	udiv	r9, ip, r2
   8209a:	b2bb      	uxth	r3, r7
   8209c:	fb02 cc19 	mls	ip, r2, r9, ip
   820a0:	fb09 fa03 	mul.w	sl, r9, r3
   820a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   820a8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   820ac:	45b2      	cmp	sl, r6
   820ae:	d90a      	bls.n	820c6 <__udivmoddi4+0x6a>
   820b0:	19f6      	adds	r6, r6, r7
   820b2:	f109 31ff 	add.w	r1, r9, #4294967295
   820b6:	f080 8125 	bcs.w	82304 <__udivmoddi4+0x2a8>
   820ba:	45b2      	cmp	sl, r6
   820bc:	f240 8122 	bls.w	82304 <__udivmoddi4+0x2a8>
   820c0:	f1a9 0902 	sub.w	r9, r9, #2
   820c4:	443e      	add	r6, r7
   820c6:	eba6 060a 	sub.w	r6, r6, sl
   820ca:	fbb6 f0f2 	udiv	r0, r6, r2
   820ce:	fb02 6610 	mls	r6, r2, r0, r6
   820d2:	fb00 f303 	mul.w	r3, r0, r3
   820d6:	b2a4      	uxth	r4, r4
   820d8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   820dc:	42a3      	cmp	r3, r4
   820de:	d909      	bls.n	820f4 <__udivmoddi4+0x98>
   820e0:	19e4      	adds	r4, r4, r7
   820e2:	f100 32ff 	add.w	r2, r0, #4294967295
   820e6:	f080 810b 	bcs.w	82300 <__udivmoddi4+0x2a4>
   820ea:	42a3      	cmp	r3, r4
   820ec:	f240 8108 	bls.w	82300 <__udivmoddi4+0x2a4>
   820f0:	3802      	subs	r0, #2
   820f2:	443c      	add	r4, r7
   820f4:	2100      	movs	r1, #0
   820f6:	1ae4      	subs	r4, r4, r3
   820f8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   820fc:	2d00      	cmp	r5, #0
   820fe:	d062      	beq.n	821c6 <__udivmoddi4+0x16a>
   82100:	2300      	movs	r3, #0
   82102:	fa24 f40e 	lsr.w	r4, r4, lr
   82106:	602c      	str	r4, [r5, #0]
   82108:	606b      	str	r3, [r5, #4]
   8210a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8210e:	428b      	cmp	r3, r1
   82110:	d907      	bls.n	82122 <__udivmoddi4+0xc6>
   82112:	2d00      	cmp	r5, #0
   82114:	d055      	beq.n	821c2 <__udivmoddi4+0x166>
   82116:	2100      	movs	r1, #0
   82118:	e885 0041 	stmia.w	r5, {r0, r6}
   8211c:	4608      	mov	r0, r1
   8211e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82122:	fab3 f183 	clz	r1, r3
   82126:	2900      	cmp	r1, #0
   82128:	f040 808f 	bne.w	8224a <__udivmoddi4+0x1ee>
   8212c:	42b3      	cmp	r3, r6
   8212e:	d302      	bcc.n	82136 <__udivmoddi4+0xda>
   82130:	4282      	cmp	r2, r0
   82132:	f200 80fc 	bhi.w	8232e <__udivmoddi4+0x2d2>
   82136:	1a84      	subs	r4, r0, r2
   82138:	eb66 0603 	sbc.w	r6, r6, r3
   8213c:	2001      	movs	r0, #1
   8213e:	46b4      	mov	ip, r6
   82140:	2d00      	cmp	r5, #0
   82142:	d040      	beq.n	821c6 <__udivmoddi4+0x16a>
   82144:	e885 1010 	stmia.w	r5, {r4, ip}
   82148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8214c:	b912      	cbnz	r2, 82154 <__udivmoddi4+0xf8>
   8214e:	2701      	movs	r7, #1
   82150:	fbb7 f7f2 	udiv	r7, r7, r2
   82154:	fab7 fe87 	clz	lr, r7
   82158:	f1be 0f00 	cmp.w	lr, #0
   8215c:	d135      	bne.n	821ca <__udivmoddi4+0x16e>
   8215e:	2101      	movs	r1, #1
   82160:	1bf6      	subs	r6, r6, r7
   82162:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   82166:	fa1f f887 	uxth.w	r8, r7
   8216a:	fbb6 f2fc 	udiv	r2, r6, ip
   8216e:	fb0c 6612 	mls	r6, ip, r2, r6
   82172:	fb08 f002 	mul.w	r0, r8, r2
   82176:	0c23      	lsrs	r3, r4, #16
   82178:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8217c:	42b0      	cmp	r0, r6
   8217e:	d907      	bls.n	82190 <__udivmoddi4+0x134>
   82180:	19f6      	adds	r6, r6, r7
   82182:	f102 33ff 	add.w	r3, r2, #4294967295
   82186:	d202      	bcs.n	8218e <__udivmoddi4+0x132>
   82188:	42b0      	cmp	r0, r6
   8218a:	f200 80d2 	bhi.w	82332 <__udivmoddi4+0x2d6>
   8218e:	461a      	mov	r2, r3
   82190:	1a36      	subs	r6, r6, r0
   82192:	fbb6 f0fc 	udiv	r0, r6, ip
   82196:	fb0c 6610 	mls	r6, ip, r0, r6
   8219a:	fb08 f800 	mul.w	r8, r8, r0
   8219e:	b2a3      	uxth	r3, r4
   821a0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   821a4:	45a0      	cmp	r8, r4
   821a6:	d907      	bls.n	821b8 <__udivmoddi4+0x15c>
   821a8:	19e4      	adds	r4, r4, r7
   821aa:	f100 33ff 	add.w	r3, r0, #4294967295
   821ae:	d202      	bcs.n	821b6 <__udivmoddi4+0x15a>
   821b0:	45a0      	cmp	r8, r4
   821b2:	f200 80b9 	bhi.w	82328 <__udivmoddi4+0x2cc>
   821b6:	4618      	mov	r0, r3
   821b8:	eba4 0408 	sub.w	r4, r4, r8
   821bc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   821c0:	e79c      	b.n	820fc <__udivmoddi4+0xa0>
   821c2:	4629      	mov	r1, r5
   821c4:	4628      	mov	r0, r5
   821c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   821ca:	fa07 f70e 	lsl.w	r7, r7, lr
   821ce:	f1ce 0320 	rsb	r3, lr, #32
   821d2:	fa26 f203 	lsr.w	r2, r6, r3
   821d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   821da:	fbb2 f1fc 	udiv	r1, r2, ip
   821de:	fa1f f887 	uxth.w	r8, r7
   821e2:	fb0c 2211 	mls	r2, ip, r1, r2
   821e6:	fa06 f60e 	lsl.w	r6, r6, lr
   821ea:	fa20 f303 	lsr.w	r3, r0, r3
   821ee:	fb01 f908 	mul.w	r9, r1, r8
   821f2:	4333      	orrs	r3, r6
   821f4:	0c1e      	lsrs	r6, r3, #16
   821f6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   821fa:	45b1      	cmp	r9, r6
   821fc:	fa00 f40e 	lsl.w	r4, r0, lr
   82200:	d909      	bls.n	82216 <__udivmoddi4+0x1ba>
   82202:	19f6      	adds	r6, r6, r7
   82204:	f101 32ff 	add.w	r2, r1, #4294967295
   82208:	f080 808c 	bcs.w	82324 <__udivmoddi4+0x2c8>
   8220c:	45b1      	cmp	r9, r6
   8220e:	f240 8089 	bls.w	82324 <__udivmoddi4+0x2c8>
   82212:	3902      	subs	r1, #2
   82214:	443e      	add	r6, r7
   82216:	eba6 0609 	sub.w	r6, r6, r9
   8221a:	fbb6 f0fc 	udiv	r0, r6, ip
   8221e:	fb0c 6210 	mls	r2, ip, r0, r6
   82222:	fb00 f908 	mul.w	r9, r0, r8
   82226:	b29e      	uxth	r6, r3
   82228:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8222c:	45b1      	cmp	r9, r6
   8222e:	d907      	bls.n	82240 <__udivmoddi4+0x1e4>
   82230:	19f6      	adds	r6, r6, r7
   82232:	f100 33ff 	add.w	r3, r0, #4294967295
   82236:	d271      	bcs.n	8231c <__udivmoddi4+0x2c0>
   82238:	45b1      	cmp	r9, r6
   8223a:	d96f      	bls.n	8231c <__udivmoddi4+0x2c0>
   8223c:	3802      	subs	r0, #2
   8223e:	443e      	add	r6, r7
   82240:	eba6 0609 	sub.w	r6, r6, r9
   82244:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   82248:	e78f      	b.n	8216a <__udivmoddi4+0x10e>
   8224a:	f1c1 0720 	rsb	r7, r1, #32
   8224e:	fa22 f807 	lsr.w	r8, r2, r7
   82252:	408b      	lsls	r3, r1
   82254:	ea48 0303 	orr.w	r3, r8, r3
   82258:	fa26 f407 	lsr.w	r4, r6, r7
   8225c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   82260:	fbb4 f9fe 	udiv	r9, r4, lr
   82264:	fa1f fc83 	uxth.w	ip, r3
   82268:	fb0e 4419 	mls	r4, lr, r9, r4
   8226c:	408e      	lsls	r6, r1
   8226e:	fa20 f807 	lsr.w	r8, r0, r7
   82272:	fb09 fa0c 	mul.w	sl, r9, ip
   82276:	ea48 0806 	orr.w	r8, r8, r6
   8227a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8227e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   82282:	45a2      	cmp	sl, r4
   82284:	fa02 f201 	lsl.w	r2, r2, r1
   82288:	fa00 f601 	lsl.w	r6, r0, r1
   8228c:	d908      	bls.n	822a0 <__udivmoddi4+0x244>
   8228e:	18e4      	adds	r4, r4, r3
   82290:	f109 30ff 	add.w	r0, r9, #4294967295
   82294:	d244      	bcs.n	82320 <__udivmoddi4+0x2c4>
   82296:	45a2      	cmp	sl, r4
   82298:	d942      	bls.n	82320 <__udivmoddi4+0x2c4>
   8229a:	f1a9 0902 	sub.w	r9, r9, #2
   8229e:	441c      	add	r4, r3
   822a0:	eba4 040a 	sub.w	r4, r4, sl
   822a4:	fbb4 f0fe 	udiv	r0, r4, lr
   822a8:	fb0e 4410 	mls	r4, lr, r0, r4
   822ac:	fb00 fc0c 	mul.w	ip, r0, ip
   822b0:	fa1f f888 	uxth.w	r8, r8
   822b4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   822b8:	45a4      	cmp	ip, r4
   822ba:	d907      	bls.n	822cc <__udivmoddi4+0x270>
   822bc:	18e4      	adds	r4, r4, r3
   822be:	f100 3eff 	add.w	lr, r0, #4294967295
   822c2:	d229      	bcs.n	82318 <__udivmoddi4+0x2bc>
   822c4:	45a4      	cmp	ip, r4
   822c6:	d927      	bls.n	82318 <__udivmoddi4+0x2bc>
   822c8:	3802      	subs	r0, #2
   822ca:	441c      	add	r4, r3
   822cc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   822d0:	fba0 8902 	umull	r8, r9, r0, r2
   822d4:	eba4 0c0c 	sub.w	ip, r4, ip
   822d8:	45cc      	cmp	ip, r9
   822da:	46c2      	mov	sl, r8
   822dc:	46ce      	mov	lr, r9
   822de:	d315      	bcc.n	8230c <__udivmoddi4+0x2b0>
   822e0:	d012      	beq.n	82308 <__udivmoddi4+0x2ac>
   822e2:	b155      	cbz	r5, 822fa <__udivmoddi4+0x29e>
   822e4:	ebb6 030a 	subs.w	r3, r6, sl
   822e8:	eb6c 060e 	sbc.w	r6, ip, lr
   822ec:	fa06 f707 	lsl.w	r7, r6, r7
   822f0:	40cb      	lsrs	r3, r1
   822f2:	431f      	orrs	r7, r3
   822f4:	40ce      	lsrs	r6, r1
   822f6:	602f      	str	r7, [r5, #0]
   822f8:	606e      	str	r6, [r5, #4]
   822fa:	2100      	movs	r1, #0
   822fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82300:	4610      	mov	r0, r2
   82302:	e6f7      	b.n	820f4 <__udivmoddi4+0x98>
   82304:	4689      	mov	r9, r1
   82306:	e6de      	b.n	820c6 <__udivmoddi4+0x6a>
   82308:	4546      	cmp	r6, r8
   8230a:	d2ea      	bcs.n	822e2 <__udivmoddi4+0x286>
   8230c:	ebb8 0a02 	subs.w	sl, r8, r2
   82310:	eb69 0e03 	sbc.w	lr, r9, r3
   82314:	3801      	subs	r0, #1
   82316:	e7e4      	b.n	822e2 <__udivmoddi4+0x286>
   82318:	4670      	mov	r0, lr
   8231a:	e7d7      	b.n	822cc <__udivmoddi4+0x270>
   8231c:	4618      	mov	r0, r3
   8231e:	e78f      	b.n	82240 <__udivmoddi4+0x1e4>
   82320:	4681      	mov	r9, r0
   82322:	e7bd      	b.n	822a0 <__udivmoddi4+0x244>
   82324:	4611      	mov	r1, r2
   82326:	e776      	b.n	82216 <__udivmoddi4+0x1ba>
   82328:	3802      	subs	r0, #2
   8232a:	443c      	add	r4, r7
   8232c:	e744      	b.n	821b8 <__udivmoddi4+0x15c>
   8232e:	4608      	mov	r0, r1
   82330:	e706      	b.n	82140 <__udivmoddi4+0xe4>
   82332:	3a02      	subs	r2, #2
   82334:	443e      	add	r6, r7
   82336:	e72b      	b.n	82190 <__udivmoddi4+0x134>

00082338 <__aeabi_idiv0>:
   82338:	4770      	bx	lr
   8233a:	bf00      	nop

0008233c <__errno>:
   8233c:	4b01      	ldr	r3, [pc, #4]	; (82344 <__errno+0x8>)
   8233e:	6818      	ldr	r0, [r3, #0]
   82340:	4770      	bx	lr
   82342:	bf00      	nop
   82344:	20070154 	.word	0x20070154

00082348 <__libc_init_array>:
   82348:	b570      	push	{r4, r5, r6, lr}
   8234a:	4e0f      	ldr	r6, [pc, #60]	; (82388 <__libc_init_array+0x40>)
   8234c:	4d0f      	ldr	r5, [pc, #60]	; (8238c <__libc_init_array+0x44>)
   8234e:	1b76      	subs	r6, r6, r5
   82350:	10b6      	asrs	r6, r6, #2
   82352:	bf18      	it	ne
   82354:	2400      	movne	r4, #0
   82356:	d005      	beq.n	82364 <__libc_init_array+0x1c>
   82358:	3401      	adds	r4, #1
   8235a:	f855 3b04 	ldr.w	r3, [r5], #4
   8235e:	4798      	blx	r3
   82360:	42a6      	cmp	r6, r4
   82362:	d1f9      	bne.n	82358 <__libc_init_array+0x10>
   82364:	4e0a      	ldr	r6, [pc, #40]	; (82390 <__libc_init_array+0x48>)
   82366:	4d0b      	ldr	r5, [pc, #44]	; (82394 <__libc_init_array+0x4c>)
   82368:	f002 fe98 	bl	8509c <_init>
   8236c:	1b76      	subs	r6, r6, r5
   8236e:	10b6      	asrs	r6, r6, #2
   82370:	bf18      	it	ne
   82372:	2400      	movne	r4, #0
   82374:	d006      	beq.n	82384 <__libc_init_array+0x3c>
   82376:	3401      	adds	r4, #1
   82378:	f855 3b04 	ldr.w	r3, [r5], #4
   8237c:	4798      	blx	r3
   8237e:	42a6      	cmp	r6, r4
   82380:	d1f9      	bne.n	82376 <__libc_init_array+0x2e>
   82382:	bd70      	pop	{r4, r5, r6, pc}
   82384:	bd70      	pop	{r4, r5, r6, pc}
   82386:	bf00      	nop
   82388:	000850a8 	.word	0x000850a8
   8238c:	000850a8 	.word	0x000850a8
   82390:	000850b0 	.word	0x000850b0
   82394:	000850a8 	.word	0x000850a8

00082398 <iprintf>:
   82398:	b40f      	push	{r0, r1, r2, r3}
   8239a:	b510      	push	{r4, lr}
   8239c:	4b07      	ldr	r3, [pc, #28]	; (823bc <iprintf+0x24>)
   8239e:	b082      	sub	sp, #8
   823a0:	ac04      	add	r4, sp, #16
   823a2:	f854 2b04 	ldr.w	r2, [r4], #4
   823a6:	6818      	ldr	r0, [r3, #0]
   823a8:	4623      	mov	r3, r4
   823aa:	6881      	ldr	r1, [r0, #8]
   823ac:	9401      	str	r4, [sp, #4]
   823ae:	f000 fa09 	bl	827c4 <_vfiprintf_r>
   823b2:	b002      	add	sp, #8
   823b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   823b8:	b004      	add	sp, #16
   823ba:	4770      	bx	lr
   823bc:	20070154 	.word	0x20070154

000823c0 <memcpy>:
   823c0:	4684      	mov	ip, r0
   823c2:	ea41 0300 	orr.w	r3, r1, r0
   823c6:	f013 0303 	ands.w	r3, r3, #3
   823ca:	d149      	bne.n	82460 <memcpy+0xa0>
   823cc:	3a40      	subs	r2, #64	; 0x40
   823ce:	d323      	bcc.n	82418 <memcpy+0x58>
   823d0:	680b      	ldr	r3, [r1, #0]
   823d2:	6003      	str	r3, [r0, #0]
   823d4:	684b      	ldr	r3, [r1, #4]
   823d6:	6043      	str	r3, [r0, #4]
   823d8:	688b      	ldr	r3, [r1, #8]
   823da:	6083      	str	r3, [r0, #8]
   823dc:	68cb      	ldr	r3, [r1, #12]
   823de:	60c3      	str	r3, [r0, #12]
   823e0:	690b      	ldr	r3, [r1, #16]
   823e2:	6103      	str	r3, [r0, #16]
   823e4:	694b      	ldr	r3, [r1, #20]
   823e6:	6143      	str	r3, [r0, #20]
   823e8:	698b      	ldr	r3, [r1, #24]
   823ea:	6183      	str	r3, [r0, #24]
   823ec:	69cb      	ldr	r3, [r1, #28]
   823ee:	61c3      	str	r3, [r0, #28]
   823f0:	6a0b      	ldr	r3, [r1, #32]
   823f2:	6203      	str	r3, [r0, #32]
   823f4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   823f6:	6243      	str	r3, [r0, #36]	; 0x24
   823f8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   823fa:	6283      	str	r3, [r0, #40]	; 0x28
   823fc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   823fe:	62c3      	str	r3, [r0, #44]	; 0x2c
   82400:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82402:	6303      	str	r3, [r0, #48]	; 0x30
   82404:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82406:	6343      	str	r3, [r0, #52]	; 0x34
   82408:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8240a:	6383      	str	r3, [r0, #56]	; 0x38
   8240c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8240e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82410:	3040      	adds	r0, #64	; 0x40
   82412:	3140      	adds	r1, #64	; 0x40
   82414:	3a40      	subs	r2, #64	; 0x40
   82416:	d2db      	bcs.n	823d0 <memcpy+0x10>
   82418:	3230      	adds	r2, #48	; 0x30
   8241a:	d30b      	bcc.n	82434 <memcpy+0x74>
   8241c:	680b      	ldr	r3, [r1, #0]
   8241e:	6003      	str	r3, [r0, #0]
   82420:	684b      	ldr	r3, [r1, #4]
   82422:	6043      	str	r3, [r0, #4]
   82424:	688b      	ldr	r3, [r1, #8]
   82426:	6083      	str	r3, [r0, #8]
   82428:	68cb      	ldr	r3, [r1, #12]
   8242a:	60c3      	str	r3, [r0, #12]
   8242c:	3010      	adds	r0, #16
   8242e:	3110      	adds	r1, #16
   82430:	3a10      	subs	r2, #16
   82432:	d2f3      	bcs.n	8241c <memcpy+0x5c>
   82434:	320c      	adds	r2, #12
   82436:	d305      	bcc.n	82444 <memcpy+0x84>
   82438:	f851 3b04 	ldr.w	r3, [r1], #4
   8243c:	f840 3b04 	str.w	r3, [r0], #4
   82440:	3a04      	subs	r2, #4
   82442:	d2f9      	bcs.n	82438 <memcpy+0x78>
   82444:	3204      	adds	r2, #4
   82446:	d008      	beq.n	8245a <memcpy+0x9a>
   82448:	07d2      	lsls	r2, r2, #31
   8244a:	bf1c      	itt	ne
   8244c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82450:	f800 3b01 	strbne.w	r3, [r0], #1
   82454:	d301      	bcc.n	8245a <memcpy+0x9a>
   82456:	880b      	ldrh	r3, [r1, #0]
   82458:	8003      	strh	r3, [r0, #0]
   8245a:	4660      	mov	r0, ip
   8245c:	4770      	bx	lr
   8245e:	bf00      	nop
   82460:	2a08      	cmp	r2, #8
   82462:	d313      	bcc.n	8248c <memcpy+0xcc>
   82464:	078b      	lsls	r3, r1, #30
   82466:	d0b1      	beq.n	823cc <memcpy+0xc>
   82468:	f010 0303 	ands.w	r3, r0, #3
   8246c:	d0ae      	beq.n	823cc <memcpy+0xc>
   8246e:	f1c3 0304 	rsb	r3, r3, #4
   82472:	1ad2      	subs	r2, r2, r3
   82474:	07db      	lsls	r3, r3, #31
   82476:	bf1c      	itt	ne
   82478:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8247c:	f800 3b01 	strbne.w	r3, [r0], #1
   82480:	d3a4      	bcc.n	823cc <memcpy+0xc>
   82482:	f831 3b02 	ldrh.w	r3, [r1], #2
   82486:	f820 3b02 	strh.w	r3, [r0], #2
   8248a:	e79f      	b.n	823cc <memcpy+0xc>
   8248c:	3a04      	subs	r2, #4
   8248e:	d3d9      	bcc.n	82444 <memcpy+0x84>
   82490:	3a01      	subs	r2, #1
   82492:	f811 3b01 	ldrb.w	r3, [r1], #1
   82496:	f800 3b01 	strb.w	r3, [r0], #1
   8249a:	d2f9      	bcs.n	82490 <memcpy+0xd0>
   8249c:	780b      	ldrb	r3, [r1, #0]
   8249e:	7003      	strb	r3, [r0, #0]
   824a0:	784b      	ldrb	r3, [r1, #1]
   824a2:	7043      	strb	r3, [r0, #1]
   824a4:	788b      	ldrb	r3, [r1, #2]
   824a6:	7083      	strb	r3, [r0, #2]
   824a8:	4660      	mov	r0, ip
   824aa:	4770      	bx	lr

000824ac <memset>:
   824ac:	b470      	push	{r4, r5, r6}
   824ae:	0786      	lsls	r6, r0, #30
   824b0:	d046      	beq.n	82540 <memset+0x94>
   824b2:	1e54      	subs	r4, r2, #1
   824b4:	2a00      	cmp	r2, #0
   824b6:	d041      	beq.n	8253c <memset+0x90>
   824b8:	b2ca      	uxtb	r2, r1
   824ba:	4603      	mov	r3, r0
   824bc:	e002      	b.n	824c4 <memset+0x18>
   824be:	f114 34ff 	adds.w	r4, r4, #4294967295
   824c2:	d33b      	bcc.n	8253c <memset+0x90>
   824c4:	f803 2b01 	strb.w	r2, [r3], #1
   824c8:	079d      	lsls	r5, r3, #30
   824ca:	d1f8      	bne.n	824be <memset+0x12>
   824cc:	2c03      	cmp	r4, #3
   824ce:	d92e      	bls.n	8252e <memset+0x82>
   824d0:	b2cd      	uxtb	r5, r1
   824d2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   824d6:	2c0f      	cmp	r4, #15
   824d8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   824dc:	d919      	bls.n	82512 <memset+0x66>
   824de:	4626      	mov	r6, r4
   824e0:	f103 0210 	add.w	r2, r3, #16
   824e4:	3e10      	subs	r6, #16
   824e6:	2e0f      	cmp	r6, #15
   824e8:	f842 5c10 	str.w	r5, [r2, #-16]
   824ec:	f842 5c0c 	str.w	r5, [r2, #-12]
   824f0:	f842 5c08 	str.w	r5, [r2, #-8]
   824f4:	f842 5c04 	str.w	r5, [r2, #-4]
   824f8:	f102 0210 	add.w	r2, r2, #16
   824fc:	d8f2      	bhi.n	824e4 <memset+0x38>
   824fe:	f1a4 0210 	sub.w	r2, r4, #16
   82502:	f022 020f 	bic.w	r2, r2, #15
   82506:	f004 040f 	and.w	r4, r4, #15
   8250a:	3210      	adds	r2, #16
   8250c:	2c03      	cmp	r4, #3
   8250e:	4413      	add	r3, r2
   82510:	d90d      	bls.n	8252e <memset+0x82>
   82512:	461e      	mov	r6, r3
   82514:	4622      	mov	r2, r4
   82516:	3a04      	subs	r2, #4
   82518:	2a03      	cmp	r2, #3
   8251a:	f846 5b04 	str.w	r5, [r6], #4
   8251e:	d8fa      	bhi.n	82516 <memset+0x6a>
   82520:	1f22      	subs	r2, r4, #4
   82522:	f022 0203 	bic.w	r2, r2, #3
   82526:	3204      	adds	r2, #4
   82528:	4413      	add	r3, r2
   8252a:	f004 0403 	and.w	r4, r4, #3
   8252e:	b12c      	cbz	r4, 8253c <memset+0x90>
   82530:	b2c9      	uxtb	r1, r1
   82532:	441c      	add	r4, r3
   82534:	f803 1b01 	strb.w	r1, [r3], #1
   82538:	429c      	cmp	r4, r3
   8253a:	d1fb      	bne.n	82534 <memset+0x88>
   8253c:	bc70      	pop	{r4, r5, r6}
   8253e:	4770      	bx	lr
   82540:	4614      	mov	r4, r2
   82542:	4603      	mov	r3, r0
   82544:	e7c2      	b.n	824cc <memset+0x20>
   82546:	bf00      	nop

00082548 <setbuf>:
   82548:	2900      	cmp	r1, #0
   8254a:	bf0c      	ite	eq
   8254c:	2202      	moveq	r2, #2
   8254e:	2200      	movne	r2, #0
   82550:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82554:	f000 b800 	b.w	82558 <setvbuf>

00082558 <setvbuf>:
   82558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8255c:	4d61      	ldr	r5, [pc, #388]	; (826e4 <setvbuf+0x18c>)
   8255e:	b083      	sub	sp, #12
   82560:	682d      	ldr	r5, [r5, #0]
   82562:	4604      	mov	r4, r0
   82564:	460f      	mov	r7, r1
   82566:	4690      	mov	r8, r2
   82568:	461e      	mov	r6, r3
   8256a:	b115      	cbz	r5, 82572 <setvbuf+0x1a>
   8256c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8256e:	2b00      	cmp	r3, #0
   82570:	d064      	beq.n	8263c <setvbuf+0xe4>
   82572:	f1b8 0f02 	cmp.w	r8, #2
   82576:	d006      	beq.n	82586 <setvbuf+0x2e>
   82578:	f1b8 0f01 	cmp.w	r8, #1
   8257c:	f200 809f 	bhi.w	826be <setvbuf+0x166>
   82580:	2e00      	cmp	r6, #0
   82582:	f2c0 809c 	blt.w	826be <setvbuf+0x166>
   82586:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82588:	07d8      	lsls	r0, r3, #31
   8258a:	d534      	bpl.n	825f6 <setvbuf+0x9e>
   8258c:	4621      	mov	r1, r4
   8258e:	4628      	mov	r0, r5
   82590:	f001 f8b0 	bl	836f4 <_fflush_r>
   82594:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82596:	b141      	cbz	r1, 825aa <setvbuf+0x52>
   82598:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8259c:	4299      	cmp	r1, r3
   8259e:	d002      	beq.n	825a6 <setvbuf+0x4e>
   825a0:	4628      	mov	r0, r5
   825a2:	f001 fa25 	bl	839f0 <_free_r>
   825a6:	2300      	movs	r3, #0
   825a8:	6323      	str	r3, [r4, #48]	; 0x30
   825aa:	2200      	movs	r2, #0
   825ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   825b0:	61a2      	str	r2, [r4, #24]
   825b2:	6062      	str	r2, [r4, #4]
   825b4:	061a      	lsls	r2, r3, #24
   825b6:	d43a      	bmi.n	8262e <setvbuf+0xd6>
   825b8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   825bc:	f023 0303 	bic.w	r3, r3, #3
   825c0:	f1b8 0f02 	cmp.w	r8, #2
   825c4:	81a3      	strh	r3, [r4, #12]
   825c6:	d01d      	beq.n	82604 <setvbuf+0xac>
   825c8:	ab01      	add	r3, sp, #4
   825ca:	466a      	mov	r2, sp
   825cc:	4621      	mov	r1, r4
   825ce:	4628      	mov	r0, r5
   825d0:	f001 fcac 	bl	83f2c <__swhatbuf_r>
   825d4:	89a3      	ldrh	r3, [r4, #12]
   825d6:	4318      	orrs	r0, r3
   825d8:	81a0      	strh	r0, [r4, #12]
   825da:	2e00      	cmp	r6, #0
   825dc:	d132      	bne.n	82644 <setvbuf+0xec>
   825de:	9e00      	ldr	r6, [sp, #0]
   825e0:	4630      	mov	r0, r6
   825e2:	f001 fd1b 	bl	8401c <malloc>
   825e6:	4607      	mov	r7, r0
   825e8:	2800      	cmp	r0, #0
   825ea:	d06b      	beq.n	826c4 <setvbuf+0x16c>
   825ec:	89a3      	ldrh	r3, [r4, #12]
   825ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   825f2:	81a3      	strh	r3, [r4, #12]
   825f4:	e028      	b.n	82648 <setvbuf+0xf0>
   825f6:	89a3      	ldrh	r3, [r4, #12]
   825f8:	0599      	lsls	r1, r3, #22
   825fa:	d4c7      	bmi.n	8258c <setvbuf+0x34>
   825fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   825fe:	f001 fc91 	bl	83f24 <__retarget_lock_acquire_recursive>
   82602:	e7c3      	b.n	8258c <setvbuf+0x34>
   82604:	2500      	movs	r5, #0
   82606:	2600      	movs	r6, #0
   82608:	2001      	movs	r0, #1
   8260a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8260c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82610:	f043 0302 	orr.w	r3, r3, #2
   82614:	60a6      	str	r6, [r4, #8]
   82616:	07ce      	lsls	r6, r1, #31
   82618:	81a3      	strh	r3, [r4, #12]
   8261a:	6160      	str	r0, [r4, #20]
   8261c:	6022      	str	r2, [r4, #0]
   8261e:	6122      	str	r2, [r4, #16]
   82620:	d401      	bmi.n	82626 <setvbuf+0xce>
   82622:	0598      	lsls	r0, r3, #22
   82624:	d53e      	bpl.n	826a4 <setvbuf+0x14c>
   82626:	4628      	mov	r0, r5
   82628:	b003      	add	sp, #12
   8262a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8262e:	6921      	ldr	r1, [r4, #16]
   82630:	4628      	mov	r0, r5
   82632:	f001 f9dd 	bl	839f0 <_free_r>
   82636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8263a:	e7bd      	b.n	825b8 <setvbuf+0x60>
   8263c:	4628      	mov	r0, r5
   8263e:	f001 f8b1 	bl	837a4 <__sinit>
   82642:	e796      	b.n	82572 <setvbuf+0x1a>
   82644:	2f00      	cmp	r7, #0
   82646:	d0cb      	beq.n	825e0 <setvbuf+0x88>
   82648:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8264a:	2b00      	cmp	r3, #0
   8264c:	d033      	beq.n	826b6 <setvbuf+0x15e>
   8264e:	9b00      	ldr	r3, [sp, #0]
   82650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82654:	429e      	cmp	r6, r3
   82656:	bf1c      	itt	ne
   82658:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   8265c:	81a2      	strhne	r2, [r4, #12]
   8265e:	f1b8 0f01 	cmp.w	r8, #1
   82662:	bf04      	itt	eq
   82664:	f042 0201 	orreq.w	r2, r2, #1
   82668:	81a2      	strheq	r2, [r4, #12]
   8266a:	b292      	uxth	r2, r2
   8266c:	f012 0308 	ands.w	r3, r2, #8
   82670:	6027      	str	r7, [r4, #0]
   82672:	6127      	str	r7, [r4, #16]
   82674:	6166      	str	r6, [r4, #20]
   82676:	d00e      	beq.n	82696 <setvbuf+0x13e>
   82678:	07d1      	lsls	r1, r2, #31
   8267a:	d51a      	bpl.n	826b2 <setvbuf+0x15a>
   8267c:	2300      	movs	r3, #0
   8267e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82680:	4276      	negs	r6, r6
   82682:	f015 0501 	ands.w	r5, r5, #1
   82686:	61a6      	str	r6, [r4, #24]
   82688:	60a3      	str	r3, [r4, #8]
   8268a:	d009      	beq.n	826a0 <setvbuf+0x148>
   8268c:	2500      	movs	r5, #0
   8268e:	4628      	mov	r0, r5
   82690:	b003      	add	sp, #12
   82692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82696:	60a3      	str	r3, [r4, #8]
   82698:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8269a:	f015 0501 	ands.w	r5, r5, #1
   8269e:	d1f5      	bne.n	8268c <setvbuf+0x134>
   826a0:	0593      	lsls	r3, r2, #22
   826a2:	d4c0      	bmi.n	82626 <setvbuf+0xce>
   826a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   826a6:	f001 fc3f 	bl	83f28 <__retarget_lock_release_recursive>
   826aa:	4628      	mov	r0, r5
   826ac:	b003      	add	sp, #12
   826ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   826b2:	60a6      	str	r6, [r4, #8]
   826b4:	e7f0      	b.n	82698 <setvbuf+0x140>
   826b6:	4628      	mov	r0, r5
   826b8:	f001 f874 	bl	837a4 <__sinit>
   826bc:	e7c7      	b.n	8264e <setvbuf+0xf6>
   826be:	f04f 35ff 	mov.w	r5, #4294967295
   826c2:	e7b0      	b.n	82626 <setvbuf+0xce>
   826c4:	f8dd 9000 	ldr.w	r9, [sp]
   826c8:	45b1      	cmp	r9, r6
   826ca:	d004      	beq.n	826d6 <setvbuf+0x17e>
   826cc:	4648      	mov	r0, r9
   826ce:	f001 fca5 	bl	8401c <malloc>
   826d2:	4607      	mov	r7, r0
   826d4:	b920      	cbnz	r0, 826e0 <setvbuf+0x188>
   826d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   826da:	f04f 35ff 	mov.w	r5, #4294967295
   826de:	e792      	b.n	82606 <setvbuf+0xae>
   826e0:	464e      	mov	r6, r9
   826e2:	e783      	b.n	825ec <setvbuf+0x94>
   826e4:	20070154 	.word	0x20070154

000826e8 <strlen>:
   826e8:	f020 0103 	bic.w	r1, r0, #3
   826ec:	f010 0003 	ands.w	r0, r0, #3
   826f0:	f1c0 0000 	rsb	r0, r0, #0
   826f4:	f851 3b04 	ldr.w	r3, [r1], #4
   826f8:	f100 0c04 	add.w	ip, r0, #4
   826fc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82700:	f06f 0200 	mvn.w	r2, #0
   82704:	bf1c      	itt	ne
   82706:	fa22 f20c 	lsrne.w	r2, r2, ip
   8270a:	4313      	orrne	r3, r2
   8270c:	f04f 0c01 	mov.w	ip, #1
   82710:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82714:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82718:	eba3 020c 	sub.w	r2, r3, ip
   8271c:	ea22 0203 	bic.w	r2, r2, r3
   82720:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82724:	bf04      	itt	eq
   82726:	f851 3b04 	ldreq.w	r3, [r1], #4
   8272a:	3004      	addeq	r0, #4
   8272c:	d0f4      	beq.n	82718 <strlen+0x30>
   8272e:	f1c2 0100 	rsb	r1, r2, #0
   82732:	ea02 0201 	and.w	r2, r2, r1
   82736:	fab2 f282 	clz	r2, r2
   8273a:	f1c2 021f 	rsb	r2, r2, #31
   8273e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82742:	4770      	bx	lr

00082744 <__sprint_r.part.0>:
   82744:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82748:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8274a:	4693      	mov	fp, r2
   8274c:	049c      	lsls	r4, r3, #18
   8274e:	d52f      	bpl.n	827b0 <__sprint_r.part.0+0x6c>
   82750:	6893      	ldr	r3, [r2, #8]
   82752:	6812      	ldr	r2, [r2, #0]
   82754:	b353      	cbz	r3, 827ac <__sprint_r.part.0+0x68>
   82756:	460e      	mov	r6, r1
   82758:	4607      	mov	r7, r0
   8275a:	f102 0908 	add.w	r9, r2, #8
   8275e:	e919 0420 	ldmdb	r9, {r5, sl}
   82762:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82766:	d017      	beq.n	82798 <__sprint_r.part.0+0x54>
   82768:	2400      	movs	r4, #0
   8276a:	3d04      	subs	r5, #4
   8276c:	e001      	b.n	82772 <__sprint_r.part.0+0x2e>
   8276e:	45a0      	cmp	r8, r4
   82770:	d010      	beq.n	82794 <__sprint_r.part.0+0x50>
   82772:	4632      	mov	r2, r6
   82774:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82778:	4638      	mov	r0, r7
   8277a:	f001 f8b5 	bl	838e8 <_fputwc_r>
   8277e:	1c43      	adds	r3, r0, #1
   82780:	f104 0401 	add.w	r4, r4, #1
   82784:	d1f3      	bne.n	8276e <__sprint_r.part.0+0x2a>
   82786:	2300      	movs	r3, #0
   82788:	f8cb 3008 	str.w	r3, [fp, #8]
   8278c:	f8cb 3004 	str.w	r3, [fp, #4]
   82790:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82794:	f8db 3008 	ldr.w	r3, [fp, #8]
   82798:	f02a 0a03 	bic.w	sl, sl, #3
   8279c:	eba3 030a 	sub.w	r3, r3, sl
   827a0:	f8cb 3008 	str.w	r3, [fp, #8]
   827a4:	f109 0908 	add.w	r9, r9, #8
   827a8:	2b00      	cmp	r3, #0
   827aa:	d1d8      	bne.n	8275e <__sprint_r.part.0+0x1a>
   827ac:	2000      	movs	r0, #0
   827ae:	e7ea      	b.n	82786 <__sprint_r.part.0+0x42>
   827b0:	f001 fa04 	bl	83bbc <__sfvwrite_r>
   827b4:	2300      	movs	r3, #0
   827b6:	f8cb 3008 	str.w	r3, [fp, #8]
   827ba:	f8cb 3004 	str.w	r3, [fp, #4]
   827be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827c2:	bf00      	nop

000827c4 <_vfiprintf_r>:
   827c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   827c8:	b0ad      	sub	sp, #180	; 0xb4
   827ca:	461d      	mov	r5, r3
   827cc:	468b      	mov	fp, r1
   827ce:	4690      	mov	r8, r2
   827d0:	9307      	str	r3, [sp, #28]
   827d2:	9006      	str	r0, [sp, #24]
   827d4:	b118      	cbz	r0, 827de <_vfiprintf_r+0x1a>
   827d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   827d8:	2b00      	cmp	r3, #0
   827da:	f000 80f3 	beq.w	829c4 <_vfiprintf_r+0x200>
   827de:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   827e2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   827e6:	07df      	lsls	r7, r3, #31
   827e8:	b281      	uxth	r1, r0
   827ea:	d402      	bmi.n	827f2 <_vfiprintf_r+0x2e>
   827ec:	058e      	lsls	r6, r1, #22
   827ee:	f140 80fc 	bpl.w	829ea <_vfiprintf_r+0x226>
   827f2:	048c      	lsls	r4, r1, #18
   827f4:	d40a      	bmi.n	8280c <_vfiprintf_r+0x48>
   827f6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   827fa:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   827fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82802:	f8ab 100c 	strh.w	r1, [fp, #12]
   82806:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8280a:	b289      	uxth	r1, r1
   8280c:	0708      	lsls	r0, r1, #28
   8280e:	f140 80b3 	bpl.w	82978 <_vfiprintf_r+0x1b4>
   82812:	f8db 3010 	ldr.w	r3, [fp, #16]
   82816:	2b00      	cmp	r3, #0
   82818:	f000 80ae 	beq.w	82978 <_vfiprintf_r+0x1b4>
   8281c:	f001 031a 	and.w	r3, r1, #26
   82820:	2b0a      	cmp	r3, #10
   82822:	f000 80b5 	beq.w	82990 <_vfiprintf_r+0x1cc>
   82826:	2300      	movs	r3, #0
   82828:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   8282c:	46d1      	mov	r9, sl
   8282e:	930b      	str	r3, [sp, #44]	; 0x2c
   82830:	9303      	str	r3, [sp, #12]
   82832:	9311      	str	r3, [sp, #68]	; 0x44
   82834:	9310      	str	r3, [sp, #64]	; 0x40
   82836:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8283a:	f8cd b010 	str.w	fp, [sp, #16]
   8283e:	f898 3000 	ldrb.w	r3, [r8]
   82842:	4644      	mov	r4, r8
   82844:	b1fb      	cbz	r3, 82886 <_vfiprintf_r+0xc2>
   82846:	2b25      	cmp	r3, #37	; 0x25
   82848:	d102      	bne.n	82850 <_vfiprintf_r+0x8c>
   8284a:	e01c      	b.n	82886 <_vfiprintf_r+0xc2>
   8284c:	2b25      	cmp	r3, #37	; 0x25
   8284e:	d003      	beq.n	82858 <_vfiprintf_r+0x94>
   82850:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82854:	2b00      	cmp	r3, #0
   82856:	d1f9      	bne.n	8284c <_vfiprintf_r+0x88>
   82858:	eba4 0508 	sub.w	r5, r4, r8
   8285c:	b19d      	cbz	r5, 82886 <_vfiprintf_r+0xc2>
   8285e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82860:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82862:	3301      	adds	r3, #1
   82864:	442a      	add	r2, r5
   82866:	2b07      	cmp	r3, #7
   82868:	f8c9 8000 	str.w	r8, [r9]
   8286c:	f8c9 5004 	str.w	r5, [r9, #4]
   82870:	9211      	str	r2, [sp, #68]	; 0x44
   82872:	9310      	str	r3, [sp, #64]	; 0x40
   82874:	dd7a      	ble.n	8296c <_vfiprintf_r+0x1a8>
   82876:	2a00      	cmp	r2, #0
   82878:	f040 84b5 	bne.w	831e6 <_vfiprintf_r+0xa22>
   8287c:	46d1      	mov	r9, sl
   8287e:	9b03      	ldr	r3, [sp, #12]
   82880:	9210      	str	r2, [sp, #64]	; 0x40
   82882:	442b      	add	r3, r5
   82884:	9303      	str	r3, [sp, #12]
   82886:	7823      	ldrb	r3, [r4, #0]
   82888:	2b00      	cmp	r3, #0
   8288a:	f000 83e5 	beq.w	83058 <_vfiprintf_r+0x894>
   8288e:	2000      	movs	r0, #0
   82890:	f04f 0300 	mov.w	r3, #0
   82894:	f104 0801 	add.w	r8, r4, #1
   82898:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8289c:	7862      	ldrb	r2, [r4, #1]
   8289e:	4606      	mov	r6, r0
   828a0:	4605      	mov	r5, r0
   828a2:	4603      	mov	r3, r0
   828a4:	f04f 34ff 	mov.w	r4, #4294967295
   828a8:	f108 0801 	add.w	r8, r8, #1
   828ac:	f1a2 0120 	sub.w	r1, r2, #32
   828b0:	2958      	cmp	r1, #88	; 0x58
   828b2:	f200 82d9 	bhi.w	82e68 <_vfiprintf_r+0x6a4>
   828b6:	e8df f011 	tbh	[pc, r1, lsl #1]
   828ba:	0228      	.short	0x0228
   828bc:	02d702d7 	.word	0x02d702d7
   828c0:	02d70230 	.word	0x02d70230
   828c4:	02d702d7 	.word	0x02d702d7
   828c8:	02d702d7 	.word	0x02d702d7
   828cc:	00a002d7 	.word	0x00a002d7
   828d0:	02d70288 	.word	0x02d70288
   828d4:	02b800a8 	.word	0x02b800a8
   828d8:	01a602d7 	.word	0x01a602d7
   828dc:	01ab01ab 	.word	0x01ab01ab
   828e0:	01ab01ab 	.word	0x01ab01ab
   828e4:	01ab01ab 	.word	0x01ab01ab
   828e8:	01ab01ab 	.word	0x01ab01ab
   828ec:	02d701ab 	.word	0x02d701ab
   828f0:	02d702d7 	.word	0x02d702d7
   828f4:	02d702d7 	.word	0x02d702d7
   828f8:	02d702d7 	.word	0x02d702d7
   828fc:	02d702d7 	.word	0x02d702d7
   82900:	01b902d7 	.word	0x01b902d7
   82904:	02d702d7 	.word	0x02d702d7
   82908:	02d702d7 	.word	0x02d702d7
   8290c:	02d702d7 	.word	0x02d702d7
   82910:	02d702d7 	.word	0x02d702d7
   82914:	02d702d7 	.word	0x02d702d7
   82918:	02d7019e 	.word	0x02d7019e
   8291c:	02d702d7 	.word	0x02d702d7
   82920:	02d702d7 	.word	0x02d702d7
   82924:	02d701a2 	.word	0x02d701a2
   82928:	025a02d7 	.word	0x025a02d7
   8292c:	02d702d7 	.word	0x02d702d7
   82930:	02d702d7 	.word	0x02d702d7
   82934:	02d702d7 	.word	0x02d702d7
   82938:	02d702d7 	.word	0x02d702d7
   8293c:	02d702d7 	.word	0x02d702d7
   82940:	02220261 	.word	0x02220261
   82944:	02d702d7 	.word	0x02d702d7
   82948:	027602d7 	.word	0x027602d7
   8294c:	02d70222 	.word	0x02d70222
   82950:	027b02d7 	.word	0x027b02d7
   82954:	01fc02d7 	.word	0x01fc02d7
   82958:	02100189 	.word	0x02100189
   8295c:	02d702d2 	.word	0x02d702d2
   82960:	02d70295 	.word	0x02d70295
   82964:	02d700ad 	.word	0x02d700ad
   82968:	023502d7 	.word	0x023502d7
   8296c:	f109 0908 	add.w	r9, r9, #8
   82970:	9b03      	ldr	r3, [sp, #12]
   82972:	442b      	add	r3, r5
   82974:	9303      	str	r3, [sp, #12]
   82976:	e786      	b.n	82886 <_vfiprintf_r+0xc2>
   82978:	4659      	mov	r1, fp
   8297a:	9806      	ldr	r0, [sp, #24]
   8297c:	f000 fdaa 	bl	834d4 <__swsetup_r>
   82980:	bb18      	cbnz	r0, 829ca <_vfiprintf_r+0x206>
   82982:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82986:	f001 031a 	and.w	r3, r1, #26
   8298a:	2b0a      	cmp	r3, #10
   8298c:	f47f af4b 	bne.w	82826 <_vfiprintf_r+0x62>
   82990:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82994:	2b00      	cmp	r3, #0
   82996:	f6ff af46 	blt.w	82826 <_vfiprintf_r+0x62>
   8299a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8299e:	07db      	lsls	r3, r3, #31
   829a0:	d405      	bmi.n	829ae <_vfiprintf_r+0x1ea>
   829a2:	058f      	lsls	r7, r1, #22
   829a4:	d403      	bmi.n	829ae <_vfiprintf_r+0x1ea>
   829a6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   829aa:	f001 fabd 	bl	83f28 <__retarget_lock_release_recursive>
   829ae:	462b      	mov	r3, r5
   829b0:	4642      	mov	r2, r8
   829b2:	4659      	mov	r1, fp
   829b4:	9806      	ldr	r0, [sp, #24]
   829b6:	f000 fd49 	bl	8344c <__sbprintf>
   829ba:	9003      	str	r0, [sp, #12]
   829bc:	9803      	ldr	r0, [sp, #12]
   829be:	b02d      	add	sp, #180	; 0xb4
   829c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829c4:	f000 feee 	bl	837a4 <__sinit>
   829c8:	e709      	b.n	827de <_vfiprintf_r+0x1a>
   829ca:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   829ce:	07d9      	lsls	r1, r3, #31
   829d0:	d404      	bmi.n	829dc <_vfiprintf_r+0x218>
   829d2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   829d6:	059a      	lsls	r2, r3, #22
   829d8:	f140 84ae 	bpl.w	83338 <_vfiprintf_r+0xb74>
   829dc:	f04f 33ff 	mov.w	r3, #4294967295
   829e0:	9303      	str	r3, [sp, #12]
   829e2:	9803      	ldr	r0, [sp, #12]
   829e4:	b02d      	add	sp, #180	; 0xb4
   829e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829ea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   829ee:	f001 fa99 	bl	83f24 <__retarget_lock_acquire_recursive>
   829f2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   829f6:	b281      	uxth	r1, r0
   829f8:	e6fb      	b.n	827f2 <_vfiprintf_r+0x2e>
   829fa:	9907      	ldr	r1, [sp, #28]
   829fc:	460a      	mov	r2, r1
   829fe:	680d      	ldr	r5, [r1, #0]
   82a00:	3204      	adds	r2, #4
   82a02:	2d00      	cmp	r5, #0
   82a04:	9207      	str	r2, [sp, #28]
   82a06:	da02      	bge.n	82a0e <_vfiprintf_r+0x24a>
   82a08:	426d      	negs	r5, r5
   82a0a:	f043 0304 	orr.w	r3, r3, #4
   82a0e:	f898 2000 	ldrb.w	r2, [r8]
   82a12:	e749      	b.n	828a8 <_vfiprintf_r+0xe4>
   82a14:	9508      	str	r5, [sp, #32]
   82a16:	069e      	lsls	r6, r3, #26
   82a18:	f100 845a 	bmi.w	832d0 <_vfiprintf_r+0xb0c>
   82a1c:	9907      	ldr	r1, [sp, #28]
   82a1e:	06dd      	lsls	r5, r3, #27
   82a20:	460a      	mov	r2, r1
   82a22:	f100 83ef 	bmi.w	83204 <_vfiprintf_r+0xa40>
   82a26:	0658      	lsls	r0, r3, #25
   82a28:	f140 83ec 	bpl.w	83204 <_vfiprintf_r+0xa40>
   82a2c:	2700      	movs	r7, #0
   82a2e:	2201      	movs	r2, #1
   82a30:	880e      	ldrh	r6, [r1, #0]
   82a32:	3104      	adds	r1, #4
   82a34:	9107      	str	r1, [sp, #28]
   82a36:	f04f 0100 	mov.w	r1, #0
   82a3a:	2500      	movs	r5, #0
   82a3c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82a40:	1c61      	adds	r1, r4, #1
   82a42:	f000 8117 	beq.w	82c74 <_vfiprintf_r+0x4b0>
   82a46:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   82a4a:	9102      	str	r1, [sp, #8]
   82a4c:	ea56 0107 	orrs.w	r1, r6, r7
   82a50:	f040 8115 	bne.w	82c7e <_vfiprintf_r+0x4ba>
   82a54:	2c00      	cmp	r4, #0
   82a56:	f040 835b 	bne.w	83110 <_vfiprintf_r+0x94c>
   82a5a:	2a00      	cmp	r2, #0
   82a5c:	f040 83b6 	bne.w	831cc <_vfiprintf_r+0xa08>
   82a60:	f013 0301 	ands.w	r3, r3, #1
   82a64:	9305      	str	r3, [sp, #20]
   82a66:	f000 8455 	beq.w	83314 <_vfiprintf_r+0xb50>
   82a6a:	2330      	movs	r3, #48	; 0x30
   82a6c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82a70:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82a74:	9b05      	ldr	r3, [sp, #20]
   82a76:	42a3      	cmp	r3, r4
   82a78:	bfb8      	it	lt
   82a7a:	4623      	movlt	r3, r4
   82a7c:	9301      	str	r3, [sp, #4]
   82a7e:	b10d      	cbz	r5, 82a84 <_vfiprintf_r+0x2c0>
   82a80:	3301      	adds	r3, #1
   82a82:	9301      	str	r3, [sp, #4]
   82a84:	9b02      	ldr	r3, [sp, #8]
   82a86:	f013 0302 	ands.w	r3, r3, #2
   82a8a:	9309      	str	r3, [sp, #36]	; 0x24
   82a8c:	d002      	beq.n	82a94 <_vfiprintf_r+0x2d0>
   82a8e:	9b01      	ldr	r3, [sp, #4]
   82a90:	3302      	adds	r3, #2
   82a92:	9301      	str	r3, [sp, #4]
   82a94:	9b02      	ldr	r3, [sp, #8]
   82a96:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82a9a:	930a      	str	r3, [sp, #40]	; 0x28
   82a9c:	f040 8215 	bne.w	82eca <_vfiprintf_r+0x706>
   82aa0:	9b08      	ldr	r3, [sp, #32]
   82aa2:	9a01      	ldr	r2, [sp, #4]
   82aa4:	1a9d      	subs	r5, r3, r2
   82aa6:	2d00      	cmp	r5, #0
   82aa8:	f340 820f 	ble.w	82eca <_vfiprintf_r+0x706>
   82aac:	2d10      	cmp	r5, #16
   82aae:	f340 8484 	ble.w	833ba <_vfiprintf_r+0xbf6>
   82ab2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82ab4:	46ce      	mov	lr, r9
   82ab6:	2710      	movs	r7, #16
   82ab8:	46a1      	mov	r9, r4
   82aba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82abc:	4ec5      	ldr	r6, [pc, #788]	; (82dd4 <_vfiprintf_r+0x610>)
   82abe:	4619      	mov	r1, r3
   82ac0:	9c06      	ldr	r4, [sp, #24]
   82ac2:	e007      	b.n	82ad4 <_vfiprintf_r+0x310>
   82ac4:	f101 0c02 	add.w	ip, r1, #2
   82ac8:	4601      	mov	r1, r0
   82aca:	f10e 0e08 	add.w	lr, lr, #8
   82ace:	3d10      	subs	r5, #16
   82ad0:	2d10      	cmp	r5, #16
   82ad2:	dd11      	ble.n	82af8 <_vfiprintf_r+0x334>
   82ad4:	1c48      	adds	r0, r1, #1
   82ad6:	3210      	adds	r2, #16
   82ad8:	2807      	cmp	r0, #7
   82ada:	9211      	str	r2, [sp, #68]	; 0x44
   82adc:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82ae0:	9010      	str	r0, [sp, #64]	; 0x40
   82ae2:	ddef      	ble.n	82ac4 <_vfiprintf_r+0x300>
   82ae4:	2a00      	cmp	r2, #0
   82ae6:	f040 81d9 	bne.w	82e9c <_vfiprintf_r+0x6d8>
   82aea:	3d10      	subs	r5, #16
   82aec:	2d10      	cmp	r5, #16
   82aee:	4611      	mov	r1, r2
   82af0:	f04f 0c01 	mov.w	ip, #1
   82af4:	46d6      	mov	lr, sl
   82af6:	dced      	bgt.n	82ad4 <_vfiprintf_r+0x310>
   82af8:	464c      	mov	r4, r9
   82afa:	4661      	mov	r1, ip
   82afc:	46f1      	mov	r9, lr
   82afe:	442a      	add	r2, r5
   82b00:	2907      	cmp	r1, #7
   82b02:	9211      	str	r2, [sp, #68]	; 0x44
   82b04:	f8c9 6000 	str.w	r6, [r9]
   82b08:	f8c9 5004 	str.w	r5, [r9, #4]
   82b0c:	9110      	str	r1, [sp, #64]	; 0x40
   82b0e:	f300 82eb 	bgt.w	830e8 <_vfiprintf_r+0x924>
   82b12:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82b16:	f109 0908 	add.w	r9, r9, #8
   82b1a:	1c48      	adds	r0, r1, #1
   82b1c:	2d00      	cmp	r5, #0
   82b1e:	f040 81dc 	bne.w	82eda <_vfiprintf_r+0x716>
   82b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82b24:	2b00      	cmp	r3, #0
   82b26:	f000 81f6 	beq.w	82f16 <_vfiprintf_r+0x752>
   82b2a:	2102      	movs	r1, #2
   82b2c:	ab0e      	add	r3, sp, #56	; 0x38
   82b2e:	440a      	add	r2, r1
   82b30:	2807      	cmp	r0, #7
   82b32:	9211      	str	r2, [sp, #68]	; 0x44
   82b34:	9010      	str	r0, [sp, #64]	; 0x40
   82b36:	f8c9 1004 	str.w	r1, [r9, #4]
   82b3a:	f8c9 3000 	str.w	r3, [r9]
   82b3e:	f340 81e6 	ble.w	82f0e <_vfiprintf_r+0x74a>
   82b42:	2a00      	cmp	r2, #0
   82b44:	f040 8395 	bne.w	83272 <_vfiprintf_r+0xaae>
   82b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82b4a:	2001      	movs	r0, #1
   82b4c:	2b80      	cmp	r3, #128	; 0x80
   82b4e:	4611      	mov	r1, r2
   82b50:	46d1      	mov	r9, sl
   82b52:	f040 81e4 	bne.w	82f1e <_vfiprintf_r+0x75a>
   82b56:	9b08      	ldr	r3, [sp, #32]
   82b58:	9d01      	ldr	r5, [sp, #4]
   82b5a:	1b5e      	subs	r6, r3, r5
   82b5c:	2e00      	cmp	r6, #0
   82b5e:	f340 81de 	ble.w	82f1e <_vfiprintf_r+0x75a>
   82b62:	2e10      	cmp	r6, #16
   82b64:	f340 843c 	ble.w	833e0 <_vfiprintf_r+0xc1c>
   82b68:	46cc      	mov	ip, r9
   82b6a:	2710      	movs	r7, #16
   82b6c:	46a1      	mov	r9, r4
   82b6e:	4d9a      	ldr	r5, [pc, #616]	; (82dd8 <_vfiprintf_r+0x614>)
   82b70:	9c06      	ldr	r4, [sp, #24]
   82b72:	e007      	b.n	82b84 <_vfiprintf_r+0x3c0>
   82b74:	f101 0e02 	add.w	lr, r1, #2
   82b78:	4601      	mov	r1, r0
   82b7a:	f10c 0c08 	add.w	ip, ip, #8
   82b7e:	3e10      	subs	r6, #16
   82b80:	2e10      	cmp	r6, #16
   82b82:	dd11      	ble.n	82ba8 <_vfiprintf_r+0x3e4>
   82b84:	1c48      	adds	r0, r1, #1
   82b86:	3210      	adds	r2, #16
   82b88:	2807      	cmp	r0, #7
   82b8a:	9211      	str	r2, [sp, #68]	; 0x44
   82b8c:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82b90:	9010      	str	r0, [sp, #64]	; 0x40
   82b92:	ddef      	ble.n	82b74 <_vfiprintf_r+0x3b0>
   82b94:	2a00      	cmp	r2, #0
   82b96:	f040 829b 	bne.w	830d0 <_vfiprintf_r+0x90c>
   82b9a:	3e10      	subs	r6, #16
   82b9c:	2e10      	cmp	r6, #16
   82b9e:	f04f 0e01 	mov.w	lr, #1
   82ba2:	4611      	mov	r1, r2
   82ba4:	46d4      	mov	ip, sl
   82ba6:	dced      	bgt.n	82b84 <_vfiprintf_r+0x3c0>
   82ba8:	464c      	mov	r4, r9
   82baa:	46e1      	mov	r9, ip
   82bac:	4432      	add	r2, r6
   82bae:	f1be 0f07 	cmp.w	lr, #7
   82bb2:	9211      	str	r2, [sp, #68]	; 0x44
   82bb4:	e889 0060 	stmia.w	r9, {r5, r6}
   82bb8:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82bbc:	f300 8366 	bgt.w	8328c <_vfiprintf_r+0xac8>
   82bc0:	f109 0908 	add.w	r9, r9, #8
   82bc4:	f10e 0001 	add.w	r0, lr, #1
   82bc8:	4671      	mov	r1, lr
   82bca:	e1a8      	b.n	82f1e <_vfiprintf_r+0x75a>
   82bcc:	9508      	str	r5, [sp, #32]
   82bce:	f013 0220 	ands.w	r2, r3, #32
   82bd2:	f040 8389 	bne.w	832e8 <_vfiprintf_r+0xb24>
   82bd6:	f013 0110 	ands.w	r1, r3, #16
   82bda:	f040 8319 	bne.w	83210 <_vfiprintf_r+0xa4c>
   82bde:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82be2:	f000 8315 	beq.w	83210 <_vfiprintf_r+0xa4c>
   82be6:	9807      	ldr	r0, [sp, #28]
   82be8:	460a      	mov	r2, r1
   82bea:	4601      	mov	r1, r0
   82bec:	3104      	adds	r1, #4
   82bee:	8806      	ldrh	r6, [r0, #0]
   82bf0:	2700      	movs	r7, #0
   82bf2:	9107      	str	r1, [sp, #28]
   82bf4:	e71f      	b.n	82a36 <_vfiprintf_r+0x272>
   82bf6:	9508      	str	r5, [sp, #32]
   82bf8:	f043 0310 	orr.w	r3, r3, #16
   82bfc:	e7e7      	b.n	82bce <_vfiprintf_r+0x40a>
   82bfe:	9508      	str	r5, [sp, #32]
   82c00:	f043 0310 	orr.w	r3, r3, #16
   82c04:	e707      	b.n	82a16 <_vfiprintf_r+0x252>
   82c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82c0a:	f898 2000 	ldrb.w	r2, [r8]
   82c0e:	e64b      	b.n	828a8 <_vfiprintf_r+0xe4>
   82c10:	2500      	movs	r5, #0
   82c12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82c16:	f818 2b01 	ldrb.w	r2, [r8], #1
   82c1a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82c1e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82c22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82c26:	2909      	cmp	r1, #9
   82c28:	d9f5      	bls.n	82c16 <_vfiprintf_r+0x452>
   82c2a:	e63f      	b.n	828ac <_vfiprintf_r+0xe8>
   82c2c:	9508      	str	r5, [sp, #32]
   82c2e:	2800      	cmp	r0, #0
   82c30:	f040 8402 	bne.w	83438 <_vfiprintf_r+0xc74>
   82c34:	f043 0310 	orr.w	r3, r3, #16
   82c38:	069e      	lsls	r6, r3, #26
   82c3a:	f100 833d 	bmi.w	832b8 <_vfiprintf_r+0xaf4>
   82c3e:	9907      	ldr	r1, [sp, #28]
   82c40:	06dd      	lsls	r5, r3, #27
   82c42:	460a      	mov	r2, r1
   82c44:	f100 82f0 	bmi.w	83228 <_vfiprintf_r+0xa64>
   82c48:	0658      	lsls	r0, r3, #25
   82c4a:	f140 82ed 	bpl.w	83228 <_vfiprintf_r+0xa64>
   82c4e:	f9b1 6000 	ldrsh.w	r6, [r1]
   82c52:	3204      	adds	r2, #4
   82c54:	17f7      	asrs	r7, r6, #31
   82c56:	4630      	mov	r0, r6
   82c58:	4639      	mov	r1, r7
   82c5a:	9207      	str	r2, [sp, #28]
   82c5c:	2800      	cmp	r0, #0
   82c5e:	f171 0200 	sbcs.w	r2, r1, #0
   82c62:	f2c0 835a 	blt.w	8331a <_vfiprintf_r+0xb56>
   82c66:	1c61      	adds	r1, r4, #1
   82c68:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82c6c:	f04f 0201 	mov.w	r2, #1
   82c70:	f47f aee9 	bne.w	82a46 <_vfiprintf_r+0x282>
   82c74:	ea56 0107 	orrs.w	r1, r6, r7
   82c78:	f000 824b 	beq.w	83112 <_vfiprintf_r+0x94e>
   82c7c:	9302      	str	r3, [sp, #8]
   82c7e:	2a01      	cmp	r2, #1
   82c80:	f000 828a 	beq.w	83198 <_vfiprintf_r+0x9d4>
   82c84:	2a02      	cmp	r2, #2
   82c86:	f040 825a 	bne.w	8313e <_vfiprintf_r+0x97a>
   82c8a:	46d3      	mov	fp, sl
   82c8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   82c8e:	0933      	lsrs	r3, r6, #4
   82c90:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82c94:	0939      	lsrs	r1, r7, #4
   82c96:	f006 020f 	and.w	r2, r6, #15
   82c9a:	460f      	mov	r7, r1
   82c9c:	461e      	mov	r6, r3
   82c9e:	5c83      	ldrb	r3, [r0, r2]
   82ca0:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82ca4:	ea56 0307 	orrs.w	r3, r6, r7
   82ca8:	d1f1      	bne.n	82c8e <_vfiprintf_r+0x4ca>
   82caa:	ebaa 030b 	sub.w	r3, sl, fp
   82cae:	9305      	str	r3, [sp, #20]
   82cb0:	e6e0      	b.n	82a74 <_vfiprintf_r+0x2b0>
   82cb2:	2800      	cmp	r0, #0
   82cb4:	f040 83bd 	bne.w	83432 <_vfiprintf_r+0xc6e>
   82cb8:	0699      	lsls	r1, r3, #26
   82cba:	f100 8359 	bmi.w	83370 <_vfiprintf_r+0xbac>
   82cbe:	06da      	lsls	r2, r3, #27
   82cc0:	f100 80e5 	bmi.w	82e8e <_vfiprintf_r+0x6ca>
   82cc4:	065b      	lsls	r3, r3, #25
   82cc6:	f140 80e2 	bpl.w	82e8e <_vfiprintf_r+0x6ca>
   82cca:	9a07      	ldr	r2, [sp, #28]
   82ccc:	6813      	ldr	r3, [r2, #0]
   82cce:	3204      	adds	r2, #4
   82cd0:	9207      	str	r2, [sp, #28]
   82cd2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82cd6:	801a      	strh	r2, [r3, #0]
   82cd8:	e5b1      	b.n	8283e <_vfiprintf_r+0x7a>
   82cda:	2278      	movs	r2, #120	; 0x78
   82cdc:	2130      	movs	r1, #48	; 0x30
   82cde:	9508      	str	r5, [sp, #32]
   82ce0:	9d07      	ldr	r5, [sp, #28]
   82ce2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82ce6:	1d2a      	adds	r2, r5, #4
   82ce8:	9207      	str	r2, [sp, #28]
   82cea:	4a3c      	ldr	r2, [pc, #240]	; (82ddc <_vfiprintf_r+0x618>)
   82cec:	682e      	ldr	r6, [r5, #0]
   82cee:	920b      	str	r2, [sp, #44]	; 0x2c
   82cf0:	f043 0302 	orr.w	r3, r3, #2
   82cf4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82cf8:	2700      	movs	r7, #0
   82cfa:	2202      	movs	r2, #2
   82cfc:	e69b      	b.n	82a36 <_vfiprintf_r+0x272>
   82cfe:	9508      	str	r5, [sp, #32]
   82d00:	2800      	cmp	r0, #0
   82d02:	d099      	beq.n	82c38 <_vfiprintf_r+0x474>
   82d04:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82d08:	e796      	b.n	82c38 <_vfiprintf_r+0x474>
   82d0a:	f898 2000 	ldrb.w	r2, [r8]
   82d0e:	2e00      	cmp	r6, #0
   82d10:	f47f adca 	bne.w	828a8 <_vfiprintf_r+0xe4>
   82d14:	2001      	movs	r0, #1
   82d16:	2620      	movs	r6, #32
   82d18:	e5c6      	b.n	828a8 <_vfiprintf_r+0xe4>
   82d1a:	f043 0301 	orr.w	r3, r3, #1
   82d1e:	f898 2000 	ldrb.w	r2, [r8]
   82d22:	e5c1      	b.n	828a8 <_vfiprintf_r+0xe4>
   82d24:	9508      	str	r5, [sp, #32]
   82d26:	2800      	cmp	r0, #0
   82d28:	f040 8380 	bne.w	8342c <_vfiprintf_r+0xc68>
   82d2c:	492b      	ldr	r1, [pc, #172]	; (82ddc <_vfiprintf_r+0x618>)
   82d2e:	910b      	str	r1, [sp, #44]	; 0x2c
   82d30:	069f      	lsls	r7, r3, #26
   82d32:	f100 82e5 	bmi.w	83300 <_vfiprintf_r+0xb3c>
   82d36:	9807      	ldr	r0, [sp, #28]
   82d38:	06de      	lsls	r6, r3, #27
   82d3a:	4601      	mov	r1, r0
   82d3c:	f100 826f 	bmi.w	8321e <_vfiprintf_r+0xa5a>
   82d40:	065d      	lsls	r5, r3, #25
   82d42:	f140 826c 	bpl.w	8321e <_vfiprintf_r+0xa5a>
   82d46:	2700      	movs	r7, #0
   82d48:	3104      	adds	r1, #4
   82d4a:	8806      	ldrh	r6, [r0, #0]
   82d4c:	9107      	str	r1, [sp, #28]
   82d4e:	07d8      	lsls	r0, r3, #31
   82d50:	f140 8220 	bpl.w	83194 <_vfiprintf_r+0x9d0>
   82d54:	ea56 0107 	orrs.w	r1, r6, r7
   82d58:	f000 821c 	beq.w	83194 <_vfiprintf_r+0x9d0>
   82d5c:	2130      	movs	r1, #48	; 0x30
   82d5e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82d62:	f043 0302 	orr.w	r3, r3, #2
   82d66:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82d6a:	2202      	movs	r2, #2
   82d6c:	e663      	b.n	82a36 <_vfiprintf_r+0x272>
   82d6e:	9508      	str	r5, [sp, #32]
   82d70:	2800      	cmp	r0, #0
   82d72:	f040 8355 	bne.w	83420 <_vfiprintf_r+0xc5c>
   82d76:	491a      	ldr	r1, [pc, #104]	; (82de0 <_vfiprintf_r+0x61c>)
   82d78:	910b      	str	r1, [sp, #44]	; 0x2c
   82d7a:	e7d9      	b.n	82d30 <_vfiprintf_r+0x56c>
   82d7c:	2201      	movs	r2, #1
   82d7e:	9807      	ldr	r0, [sp, #28]
   82d80:	4611      	mov	r1, r2
   82d82:	9201      	str	r2, [sp, #4]
   82d84:	6802      	ldr	r2, [r0, #0]
   82d86:	f04f 0400 	mov.w	r4, #0
   82d8a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82d8e:	4602      	mov	r2, r0
   82d90:	3204      	adds	r2, #4
   82d92:	9508      	str	r5, [sp, #32]
   82d94:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82d98:	9105      	str	r1, [sp, #20]
   82d9a:	9207      	str	r2, [sp, #28]
   82d9c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82da0:	9302      	str	r3, [sp, #8]
   82da2:	2400      	movs	r4, #0
   82da4:	e66e      	b.n	82a84 <_vfiprintf_r+0x2c0>
   82da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82daa:	f898 2000 	ldrb.w	r2, [r8]
   82dae:	e57b      	b.n	828a8 <_vfiprintf_r+0xe4>
   82db0:	f898 2000 	ldrb.w	r2, [r8]
   82db4:	2a6c      	cmp	r2, #108	; 0x6c
   82db6:	bf03      	ittte	eq
   82db8:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   82dbc:	f043 0320 	orreq.w	r3, r3, #32
   82dc0:	f108 0801 	addeq.w	r8, r8, #1
   82dc4:	f043 0310 	orrne.w	r3, r3, #16
   82dc8:	e56e      	b.n	828a8 <_vfiprintf_r+0xe4>
   82dca:	f898 2000 	ldrb.w	r2, [r8]
   82dce:	2001      	movs	r0, #1
   82dd0:	262b      	movs	r6, #43	; 0x2b
   82dd2:	e569      	b.n	828a8 <_vfiprintf_r+0xe4>
   82dd4:	00084f68 	.word	0x00084f68
   82dd8:	00084f78 	.word	0x00084f78
   82ddc:	00084f4c 	.word	0x00084f4c
   82de0:	00084f38 	.word	0x00084f38
   82de4:	f04f 0200 	mov.w	r2, #0
   82de8:	9907      	ldr	r1, [sp, #28]
   82dea:	9508      	str	r5, [sp, #32]
   82dec:	f8d1 b000 	ldr.w	fp, [r1]
   82df0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82df4:	1d0d      	adds	r5, r1, #4
   82df6:	f1bb 0f00 	cmp.w	fp, #0
   82dfa:	f000 82e4 	beq.w	833c6 <_vfiprintf_r+0xc02>
   82dfe:	1c67      	adds	r7, r4, #1
   82e00:	f000 82c3 	beq.w	8338a <_vfiprintf_r+0xbc6>
   82e04:	4622      	mov	r2, r4
   82e06:	2100      	movs	r1, #0
   82e08:	4658      	mov	r0, fp
   82e0a:	9301      	str	r3, [sp, #4]
   82e0c:	f001 fbc6 	bl	8459c <memchr>
   82e10:	9b01      	ldr	r3, [sp, #4]
   82e12:	2800      	cmp	r0, #0
   82e14:	f000 82e8 	beq.w	833e8 <_vfiprintf_r+0xc24>
   82e18:	eba0 020b 	sub.w	r2, r0, fp
   82e1c:	9507      	str	r5, [sp, #28]
   82e1e:	9205      	str	r2, [sp, #20]
   82e20:	9302      	str	r3, [sp, #8]
   82e22:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82e26:	2400      	movs	r4, #0
   82e28:	e624      	b.n	82a74 <_vfiprintf_r+0x2b0>
   82e2a:	f898 2000 	ldrb.w	r2, [r8]
   82e2e:	f108 0701 	add.w	r7, r8, #1
   82e32:	2a2a      	cmp	r2, #42	; 0x2a
   82e34:	f000 82e9 	beq.w	8340a <_vfiprintf_r+0xc46>
   82e38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82e3c:	2909      	cmp	r1, #9
   82e3e:	46b8      	mov	r8, r7
   82e40:	f04f 0400 	mov.w	r4, #0
   82e44:	f63f ad32 	bhi.w	828ac <_vfiprintf_r+0xe8>
   82e48:	f818 2b01 	ldrb.w	r2, [r8], #1
   82e4c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82e50:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   82e54:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82e58:	2909      	cmp	r1, #9
   82e5a:	d9f5      	bls.n	82e48 <_vfiprintf_r+0x684>
   82e5c:	e526      	b.n	828ac <_vfiprintf_r+0xe8>
   82e5e:	f043 0320 	orr.w	r3, r3, #32
   82e62:	f898 2000 	ldrb.w	r2, [r8]
   82e66:	e51f      	b.n	828a8 <_vfiprintf_r+0xe4>
   82e68:	9508      	str	r5, [sp, #32]
   82e6a:	2800      	cmp	r0, #0
   82e6c:	f040 82db 	bne.w	83426 <_vfiprintf_r+0xc62>
   82e70:	2a00      	cmp	r2, #0
   82e72:	f000 80f1 	beq.w	83058 <_vfiprintf_r+0x894>
   82e76:	2101      	movs	r1, #1
   82e78:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82e7c:	f04f 0200 	mov.w	r2, #0
   82e80:	9101      	str	r1, [sp, #4]
   82e82:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82e86:	9105      	str	r1, [sp, #20]
   82e88:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82e8c:	e788      	b.n	82da0 <_vfiprintf_r+0x5dc>
   82e8e:	9a07      	ldr	r2, [sp, #28]
   82e90:	6813      	ldr	r3, [r2, #0]
   82e92:	3204      	adds	r2, #4
   82e94:	9207      	str	r2, [sp, #28]
   82e96:	9a03      	ldr	r2, [sp, #12]
   82e98:	601a      	str	r2, [r3, #0]
   82e9a:	e4d0      	b.n	8283e <_vfiprintf_r+0x7a>
   82e9c:	aa0f      	add	r2, sp, #60	; 0x3c
   82e9e:	9904      	ldr	r1, [sp, #16]
   82ea0:	4620      	mov	r0, r4
   82ea2:	f7ff fc4f 	bl	82744 <__sprint_r.part.0>
   82ea6:	2800      	cmp	r0, #0
   82ea8:	f040 8143 	bne.w	83132 <_vfiprintf_r+0x96e>
   82eac:	9910      	ldr	r1, [sp, #64]	; 0x40
   82eae:	46d6      	mov	lr, sl
   82eb0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82eb2:	f101 0c01 	add.w	ip, r1, #1
   82eb6:	e60a      	b.n	82ace <_vfiprintf_r+0x30a>
   82eb8:	aa0f      	add	r2, sp, #60	; 0x3c
   82eba:	9904      	ldr	r1, [sp, #16]
   82ebc:	9806      	ldr	r0, [sp, #24]
   82ebe:	f7ff fc41 	bl	82744 <__sprint_r.part.0>
   82ec2:	2800      	cmp	r0, #0
   82ec4:	f040 8135 	bne.w	83132 <_vfiprintf_r+0x96e>
   82ec8:	46d1      	mov	r9, sl
   82eca:	9910      	ldr	r1, [sp, #64]	; 0x40
   82ecc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82ed0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82ed2:	1c48      	adds	r0, r1, #1
   82ed4:	2d00      	cmp	r5, #0
   82ed6:	f43f ae24 	beq.w	82b22 <_vfiprintf_r+0x35e>
   82eda:	2101      	movs	r1, #1
   82edc:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   82ee0:	440a      	add	r2, r1
   82ee2:	2807      	cmp	r0, #7
   82ee4:	9211      	str	r2, [sp, #68]	; 0x44
   82ee6:	9010      	str	r0, [sp, #64]	; 0x40
   82ee8:	f8c9 1004 	str.w	r1, [r9, #4]
   82eec:	f8c9 5000 	str.w	r5, [r9]
   82ef0:	f340 8109 	ble.w	83106 <_vfiprintf_r+0x942>
   82ef4:	2a00      	cmp	r2, #0
   82ef6:	f040 81af 	bne.w	83258 <_vfiprintf_r+0xa94>
   82efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82efc:	2b00      	cmp	r3, #0
   82efe:	f43f ae23 	beq.w	82b48 <_vfiprintf_r+0x384>
   82f02:	2202      	movs	r2, #2
   82f04:	4608      	mov	r0, r1
   82f06:	46d1      	mov	r9, sl
   82f08:	ab0e      	add	r3, sp, #56	; 0x38
   82f0a:	921d      	str	r2, [sp, #116]	; 0x74
   82f0c:	931c      	str	r3, [sp, #112]	; 0x70
   82f0e:	4601      	mov	r1, r0
   82f10:	f109 0908 	add.w	r9, r9, #8
   82f14:	3001      	adds	r0, #1
   82f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82f18:	2b80      	cmp	r3, #128	; 0x80
   82f1a:	f43f ae1c 	beq.w	82b56 <_vfiprintf_r+0x392>
   82f1e:	9b05      	ldr	r3, [sp, #20]
   82f20:	1ae4      	subs	r4, r4, r3
   82f22:	2c00      	cmp	r4, #0
   82f24:	dd2f      	ble.n	82f86 <_vfiprintf_r+0x7c2>
   82f26:	2c10      	cmp	r4, #16
   82f28:	f340 8220 	ble.w	8336c <_vfiprintf_r+0xba8>
   82f2c:	46ce      	mov	lr, r9
   82f2e:	2610      	movs	r6, #16
   82f30:	4db2      	ldr	r5, [pc, #712]	; (831fc <_vfiprintf_r+0xa38>)
   82f32:	9f06      	ldr	r7, [sp, #24]
   82f34:	f8dd 9010 	ldr.w	r9, [sp, #16]
   82f38:	e006      	b.n	82f48 <_vfiprintf_r+0x784>
   82f3a:	1c88      	adds	r0, r1, #2
   82f3c:	4619      	mov	r1, r3
   82f3e:	f10e 0e08 	add.w	lr, lr, #8
   82f42:	3c10      	subs	r4, #16
   82f44:	2c10      	cmp	r4, #16
   82f46:	dd10      	ble.n	82f6a <_vfiprintf_r+0x7a6>
   82f48:	1c4b      	adds	r3, r1, #1
   82f4a:	3210      	adds	r2, #16
   82f4c:	2b07      	cmp	r3, #7
   82f4e:	9211      	str	r2, [sp, #68]	; 0x44
   82f50:	e88e 0060 	stmia.w	lr, {r5, r6}
   82f54:	9310      	str	r3, [sp, #64]	; 0x40
   82f56:	ddf0      	ble.n	82f3a <_vfiprintf_r+0x776>
   82f58:	2a00      	cmp	r2, #0
   82f5a:	d165      	bne.n	83028 <_vfiprintf_r+0x864>
   82f5c:	3c10      	subs	r4, #16
   82f5e:	2c10      	cmp	r4, #16
   82f60:	f04f 0001 	mov.w	r0, #1
   82f64:	4611      	mov	r1, r2
   82f66:	46d6      	mov	lr, sl
   82f68:	dcee      	bgt.n	82f48 <_vfiprintf_r+0x784>
   82f6a:	46f1      	mov	r9, lr
   82f6c:	4422      	add	r2, r4
   82f6e:	2807      	cmp	r0, #7
   82f70:	9211      	str	r2, [sp, #68]	; 0x44
   82f72:	f8c9 5000 	str.w	r5, [r9]
   82f76:	f8c9 4004 	str.w	r4, [r9, #4]
   82f7a:	9010      	str	r0, [sp, #64]	; 0x40
   82f7c:	f300 8085 	bgt.w	8308a <_vfiprintf_r+0x8c6>
   82f80:	f109 0908 	add.w	r9, r9, #8
   82f84:	3001      	adds	r0, #1
   82f86:	9905      	ldr	r1, [sp, #20]
   82f88:	2807      	cmp	r0, #7
   82f8a:	440a      	add	r2, r1
   82f8c:	9211      	str	r2, [sp, #68]	; 0x44
   82f8e:	f8c9 b000 	str.w	fp, [r9]
   82f92:	f8c9 1004 	str.w	r1, [r9, #4]
   82f96:	9010      	str	r0, [sp, #64]	; 0x40
   82f98:	f340 8082 	ble.w	830a0 <_vfiprintf_r+0x8dc>
   82f9c:	2a00      	cmp	r2, #0
   82f9e:	f040 8118 	bne.w	831d2 <_vfiprintf_r+0xa0e>
   82fa2:	9b02      	ldr	r3, [sp, #8]
   82fa4:	9210      	str	r2, [sp, #64]	; 0x40
   82fa6:	0758      	lsls	r0, r3, #29
   82fa8:	d535      	bpl.n	83016 <_vfiprintf_r+0x852>
   82faa:	9b08      	ldr	r3, [sp, #32]
   82fac:	9901      	ldr	r1, [sp, #4]
   82fae:	1a5c      	subs	r4, r3, r1
   82fb0:	2c00      	cmp	r4, #0
   82fb2:	f340 80e7 	ble.w	83184 <_vfiprintf_r+0x9c0>
   82fb6:	46d1      	mov	r9, sl
   82fb8:	2c10      	cmp	r4, #16
   82fba:	f340 820d 	ble.w	833d8 <_vfiprintf_r+0xc14>
   82fbe:	2510      	movs	r5, #16
   82fc0:	9910      	ldr	r1, [sp, #64]	; 0x40
   82fc2:	4e8f      	ldr	r6, [pc, #572]	; (83200 <_vfiprintf_r+0xa3c>)
   82fc4:	9f06      	ldr	r7, [sp, #24]
   82fc6:	f8dd b010 	ldr.w	fp, [sp, #16]
   82fca:	e006      	b.n	82fda <_vfiprintf_r+0x816>
   82fcc:	1c88      	adds	r0, r1, #2
   82fce:	4619      	mov	r1, r3
   82fd0:	f109 0908 	add.w	r9, r9, #8
   82fd4:	3c10      	subs	r4, #16
   82fd6:	2c10      	cmp	r4, #16
   82fd8:	dd11      	ble.n	82ffe <_vfiprintf_r+0x83a>
   82fda:	1c4b      	adds	r3, r1, #1
   82fdc:	3210      	adds	r2, #16
   82fde:	2b07      	cmp	r3, #7
   82fe0:	9211      	str	r2, [sp, #68]	; 0x44
   82fe2:	f8c9 6000 	str.w	r6, [r9]
   82fe6:	f8c9 5004 	str.w	r5, [r9, #4]
   82fea:	9310      	str	r3, [sp, #64]	; 0x40
   82fec:	ddee      	ble.n	82fcc <_vfiprintf_r+0x808>
   82fee:	bb42      	cbnz	r2, 83042 <_vfiprintf_r+0x87e>
   82ff0:	3c10      	subs	r4, #16
   82ff2:	2c10      	cmp	r4, #16
   82ff4:	f04f 0001 	mov.w	r0, #1
   82ff8:	4611      	mov	r1, r2
   82ffa:	46d1      	mov	r9, sl
   82ffc:	dced      	bgt.n	82fda <_vfiprintf_r+0x816>
   82ffe:	4422      	add	r2, r4
   83000:	2807      	cmp	r0, #7
   83002:	9211      	str	r2, [sp, #68]	; 0x44
   83004:	f8c9 6000 	str.w	r6, [r9]
   83008:	f8c9 4004 	str.w	r4, [r9, #4]
   8300c:	9010      	str	r0, [sp, #64]	; 0x40
   8300e:	dd51      	ble.n	830b4 <_vfiprintf_r+0x8f0>
   83010:	2a00      	cmp	r2, #0
   83012:	f040 819a 	bne.w	8334a <_vfiprintf_r+0xb86>
   83016:	9b03      	ldr	r3, [sp, #12]
   83018:	9a08      	ldr	r2, [sp, #32]
   8301a:	9901      	ldr	r1, [sp, #4]
   8301c:	428a      	cmp	r2, r1
   8301e:	bfac      	ite	ge
   83020:	189b      	addge	r3, r3, r2
   83022:	185b      	addlt	r3, r3, r1
   83024:	9303      	str	r3, [sp, #12]
   83026:	e04e      	b.n	830c6 <_vfiprintf_r+0x902>
   83028:	aa0f      	add	r2, sp, #60	; 0x3c
   8302a:	4649      	mov	r1, r9
   8302c:	4638      	mov	r0, r7
   8302e:	f7ff fb89 	bl	82744 <__sprint_r.part.0>
   83032:	2800      	cmp	r0, #0
   83034:	f040 813e 	bne.w	832b4 <_vfiprintf_r+0xaf0>
   83038:	9910      	ldr	r1, [sp, #64]	; 0x40
   8303a:	46d6      	mov	lr, sl
   8303c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8303e:	1c48      	adds	r0, r1, #1
   83040:	e77f      	b.n	82f42 <_vfiprintf_r+0x77e>
   83042:	aa0f      	add	r2, sp, #60	; 0x3c
   83044:	4659      	mov	r1, fp
   83046:	4638      	mov	r0, r7
   83048:	f7ff fb7c 	bl	82744 <__sprint_r.part.0>
   8304c:	b960      	cbnz	r0, 83068 <_vfiprintf_r+0x8a4>
   8304e:	9910      	ldr	r1, [sp, #64]	; 0x40
   83050:	46d1      	mov	r9, sl
   83052:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83054:	1c48      	adds	r0, r1, #1
   83056:	e7bd      	b.n	82fd4 <_vfiprintf_r+0x810>
   83058:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8305a:	f8dd b010 	ldr.w	fp, [sp, #16]
   8305e:	2b00      	cmp	r3, #0
   83060:	f040 81ca 	bne.w	833f8 <_vfiprintf_r+0xc34>
   83064:	2300      	movs	r3, #0
   83066:	9310      	str	r3, [sp, #64]	; 0x40
   83068:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8306c:	f013 0f01 	tst.w	r3, #1
   83070:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83074:	d102      	bne.n	8307c <_vfiprintf_r+0x8b8>
   83076:	059a      	lsls	r2, r3, #22
   83078:	f140 80dd 	bpl.w	83236 <_vfiprintf_r+0xa72>
   8307c:	065b      	lsls	r3, r3, #25
   8307e:	f53f acad 	bmi.w	829dc <_vfiprintf_r+0x218>
   83082:	9803      	ldr	r0, [sp, #12]
   83084:	b02d      	add	sp, #180	; 0xb4
   83086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8308a:	2a00      	cmp	r2, #0
   8308c:	f040 8105 	bne.w	8329a <_vfiprintf_r+0xad6>
   83090:	2301      	movs	r3, #1
   83092:	46d1      	mov	r9, sl
   83094:	9a05      	ldr	r2, [sp, #20]
   83096:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8309a:	921d      	str	r2, [sp, #116]	; 0x74
   8309c:	9211      	str	r2, [sp, #68]	; 0x44
   8309e:	9310      	str	r3, [sp, #64]	; 0x40
   830a0:	f109 0908 	add.w	r9, r9, #8
   830a4:	9b02      	ldr	r3, [sp, #8]
   830a6:	0759      	lsls	r1, r3, #29
   830a8:	d504      	bpl.n	830b4 <_vfiprintf_r+0x8f0>
   830aa:	9b08      	ldr	r3, [sp, #32]
   830ac:	9901      	ldr	r1, [sp, #4]
   830ae:	1a5c      	subs	r4, r3, r1
   830b0:	2c00      	cmp	r4, #0
   830b2:	dc81      	bgt.n	82fb8 <_vfiprintf_r+0x7f4>
   830b4:	9b03      	ldr	r3, [sp, #12]
   830b6:	9908      	ldr	r1, [sp, #32]
   830b8:	9801      	ldr	r0, [sp, #4]
   830ba:	4281      	cmp	r1, r0
   830bc:	bfac      	ite	ge
   830be:	185b      	addge	r3, r3, r1
   830c0:	181b      	addlt	r3, r3, r0
   830c2:	9303      	str	r3, [sp, #12]
   830c4:	bb72      	cbnz	r2, 83124 <_vfiprintf_r+0x960>
   830c6:	2300      	movs	r3, #0
   830c8:	46d1      	mov	r9, sl
   830ca:	9310      	str	r3, [sp, #64]	; 0x40
   830cc:	f7ff bbb7 	b.w	8283e <_vfiprintf_r+0x7a>
   830d0:	aa0f      	add	r2, sp, #60	; 0x3c
   830d2:	9904      	ldr	r1, [sp, #16]
   830d4:	4620      	mov	r0, r4
   830d6:	f7ff fb35 	bl	82744 <__sprint_r.part.0>
   830da:	bb50      	cbnz	r0, 83132 <_vfiprintf_r+0x96e>
   830dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   830de:	46d4      	mov	ip, sl
   830e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   830e2:	f101 0e01 	add.w	lr, r1, #1
   830e6:	e54a      	b.n	82b7e <_vfiprintf_r+0x3ba>
   830e8:	2a00      	cmp	r2, #0
   830ea:	f47f aee5 	bne.w	82eb8 <_vfiprintf_r+0x6f4>
   830ee:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   830f2:	2900      	cmp	r1, #0
   830f4:	f000 811a 	beq.w	8332c <_vfiprintf_r+0xb68>
   830f8:	2201      	movs	r2, #1
   830fa:	46d1      	mov	r9, sl
   830fc:	4610      	mov	r0, r2
   830fe:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   83102:	921d      	str	r2, [sp, #116]	; 0x74
   83104:	911c      	str	r1, [sp, #112]	; 0x70
   83106:	4601      	mov	r1, r0
   83108:	f109 0908 	add.w	r9, r9, #8
   8310c:	3001      	adds	r0, #1
   8310e:	e508      	b.n	82b22 <_vfiprintf_r+0x35e>
   83110:	9b02      	ldr	r3, [sp, #8]
   83112:	2a01      	cmp	r2, #1
   83114:	f000 8097 	beq.w	83246 <_vfiprintf_r+0xa82>
   83118:	2a02      	cmp	r2, #2
   8311a:	d10d      	bne.n	83138 <_vfiprintf_r+0x974>
   8311c:	9302      	str	r3, [sp, #8]
   8311e:	2600      	movs	r6, #0
   83120:	2700      	movs	r7, #0
   83122:	e5b2      	b.n	82c8a <_vfiprintf_r+0x4c6>
   83124:	aa0f      	add	r2, sp, #60	; 0x3c
   83126:	9904      	ldr	r1, [sp, #16]
   83128:	9806      	ldr	r0, [sp, #24]
   8312a:	f7ff fb0b 	bl	82744 <__sprint_r.part.0>
   8312e:	2800      	cmp	r0, #0
   83130:	d0c9      	beq.n	830c6 <_vfiprintf_r+0x902>
   83132:	f8dd b010 	ldr.w	fp, [sp, #16]
   83136:	e797      	b.n	83068 <_vfiprintf_r+0x8a4>
   83138:	2600      	movs	r6, #0
   8313a:	2700      	movs	r7, #0
   8313c:	9302      	str	r3, [sp, #8]
   8313e:	4651      	mov	r1, sl
   83140:	e000      	b.n	83144 <_vfiprintf_r+0x980>
   83142:	4659      	mov	r1, fp
   83144:	08f2      	lsrs	r2, r6, #3
   83146:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8314a:	08f8      	lsrs	r0, r7, #3
   8314c:	f006 0307 	and.w	r3, r6, #7
   83150:	4607      	mov	r7, r0
   83152:	4616      	mov	r6, r2
   83154:	3330      	adds	r3, #48	; 0x30
   83156:	ea56 0207 	orrs.w	r2, r6, r7
   8315a:	f801 3c01 	strb.w	r3, [r1, #-1]
   8315e:	f101 3bff 	add.w	fp, r1, #4294967295
   83162:	d1ee      	bne.n	83142 <_vfiprintf_r+0x97e>
   83164:	9a02      	ldr	r2, [sp, #8]
   83166:	07d6      	lsls	r6, r2, #31
   83168:	f57f ad9f 	bpl.w	82caa <_vfiprintf_r+0x4e6>
   8316c:	2b30      	cmp	r3, #48	; 0x30
   8316e:	f43f ad9c 	beq.w	82caa <_vfiprintf_r+0x4e6>
   83172:	2330      	movs	r3, #48	; 0x30
   83174:	3902      	subs	r1, #2
   83176:	f80b 3c01 	strb.w	r3, [fp, #-1]
   8317a:	ebaa 0301 	sub.w	r3, sl, r1
   8317e:	9305      	str	r3, [sp, #20]
   83180:	468b      	mov	fp, r1
   83182:	e477      	b.n	82a74 <_vfiprintf_r+0x2b0>
   83184:	9b03      	ldr	r3, [sp, #12]
   83186:	9a08      	ldr	r2, [sp, #32]
   83188:	428a      	cmp	r2, r1
   8318a:	bfac      	ite	ge
   8318c:	189b      	addge	r3, r3, r2
   8318e:	185b      	addlt	r3, r3, r1
   83190:	9303      	str	r3, [sp, #12]
   83192:	e798      	b.n	830c6 <_vfiprintf_r+0x902>
   83194:	2202      	movs	r2, #2
   83196:	e44e      	b.n	82a36 <_vfiprintf_r+0x272>
   83198:	2f00      	cmp	r7, #0
   8319a:	bf08      	it	eq
   8319c:	2e0a      	cmpeq	r6, #10
   8319e:	d351      	bcc.n	83244 <_vfiprintf_r+0xa80>
   831a0:	46d3      	mov	fp, sl
   831a2:	4630      	mov	r0, r6
   831a4:	4639      	mov	r1, r7
   831a6:	220a      	movs	r2, #10
   831a8:	2300      	movs	r3, #0
   831aa:	f7fe ff3f 	bl	8202c <__aeabi_uldivmod>
   831ae:	3230      	adds	r2, #48	; 0x30
   831b0:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   831b4:	4630      	mov	r0, r6
   831b6:	4639      	mov	r1, r7
   831b8:	2300      	movs	r3, #0
   831ba:	220a      	movs	r2, #10
   831bc:	f7fe ff36 	bl	8202c <__aeabi_uldivmod>
   831c0:	4606      	mov	r6, r0
   831c2:	460f      	mov	r7, r1
   831c4:	ea56 0307 	orrs.w	r3, r6, r7
   831c8:	d1eb      	bne.n	831a2 <_vfiprintf_r+0x9de>
   831ca:	e56e      	b.n	82caa <_vfiprintf_r+0x4e6>
   831cc:	9405      	str	r4, [sp, #20]
   831ce:	46d3      	mov	fp, sl
   831d0:	e450      	b.n	82a74 <_vfiprintf_r+0x2b0>
   831d2:	aa0f      	add	r2, sp, #60	; 0x3c
   831d4:	9904      	ldr	r1, [sp, #16]
   831d6:	9806      	ldr	r0, [sp, #24]
   831d8:	f7ff fab4 	bl	82744 <__sprint_r.part.0>
   831dc:	2800      	cmp	r0, #0
   831de:	d1a8      	bne.n	83132 <_vfiprintf_r+0x96e>
   831e0:	46d1      	mov	r9, sl
   831e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   831e4:	e75e      	b.n	830a4 <_vfiprintf_r+0x8e0>
   831e6:	aa0f      	add	r2, sp, #60	; 0x3c
   831e8:	9904      	ldr	r1, [sp, #16]
   831ea:	9806      	ldr	r0, [sp, #24]
   831ec:	f7ff faaa 	bl	82744 <__sprint_r.part.0>
   831f0:	2800      	cmp	r0, #0
   831f2:	d19e      	bne.n	83132 <_vfiprintf_r+0x96e>
   831f4:	46d1      	mov	r9, sl
   831f6:	f7ff bbbb 	b.w	82970 <_vfiprintf_r+0x1ac>
   831fa:	bf00      	nop
   831fc:	00084f78 	.word	0x00084f78
   83200:	00084f68 	.word	0x00084f68
   83204:	3104      	adds	r1, #4
   83206:	6816      	ldr	r6, [r2, #0]
   83208:	2700      	movs	r7, #0
   8320a:	2201      	movs	r2, #1
   8320c:	9107      	str	r1, [sp, #28]
   8320e:	e412      	b.n	82a36 <_vfiprintf_r+0x272>
   83210:	9807      	ldr	r0, [sp, #28]
   83212:	2700      	movs	r7, #0
   83214:	4601      	mov	r1, r0
   83216:	3104      	adds	r1, #4
   83218:	6806      	ldr	r6, [r0, #0]
   8321a:	9107      	str	r1, [sp, #28]
   8321c:	e40b      	b.n	82a36 <_vfiprintf_r+0x272>
   8321e:	680e      	ldr	r6, [r1, #0]
   83220:	3104      	adds	r1, #4
   83222:	9107      	str	r1, [sp, #28]
   83224:	2700      	movs	r7, #0
   83226:	e592      	b.n	82d4e <_vfiprintf_r+0x58a>
   83228:	6816      	ldr	r6, [r2, #0]
   8322a:	3204      	adds	r2, #4
   8322c:	17f7      	asrs	r7, r6, #31
   8322e:	9207      	str	r2, [sp, #28]
   83230:	4630      	mov	r0, r6
   83232:	4639      	mov	r1, r7
   83234:	e512      	b.n	82c5c <_vfiprintf_r+0x498>
   83236:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8323a:	f000 fe75 	bl	83f28 <__retarget_lock_release_recursive>
   8323e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83242:	e71b      	b.n	8307c <_vfiprintf_r+0x8b8>
   83244:	9b02      	ldr	r3, [sp, #8]
   83246:	9302      	str	r3, [sp, #8]
   83248:	2301      	movs	r3, #1
   8324a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8324e:	3630      	adds	r6, #48	; 0x30
   83250:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   83254:	9305      	str	r3, [sp, #20]
   83256:	e40d      	b.n	82a74 <_vfiprintf_r+0x2b0>
   83258:	aa0f      	add	r2, sp, #60	; 0x3c
   8325a:	9904      	ldr	r1, [sp, #16]
   8325c:	9806      	ldr	r0, [sp, #24]
   8325e:	f7ff fa71 	bl	82744 <__sprint_r.part.0>
   83262:	2800      	cmp	r0, #0
   83264:	f47f af65 	bne.w	83132 <_vfiprintf_r+0x96e>
   83268:	9910      	ldr	r1, [sp, #64]	; 0x40
   8326a:	46d1      	mov	r9, sl
   8326c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8326e:	1c48      	adds	r0, r1, #1
   83270:	e457      	b.n	82b22 <_vfiprintf_r+0x35e>
   83272:	aa0f      	add	r2, sp, #60	; 0x3c
   83274:	9904      	ldr	r1, [sp, #16]
   83276:	9806      	ldr	r0, [sp, #24]
   83278:	f7ff fa64 	bl	82744 <__sprint_r.part.0>
   8327c:	2800      	cmp	r0, #0
   8327e:	f47f af58 	bne.w	83132 <_vfiprintf_r+0x96e>
   83282:	9910      	ldr	r1, [sp, #64]	; 0x40
   83284:	46d1      	mov	r9, sl
   83286:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83288:	1c48      	adds	r0, r1, #1
   8328a:	e644      	b.n	82f16 <_vfiprintf_r+0x752>
   8328c:	2a00      	cmp	r2, #0
   8328e:	f040 8087 	bne.w	833a0 <_vfiprintf_r+0xbdc>
   83292:	2001      	movs	r0, #1
   83294:	4611      	mov	r1, r2
   83296:	46d1      	mov	r9, sl
   83298:	e641      	b.n	82f1e <_vfiprintf_r+0x75a>
   8329a:	aa0f      	add	r2, sp, #60	; 0x3c
   8329c:	9904      	ldr	r1, [sp, #16]
   8329e:	9806      	ldr	r0, [sp, #24]
   832a0:	f7ff fa50 	bl	82744 <__sprint_r.part.0>
   832a4:	2800      	cmp	r0, #0
   832a6:	f47f af44 	bne.w	83132 <_vfiprintf_r+0x96e>
   832aa:	9810      	ldr	r0, [sp, #64]	; 0x40
   832ac:	46d1      	mov	r9, sl
   832ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   832b0:	3001      	adds	r0, #1
   832b2:	e668      	b.n	82f86 <_vfiprintf_r+0x7c2>
   832b4:	46cb      	mov	fp, r9
   832b6:	e6d7      	b.n	83068 <_vfiprintf_r+0x8a4>
   832b8:	9d07      	ldr	r5, [sp, #28]
   832ba:	3507      	adds	r5, #7
   832bc:	f025 0507 	bic.w	r5, r5, #7
   832c0:	f105 0208 	add.w	r2, r5, #8
   832c4:	e9d5 0100 	ldrd	r0, r1, [r5]
   832c8:	9207      	str	r2, [sp, #28]
   832ca:	4606      	mov	r6, r0
   832cc:	460f      	mov	r7, r1
   832ce:	e4c5      	b.n	82c5c <_vfiprintf_r+0x498>
   832d0:	9d07      	ldr	r5, [sp, #28]
   832d2:	3507      	adds	r5, #7
   832d4:	f025 0207 	bic.w	r2, r5, #7
   832d8:	f102 0108 	add.w	r1, r2, #8
   832dc:	e9d2 6700 	ldrd	r6, r7, [r2]
   832e0:	9107      	str	r1, [sp, #28]
   832e2:	2201      	movs	r2, #1
   832e4:	f7ff bba7 	b.w	82a36 <_vfiprintf_r+0x272>
   832e8:	9d07      	ldr	r5, [sp, #28]
   832ea:	3507      	adds	r5, #7
   832ec:	f025 0207 	bic.w	r2, r5, #7
   832f0:	f102 0108 	add.w	r1, r2, #8
   832f4:	e9d2 6700 	ldrd	r6, r7, [r2]
   832f8:	9107      	str	r1, [sp, #28]
   832fa:	2200      	movs	r2, #0
   832fc:	f7ff bb9b 	b.w	82a36 <_vfiprintf_r+0x272>
   83300:	9d07      	ldr	r5, [sp, #28]
   83302:	3507      	adds	r5, #7
   83304:	f025 0107 	bic.w	r1, r5, #7
   83308:	f101 0008 	add.w	r0, r1, #8
   8330c:	9007      	str	r0, [sp, #28]
   8330e:	e9d1 6700 	ldrd	r6, r7, [r1]
   83312:	e51c      	b.n	82d4e <_vfiprintf_r+0x58a>
   83314:	46d3      	mov	fp, sl
   83316:	f7ff bbad 	b.w	82a74 <_vfiprintf_r+0x2b0>
   8331a:	252d      	movs	r5, #45	; 0x2d
   8331c:	4276      	negs	r6, r6
   8331e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   83322:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   83326:	2201      	movs	r2, #1
   83328:	f7ff bb8a 	b.w	82a40 <_vfiprintf_r+0x27c>
   8332c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8332e:	b9b3      	cbnz	r3, 8335e <_vfiprintf_r+0xb9a>
   83330:	4611      	mov	r1, r2
   83332:	2001      	movs	r0, #1
   83334:	46d1      	mov	r9, sl
   83336:	e5f2      	b.n	82f1e <_vfiprintf_r+0x75a>
   83338:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8333c:	f000 fdf4 	bl	83f28 <__retarget_lock_release_recursive>
   83340:	f04f 33ff 	mov.w	r3, #4294967295
   83344:	9303      	str	r3, [sp, #12]
   83346:	f7ff bb4c 	b.w	829e2 <_vfiprintf_r+0x21e>
   8334a:	aa0f      	add	r2, sp, #60	; 0x3c
   8334c:	9904      	ldr	r1, [sp, #16]
   8334e:	9806      	ldr	r0, [sp, #24]
   83350:	f7ff f9f8 	bl	82744 <__sprint_r.part.0>
   83354:	2800      	cmp	r0, #0
   83356:	f47f aeec 	bne.w	83132 <_vfiprintf_r+0x96e>
   8335a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8335c:	e6aa      	b.n	830b4 <_vfiprintf_r+0x8f0>
   8335e:	2202      	movs	r2, #2
   83360:	ab0e      	add	r3, sp, #56	; 0x38
   83362:	921d      	str	r2, [sp, #116]	; 0x74
   83364:	931c      	str	r3, [sp, #112]	; 0x70
   83366:	2001      	movs	r0, #1
   83368:	46d1      	mov	r9, sl
   8336a:	e5d0      	b.n	82f0e <_vfiprintf_r+0x74a>
   8336c:	4d34      	ldr	r5, [pc, #208]	; (83440 <_vfiprintf_r+0xc7c>)
   8336e:	e5fd      	b.n	82f6c <_vfiprintf_r+0x7a8>
   83370:	9a07      	ldr	r2, [sp, #28]
   83372:	4613      	mov	r3, r2
   83374:	3304      	adds	r3, #4
   83376:	9307      	str	r3, [sp, #28]
   83378:	9b03      	ldr	r3, [sp, #12]
   8337a:	6811      	ldr	r1, [r2, #0]
   8337c:	17dd      	asrs	r5, r3, #31
   8337e:	461a      	mov	r2, r3
   83380:	462b      	mov	r3, r5
   83382:	e9c1 2300 	strd	r2, r3, [r1]
   83386:	f7ff ba5a 	b.w	8283e <_vfiprintf_r+0x7a>
   8338a:	4658      	mov	r0, fp
   8338c:	9507      	str	r5, [sp, #28]
   8338e:	9302      	str	r3, [sp, #8]
   83390:	f7ff f9aa 	bl	826e8 <strlen>
   83394:	2400      	movs	r4, #0
   83396:	9005      	str	r0, [sp, #20]
   83398:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8339c:	f7ff bb6a 	b.w	82a74 <_vfiprintf_r+0x2b0>
   833a0:	aa0f      	add	r2, sp, #60	; 0x3c
   833a2:	9904      	ldr	r1, [sp, #16]
   833a4:	9806      	ldr	r0, [sp, #24]
   833a6:	f7ff f9cd 	bl	82744 <__sprint_r.part.0>
   833aa:	2800      	cmp	r0, #0
   833ac:	f47f aec1 	bne.w	83132 <_vfiprintf_r+0x96e>
   833b0:	9910      	ldr	r1, [sp, #64]	; 0x40
   833b2:	46d1      	mov	r9, sl
   833b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   833b6:	1c48      	adds	r0, r1, #1
   833b8:	e5b1      	b.n	82f1e <_vfiprintf_r+0x75a>
   833ba:	9910      	ldr	r1, [sp, #64]	; 0x40
   833bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   833be:	3101      	adds	r1, #1
   833c0:	4e20      	ldr	r6, [pc, #128]	; (83444 <_vfiprintf_r+0xc80>)
   833c2:	f7ff bb9c 	b.w	82afe <_vfiprintf_r+0x33a>
   833c6:	2c06      	cmp	r4, #6
   833c8:	bf28      	it	cs
   833ca:	2406      	movcs	r4, #6
   833cc:	9507      	str	r5, [sp, #28]
   833ce:	9405      	str	r4, [sp, #20]
   833d0:	9401      	str	r4, [sp, #4]
   833d2:	f8df b074 	ldr.w	fp, [pc, #116]	; 83448 <_vfiprintf_r+0xc84>
   833d6:	e4e3      	b.n	82da0 <_vfiprintf_r+0x5dc>
   833d8:	9810      	ldr	r0, [sp, #64]	; 0x40
   833da:	4e1a      	ldr	r6, [pc, #104]	; (83444 <_vfiprintf_r+0xc80>)
   833dc:	3001      	adds	r0, #1
   833de:	e60e      	b.n	82ffe <_vfiprintf_r+0x83a>
   833e0:	4686      	mov	lr, r0
   833e2:	4d17      	ldr	r5, [pc, #92]	; (83440 <_vfiprintf_r+0xc7c>)
   833e4:	f7ff bbe2 	b.w	82bac <_vfiprintf_r+0x3e8>
   833e8:	9405      	str	r4, [sp, #20]
   833ea:	9507      	str	r5, [sp, #28]
   833ec:	9302      	str	r3, [sp, #8]
   833ee:	4604      	mov	r4, r0
   833f0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   833f4:	f7ff bb3e 	b.w	82a74 <_vfiprintf_r+0x2b0>
   833f8:	9806      	ldr	r0, [sp, #24]
   833fa:	aa0f      	add	r2, sp, #60	; 0x3c
   833fc:	4659      	mov	r1, fp
   833fe:	f7ff f9a1 	bl	82744 <__sprint_r.part.0>
   83402:	2800      	cmp	r0, #0
   83404:	f43f ae2e 	beq.w	83064 <_vfiprintf_r+0x8a0>
   83408:	e62e      	b.n	83068 <_vfiprintf_r+0x8a4>
   8340a:	9907      	ldr	r1, [sp, #28]
   8340c:	f898 2001 	ldrb.w	r2, [r8, #1]
   83410:	680c      	ldr	r4, [r1, #0]
   83412:	3104      	adds	r1, #4
   83414:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   83418:	46b8      	mov	r8, r7
   8341a:	9107      	str	r1, [sp, #28]
   8341c:	f7ff ba44 	b.w	828a8 <_vfiprintf_r+0xe4>
   83420:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83424:	e4a7      	b.n	82d76 <_vfiprintf_r+0x5b2>
   83426:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8342a:	e521      	b.n	82e70 <_vfiprintf_r+0x6ac>
   8342c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83430:	e47c      	b.n	82d2c <_vfiprintf_r+0x568>
   83432:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83436:	e43f      	b.n	82cb8 <_vfiprintf_r+0x4f4>
   83438:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8343c:	f7ff bbfa 	b.w	82c34 <_vfiprintf_r+0x470>
   83440:	00084f78 	.word	0x00084f78
   83444:	00084f68 	.word	0x00084f68
   83448:	00084f60 	.word	0x00084f60

0008344c <__sbprintf>:
   8344c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83450:	460c      	mov	r4, r1
   83452:	f04f 0e00 	mov.w	lr, #0
   83456:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8345a:	4606      	mov	r6, r0
   8345c:	4617      	mov	r7, r2
   8345e:	4698      	mov	r8, r3
   83460:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83462:	89e3      	ldrh	r3, [r4, #14]
   83464:	8989      	ldrh	r1, [r1, #12]
   83466:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8346a:	f021 0102 	bic.w	r1, r1, #2
   8346e:	9219      	str	r2, [sp, #100]	; 0x64
   83470:	f8ad 300e 	strh.w	r3, [sp, #14]
   83474:	69e2      	ldr	r2, [r4, #28]
   83476:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83478:	f8ad 100c 	strh.w	r1, [sp, #12]
   8347c:	a816      	add	r0, sp, #88	; 0x58
   8347e:	a91a      	add	r1, sp, #104	; 0x68
   83480:	f8cd e018 	str.w	lr, [sp, #24]
   83484:	9207      	str	r2, [sp, #28]
   83486:	9309      	str	r3, [sp, #36]	; 0x24
   83488:	9100      	str	r1, [sp, #0]
   8348a:	9104      	str	r1, [sp, #16]
   8348c:	9502      	str	r5, [sp, #8]
   8348e:	9505      	str	r5, [sp, #20]
   83490:	f000 fd44 	bl	83f1c <__retarget_lock_init_recursive>
   83494:	4643      	mov	r3, r8
   83496:	463a      	mov	r2, r7
   83498:	4669      	mov	r1, sp
   8349a:	4630      	mov	r0, r6
   8349c:	f7ff f992 	bl	827c4 <_vfiprintf_r>
   834a0:	1e05      	subs	r5, r0, #0
   834a2:	db07      	blt.n	834b4 <__sbprintf+0x68>
   834a4:	4630      	mov	r0, r6
   834a6:	4669      	mov	r1, sp
   834a8:	f000 f924 	bl	836f4 <_fflush_r>
   834ac:	2800      	cmp	r0, #0
   834ae:	bf18      	it	ne
   834b0:	f04f 35ff 	movne.w	r5, #4294967295
   834b4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   834b8:	065b      	lsls	r3, r3, #25
   834ba:	d503      	bpl.n	834c4 <__sbprintf+0x78>
   834bc:	89a3      	ldrh	r3, [r4, #12]
   834be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   834c2:	81a3      	strh	r3, [r4, #12]
   834c4:	9816      	ldr	r0, [sp, #88]	; 0x58
   834c6:	f000 fd2b 	bl	83f20 <__retarget_lock_close_recursive>
   834ca:	4628      	mov	r0, r5
   834cc:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   834d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000834d4 <__swsetup_r>:
   834d4:	b538      	push	{r3, r4, r5, lr}
   834d6:	4b30      	ldr	r3, [pc, #192]	; (83598 <__swsetup_r+0xc4>)
   834d8:	4605      	mov	r5, r0
   834da:	6818      	ldr	r0, [r3, #0]
   834dc:	460c      	mov	r4, r1
   834de:	b110      	cbz	r0, 834e6 <__swsetup_r+0x12>
   834e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   834e2:	2b00      	cmp	r3, #0
   834e4:	d038      	beq.n	83558 <__swsetup_r+0x84>
   834e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   834ea:	b293      	uxth	r3, r2
   834ec:	0718      	lsls	r0, r3, #28
   834ee:	d50c      	bpl.n	8350a <__swsetup_r+0x36>
   834f0:	6920      	ldr	r0, [r4, #16]
   834f2:	b1a8      	cbz	r0, 83520 <__swsetup_r+0x4c>
   834f4:	f013 0201 	ands.w	r2, r3, #1
   834f8:	d01e      	beq.n	83538 <__swsetup_r+0x64>
   834fa:	2200      	movs	r2, #0
   834fc:	6963      	ldr	r3, [r4, #20]
   834fe:	60a2      	str	r2, [r4, #8]
   83500:	425b      	negs	r3, r3
   83502:	61a3      	str	r3, [r4, #24]
   83504:	b1f0      	cbz	r0, 83544 <__swsetup_r+0x70>
   83506:	2000      	movs	r0, #0
   83508:	bd38      	pop	{r3, r4, r5, pc}
   8350a:	06d9      	lsls	r1, r3, #27
   8350c:	d53b      	bpl.n	83586 <__swsetup_r+0xb2>
   8350e:	0758      	lsls	r0, r3, #29
   83510:	d425      	bmi.n	8355e <__swsetup_r+0x8a>
   83512:	6920      	ldr	r0, [r4, #16]
   83514:	f042 0308 	orr.w	r3, r2, #8
   83518:	81a3      	strh	r3, [r4, #12]
   8351a:	b29b      	uxth	r3, r3
   8351c:	2800      	cmp	r0, #0
   8351e:	d1e9      	bne.n	834f4 <__swsetup_r+0x20>
   83520:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83524:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83528:	d0e4      	beq.n	834f4 <__swsetup_r+0x20>
   8352a:	4628      	mov	r0, r5
   8352c:	4621      	mov	r1, r4
   8352e:	f000 fd2b 	bl	83f88 <__smakebuf_r>
   83532:	89a3      	ldrh	r3, [r4, #12]
   83534:	6920      	ldr	r0, [r4, #16]
   83536:	e7dd      	b.n	834f4 <__swsetup_r+0x20>
   83538:	0799      	lsls	r1, r3, #30
   8353a:	bf58      	it	pl
   8353c:	6962      	ldrpl	r2, [r4, #20]
   8353e:	60a2      	str	r2, [r4, #8]
   83540:	2800      	cmp	r0, #0
   83542:	d1e0      	bne.n	83506 <__swsetup_r+0x32>
   83544:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83548:	061a      	lsls	r2, r3, #24
   8354a:	d5dd      	bpl.n	83508 <__swsetup_r+0x34>
   8354c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83550:	81a3      	strh	r3, [r4, #12]
   83552:	f04f 30ff 	mov.w	r0, #4294967295
   83556:	bd38      	pop	{r3, r4, r5, pc}
   83558:	f000 f924 	bl	837a4 <__sinit>
   8355c:	e7c3      	b.n	834e6 <__swsetup_r+0x12>
   8355e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83560:	b151      	cbz	r1, 83578 <__swsetup_r+0xa4>
   83562:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83566:	4299      	cmp	r1, r3
   83568:	d004      	beq.n	83574 <__swsetup_r+0xa0>
   8356a:	4628      	mov	r0, r5
   8356c:	f000 fa40 	bl	839f0 <_free_r>
   83570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83574:	2300      	movs	r3, #0
   83576:	6323      	str	r3, [r4, #48]	; 0x30
   83578:	2300      	movs	r3, #0
   8357a:	6920      	ldr	r0, [r4, #16]
   8357c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   83580:	e884 0009 	stmia.w	r4, {r0, r3}
   83584:	e7c6      	b.n	83514 <__swsetup_r+0x40>
   83586:	2309      	movs	r3, #9
   83588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8358c:	602b      	str	r3, [r5, #0]
   8358e:	f04f 30ff 	mov.w	r0, #4294967295
   83592:	81a2      	strh	r2, [r4, #12]
   83594:	bd38      	pop	{r3, r4, r5, pc}
   83596:	bf00      	nop
   83598:	20070154 	.word	0x20070154

0008359c <register_fini>:
   8359c:	4b02      	ldr	r3, [pc, #8]	; (835a8 <register_fini+0xc>)
   8359e:	b113      	cbz	r3, 835a6 <register_fini+0xa>
   835a0:	4802      	ldr	r0, [pc, #8]	; (835ac <register_fini+0x10>)
   835a2:	f000 b805 	b.w	835b0 <atexit>
   835a6:	4770      	bx	lr
   835a8:	00000000 	.word	0x00000000
   835ac:	0008381d 	.word	0x0008381d

000835b0 <atexit>:
   835b0:	2300      	movs	r3, #0
   835b2:	4601      	mov	r1, r0
   835b4:	461a      	mov	r2, r3
   835b6:	4618      	mov	r0, r3
   835b8:	f001 bb56 	b.w	84c68 <__register_exitproc>

000835bc <__sflush_r>:
   835bc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   835c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835c4:	b29a      	uxth	r2, r3
   835c6:	460d      	mov	r5, r1
   835c8:	0711      	lsls	r1, r2, #28
   835ca:	4680      	mov	r8, r0
   835cc:	d43a      	bmi.n	83644 <__sflush_r+0x88>
   835ce:	686a      	ldr	r2, [r5, #4]
   835d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   835d4:	2a00      	cmp	r2, #0
   835d6:	81ab      	strh	r3, [r5, #12]
   835d8:	dd70      	ble.n	836bc <__sflush_r+0x100>
   835da:	6aac      	ldr	r4, [r5, #40]	; 0x28
   835dc:	2c00      	cmp	r4, #0
   835de:	d04a      	beq.n	83676 <__sflush_r+0xba>
   835e0:	2200      	movs	r2, #0
   835e2:	b29b      	uxth	r3, r3
   835e4:	f8d8 6000 	ldr.w	r6, [r8]
   835e8:	f8c8 2000 	str.w	r2, [r8]
   835ec:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   835f0:	d068      	beq.n	836c4 <__sflush_r+0x108>
   835f2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   835f4:	075f      	lsls	r7, r3, #29
   835f6:	d505      	bpl.n	83604 <__sflush_r+0x48>
   835f8:	6869      	ldr	r1, [r5, #4]
   835fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   835fc:	1a52      	subs	r2, r2, r1
   835fe:	b10b      	cbz	r3, 83604 <__sflush_r+0x48>
   83600:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83602:	1ad2      	subs	r2, r2, r3
   83604:	2300      	movs	r3, #0
   83606:	69e9      	ldr	r1, [r5, #28]
   83608:	4640      	mov	r0, r8
   8360a:	47a0      	blx	r4
   8360c:	1c44      	adds	r4, r0, #1
   8360e:	d03d      	beq.n	8368c <__sflush_r+0xd0>
   83610:	2100      	movs	r1, #0
   83612:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83616:	692a      	ldr	r2, [r5, #16]
   83618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8361c:	81ab      	strh	r3, [r5, #12]
   8361e:	04db      	lsls	r3, r3, #19
   83620:	6069      	str	r1, [r5, #4]
   83622:	602a      	str	r2, [r5, #0]
   83624:	d448      	bmi.n	836b8 <__sflush_r+0xfc>
   83626:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83628:	f8c8 6000 	str.w	r6, [r8]
   8362c:	b319      	cbz	r1, 83676 <__sflush_r+0xba>
   8362e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83632:	4299      	cmp	r1, r3
   83634:	d002      	beq.n	8363c <__sflush_r+0x80>
   83636:	4640      	mov	r0, r8
   83638:	f000 f9da 	bl	839f0 <_free_r>
   8363c:	2000      	movs	r0, #0
   8363e:	6328      	str	r0, [r5, #48]	; 0x30
   83640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83644:	692e      	ldr	r6, [r5, #16]
   83646:	b1b6      	cbz	r6, 83676 <__sflush_r+0xba>
   83648:	0791      	lsls	r1, r2, #30
   8364a:	bf18      	it	ne
   8364c:	2300      	movne	r3, #0
   8364e:	682c      	ldr	r4, [r5, #0]
   83650:	bf08      	it	eq
   83652:	696b      	ldreq	r3, [r5, #20]
   83654:	602e      	str	r6, [r5, #0]
   83656:	1ba4      	subs	r4, r4, r6
   83658:	60ab      	str	r3, [r5, #8]
   8365a:	e00a      	b.n	83672 <__sflush_r+0xb6>
   8365c:	4623      	mov	r3, r4
   8365e:	4632      	mov	r2, r6
   83660:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83662:	69e9      	ldr	r1, [r5, #28]
   83664:	4640      	mov	r0, r8
   83666:	47b8      	blx	r7
   83668:	2800      	cmp	r0, #0
   8366a:	eba4 0400 	sub.w	r4, r4, r0
   8366e:	4406      	add	r6, r0
   83670:	dd04      	ble.n	8367c <__sflush_r+0xc0>
   83672:	2c00      	cmp	r4, #0
   83674:	dcf2      	bgt.n	8365c <__sflush_r+0xa0>
   83676:	2000      	movs	r0, #0
   83678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8367c:	89ab      	ldrh	r3, [r5, #12]
   8367e:	f04f 30ff 	mov.w	r0, #4294967295
   83682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83686:	81ab      	strh	r3, [r5, #12]
   83688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8368c:	f8d8 4000 	ldr.w	r4, [r8]
   83690:	2c1d      	cmp	r4, #29
   83692:	d8f3      	bhi.n	8367c <__sflush_r+0xc0>
   83694:	4b16      	ldr	r3, [pc, #88]	; (836f0 <__sflush_r+0x134>)
   83696:	40e3      	lsrs	r3, r4
   83698:	43db      	mvns	r3, r3
   8369a:	f013 0301 	ands.w	r3, r3, #1
   8369e:	d1ed      	bne.n	8367c <__sflush_r+0xc0>
   836a0:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   836a4:	6929      	ldr	r1, [r5, #16]
   836a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   836aa:	81aa      	strh	r2, [r5, #12]
   836ac:	04d2      	lsls	r2, r2, #19
   836ae:	606b      	str	r3, [r5, #4]
   836b0:	6029      	str	r1, [r5, #0]
   836b2:	d5b8      	bpl.n	83626 <__sflush_r+0x6a>
   836b4:	2c00      	cmp	r4, #0
   836b6:	d1b6      	bne.n	83626 <__sflush_r+0x6a>
   836b8:	6528      	str	r0, [r5, #80]	; 0x50
   836ba:	e7b4      	b.n	83626 <__sflush_r+0x6a>
   836bc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   836be:	2a00      	cmp	r2, #0
   836c0:	dc8b      	bgt.n	835da <__sflush_r+0x1e>
   836c2:	e7d8      	b.n	83676 <__sflush_r+0xba>
   836c4:	2301      	movs	r3, #1
   836c6:	69e9      	ldr	r1, [r5, #28]
   836c8:	4640      	mov	r0, r8
   836ca:	47a0      	blx	r4
   836cc:	1c43      	adds	r3, r0, #1
   836ce:	4602      	mov	r2, r0
   836d0:	d002      	beq.n	836d8 <__sflush_r+0x11c>
   836d2:	89ab      	ldrh	r3, [r5, #12]
   836d4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   836d6:	e78d      	b.n	835f4 <__sflush_r+0x38>
   836d8:	f8d8 3000 	ldr.w	r3, [r8]
   836dc:	2b00      	cmp	r3, #0
   836de:	d0f8      	beq.n	836d2 <__sflush_r+0x116>
   836e0:	2b1d      	cmp	r3, #29
   836e2:	d001      	beq.n	836e8 <__sflush_r+0x12c>
   836e4:	2b16      	cmp	r3, #22
   836e6:	d1c9      	bne.n	8367c <__sflush_r+0xc0>
   836e8:	f8c8 6000 	str.w	r6, [r8]
   836ec:	e7c3      	b.n	83676 <__sflush_r+0xba>
   836ee:	bf00      	nop
   836f0:	20400001 	.word	0x20400001

000836f4 <_fflush_r>:
   836f4:	b538      	push	{r3, r4, r5, lr}
   836f6:	460d      	mov	r5, r1
   836f8:	4604      	mov	r4, r0
   836fa:	b108      	cbz	r0, 83700 <_fflush_r+0xc>
   836fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   836fe:	b1bb      	cbz	r3, 83730 <_fflush_r+0x3c>
   83700:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   83704:	b188      	cbz	r0, 8372a <_fflush_r+0x36>
   83706:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83708:	07db      	lsls	r3, r3, #31
   8370a:	d401      	bmi.n	83710 <_fflush_r+0x1c>
   8370c:	0581      	lsls	r1, r0, #22
   8370e:	d517      	bpl.n	83740 <_fflush_r+0x4c>
   83710:	4620      	mov	r0, r4
   83712:	4629      	mov	r1, r5
   83714:	f7ff ff52 	bl	835bc <__sflush_r>
   83718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8371a:	4604      	mov	r4, r0
   8371c:	07da      	lsls	r2, r3, #31
   8371e:	d402      	bmi.n	83726 <_fflush_r+0x32>
   83720:	89ab      	ldrh	r3, [r5, #12]
   83722:	059b      	lsls	r3, r3, #22
   83724:	d507      	bpl.n	83736 <_fflush_r+0x42>
   83726:	4620      	mov	r0, r4
   83728:	bd38      	pop	{r3, r4, r5, pc}
   8372a:	4604      	mov	r4, r0
   8372c:	4620      	mov	r0, r4
   8372e:	bd38      	pop	{r3, r4, r5, pc}
   83730:	f000 f838 	bl	837a4 <__sinit>
   83734:	e7e4      	b.n	83700 <_fflush_r+0xc>
   83736:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83738:	f000 fbf6 	bl	83f28 <__retarget_lock_release_recursive>
   8373c:	4620      	mov	r0, r4
   8373e:	bd38      	pop	{r3, r4, r5, pc}
   83740:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83742:	f000 fbef 	bl	83f24 <__retarget_lock_acquire_recursive>
   83746:	e7e3      	b.n	83710 <_fflush_r+0x1c>

00083748 <_cleanup_r>:
   83748:	4901      	ldr	r1, [pc, #4]	; (83750 <_cleanup_r+0x8>)
   8374a:	f000 bbb1 	b.w	83eb0 <_fwalk_reent>
   8374e:	bf00      	nop
   83750:	00084d51 	.word	0x00084d51

00083754 <std.isra.0>:
   83754:	2300      	movs	r3, #0
   83756:	b510      	push	{r4, lr}
   83758:	4604      	mov	r4, r0
   8375a:	8181      	strh	r1, [r0, #12]
   8375c:	81c2      	strh	r2, [r0, #14]
   8375e:	6003      	str	r3, [r0, #0]
   83760:	6043      	str	r3, [r0, #4]
   83762:	6083      	str	r3, [r0, #8]
   83764:	6643      	str	r3, [r0, #100]	; 0x64
   83766:	6103      	str	r3, [r0, #16]
   83768:	6143      	str	r3, [r0, #20]
   8376a:	6183      	str	r3, [r0, #24]
   8376c:	4619      	mov	r1, r3
   8376e:	2208      	movs	r2, #8
   83770:	305c      	adds	r0, #92	; 0x5c
   83772:	f7fe fe9b 	bl	824ac <memset>
   83776:	4807      	ldr	r0, [pc, #28]	; (83794 <std.isra.0+0x40>)
   83778:	4907      	ldr	r1, [pc, #28]	; (83798 <std.isra.0+0x44>)
   8377a:	4a08      	ldr	r2, [pc, #32]	; (8379c <std.isra.0+0x48>)
   8377c:	4b08      	ldr	r3, [pc, #32]	; (837a0 <std.isra.0+0x4c>)
   8377e:	6220      	str	r0, [r4, #32]
   83780:	61e4      	str	r4, [r4, #28]
   83782:	6261      	str	r1, [r4, #36]	; 0x24
   83784:	62a2      	str	r2, [r4, #40]	; 0x28
   83786:	62e3      	str	r3, [r4, #44]	; 0x2c
   83788:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8378c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83790:	f000 bbc4 	b.w	83f1c <__retarget_lock_init_recursive>
   83794:	00084a99 	.word	0x00084a99
   83798:	00084abd 	.word	0x00084abd
   8379c:	00084af9 	.word	0x00084af9
   837a0:	00084b19 	.word	0x00084b19

000837a4 <__sinit>:
   837a4:	b510      	push	{r4, lr}
   837a6:	4604      	mov	r4, r0
   837a8:	4814      	ldr	r0, [pc, #80]	; (837fc <__sinit+0x58>)
   837aa:	f000 fbbb 	bl	83f24 <__retarget_lock_acquire_recursive>
   837ae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   837b0:	b9fa      	cbnz	r2, 837f2 <__sinit+0x4e>
   837b2:	2003      	movs	r0, #3
   837b4:	4912      	ldr	r1, [pc, #72]	; (83800 <__sinit+0x5c>)
   837b6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   837ba:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   837be:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   837c2:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   837c6:	63e1      	str	r1, [r4, #60]	; 0x3c
   837c8:	6860      	ldr	r0, [r4, #4]
   837ca:	2104      	movs	r1, #4
   837cc:	f7ff ffc2 	bl	83754 <std.isra.0>
   837d0:	68a0      	ldr	r0, [r4, #8]
   837d2:	2201      	movs	r2, #1
   837d4:	2109      	movs	r1, #9
   837d6:	f7ff ffbd 	bl	83754 <std.isra.0>
   837da:	68e0      	ldr	r0, [r4, #12]
   837dc:	2202      	movs	r2, #2
   837de:	2112      	movs	r1, #18
   837e0:	f7ff ffb8 	bl	83754 <std.isra.0>
   837e4:	2301      	movs	r3, #1
   837e6:	4805      	ldr	r0, [pc, #20]	; (837fc <__sinit+0x58>)
   837e8:	63a3      	str	r3, [r4, #56]	; 0x38
   837ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   837ee:	f000 bb9b 	b.w	83f28 <__retarget_lock_release_recursive>
   837f2:	4802      	ldr	r0, [pc, #8]	; (837fc <__sinit+0x58>)
   837f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   837f8:	f000 bb96 	b.w	83f28 <__retarget_lock_release_recursive>
   837fc:	20070d18 	.word	0x20070d18
   83800:	00083749 	.word	0x00083749

00083804 <__sfp_lock_acquire>:
   83804:	4801      	ldr	r0, [pc, #4]	; (8380c <__sfp_lock_acquire+0x8>)
   83806:	f000 bb8d 	b.w	83f24 <__retarget_lock_acquire_recursive>
   8380a:	bf00      	nop
   8380c:	20070d2c 	.word	0x20070d2c

00083810 <__sfp_lock_release>:
   83810:	4801      	ldr	r0, [pc, #4]	; (83818 <__sfp_lock_release+0x8>)
   83812:	f000 bb89 	b.w	83f28 <__retarget_lock_release_recursive>
   83816:	bf00      	nop
   83818:	20070d2c 	.word	0x20070d2c

0008381c <__libc_fini_array>:
   8381c:	b538      	push	{r3, r4, r5, lr}
   8381e:	4c0a      	ldr	r4, [pc, #40]	; (83848 <__libc_fini_array+0x2c>)
   83820:	4d0a      	ldr	r5, [pc, #40]	; (8384c <__libc_fini_array+0x30>)
   83822:	1b64      	subs	r4, r4, r5
   83824:	10a4      	asrs	r4, r4, #2
   83826:	d00a      	beq.n	8383e <__libc_fini_array+0x22>
   83828:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8382c:	3b01      	subs	r3, #1
   8382e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83832:	3c01      	subs	r4, #1
   83834:	f855 3904 	ldr.w	r3, [r5], #-4
   83838:	4798      	blx	r3
   8383a:	2c00      	cmp	r4, #0
   8383c:	d1f9      	bne.n	83832 <__libc_fini_array+0x16>
   8383e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83842:	f001 bc35 	b.w	850b0 <_fini>
   83846:	bf00      	nop
   83848:	000850c0 	.word	0x000850c0
   8384c:	000850bc 	.word	0x000850bc

00083850 <__fputwc>:
   83850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83854:	b083      	sub	sp, #12
   83856:	4607      	mov	r7, r0
   83858:	4688      	mov	r8, r1
   8385a:	4614      	mov	r4, r2
   8385c:	f000 fb50 	bl	83f00 <__locale_mb_cur_max>
   83860:	2801      	cmp	r0, #1
   83862:	d033      	beq.n	838cc <__fputwc+0x7c>
   83864:	4642      	mov	r2, r8
   83866:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8386a:	a901      	add	r1, sp, #4
   8386c:	4638      	mov	r0, r7
   8386e:	f001 f9af 	bl	84bd0 <_wcrtomb_r>
   83872:	1c42      	adds	r2, r0, #1
   83874:	4606      	mov	r6, r0
   83876:	d022      	beq.n	838be <__fputwc+0x6e>
   83878:	b390      	cbz	r0, 838e0 <__fputwc+0x90>
   8387a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8387e:	2500      	movs	r5, #0
   83880:	f10d 0904 	add.w	r9, sp, #4
   83884:	e008      	b.n	83898 <__fputwc+0x48>
   83886:	6823      	ldr	r3, [r4, #0]
   83888:	1c5a      	adds	r2, r3, #1
   8388a:	6022      	str	r2, [r4, #0]
   8388c:	7019      	strb	r1, [r3, #0]
   8388e:	3501      	adds	r5, #1
   83890:	42b5      	cmp	r5, r6
   83892:	d225      	bcs.n	838e0 <__fputwc+0x90>
   83894:	f815 1009 	ldrb.w	r1, [r5, r9]
   83898:	68a3      	ldr	r3, [r4, #8]
   8389a:	3b01      	subs	r3, #1
   8389c:	2b00      	cmp	r3, #0
   8389e:	60a3      	str	r3, [r4, #8]
   838a0:	daf1      	bge.n	83886 <__fputwc+0x36>
   838a2:	69a2      	ldr	r2, [r4, #24]
   838a4:	4293      	cmp	r3, r2
   838a6:	db01      	blt.n	838ac <__fputwc+0x5c>
   838a8:	290a      	cmp	r1, #10
   838aa:	d1ec      	bne.n	83886 <__fputwc+0x36>
   838ac:	4622      	mov	r2, r4
   838ae:	4638      	mov	r0, r7
   838b0:	f001 f936 	bl	84b20 <__swbuf_r>
   838b4:	1c43      	adds	r3, r0, #1
   838b6:	d1ea      	bne.n	8388e <__fputwc+0x3e>
   838b8:	b003      	add	sp, #12
   838ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   838be:	89a3      	ldrh	r3, [r4, #12]
   838c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   838c4:	81a3      	strh	r3, [r4, #12]
   838c6:	b003      	add	sp, #12
   838c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   838cc:	f108 33ff 	add.w	r3, r8, #4294967295
   838d0:	2bfe      	cmp	r3, #254	; 0xfe
   838d2:	d8c7      	bhi.n	83864 <__fputwc+0x14>
   838d4:	fa5f f188 	uxtb.w	r1, r8
   838d8:	4606      	mov	r6, r0
   838da:	f88d 1004 	strb.w	r1, [sp, #4]
   838de:	e7ce      	b.n	8387e <__fputwc+0x2e>
   838e0:	4640      	mov	r0, r8
   838e2:	b003      	add	sp, #12
   838e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000838e8 <_fputwc_r>:
   838e8:	b530      	push	{r4, r5, lr}
   838ea:	6e53      	ldr	r3, [r2, #100]	; 0x64
   838ec:	4614      	mov	r4, r2
   838ee:	f013 0f01 	tst.w	r3, #1
   838f2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   838f6:	b083      	sub	sp, #12
   838f8:	4605      	mov	r5, r0
   838fa:	b29a      	uxth	r2, r3
   838fc:	d101      	bne.n	83902 <_fputwc_r+0x1a>
   838fe:	0590      	lsls	r0, r2, #22
   83900:	d51c      	bpl.n	8393c <_fputwc_r+0x54>
   83902:	0490      	lsls	r0, r2, #18
   83904:	d406      	bmi.n	83914 <_fputwc_r+0x2c>
   83906:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83908:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8390c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83910:	81a3      	strh	r3, [r4, #12]
   83912:	6662      	str	r2, [r4, #100]	; 0x64
   83914:	4628      	mov	r0, r5
   83916:	4622      	mov	r2, r4
   83918:	f7ff ff9a 	bl	83850 <__fputwc>
   8391c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8391e:	4605      	mov	r5, r0
   83920:	07da      	lsls	r2, r3, #31
   83922:	d402      	bmi.n	8392a <_fputwc_r+0x42>
   83924:	89a3      	ldrh	r3, [r4, #12]
   83926:	059b      	lsls	r3, r3, #22
   83928:	d502      	bpl.n	83930 <_fputwc_r+0x48>
   8392a:	4628      	mov	r0, r5
   8392c:	b003      	add	sp, #12
   8392e:	bd30      	pop	{r4, r5, pc}
   83930:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83932:	f000 faf9 	bl	83f28 <__retarget_lock_release_recursive>
   83936:	4628      	mov	r0, r5
   83938:	b003      	add	sp, #12
   8393a:	bd30      	pop	{r4, r5, pc}
   8393c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8393e:	9101      	str	r1, [sp, #4]
   83940:	f000 faf0 	bl	83f24 <__retarget_lock_acquire_recursive>
   83944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83948:	9901      	ldr	r1, [sp, #4]
   8394a:	b29a      	uxth	r2, r3
   8394c:	e7d9      	b.n	83902 <_fputwc_r+0x1a>
   8394e:	bf00      	nop

00083950 <_malloc_trim_r>:
   83950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83952:	460c      	mov	r4, r1
   83954:	4f23      	ldr	r7, [pc, #140]	; (839e4 <_malloc_trim_r+0x94>)
   83956:	4606      	mov	r6, r0
   83958:	f000 feca 	bl	846f0 <__malloc_lock>
   8395c:	68bb      	ldr	r3, [r7, #8]
   8395e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83962:	685d      	ldr	r5, [r3, #4]
   83964:	310f      	adds	r1, #15
   83966:	f025 0503 	bic.w	r5, r5, #3
   8396a:	4429      	add	r1, r5
   8396c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83970:	f021 010f 	bic.w	r1, r1, #15
   83974:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83978:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8397c:	db07      	blt.n	8398e <_malloc_trim_r+0x3e>
   8397e:	2100      	movs	r1, #0
   83980:	4630      	mov	r0, r6
   83982:	f001 f877 	bl	84a74 <_sbrk_r>
   83986:	68bb      	ldr	r3, [r7, #8]
   83988:	442b      	add	r3, r5
   8398a:	4298      	cmp	r0, r3
   8398c:	d004      	beq.n	83998 <_malloc_trim_r+0x48>
   8398e:	4630      	mov	r0, r6
   83990:	f000 feb4 	bl	846fc <__malloc_unlock>
   83994:	2000      	movs	r0, #0
   83996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83998:	4261      	negs	r1, r4
   8399a:	4630      	mov	r0, r6
   8399c:	f001 f86a 	bl	84a74 <_sbrk_r>
   839a0:	3001      	adds	r0, #1
   839a2:	d00d      	beq.n	839c0 <_malloc_trim_r+0x70>
   839a4:	4b10      	ldr	r3, [pc, #64]	; (839e8 <_malloc_trim_r+0x98>)
   839a6:	68ba      	ldr	r2, [r7, #8]
   839a8:	6819      	ldr	r1, [r3, #0]
   839aa:	1b2d      	subs	r5, r5, r4
   839ac:	f045 0501 	orr.w	r5, r5, #1
   839b0:	4630      	mov	r0, r6
   839b2:	1b09      	subs	r1, r1, r4
   839b4:	6055      	str	r5, [r2, #4]
   839b6:	6019      	str	r1, [r3, #0]
   839b8:	f000 fea0 	bl	846fc <__malloc_unlock>
   839bc:	2001      	movs	r0, #1
   839be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   839c0:	2100      	movs	r1, #0
   839c2:	4630      	mov	r0, r6
   839c4:	f001 f856 	bl	84a74 <_sbrk_r>
   839c8:	68ba      	ldr	r2, [r7, #8]
   839ca:	1a83      	subs	r3, r0, r2
   839cc:	2b0f      	cmp	r3, #15
   839ce:	ddde      	ble.n	8398e <_malloc_trim_r+0x3e>
   839d0:	4c06      	ldr	r4, [pc, #24]	; (839ec <_malloc_trim_r+0x9c>)
   839d2:	4905      	ldr	r1, [pc, #20]	; (839e8 <_malloc_trim_r+0x98>)
   839d4:	6824      	ldr	r4, [r4, #0]
   839d6:	f043 0301 	orr.w	r3, r3, #1
   839da:	1b00      	subs	r0, r0, r4
   839dc:	6053      	str	r3, [r2, #4]
   839de:	6008      	str	r0, [r1, #0]
   839e0:	e7d5      	b.n	8398e <_malloc_trim_r+0x3e>
   839e2:	bf00      	nop
   839e4:	200706f0 	.word	0x200706f0
   839e8:	20070ccc 	.word	0x20070ccc
   839ec:	20070af8 	.word	0x20070af8

000839f0 <_free_r>:
   839f0:	2900      	cmp	r1, #0
   839f2:	d044      	beq.n	83a7e <_free_r+0x8e>
   839f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   839f8:	460d      	mov	r5, r1
   839fa:	4680      	mov	r8, r0
   839fc:	f000 fe78 	bl	846f0 <__malloc_lock>
   83a00:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83a04:	4969      	ldr	r1, [pc, #420]	; (83bac <_free_r+0x1bc>)
   83a06:	f1a5 0408 	sub.w	r4, r5, #8
   83a0a:	f027 0301 	bic.w	r3, r7, #1
   83a0e:	18e2      	adds	r2, r4, r3
   83a10:	688e      	ldr	r6, [r1, #8]
   83a12:	6850      	ldr	r0, [r2, #4]
   83a14:	42b2      	cmp	r2, r6
   83a16:	f020 0003 	bic.w	r0, r0, #3
   83a1a:	d05e      	beq.n	83ada <_free_r+0xea>
   83a1c:	07fe      	lsls	r6, r7, #31
   83a1e:	6050      	str	r0, [r2, #4]
   83a20:	d40b      	bmi.n	83a3a <_free_r+0x4a>
   83a22:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83a26:	f101 0e08 	add.w	lr, r1, #8
   83a2a:	1be4      	subs	r4, r4, r7
   83a2c:	68a5      	ldr	r5, [r4, #8]
   83a2e:	443b      	add	r3, r7
   83a30:	4575      	cmp	r5, lr
   83a32:	d06d      	beq.n	83b10 <_free_r+0x120>
   83a34:	68e7      	ldr	r7, [r4, #12]
   83a36:	60ef      	str	r7, [r5, #12]
   83a38:	60bd      	str	r5, [r7, #8]
   83a3a:	1815      	adds	r5, r2, r0
   83a3c:	686d      	ldr	r5, [r5, #4]
   83a3e:	07ed      	lsls	r5, r5, #31
   83a40:	d53e      	bpl.n	83ac0 <_free_r+0xd0>
   83a42:	f043 0201 	orr.w	r2, r3, #1
   83a46:	6062      	str	r2, [r4, #4]
   83a48:	50e3      	str	r3, [r4, r3]
   83a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83a4e:	d217      	bcs.n	83a80 <_free_r+0x90>
   83a50:	2201      	movs	r2, #1
   83a52:	08db      	lsrs	r3, r3, #3
   83a54:	1098      	asrs	r0, r3, #2
   83a56:	684d      	ldr	r5, [r1, #4]
   83a58:	4413      	add	r3, r2
   83a5a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83a5e:	4082      	lsls	r2, r0
   83a60:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83a64:	432a      	orrs	r2, r5
   83a66:	3808      	subs	r0, #8
   83a68:	60e0      	str	r0, [r4, #12]
   83a6a:	60a7      	str	r7, [r4, #8]
   83a6c:	604a      	str	r2, [r1, #4]
   83a6e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83a72:	60fc      	str	r4, [r7, #12]
   83a74:	4640      	mov	r0, r8
   83a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83a7a:	f000 be3f 	b.w	846fc <__malloc_unlock>
   83a7e:	4770      	bx	lr
   83a80:	0a5a      	lsrs	r2, r3, #9
   83a82:	2a04      	cmp	r2, #4
   83a84:	d852      	bhi.n	83b2c <_free_r+0x13c>
   83a86:	099a      	lsrs	r2, r3, #6
   83a88:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83a8c:	00ff      	lsls	r7, r7, #3
   83a8e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83a92:	19c8      	adds	r0, r1, r7
   83a94:	59ca      	ldr	r2, [r1, r7]
   83a96:	3808      	subs	r0, #8
   83a98:	4290      	cmp	r0, r2
   83a9a:	d04f      	beq.n	83b3c <_free_r+0x14c>
   83a9c:	6851      	ldr	r1, [r2, #4]
   83a9e:	f021 0103 	bic.w	r1, r1, #3
   83aa2:	428b      	cmp	r3, r1
   83aa4:	d232      	bcs.n	83b0c <_free_r+0x11c>
   83aa6:	6892      	ldr	r2, [r2, #8]
   83aa8:	4290      	cmp	r0, r2
   83aaa:	d1f7      	bne.n	83a9c <_free_r+0xac>
   83aac:	68c3      	ldr	r3, [r0, #12]
   83aae:	60a0      	str	r0, [r4, #8]
   83ab0:	60e3      	str	r3, [r4, #12]
   83ab2:	609c      	str	r4, [r3, #8]
   83ab4:	60c4      	str	r4, [r0, #12]
   83ab6:	4640      	mov	r0, r8
   83ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83abc:	f000 be1e 	b.w	846fc <__malloc_unlock>
   83ac0:	6895      	ldr	r5, [r2, #8]
   83ac2:	4f3b      	ldr	r7, [pc, #236]	; (83bb0 <_free_r+0x1c0>)
   83ac4:	4403      	add	r3, r0
   83ac6:	42bd      	cmp	r5, r7
   83ac8:	d040      	beq.n	83b4c <_free_r+0x15c>
   83aca:	68d0      	ldr	r0, [r2, #12]
   83acc:	f043 0201 	orr.w	r2, r3, #1
   83ad0:	60e8      	str	r0, [r5, #12]
   83ad2:	6085      	str	r5, [r0, #8]
   83ad4:	6062      	str	r2, [r4, #4]
   83ad6:	50e3      	str	r3, [r4, r3]
   83ad8:	e7b7      	b.n	83a4a <_free_r+0x5a>
   83ada:	07ff      	lsls	r7, r7, #31
   83adc:	4403      	add	r3, r0
   83ade:	d407      	bmi.n	83af0 <_free_r+0x100>
   83ae0:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83ae4:	1b64      	subs	r4, r4, r5
   83ae6:	68e2      	ldr	r2, [r4, #12]
   83ae8:	68a0      	ldr	r0, [r4, #8]
   83aea:	442b      	add	r3, r5
   83aec:	60c2      	str	r2, [r0, #12]
   83aee:	6090      	str	r0, [r2, #8]
   83af0:	4a30      	ldr	r2, [pc, #192]	; (83bb4 <_free_r+0x1c4>)
   83af2:	f043 0001 	orr.w	r0, r3, #1
   83af6:	6812      	ldr	r2, [r2, #0]
   83af8:	6060      	str	r0, [r4, #4]
   83afa:	4293      	cmp	r3, r2
   83afc:	608c      	str	r4, [r1, #8]
   83afe:	d3b9      	bcc.n	83a74 <_free_r+0x84>
   83b00:	4b2d      	ldr	r3, [pc, #180]	; (83bb8 <_free_r+0x1c8>)
   83b02:	4640      	mov	r0, r8
   83b04:	6819      	ldr	r1, [r3, #0]
   83b06:	f7ff ff23 	bl	83950 <_malloc_trim_r>
   83b0a:	e7b3      	b.n	83a74 <_free_r+0x84>
   83b0c:	4610      	mov	r0, r2
   83b0e:	e7cd      	b.n	83aac <_free_r+0xbc>
   83b10:	1811      	adds	r1, r2, r0
   83b12:	6849      	ldr	r1, [r1, #4]
   83b14:	07c9      	lsls	r1, r1, #31
   83b16:	d444      	bmi.n	83ba2 <_free_r+0x1b2>
   83b18:	6891      	ldr	r1, [r2, #8]
   83b1a:	4403      	add	r3, r0
   83b1c:	68d2      	ldr	r2, [r2, #12]
   83b1e:	f043 0001 	orr.w	r0, r3, #1
   83b22:	60ca      	str	r2, [r1, #12]
   83b24:	6091      	str	r1, [r2, #8]
   83b26:	6060      	str	r0, [r4, #4]
   83b28:	50e3      	str	r3, [r4, r3]
   83b2a:	e7a3      	b.n	83a74 <_free_r+0x84>
   83b2c:	2a14      	cmp	r2, #20
   83b2e:	d816      	bhi.n	83b5e <_free_r+0x16e>
   83b30:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83b34:	00ff      	lsls	r7, r7, #3
   83b36:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83b3a:	e7aa      	b.n	83a92 <_free_r+0xa2>
   83b3c:	2301      	movs	r3, #1
   83b3e:	10aa      	asrs	r2, r5, #2
   83b40:	684d      	ldr	r5, [r1, #4]
   83b42:	4093      	lsls	r3, r2
   83b44:	432b      	orrs	r3, r5
   83b46:	604b      	str	r3, [r1, #4]
   83b48:	4603      	mov	r3, r0
   83b4a:	e7b0      	b.n	83aae <_free_r+0xbe>
   83b4c:	f043 0201 	orr.w	r2, r3, #1
   83b50:	614c      	str	r4, [r1, #20]
   83b52:	610c      	str	r4, [r1, #16]
   83b54:	60e5      	str	r5, [r4, #12]
   83b56:	60a5      	str	r5, [r4, #8]
   83b58:	6062      	str	r2, [r4, #4]
   83b5a:	50e3      	str	r3, [r4, r3]
   83b5c:	e78a      	b.n	83a74 <_free_r+0x84>
   83b5e:	2a54      	cmp	r2, #84	; 0x54
   83b60:	d806      	bhi.n	83b70 <_free_r+0x180>
   83b62:	0b1a      	lsrs	r2, r3, #12
   83b64:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83b68:	00ff      	lsls	r7, r7, #3
   83b6a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83b6e:	e790      	b.n	83a92 <_free_r+0xa2>
   83b70:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83b74:	d806      	bhi.n	83b84 <_free_r+0x194>
   83b76:	0bda      	lsrs	r2, r3, #15
   83b78:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83b7c:	00ff      	lsls	r7, r7, #3
   83b7e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83b82:	e786      	b.n	83a92 <_free_r+0xa2>
   83b84:	f240 5054 	movw	r0, #1364	; 0x554
   83b88:	4282      	cmp	r2, r0
   83b8a:	d806      	bhi.n	83b9a <_free_r+0x1aa>
   83b8c:	0c9a      	lsrs	r2, r3, #18
   83b8e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83b92:	00ff      	lsls	r7, r7, #3
   83b94:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83b98:	e77b      	b.n	83a92 <_free_r+0xa2>
   83b9a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83b9e:	257e      	movs	r5, #126	; 0x7e
   83ba0:	e777      	b.n	83a92 <_free_r+0xa2>
   83ba2:	f043 0101 	orr.w	r1, r3, #1
   83ba6:	6061      	str	r1, [r4, #4]
   83ba8:	6013      	str	r3, [r2, #0]
   83baa:	e763      	b.n	83a74 <_free_r+0x84>
   83bac:	200706f0 	.word	0x200706f0
   83bb0:	200706f8 	.word	0x200706f8
   83bb4:	20070afc 	.word	0x20070afc
   83bb8:	20070cfc 	.word	0x20070cfc

00083bbc <__sfvwrite_r>:
   83bbc:	6893      	ldr	r3, [r2, #8]
   83bbe:	2b00      	cmp	r3, #0
   83bc0:	d071      	beq.n	83ca6 <__sfvwrite_r+0xea>
   83bc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83bc6:	898b      	ldrh	r3, [r1, #12]
   83bc8:	b083      	sub	sp, #12
   83bca:	460c      	mov	r4, r1
   83bcc:	0719      	lsls	r1, r3, #28
   83bce:	9000      	str	r0, [sp, #0]
   83bd0:	4616      	mov	r6, r2
   83bd2:	d525      	bpl.n	83c20 <__sfvwrite_r+0x64>
   83bd4:	6922      	ldr	r2, [r4, #16]
   83bd6:	b31a      	cbz	r2, 83c20 <__sfvwrite_r+0x64>
   83bd8:	f013 0002 	ands.w	r0, r3, #2
   83bdc:	6835      	ldr	r5, [r6, #0]
   83bde:	d02b      	beq.n	83c38 <__sfvwrite_r+0x7c>
   83be0:	f04f 0900 	mov.w	r9, #0
   83be4:	46b0      	mov	r8, r6
   83be6:	464f      	mov	r7, r9
   83be8:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 83eac <__sfvwrite_r+0x2f0>
   83bec:	2f00      	cmp	r7, #0
   83bee:	d055      	beq.n	83c9c <__sfvwrite_r+0xe0>
   83bf0:	4557      	cmp	r7, sl
   83bf2:	463b      	mov	r3, r7
   83bf4:	464a      	mov	r2, r9
   83bf6:	bf28      	it	cs
   83bf8:	4653      	movcs	r3, sl
   83bfa:	69e1      	ldr	r1, [r4, #28]
   83bfc:	9800      	ldr	r0, [sp, #0]
   83bfe:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83c00:	47b0      	blx	r6
   83c02:	2800      	cmp	r0, #0
   83c04:	dd56      	ble.n	83cb4 <__sfvwrite_r+0xf8>
   83c06:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83c0a:	4481      	add	r9, r0
   83c0c:	1a1b      	subs	r3, r3, r0
   83c0e:	1a3f      	subs	r7, r7, r0
   83c10:	f8c8 3008 	str.w	r3, [r8, #8]
   83c14:	2b00      	cmp	r3, #0
   83c16:	d1e9      	bne.n	83bec <__sfvwrite_r+0x30>
   83c18:	2000      	movs	r0, #0
   83c1a:	b003      	add	sp, #12
   83c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c20:	4621      	mov	r1, r4
   83c22:	9800      	ldr	r0, [sp, #0]
   83c24:	f7ff fc56 	bl	834d4 <__swsetup_r>
   83c28:	2800      	cmp	r0, #0
   83c2a:	f040 8135 	bne.w	83e98 <__sfvwrite_r+0x2dc>
   83c2e:	89a3      	ldrh	r3, [r4, #12]
   83c30:	6835      	ldr	r5, [r6, #0]
   83c32:	f013 0002 	ands.w	r0, r3, #2
   83c36:	d1d3      	bne.n	83be0 <__sfvwrite_r+0x24>
   83c38:	f013 0901 	ands.w	r9, r3, #1
   83c3c:	d144      	bne.n	83cc8 <__sfvwrite_r+0x10c>
   83c3e:	464f      	mov	r7, r9
   83c40:	9601      	str	r6, [sp, #4]
   83c42:	b337      	cbz	r7, 83c92 <__sfvwrite_r+0xd6>
   83c44:	059a      	lsls	r2, r3, #22
   83c46:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83c4a:	f140 8085 	bpl.w	83d58 <__sfvwrite_r+0x19c>
   83c4e:	4547      	cmp	r7, r8
   83c50:	46c3      	mov	fp, r8
   83c52:	f0c0 80ad 	bcc.w	83db0 <__sfvwrite_r+0x1f4>
   83c56:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83c5a:	f040 80ae 	bne.w	83dba <__sfvwrite_r+0x1fe>
   83c5e:	46ba      	mov	sl, r7
   83c60:	6820      	ldr	r0, [r4, #0]
   83c62:	465a      	mov	r2, fp
   83c64:	4649      	mov	r1, r9
   83c66:	f000 fcdf 	bl	84628 <memmove>
   83c6a:	68a2      	ldr	r2, [r4, #8]
   83c6c:	6823      	ldr	r3, [r4, #0]
   83c6e:	eba2 0208 	sub.w	r2, r2, r8
   83c72:	445b      	add	r3, fp
   83c74:	60a2      	str	r2, [r4, #8]
   83c76:	6023      	str	r3, [r4, #0]
   83c78:	9a01      	ldr	r2, [sp, #4]
   83c7a:	44d1      	add	r9, sl
   83c7c:	6893      	ldr	r3, [r2, #8]
   83c7e:	eba7 070a 	sub.w	r7, r7, sl
   83c82:	eba3 030a 	sub.w	r3, r3, sl
   83c86:	6093      	str	r3, [r2, #8]
   83c88:	2b00      	cmp	r3, #0
   83c8a:	d0c5      	beq.n	83c18 <__sfvwrite_r+0x5c>
   83c8c:	89a3      	ldrh	r3, [r4, #12]
   83c8e:	2f00      	cmp	r7, #0
   83c90:	d1d8      	bne.n	83c44 <__sfvwrite_r+0x88>
   83c92:	f8d5 9000 	ldr.w	r9, [r5]
   83c96:	686f      	ldr	r7, [r5, #4]
   83c98:	3508      	adds	r5, #8
   83c9a:	e7d2      	b.n	83c42 <__sfvwrite_r+0x86>
   83c9c:	f8d5 9000 	ldr.w	r9, [r5]
   83ca0:	686f      	ldr	r7, [r5, #4]
   83ca2:	3508      	adds	r5, #8
   83ca4:	e7a2      	b.n	83bec <__sfvwrite_r+0x30>
   83ca6:	2000      	movs	r0, #0
   83ca8:	4770      	bx	lr
   83caa:	4621      	mov	r1, r4
   83cac:	9800      	ldr	r0, [sp, #0]
   83cae:	f7ff fd21 	bl	836f4 <_fflush_r>
   83cb2:	b378      	cbz	r0, 83d14 <__sfvwrite_r+0x158>
   83cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83cb8:	f04f 30ff 	mov.w	r0, #4294967295
   83cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83cc0:	81a3      	strh	r3, [r4, #12]
   83cc2:	b003      	add	sp, #12
   83cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83cc8:	4681      	mov	r9, r0
   83cca:	4633      	mov	r3, r6
   83ccc:	464e      	mov	r6, r9
   83cce:	46a8      	mov	r8, r5
   83cd0:	469a      	mov	sl, r3
   83cd2:	464d      	mov	r5, r9
   83cd4:	b356      	cbz	r6, 83d2c <__sfvwrite_r+0x170>
   83cd6:	2800      	cmp	r0, #0
   83cd8:	d032      	beq.n	83d40 <__sfvwrite_r+0x184>
   83cda:	45b1      	cmp	r9, r6
   83cdc:	46cb      	mov	fp, r9
   83cde:	bf28      	it	cs
   83ce0:	46b3      	movcs	fp, r6
   83ce2:	6820      	ldr	r0, [r4, #0]
   83ce4:	6923      	ldr	r3, [r4, #16]
   83ce6:	465f      	mov	r7, fp
   83ce8:	4298      	cmp	r0, r3
   83cea:	6962      	ldr	r2, [r4, #20]
   83cec:	d904      	bls.n	83cf8 <__sfvwrite_r+0x13c>
   83cee:	68a3      	ldr	r3, [r4, #8]
   83cf0:	4413      	add	r3, r2
   83cf2:	459b      	cmp	fp, r3
   83cf4:	f300 80a8 	bgt.w	83e48 <__sfvwrite_r+0x28c>
   83cf8:	4593      	cmp	fp, r2
   83cfa:	db4d      	blt.n	83d98 <__sfvwrite_r+0x1dc>
   83cfc:	4613      	mov	r3, r2
   83cfe:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83d00:	462a      	mov	r2, r5
   83d02:	69e1      	ldr	r1, [r4, #28]
   83d04:	9800      	ldr	r0, [sp, #0]
   83d06:	47b8      	blx	r7
   83d08:	1e07      	subs	r7, r0, #0
   83d0a:	ddd3      	ble.n	83cb4 <__sfvwrite_r+0xf8>
   83d0c:	ebb9 0907 	subs.w	r9, r9, r7
   83d10:	d0cb      	beq.n	83caa <__sfvwrite_r+0xee>
   83d12:	2001      	movs	r0, #1
   83d14:	f8da 3008 	ldr.w	r3, [sl, #8]
   83d18:	443d      	add	r5, r7
   83d1a:	1bdb      	subs	r3, r3, r7
   83d1c:	1bf6      	subs	r6, r6, r7
   83d1e:	f8ca 3008 	str.w	r3, [sl, #8]
   83d22:	2b00      	cmp	r3, #0
   83d24:	f43f af78 	beq.w	83c18 <__sfvwrite_r+0x5c>
   83d28:	2e00      	cmp	r6, #0
   83d2a:	d1d4      	bne.n	83cd6 <__sfvwrite_r+0x11a>
   83d2c:	f108 0308 	add.w	r3, r8, #8
   83d30:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83d34:	4698      	mov	r8, r3
   83d36:	f853 5c08 	ldr.w	r5, [r3, #-8]
   83d3a:	3308      	adds	r3, #8
   83d3c:	2e00      	cmp	r6, #0
   83d3e:	d0f7      	beq.n	83d30 <__sfvwrite_r+0x174>
   83d40:	4632      	mov	r2, r6
   83d42:	210a      	movs	r1, #10
   83d44:	4628      	mov	r0, r5
   83d46:	f000 fc29 	bl	8459c <memchr>
   83d4a:	2800      	cmp	r0, #0
   83d4c:	f000 80a1 	beq.w	83e92 <__sfvwrite_r+0x2d6>
   83d50:	3001      	adds	r0, #1
   83d52:	eba0 0905 	sub.w	r9, r0, r5
   83d56:	e7c0      	b.n	83cda <__sfvwrite_r+0x11e>
   83d58:	6820      	ldr	r0, [r4, #0]
   83d5a:	6923      	ldr	r3, [r4, #16]
   83d5c:	4298      	cmp	r0, r3
   83d5e:	d802      	bhi.n	83d66 <__sfvwrite_r+0x1aa>
   83d60:	6963      	ldr	r3, [r4, #20]
   83d62:	429f      	cmp	r7, r3
   83d64:	d25d      	bcs.n	83e22 <__sfvwrite_r+0x266>
   83d66:	45b8      	cmp	r8, r7
   83d68:	bf28      	it	cs
   83d6a:	46b8      	movcs	r8, r7
   83d6c:	4649      	mov	r1, r9
   83d6e:	4642      	mov	r2, r8
   83d70:	f000 fc5a 	bl	84628 <memmove>
   83d74:	68a3      	ldr	r3, [r4, #8]
   83d76:	6822      	ldr	r2, [r4, #0]
   83d78:	eba3 0308 	sub.w	r3, r3, r8
   83d7c:	4442      	add	r2, r8
   83d7e:	60a3      	str	r3, [r4, #8]
   83d80:	6022      	str	r2, [r4, #0]
   83d82:	b10b      	cbz	r3, 83d88 <__sfvwrite_r+0x1cc>
   83d84:	46c2      	mov	sl, r8
   83d86:	e777      	b.n	83c78 <__sfvwrite_r+0xbc>
   83d88:	4621      	mov	r1, r4
   83d8a:	9800      	ldr	r0, [sp, #0]
   83d8c:	f7ff fcb2 	bl	836f4 <_fflush_r>
   83d90:	2800      	cmp	r0, #0
   83d92:	d18f      	bne.n	83cb4 <__sfvwrite_r+0xf8>
   83d94:	46c2      	mov	sl, r8
   83d96:	e76f      	b.n	83c78 <__sfvwrite_r+0xbc>
   83d98:	465a      	mov	r2, fp
   83d9a:	4629      	mov	r1, r5
   83d9c:	f000 fc44 	bl	84628 <memmove>
   83da0:	68a2      	ldr	r2, [r4, #8]
   83da2:	6823      	ldr	r3, [r4, #0]
   83da4:	eba2 020b 	sub.w	r2, r2, fp
   83da8:	445b      	add	r3, fp
   83daa:	60a2      	str	r2, [r4, #8]
   83dac:	6023      	str	r3, [r4, #0]
   83dae:	e7ad      	b.n	83d0c <__sfvwrite_r+0x150>
   83db0:	46b8      	mov	r8, r7
   83db2:	46ba      	mov	sl, r7
   83db4:	46bb      	mov	fp, r7
   83db6:	6820      	ldr	r0, [r4, #0]
   83db8:	e753      	b.n	83c62 <__sfvwrite_r+0xa6>
   83dba:	6962      	ldr	r2, [r4, #20]
   83dbc:	6820      	ldr	r0, [r4, #0]
   83dbe:	6921      	ldr	r1, [r4, #16]
   83dc0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83dc4:	eba0 0a01 	sub.w	sl, r0, r1
   83dc8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   83dcc:	f10a 0001 	add.w	r0, sl, #1
   83dd0:	ea4f 0868 	mov.w	r8, r8, asr #1
   83dd4:	4438      	add	r0, r7
   83dd6:	4540      	cmp	r0, r8
   83dd8:	4642      	mov	r2, r8
   83dda:	bf84      	itt	hi
   83ddc:	4680      	movhi	r8, r0
   83dde:	4642      	movhi	r2, r8
   83de0:	055b      	lsls	r3, r3, #21
   83de2:	d544      	bpl.n	83e6e <__sfvwrite_r+0x2b2>
   83de4:	4611      	mov	r1, r2
   83de6:	9800      	ldr	r0, [sp, #0]
   83de8:	f000 f920 	bl	8402c <_malloc_r>
   83dec:	4683      	mov	fp, r0
   83dee:	2800      	cmp	r0, #0
   83df0:	d055      	beq.n	83e9e <__sfvwrite_r+0x2e2>
   83df2:	4652      	mov	r2, sl
   83df4:	6921      	ldr	r1, [r4, #16]
   83df6:	f7fe fae3 	bl	823c0 <memcpy>
   83dfa:	89a3      	ldrh	r3, [r4, #12]
   83dfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83e04:	81a3      	strh	r3, [r4, #12]
   83e06:	eb0b 000a 	add.w	r0, fp, sl
   83e0a:	eba8 030a 	sub.w	r3, r8, sl
   83e0e:	f8c4 b010 	str.w	fp, [r4, #16]
   83e12:	f8c4 8014 	str.w	r8, [r4, #20]
   83e16:	6020      	str	r0, [r4, #0]
   83e18:	60a3      	str	r3, [r4, #8]
   83e1a:	46b8      	mov	r8, r7
   83e1c:	46ba      	mov	sl, r7
   83e1e:	46bb      	mov	fp, r7
   83e20:	e71f      	b.n	83c62 <__sfvwrite_r+0xa6>
   83e22:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83e26:	42ba      	cmp	r2, r7
   83e28:	bf28      	it	cs
   83e2a:	463a      	movcs	r2, r7
   83e2c:	fb92 f2f3 	sdiv	r2, r2, r3
   83e30:	69e1      	ldr	r1, [r4, #28]
   83e32:	fb03 f302 	mul.w	r3, r3, r2
   83e36:	9800      	ldr	r0, [sp, #0]
   83e38:	464a      	mov	r2, r9
   83e3a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83e3c:	47b0      	blx	r6
   83e3e:	f1b0 0a00 	subs.w	sl, r0, #0
   83e42:	f73f af19 	bgt.w	83c78 <__sfvwrite_r+0xbc>
   83e46:	e735      	b.n	83cb4 <__sfvwrite_r+0xf8>
   83e48:	461a      	mov	r2, r3
   83e4a:	4629      	mov	r1, r5
   83e4c:	9301      	str	r3, [sp, #4]
   83e4e:	f000 fbeb 	bl	84628 <memmove>
   83e52:	6822      	ldr	r2, [r4, #0]
   83e54:	9b01      	ldr	r3, [sp, #4]
   83e56:	4621      	mov	r1, r4
   83e58:	441a      	add	r2, r3
   83e5a:	6022      	str	r2, [r4, #0]
   83e5c:	9800      	ldr	r0, [sp, #0]
   83e5e:	f7ff fc49 	bl	836f4 <_fflush_r>
   83e62:	9b01      	ldr	r3, [sp, #4]
   83e64:	2800      	cmp	r0, #0
   83e66:	f47f af25 	bne.w	83cb4 <__sfvwrite_r+0xf8>
   83e6a:	461f      	mov	r7, r3
   83e6c:	e74e      	b.n	83d0c <__sfvwrite_r+0x150>
   83e6e:	9800      	ldr	r0, [sp, #0]
   83e70:	f000 fc4a 	bl	84708 <_realloc_r>
   83e74:	4683      	mov	fp, r0
   83e76:	2800      	cmp	r0, #0
   83e78:	d1c5      	bne.n	83e06 <__sfvwrite_r+0x24a>
   83e7a:	9d00      	ldr	r5, [sp, #0]
   83e7c:	6921      	ldr	r1, [r4, #16]
   83e7e:	4628      	mov	r0, r5
   83e80:	f7ff fdb6 	bl	839f0 <_free_r>
   83e84:	220c      	movs	r2, #12
   83e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e8a:	602a      	str	r2, [r5, #0]
   83e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83e90:	e712      	b.n	83cb8 <__sfvwrite_r+0xfc>
   83e92:	f106 0901 	add.w	r9, r6, #1
   83e96:	e720      	b.n	83cda <__sfvwrite_r+0x11e>
   83e98:	f04f 30ff 	mov.w	r0, #4294967295
   83e9c:	e6bd      	b.n	83c1a <__sfvwrite_r+0x5e>
   83e9e:	220c      	movs	r2, #12
   83ea0:	9900      	ldr	r1, [sp, #0]
   83ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ea6:	600a      	str	r2, [r1, #0]
   83ea8:	e706      	b.n	83cb8 <__sfvwrite_r+0xfc>
   83eaa:	bf00      	nop
   83eac:	7ffffc00 	.word	0x7ffffc00

00083eb0 <_fwalk_reent>:
   83eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83eb4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83eb8:	d01e      	beq.n	83ef8 <_fwalk_reent+0x48>
   83eba:	4688      	mov	r8, r1
   83ebc:	4607      	mov	r7, r0
   83ebe:	f04f 0900 	mov.w	r9, #0
   83ec2:	6875      	ldr	r5, [r6, #4]
   83ec4:	68b4      	ldr	r4, [r6, #8]
   83ec6:	3d01      	subs	r5, #1
   83ec8:	d410      	bmi.n	83eec <_fwalk_reent+0x3c>
   83eca:	89a3      	ldrh	r3, [r4, #12]
   83ecc:	3d01      	subs	r5, #1
   83ece:	2b01      	cmp	r3, #1
   83ed0:	d908      	bls.n	83ee4 <_fwalk_reent+0x34>
   83ed2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83ed6:	3301      	adds	r3, #1
   83ed8:	d004      	beq.n	83ee4 <_fwalk_reent+0x34>
   83eda:	4621      	mov	r1, r4
   83edc:	4638      	mov	r0, r7
   83ede:	47c0      	blx	r8
   83ee0:	ea49 0900 	orr.w	r9, r9, r0
   83ee4:	1c6b      	adds	r3, r5, #1
   83ee6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   83eea:	d1ee      	bne.n	83eca <_fwalk_reent+0x1a>
   83eec:	6836      	ldr	r6, [r6, #0]
   83eee:	2e00      	cmp	r6, #0
   83ef0:	d1e7      	bne.n	83ec2 <_fwalk_reent+0x12>
   83ef2:	4648      	mov	r0, r9
   83ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83ef8:	46b1      	mov	r9, r6
   83efa:	4648      	mov	r0, r9
   83efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083f00 <__locale_mb_cur_max>:
   83f00:	4b04      	ldr	r3, [pc, #16]	; (83f14 <__locale_mb_cur_max+0x14>)
   83f02:	4a05      	ldr	r2, [pc, #20]	; (83f18 <__locale_mb_cur_max+0x18>)
   83f04:	681b      	ldr	r3, [r3, #0]
   83f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   83f08:	2b00      	cmp	r3, #0
   83f0a:	bf08      	it	eq
   83f0c:	4613      	moveq	r3, r2
   83f0e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   83f12:	4770      	bx	lr
   83f14:	20070154 	.word	0x20070154
   83f18:	20070584 	.word	0x20070584

00083f1c <__retarget_lock_init_recursive>:
   83f1c:	4770      	bx	lr
   83f1e:	bf00      	nop

00083f20 <__retarget_lock_close_recursive>:
   83f20:	4770      	bx	lr
   83f22:	bf00      	nop

00083f24 <__retarget_lock_acquire_recursive>:
   83f24:	4770      	bx	lr
   83f26:	bf00      	nop

00083f28 <__retarget_lock_release_recursive>:
   83f28:	4770      	bx	lr
   83f2a:	bf00      	nop

00083f2c <__swhatbuf_r>:
   83f2c:	b570      	push	{r4, r5, r6, lr}
   83f2e:	460c      	mov	r4, r1
   83f30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83f34:	b090      	sub	sp, #64	; 0x40
   83f36:	2900      	cmp	r1, #0
   83f38:	4615      	mov	r5, r2
   83f3a:	461e      	mov	r6, r3
   83f3c:	db14      	blt.n	83f68 <__swhatbuf_r+0x3c>
   83f3e:	aa01      	add	r2, sp, #4
   83f40:	f000 ff68 	bl	84e14 <_fstat_r>
   83f44:	2800      	cmp	r0, #0
   83f46:	db0f      	blt.n	83f68 <__swhatbuf_r+0x3c>
   83f48:	9a02      	ldr	r2, [sp, #8]
   83f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83f4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   83f52:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   83f56:	fab2 f282 	clz	r2, r2
   83f5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   83f5e:	0952      	lsrs	r2, r2, #5
   83f60:	6032      	str	r2, [r6, #0]
   83f62:	602b      	str	r3, [r5, #0]
   83f64:	b010      	add	sp, #64	; 0x40
   83f66:	bd70      	pop	{r4, r5, r6, pc}
   83f68:	2300      	movs	r3, #0
   83f6a:	89a2      	ldrh	r2, [r4, #12]
   83f6c:	6033      	str	r3, [r6, #0]
   83f6e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   83f72:	d004      	beq.n	83f7e <__swhatbuf_r+0x52>
   83f74:	2240      	movs	r2, #64	; 0x40
   83f76:	4618      	mov	r0, r3
   83f78:	602a      	str	r2, [r5, #0]
   83f7a:	b010      	add	sp, #64	; 0x40
   83f7c:	bd70      	pop	{r4, r5, r6, pc}
   83f7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83f82:	602b      	str	r3, [r5, #0]
   83f84:	b010      	add	sp, #64	; 0x40
   83f86:	bd70      	pop	{r4, r5, r6, pc}

00083f88 <__smakebuf_r>:
   83f88:	898a      	ldrh	r2, [r1, #12]
   83f8a:	460b      	mov	r3, r1
   83f8c:	0792      	lsls	r2, r2, #30
   83f8e:	d506      	bpl.n	83f9e <__smakebuf_r+0x16>
   83f90:	2101      	movs	r1, #1
   83f92:	f103 0243 	add.w	r2, r3, #67	; 0x43
   83f96:	6159      	str	r1, [r3, #20]
   83f98:	601a      	str	r2, [r3, #0]
   83f9a:	611a      	str	r2, [r3, #16]
   83f9c:	4770      	bx	lr
   83f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   83fa0:	b083      	sub	sp, #12
   83fa2:	ab01      	add	r3, sp, #4
   83fa4:	466a      	mov	r2, sp
   83fa6:	460c      	mov	r4, r1
   83fa8:	4606      	mov	r6, r0
   83faa:	f7ff ffbf 	bl	83f2c <__swhatbuf_r>
   83fae:	9900      	ldr	r1, [sp, #0]
   83fb0:	4605      	mov	r5, r0
   83fb2:	4630      	mov	r0, r6
   83fb4:	f000 f83a 	bl	8402c <_malloc_r>
   83fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83fbc:	b1d8      	cbz	r0, 83ff6 <__smakebuf_r+0x6e>
   83fbe:	e89d 0006 	ldmia.w	sp, {r1, r2}
   83fc2:	4f15      	ldr	r7, [pc, #84]	; (84018 <__smakebuf_r+0x90>)
   83fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83fc8:	63f7      	str	r7, [r6, #60]	; 0x3c
   83fca:	81a3      	strh	r3, [r4, #12]
   83fcc:	6020      	str	r0, [r4, #0]
   83fce:	6120      	str	r0, [r4, #16]
   83fd0:	6161      	str	r1, [r4, #20]
   83fd2:	b91a      	cbnz	r2, 83fdc <__smakebuf_r+0x54>
   83fd4:	432b      	orrs	r3, r5
   83fd6:	81a3      	strh	r3, [r4, #12]
   83fd8:	b003      	add	sp, #12
   83fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83fdc:	4630      	mov	r0, r6
   83fde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83fe2:	f000 ff2b 	bl	84e3c <_isatty_r>
   83fe6:	b1a0      	cbz	r0, 84012 <__smakebuf_r+0x8a>
   83fe8:	89a3      	ldrh	r3, [r4, #12]
   83fea:	f023 0303 	bic.w	r3, r3, #3
   83fee:	f043 0301 	orr.w	r3, r3, #1
   83ff2:	b21b      	sxth	r3, r3
   83ff4:	e7ee      	b.n	83fd4 <__smakebuf_r+0x4c>
   83ff6:	059a      	lsls	r2, r3, #22
   83ff8:	d4ee      	bmi.n	83fd8 <__smakebuf_r+0x50>
   83ffa:	2101      	movs	r1, #1
   83ffc:	f023 0303 	bic.w	r3, r3, #3
   84000:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84004:	f043 0302 	orr.w	r3, r3, #2
   84008:	81a3      	strh	r3, [r4, #12]
   8400a:	6161      	str	r1, [r4, #20]
   8400c:	6022      	str	r2, [r4, #0]
   8400e:	6122      	str	r2, [r4, #16]
   84010:	e7e2      	b.n	83fd8 <__smakebuf_r+0x50>
   84012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84016:	e7dd      	b.n	83fd4 <__smakebuf_r+0x4c>
   84018:	00083749 	.word	0x00083749

0008401c <malloc>:
   8401c:	4b02      	ldr	r3, [pc, #8]	; (84028 <malloc+0xc>)
   8401e:	4601      	mov	r1, r0
   84020:	6818      	ldr	r0, [r3, #0]
   84022:	f000 b803 	b.w	8402c <_malloc_r>
   84026:	bf00      	nop
   84028:	20070154 	.word	0x20070154

0008402c <_malloc_r>:
   8402c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84030:	f101 060b 	add.w	r6, r1, #11
   84034:	2e16      	cmp	r6, #22
   84036:	b083      	sub	sp, #12
   84038:	4605      	mov	r5, r0
   8403a:	f240 809e 	bls.w	8417a <_malloc_r+0x14e>
   8403e:	f036 0607 	bics.w	r6, r6, #7
   84042:	f100 80bd 	bmi.w	841c0 <_malloc_r+0x194>
   84046:	42b1      	cmp	r1, r6
   84048:	f200 80ba 	bhi.w	841c0 <_malloc_r+0x194>
   8404c:	f000 fb50 	bl	846f0 <__malloc_lock>
   84050:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84054:	f0c0 8285 	bcc.w	84562 <_malloc_r+0x536>
   84058:	0a73      	lsrs	r3, r6, #9
   8405a:	f000 80b8 	beq.w	841ce <_malloc_r+0x1a2>
   8405e:	2b04      	cmp	r3, #4
   84060:	f200 816c 	bhi.w	8433c <_malloc_r+0x310>
   84064:	09b3      	lsrs	r3, r6, #6
   84066:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8406a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8406e:	00c1      	lsls	r1, r0, #3
   84070:	4fb8      	ldr	r7, [pc, #736]	; (84354 <_malloc_r+0x328>)
   84072:	4439      	add	r1, r7
   84074:	684c      	ldr	r4, [r1, #4]
   84076:	3908      	subs	r1, #8
   84078:	42a1      	cmp	r1, r4
   8407a:	d106      	bne.n	8408a <_malloc_r+0x5e>
   8407c:	e00c      	b.n	84098 <_malloc_r+0x6c>
   8407e:	2a00      	cmp	r2, #0
   84080:	f280 80ab 	bge.w	841da <_malloc_r+0x1ae>
   84084:	68e4      	ldr	r4, [r4, #12]
   84086:	42a1      	cmp	r1, r4
   84088:	d006      	beq.n	84098 <_malloc_r+0x6c>
   8408a:	6863      	ldr	r3, [r4, #4]
   8408c:	f023 0303 	bic.w	r3, r3, #3
   84090:	1b9a      	subs	r2, r3, r6
   84092:	2a0f      	cmp	r2, #15
   84094:	ddf3      	ble.n	8407e <_malloc_r+0x52>
   84096:	4670      	mov	r0, lr
   84098:	693c      	ldr	r4, [r7, #16]
   8409a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84368 <_malloc_r+0x33c>
   8409e:	4574      	cmp	r4, lr
   840a0:	f000 819e 	beq.w	843e0 <_malloc_r+0x3b4>
   840a4:	6863      	ldr	r3, [r4, #4]
   840a6:	f023 0303 	bic.w	r3, r3, #3
   840aa:	1b9a      	subs	r2, r3, r6
   840ac:	2a0f      	cmp	r2, #15
   840ae:	f300 8183 	bgt.w	843b8 <_malloc_r+0x38c>
   840b2:	2a00      	cmp	r2, #0
   840b4:	f8c7 e014 	str.w	lr, [r7, #20]
   840b8:	f8c7 e010 	str.w	lr, [r7, #16]
   840bc:	f280 8091 	bge.w	841e2 <_malloc_r+0x1b6>
   840c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   840c4:	f080 8154 	bcs.w	84370 <_malloc_r+0x344>
   840c8:	2201      	movs	r2, #1
   840ca:	08db      	lsrs	r3, r3, #3
   840cc:	6879      	ldr	r1, [r7, #4]
   840ce:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   840d2:	4413      	add	r3, r2
   840d4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   840d8:	fa02 f20c 	lsl.w	r2, r2, ip
   840dc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   840e0:	430a      	orrs	r2, r1
   840e2:	f1ac 0108 	sub.w	r1, ip, #8
   840e6:	60e1      	str	r1, [r4, #12]
   840e8:	f8c4 8008 	str.w	r8, [r4, #8]
   840ec:	607a      	str	r2, [r7, #4]
   840ee:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   840f2:	f8c8 400c 	str.w	r4, [r8, #12]
   840f6:	2401      	movs	r4, #1
   840f8:	1083      	asrs	r3, r0, #2
   840fa:	409c      	lsls	r4, r3
   840fc:	4294      	cmp	r4, r2
   840fe:	d87d      	bhi.n	841fc <_malloc_r+0x1d0>
   84100:	4214      	tst	r4, r2
   84102:	d106      	bne.n	84112 <_malloc_r+0xe6>
   84104:	f020 0003 	bic.w	r0, r0, #3
   84108:	0064      	lsls	r4, r4, #1
   8410a:	4214      	tst	r4, r2
   8410c:	f100 0004 	add.w	r0, r0, #4
   84110:	d0fa      	beq.n	84108 <_malloc_r+0xdc>
   84112:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   84116:	46cc      	mov	ip, r9
   84118:	4680      	mov	r8, r0
   8411a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8411e:	459c      	cmp	ip, r3
   84120:	d107      	bne.n	84132 <_malloc_r+0x106>
   84122:	e15f      	b.n	843e4 <_malloc_r+0x3b8>
   84124:	2a00      	cmp	r2, #0
   84126:	f280 816d 	bge.w	84404 <_malloc_r+0x3d8>
   8412a:	68db      	ldr	r3, [r3, #12]
   8412c:	459c      	cmp	ip, r3
   8412e:	f000 8159 	beq.w	843e4 <_malloc_r+0x3b8>
   84132:	6859      	ldr	r1, [r3, #4]
   84134:	f021 0103 	bic.w	r1, r1, #3
   84138:	1b8a      	subs	r2, r1, r6
   8413a:	2a0f      	cmp	r2, #15
   8413c:	ddf2      	ble.n	84124 <_malloc_r+0xf8>
   8413e:	68dc      	ldr	r4, [r3, #12]
   84140:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84144:	f046 0801 	orr.w	r8, r6, #1
   84148:	4628      	mov	r0, r5
   8414a:	441e      	add	r6, r3
   8414c:	f042 0501 	orr.w	r5, r2, #1
   84150:	f8c3 8004 	str.w	r8, [r3, #4]
   84154:	f8cc 400c 	str.w	r4, [ip, #12]
   84158:	f8c4 c008 	str.w	ip, [r4, #8]
   8415c:	617e      	str	r6, [r7, #20]
   8415e:	613e      	str	r6, [r7, #16]
   84160:	f8c6 e00c 	str.w	lr, [r6, #12]
   84164:	f8c6 e008 	str.w	lr, [r6, #8]
   84168:	6075      	str	r5, [r6, #4]
   8416a:	505a      	str	r2, [r3, r1]
   8416c:	9300      	str	r3, [sp, #0]
   8416e:	f000 fac5 	bl	846fc <__malloc_unlock>
   84172:	9b00      	ldr	r3, [sp, #0]
   84174:	f103 0408 	add.w	r4, r3, #8
   84178:	e01e      	b.n	841b8 <_malloc_r+0x18c>
   8417a:	2910      	cmp	r1, #16
   8417c:	d820      	bhi.n	841c0 <_malloc_r+0x194>
   8417e:	f000 fab7 	bl	846f0 <__malloc_lock>
   84182:	2610      	movs	r6, #16
   84184:	2318      	movs	r3, #24
   84186:	2002      	movs	r0, #2
   84188:	4f72      	ldr	r7, [pc, #456]	; (84354 <_malloc_r+0x328>)
   8418a:	443b      	add	r3, r7
   8418c:	685c      	ldr	r4, [r3, #4]
   8418e:	f1a3 0208 	sub.w	r2, r3, #8
   84192:	4294      	cmp	r4, r2
   84194:	f000 812f 	beq.w	843f6 <_malloc_r+0x3ca>
   84198:	6863      	ldr	r3, [r4, #4]
   8419a:	68e1      	ldr	r1, [r4, #12]
   8419c:	f023 0303 	bic.w	r3, r3, #3
   841a0:	4423      	add	r3, r4
   841a2:	685a      	ldr	r2, [r3, #4]
   841a4:	68a6      	ldr	r6, [r4, #8]
   841a6:	f042 0201 	orr.w	r2, r2, #1
   841aa:	60f1      	str	r1, [r6, #12]
   841ac:	4628      	mov	r0, r5
   841ae:	608e      	str	r6, [r1, #8]
   841b0:	605a      	str	r2, [r3, #4]
   841b2:	f000 faa3 	bl	846fc <__malloc_unlock>
   841b6:	3408      	adds	r4, #8
   841b8:	4620      	mov	r0, r4
   841ba:	b003      	add	sp, #12
   841bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   841c0:	2400      	movs	r4, #0
   841c2:	230c      	movs	r3, #12
   841c4:	4620      	mov	r0, r4
   841c6:	602b      	str	r3, [r5, #0]
   841c8:	b003      	add	sp, #12
   841ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   841ce:	2040      	movs	r0, #64	; 0x40
   841d0:	f44f 7100 	mov.w	r1, #512	; 0x200
   841d4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   841d8:	e74a      	b.n	84070 <_malloc_r+0x44>
   841da:	4423      	add	r3, r4
   841dc:	685a      	ldr	r2, [r3, #4]
   841de:	68e1      	ldr	r1, [r4, #12]
   841e0:	e7e0      	b.n	841a4 <_malloc_r+0x178>
   841e2:	4423      	add	r3, r4
   841e4:	685a      	ldr	r2, [r3, #4]
   841e6:	4628      	mov	r0, r5
   841e8:	f042 0201 	orr.w	r2, r2, #1
   841ec:	605a      	str	r2, [r3, #4]
   841ee:	3408      	adds	r4, #8
   841f0:	f000 fa84 	bl	846fc <__malloc_unlock>
   841f4:	4620      	mov	r0, r4
   841f6:	b003      	add	sp, #12
   841f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   841fc:	68bc      	ldr	r4, [r7, #8]
   841fe:	6863      	ldr	r3, [r4, #4]
   84200:	f023 0803 	bic.w	r8, r3, #3
   84204:	45b0      	cmp	r8, r6
   84206:	d304      	bcc.n	84212 <_malloc_r+0x1e6>
   84208:	eba8 0306 	sub.w	r3, r8, r6
   8420c:	2b0f      	cmp	r3, #15
   8420e:	f300 8085 	bgt.w	8431c <_malloc_r+0x2f0>
   84212:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8436c <_malloc_r+0x340>
   84216:	4b50      	ldr	r3, [pc, #320]	; (84358 <_malloc_r+0x32c>)
   84218:	f8d9 2000 	ldr.w	r2, [r9]
   8421c:	681b      	ldr	r3, [r3, #0]
   8421e:	3201      	adds	r2, #1
   84220:	4433      	add	r3, r6
   84222:	eb04 0a08 	add.w	sl, r4, r8
   84226:	f000 8154 	beq.w	844d2 <_malloc_r+0x4a6>
   8422a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8422e:	330f      	adds	r3, #15
   84230:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   84234:	f02b 0b0f 	bic.w	fp, fp, #15
   84238:	4659      	mov	r1, fp
   8423a:	4628      	mov	r0, r5
   8423c:	f000 fc1a 	bl	84a74 <_sbrk_r>
   84240:	1c41      	adds	r1, r0, #1
   84242:	4602      	mov	r2, r0
   84244:	f000 80fb 	beq.w	8443e <_malloc_r+0x412>
   84248:	4582      	cmp	sl, r0
   8424a:	f200 80f6 	bhi.w	8443a <_malloc_r+0x40e>
   8424e:	4b43      	ldr	r3, [pc, #268]	; (8435c <_malloc_r+0x330>)
   84250:	6819      	ldr	r1, [r3, #0]
   84252:	4459      	add	r1, fp
   84254:	6019      	str	r1, [r3, #0]
   84256:	f000 814c 	beq.w	844f2 <_malloc_r+0x4c6>
   8425a:	f8d9 0000 	ldr.w	r0, [r9]
   8425e:	3001      	adds	r0, #1
   84260:	bf1b      	ittet	ne
   84262:	eba2 0a0a 	subne.w	sl, r2, sl
   84266:	4451      	addne	r1, sl
   84268:	f8c9 2000 	streq.w	r2, [r9]
   8426c:	6019      	strne	r1, [r3, #0]
   8426e:	f012 0107 	ands.w	r1, r2, #7
   84272:	f000 8114 	beq.w	8449e <_malloc_r+0x472>
   84276:	f1c1 0008 	rsb	r0, r1, #8
   8427a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8427e:	4402      	add	r2, r0
   84280:	3108      	adds	r1, #8
   84282:	eb02 090b 	add.w	r9, r2, fp
   84286:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8428a:	eba1 0909 	sub.w	r9, r1, r9
   8428e:	4649      	mov	r1, r9
   84290:	4628      	mov	r0, r5
   84292:	9301      	str	r3, [sp, #4]
   84294:	9200      	str	r2, [sp, #0]
   84296:	f000 fbed 	bl	84a74 <_sbrk_r>
   8429a:	1c43      	adds	r3, r0, #1
   8429c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   842a0:	f000 8142 	beq.w	84528 <_malloc_r+0x4fc>
   842a4:	1a80      	subs	r0, r0, r2
   842a6:	4448      	add	r0, r9
   842a8:	f040 0001 	orr.w	r0, r0, #1
   842ac:	6819      	ldr	r1, [r3, #0]
   842ae:	42bc      	cmp	r4, r7
   842b0:	4449      	add	r1, r9
   842b2:	60ba      	str	r2, [r7, #8]
   842b4:	6019      	str	r1, [r3, #0]
   842b6:	6050      	str	r0, [r2, #4]
   842b8:	d017      	beq.n	842ea <_malloc_r+0x2be>
   842ba:	f1b8 0f0f 	cmp.w	r8, #15
   842be:	f240 80fa 	bls.w	844b6 <_malloc_r+0x48a>
   842c2:	f04f 0c05 	mov.w	ip, #5
   842c6:	6862      	ldr	r2, [r4, #4]
   842c8:	f1a8 000c 	sub.w	r0, r8, #12
   842cc:	f020 0007 	bic.w	r0, r0, #7
   842d0:	f002 0201 	and.w	r2, r2, #1
   842d4:	eb04 0e00 	add.w	lr, r4, r0
   842d8:	4302      	orrs	r2, r0
   842da:	280f      	cmp	r0, #15
   842dc:	6062      	str	r2, [r4, #4]
   842de:	f8ce c004 	str.w	ip, [lr, #4]
   842e2:	f8ce c008 	str.w	ip, [lr, #8]
   842e6:	f200 8116 	bhi.w	84516 <_malloc_r+0x4ea>
   842ea:	4b1d      	ldr	r3, [pc, #116]	; (84360 <_malloc_r+0x334>)
   842ec:	68bc      	ldr	r4, [r7, #8]
   842ee:	681a      	ldr	r2, [r3, #0]
   842f0:	4291      	cmp	r1, r2
   842f2:	bf88      	it	hi
   842f4:	6019      	strhi	r1, [r3, #0]
   842f6:	4b1b      	ldr	r3, [pc, #108]	; (84364 <_malloc_r+0x338>)
   842f8:	681a      	ldr	r2, [r3, #0]
   842fa:	4291      	cmp	r1, r2
   842fc:	6862      	ldr	r2, [r4, #4]
   842fe:	bf88      	it	hi
   84300:	6019      	strhi	r1, [r3, #0]
   84302:	f022 0203 	bic.w	r2, r2, #3
   84306:	4296      	cmp	r6, r2
   84308:	eba2 0306 	sub.w	r3, r2, r6
   8430c:	d801      	bhi.n	84312 <_malloc_r+0x2e6>
   8430e:	2b0f      	cmp	r3, #15
   84310:	dc04      	bgt.n	8431c <_malloc_r+0x2f0>
   84312:	4628      	mov	r0, r5
   84314:	f000 f9f2 	bl	846fc <__malloc_unlock>
   84318:	2400      	movs	r4, #0
   8431a:	e74d      	b.n	841b8 <_malloc_r+0x18c>
   8431c:	f046 0201 	orr.w	r2, r6, #1
   84320:	f043 0301 	orr.w	r3, r3, #1
   84324:	4426      	add	r6, r4
   84326:	6062      	str	r2, [r4, #4]
   84328:	4628      	mov	r0, r5
   8432a:	60be      	str	r6, [r7, #8]
   8432c:	3408      	adds	r4, #8
   8432e:	6073      	str	r3, [r6, #4]
   84330:	f000 f9e4 	bl	846fc <__malloc_unlock>
   84334:	4620      	mov	r0, r4
   84336:	b003      	add	sp, #12
   84338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8433c:	2b14      	cmp	r3, #20
   8433e:	d970      	bls.n	84422 <_malloc_r+0x3f6>
   84340:	2b54      	cmp	r3, #84	; 0x54
   84342:	f200 80a2 	bhi.w	8448a <_malloc_r+0x45e>
   84346:	0b33      	lsrs	r3, r6, #12
   84348:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8434c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84350:	00c1      	lsls	r1, r0, #3
   84352:	e68d      	b.n	84070 <_malloc_r+0x44>
   84354:	200706f0 	.word	0x200706f0
   84358:	20070cfc 	.word	0x20070cfc
   8435c:	20070ccc 	.word	0x20070ccc
   84360:	20070cf4 	.word	0x20070cf4
   84364:	20070cf8 	.word	0x20070cf8
   84368:	200706f8 	.word	0x200706f8
   8436c:	20070af8 	.word	0x20070af8
   84370:	0a5a      	lsrs	r2, r3, #9
   84372:	2a04      	cmp	r2, #4
   84374:	d95b      	bls.n	8442e <_malloc_r+0x402>
   84376:	2a14      	cmp	r2, #20
   84378:	f200 80ae 	bhi.w	844d8 <_malloc_r+0x4ac>
   8437c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84380:	00c9      	lsls	r1, r1, #3
   84382:	325b      	adds	r2, #91	; 0x5b
   84384:	eb07 0c01 	add.w	ip, r7, r1
   84388:	5879      	ldr	r1, [r7, r1]
   8438a:	f1ac 0c08 	sub.w	ip, ip, #8
   8438e:	458c      	cmp	ip, r1
   84390:	f000 8088 	beq.w	844a4 <_malloc_r+0x478>
   84394:	684a      	ldr	r2, [r1, #4]
   84396:	f022 0203 	bic.w	r2, r2, #3
   8439a:	4293      	cmp	r3, r2
   8439c:	d273      	bcs.n	84486 <_malloc_r+0x45a>
   8439e:	6889      	ldr	r1, [r1, #8]
   843a0:	458c      	cmp	ip, r1
   843a2:	d1f7      	bne.n	84394 <_malloc_r+0x368>
   843a4:	f8dc 300c 	ldr.w	r3, [ip, #12]
   843a8:	687a      	ldr	r2, [r7, #4]
   843aa:	60e3      	str	r3, [r4, #12]
   843ac:	f8c4 c008 	str.w	ip, [r4, #8]
   843b0:	609c      	str	r4, [r3, #8]
   843b2:	f8cc 400c 	str.w	r4, [ip, #12]
   843b6:	e69e      	b.n	840f6 <_malloc_r+0xca>
   843b8:	f046 0c01 	orr.w	ip, r6, #1
   843bc:	f042 0101 	orr.w	r1, r2, #1
   843c0:	4426      	add	r6, r4
   843c2:	f8c4 c004 	str.w	ip, [r4, #4]
   843c6:	4628      	mov	r0, r5
   843c8:	617e      	str	r6, [r7, #20]
   843ca:	613e      	str	r6, [r7, #16]
   843cc:	f8c6 e00c 	str.w	lr, [r6, #12]
   843d0:	f8c6 e008 	str.w	lr, [r6, #8]
   843d4:	6071      	str	r1, [r6, #4]
   843d6:	50e2      	str	r2, [r4, r3]
   843d8:	f000 f990 	bl	846fc <__malloc_unlock>
   843dc:	3408      	adds	r4, #8
   843de:	e6eb      	b.n	841b8 <_malloc_r+0x18c>
   843e0:	687a      	ldr	r2, [r7, #4]
   843e2:	e688      	b.n	840f6 <_malloc_r+0xca>
   843e4:	f108 0801 	add.w	r8, r8, #1
   843e8:	f018 0f03 	tst.w	r8, #3
   843ec:	f10c 0c08 	add.w	ip, ip, #8
   843f0:	f47f ae93 	bne.w	8411a <_malloc_r+0xee>
   843f4:	e02d      	b.n	84452 <_malloc_r+0x426>
   843f6:	68dc      	ldr	r4, [r3, #12]
   843f8:	42a3      	cmp	r3, r4
   843fa:	bf08      	it	eq
   843fc:	3002      	addeq	r0, #2
   843fe:	f43f ae4b 	beq.w	84098 <_malloc_r+0x6c>
   84402:	e6c9      	b.n	84198 <_malloc_r+0x16c>
   84404:	461c      	mov	r4, r3
   84406:	4419      	add	r1, r3
   84408:	684a      	ldr	r2, [r1, #4]
   8440a:	68db      	ldr	r3, [r3, #12]
   8440c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84410:	f042 0201 	orr.w	r2, r2, #1
   84414:	604a      	str	r2, [r1, #4]
   84416:	4628      	mov	r0, r5
   84418:	60f3      	str	r3, [r6, #12]
   8441a:	609e      	str	r6, [r3, #8]
   8441c:	f000 f96e 	bl	846fc <__malloc_unlock>
   84420:	e6ca      	b.n	841b8 <_malloc_r+0x18c>
   84422:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   84426:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8442a:	00c1      	lsls	r1, r0, #3
   8442c:	e620      	b.n	84070 <_malloc_r+0x44>
   8442e:	099a      	lsrs	r2, r3, #6
   84430:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84434:	00c9      	lsls	r1, r1, #3
   84436:	3238      	adds	r2, #56	; 0x38
   84438:	e7a4      	b.n	84384 <_malloc_r+0x358>
   8443a:	42bc      	cmp	r4, r7
   8443c:	d054      	beq.n	844e8 <_malloc_r+0x4bc>
   8443e:	68bc      	ldr	r4, [r7, #8]
   84440:	6862      	ldr	r2, [r4, #4]
   84442:	f022 0203 	bic.w	r2, r2, #3
   84446:	e75e      	b.n	84306 <_malloc_r+0x2da>
   84448:	f859 3908 	ldr.w	r3, [r9], #-8
   8444c:	4599      	cmp	r9, r3
   8444e:	f040 8086 	bne.w	8455e <_malloc_r+0x532>
   84452:	f010 0f03 	tst.w	r0, #3
   84456:	f100 30ff 	add.w	r0, r0, #4294967295
   8445a:	d1f5      	bne.n	84448 <_malloc_r+0x41c>
   8445c:	687b      	ldr	r3, [r7, #4]
   8445e:	ea23 0304 	bic.w	r3, r3, r4
   84462:	607b      	str	r3, [r7, #4]
   84464:	0064      	lsls	r4, r4, #1
   84466:	429c      	cmp	r4, r3
   84468:	f63f aec8 	bhi.w	841fc <_malloc_r+0x1d0>
   8446c:	2c00      	cmp	r4, #0
   8446e:	f43f aec5 	beq.w	841fc <_malloc_r+0x1d0>
   84472:	421c      	tst	r4, r3
   84474:	4640      	mov	r0, r8
   84476:	f47f ae4c 	bne.w	84112 <_malloc_r+0xe6>
   8447a:	0064      	lsls	r4, r4, #1
   8447c:	421c      	tst	r4, r3
   8447e:	f100 0004 	add.w	r0, r0, #4
   84482:	d0fa      	beq.n	8447a <_malloc_r+0x44e>
   84484:	e645      	b.n	84112 <_malloc_r+0xe6>
   84486:	468c      	mov	ip, r1
   84488:	e78c      	b.n	843a4 <_malloc_r+0x378>
   8448a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8448e:	d815      	bhi.n	844bc <_malloc_r+0x490>
   84490:	0bf3      	lsrs	r3, r6, #15
   84492:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84496:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8449a:	00c1      	lsls	r1, r0, #3
   8449c:	e5e8      	b.n	84070 <_malloc_r+0x44>
   8449e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   844a2:	e6ee      	b.n	84282 <_malloc_r+0x256>
   844a4:	2101      	movs	r1, #1
   844a6:	687b      	ldr	r3, [r7, #4]
   844a8:	1092      	asrs	r2, r2, #2
   844aa:	fa01 f202 	lsl.w	r2, r1, r2
   844ae:	431a      	orrs	r2, r3
   844b0:	607a      	str	r2, [r7, #4]
   844b2:	4663      	mov	r3, ip
   844b4:	e779      	b.n	843aa <_malloc_r+0x37e>
   844b6:	2301      	movs	r3, #1
   844b8:	6053      	str	r3, [r2, #4]
   844ba:	e72a      	b.n	84312 <_malloc_r+0x2e6>
   844bc:	f240 5254 	movw	r2, #1364	; 0x554
   844c0:	4293      	cmp	r3, r2
   844c2:	d822      	bhi.n	8450a <_malloc_r+0x4de>
   844c4:	0cb3      	lsrs	r3, r6, #18
   844c6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   844ca:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   844ce:	00c1      	lsls	r1, r0, #3
   844d0:	e5ce      	b.n	84070 <_malloc_r+0x44>
   844d2:	f103 0b10 	add.w	fp, r3, #16
   844d6:	e6af      	b.n	84238 <_malloc_r+0x20c>
   844d8:	2a54      	cmp	r2, #84	; 0x54
   844da:	d829      	bhi.n	84530 <_malloc_r+0x504>
   844dc:	0b1a      	lsrs	r2, r3, #12
   844de:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   844e2:	00c9      	lsls	r1, r1, #3
   844e4:	326e      	adds	r2, #110	; 0x6e
   844e6:	e74d      	b.n	84384 <_malloc_r+0x358>
   844e8:	4b20      	ldr	r3, [pc, #128]	; (8456c <_malloc_r+0x540>)
   844ea:	6819      	ldr	r1, [r3, #0]
   844ec:	4459      	add	r1, fp
   844ee:	6019      	str	r1, [r3, #0]
   844f0:	e6b3      	b.n	8425a <_malloc_r+0x22e>
   844f2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   844f6:	2800      	cmp	r0, #0
   844f8:	f47f aeaf 	bne.w	8425a <_malloc_r+0x22e>
   844fc:	eb08 030b 	add.w	r3, r8, fp
   84500:	68ba      	ldr	r2, [r7, #8]
   84502:	f043 0301 	orr.w	r3, r3, #1
   84506:	6053      	str	r3, [r2, #4]
   84508:	e6ef      	b.n	842ea <_malloc_r+0x2be>
   8450a:	207f      	movs	r0, #127	; 0x7f
   8450c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84510:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84514:	e5ac      	b.n	84070 <_malloc_r+0x44>
   84516:	f104 0108 	add.w	r1, r4, #8
   8451a:	4628      	mov	r0, r5
   8451c:	9300      	str	r3, [sp, #0]
   8451e:	f7ff fa67 	bl	839f0 <_free_r>
   84522:	9b00      	ldr	r3, [sp, #0]
   84524:	6819      	ldr	r1, [r3, #0]
   84526:	e6e0      	b.n	842ea <_malloc_r+0x2be>
   84528:	2001      	movs	r0, #1
   8452a:	f04f 0900 	mov.w	r9, #0
   8452e:	e6bd      	b.n	842ac <_malloc_r+0x280>
   84530:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84534:	d805      	bhi.n	84542 <_malloc_r+0x516>
   84536:	0bda      	lsrs	r2, r3, #15
   84538:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8453c:	00c9      	lsls	r1, r1, #3
   8453e:	3277      	adds	r2, #119	; 0x77
   84540:	e720      	b.n	84384 <_malloc_r+0x358>
   84542:	f240 5154 	movw	r1, #1364	; 0x554
   84546:	428a      	cmp	r2, r1
   84548:	d805      	bhi.n	84556 <_malloc_r+0x52a>
   8454a:	0c9a      	lsrs	r2, r3, #18
   8454c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84550:	00c9      	lsls	r1, r1, #3
   84552:	327c      	adds	r2, #124	; 0x7c
   84554:	e716      	b.n	84384 <_malloc_r+0x358>
   84556:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8455a:	227e      	movs	r2, #126	; 0x7e
   8455c:	e712      	b.n	84384 <_malloc_r+0x358>
   8455e:	687b      	ldr	r3, [r7, #4]
   84560:	e780      	b.n	84464 <_malloc_r+0x438>
   84562:	08f0      	lsrs	r0, r6, #3
   84564:	f106 0308 	add.w	r3, r6, #8
   84568:	e60e      	b.n	84188 <_malloc_r+0x15c>
   8456a:	bf00      	nop
   8456c:	20070ccc 	.word	0x20070ccc

00084570 <__ascii_mbtowc>:
   84570:	b082      	sub	sp, #8
   84572:	b149      	cbz	r1, 84588 <__ascii_mbtowc+0x18>
   84574:	b15a      	cbz	r2, 8458e <__ascii_mbtowc+0x1e>
   84576:	b16b      	cbz	r3, 84594 <__ascii_mbtowc+0x24>
   84578:	7813      	ldrb	r3, [r2, #0]
   8457a:	600b      	str	r3, [r1, #0]
   8457c:	7812      	ldrb	r2, [r2, #0]
   8457e:	1c10      	adds	r0, r2, #0
   84580:	bf18      	it	ne
   84582:	2001      	movne	r0, #1
   84584:	b002      	add	sp, #8
   84586:	4770      	bx	lr
   84588:	a901      	add	r1, sp, #4
   8458a:	2a00      	cmp	r2, #0
   8458c:	d1f3      	bne.n	84576 <__ascii_mbtowc+0x6>
   8458e:	4610      	mov	r0, r2
   84590:	b002      	add	sp, #8
   84592:	4770      	bx	lr
   84594:	f06f 0001 	mvn.w	r0, #1
   84598:	e7f4      	b.n	84584 <__ascii_mbtowc+0x14>
   8459a:	bf00      	nop

0008459c <memchr>:
   8459c:	0783      	lsls	r3, r0, #30
   8459e:	b470      	push	{r4, r5, r6}
   845a0:	b2cd      	uxtb	r5, r1
   845a2:	d03d      	beq.n	84620 <memchr+0x84>
   845a4:	1e54      	subs	r4, r2, #1
   845a6:	b30a      	cbz	r2, 845ec <memchr+0x50>
   845a8:	7803      	ldrb	r3, [r0, #0]
   845aa:	42ab      	cmp	r3, r5
   845ac:	d01f      	beq.n	845ee <memchr+0x52>
   845ae:	1c43      	adds	r3, r0, #1
   845b0:	e005      	b.n	845be <memchr+0x22>
   845b2:	f114 34ff 	adds.w	r4, r4, #4294967295
   845b6:	d319      	bcc.n	845ec <memchr+0x50>
   845b8:	7802      	ldrb	r2, [r0, #0]
   845ba:	42aa      	cmp	r2, r5
   845bc:	d017      	beq.n	845ee <memchr+0x52>
   845be:	f013 0f03 	tst.w	r3, #3
   845c2:	4618      	mov	r0, r3
   845c4:	f103 0301 	add.w	r3, r3, #1
   845c8:	d1f3      	bne.n	845b2 <memchr+0x16>
   845ca:	2c03      	cmp	r4, #3
   845cc:	d811      	bhi.n	845f2 <memchr+0x56>
   845ce:	b34c      	cbz	r4, 84624 <memchr+0x88>
   845d0:	7803      	ldrb	r3, [r0, #0]
   845d2:	42ab      	cmp	r3, r5
   845d4:	d00b      	beq.n	845ee <memchr+0x52>
   845d6:	4404      	add	r4, r0
   845d8:	1c43      	adds	r3, r0, #1
   845da:	e002      	b.n	845e2 <memchr+0x46>
   845dc:	7802      	ldrb	r2, [r0, #0]
   845de:	42aa      	cmp	r2, r5
   845e0:	d005      	beq.n	845ee <memchr+0x52>
   845e2:	429c      	cmp	r4, r3
   845e4:	4618      	mov	r0, r3
   845e6:	f103 0301 	add.w	r3, r3, #1
   845ea:	d1f7      	bne.n	845dc <memchr+0x40>
   845ec:	2000      	movs	r0, #0
   845ee:	bc70      	pop	{r4, r5, r6}
   845f0:	4770      	bx	lr
   845f2:	0209      	lsls	r1, r1, #8
   845f4:	b289      	uxth	r1, r1
   845f6:	4329      	orrs	r1, r5
   845f8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   845fc:	6803      	ldr	r3, [r0, #0]
   845fe:	4606      	mov	r6, r0
   84600:	404b      	eors	r3, r1
   84602:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84606:	ea22 0303 	bic.w	r3, r2, r3
   8460a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8460e:	f100 0004 	add.w	r0, r0, #4
   84612:	d103      	bne.n	8461c <memchr+0x80>
   84614:	3c04      	subs	r4, #4
   84616:	2c03      	cmp	r4, #3
   84618:	d8f0      	bhi.n	845fc <memchr+0x60>
   8461a:	e7d8      	b.n	845ce <memchr+0x32>
   8461c:	4630      	mov	r0, r6
   8461e:	e7d7      	b.n	845d0 <memchr+0x34>
   84620:	4614      	mov	r4, r2
   84622:	e7d2      	b.n	845ca <memchr+0x2e>
   84624:	4620      	mov	r0, r4
   84626:	e7e2      	b.n	845ee <memchr+0x52>

00084628 <memmove>:
   84628:	4288      	cmp	r0, r1
   8462a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8462c:	d90d      	bls.n	8464a <memmove+0x22>
   8462e:	188b      	adds	r3, r1, r2
   84630:	4298      	cmp	r0, r3
   84632:	d20a      	bcs.n	8464a <memmove+0x22>
   84634:	1884      	adds	r4, r0, r2
   84636:	2a00      	cmp	r2, #0
   84638:	d051      	beq.n	846de <memmove+0xb6>
   8463a:	4622      	mov	r2, r4
   8463c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84640:	4299      	cmp	r1, r3
   84642:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84646:	d1f9      	bne.n	8463c <memmove+0x14>
   84648:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8464a:	2a0f      	cmp	r2, #15
   8464c:	d948      	bls.n	846e0 <memmove+0xb8>
   8464e:	ea41 0300 	orr.w	r3, r1, r0
   84652:	079b      	lsls	r3, r3, #30
   84654:	d146      	bne.n	846e4 <memmove+0xbc>
   84656:	4615      	mov	r5, r2
   84658:	f100 0410 	add.w	r4, r0, #16
   8465c:	f101 0310 	add.w	r3, r1, #16
   84660:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84664:	3d10      	subs	r5, #16
   84666:	f844 6c10 	str.w	r6, [r4, #-16]
   8466a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8466e:	2d0f      	cmp	r5, #15
   84670:	f844 6c0c 	str.w	r6, [r4, #-12]
   84674:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84678:	f104 0410 	add.w	r4, r4, #16
   8467c:	f844 6c18 	str.w	r6, [r4, #-24]
   84680:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84684:	f103 0310 	add.w	r3, r3, #16
   84688:	f844 6c14 	str.w	r6, [r4, #-20]
   8468c:	d8e8      	bhi.n	84660 <memmove+0x38>
   8468e:	f1a2 0310 	sub.w	r3, r2, #16
   84692:	f023 030f 	bic.w	r3, r3, #15
   84696:	f002 0e0f 	and.w	lr, r2, #15
   8469a:	3310      	adds	r3, #16
   8469c:	f1be 0f03 	cmp.w	lr, #3
   846a0:	4419      	add	r1, r3
   846a2:	4403      	add	r3, r0
   846a4:	d921      	bls.n	846ea <memmove+0xc2>
   846a6:	460e      	mov	r6, r1
   846a8:	4674      	mov	r4, lr
   846aa:	1f1d      	subs	r5, r3, #4
   846ac:	f856 7b04 	ldr.w	r7, [r6], #4
   846b0:	3c04      	subs	r4, #4
   846b2:	2c03      	cmp	r4, #3
   846b4:	f845 7f04 	str.w	r7, [r5, #4]!
   846b8:	d8f8      	bhi.n	846ac <memmove+0x84>
   846ba:	f1ae 0404 	sub.w	r4, lr, #4
   846be:	f024 0403 	bic.w	r4, r4, #3
   846c2:	3404      	adds	r4, #4
   846c4:	4421      	add	r1, r4
   846c6:	4423      	add	r3, r4
   846c8:	f002 0203 	and.w	r2, r2, #3
   846cc:	b162      	cbz	r2, 846e8 <memmove+0xc0>
   846ce:	3b01      	subs	r3, #1
   846d0:	440a      	add	r2, r1
   846d2:	f811 4b01 	ldrb.w	r4, [r1], #1
   846d6:	428a      	cmp	r2, r1
   846d8:	f803 4f01 	strb.w	r4, [r3, #1]!
   846dc:	d1f9      	bne.n	846d2 <memmove+0xaa>
   846de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   846e0:	4603      	mov	r3, r0
   846e2:	e7f3      	b.n	846cc <memmove+0xa4>
   846e4:	4603      	mov	r3, r0
   846e6:	e7f2      	b.n	846ce <memmove+0xa6>
   846e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   846ea:	4672      	mov	r2, lr
   846ec:	e7ee      	b.n	846cc <memmove+0xa4>
   846ee:	bf00      	nop

000846f0 <__malloc_lock>:
   846f0:	4801      	ldr	r0, [pc, #4]	; (846f8 <__malloc_lock+0x8>)
   846f2:	f7ff bc17 	b.w	83f24 <__retarget_lock_acquire_recursive>
   846f6:	bf00      	nop
   846f8:	20070d1c 	.word	0x20070d1c

000846fc <__malloc_unlock>:
   846fc:	4801      	ldr	r0, [pc, #4]	; (84704 <__malloc_unlock+0x8>)
   846fe:	f7ff bc13 	b.w	83f28 <__retarget_lock_release_recursive>
   84702:	bf00      	nop
   84704:	20070d1c 	.word	0x20070d1c

00084708 <_realloc_r>:
   84708:	2900      	cmp	r1, #0
   8470a:	f000 8094 	beq.w	84836 <_realloc_r+0x12e>
   8470e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84712:	460c      	mov	r4, r1
   84714:	4615      	mov	r5, r2
   84716:	b083      	sub	sp, #12
   84718:	4680      	mov	r8, r0
   8471a:	f105 060b 	add.w	r6, r5, #11
   8471e:	f7ff ffe7 	bl	846f0 <__malloc_lock>
   84722:	f854 ec04 	ldr.w	lr, [r4, #-4]
   84726:	2e16      	cmp	r6, #22
   84728:	f02e 0703 	bic.w	r7, lr, #3
   8472c:	f1a4 0908 	sub.w	r9, r4, #8
   84730:	d83c      	bhi.n	847ac <_realloc_r+0xa4>
   84732:	2210      	movs	r2, #16
   84734:	4616      	mov	r6, r2
   84736:	42b5      	cmp	r5, r6
   84738:	d83d      	bhi.n	847b6 <_realloc_r+0xae>
   8473a:	4297      	cmp	r7, r2
   8473c:	da43      	bge.n	847c6 <_realloc_r+0xbe>
   8473e:	4bc6      	ldr	r3, [pc, #792]	; (84a58 <_realloc_r+0x350>)
   84740:	eb09 0007 	add.w	r0, r9, r7
   84744:	6899      	ldr	r1, [r3, #8]
   84746:	4288      	cmp	r0, r1
   84748:	f000 80c3 	beq.w	848d2 <_realloc_r+0x1ca>
   8474c:	6843      	ldr	r3, [r0, #4]
   8474e:	f023 0101 	bic.w	r1, r3, #1
   84752:	4401      	add	r1, r0
   84754:	6849      	ldr	r1, [r1, #4]
   84756:	07c9      	lsls	r1, r1, #31
   84758:	d54d      	bpl.n	847f6 <_realloc_r+0xee>
   8475a:	f01e 0f01 	tst.w	lr, #1
   8475e:	f000 809b 	beq.w	84898 <_realloc_r+0x190>
   84762:	4629      	mov	r1, r5
   84764:	4640      	mov	r0, r8
   84766:	f7ff fc61 	bl	8402c <_malloc_r>
   8476a:	4605      	mov	r5, r0
   8476c:	2800      	cmp	r0, #0
   8476e:	d03b      	beq.n	847e8 <_realloc_r+0xe0>
   84770:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84774:	f1a0 0208 	sub.w	r2, r0, #8
   84778:	f023 0301 	bic.w	r3, r3, #1
   8477c:	444b      	add	r3, r9
   8477e:	429a      	cmp	r2, r3
   84780:	f000 812b 	beq.w	849da <_realloc_r+0x2d2>
   84784:	1f3a      	subs	r2, r7, #4
   84786:	2a24      	cmp	r2, #36	; 0x24
   84788:	f200 8118 	bhi.w	849bc <_realloc_r+0x2b4>
   8478c:	2a13      	cmp	r2, #19
   8478e:	f200 80eb 	bhi.w	84968 <_realloc_r+0x260>
   84792:	4603      	mov	r3, r0
   84794:	4622      	mov	r2, r4
   84796:	6811      	ldr	r1, [r2, #0]
   84798:	6019      	str	r1, [r3, #0]
   8479a:	6851      	ldr	r1, [r2, #4]
   8479c:	6059      	str	r1, [r3, #4]
   8479e:	6892      	ldr	r2, [r2, #8]
   847a0:	609a      	str	r2, [r3, #8]
   847a2:	4621      	mov	r1, r4
   847a4:	4640      	mov	r0, r8
   847a6:	f7ff f923 	bl	839f0 <_free_r>
   847aa:	e01d      	b.n	847e8 <_realloc_r+0xe0>
   847ac:	f026 0607 	bic.w	r6, r6, #7
   847b0:	2e00      	cmp	r6, #0
   847b2:	4632      	mov	r2, r6
   847b4:	dabf      	bge.n	84736 <_realloc_r+0x2e>
   847b6:	2500      	movs	r5, #0
   847b8:	230c      	movs	r3, #12
   847ba:	4628      	mov	r0, r5
   847bc:	f8c8 3000 	str.w	r3, [r8]
   847c0:	b003      	add	sp, #12
   847c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   847c6:	4625      	mov	r5, r4
   847c8:	1bbb      	subs	r3, r7, r6
   847ca:	2b0f      	cmp	r3, #15
   847cc:	f8d9 2004 	ldr.w	r2, [r9, #4]
   847d0:	d81d      	bhi.n	8480e <_realloc_r+0x106>
   847d2:	f002 0201 	and.w	r2, r2, #1
   847d6:	433a      	orrs	r2, r7
   847d8:	eb09 0107 	add.w	r1, r9, r7
   847dc:	f8c9 2004 	str.w	r2, [r9, #4]
   847e0:	684b      	ldr	r3, [r1, #4]
   847e2:	f043 0301 	orr.w	r3, r3, #1
   847e6:	604b      	str	r3, [r1, #4]
   847e8:	4640      	mov	r0, r8
   847ea:	f7ff ff87 	bl	846fc <__malloc_unlock>
   847ee:	4628      	mov	r0, r5
   847f0:	b003      	add	sp, #12
   847f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   847f6:	f023 0303 	bic.w	r3, r3, #3
   847fa:	18f9      	adds	r1, r7, r3
   847fc:	4291      	cmp	r1, r2
   847fe:	db1d      	blt.n	8483c <_realloc_r+0x134>
   84800:	68c3      	ldr	r3, [r0, #12]
   84802:	6882      	ldr	r2, [r0, #8]
   84804:	4625      	mov	r5, r4
   84806:	60d3      	str	r3, [r2, #12]
   84808:	460f      	mov	r7, r1
   8480a:	609a      	str	r2, [r3, #8]
   8480c:	e7dc      	b.n	847c8 <_realloc_r+0xc0>
   8480e:	f002 0201 	and.w	r2, r2, #1
   84812:	eb09 0106 	add.w	r1, r9, r6
   84816:	f043 0301 	orr.w	r3, r3, #1
   8481a:	4332      	orrs	r2, r6
   8481c:	f8c9 2004 	str.w	r2, [r9, #4]
   84820:	444f      	add	r7, r9
   84822:	604b      	str	r3, [r1, #4]
   84824:	687b      	ldr	r3, [r7, #4]
   84826:	3108      	adds	r1, #8
   84828:	f043 0301 	orr.w	r3, r3, #1
   8482c:	607b      	str	r3, [r7, #4]
   8482e:	4640      	mov	r0, r8
   84830:	f7ff f8de 	bl	839f0 <_free_r>
   84834:	e7d8      	b.n	847e8 <_realloc_r+0xe0>
   84836:	4611      	mov	r1, r2
   84838:	f7ff bbf8 	b.w	8402c <_malloc_r>
   8483c:	f01e 0f01 	tst.w	lr, #1
   84840:	d18f      	bne.n	84762 <_realloc_r+0x5a>
   84842:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84846:	eba9 0a01 	sub.w	sl, r9, r1
   8484a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8484e:	f021 0103 	bic.w	r1, r1, #3
   84852:	440b      	add	r3, r1
   84854:	443b      	add	r3, r7
   84856:	4293      	cmp	r3, r2
   84858:	db26      	blt.n	848a8 <_realloc_r+0x1a0>
   8485a:	4655      	mov	r5, sl
   8485c:	68c1      	ldr	r1, [r0, #12]
   8485e:	6880      	ldr	r0, [r0, #8]
   84860:	1f3a      	subs	r2, r7, #4
   84862:	60c1      	str	r1, [r0, #12]
   84864:	6088      	str	r0, [r1, #8]
   84866:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8486a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8486e:	2a24      	cmp	r2, #36	; 0x24
   84870:	60c1      	str	r1, [r0, #12]
   84872:	6088      	str	r0, [r1, #8]
   84874:	d826      	bhi.n	848c4 <_realloc_r+0x1bc>
   84876:	2a13      	cmp	r2, #19
   84878:	f240 8081 	bls.w	8497e <_realloc_r+0x276>
   8487c:	6821      	ldr	r1, [r4, #0]
   8487e:	2a1b      	cmp	r2, #27
   84880:	f8ca 1008 	str.w	r1, [sl, #8]
   84884:	6861      	ldr	r1, [r4, #4]
   84886:	f8ca 100c 	str.w	r1, [sl, #12]
   8488a:	f200 80ad 	bhi.w	849e8 <_realloc_r+0x2e0>
   8488e:	f104 0008 	add.w	r0, r4, #8
   84892:	f10a 0210 	add.w	r2, sl, #16
   84896:	e074      	b.n	84982 <_realloc_r+0x27a>
   84898:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8489c:	eba9 0a03 	sub.w	sl, r9, r3
   848a0:	f8da 1004 	ldr.w	r1, [sl, #4]
   848a4:	f021 0103 	bic.w	r1, r1, #3
   848a8:	187b      	adds	r3, r7, r1
   848aa:	4293      	cmp	r3, r2
   848ac:	f6ff af59 	blt.w	84762 <_realloc_r+0x5a>
   848b0:	4655      	mov	r5, sl
   848b2:	f8da 100c 	ldr.w	r1, [sl, #12]
   848b6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   848ba:	1f3a      	subs	r2, r7, #4
   848bc:	2a24      	cmp	r2, #36	; 0x24
   848be:	60c1      	str	r1, [r0, #12]
   848c0:	6088      	str	r0, [r1, #8]
   848c2:	d9d8      	bls.n	84876 <_realloc_r+0x16e>
   848c4:	4621      	mov	r1, r4
   848c6:	4628      	mov	r0, r5
   848c8:	461f      	mov	r7, r3
   848ca:	46d1      	mov	r9, sl
   848cc:	f7ff feac 	bl	84628 <memmove>
   848d0:	e77a      	b.n	847c8 <_realloc_r+0xc0>
   848d2:	6841      	ldr	r1, [r0, #4]
   848d4:	f106 0010 	add.w	r0, r6, #16
   848d8:	f021 0b03 	bic.w	fp, r1, #3
   848dc:	44bb      	add	fp, r7
   848de:	4583      	cmp	fp, r0
   848e0:	da58      	bge.n	84994 <_realloc_r+0x28c>
   848e2:	f01e 0f01 	tst.w	lr, #1
   848e6:	f47f af3c 	bne.w	84762 <_realloc_r+0x5a>
   848ea:	f854 1c08 	ldr.w	r1, [r4, #-8]
   848ee:	eba9 0a01 	sub.w	sl, r9, r1
   848f2:	f8da 1004 	ldr.w	r1, [sl, #4]
   848f6:	f021 0103 	bic.w	r1, r1, #3
   848fa:	448b      	add	fp, r1
   848fc:	4558      	cmp	r0, fp
   848fe:	dcd3      	bgt.n	848a8 <_realloc_r+0x1a0>
   84900:	4655      	mov	r5, sl
   84902:	f8da 100c 	ldr.w	r1, [sl, #12]
   84906:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8490a:	1f3a      	subs	r2, r7, #4
   8490c:	2a24      	cmp	r2, #36	; 0x24
   8490e:	60c1      	str	r1, [r0, #12]
   84910:	6088      	str	r0, [r1, #8]
   84912:	f200 808d 	bhi.w	84a30 <_realloc_r+0x328>
   84916:	2a13      	cmp	r2, #19
   84918:	f240 8087 	bls.w	84a2a <_realloc_r+0x322>
   8491c:	6821      	ldr	r1, [r4, #0]
   8491e:	2a1b      	cmp	r2, #27
   84920:	f8ca 1008 	str.w	r1, [sl, #8]
   84924:	6861      	ldr	r1, [r4, #4]
   84926:	f8ca 100c 	str.w	r1, [sl, #12]
   8492a:	f200 8088 	bhi.w	84a3e <_realloc_r+0x336>
   8492e:	f104 0108 	add.w	r1, r4, #8
   84932:	f10a 0210 	add.w	r2, sl, #16
   84936:	6808      	ldr	r0, [r1, #0]
   84938:	6010      	str	r0, [r2, #0]
   8493a:	6848      	ldr	r0, [r1, #4]
   8493c:	6050      	str	r0, [r2, #4]
   8493e:	6889      	ldr	r1, [r1, #8]
   84940:	6091      	str	r1, [r2, #8]
   84942:	ebab 0206 	sub.w	r2, fp, r6
   84946:	eb0a 0106 	add.w	r1, sl, r6
   8494a:	f042 0201 	orr.w	r2, r2, #1
   8494e:	6099      	str	r1, [r3, #8]
   84950:	604a      	str	r2, [r1, #4]
   84952:	f8da 3004 	ldr.w	r3, [sl, #4]
   84956:	4640      	mov	r0, r8
   84958:	f003 0301 	and.w	r3, r3, #1
   8495c:	431e      	orrs	r6, r3
   8495e:	f8ca 6004 	str.w	r6, [sl, #4]
   84962:	f7ff fecb 	bl	846fc <__malloc_unlock>
   84966:	e742      	b.n	847ee <_realloc_r+0xe6>
   84968:	6823      	ldr	r3, [r4, #0]
   8496a:	2a1b      	cmp	r2, #27
   8496c:	6003      	str	r3, [r0, #0]
   8496e:	6863      	ldr	r3, [r4, #4]
   84970:	6043      	str	r3, [r0, #4]
   84972:	d827      	bhi.n	849c4 <_realloc_r+0x2bc>
   84974:	f100 0308 	add.w	r3, r0, #8
   84978:	f104 0208 	add.w	r2, r4, #8
   8497c:	e70b      	b.n	84796 <_realloc_r+0x8e>
   8497e:	4620      	mov	r0, r4
   84980:	462a      	mov	r2, r5
   84982:	6801      	ldr	r1, [r0, #0]
   84984:	461f      	mov	r7, r3
   84986:	6011      	str	r1, [r2, #0]
   84988:	6841      	ldr	r1, [r0, #4]
   8498a:	46d1      	mov	r9, sl
   8498c:	6051      	str	r1, [r2, #4]
   8498e:	6883      	ldr	r3, [r0, #8]
   84990:	6093      	str	r3, [r2, #8]
   84992:	e719      	b.n	847c8 <_realloc_r+0xc0>
   84994:	ebab 0b06 	sub.w	fp, fp, r6
   84998:	eb09 0106 	add.w	r1, r9, r6
   8499c:	f04b 0201 	orr.w	r2, fp, #1
   849a0:	6099      	str	r1, [r3, #8]
   849a2:	604a      	str	r2, [r1, #4]
   849a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   849a8:	4640      	mov	r0, r8
   849aa:	f003 0301 	and.w	r3, r3, #1
   849ae:	431e      	orrs	r6, r3
   849b0:	f844 6c04 	str.w	r6, [r4, #-4]
   849b4:	f7ff fea2 	bl	846fc <__malloc_unlock>
   849b8:	4625      	mov	r5, r4
   849ba:	e718      	b.n	847ee <_realloc_r+0xe6>
   849bc:	4621      	mov	r1, r4
   849be:	f7ff fe33 	bl	84628 <memmove>
   849c2:	e6ee      	b.n	847a2 <_realloc_r+0x9a>
   849c4:	68a3      	ldr	r3, [r4, #8]
   849c6:	2a24      	cmp	r2, #36	; 0x24
   849c8:	6083      	str	r3, [r0, #8]
   849ca:	68e3      	ldr	r3, [r4, #12]
   849cc:	60c3      	str	r3, [r0, #12]
   849ce:	d018      	beq.n	84a02 <_realloc_r+0x2fa>
   849d0:	f100 0310 	add.w	r3, r0, #16
   849d4:	f104 0210 	add.w	r2, r4, #16
   849d8:	e6dd      	b.n	84796 <_realloc_r+0x8e>
   849da:	f850 3c04 	ldr.w	r3, [r0, #-4]
   849de:	4625      	mov	r5, r4
   849e0:	f023 0303 	bic.w	r3, r3, #3
   849e4:	441f      	add	r7, r3
   849e6:	e6ef      	b.n	847c8 <_realloc_r+0xc0>
   849e8:	68a1      	ldr	r1, [r4, #8]
   849ea:	2a24      	cmp	r2, #36	; 0x24
   849ec:	f8ca 1010 	str.w	r1, [sl, #16]
   849f0:	68e1      	ldr	r1, [r4, #12]
   849f2:	f8ca 1014 	str.w	r1, [sl, #20]
   849f6:	d00d      	beq.n	84a14 <_realloc_r+0x30c>
   849f8:	f104 0010 	add.w	r0, r4, #16
   849fc:	f10a 0218 	add.w	r2, sl, #24
   84a00:	e7bf      	b.n	84982 <_realloc_r+0x27a>
   84a02:	6922      	ldr	r2, [r4, #16]
   84a04:	f100 0318 	add.w	r3, r0, #24
   84a08:	6102      	str	r2, [r0, #16]
   84a0a:	6961      	ldr	r1, [r4, #20]
   84a0c:	f104 0218 	add.w	r2, r4, #24
   84a10:	6141      	str	r1, [r0, #20]
   84a12:	e6c0      	b.n	84796 <_realloc_r+0x8e>
   84a14:	6922      	ldr	r2, [r4, #16]
   84a16:	f104 0018 	add.w	r0, r4, #24
   84a1a:	f8ca 2018 	str.w	r2, [sl, #24]
   84a1e:	6961      	ldr	r1, [r4, #20]
   84a20:	f10a 0220 	add.w	r2, sl, #32
   84a24:	f8ca 101c 	str.w	r1, [sl, #28]
   84a28:	e7ab      	b.n	84982 <_realloc_r+0x27a>
   84a2a:	4621      	mov	r1, r4
   84a2c:	462a      	mov	r2, r5
   84a2e:	e782      	b.n	84936 <_realloc_r+0x22e>
   84a30:	4621      	mov	r1, r4
   84a32:	4628      	mov	r0, r5
   84a34:	9301      	str	r3, [sp, #4]
   84a36:	f7ff fdf7 	bl	84628 <memmove>
   84a3a:	9b01      	ldr	r3, [sp, #4]
   84a3c:	e781      	b.n	84942 <_realloc_r+0x23a>
   84a3e:	68a1      	ldr	r1, [r4, #8]
   84a40:	2a24      	cmp	r2, #36	; 0x24
   84a42:	f8ca 1010 	str.w	r1, [sl, #16]
   84a46:	68e1      	ldr	r1, [r4, #12]
   84a48:	f8ca 1014 	str.w	r1, [sl, #20]
   84a4c:	d006      	beq.n	84a5c <_realloc_r+0x354>
   84a4e:	f104 0110 	add.w	r1, r4, #16
   84a52:	f10a 0218 	add.w	r2, sl, #24
   84a56:	e76e      	b.n	84936 <_realloc_r+0x22e>
   84a58:	200706f0 	.word	0x200706f0
   84a5c:	6922      	ldr	r2, [r4, #16]
   84a5e:	f104 0118 	add.w	r1, r4, #24
   84a62:	f8ca 2018 	str.w	r2, [sl, #24]
   84a66:	6960      	ldr	r0, [r4, #20]
   84a68:	f10a 0220 	add.w	r2, sl, #32
   84a6c:	f8ca 001c 	str.w	r0, [sl, #28]
   84a70:	e761      	b.n	84936 <_realloc_r+0x22e>
   84a72:	bf00      	nop

00084a74 <_sbrk_r>:
   84a74:	b538      	push	{r3, r4, r5, lr}
   84a76:	2300      	movs	r3, #0
   84a78:	4c06      	ldr	r4, [pc, #24]	; (84a94 <_sbrk_r+0x20>)
   84a7a:	4605      	mov	r5, r0
   84a7c:	4608      	mov	r0, r1
   84a7e:	6023      	str	r3, [r4, #0]
   84a80:	f7fc f9ca 	bl	80e18 <_sbrk>
   84a84:	1c43      	adds	r3, r0, #1
   84a86:	d000      	beq.n	84a8a <_sbrk_r+0x16>
   84a88:	bd38      	pop	{r3, r4, r5, pc}
   84a8a:	6823      	ldr	r3, [r4, #0]
   84a8c:	2b00      	cmp	r3, #0
   84a8e:	d0fb      	beq.n	84a88 <_sbrk_r+0x14>
   84a90:	602b      	str	r3, [r5, #0]
   84a92:	bd38      	pop	{r3, r4, r5, pc}
   84a94:	20070d30 	.word	0x20070d30

00084a98 <__sread>:
   84a98:	b510      	push	{r4, lr}
   84a9a:	460c      	mov	r4, r1
   84a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84aa0:	f000 f9f4 	bl	84e8c <_read_r>
   84aa4:	2800      	cmp	r0, #0
   84aa6:	db03      	blt.n	84ab0 <__sread+0x18>
   84aa8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84aaa:	4403      	add	r3, r0
   84aac:	6523      	str	r3, [r4, #80]	; 0x50
   84aae:	bd10      	pop	{r4, pc}
   84ab0:	89a3      	ldrh	r3, [r4, #12]
   84ab2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84ab6:	81a3      	strh	r3, [r4, #12]
   84ab8:	bd10      	pop	{r4, pc}
   84aba:	bf00      	nop

00084abc <__swrite>:
   84abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84ac0:	460c      	mov	r4, r1
   84ac2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84ac6:	461f      	mov	r7, r3
   84ac8:	05cb      	lsls	r3, r1, #23
   84aca:	4616      	mov	r6, r2
   84acc:	4605      	mov	r5, r0
   84ace:	d507      	bpl.n	84ae0 <__swrite+0x24>
   84ad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84ad4:	2302      	movs	r3, #2
   84ad6:	2200      	movs	r2, #0
   84ad8:	f000 f9c2 	bl	84e60 <_lseek_r>
   84adc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84ae0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84ae4:	81a1      	strh	r1, [r4, #12]
   84ae6:	463b      	mov	r3, r7
   84ae8:	4632      	mov	r2, r6
   84aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84aee:	4628      	mov	r0, r5
   84af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84af4:	f000 b8a2 	b.w	84c3c <_write_r>

00084af8 <__sseek>:
   84af8:	b510      	push	{r4, lr}
   84afa:	460c      	mov	r4, r1
   84afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84b00:	f000 f9ae 	bl	84e60 <_lseek_r>
   84b04:	89a3      	ldrh	r3, [r4, #12]
   84b06:	1c42      	adds	r2, r0, #1
   84b08:	bf0e      	itee	eq
   84b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84b12:	6520      	strne	r0, [r4, #80]	; 0x50
   84b14:	81a3      	strh	r3, [r4, #12]
   84b16:	bd10      	pop	{r4, pc}

00084b18 <__sclose>:
   84b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84b1c:	f000 b906 	b.w	84d2c <_close_r>

00084b20 <__swbuf_r>:
   84b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84b22:	460d      	mov	r5, r1
   84b24:	4614      	mov	r4, r2
   84b26:	4606      	mov	r6, r0
   84b28:	b110      	cbz	r0, 84b30 <__swbuf_r+0x10>
   84b2a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84b2c:	2b00      	cmp	r3, #0
   84b2e:	d04b      	beq.n	84bc8 <__swbuf_r+0xa8>
   84b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84b34:	69a3      	ldr	r3, [r4, #24]
   84b36:	b291      	uxth	r1, r2
   84b38:	0708      	lsls	r0, r1, #28
   84b3a:	60a3      	str	r3, [r4, #8]
   84b3c:	d539      	bpl.n	84bb2 <__swbuf_r+0x92>
   84b3e:	6923      	ldr	r3, [r4, #16]
   84b40:	2b00      	cmp	r3, #0
   84b42:	d036      	beq.n	84bb2 <__swbuf_r+0x92>
   84b44:	b2ed      	uxtb	r5, r5
   84b46:	0489      	lsls	r1, r1, #18
   84b48:	462f      	mov	r7, r5
   84b4a:	d515      	bpl.n	84b78 <__swbuf_r+0x58>
   84b4c:	6822      	ldr	r2, [r4, #0]
   84b4e:	6961      	ldr	r1, [r4, #20]
   84b50:	1ad3      	subs	r3, r2, r3
   84b52:	428b      	cmp	r3, r1
   84b54:	da1c      	bge.n	84b90 <__swbuf_r+0x70>
   84b56:	3301      	adds	r3, #1
   84b58:	68a1      	ldr	r1, [r4, #8]
   84b5a:	1c50      	adds	r0, r2, #1
   84b5c:	3901      	subs	r1, #1
   84b5e:	60a1      	str	r1, [r4, #8]
   84b60:	6020      	str	r0, [r4, #0]
   84b62:	7015      	strb	r5, [r2, #0]
   84b64:	6962      	ldr	r2, [r4, #20]
   84b66:	429a      	cmp	r2, r3
   84b68:	d01a      	beq.n	84ba0 <__swbuf_r+0x80>
   84b6a:	89a3      	ldrh	r3, [r4, #12]
   84b6c:	07db      	lsls	r3, r3, #31
   84b6e:	d501      	bpl.n	84b74 <__swbuf_r+0x54>
   84b70:	2d0a      	cmp	r5, #10
   84b72:	d015      	beq.n	84ba0 <__swbuf_r+0x80>
   84b74:	4638      	mov	r0, r7
   84b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84b78:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84b7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84b7e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84b82:	81a2      	strh	r2, [r4, #12]
   84b84:	6822      	ldr	r2, [r4, #0]
   84b86:	6661      	str	r1, [r4, #100]	; 0x64
   84b88:	6961      	ldr	r1, [r4, #20]
   84b8a:	1ad3      	subs	r3, r2, r3
   84b8c:	428b      	cmp	r3, r1
   84b8e:	dbe2      	blt.n	84b56 <__swbuf_r+0x36>
   84b90:	4621      	mov	r1, r4
   84b92:	4630      	mov	r0, r6
   84b94:	f7fe fdae 	bl	836f4 <_fflush_r>
   84b98:	b940      	cbnz	r0, 84bac <__swbuf_r+0x8c>
   84b9a:	2301      	movs	r3, #1
   84b9c:	6822      	ldr	r2, [r4, #0]
   84b9e:	e7db      	b.n	84b58 <__swbuf_r+0x38>
   84ba0:	4621      	mov	r1, r4
   84ba2:	4630      	mov	r0, r6
   84ba4:	f7fe fda6 	bl	836f4 <_fflush_r>
   84ba8:	2800      	cmp	r0, #0
   84baa:	d0e3      	beq.n	84b74 <__swbuf_r+0x54>
   84bac:	f04f 37ff 	mov.w	r7, #4294967295
   84bb0:	e7e0      	b.n	84b74 <__swbuf_r+0x54>
   84bb2:	4621      	mov	r1, r4
   84bb4:	4630      	mov	r0, r6
   84bb6:	f7fe fc8d 	bl	834d4 <__swsetup_r>
   84bba:	2800      	cmp	r0, #0
   84bbc:	d1f6      	bne.n	84bac <__swbuf_r+0x8c>
   84bbe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84bc2:	6923      	ldr	r3, [r4, #16]
   84bc4:	b291      	uxth	r1, r2
   84bc6:	e7bd      	b.n	84b44 <__swbuf_r+0x24>
   84bc8:	f7fe fdec 	bl	837a4 <__sinit>
   84bcc:	e7b0      	b.n	84b30 <__swbuf_r+0x10>
   84bce:	bf00      	nop

00084bd0 <_wcrtomb_r>:
   84bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   84bd2:	4606      	mov	r6, r0
   84bd4:	b085      	sub	sp, #20
   84bd6:	461f      	mov	r7, r3
   84bd8:	b189      	cbz	r1, 84bfe <_wcrtomb_r+0x2e>
   84bda:	4c10      	ldr	r4, [pc, #64]	; (84c1c <_wcrtomb_r+0x4c>)
   84bdc:	4d10      	ldr	r5, [pc, #64]	; (84c20 <_wcrtomb_r+0x50>)
   84bde:	6824      	ldr	r4, [r4, #0]
   84be0:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84be2:	2c00      	cmp	r4, #0
   84be4:	bf08      	it	eq
   84be6:	462c      	moveq	r4, r5
   84be8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84bec:	47a0      	blx	r4
   84bee:	1c43      	adds	r3, r0, #1
   84bf0:	d103      	bne.n	84bfa <_wcrtomb_r+0x2a>
   84bf2:	2200      	movs	r2, #0
   84bf4:	238a      	movs	r3, #138	; 0x8a
   84bf6:	603a      	str	r2, [r7, #0]
   84bf8:	6033      	str	r3, [r6, #0]
   84bfa:	b005      	add	sp, #20
   84bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84bfe:	460c      	mov	r4, r1
   84c00:	4a06      	ldr	r2, [pc, #24]	; (84c1c <_wcrtomb_r+0x4c>)
   84c02:	4d07      	ldr	r5, [pc, #28]	; (84c20 <_wcrtomb_r+0x50>)
   84c04:	6811      	ldr	r1, [r2, #0]
   84c06:	4622      	mov	r2, r4
   84c08:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   84c0a:	a901      	add	r1, sp, #4
   84c0c:	2c00      	cmp	r4, #0
   84c0e:	bf08      	it	eq
   84c10:	462c      	moveq	r4, r5
   84c12:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84c16:	47a0      	blx	r4
   84c18:	e7e9      	b.n	84bee <_wcrtomb_r+0x1e>
   84c1a:	bf00      	nop
   84c1c:	20070154 	.word	0x20070154
   84c20:	20070584 	.word	0x20070584

00084c24 <__ascii_wctomb>:
   84c24:	b119      	cbz	r1, 84c2e <__ascii_wctomb+0xa>
   84c26:	2aff      	cmp	r2, #255	; 0xff
   84c28:	d803      	bhi.n	84c32 <__ascii_wctomb+0xe>
   84c2a:	700a      	strb	r2, [r1, #0]
   84c2c:	2101      	movs	r1, #1
   84c2e:	4608      	mov	r0, r1
   84c30:	4770      	bx	lr
   84c32:	238a      	movs	r3, #138	; 0x8a
   84c34:	f04f 31ff 	mov.w	r1, #4294967295
   84c38:	6003      	str	r3, [r0, #0]
   84c3a:	e7f8      	b.n	84c2e <__ascii_wctomb+0xa>

00084c3c <_write_r>:
   84c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84c3e:	460e      	mov	r6, r1
   84c40:	2500      	movs	r5, #0
   84c42:	4c08      	ldr	r4, [pc, #32]	; (84c64 <_write_r+0x28>)
   84c44:	4611      	mov	r1, r2
   84c46:	4607      	mov	r7, r0
   84c48:	461a      	mov	r2, r3
   84c4a:	4630      	mov	r0, r6
   84c4c:	6025      	str	r5, [r4, #0]
   84c4e:	f7fb fd23 	bl	80698 <_write>
   84c52:	1c43      	adds	r3, r0, #1
   84c54:	d000      	beq.n	84c58 <_write_r+0x1c>
   84c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c58:	6823      	ldr	r3, [r4, #0]
   84c5a:	2b00      	cmp	r3, #0
   84c5c:	d0fb      	beq.n	84c56 <_write_r+0x1a>
   84c5e:	603b      	str	r3, [r7, #0]
   84c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84c62:	bf00      	nop
   84c64:	20070d30 	.word	0x20070d30

00084c68 <__register_exitproc>:
   84c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84c6c:	4d2c      	ldr	r5, [pc, #176]	; (84d20 <__register_exitproc+0xb8>)
   84c6e:	4606      	mov	r6, r0
   84c70:	6828      	ldr	r0, [r5, #0]
   84c72:	4698      	mov	r8, r3
   84c74:	460f      	mov	r7, r1
   84c76:	4691      	mov	r9, r2
   84c78:	f7ff f954 	bl	83f24 <__retarget_lock_acquire_recursive>
   84c7c:	4b29      	ldr	r3, [pc, #164]	; (84d24 <__register_exitproc+0xbc>)
   84c7e:	681c      	ldr	r4, [r3, #0]
   84c80:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   84c84:	2b00      	cmp	r3, #0
   84c86:	d03e      	beq.n	84d06 <__register_exitproc+0x9e>
   84c88:	685a      	ldr	r2, [r3, #4]
   84c8a:	2a1f      	cmp	r2, #31
   84c8c:	dc1c      	bgt.n	84cc8 <__register_exitproc+0x60>
   84c8e:	f102 0e01 	add.w	lr, r2, #1
   84c92:	b176      	cbz	r6, 84cb2 <__register_exitproc+0x4a>
   84c94:	2101      	movs	r1, #1
   84c96:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   84c9a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   84c9e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84ca2:	4091      	lsls	r1, r2
   84ca4:	4308      	orrs	r0, r1
   84ca6:	2e02      	cmp	r6, #2
   84ca8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84cac:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84cb0:	d023      	beq.n	84cfa <__register_exitproc+0x92>
   84cb2:	3202      	adds	r2, #2
   84cb4:	f8c3 e004 	str.w	lr, [r3, #4]
   84cb8:	6828      	ldr	r0, [r5, #0]
   84cba:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   84cbe:	f7ff f933 	bl	83f28 <__retarget_lock_release_recursive>
   84cc2:	2000      	movs	r0, #0
   84cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84cc8:	4b17      	ldr	r3, [pc, #92]	; (84d28 <__register_exitproc+0xc0>)
   84cca:	b30b      	cbz	r3, 84d10 <__register_exitproc+0xa8>
   84ccc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84cd0:	f7ff f9a4 	bl	8401c <malloc>
   84cd4:	4603      	mov	r3, r0
   84cd6:	b1d8      	cbz	r0, 84d10 <__register_exitproc+0xa8>
   84cd8:	2000      	movs	r0, #0
   84cda:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84cde:	f04f 0e01 	mov.w	lr, #1
   84ce2:	6058      	str	r0, [r3, #4]
   84ce4:	6019      	str	r1, [r3, #0]
   84ce6:	4602      	mov	r2, r0
   84ce8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84cec:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84cf0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84cf4:	2e00      	cmp	r6, #0
   84cf6:	d0dc      	beq.n	84cb2 <__register_exitproc+0x4a>
   84cf8:	e7cc      	b.n	84c94 <__register_exitproc+0x2c>
   84cfa:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84cfe:	4301      	orrs	r1, r0
   84d00:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84d04:	e7d5      	b.n	84cb2 <__register_exitproc+0x4a>
   84d06:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84d0a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84d0e:	e7bb      	b.n	84c88 <__register_exitproc+0x20>
   84d10:	6828      	ldr	r0, [r5, #0]
   84d12:	f7ff f909 	bl	83f28 <__retarget_lock_release_recursive>
   84d16:	f04f 30ff 	mov.w	r0, #4294967295
   84d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84d1e:	bf00      	nop
   84d20:	20070580 	.word	0x20070580
   84d24:	00084f34 	.word	0x00084f34
   84d28:	0008401d 	.word	0x0008401d

00084d2c <_close_r>:
   84d2c:	b538      	push	{r3, r4, r5, lr}
   84d2e:	2300      	movs	r3, #0
   84d30:	4c06      	ldr	r4, [pc, #24]	; (84d4c <_close_r+0x20>)
   84d32:	4605      	mov	r5, r0
   84d34:	4608      	mov	r0, r1
   84d36:	6023      	str	r3, [r4, #0]
   84d38:	f7fc f88a 	bl	80e50 <_close>
   84d3c:	1c43      	adds	r3, r0, #1
   84d3e:	d000      	beq.n	84d42 <_close_r+0x16>
   84d40:	bd38      	pop	{r3, r4, r5, pc}
   84d42:	6823      	ldr	r3, [r4, #0]
   84d44:	2b00      	cmp	r3, #0
   84d46:	d0fb      	beq.n	84d40 <_close_r+0x14>
   84d48:	602b      	str	r3, [r5, #0]
   84d4a:	bd38      	pop	{r3, r4, r5, pc}
   84d4c:	20070d30 	.word	0x20070d30

00084d50 <_fclose_r>:
   84d50:	b570      	push	{r4, r5, r6, lr}
   84d52:	b159      	cbz	r1, 84d6c <_fclose_r+0x1c>
   84d54:	4605      	mov	r5, r0
   84d56:	460c      	mov	r4, r1
   84d58:	b110      	cbz	r0, 84d60 <_fclose_r+0x10>
   84d5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84d5c:	2b00      	cmp	r3, #0
   84d5e:	d03c      	beq.n	84dda <_fclose_r+0x8a>
   84d60:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84d62:	07d8      	lsls	r0, r3, #31
   84d64:	d505      	bpl.n	84d72 <_fclose_r+0x22>
   84d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84d6a:	b92b      	cbnz	r3, 84d78 <_fclose_r+0x28>
   84d6c:	2600      	movs	r6, #0
   84d6e:	4630      	mov	r0, r6
   84d70:	bd70      	pop	{r4, r5, r6, pc}
   84d72:	89a3      	ldrh	r3, [r4, #12]
   84d74:	0599      	lsls	r1, r3, #22
   84d76:	d53c      	bpl.n	84df2 <_fclose_r+0xa2>
   84d78:	4621      	mov	r1, r4
   84d7a:	4628      	mov	r0, r5
   84d7c:	f7fe fc1e 	bl	835bc <__sflush_r>
   84d80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84d82:	4606      	mov	r6, r0
   84d84:	b133      	cbz	r3, 84d94 <_fclose_r+0x44>
   84d86:	69e1      	ldr	r1, [r4, #28]
   84d88:	4628      	mov	r0, r5
   84d8a:	4798      	blx	r3
   84d8c:	2800      	cmp	r0, #0
   84d8e:	bfb8      	it	lt
   84d90:	f04f 36ff 	movlt.w	r6, #4294967295
   84d94:	89a3      	ldrh	r3, [r4, #12]
   84d96:	061a      	lsls	r2, r3, #24
   84d98:	d422      	bmi.n	84de0 <_fclose_r+0x90>
   84d9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84d9c:	b141      	cbz	r1, 84db0 <_fclose_r+0x60>
   84d9e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84da2:	4299      	cmp	r1, r3
   84da4:	d002      	beq.n	84dac <_fclose_r+0x5c>
   84da6:	4628      	mov	r0, r5
   84da8:	f7fe fe22 	bl	839f0 <_free_r>
   84dac:	2300      	movs	r3, #0
   84dae:	6323      	str	r3, [r4, #48]	; 0x30
   84db0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84db2:	b121      	cbz	r1, 84dbe <_fclose_r+0x6e>
   84db4:	4628      	mov	r0, r5
   84db6:	f7fe fe1b 	bl	839f0 <_free_r>
   84dba:	2300      	movs	r3, #0
   84dbc:	6463      	str	r3, [r4, #68]	; 0x44
   84dbe:	f7fe fd21 	bl	83804 <__sfp_lock_acquire>
   84dc2:	2200      	movs	r2, #0
   84dc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84dc6:	81a2      	strh	r2, [r4, #12]
   84dc8:	07db      	lsls	r3, r3, #31
   84dca:	d50e      	bpl.n	84dea <_fclose_r+0x9a>
   84dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84dce:	f7ff f8a7 	bl	83f20 <__retarget_lock_close_recursive>
   84dd2:	f7fe fd1d 	bl	83810 <__sfp_lock_release>
   84dd6:	4630      	mov	r0, r6
   84dd8:	bd70      	pop	{r4, r5, r6, pc}
   84dda:	f7fe fce3 	bl	837a4 <__sinit>
   84dde:	e7bf      	b.n	84d60 <_fclose_r+0x10>
   84de0:	6921      	ldr	r1, [r4, #16]
   84de2:	4628      	mov	r0, r5
   84de4:	f7fe fe04 	bl	839f0 <_free_r>
   84de8:	e7d7      	b.n	84d9a <_fclose_r+0x4a>
   84dea:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84dec:	f7ff f89c 	bl	83f28 <__retarget_lock_release_recursive>
   84df0:	e7ec      	b.n	84dcc <_fclose_r+0x7c>
   84df2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84df4:	f7ff f896 	bl	83f24 <__retarget_lock_acquire_recursive>
   84df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84dfc:	2b00      	cmp	r3, #0
   84dfe:	d1bb      	bne.n	84d78 <_fclose_r+0x28>
   84e00:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84e02:	f016 0601 	ands.w	r6, r6, #1
   84e06:	d1b1      	bne.n	84d6c <_fclose_r+0x1c>
   84e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84e0a:	f7ff f88d 	bl	83f28 <__retarget_lock_release_recursive>
   84e0e:	4630      	mov	r0, r6
   84e10:	bd70      	pop	{r4, r5, r6, pc}
   84e12:	bf00      	nop

00084e14 <_fstat_r>:
   84e14:	b570      	push	{r4, r5, r6, lr}
   84e16:	460d      	mov	r5, r1
   84e18:	2300      	movs	r3, #0
   84e1a:	4c07      	ldr	r4, [pc, #28]	; (84e38 <_fstat_r+0x24>)
   84e1c:	4606      	mov	r6, r0
   84e1e:	4611      	mov	r1, r2
   84e20:	4628      	mov	r0, r5
   84e22:	6023      	str	r3, [r4, #0]
   84e24:	f7fc f817 	bl	80e56 <_fstat>
   84e28:	1c43      	adds	r3, r0, #1
   84e2a:	d000      	beq.n	84e2e <_fstat_r+0x1a>
   84e2c:	bd70      	pop	{r4, r5, r6, pc}
   84e2e:	6823      	ldr	r3, [r4, #0]
   84e30:	2b00      	cmp	r3, #0
   84e32:	d0fb      	beq.n	84e2c <_fstat_r+0x18>
   84e34:	6033      	str	r3, [r6, #0]
   84e36:	bd70      	pop	{r4, r5, r6, pc}
   84e38:	20070d30 	.word	0x20070d30

00084e3c <_isatty_r>:
   84e3c:	b538      	push	{r3, r4, r5, lr}
   84e3e:	2300      	movs	r3, #0
   84e40:	4c06      	ldr	r4, [pc, #24]	; (84e5c <_isatty_r+0x20>)
   84e42:	4605      	mov	r5, r0
   84e44:	4608      	mov	r0, r1
   84e46:	6023      	str	r3, [r4, #0]
   84e48:	f7fc f80a 	bl	80e60 <_isatty>
   84e4c:	1c43      	adds	r3, r0, #1
   84e4e:	d000      	beq.n	84e52 <_isatty_r+0x16>
   84e50:	bd38      	pop	{r3, r4, r5, pc}
   84e52:	6823      	ldr	r3, [r4, #0]
   84e54:	2b00      	cmp	r3, #0
   84e56:	d0fb      	beq.n	84e50 <_isatty_r+0x14>
   84e58:	602b      	str	r3, [r5, #0]
   84e5a:	bd38      	pop	{r3, r4, r5, pc}
   84e5c:	20070d30 	.word	0x20070d30

00084e60 <_lseek_r>:
   84e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e62:	460e      	mov	r6, r1
   84e64:	2500      	movs	r5, #0
   84e66:	4c08      	ldr	r4, [pc, #32]	; (84e88 <_lseek_r+0x28>)
   84e68:	4611      	mov	r1, r2
   84e6a:	4607      	mov	r7, r0
   84e6c:	461a      	mov	r2, r3
   84e6e:	4630      	mov	r0, r6
   84e70:	6025      	str	r5, [r4, #0]
   84e72:	f7fb fff7 	bl	80e64 <_lseek>
   84e76:	1c43      	adds	r3, r0, #1
   84e78:	d000      	beq.n	84e7c <_lseek_r+0x1c>
   84e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e7c:	6823      	ldr	r3, [r4, #0]
   84e7e:	2b00      	cmp	r3, #0
   84e80:	d0fb      	beq.n	84e7a <_lseek_r+0x1a>
   84e82:	603b      	str	r3, [r7, #0]
   84e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e86:	bf00      	nop
   84e88:	20070d30 	.word	0x20070d30

00084e8c <_read_r>:
   84e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e8e:	460e      	mov	r6, r1
   84e90:	2500      	movs	r5, #0
   84e92:	4c08      	ldr	r4, [pc, #32]	; (84eb4 <_read_r+0x28>)
   84e94:	4611      	mov	r1, r2
   84e96:	4607      	mov	r7, r0
   84e98:	461a      	mov	r2, r3
   84e9a:	4630      	mov	r0, r6
   84e9c:	6025      	str	r5, [r4, #0]
   84e9e:	f7fb fbdd 	bl	8065c <_read>
   84ea2:	1c43      	adds	r3, r0, #1
   84ea4:	d000      	beq.n	84ea8 <_read_r+0x1c>
   84ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84ea8:	6823      	ldr	r3, [r4, #0]
   84eaa:	2b00      	cmp	r3, #0
   84eac:	d0fb      	beq.n	84ea6 <_read_r+0x1a>
   84eae:	603b      	str	r3, [r7, #0]
   84eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84eb2:	bf00      	nop
   84eb4:	20070d30 	.word	0x20070d30
   84eb8:	6f636e65 	.word	0x6f636e65
   84ebc:	20726564 	.word	0x20726564
   84ec0:	64252041 	.word	0x64252041
   84ec4:	68636f20 	.word	0x68636f20
   84ec8:	636e6520 	.word	0x636e6520
   84ecc:	7265646f 	.word	0x7265646f
   84ed0:	25204220 	.word	0x25204220
   84ed4:	00000a64 	.word	0x00000a64
   84ed8:	6f746f4d 	.word	0x6f746f4d
   84edc:	20412072 	.word	0x20412072
   84ee0:	6f206425 	.word	0x6f206425
   84ee4:	6d206863 	.word	0x6d206863
   84ee8:	726f746f 	.word	0x726f746f
   84eec:	25204220 	.word	0x25204220
   84ef0:	00000a64 	.word	0x00000a64
   84ef4:	203d2065 	.word	0x203d2065
   84ef8:	000a6425 	.word	0x000a6425
   84efc:	6d617246 	.word	0x6d617246
   84f00:	3d3d3d3d 	.word	0x3d3d3d3d
   84f04:	3d3d3d3d 	.word	0x3d3d3d3d
   84f08:	3d3d3d3d 	.word	0x3d3d3d3d
   84f0c:	00000a3d 	.word	0x00000a3d
   84f10:	736e6f43 	.word	0x736e6f43
   84f14:	20656c6f 	.word	0x20656c6f
   84f18:	64616572 	.word	0x64616572
   84f1c:	00000a79 	.word	0x00000a79
   84f20:	74737641 	.word	0x74737641
   84f24:	3d206461 	.word	0x3d206461
   84f28:	00642520 	.word	0x00642520
   84f2c:	74727173 	.word	0x74727173
   84f30:	00000000 	.word	0x00000000

00084f34 <_global_impure_ptr>:
   84f34:	20070158 33323130 37363534 42413938     X.. 0123456789AB
   84f44:	46454443 00000000 33323130 37363534     CDEF....01234567
   84f54:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84f64:	0000296c                                l)..

00084f68 <blanks.7217>:
   84f68:	20202020 20202020 20202020 20202020                     

00084f78 <zeroes.7218>:
   84f78:	30303030 30303030 30303030 30303030     0000000000000000
   84f88:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00084f98 <_ctype_>:
   84f98:	20202000 20202020 28282020 20282828     .         ((((( 
   84fa8:	20202020 20202020 20202020 20202020                     
   84fb8:	10108820 10101010 10101010 10101010      ...............
   84fc8:	04040410 04040404 10040404 10101010     ................
   84fd8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   84fe8:	01010101 01010101 01010101 10101010     ................
   84ff8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   85008:	02020202 02020202 02020202 10101010     ................
   85018:	00000020 00000000 00000000 00000000      ...............
	...

0008509c <_init>:
   8509c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8509e:	bf00      	nop
   850a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   850a2:	bc08      	pop	{r3}
   850a4:	469e      	mov	lr, r3
   850a6:	4770      	bx	lr

000850a8 <__init_array_start>:
   850a8:	0008359d 	.word	0x0008359d

000850ac <__frame_dummy_init_array_entry>:
   850ac:	00080119                                ....

000850b0 <_fini>:
   850b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   850b2:	bf00      	nop
   850b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   850b6:	bc08      	pop	{r3}
   850b8:	469e      	mov	lr, r3
   850ba:	4770      	bx	lr

000850bc <__fini_array_start>:
   850bc:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	20070148 	.word	0x20070148

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <hoger>:
20070138:	000006d6                                ....

2007013c <k>:
2007013c:	00000004                                ....

20070140 <venster>:
20070140:	000004e2                                ....

20070144 <g_interrupt_enabled>:
20070144:	00000001                                ....

20070148 <SystemCoreClock>:
20070148:	003d0900                                ..=.

2007014c <xNextTaskUnblockTime>:
2007014c:	ffffffff                                ....

20070150 <__fdlib_version>:
20070150:	00000001                                ....

20070154 <_impure_ptr>:
20070154:	20070158                                X.. 

20070158 <impure_data>:
20070158:	00000000 20070444 200704ac 20070514     ....D.. ... ... 
	...
20070200:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070210:	0005deec 0000000b 00000000 00000000     ................
	...

20070580 <__atexit_recursive_mutex>:
20070580:	20070d0c                                ... 

20070584 <__global_locale>:
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00000043 00000000 00000000 00000000     C...............
	...
20070664:	00084c25 00084571 00000000 00084f98     %L..qE.......O..
20070674:	00084f94 00084f48 00084f48 00084f48     .O..HO..HO..HO..
20070684:	00084f48 00084f48 00084f48 00084f48     HO..HO..HO..HO..
20070694:	00084f48 00084f48 ffffffff ffffffff     HO..HO..........
200706a4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706cc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706f0 <__malloc_av_>:
	...
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 
20070ae8:	20070ae0 20070ae0 20070ae8 20070ae8     ... ... ... ... 

20070af8 <__malloc_sbrk_base>:
20070af8:	ffffffff                                ....

20070afc <__malloc_trim_threshold>:
20070afc:	00020000                                ....
