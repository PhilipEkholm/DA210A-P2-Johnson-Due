
johnson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056e8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000856e8  000856e8  000156e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b30  20070000  000856f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a2e4  20070b30  00086220  00020b30  2**3
                  ALLOC
  4 .stack        00002004  2007ae14  00090504  00020b30  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b30  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b59  2**0
                  CONTENTS, READONLY
  7 .debug_info   000233df  00000000  00000000  00020bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000559a  00000000  00000000  00043f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000081ae  00000000  00000000  0004952b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ec0  00000000  00000000  000516d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ef8  00000000  00000000  00052599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001de58  00000000  00000000  00053491  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00018bc5  00000000  00000000  000712e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006a02d  00000000  00000000  00089eae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e70  00000000  00000000  000f3edc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	18 ce 07 20 c1 22 08 00 bd 22 08 00 bd 22 08 00     ... ."..."..."..
   80010:	bd 22 08 00 bd 22 08 00 bd 22 08 00 00 00 00 00     ."..."..."......
	...
   8002c:	d1 02 08 00 bd 22 08 00 00 00 00 00 51 03 08 00     ....."......Q...
   8003c:	8d 03 08 00 bd 22 08 00 bd 22 08 00 bd 22 08 00     ....."..."..."..
   8004c:	bd 22 08 00 bd 22 08 00 bd 22 08 00 bd 22 08 00     ."..."..."..."..
   8005c:	bd 22 08 00 bd 22 08 00 bd 22 08 00 00 00 00 00     ."..."..."......
   8006c:	31 21 08 00 45 21 08 00 59 21 08 00 6d 21 08 00     1!..E!..Y!..m!..
	...
   80084:	69 19 08 00 bd 22 08 00 bd 22 08 00 bd 22 08 00     i...."..."..."..
   80094:	bd 22 08 00 bd 22 08 00 bd 22 08 00 bd 22 08 00     ."..."..."..."..
   800a4:	00 00 00 00 bd 22 08 00 bd 22 08 00 bd 22 08 00     ....."..."..."..
   800b4:	bd 22 08 00 bd 22 08 00 bd 22 08 00 bd 22 08 00     ."..."..."..."..
   800c4:	bd 22 08 00 bd 22 08 00 bd 22 08 00 bd 22 08 00     ."..."..."..."..
   800d4:	bd 22 08 00 bd 22 08 00 bd 22 08 00 bd 22 08 00     ."..."..."..."..
   800e4:	bd 22 08 00 bd 22 08 00 bd 22 08 00 bd 22 08 00     ."..."..."..."..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b30 	.word	0x20070b30
   80110:	00000000 	.word	0x00000000
   80114:	000856f0 	.word	0x000856f0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000856f0 	.word	0x000856f0
   80154:	20070b34 	.word	0x20070b34
   80158:	000856f0 	.word	0x000856f0
   8015c:	00000000 	.word	0x00000000

00080160 <arm_task>:
#include <asf.h>

#include "arm_task.h"
#include "pin_mapper.h"

void arm_task(void *pvParameters) {
   80160:	b508      	push	{r3, lr}
	while(1){
		ioport_set_pin_level(pin_mapper(TASK_DEBUG_ARM_PIN), 1);
   80162:	2633      	movs	r6, #51	; 0x33
   80164:	4d0e      	ldr	r5, [pc, #56]	; (801a0 <arm_task+0x40>)
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80166:	2401      	movs	r4, #1
   80168:	4630      	mov	r0, r6
   8016a:	47a8      	blx	r5
	return pin >> 5;
   8016c:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8016e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80172:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80176:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80178:	f000 001f 	and.w	r0, r0, #31
   8017c:	fa04 f000 	lsl.w	r0, r4, r0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80180:	6318      	str	r0, [r3, #48]	; 0x30
		ioport_set_pin_level(pin_mapper(TASK_DEBUG_ARM_PIN), 0);
   80182:	4630      	mov	r0, r6
   80184:	47a8      	blx	r5
	return pin >> 5;
   80186:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80188:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8018c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80190:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   80192:	f000 001f 	and.w	r0, r0, #31
   80196:	fa04 f000 	lsl.w	r0, r4, r0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   8019a:	6358      	str	r0, [r3, #52]	; 0x34
   8019c:	e7e4      	b.n	80168 <arm_task+0x8>
   8019e:	bf00      	nop
   801a0:	00081931 	.word	0x00081931

000801a4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   801a8:	b980      	cbnz	r0, 801cc <_read+0x28>
   801aa:	460c      	mov	r4, r1
   801ac:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   801ae:	2a00      	cmp	r2, #0
   801b0:	dd0f      	ble.n	801d2 <_read+0x2e>
   801b2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801b4:	4e08      	ldr	r6, [pc, #32]	; (801d8 <_read+0x34>)
   801b6:	4d09      	ldr	r5, [pc, #36]	; (801dc <_read+0x38>)
   801b8:	6830      	ldr	r0, [r6, #0]
   801ba:	4621      	mov	r1, r4
   801bc:	682b      	ldr	r3, [r5, #0]
   801be:	4798      	blx	r3
		ptr++;
   801c0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   801c2:	42bc      	cmp	r4, r7
   801c4:	d1f8      	bne.n	801b8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   801c6:	4640      	mov	r0, r8
   801c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   801cc:	f04f 38ff 	mov.w	r8, #4294967295
   801d0:	e7f9      	b.n	801c6 <_read+0x22>
	for (; len > 0; --len) {
   801d2:	4680      	mov	r8, r0
   801d4:	e7f7      	b.n	801c6 <_read+0x22>
   801d6:	bf00      	nop
   801d8:	2007ade8 	.word	0x2007ade8
   801dc:	2007ade0 	.word	0x2007ade0

000801e0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   801e0:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   801e2:	0189      	lsls	r1, r1, #6
   801e4:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   801e6:	2402      	movs	r4, #2
   801e8:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   801ea:	f04f 31ff 	mov.w	r1, #4294967295
   801ee:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   801f0:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   801f2:	605a      	str	r2, [r3, #4]
}
   801f4:	bc10      	pop	{r4}
   801f6:	4770      	bx	lr

000801f8 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   801f8:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   801fc:	4770      	bx	lr

000801fe <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   801fe:	0189      	lsls	r1, r1, #6
   80200:	2302      	movs	r3, #2
   80202:	5043      	str	r3, [r0, r1]
   80204:	4770      	bx	lr

00080206 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80206:	f100 0308 	add.w	r3, r0, #8
   8020a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   8020c:	f04f 32ff 	mov.w	r2, #4294967295
   80210:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80212:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80214:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80216:	2300      	movs	r3, #0
   80218:	6003      	str	r3, [r0, #0]
   8021a:	4770      	bx	lr

0008021c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   8021c:	2300      	movs	r3, #0
   8021e:	6103      	str	r3, [r0, #16]
   80220:	4770      	bx	lr

00080222 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80222:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80224:	685a      	ldr	r2, [r3, #4]
   80226:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80228:	6842      	ldr	r2, [r0, #4]
   8022a:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8022c:	685a      	ldr	r2, [r3, #4]
   8022e:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80230:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80232:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80234:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80236:	6803      	ldr	r3, [r0, #0]
   80238:	3301      	adds	r3, #1
   8023a:	6003      	str	r3, [r0, #0]
   8023c:	4770      	bx	lr

0008023e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8023e:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80240:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80242:	f1b4 3fff 	cmp.w	r4, #4294967295
   80246:	d015      	beq.n	80274 <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80248:	f100 0308 	add.w	r3, r0, #8
   8024c:	68c2      	ldr	r2, [r0, #12]
   8024e:	6812      	ldr	r2, [r2, #0]
   80250:	4294      	cmp	r4, r2
   80252:	d304      	bcc.n	8025e <vListInsert+0x20>
   80254:	685b      	ldr	r3, [r3, #4]
   80256:	685a      	ldr	r2, [r3, #4]
   80258:	6812      	ldr	r2, [r2, #0]
   8025a:	4294      	cmp	r4, r2
   8025c:	d2fa      	bcs.n	80254 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8025e:	685a      	ldr	r2, [r3, #4]
   80260:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80262:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80264:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80266:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80268:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8026a:	6803      	ldr	r3, [r0, #0]
   8026c:	3301      	adds	r3, #1
   8026e:	6003      	str	r3, [r0, #0]
}
   80270:	bc10      	pop	{r4}
   80272:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   80274:	6903      	ldr	r3, [r0, #16]
   80276:	e7f2      	b.n	8025e <vListInsert+0x20>

00080278 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80278:	6843      	ldr	r3, [r0, #4]
   8027a:	6882      	ldr	r2, [r0, #8]
   8027c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8027e:	6883      	ldr	r3, [r0, #8]
   80280:	6842      	ldr	r2, [r0, #4]
   80282:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80284:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80286:	685a      	ldr	r2, [r3, #4]
   80288:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8028a:	bf04      	itt	eq
   8028c:	6882      	ldreq	r2, [r0, #8]
   8028e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80290:	2200      	movs	r2, #0
   80292:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80294:	681a      	ldr	r2, [r3, #0]
   80296:	3a01      	subs	r2, #1
   80298:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8029a:	6818      	ldr	r0, [r3, #0]
}
   8029c:	4770      	bx	lr
	...

000802a0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   802a0:	4803      	ldr	r0, [pc, #12]	; (802b0 <prvPortStartFirstTask+0x10>)
   802a2:	6800      	ldr	r0, [r0, #0]
   802a4:	6800      	ldr	r0, [r0, #0]
   802a6:	f380 8808 	msr	MSP, r0
   802aa:	b662      	cpsie	i
   802ac:	df00      	svc	0
   802ae:	bf00      	nop
   802b0:	e000ed08 	.word	0xe000ed08

000802b4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   802b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   802b8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   802bc:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;	/* LR */
   802c0:	2300      	movs	r3, #0
   802c2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   802c6:	f840 2c20 	str.w	r2, [r0, #-32]
}
   802ca:	3840      	subs	r0, #64	; 0x40
   802cc:	4770      	bx	lr
	...

000802d0 <SVC_Handler>:
	__asm volatile (
   802d0:	4b06      	ldr	r3, [pc, #24]	; (802ec <pxCurrentTCBConst2>)
   802d2:	6819      	ldr	r1, [r3, #0]
   802d4:	6808      	ldr	r0, [r1, #0]
   802d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   802da:	f380 8809 	msr	PSP, r0
   802de:	f04f 0000 	mov.w	r0, #0
   802e2:	f380 8811 	msr	BASEPRI, r0
   802e6:	f04e 0e0d 	orr.w	lr, lr, #13
   802ea:	4770      	bx	lr

000802ec <pxCurrentTCBConst2>:
   802ec:	2007ab58 	.word	0x2007ab58

000802f0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   802f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   802f4:	4b01      	ldr	r3, [pc, #4]	; (802fc <vPortYieldFromISR+0xc>)
   802f6:	601a      	str	r2, [r3, #0]
   802f8:	4770      	bx	lr
   802fa:	bf00      	nop
   802fc:	e000ed04 	.word	0xe000ed04

00080300 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80300:	f3ef 8011 	mrs	r0, BASEPRI
   80304:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80308:	f381 8811 	msr	BASEPRI, r1
   8030c:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   8030e:	2000      	movs	r0, #0

00080310 <vPortEnterCritical>:
{
   80310:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80312:	4b03      	ldr	r3, [pc, #12]	; (80320 <vPortEnterCritical+0x10>)
   80314:	4798      	blx	r3
	uxCriticalNesting++;
   80316:	4a03      	ldr	r2, [pc, #12]	; (80324 <vPortEnterCritical+0x14>)
   80318:	6813      	ldr	r3, [r2, #0]
   8031a:	3301      	adds	r3, #1
   8031c:	6013      	str	r3, [r2, #0]
   8031e:	bd08      	pop	{r3, pc}
   80320:	00080301 	.word	0x00080301
   80324:	2007012c 	.word	0x2007012c

00080328 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80328:	f380 8811 	msr	BASEPRI, r0
   8032c:	4770      	bx	lr
	...

00080330 <vPortExitCritical>:
{
   80330:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80332:	4a05      	ldr	r2, [pc, #20]	; (80348 <vPortExitCritical+0x18>)
   80334:	6813      	ldr	r3, [r2, #0]
   80336:	3b01      	subs	r3, #1
   80338:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8033a:	b103      	cbz	r3, 8033e <vPortExitCritical+0xe>
   8033c:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
   8033e:	2000      	movs	r0, #0
   80340:	4b02      	ldr	r3, [pc, #8]	; (8034c <vPortExitCritical+0x1c>)
   80342:	4798      	blx	r3
}
   80344:	e7fa      	b.n	8033c <vPortExitCritical+0xc>
   80346:	bf00      	nop
   80348:	2007012c 	.word	0x2007012c
   8034c:	00080329 	.word	0x00080329

00080350 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80350:	f3ef 8009 	mrs	r0, PSP
   80354:	4b0c      	ldr	r3, [pc, #48]	; (80388 <pxCurrentTCBConst>)
   80356:	681a      	ldr	r2, [r3, #0]
   80358:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8035c:	6010      	str	r0, [r2, #0]
   8035e:	e92d 4008 	stmdb	sp!, {r3, lr}
   80362:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80366:	f380 8811 	msr	BASEPRI, r0
   8036a:	f000 fec7 	bl	810fc <vTaskSwitchContext>
   8036e:	f04f 0000 	mov.w	r0, #0
   80372:	f380 8811 	msr	BASEPRI, r0
   80376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8037a:	6819      	ldr	r1, [r3, #0]
   8037c:	6808      	ldr	r0, [r1, #0]
   8037e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80382:	f380 8809 	msr	PSP, r0
   80386:	4770      	bx	lr

00080388 <pxCurrentTCBConst>:
   80388:	2007ab58 	.word	0x2007ab58

0008038c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   8038c:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8038e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80392:	4b05      	ldr	r3, [pc, #20]	; (803a8 <SysTick_Handler+0x1c>)
   80394:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80396:	4b05      	ldr	r3, [pc, #20]	; (803ac <SysTick_Handler+0x20>)
   80398:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <SysTick_Handler+0x24>)
   8039c:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8039e:	2000      	movs	r0, #0
   803a0:	4b04      	ldr	r3, [pc, #16]	; (803b4 <SysTick_Handler+0x28>)
   803a2:	4798      	blx	r3
   803a4:	bd08      	pop	{r3, pc}
   803a6:	bf00      	nop
   803a8:	e000ed04 	.word	0xe000ed04
   803ac:	00080301 	.word	0x00080301
   803b0:	00080dc1 	.word	0x00080dc1
   803b4:	00080329 	.word	0x00080329

000803b8 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   803b8:	4a03      	ldr	r2, [pc, #12]	; (803c8 <vPortSetupTimerInterrupt+0x10>)
   803ba:	4b04      	ldr	r3, [pc, #16]	; (803cc <vPortSetupTimerInterrupt+0x14>)
   803bc:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   803be:	2207      	movs	r2, #7
   803c0:	3b04      	subs	r3, #4
   803c2:	601a      	str	r2, [r3, #0]
   803c4:	4770      	bx	lr
   803c6:	bf00      	nop
   803c8:	0001481f 	.word	0x0001481f
   803cc:	e000e014 	.word	0xe000e014

000803d0 <xPortStartScheduler>:
{
   803d0:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   803d2:	4b09      	ldr	r3, [pc, #36]	; (803f8 <xPortStartScheduler+0x28>)
   803d4:	681a      	ldr	r2, [r3, #0]
   803d6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   803da:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   803dc:	681a      	ldr	r2, [r3, #0]
   803de:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   803e2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   803e4:	4b05      	ldr	r3, [pc, #20]	; (803fc <xPortStartScheduler+0x2c>)
   803e6:	4798      	blx	r3
	uxCriticalNesting = 0;
   803e8:	2400      	movs	r4, #0
   803ea:	4b05      	ldr	r3, [pc, #20]	; (80400 <xPortStartScheduler+0x30>)
   803ec:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   803ee:	4b05      	ldr	r3, [pc, #20]	; (80404 <xPortStartScheduler+0x34>)
   803f0:	4798      	blx	r3
}
   803f2:	4620      	mov	r0, r4
   803f4:	bd10      	pop	{r4, pc}
   803f6:	bf00      	nop
   803f8:	e000ed20 	.word	0xe000ed20
   803fc:	000803b9 	.word	0x000803b9
   80400:	2007012c 	.word	0x2007012c
   80404:	000802a1 	.word	0x000802a1

00080408 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80408:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8040a:	4a13      	ldr	r2, [pc, #76]	; (80458 <prvInsertBlockIntoFreeList+0x50>)
   8040c:	e000      	b.n	80410 <prvInsertBlockIntoFreeList+0x8>
   8040e:	461a      	mov	r2, r3
   80410:	6813      	ldr	r3, [r2, #0]
   80412:	4283      	cmp	r3, r0
   80414:	d3fb      	bcc.n	8040e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80416:	6851      	ldr	r1, [r2, #4]
   80418:	1854      	adds	r4, r2, r1
   8041a:	42a0      	cmp	r0, r4
   8041c:	d009      	beq.n	80432 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   8041e:	6841      	ldr	r1, [r0, #4]
   80420:	1844      	adds	r4, r0, r1
   80422:	42a3      	cmp	r3, r4
   80424:	d00a      	beq.n	8043c <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80426:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80428:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8042a:	bf18      	it	ne
   8042c:	6010      	strne	r0, [r2, #0]
	}
}
   8042e:	bc10      	pop	{r4}
   80430:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80432:	6840      	ldr	r0, [r0, #4]
   80434:	4401      	add	r1, r0
   80436:	6051      	str	r1, [r2, #4]
   80438:	4610      	mov	r0, r2
   8043a:	e7f0      	b.n	8041e <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8043c:	4c07      	ldr	r4, [pc, #28]	; (8045c <prvInsertBlockIntoFreeList+0x54>)
   8043e:	6824      	ldr	r4, [r4, #0]
   80440:	42a3      	cmp	r3, r4
   80442:	d006      	beq.n	80452 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80444:	685b      	ldr	r3, [r3, #4]
   80446:	4419      	add	r1, r3
   80448:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8044a:	6813      	ldr	r3, [r2, #0]
   8044c:	681b      	ldr	r3, [r3, #0]
   8044e:	6003      	str	r3, [r0, #0]
   80450:	e7ea      	b.n	80428 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80452:	6003      	str	r3, [r0, #0]
   80454:	e7e8      	b.n	80428 <prvInsertBlockIntoFreeList+0x20>
   80456:	bf00      	nop
   80458:	2007ab50 	.word	0x2007ab50
   8045c:	20070b4c 	.word	0x20070b4c

00080460 <pvPortMalloc>:
{
   80460:	b538      	push	{r3, r4, r5, lr}
   80462:	4604      	mov	r4, r0
	vTaskSuspendAll();
   80464:	4b2a      	ldr	r3, [pc, #168]	; (80510 <pvPortMalloc+0xb0>)
   80466:	4798      	blx	r3
		if( pxEnd == NULL )
   80468:	4b2a      	ldr	r3, [pc, #168]	; (80514 <pvPortMalloc+0xb4>)
   8046a:	681b      	ldr	r3, [r3, #0]
   8046c:	b18b      	cbz	r3, 80492 <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
   8046e:	2c00      	cmp	r4, #0
   80470:	d047      	beq.n	80502 <pvPortMalloc+0xa2>
			xWantedSize += heapSTRUCT_SIZE;
   80472:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80476:	f012 0f07 	tst.w	r2, #7
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8047a:	bf1c      	itt	ne
   8047c:	f022 0207 	bicne.w	r2, r2, #7
   80480:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80482:	1e51      	subs	r1, r2, #1
   80484:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80488:	4299      	cmp	r1, r3
   8048a:	d83c      	bhi.n	80506 <pvPortMalloc+0xa6>
			pxBlock = xStart.pxNextFreeBlock;
   8048c:	4922      	ldr	r1, [pc, #136]	; (80518 <pvPortMalloc+0xb8>)
   8048e:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80490:	e016      	b.n	804c0 <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80492:	4a21      	ldr	r2, [pc, #132]	; (80518 <pvPortMalloc+0xb8>)
   80494:	4b21      	ldr	r3, [pc, #132]	; (8051c <pvPortMalloc+0xbc>)
   80496:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80498:	2100      	movs	r1, #0
   8049a:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
   8049c:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   804a0:	1898      	adds	r0, r3, r2
   804a2:	4d1c      	ldr	r5, [pc, #112]	; (80514 <pvPortMalloc+0xb4>)
   804a4:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
   804a6:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   804aa:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   804ac:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   804ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   804b0:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   804b2:	4a1b      	ldr	r2, [pc, #108]	; (80520 <pvPortMalloc+0xc0>)
   804b4:	6813      	ldr	r3, [r2, #0]
   804b6:	3b10      	subs	r3, #16
   804b8:	6013      	str	r3, [r2, #0]
   804ba:	e7d8      	b.n	8046e <pvPortMalloc+0xe>
   804bc:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
   804be:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   804c0:	6863      	ldr	r3, [r4, #4]
   804c2:	429a      	cmp	r2, r3
   804c4:	d902      	bls.n	804cc <pvPortMalloc+0x6c>
   804c6:	6823      	ldr	r3, [r4, #0]
   804c8:	2b00      	cmp	r3, #0
   804ca:	d1f7      	bne.n	804bc <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
   804cc:	4b11      	ldr	r3, [pc, #68]	; (80514 <pvPortMalloc+0xb4>)
   804ce:	681b      	ldr	r3, [r3, #0]
   804d0:	429c      	cmp	r4, r3
   804d2:	d01a      	beq.n	8050a <pvPortMalloc+0xaa>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   804d4:	680d      	ldr	r5, [r1, #0]
   804d6:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   804d8:	6823      	ldr	r3, [r4, #0]
   804da:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   804dc:	6863      	ldr	r3, [r4, #4]
   804de:	1a9b      	subs	r3, r3, r2
   804e0:	2b20      	cmp	r3, #32
   804e2:	d808      	bhi.n	804f6 <pvPortMalloc+0x96>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   804e4:	4a0e      	ldr	r2, [pc, #56]	; (80520 <pvPortMalloc+0xc0>)
   804e6:	6813      	ldr	r3, [r2, #0]
   804e8:	6861      	ldr	r1, [r4, #4]
   804ea:	1a5b      	subs	r3, r3, r1
   804ec:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
   804ee:	4b0d      	ldr	r3, [pc, #52]	; (80524 <pvPortMalloc+0xc4>)
   804f0:	4798      	blx	r3
}
   804f2:	4628      	mov	r0, r5
   804f4:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   804f6:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   804f8:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   804fa:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   804fc:	4b0a      	ldr	r3, [pc, #40]	; (80528 <pvPortMalloc+0xc8>)
   804fe:	4798      	blx	r3
   80500:	e7f0      	b.n	804e4 <pvPortMalloc+0x84>
void *pvReturn = NULL;
   80502:	2500      	movs	r5, #0
   80504:	e7f3      	b.n	804ee <pvPortMalloc+0x8e>
   80506:	2500      	movs	r5, #0
   80508:	e7f1      	b.n	804ee <pvPortMalloc+0x8e>
   8050a:	2500      	movs	r5, #0
   8050c:	e7ef      	b.n	804ee <pvPortMalloc+0x8e>
   8050e:	bf00      	nop
   80510:	00080d91 	.word	0x00080d91
   80514:	20070b4c 	.word	0x20070b4c
   80518:	2007ab50 	.word	0x2007ab50
   8051c:	20070b50 	.word	0x20070b50
   80520:	20070130 	.word	0x20070130
   80524:	00080ee9 	.word	0x00080ee9
   80528:	00080409 	.word	0x00080409

0008052c <vPortFree>:
	if( pv != NULL )
   8052c:	b180      	cbz	r0, 80550 <vPortFree+0x24>
{
   8052e:	b510      	push	{r4, lr}
   80530:	4604      	mov	r4, r0
		vTaskSuspendAll();
   80532:	4b08      	ldr	r3, [pc, #32]	; (80554 <vPortFree+0x28>)
   80534:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
   80536:	4a08      	ldr	r2, [pc, #32]	; (80558 <vPortFree+0x2c>)
   80538:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   8053c:	6811      	ldr	r1, [r2, #0]
   8053e:	440b      	add	r3, r1
   80540:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80542:	f1a4 0010 	sub.w	r0, r4, #16
   80546:	4b05      	ldr	r3, [pc, #20]	; (8055c <vPortFree+0x30>)
   80548:	4798      	blx	r3
		xTaskResumeAll();
   8054a:	4b05      	ldr	r3, [pc, #20]	; (80560 <vPortFree+0x34>)
   8054c:	4798      	blx	r3
   8054e:	bd10      	pop	{r4, pc}
   80550:	4770      	bx	lr
   80552:	bf00      	nop
   80554:	00080d91 	.word	0x00080d91
   80558:	20070130 	.word	0x20070130
   8055c:	00080409 	.word	0x00080409
   80560:	00080ee9 	.word	0x00080ee9

00080564 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80564:	b510      	push	{r4, lr}
   80566:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80568:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8056a:	b95b      	cbnz	r3, 80584 <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8056c:	6803      	ldr	r3, [r0, #0]
   8056e:	b11b      	cbz	r3, 80578 <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80570:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80572:	3301      	adds	r3, #1
   80574:	63a3      	str	r3, [r4, #56]	; 0x38
   80576:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80578:	6840      	ldr	r0, [r0, #4]
   8057a:	4b12      	ldr	r3, [pc, #72]	; (805c4 <prvCopyDataToQueue+0x60>)
   8057c:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   8057e:	2300      	movs	r3, #0
   80580:	6063      	str	r3, [r4, #4]
   80582:	e7f5      	b.n	80570 <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   80584:	b96a      	cbnz	r2, 805a2 <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80586:	461a      	mov	r2, r3
   80588:	6880      	ldr	r0, [r0, #8]
   8058a:	4b0f      	ldr	r3, [pc, #60]	; (805c8 <prvCopyDataToQueue+0x64>)
   8058c:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   8058e:	68a3      	ldr	r3, [r4, #8]
   80590:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80592:	4413      	add	r3, r2
   80594:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80596:	6862      	ldr	r2, [r4, #4]
   80598:	4293      	cmp	r3, r2
   8059a:	d3e9      	bcc.n	80570 <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   8059c:	6823      	ldr	r3, [r4, #0]
   8059e:	60a3      	str	r3, [r4, #8]
   805a0:	e7e6      	b.n	80570 <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   805a2:	461a      	mov	r2, r3
   805a4:	68c0      	ldr	r0, [r0, #12]
   805a6:	4b08      	ldr	r3, [pc, #32]	; (805c8 <prvCopyDataToQueue+0x64>)
   805a8:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   805aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
   805ac:	4252      	negs	r2, r2
   805ae:	68e3      	ldr	r3, [r4, #12]
   805b0:	4413      	add	r3, r2
   805b2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   805b4:	6821      	ldr	r1, [r4, #0]
   805b6:	428b      	cmp	r3, r1
   805b8:	d2da      	bcs.n	80570 <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   805ba:	6863      	ldr	r3, [r4, #4]
   805bc:	441a      	add	r2, r3
   805be:	60e2      	str	r2, [r4, #12]
   805c0:	e7d6      	b.n	80570 <prvCopyDataToQueue+0xc>
   805c2:	bf00      	nop
   805c4:	00081429 	.word	0x00081429
   805c8:	00082699 	.word	0x00082699

000805cc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   805cc:	b538      	push	{r3, r4, r5, lr}
   805ce:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   805d0:	6800      	ldr	r0, [r0, #0]
   805d2:	b158      	cbz	r0, 805ec <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   805d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   805d6:	68dc      	ldr	r4, [r3, #12]
   805d8:	4414      	add	r4, r2
   805da:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   805dc:	685d      	ldr	r5, [r3, #4]
   805de:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   805e0:	bf28      	it	cs
   805e2:	60d8      	strcs	r0, [r3, #12]
   805e4:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   805e6:	68d9      	ldr	r1, [r3, #12]
   805e8:	4b01      	ldr	r3, [pc, #4]	; (805f0 <prvCopyDataFromQueue+0x24>)
   805ea:	4798      	blx	r3
   805ec:	bd38      	pop	{r3, r4, r5, pc}
   805ee:	bf00      	nop
   805f0:	00082699 	.word	0x00082699

000805f4 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   805f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   805f6:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   805f8:	4b1f      	ldr	r3, [pc, #124]	; (80678 <prvUnlockQueue+0x84>)
   805fa:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   805fc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   805fe:	2b00      	cmp	r3, #0
   80600:	dd14      	ble.n	8062c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80602:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80604:	b193      	cbz	r3, 8062c <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80606:	f104 0624 	add.w	r6, r4, #36	; 0x24
   8060a:	4d1c      	ldr	r5, [pc, #112]	; (8067c <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   8060c:	4f1c      	ldr	r7, [pc, #112]	; (80680 <prvUnlockQueue+0x8c>)
   8060e:	e007      	b.n	80620 <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
   80610:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80612:	3b01      	subs	r3, #1
   80614:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80616:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80618:	2b00      	cmp	r3, #0
   8061a:	dd07      	ble.n	8062c <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8061c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8061e:	b12b      	cbz	r3, 8062c <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80620:	4630      	mov	r0, r6
   80622:	47a8      	blx	r5
   80624:	2800      	cmp	r0, #0
   80626:	d0f3      	beq.n	80610 <prvUnlockQueue+0x1c>
					vTaskMissedYield();
   80628:	47b8      	blx	r7
   8062a:	e7f1      	b.n	80610 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   8062c:	f04f 33ff 	mov.w	r3, #4294967295
   80630:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80632:	4b14      	ldr	r3, [pc, #80]	; (80684 <prvUnlockQueue+0x90>)
   80634:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80636:	4b10      	ldr	r3, [pc, #64]	; (80678 <prvUnlockQueue+0x84>)
   80638:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8063a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8063c:	2b00      	cmp	r3, #0
   8063e:	dd14      	ble.n	8066a <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80640:	6923      	ldr	r3, [r4, #16]
   80642:	b193      	cbz	r3, 8066a <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80644:	f104 0610 	add.w	r6, r4, #16
   80648:	4d0c      	ldr	r5, [pc, #48]	; (8067c <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
   8064a:	4f0d      	ldr	r7, [pc, #52]	; (80680 <prvUnlockQueue+0x8c>)
   8064c:	e007      	b.n	8065e <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
   8064e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80650:	3b01      	subs	r3, #1
   80652:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80654:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80656:	2b00      	cmp	r3, #0
   80658:	dd07      	ble.n	8066a <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8065a:	6923      	ldr	r3, [r4, #16]
   8065c:	b12b      	cbz	r3, 8066a <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8065e:	4630      	mov	r0, r6
   80660:	47a8      	blx	r5
   80662:	2800      	cmp	r0, #0
   80664:	d0f3      	beq.n	8064e <prvUnlockQueue+0x5a>
					vTaskMissedYield();
   80666:	47b8      	blx	r7
   80668:	e7f1      	b.n	8064e <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8066a:	f04f 33ff 	mov.w	r3, #4294967295
   8066e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80670:	4b04      	ldr	r3, [pc, #16]	; (80684 <prvUnlockQueue+0x90>)
   80672:	4798      	blx	r3
   80674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80676:	bf00      	nop
   80678:	00080311 	.word	0x00080311
   8067c:	00081241 	.word	0x00081241
   80680:	00081371 	.word	0x00081371
   80684:	00080331 	.word	0x00080331

00080688 <xQueueGenericReset>:
{
   80688:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   8068a:	b308      	cbz	r0, 806d0 <xQueueGenericReset+0x48>
   8068c:	460d      	mov	r5, r1
   8068e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   80690:	4b17      	ldr	r3, [pc, #92]	; (806f0 <xQueueGenericReset+0x68>)
   80692:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80694:	6822      	ldr	r2, [r4, #0]
   80696:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80698:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8069a:	fb03 f301 	mul.w	r3, r3, r1
   8069e:	18d0      	adds	r0, r2, r3
   806a0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   806a2:	2000      	movs	r0, #0
   806a4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   806a6:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   806a8:	1a5b      	subs	r3, r3, r1
   806aa:	4413      	add	r3, r2
   806ac:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   806ae:	f04f 33ff 	mov.w	r3, #4294967295
   806b2:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   806b4:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
   806b6:	b995      	cbnz	r5, 806de <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   806b8:	6923      	ldr	r3, [r4, #16]
   806ba:	b12b      	cbz	r3, 806c8 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   806bc:	f104 0010 	add.w	r0, r4, #16
   806c0:	4b0c      	ldr	r3, [pc, #48]	; (806f4 <xQueueGenericReset+0x6c>)
   806c2:	4798      	blx	r3
   806c4:	2801      	cmp	r0, #1
   806c6:	d007      	beq.n	806d8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
   806c8:	4b0b      	ldr	r3, [pc, #44]	; (806f8 <xQueueGenericReset+0x70>)
   806ca:	4798      	blx	r3
}
   806cc:	2001      	movs	r0, #1
   806ce:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   806d0:	4b0a      	ldr	r3, [pc, #40]	; (806fc <xQueueGenericReset+0x74>)
   806d2:	4798      	blx	r3
   806d4:	bf00      	nop
   806d6:	e7fd      	b.n	806d4 <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
   806d8:	4b09      	ldr	r3, [pc, #36]	; (80700 <xQueueGenericReset+0x78>)
   806da:	4798      	blx	r3
   806dc:	e7f4      	b.n	806c8 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   806de:	f104 0010 	add.w	r0, r4, #16
   806e2:	4d08      	ldr	r5, [pc, #32]	; (80704 <xQueueGenericReset+0x7c>)
   806e4:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   806e6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   806ea:	47a8      	blx	r5
   806ec:	e7ec      	b.n	806c8 <xQueueGenericReset+0x40>
   806ee:	bf00      	nop
   806f0:	00080311 	.word	0x00080311
   806f4:	00081241 	.word	0x00081241
   806f8:	00080331 	.word	0x00080331
   806fc:	00080301 	.word	0x00080301
   80700:	000802f1 	.word	0x000802f1
   80704:	00080207 	.word	0x00080207

00080708 <xQueueGenericCreate>:
{
   80708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   8070a:	b1d8      	cbz	r0, 80744 <xQueueGenericCreate+0x3c>
   8070c:	460d      	mov	r5, r1
   8070e:	4617      	mov	r7, r2
   80710:	4606      	mov	r6, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80712:	2050      	movs	r0, #80	; 0x50
   80714:	4b0d      	ldr	r3, [pc, #52]	; (8074c <xQueueGenericCreate+0x44>)
   80716:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80718:	4604      	mov	r4, r0
   8071a:	b198      	cbz	r0, 80744 <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   8071c:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80720:	3001      	adds	r0, #1
   80722:	4b0a      	ldr	r3, [pc, #40]	; (8074c <xQueueGenericCreate+0x44>)
   80724:	4798      	blx	r3
   80726:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80728:	b148      	cbz	r0, 8073e <xQueueGenericCreate+0x36>
				pxNewQueue->uxLength = uxQueueLength;
   8072a:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   8072c:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   8072e:	2101      	movs	r1, #1
   80730:	4620      	mov	r0, r4
   80732:	4b07      	ldr	r3, [pc, #28]	; (80750 <xQueueGenericCreate+0x48>)
   80734:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
   80736:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
}
   8073a:	4620      	mov	r0, r4
   8073c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vPortFree( pxNewQueue );
   8073e:	4620      	mov	r0, r4
   80740:	4b04      	ldr	r3, [pc, #16]	; (80754 <xQueueGenericCreate+0x4c>)
   80742:	4798      	blx	r3
	configASSERT( xReturn );
   80744:	4b04      	ldr	r3, [pc, #16]	; (80758 <xQueueGenericCreate+0x50>)
   80746:	4798      	blx	r3
   80748:	bf00      	nop
   8074a:	e7fd      	b.n	80748 <xQueueGenericCreate+0x40>
   8074c:	00080461 	.word	0x00080461
   80750:	00080689 	.word	0x00080689
   80754:	0008052d 	.word	0x0008052d
   80758:	00080301 	.word	0x00080301

0008075c <xQueueGenericSend>:
{
   8075c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80760:	b085      	sub	sp, #20
   80762:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80764:	b148      	cbz	r0, 8077a <xQueueGenericSend+0x1e>
   80766:	4688      	mov	r8, r1
   80768:	4699      	mov	r9, r3
   8076a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8076c:	b149      	cbz	r1, 80782 <xQueueGenericSend+0x26>
   8076e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80770:	4e38      	ldr	r6, [pc, #224]	; (80854 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
   80772:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80880 <xQueueGenericSend+0x124>
		taskEXIT_CRITICAL();
   80776:	4d38      	ldr	r5, [pc, #224]	; (80858 <xQueueGenericSend+0xfc>)
   80778:	e02e      	b.n	807d8 <xQueueGenericSend+0x7c>
	configASSERT( pxQueue );
   8077a:	4b38      	ldr	r3, [pc, #224]	; (8085c <xQueueGenericSend+0x100>)
   8077c:	4798      	blx	r3
   8077e:	bf00      	nop
   80780:	e7fd      	b.n	8077e <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80782:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80784:	b11b      	cbz	r3, 8078e <xQueueGenericSend+0x32>
   80786:	4b35      	ldr	r3, [pc, #212]	; (8085c <xQueueGenericSend+0x100>)
   80788:	4798      	blx	r3
   8078a:	bf00      	nop
   8078c:	e7fd      	b.n	8078a <xQueueGenericSend+0x2e>
   8078e:	2700      	movs	r7, #0
   80790:	e7ee      	b.n	80770 <xQueueGenericSend+0x14>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80792:	464a      	mov	r2, r9
   80794:	4641      	mov	r1, r8
   80796:	4620      	mov	r0, r4
   80798:	4b31      	ldr	r3, [pc, #196]	; (80860 <xQueueGenericSend+0x104>)
   8079a:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8079c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8079e:	b92b      	cbnz	r3, 807ac <xQueueGenericSend+0x50>
				taskEXIT_CRITICAL();
   807a0:	4b2d      	ldr	r3, [pc, #180]	; (80858 <xQueueGenericSend+0xfc>)
   807a2:	4798      	blx	r3
				return pdPASS;
   807a4:	2001      	movs	r0, #1
}
   807a6:	b005      	add	sp, #20
   807a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   807ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
   807b0:	4b2c      	ldr	r3, [pc, #176]	; (80864 <xQueueGenericSend+0x108>)
   807b2:	4798      	blx	r3
   807b4:	2801      	cmp	r0, #1
   807b6:	d1f3      	bne.n	807a0 <xQueueGenericSend+0x44>
						portYIELD_WITHIN_API();
   807b8:	4b2b      	ldr	r3, [pc, #172]	; (80868 <xQueueGenericSend+0x10c>)
   807ba:	4798      	blx	r3
   807bc:	e7f0      	b.n	807a0 <xQueueGenericSend+0x44>
					taskEXIT_CRITICAL();
   807be:	4b26      	ldr	r3, [pc, #152]	; (80858 <xQueueGenericSend+0xfc>)
   807c0:	4798      	blx	r3
					return errQUEUE_FULL;
   807c2:	2000      	movs	r0, #0
   807c4:	e7ef      	b.n	807a6 <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
   807c6:	a802      	add	r0, sp, #8
   807c8:	47d0      	blx	sl
   807ca:	e00f      	b.n	807ec <xQueueGenericSend+0x90>
				prvUnlockQueue( pxQueue );
   807cc:	4620      	mov	r0, r4
   807ce:	4b27      	ldr	r3, [pc, #156]	; (8086c <xQueueGenericSend+0x110>)
   807d0:	4798      	blx	r3
				( void ) xTaskResumeAll();
   807d2:	4b27      	ldr	r3, [pc, #156]	; (80870 <xQueueGenericSend+0x114>)
   807d4:	4798      	blx	r3
   807d6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   807d8:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   807da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   807dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   807de:	429a      	cmp	r2, r3
   807e0:	d3d7      	bcc.n	80792 <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   807e2:	9b01      	ldr	r3, [sp, #4]
   807e4:	2b00      	cmp	r3, #0
   807e6:	d0ea      	beq.n	807be <xQueueGenericSend+0x62>
				else if( xEntryTimeSet == pdFALSE )
   807e8:	2f00      	cmp	r7, #0
   807ea:	d0ec      	beq.n	807c6 <xQueueGenericSend+0x6a>
		taskEXIT_CRITICAL();
   807ec:	47a8      	blx	r5
		vTaskSuspendAll();
   807ee:	4b21      	ldr	r3, [pc, #132]	; (80874 <xQueueGenericSend+0x118>)
   807f0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   807f2:	47b0      	blx	r6
   807f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   807f6:	f1b3 3fff 	cmp.w	r3, #4294967295
   807fa:	bf04      	itt	eq
   807fc:	2300      	moveq	r3, #0
   807fe:	6463      	streq	r3, [r4, #68]	; 0x44
   80800:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80802:	f1b3 3fff 	cmp.w	r3, #4294967295
   80806:	bf04      	itt	eq
   80808:	2300      	moveq	r3, #0
   8080a:	64a3      	streq	r3, [r4, #72]	; 0x48
   8080c:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8080e:	a901      	add	r1, sp, #4
   80810:	a802      	add	r0, sp, #8
   80812:	4b19      	ldr	r3, [pc, #100]	; (80878 <xQueueGenericSend+0x11c>)
   80814:	4798      	blx	r3
   80816:	b9a8      	cbnz	r0, 80844 <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80818:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   8081a:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   8081e:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80820:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80822:	45bb      	cmp	fp, r7
   80824:	d1d2      	bne.n	807cc <xQueueGenericSend+0x70>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80826:	9901      	ldr	r1, [sp, #4]
   80828:	f104 0010 	add.w	r0, r4, #16
   8082c:	4b13      	ldr	r3, [pc, #76]	; (8087c <xQueueGenericSend+0x120>)
   8082e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80830:	4620      	mov	r0, r4
   80832:	4b0e      	ldr	r3, [pc, #56]	; (8086c <xQueueGenericSend+0x110>)
   80834:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80836:	4b0e      	ldr	r3, [pc, #56]	; (80870 <xQueueGenericSend+0x114>)
   80838:	4798      	blx	r3
   8083a:	2800      	cmp	r0, #0
   8083c:	d1cb      	bne.n	807d6 <xQueueGenericSend+0x7a>
					portYIELD_WITHIN_API();
   8083e:	4b0a      	ldr	r3, [pc, #40]	; (80868 <xQueueGenericSend+0x10c>)
   80840:	4798      	blx	r3
   80842:	e7c8      	b.n	807d6 <xQueueGenericSend+0x7a>
			prvUnlockQueue( pxQueue );
   80844:	4620      	mov	r0, r4
   80846:	4b09      	ldr	r3, [pc, #36]	; (8086c <xQueueGenericSend+0x110>)
   80848:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8084a:	4b09      	ldr	r3, [pc, #36]	; (80870 <xQueueGenericSend+0x114>)
   8084c:	4798      	blx	r3
			return errQUEUE_FULL;
   8084e:	2000      	movs	r0, #0
   80850:	e7a9      	b.n	807a6 <xQueueGenericSend+0x4a>
   80852:	bf00      	nop
   80854:	00080311 	.word	0x00080311
   80858:	00080331 	.word	0x00080331
   8085c:	00080301 	.word	0x00080301
   80860:	00080565 	.word	0x00080565
   80864:	00081241 	.word	0x00081241
   80868:	000802f1 	.word	0x000802f1
   8086c:	000805f5 	.word	0x000805f5
   80870:	00080ee9 	.word	0x00080ee9
   80874:	00080d91 	.word	0x00080d91
   80878:	000812ed 	.word	0x000812ed
   8087c:	0008119d 	.word	0x0008119d
   80880:	000812c5 	.word	0x000812c5

00080884 <xQueueGenericSendFromISR>:
{
   80884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
   80888:	b190      	cbz	r0, 808b0 <xQueueGenericSendFromISR+0x2c>
   8088a:	460e      	mov	r6, r1
   8088c:	4615      	mov	r5, r2
   8088e:	4698      	mov	r8, r3
   80890:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80892:	b189      	cbz	r1, 808b8 <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80894:	4b1b      	ldr	r3, [pc, #108]	; (80904 <xQueueGenericSendFromISR+0x80>)
   80896:	4798      	blx	r3
   80898:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   8089a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8089c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8089e:	429a      	cmp	r2, r3
   808a0:	d311      	bcc.n	808c6 <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
   808a2:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   808a4:	4638      	mov	r0, r7
   808a6:	4b18      	ldr	r3, [pc, #96]	; (80908 <xQueueGenericSendFromISR+0x84>)
   808a8:	4798      	blx	r3
}
   808aa:	4620      	mov	r0, r4
   808ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
   808b0:	4b14      	ldr	r3, [pc, #80]	; (80904 <xQueueGenericSendFromISR+0x80>)
   808b2:	4798      	blx	r3
   808b4:	bf00      	nop
   808b6:	e7fd      	b.n	808b4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   808b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
   808ba:	2b00      	cmp	r3, #0
   808bc:	d0ea      	beq.n	80894 <xQueueGenericSendFromISR+0x10>
   808be:	4b11      	ldr	r3, [pc, #68]	; (80904 <xQueueGenericSendFromISR+0x80>)
   808c0:	4798      	blx	r3
   808c2:	bf00      	nop
   808c4:	e7fd      	b.n	808c2 <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   808c6:	4642      	mov	r2, r8
   808c8:	4631      	mov	r1, r6
   808ca:	4620      	mov	r0, r4
   808cc:	4b0f      	ldr	r3, [pc, #60]	; (8090c <xQueueGenericSendFromISR+0x88>)
   808ce:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   808d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   808d2:	f1b3 3fff 	cmp.w	r3, #4294967295
   808d6:	d10a      	bne.n	808ee <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   808d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   808da:	b16b      	cbz	r3, 808f8 <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   808dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   808e0:	4b0b      	ldr	r3, [pc, #44]	; (80910 <xQueueGenericSendFromISR+0x8c>)
   808e2:	4798      	blx	r3
   808e4:	b150      	cbz	r0, 808fc <xQueueGenericSendFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
   808e6:	b15d      	cbz	r5, 80900 <xQueueGenericSendFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
   808e8:	2401      	movs	r4, #1
   808ea:	602c      	str	r4, [r5, #0]
   808ec:	e7da      	b.n	808a4 <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
   808ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   808f0:	3301      	adds	r3, #1
   808f2:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   808f4:	2401      	movs	r4, #1
   808f6:	e7d5      	b.n	808a4 <xQueueGenericSendFromISR+0x20>
   808f8:	2401      	movs	r4, #1
   808fa:	e7d3      	b.n	808a4 <xQueueGenericSendFromISR+0x20>
   808fc:	2401      	movs	r4, #1
   808fe:	e7d1      	b.n	808a4 <xQueueGenericSendFromISR+0x20>
   80900:	2401      	movs	r4, #1
   80902:	e7cf      	b.n	808a4 <xQueueGenericSendFromISR+0x20>
   80904:	00080301 	.word	0x00080301
   80908:	00080329 	.word	0x00080329
   8090c:	00080565 	.word	0x00080565
   80910:	00081241 	.word	0x00081241

00080914 <xQueueGenericReceive>:
{
   80914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80918:	b084      	sub	sp, #16
   8091a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   8091c:	b148      	cbz	r0, 80932 <xQueueGenericReceive+0x1e>
   8091e:	4688      	mov	r8, r1
   80920:	4699      	mov	r9, r3
   80922:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80924:	b149      	cbz	r1, 8093a <xQueueGenericReceive+0x26>
   80926:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80928:	4e46      	ldr	r6, [pc, #280]	; (80a44 <xQueueGenericReceive+0x130>)
					vTaskSetTimeOutState( &xTimeOut );
   8092a:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80a78 <xQueueGenericReceive+0x164>
		taskEXIT_CRITICAL();
   8092e:	4d46      	ldr	r5, [pc, #280]	; (80a48 <xQueueGenericReceive+0x134>)
   80930:	e04b      	b.n	809ca <xQueueGenericReceive+0xb6>
	configASSERT( pxQueue );
   80932:	4b46      	ldr	r3, [pc, #280]	; (80a4c <xQueueGenericReceive+0x138>)
   80934:	4798      	blx	r3
   80936:	bf00      	nop
   80938:	e7fd      	b.n	80936 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8093a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8093c:	b11b      	cbz	r3, 80946 <xQueueGenericReceive+0x32>
   8093e:	4b43      	ldr	r3, [pc, #268]	; (80a4c <xQueueGenericReceive+0x138>)
   80940:	4798      	blx	r3
   80942:	bf00      	nop
   80944:	e7fd      	b.n	80942 <xQueueGenericReceive+0x2e>
   80946:	2700      	movs	r7, #0
   80948:	e7ee      	b.n	80928 <xQueueGenericReceive+0x14>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   8094a:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   8094c:	4641      	mov	r1, r8
   8094e:	4620      	mov	r0, r4
   80950:	4b3f      	ldr	r3, [pc, #252]	; (80a50 <xQueueGenericReceive+0x13c>)
   80952:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
   80954:	f1b9 0f00 	cmp.w	r9, #0
   80958:	d117      	bne.n	8098a <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
   8095a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8095c:	3b01      	subs	r3, #1
   8095e:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80960:	6823      	ldr	r3, [r4, #0]
   80962:	b913      	cbnz	r3, 8096a <xQueueGenericReceive+0x56>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80964:	4b3b      	ldr	r3, [pc, #236]	; (80a54 <xQueueGenericReceive+0x140>)
   80966:	4798      	blx	r3
   80968:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8096a:	6923      	ldr	r3, [r4, #16]
   8096c:	b13b      	cbz	r3, 8097e <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   8096e:	f104 0010 	add.w	r0, r4, #16
   80972:	4b39      	ldr	r3, [pc, #228]	; (80a58 <xQueueGenericReceive+0x144>)
   80974:	4798      	blx	r3
   80976:	2801      	cmp	r0, #1
   80978:	d101      	bne.n	8097e <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   8097a:	4b38      	ldr	r3, [pc, #224]	; (80a5c <xQueueGenericReceive+0x148>)
   8097c:	4798      	blx	r3
				taskEXIT_CRITICAL();
   8097e:	4b32      	ldr	r3, [pc, #200]	; (80a48 <xQueueGenericReceive+0x134>)
   80980:	4798      	blx	r3
				return pdPASS;
   80982:	2001      	movs	r0, #1
}
   80984:	b004      	add	sp, #16
   80986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   8098a:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8098c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8098e:	2b00      	cmp	r3, #0
   80990:	d0f5      	beq.n	8097e <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80992:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80996:	4b30      	ldr	r3, [pc, #192]	; (80a58 <xQueueGenericReceive+0x144>)
   80998:	4798      	blx	r3
   8099a:	2800      	cmp	r0, #0
   8099c:	d0ef      	beq.n	8097e <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   8099e:	4b2f      	ldr	r3, [pc, #188]	; (80a5c <xQueueGenericReceive+0x148>)
   809a0:	4798      	blx	r3
   809a2:	e7ec      	b.n	8097e <xQueueGenericReceive+0x6a>
					taskEXIT_CRITICAL();
   809a4:	4b28      	ldr	r3, [pc, #160]	; (80a48 <xQueueGenericReceive+0x134>)
   809a6:	4798      	blx	r3
					return errQUEUE_EMPTY;
   809a8:	2000      	movs	r0, #0
   809aa:	e7eb      	b.n	80984 <xQueueGenericReceive+0x70>
					vTaskSetTimeOutState( &xTimeOut );
   809ac:	a802      	add	r0, sp, #8
   809ae:	47d0      	blx	sl
   809b0:	e014      	b.n	809dc <xQueueGenericReceive+0xc8>
						portENTER_CRITICAL();
   809b2:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   809b4:	6860      	ldr	r0, [r4, #4]
   809b6:	4b2a      	ldr	r3, [pc, #168]	; (80a60 <xQueueGenericReceive+0x14c>)
   809b8:	4798      	blx	r3
						portEXIT_CRITICAL();
   809ba:	47a8      	blx	r5
   809bc:	e02c      	b.n	80a18 <xQueueGenericReceive+0x104>
				prvUnlockQueue( pxQueue );
   809be:	4620      	mov	r0, r4
   809c0:	4b28      	ldr	r3, [pc, #160]	; (80a64 <xQueueGenericReceive+0x150>)
   809c2:	4798      	blx	r3
				( void ) xTaskResumeAll();
   809c4:	4b28      	ldr	r3, [pc, #160]	; (80a68 <xQueueGenericReceive+0x154>)
   809c6:	4798      	blx	r3
   809c8:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   809ca:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   809cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   809ce:	2b00      	cmp	r3, #0
   809d0:	d1bb      	bne.n	8094a <xQueueGenericReceive+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   809d2:	9b01      	ldr	r3, [sp, #4]
   809d4:	2b00      	cmp	r3, #0
   809d6:	d0e5      	beq.n	809a4 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
   809d8:	2f00      	cmp	r7, #0
   809da:	d0e7      	beq.n	809ac <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
   809dc:	47a8      	blx	r5
		vTaskSuspendAll();
   809de:	4b23      	ldr	r3, [pc, #140]	; (80a6c <xQueueGenericReceive+0x158>)
   809e0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   809e2:	47b0      	blx	r6
   809e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   809e6:	f1b3 3fff 	cmp.w	r3, #4294967295
   809ea:	bf04      	itt	eq
   809ec:	2300      	moveq	r3, #0
   809ee:	6463      	streq	r3, [r4, #68]	; 0x44
   809f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   809f2:	f1b3 3fff 	cmp.w	r3, #4294967295
   809f6:	bf04      	itt	eq
   809f8:	2300      	moveq	r3, #0
   809fa:	64a3      	streq	r3, [r4, #72]	; 0x48
   809fc:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   809fe:	a901      	add	r1, sp, #4
   80a00:	a802      	add	r0, sp, #8
   80a02:	4b1b      	ldr	r3, [pc, #108]	; (80a70 <xQueueGenericReceive+0x15c>)
   80a04:	4798      	blx	r3
   80a06:	b9b0      	cbnz	r0, 80a36 <xQueueGenericReceive+0x122>
	taskENTER_CRITICAL();
   80a08:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80a0a:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80a0c:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80a0e:	2f00      	cmp	r7, #0
   80a10:	d1d5      	bne.n	809be <xQueueGenericReceive+0xaa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80a12:	6823      	ldr	r3, [r4, #0]
   80a14:	2b00      	cmp	r3, #0
   80a16:	d0cc      	beq.n	809b2 <xQueueGenericReceive+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80a18:	9901      	ldr	r1, [sp, #4]
   80a1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a1e:	4b15      	ldr	r3, [pc, #84]	; (80a74 <xQueueGenericReceive+0x160>)
   80a20:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80a22:	4620      	mov	r0, r4
   80a24:	4b0f      	ldr	r3, [pc, #60]	; (80a64 <xQueueGenericReceive+0x150>)
   80a26:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80a28:	4b0f      	ldr	r3, [pc, #60]	; (80a68 <xQueueGenericReceive+0x154>)
   80a2a:	4798      	blx	r3
   80a2c:	2800      	cmp	r0, #0
   80a2e:	d1cb      	bne.n	809c8 <xQueueGenericReceive+0xb4>
					portYIELD_WITHIN_API();
   80a30:	4b0a      	ldr	r3, [pc, #40]	; (80a5c <xQueueGenericReceive+0x148>)
   80a32:	4798      	blx	r3
   80a34:	e7c8      	b.n	809c8 <xQueueGenericReceive+0xb4>
			prvUnlockQueue( pxQueue );
   80a36:	4620      	mov	r0, r4
   80a38:	4b0a      	ldr	r3, [pc, #40]	; (80a64 <xQueueGenericReceive+0x150>)
   80a3a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80a3c:	4b0a      	ldr	r3, [pc, #40]	; (80a68 <xQueueGenericReceive+0x154>)
   80a3e:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80a40:	2000      	movs	r0, #0
   80a42:	e79f      	b.n	80984 <xQueueGenericReceive+0x70>
   80a44:	00080311 	.word	0x00080311
   80a48:	00080331 	.word	0x00080331
   80a4c:	00080301 	.word	0x00080301
   80a50:	000805cd 	.word	0x000805cd
   80a54:	0008137d 	.word	0x0008137d
   80a58:	00081241 	.word	0x00081241
   80a5c:	000802f1 	.word	0x000802f1
   80a60:	000813a9 	.word	0x000813a9
   80a64:	000805f5 	.word	0x000805f5
   80a68:	00080ee9 	.word	0x00080ee9
   80a6c:	00080d91 	.word	0x00080d91
   80a70:	000812ed 	.word	0x000812ed
   80a74:	0008119d 	.word	0x0008119d
   80a78:	000812c5 	.word	0x000812c5

00080a7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80a7c:	b538      	push	{r3, r4, r5, lr}
   80a7e:	4604      	mov	r4, r0
   80a80:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80a82:	4b0e      	ldr	r3, [pc, #56]	; (80abc <vQueueWaitForMessageRestricted+0x40>)
   80a84:	4798      	blx	r3
   80a86:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a88:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a8c:	bf04      	itt	eq
   80a8e:	2300      	moveq	r3, #0
   80a90:	6463      	streq	r3, [r4, #68]	; 0x44
   80a92:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a94:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a98:	bf04      	itt	eq
   80a9a:	2300      	moveq	r3, #0
   80a9c:	64a3      	streq	r3, [r4, #72]	; 0x48
   80a9e:	4b08      	ldr	r3, [pc, #32]	; (80ac0 <vQueueWaitForMessageRestricted+0x44>)
   80aa0:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80aa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80aa4:	b11b      	cbz	r3, 80aae <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
   80aa6:	4620      	mov	r0, r4
   80aa8:	4b06      	ldr	r3, [pc, #24]	; (80ac4 <vQueueWaitForMessageRestricted+0x48>)
   80aaa:	4798      	blx	r3
   80aac:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80aae:	4629      	mov	r1, r5
   80ab0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80ab4:	4b04      	ldr	r3, [pc, #16]	; (80ac8 <vQueueWaitForMessageRestricted+0x4c>)
   80ab6:	4798      	blx	r3
   80ab8:	e7f5      	b.n	80aa6 <vQueueWaitForMessageRestricted+0x2a>
   80aba:	bf00      	nop
   80abc:	00080311 	.word	0x00080311
   80ac0:	00080331 	.word	0x00080331
   80ac4:	000805f5 	.word	0x000805f5
   80ac8:	000811fd 	.word	0x000811fd

00080acc <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80acc:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80ace:	4b0f      	ldr	r3, [pc, #60]	; (80b0c <prvAddCurrentTaskToDelayedList+0x40>)
   80ad0:	681b      	ldr	r3, [r3, #0]
   80ad2:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80ad4:	4b0e      	ldr	r3, [pc, #56]	; (80b10 <prvAddCurrentTaskToDelayedList+0x44>)
   80ad6:	681b      	ldr	r3, [r3, #0]
   80ad8:	4298      	cmp	r0, r3
   80ada:	d30e      	bcc.n	80afa <prvAddCurrentTaskToDelayedList+0x2e>
   80adc:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80ade:	4b0d      	ldr	r3, [pc, #52]	; (80b14 <prvAddCurrentTaskToDelayedList+0x48>)
   80ae0:	6818      	ldr	r0, [r3, #0]
   80ae2:	4b0a      	ldr	r3, [pc, #40]	; (80b0c <prvAddCurrentTaskToDelayedList+0x40>)
   80ae4:	6819      	ldr	r1, [r3, #0]
   80ae6:	3104      	adds	r1, #4
   80ae8:	4b0b      	ldr	r3, [pc, #44]	; (80b18 <prvAddCurrentTaskToDelayedList+0x4c>)
   80aea:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80aec:	4b0b      	ldr	r3, [pc, #44]	; (80b1c <prvAddCurrentTaskToDelayedList+0x50>)
   80aee:	681b      	ldr	r3, [r3, #0]
   80af0:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80af2:	bf3c      	itt	cc
   80af4:	4b09      	ldrcc	r3, [pc, #36]	; (80b1c <prvAddCurrentTaskToDelayedList+0x50>)
   80af6:	601c      	strcc	r4, [r3, #0]
   80af8:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80afa:	4b09      	ldr	r3, [pc, #36]	; (80b20 <prvAddCurrentTaskToDelayedList+0x54>)
   80afc:	6818      	ldr	r0, [r3, #0]
   80afe:	4b03      	ldr	r3, [pc, #12]	; (80b0c <prvAddCurrentTaskToDelayedList+0x40>)
   80b00:	6819      	ldr	r1, [r3, #0]
   80b02:	3104      	adds	r1, #4
   80b04:	4b04      	ldr	r3, [pc, #16]	; (80b18 <prvAddCurrentTaskToDelayedList+0x4c>)
   80b06:	4798      	blx	r3
   80b08:	bd10      	pop	{r4, pc}
   80b0a:	bf00      	nop
   80b0c:	2007ab58 	.word	0x2007ab58
   80b10:	2007ac54 	.word	0x2007ac54
   80b14:	2007ab5c 	.word	0x2007ab5c
   80b18:	0008023f 	.word	0x0008023f
   80b1c:	20070134 	.word	0x20070134
   80b20:	2007ab60 	.word	0x2007ab60

00080b24 <xTaskGenericCreate>:
{
   80b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80b28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   80b2a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   80b2e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
   80b30:	b148      	cbz	r0, 80b46 <xTaskGenericCreate+0x22>
   80b32:	4688      	mov	r8, r1
   80b34:	4615      	mov	r5, r2
   80b36:	469b      	mov	fp, r3
   80b38:	4682      	mov	sl, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80b3a:	2f04      	cmp	r7, #4
   80b3c:	d907      	bls.n	80b4e <xTaskGenericCreate+0x2a>
   80b3e:	4b60      	ldr	r3, [pc, #384]	; (80cc0 <xTaskGenericCreate+0x19c>)
   80b40:	4798      	blx	r3
   80b42:	bf00      	nop
   80b44:	e7fd      	b.n	80b42 <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
   80b46:	4b5e      	ldr	r3, [pc, #376]	; (80cc0 <xTaskGenericCreate+0x19c>)
   80b48:	4798      	blx	r3
   80b4a:	bf00      	nop
   80b4c:	e7fd      	b.n	80b4a <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80b4e:	204c      	movs	r0, #76	; 0x4c
   80b50:	4b5c      	ldr	r3, [pc, #368]	; (80cc4 <xTaskGenericCreate+0x1a0>)
   80b52:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80b54:	4604      	mov	r4, r0
   80b56:	2800      	cmp	r0, #0
   80b58:	d054      	beq.n	80c04 <xTaskGenericCreate+0xe0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80b5a:	2e00      	cmp	r6, #0
   80b5c:	d048      	beq.n	80bf0 <xTaskGenericCreate+0xcc>
   80b5e:	6306      	str	r6, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80b60:	00aa      	lsls	r2, r5, #2
   80b62:	21a5      	movs	r1, #165	; 0xa5
   80b64:	4630      	mov	r0, r6
   80b66:	4b58      	ldr	r3, [pc, #352]	; (80cc8 <xTaskGenericCreate+0x1a4>)
   80b68:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80b6a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80b6e:	3d01      	subs	r5, #1
   80b70:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80b72:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80b76:	f023 0507 	bic.w	r5, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80b7a:	220a      	movs	r2, #10
   80b7c:	4641      	mov	r1, r8
   80b7e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80b82:	4b52      	ldr	r3, [pc, #328]	; (80ccc <xTaskGenericCreate+0x1a8>)
   80b84:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80b86:	2300      	movs	r3, #0
   80b88:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
   80b8c:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
   80b8e:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80b90:	f104 0804 	add.w	r8, r4, #4
   80b94:	4640      	mov	r0, r8
   80b96:	4e4e      	ldr	r6, [pc, #312]	; (80cd0 <xTaskGenericCreate+0x1ac>)
   80b98:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80b9a:	f104 0018 	add.w	r0, r4, #24
   80b9e:	47b0      	blx	r6
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80ba0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80ba2:	f1c7 0305 	rsb	r3, r7, #5
   80ba6:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80ba8:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80baa:	465a      	mov	r2, fp
   80bac:	4651      	mov	r1, sl
   80bae:	4628      	mov	r0, r5
   80bb0:	4b48      	ldr	r3, [pc, #288]	; (80cd4 <xTaskGenericCreate+0x1b0>)
   80bb2:	4798      	blx	r3
   80bb4:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80bb6:	f010 0f07 	tst.w	r0, #7
   80bba:	d127      	bne.n	80c0c <xTaskGenericCreate+0xe8>
		if( ( void * ) pxCreatedTask != NULL )
   80bbc:	f1b9 0f00 	cmp.w	r9, #0
   80bc0:	d001      	beq.n	80bc6 <xTaskGenericCreate+0xa2>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80bc2:	f8c9 4000 	str.w	r4, [r9]
		taskENTER_CRITICAL();
   80bc6:	4b44      	ldr	r3, [pc, #272]	; (80cd8 <xTaskGenericCreate+0x1b4>)
   80bc8:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
   80bca:	4a44      	ldr	r2, [pc, #272]	; (80cdc <xTaskGenericCreate+0x1b8>)
   80bcc:	6813      	ldr	r3, [r2, #0]
   80bce:	3301      	adds	r3, #1
   80bd0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80bd2:	4b43      	ldr	r3, [pc, #268]	; (80ce0 <xTaskGenericCreate+0x1bc>)
   80bd4:	681b      	ldr	r3, [r3, #0]
   80bd6:	b1eb      	cbz	r3, 80c14 <xTaskGenericCreate+0xf0>
				if( xSchedulerRunning == pdFALSE )
   80bd8:	4b42      	ldr	r3, [pc, #264]	; (80ce4 <xTaskGenericCreate+0x1c0>)
   80bda:	681b      	ldr	r3, [r3, #0]
   80bdc:	2b00      	cmp	r3, #0
   80bde:	d140      	bne.n	80c62 <xTaskGenericCreate+0x13e>
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80be0:	4b3f      	ldr	r3, [pc, #252]	; (80ce0 <xTaskGenericCreate+0x1bc>)
   80be2:	681b      	ldr	r3, [r3, #0]
   80be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80be6:	429f      	cmp	r7, r3
						pxCurrentTCB = pxNewTCB;
   80be8:	bf24      	itt	cs
   80bea:	4b3d      	ldrcs	r3, [pc, #244]	; (80ce0 <xTaskGenericCreate+0x1bc>)
   80bec:	601c      	strcs	r4, [r3, #0]
   80bee:	e038      	b.n	80c62 <xTaskGenericCreate+0x13e>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80bf0:	00a8      	lsls	r0, r5, #2
   80bf2:	4b34      	ldr	r3, [pc, #208]	; (80cc4 <xTaskGenericCreate+0x1a0>)
   80bf4:	4798      	blx	r3
   80bf6:	4606      	mov	r6, r0
   80bf8:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
   80bfa:	2800      	cmp	r0, #0
   80bfc:	d1b0      	bne.n	80b60 <xTaskGenericCreate+0x3c>
			vPortFree( pxNewTCB );
   80bfe:	4620      	mov	r0, r4
   80c00:	4b39      	ldr	r3, [pc, #228]	; (80ce8 <xTaskGenericCreate+0x1c4>)
   80c02:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80c04:	f04f 30ff 	mov.w	r0, #4294967295
}
   80c08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80c0c:	4b2c      	ldr	r3, [pc, #176]	; (80cc0 <xTaskGenericCreate+0x19c>)
   80c0e:	4798      	blx	r3
   80c10:	bf00      	nop
   80c12:	e7fd      	b.n	80c10 <xTaskGenericCreate+0xec>
				pxCurrentTCB =  pxNewTCB;
   80c14:	4b32      	ldr	r3, [pc, #200]	; (80ce0 <xTaskGenericCreate+0x1bc>)
   80c16:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80c18:	6813      	ldr	r3, [r2, #0]
   80c1a:	2b01      	cmp	r3, #1
   80c1c:	d121      	bne.n	80c62 <xTaskGenericCreate+0x13e>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80c1e:	4e33      	ldr	r6, [pc, #204]	; (80cec <xTaskGenericCreate+0x1c8>)
   80c20:	4630      	mov	r0, r6
   80c22:	4d33      	ldr	r5, [pc, #204]	; (80cf0 <xTaskGenericCreate+0x1cc>)
   80c24:	47a8      	blx	r5
   80c26:	f106 0014 	add.w	r0, r6, #20
   80c2a:	47a8      	blx	r5
   80c2c:	f106 0028 	add.w	r0, r6, #40	; 0x28
   80c30:	47a8      	blx	r5
   80c32:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   80c36:	47a8      	blx	r5
   80c38:	f106 0050 	add.w	r0, r6, #80	; 0x50
   80c3c:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80c3e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80d24 <xTaskGenericCreate+0x200>
   80c42:	4648      	mov	r0, r9
   80c44:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80c46:	4e2b      	ldr	r6, [pc, #172]	; (80cf4 <xTaskGenericCreate+0x1d0>)
   80c48:	4630      	mov	r0, r6
   80c4a:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80c4c:	482a      	ldr	r0, [pc, #168]	; (80cf8 <xTaskGenericCreate+0x1d4>)
   80c4e:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80c50:	482a      	ldr	r0, [pc, #168]	; (80cfc <xTaskGenericCreate+0x1d8>)
   80c52:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80c54:	482a      	ldr	r0, [pc, #168]	; (80d00 <xTaskGenericCreate+0x1dc>)
   80c56:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   80c58:	4b2a      	ldr	r3, [pc, #168]	; (80d04 <xTaskGenericCreate+0x1e0>)
   80c5a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80c5e:	4b2a      	ldr	r3, [pc, #168]	; (80d08 <xTaskGenericCreate+0x1e4>)
   80c60:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80c62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80c64:	4b29      	ldr	r3, [pc, #164]	; (80d0c <xTaskGenericCreate+0x1e8>)
   80c66:	681b      	ldr	r3, [r3, #0]
   80c68:	4298      	cmp	r0, r3
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80c6a:	bf84      	itt	hi
   80c6c:	4b27      	ldrhi	r3, [pc, #156]	; (80d0c <xTaskGenericCreate+0x1e8>)
   80c6e:	6018      	strhi	r0, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80c70:	4a27      	ldr	r2, [pc, #156]	; (80d10 <xTaskGenericCreate+0x1ec>)
   80c72:	6813      	ldr	r3, [r2, #0]
   80c74:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
   80c76:	3301      	adds	r3, #1
   80c78:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
   80c7a:	4b26      	ldr	r3, [pc, #152]	; (80d14 <xTaskGenericCreate+0x1f0>)
   80c7c:	681b      	ldr	r3, [r3, #0]
   80c7e:	4298      	cmp	r0, r3
   80c80:	bf84      	itt	hi
   80c82:	4b24      	ldrhi	r3, [pc, #144]	; (80d14 <xTaskGenericCreate+0x1f0>)
   80c84:	6018      	strhi	r0, [r3, #0]
   80c86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80c8a:	4641      	mov	r1, r8
   80c8c:	4b17      	ldr	r3, [pc, #92]	; (80cec <xTaskGenericCreate+0x1c8>)
   80c8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80c92:	4b21      	ldr	r3, [pc, #132]	; (80d18 <xTaskGenericCreate+0x1f4>)
   80c94:	4798      	blx	r3
		taskEXIT_CRITICAL();
   80c96:	4b21      	ldr	r3, [pc, #132]	; (80d1c <xTaskGenericCreate+0x1f8>)
   80c98:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   80c9a:	4b12      	ldr	r3, [pc, #72]	; (80ce4 <xTaskGenericCreate+0x1c0>)
   80c9c:	681b      	ldr	r3, [r3, #0]
   80c9e:	b14b      	cbz	r3, 80cb4 <xTaskGenericCreate+0x190>
			if( pxCurrentTCB->uxPriority < uxPriority )
   80ca0:	4b0f      	ldr	r3, [pc, #60]	; (80ce0 <xTaskGenericCreate+0x1bc>)
   80ca2:	681b      	ldr	r3, [r3, #0]
   80ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80ca6:	429f      	cmp	r7, r3
   80ca8:	d907      	bls.n	80cba <xTaskGenericCreate+0x196>
				portYIELD_WITHIN_API();
   80caa:	4b1d      	ldr	r3, [pc, #116]	; (80d20 <xTaskGenericCreate+0x1fc>)
   80cac:	4798      	blx	r3
   80cae:	2001      	movs	r0, #1
   80cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80cb4:	2001      	movs	r0, #1
   80cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80cba:	2001      	movs	r0, #1
	return xReturn;
   80cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80cc0:	00080301 	.word	0x00080301
   80cc4:	00080461 	.word	0x00080461
   80cc8:	00082785 	.word	0x00082785
   80ccc:	00082a1d 	.word	0x00082a1d
   80cd0:	0008021d 	.word	0x0008021d
   80cd4:	000802b5 	.word	0x000802b5
   80cd8:	00080311 	.word	0x00080311
   80cdc:	2007abc8 	.word	0x2007abc8
   80ce0:	2007ab58 	.word	0x2007ab58
   80ce4:	2007ac28 	.word	0x2007ac28
   80ce8:	0008052d 	.word	0x0008052d
   80cec:	2007ab64 	.word	0x2007ab64
   80cf0:	00080207 	.word	0x00080207
   80cf4:	2007abf8 	.word	0x2007abf8
   80cf8:	2007ac14 	.word	0x2007ac14
   80cfc:	2007ac40 	.word	0x2007ac40
   80d00:	2007ac2c 	.word	0x2007ac2c
   80d04:	2007ab5c 	.word	0x2007ab5c
   80d08:	2007ab60 	.word	0x2007ab60
   80d0c:	2007abe0 	.word	0x2007abe0
   80d10:	2007abd4 	.word	0x2007abd4
   80d14:	2007abdc 	.word	0x2007abdc
   80d18:	00080223 	.word	0x00080223
   80d1c:	00080331 	.word	0x00080331
   80d20:	000802f1 	.word	0x000802f1
   80d24:	2007abe4 	.word	0x2007abe4

00080d28 <vTaskStartScheduler>:
{
   80d28:	b510      	push	{r4, lr}
   80d2a:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   80d2c:	2300      	movs	r3, #0
   80d2e:	9303      	str	r3, [sp, #12]
   80d30:	9302      	str	r3, [sp, #8]
   80d32:	9301      	str	r3, [sp, #4]
   80d34:	9300      	str	r3, [sp, #0]
   80d36:	2282      	movs	r2, #130	; 0x82
   80d38:	490d      	ldr	r1, [pc, #52]	; (80d70 <vTaskStartScheduler+0x48>)
   80d3a:	480e      	ldr	r0, [pc, #56]	; (80d74 <vTaskStartScheduler+0x4c>)
   80d3c:	4c0e      	ldr	r4, [pc, #56]	; (80d78 <vTaskStartScheduler+0x50>)
   80d3e:	47a0      	blx	r4
		if( xReturn == pdPASS )
   80d40:	2801      	cmp	r0, #1
   80d42:	d002      	beq.n	80d4a <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
   80d44:	b180      	cbz	r0, 80d68 <vTaskStartScheduler+0x40>
}
   80d46:	b004      	add	sp, #16
   80d48:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   80d4a:	4b0c      	ldr	r3, [pc, #48]	; (80d7c <vTaskStartScheduler+0x54>)
   80d4c:	4798      	blx	r3
	if( xReturn == pdPASS )
   80d4e:	2801      	cmp	r0, #1
   80d50:	d1f8      	bne.n	80d44 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   80d52:	4b0b      	ldr	r3, [pc, #44]	; (80d80 <vTaskStartScheduler+0x58>)
   80d54:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
   80d56:	2201      	movs	r2, #1
   80d58:	4b0a      	ldr	r3, [pc, #40]	; (80d84 <vTaskStartScheduler+0x5c>)
   80d5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   80d5c:	2200      	movs	r2, #0
   80d5e:	4b0a      	ldr	r3, [pc, #40]	; (80d88 <vTaskStartScheduler+0x60>)
   80d60:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   80d62:	4b0a      	ldr	r3, [pc, #40]	; (80d8c <vTaskStartScheduler+0x64>)
   80d64:	4798      	blx	r3
   80d66:	e7ee      	b.n	80d46 <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
   80d68:	4b05      	ldr	r3, [pc, #20]	; (80d80 <vTaskStartScheduler+0x58>)
   80d6a:	4798      	blx	r3
   80d6c:	bf00      	nop
   80d6e:	e7fd      	b.n	80d6c <vTaskStartScheduler+0x44>
   80d70:	00085504 	.word	0x00085504
   80d74:	00081075 	.word	0x00081075
   80d78:	00080b25 	.word	0x00080b25
   80d7c:	00081521 	.word	0x00081521
   80d80:	00080301 	.word	0x00080301
   80d84:	2007ac28 	.word	0x2007ac28
   80d88:	2007ac54 	.word	0x2007ac54
   80d8c:	000803d1 	.word	0x000803d1

00080d90 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   80d90:	4a02      	ldr	r2, [pc, #8]	; (80d9c <vTaskSuspendAll+0xc>)
   80d92:	6813      	ldr	r3, [r2, #0]
   80d94:	3301      	adds	r3, #1
   80d96:	6013      	str	r3, [r2, #0]
   80d98:	4770      	bx	lr
   80d9a:	bf00      	nop
   80d9c:	2007abd0 	.word	0x2007abd0

00080da0 <xTaskGetTickCount>:
{
   80da0:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
   80da2:	4b04      	ldr	r3, [pc, #16]	; (80db4 <xTaskGetTickCount+0x14>)
   80da4:	4798      	blx	r3
		xTicks = xTickCount;
   80da6:	4b04      	ldr	r3, [pc, #16]	; (80db8 <xTaskGetTickCount+0x18>)
   80da8:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
   80daa:	4b04      	ldr	r3, [pc, #16]	; (80dbc <xTaskGetTickCount+0x1c>)
   80dac:	4798      	blx	r3
}
   80dae:	4620      	mov	r0, r4
   80db0:	bd10      	pop	{r4, pc}
   80db2:	bf00      	nop
   80db4:	00080311 	.word	0x00080311
   80db8:	2007ac54 	.word	0x2007ac54
   80dbc:	00080331 	.word	0x00080331

00080dc0 <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80dc0:	4b3d      	ldr	r3, [pc, #244]	; (80eb8 <vTaskIncrementTick+0xf8>)
   80dc2:	681b      	ldr	r3, [r3, #0]
   80dc4:	2b00      	cmp	r3, #0
   80dc6:	d16f      	bne.n	80ea8 <vTaskIncrementTick+0xe8>
{
   80dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		++xTickCount;
   80dcc:	4b3b      	ldr	r3, [pc, #236]	; (80ebc <vTaskIncrementTick+0xfc>)
   80dce:	681a      	ldr	r2, [r3, #0]
   80dd0:	3201      	adds	r2, #1
   80dd2:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80dd4:	681b      	ldr	r3, [r3, #0]
   80dd6:	b9ab      	cbnz	r3, 80e04 <vTaskIncrementTick+0x44>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80dd8:	4b39      	ldr	r3, [pc, #228]	; (80ec0 <vTaskIncrementTick+0x100>)
   80dda:	681b      	ldr	r3, [r3, #0]
   80ddc:	681b      	ldr	r3, [r3, #0]
   80dde:	2b00      	cmp	r3, #0
   80de0:	d128      	bne.n	80e34 <vTaskIncrementTick+0x74>
			pxTemp = pxDelayedTaskList;
   80de2:	4b37      	ldr	r3, [pc, #220]	; (80ec0 <vTaskIncrementTick+0x100>)
   80de4:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80de6:	4a37      	ldr	r2, [pc, #220]	; (80ec4 <vTaskIncrementTick+0x104>)
   80de8:	6810      	ldr	r0, [r2, #0]
   80dea:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80dec:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80dee:	4936      	ldr	r1, [pc, #216]	; (80ec8 <vTaskIncrementTick+0x108>)
   80df0:	680a      	ldr	r2, [r1, #0]
   80df2:	3201      	adds	r2, #1
   80df4:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80df6:	681b      	ldr	r3, [r3, #0]
   80df8:	681b      	ldr	r3, [r3, #0]
   80dfa:	b9fb      	cbnz	r3, 80e3c <vTaskIncrementTick+0x7c>
				xNextTaskUnblockTime = portMAX_DELAY;
   80dfc:	f04f 32ff 	mov.w	r2, #4294967295
   80e00:	4b32      	ldr	r3, [pc, #200]	; (80ecc <vTaskIncrementTick+0x10c>)
   80e02:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
   80e04:	4b2d      	ldr	r3, [pc, #180]	; (80ebc <vTaskIncrementTick+0xfc>)
   80e06:	681a      	ldr	r2, [r3, #0]
   80e08:	4b30      	ldr	r3, [pc, #192]	; (80ecc <vTaskIncrementTick+0x10c>)
   80e0a:	681b      	ldr	r3, [r3, #0]
   80e0c:	429a      	cmp	r2, r3
   80e0e:	d350      	bcc.n	80eb2 <vTaskIncrementTick+0xf2>
   80e10:	4b2b      	ldr	r3, [pc, #172]	; (80ec0 <vTaskIncrementTick+0x100>)
   80e12:	681b      	ldr	r3, [r3, #0]
   80e14:	681b      	ldr	r3, [r3, #0]
   80e16:	b1cb      	cbz	r3, 80e4c <vTaskIncrementTick+0x8c>
   80e18:	4b29      	ldr	r3, [pc, #164]	; (80ec0 <vTaskIncrementTick+0x100>)
   80e1a:	681b      	ldr	r3, [r3, #0]
   80e1c:	68db      	ldr	r3, [r3, #12]
   80e1e:	68dc      	ldr	r4, [r3, #12]
   80e20:	6863      	ldr	r3, [r4, #4]
   80e22:	4a26      	ldr	r2, [pc, #152]	; (80ebc <vTaskIncrementTick+0xfc>)
   80e24:	6812      	ldr	r2, [r2, #0]
   80e26:	4293      	cmp	r3, r2
   80e28:	d816      	bhi.n	80e58 <vTaskIncrementTick+0x98>
   80e2a:	4e29      	ldr	r6, [pc, #164]	; (80ed0 <vTaskIncrementTick+0x110>)
   80e2c:	4f29      	ldr	r7, [pc, #164]	; (80ed4 <vTaskIncrementTick+0x114>)
   80e2e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80ee4 <vTaskIncrementTick+0x124>
   80e32:	e02f      	b.n	80e94 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80e34:	4b28      	ldr	r3, [pc, #160]	; (80ed8 <vTaskIncrementTick+0x118>)
   80e36:	4798      	blx	r3
   80e38:	bf00      	nop
   80e3a:	e7fd      	b.n	80e38 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80e3c:	4b20      	ldr	r3, [pc, #128]	; (80ec0 <vTaskIncrementTick+0x100>)
   80e3e:	681b      	ldr	r3, [r3, #0]
   80e40:	68db      	ldr	r3, [r3, #12]
   80e42:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80e44:	685a      	ldr	r2, [r3, #4]
   80e46:	4b21      	ldr	r3, [pc, #132]	; (80ecc <vTaskIncrementTick+0x10c>)
   80e48:	601a      	str	r2, [r3, #0]
   80e4a:	e7db      	b.n	80e04 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   80e4c:	f04f 32ff 	mov.w	r2, #4294967295
   80e50:	4b1e      	ldr	r3, [pc, #120]	; (80ecc <vTaskIncrementTick+0x10c>)
   80e52:	601a      	str	r2, [r3, #0]
   80e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e58:	4a1c      	ldr	r2, [pc, #112]	; (80ecc <vTaskIncrementTick+0x10c>)
   80e5a:	6013      	str	r3, [r2, #0]
   80e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80e60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80e62:	683b      	ldr	r3, [r7, #0]
   80e64:	4298      	cmp	r0, r3
   80e66:	bf88      	it	hi
   80e68:	6038      	strhi	r0, [r7, #0]
   80e6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80e6e:	4629      	mov	r1, r5
   80e70:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80e74:	4b19      	ldr	r3, [pc, #100]	; (80edc <vTaskIncrementTick+0x11c>)
   80e76:	4798      	blx	r3
   80e78:	4b11      	ldr	r3, [pc, #68]	; (80ec0 <vTaskIncrementTick+0x100>)
   80e7a:	681b      	ldr	r3, [r3, #0]
   80e7c:	681b      	ldr	r3, [r3, #0]
   80e7e:	2b00      	cmp	r3, #0
   80e80:	d0e4      	beq.n	80e4c <vTaskIncrementTick+0x8c>
   80e82:	4b0f      	ldr	r3, [pc, #60]	; (80ec0 <vTaskIncrementTick+0x100>)
   80e84:	681b      	ldr	r3, [r3, #0]
   80e86:	68db      	ldr	r3, [r3, #12]
   80e88:	68dc      	ldr	r4, [r3, #12]
   80e8a:	6863      	ldr	r3, [r4, #4]
   80e8c:	4a0b      	ldr	r2, [pc, #44]	; (80ebc <vTaskIncrementTick+0xfc>)
   80e8e:	6812      	ldr	r2, [r2, #0]
   80e90:	4293      	cmp	r3, r2
   80e92:	d8e1      	bhi.n	80e58 <vTaskIncrementTick+0x98>
   80e94:	1d25      	adds	r5, r4, #4
   80e96:	4628      	mov	r0, r5
   80e98:	47b0      	blx	r6
   80e9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80e9c:	2b00      	cmp	r3, #0
   80e9e:	d0df      	beq.n	80e60 <vTaskIncrementTick+0xa0>
   80ea0:	f104 0018 	add.w	r0, r4, #24
   80ea4:	47b0      	blx	r6
   80ea6:	e7db      	b.n	80e60 <vTaskIncrementTick+0xa0>
		++uxMissedTicks;
   80ea8:	4a0d      	ldr	r2, [pc, #52]	; (80ee0 <vTaskIncrementTick+0x120>)
   80eaa:	6813      	ldr	r3, [r2, #0]
   80eac:	3301      	adds	r3, #1
   80eae:	6013      	str	r3, [r2, #0]
}
   80eb0:	4770      	bx	lr
   80eb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80eb6:	bf00      	nop
   80eb8:	2007abd0 	.word	0x2007abd0
   80ebc:	2007ac54 	.word	0x2007ac54
   80ec0:	2007ab5c 	.word	0x2007ab5c
   80ec4:	2007ab60 	.word	0x2007ab60
   80ec8:	2007ac10 	.word	0x2007ac10
   80ecc:	20070134 	.word	0x20070134
   80ed0:	00080279 	.word	0x00080279
   80ed4:	2007abdc 	.word	0x2007abdc
   80ed8:	00080301 	.word	0x00080301
   80edc:	00080223 	.word	0x00080223
   80ee0:	2007abcc 	.word	0x2007abcc
   80ee4:	2007ab64 	.word	0x2007ab64

00080ee8 <xTaskResumeAll>:
{
   80ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
   80eec:	4b2f      	ldr	r3, [pc, #188]	; (80fac <xTaskResumeAll+0xc4>)
   80eee:	681b      	ldr	r3, [r3, #0]
   80ef0:	b91b      	cbnz	r3, 80efa <xTaskResumeAll+0x12>
   80ef2:	4b2f      	ldr	r3, [pc, #188]	; (80fb0 <xTaskResumeAll+0xc8>)
   80ef4:	4798      	blx	r3
   80ef6:	bf00      	nop
   80ef8:	e7fd      	b.n	80ef6 <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
   80efa:	4b2e      	ldr	r3, [pc, #184]	; (80fb4 <xTaskResumeAll+0xcc>)
   80efc:	4798      	blx	r3
		--uxSchedulerSuspended;
   80efe:	4b2b      	ldr	r3, [pc, #172]	; (80fac <xTaskResumeAll+0xc4>)
   80f00:	681a      	ldr	r2, [r3, #0]
   80f02:	3a01      	subs	r2, #1
   80f04:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80f06:	681b      	ldr	r3, [r3, #0]
   80f08:	2b00      	cmp	r3, #0
   80f0a:	d14d      	bne.n	80fa8 <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   80f0c:	4b2a      	ldr	r3, [pc, #168]	; (80fb8 <xTaskResumeAll+0xd0>)
   80f0e:	681b      	ldr	r3, [r3, #0]
   80f10:	b12b      	cbz	r3, 80f1e <xTaskResumeAll+0x36>
   80f12:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80f14:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80fe4 <xTaskResumeAll+0xfc>
					uxListRemove( &( pxTCB->xEventListItem ) );
   80f18:	4f28      	ldr	r7, [pc, #160]	; (80fbc <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyQueue( pxTCB );
   80f1a:	4e29      	ldr	r6, [pc, #164]	; (80fc0 <xTaskResumeAll+0xd8>)
   80f1c:	e023      	b.n	80f66 <xTaskResumeAll+0x7e>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80f1e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   80f20:	4b28      	ldr	r3, [pc, #160]	; (80fc4 <xTaskResumeAll+0xdc>)
   80f22:	4798      	blx	r3
}
   80f24:	4620      	mov	r0, r4
   80f26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   80f2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   80f2e:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   80f30:	f105 0018 	add.w	r0, r5, #24
   80f34:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   80f36:	f105 0904 	add.w	r9, r5, #4
   80f3a:	4648      	mov	r0, r9
   80f3c:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   80f3e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   80f40:	6833      	ldr	r3, [r6, #0]
   80f42:	4298      	cmp	r0, r3
   80f44:	bf88      	it	hi
   80f46:	6030      	strhi	r0, [r6, #0]
   80f48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80f4c:	4649      	mov	r1, r9
   80f4e:	4b1e      	ldr	r3, [pc, #120]	; (80fc8 <xTaskResumeAll+0xe0>)
   80f50:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80f54:	4b1d      	ldr	r3, [pc, #116]	; (80fcc <xTaskResumeAll+0xe4>)
   80f56:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   80f58:	4b1d      	ldr	r3, [pc, #116]	; (80fd0 <xTaskResumeAll+0xe8>)
   80f5a:	681b      	ldr	r3, [r3, #0]
   80f5c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   80f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
   80f60:	429a      	cmp	r2, r3
   80f62:	bf28      	it	cs
   80f64:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   80f66:	f8d8 3000 	ldr.w	r3, [r8]
   80f6a:	2b00      	cmp	r3, #0
   80f6c:	d1dd      	bne.n	80f2a <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80f6e:	4b19      	ldr	r3, [pc, #100]	; (80fd4 <xTaskResumeAll+0xec>)
   80f70:	681b      	ldr	r3, [r3, #0]
   80f72:	b193      	cbz	r3, 80f9a <xTaskResumeAll+0xb2>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80f74:	4b17      	ldr	r3, [pc, #92]	; (80fd4 <xTaskResumeAll+0xec>)
   80f76:	681b      	ldr	r3, [r3, #0]
   80f78:	b143      	cbz	r3, 80f8c <xTaskResumeAll+0xa4>
						vTaskIncrementTick();
   80f7a:	4d17      	ldr	r5, [pc, #92]	; (80fd8 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   80f7c:	4c15      	ldr	r4, [pc, #84]	; (80fd4 <xTaskResumeAll+0xec>)
						vTaskIncrementTick();
   80f7e:	47a8      	blx	r5
						--uxMissedTicks;
   80f80:	6823      	ldr	r3, [r4, #0]
   80f82:	3b01      	subs	r3, #1
   80f84:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   80f86:	6823      	ldr	r3, [r4, #0]
   80f88:	2b00      	cmp	r3, #0
   80f8a:	d1f8      	bne.n	80f7e <xTaskResumeAll+0x96>
					xMissedYield = pdFALSE;
   80f8c:	2200      	movs	r2, #0
   80f8e:	4b13      	ldr	r3, [pc, #76]	; (80fdc <xTaskResumeAll+0xf4>)
   80f90:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   80f92:	4b13      	ldr	r3, [pc, #76]	; (80fe0 <xTaskResumeAll+0xf8>)
   80f94:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
   80f96:	2401      	movs	r4, #1
   80f98:	e7c2      	b.n	80f20 <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   80f9a:	2c01      	cmp	r4, #1
   80f9c:	d0f6      	beq.n	80f8c <xTaskResumeAll+0xa4>
   80f9e:	4b0f      	ldr	r3, [pc, #60]	; (80fdc <xTaskResumeAll+0xf4>)
   80fa0:	681b      	ldr	r3, [r3, #0]
   80fa2:	2b01      	cmp	r3, #1
   80fa4:	d1bc      	bne.n	80f20 <xTaskResumeAll+0x38>
   80fa6:	e7f1      	b.n	80f8c <xTaskResumeAll+0xa4>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   80fa8:	2400      	movs	r4, #0
   80faa:	e7b9      	b.n	80f20 <xTaskResumeAll+0x38>
   80fac:	2007abd0 	.word	0x2007abd0
   80fb0:	00080301 	.word	0x00080301
   80fb4:	00080311 	.word	0x00080311
   80fb8:	2007abc8 	.word	0x2007abc8
   80fbc:	00080279 	.word	0x00080279
   80fc0:	2007abdc 	.word	0x2007abdc
   80fc4:	00080331 	.word	0x00080331
   80fc8:	2007ab64 	.word	0x2007ab64
   80fcc:	00080223 	.word	0x00080223
   80fd0:	2007ab58 	.word	0x2007ab58
   80fd4:	2007abcc 	.word	0x2007abcc
   80fd8:	00080dc1 	.word	0x00080dc1
   80fdc:	2007ac0c 	.word	0x2007ac0c
   80fe0:	000802f1 	.word	0x000802f1
   80fe4:	2007ac14 	.word	0x2007ac14

00080fe8 <vTaskDelayUntil>:
	{
   80fe8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   80fea:	b130      	cbz	r0, 80ffa <vTaskDelayUntil+0x12>
   80fec:	460c      	mov	r4, r1
   80fee:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   80ff0:	b939      	cbnz	r1, 81002 <vTaskDelayUntil+0x1a>
   80ff2:	4b18      	ldr	r3, [pc, #96]	; (81054 <vTaskDelayUntil+0x6c>)
   80ff4:	4798      	blx	r3
   80ff6:	bf00      	nop
   80ff8:	e7fd      	b.n	80ff6 <vTaskDelayUntil+0xe>
		configASSERT( pxPreviousWakeTime );
   80ffa:	4b16      	ldr	r3, [pc, #88]	; (81054 <vTaskDelayUntil+0x6c>)
   80ffc:	4798      	blx	r3
   80ffe:	bf00      	nop
   81000:	e7fd      	b.n	80ffe <vTaskDelayUntil+0x16>
		vTaskSuspendAll();
   81002:	4b15      	ldr	r3, [pc, #84]	; (81058 <vTaskDelayUntil+0x70>)
   81004:	4798      	blx	r3
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81006:	682b      	ldr	r3, [r5, #0]
   81008:	441c      	add	r4, r3
			if( xTickCount < *pxPreviousWakeTime )
   8100a:	4a14      	ldr	r2, [pc, #80]	; (8105c <vTaskDelayUntil+0x74>)
   8100c:	6812      	ldr	r2, [r2, #0]
   8100e:	4293      	cmp	r3, r2
   81010:	d90a      	bls.n	81028 <vTaskDelayUntil+0x40>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81012:	42a3      	cmp	r3, r4
   81014:	d90e      	bls.n	81034 <vTaskDelayUntil+0x4c>
   81016:	4b11      	ldr	r3, [pc, #68]	; (8105c <vTaskDelayUntil+0x74>)
   81018:	681b      	ldr	r3, [r3, #0]
			*pxPreviousWakeTime = xTimeToWake;
   8101a:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   8101c:	429c      	cmp	r4, r3
   8101e:	d80f      	bhi.n	81040 <vTaskDelayUntil+0x58>
		xAlreadyYielded = xTaskResumeAll();
   81020:	4b0f      	ldr	r3, [pc, #60]	; (81060 <vTaskDelayUntil+0x78>)
   81022:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   81024:	b140      	cbz	r0, 81038 <vTaskDelayUntil+0x50>
   81026:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81028:	42a3      	cmp	r3, r4
   8102a:	d808      	bhi.n	8103e <vTaskDelayUntil+0x56>
   8102c:	4b0b      	ldr	r3, [pc, #44]	; (8105c <vTaskDelayUntil+0x74>)
   8102e:	681b      	ldr	r3, [r3, #0]
   81030:	429c      	cmp	r4, r3
   81032:	d804      	bhi.n	8103e <vTaskDelayUntil+0x56>
			*pxPreviousWakeTime = xTimeToWake;
   81034:	602c      	str	r4, [r5, #0]
   81036:	e7f3      	b.n	81020 <vTaskDelayUntil+0x38>
			portYIELD_WITHIN_API();
   81038:	4b0a      	ldr	r3, [pc, #40]	; (81064 <vTaskDelayUntil+0x7c>)
   8103a:	4798      	blx	r3
	}
   8103c:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
   8103e:	602c      	str	r4, [r5, #0]
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81040:	4b09      	ldr	r3, [pc, #36]	; (81068 <vTaskDelayUntil+0x80>)
   81042:	6818      	ldr	r0, [r3, #0]
   81044:	3004      	adds	r0, #4
   81046:	4b09      	ldr	r3, [pc, #36]	; (8106c <vTaskDelayUntil+0x84>)
   81048:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8104a:	4620      	mov	r0, r4
   8104c:	4b08      	ldr	r3, [pc, #32]	; (81070 <vTaskDelayUntil+0x88>)
   8104e:	4798      	blx	r3
   81050:	e7e6      	b.n	81020 <vTaskDelayUntil+0x38>
   81052:	bf00      	nop
   81054:	00080301 	.word	0x00080301
   81058:	00080d91 	.word	0x00080d91
   8105c:	2007ac54 	.word	0x2007ac54
   81060:	00080ee9 	.word	0x00080ee9
   81064:	000802f1 	.word	0x000802f1
   81068:	2007ab58 	.word	0x2007ab58
   8106c:	00080279 	.word	0x00080279
   81070:	00080acd 	.word	0x00080acd

00081074 <prvIdleTask>:
{
   81074:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81076:	4d16      	ldr	r5, [pc, #88]	; (810d0 <prvIdleTask+0x5c>)
			vTaskSuspendAll();
   81078:	f8df 8078 	ldr.w	r8, [pc, #120]	; 810f4 <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   8107c:	4e15      	ldr	r6, [pc, #84]	; (810d4 <prvIdleTask+0x60>)
   8107e:	e024      	b.n	810ca <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81080:	4b15      	ldr	r3, [pc, #84]	; (810d8 <prvIdleTask+0x64>)
   81082:	681b      	ldr	r3, [r3, #0]
   81084:	2b01      	cmp	r3, #1
   81086:	d81e      	bhi.n	810c6 <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81088:	682b      	ldr	r3, [r5, #0]
   8108a:	2b00      	cmp	r3, #0
   8108c:	d0f8      	beq.n	81080 <prvIdleTask+0xc>
			vTaskSuspendAll();
   8108e:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81090:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   81092:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
   81094:	2c00      	cmp	r4, #0
   81096:	d0f7      	beq.n	81088 <prvIdleTask+0x14>
				taskENTER_CRITICAL();
   81098:	4b10      	ldr	r3, [pc, #64]	; (810dc <prvIdleTask+0x68>)
   8109a:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   8109c:	68f3      	ldr	r3, [r6, #12]
   8109e:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   810a0:	1d20      	adds	r0, r4, #4
   810a2:	4b0f      	ldr	r3, [pc, #60]	; (810e0 <prvIdleTask+0x6c>)
   810a4:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   810a6:	4a0f      	ldr	r2, [pc, #60]	; (810e4 <prvIdleTask+0x70>)
   810a8:	6813      	ldr	r3, [r2, #0]
   810aa:	3b01      	subs	r3, #1
   810ac:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   810ae:	682b      	ldr	r3, [r5, #0]
   810b0:	3b01      	subs	r3, #1
   810b2:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
   810b4:	4b0c      	ldr	r3, [pc, #48]	; (810e8 <prvIdleTask+0x74>)
   810b6:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   810b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   810ba:	f8df 903c 	ldr.w	r9, [pc, #60]	; 810f8 <prvIdleTask+0x84>
   810be:	47c8      	blx	r9
		vPortFree( pxTCB );
   810c0:	4620      	mov	r0, r4
   810c2:	47c8      	blx	r9
   810c4:	e7e0      	b.n	81088 <prvIdleTask+0x14>
				taskYIELD();
   810c6:	4b09      	ldr	r3, [pc, #36]	; (810ec <prvIdleTask+0x78>)
   810c8:	4798      	blx	r3
			xTaskResumeAll();
   810ca:	4f09      	ldr	r7, [pc, #36]	; (810f0 <prvIdleTask+0x7c>)
   810cc:	e7dc      	b.n	81088 <prvIdleTask+0x14>
   810ce:	bf00      	nop
   810d0:	2007abd8 	.word	0x2007abd8
   810d4:	2007ac40 	.word	0x2007ac40
   810d8:	2007ab64 	.word	0x2007ab64
   810dc:	00080311 	.word	0x00080311
   810e0:	00080279 	.word	0x00080279
   810e4:	2007abc8 	.word	0x2007abc8
   810e8:	00080331 	.word	0x00080331
   810ec:	000802f1 	.word	0x000802f1
   810f0:	00080ee9 	.word	0x00080ee9
   810f4:	00080d91 	.word	0x00080d91
   810f8:	0008052d 	.word	0x0008052d

000810fc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   810fc:	4b21      	ldr	r3, [pc, #132]	; (81184 <vTaskSwitchContext+0x88>)
   810fe:	681b      	ldr	r3, [r3, #0]
   81100:	b9eb      	cbnz	r3, 8113e <vTaskSwitchContext+0x42>
{
   81102:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81104:	4b20      	ldr	r3, [pc, #128]	; (81188 <vTaskSwitchContext+0x8c>)
   81106:	681b      	ldr	r3, [r3, #0]
   81108:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8110c:	009b      	lsls	r3, r3, #2
   8110e:	4a1f      	ldr	r2, [pc, #124]	; (8118c <vTaskSwitchContext+0x90>)
   81110:	58d3      	ldr	r3, [r2, r3]
   81112:	b9c3      	cbnz	r3, 81146 <vTaskSwitchContext+0x4a>
   81114:	4b1c      	ldr	r3, [pc, #112]	; (81188 <vTaskSwitchContext+0x8c>)
   81116:	681b      	ldr	r3, [r3, #0]
   81118:	b16b      	cbz	r3, 81136 <vTaskSwitchContext+0x3a>
   8111a:	4a1b      	ldr	r2, [pc, #108]	; (81188 <vTaskSwitchContext+0x8c>)
   8111c:	491b      	ldr	r1, [pc, #108]	; (8118c <vTaskSwitchContext+0x90>)
   8111e:	6813      	ldr	r3, [r2, #0]
   81120:	3b01      	subs	r3, #1
   81122:	6013      	str	r3, [r2, #0]
   81124:	6813      	ldr	r3, [r2, #0]
   81126:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8112a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8112e:	b953      	cbnz	r3, 81146 <vTaskSwitchContext+0x4a>
   81130:	6813      	ldr	r3, [r2, #0]
   81132:	2b00      	cmp	r3, #0
   81134:	d1f3      	bne.n	8111e <vTaskSwitchContext+0x22>
   81136:	4b16      	ldr	r3, [pc, #88]	; (81190 <vTaskSwitchContext+0x94>)
   81138:	4798      	blx	r3
   8113a:	bf00      	nop
   8113c:	e7fd      	b.n	8113a <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   8113e:	2201      	movs	r2, #1
   81140:	4b14      	ldr	r3, [pc, #80]	; (81194 <vTaskSwitchContext+0x98>)
   81142:	601a      	str	r2, [r3, #0]
   81144:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81146:	4b10      	ldr	r3, [pc, #64]	; (81188 <vTaskSwitchContext+0x8c>)
   81148:	681b      	ldr	r3, [r3, #0]
   8114a:	4a10      	ldr	r2, [pc, #64]	; (8118c <vTaskSwitchContext+0x90>)
   8114c:	0099      	lsls	r1, r3, #2
   8114e:	18c8      	adds	r0, r1, r3
   81150:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81154:	6844      	ldr	r4, [r0, #4]
   81156:	6864      	ldr	r4, [r4, #4]
   81158:	6044      	str	r4, [r0, #4]
   8115a:	4419      	add	r1, r3
   8115c:	4602      	mov	r2, r0
   8115e:	3208      	adds	r2, #8
   81160:	4294      	cmp	r4, r2
   81162:	d009      	beq.n	81178 <vTaskSwitchContext+0x7c>
   81164:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81168:	4a08      	ldr	r2, [pc, #32]	; (8118c <vTaskSwitchContext+0x90>)
   8116a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8116e:	685b      	ldr	r3, [r3, #4]
   81170:	68da      	ldr	r2, [r3, #12]
   81172:	4b09      	ldr	r3, [pc, #36]	; (81198 <vTaskSwitchContext+0x9c>)
   81174:	601a      	str	r2, [r3, #0]
   81176:	bd10      	pop	{r4, pc}
   81178:	6860      	ldr	r0, [r4, #4]
   8117a:	4a04      	ldr	r2, [pc, #16]	; (8118c <vTaskSwitchContext+0x90>)
   8117c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81180:	6050      	str	r0, [r2, #4]
   81182:	e7ef      	b.n	81164 <vTaskSwitchContext+0x68>
   81184:	2007abd0 	.word	0x2007abd0
   81188:	2007abdc 	.word	0x2007abdc
   8118c:	2007ab64 	.word	0x2007ab64
   81190:	00080301 	.word	0x00080301
   81194:	2007ac0c 	.word	0x2007ac0c
   81198:	2007ab58 	.word	0x2007ab58

0008119c <vTaskPlaceOnEventList>:
{
   8119c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
   8119e:	b190      	cbz	r0, 811c6 <vTaskPlaceOnEventList+0x2a>
   811a0:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   811a2:	4d0e      	ldr	r5, [pc, #56]	; (811dc <vTaskPlaceOnEventList+0x40>)
   811a4:	6829      	ldr	r1, [r5, #0]
   811a6:	3118      	adds	r1, #24
   811a8:	4b0d      	ldr	r3, [pc, #52]	; (811e0 <vTaskPlaceOnEventList+0x44>)
   811aa:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   811ac:	6828      	ldr	r0, [r5, #0]
   811ae:	3004      	adds	r0, #4
   811b0:	4b0c      	ldr	r3, [pc, #48]	; (811e4 <vTaskPlaceOnEventList+0x48>)
   811b2:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
   811b4:	f1b4 3fff 	cmp.w	r4, #4294967295
   811b8:	d009      	beq.n	811ce <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
   811ba:	4b0b      	ldr	r3, [pc, #44]	; (811e8 <vTaskPlaceOnEventList+0x4c>)
   811bc:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   811be:	4420      	add	r0, r4
   811c0:	4b0a      	ldr	r3, [pc, #40]	; (811ec <vTaskPlaceOnEventList+0x50>)
   811c2:	4798      	blx	r3
   811c4:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   811c6:	4b0a      	ldr	r3, [pc, #40]	; (811f0 <vTaskPlaceOnEventList+0x54>)
   811c8:	4798      	blx	r3
   811ca:	bf00      	nop
   811cc:	e7fd      	b.n	811ca <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   811ce:	6829      	ldr	r1, [r5, #0]
   811d0:	3104      	adds	r1, #4
   811d2:	4808      	ldr	r0, [pc, #32]	; (811f4 <vTaskPlaceOnEventList+0x58>)
   811d4:	4b08      	ldr	r3, [pc, #32]	; (811f8 <vTaskPlaceOnEventList+0x5c>)
   811d6:	4798      	blx	r3
   811d8:	bd38      	pop	{r3, r4, r5, pc}
   811da:	bf00      	nop
   811dc:	2007ab58 	.word	0x2007ab58
   811e0:	0008023f 	.word	0x0008023f
   811e4:	00080279 	.word	0x00080279
   811e8:	2007ac54 	.word	0x2007ac54
   811ec:	00080acd 	.word	0x00080acd
   811f0:	00080301 	.word	0x00080301
   811f4:	2007ac2c 	.word	0x2007ac2c
   811f8:	00080223 	.word	0x00080223

000811fc <vTaskPlaceOnEventListRestricted>:
	{
   811fc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   811fe:	b178      	cbz	r0, 81220 <vTaskPlaceOnEventListRestricted+0x24>
   81200:	460d      	mov	r5, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81202:	4c09      	ldr	r4, [pc, #36]	; (81228 <vTaskPlaceOnEventListRestricted+0x2c>)
   81204:	6821      	ldr	r1, [r4, #0]
   81206:	3118      	adds	r1, #24
   81208:	4b08      	ldr	r3, [pc, #32]	; (8122c <vTaskPlaceOnEventListRestricted+0x30>)
   8120a:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8120c:	6820      	ldr	r0, [r4, #0]
   8120e:	3004      	adds	r0, #4
   81210:	4b07      	ldr	r3, [pc, #28]	; (81230 <vTaskPlaceOnEventListRestricted+0x34>)
   81212:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
   81214:	4b07      	ldr	r3, [pc, #28]	; (81234 <vTaskPlaceOnEventListRestricted+0x38>)
   81216:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81218:	4428      	add	r0, r5
   8121a:	4b07      	ldr	r3, [pc, #28]	; (81238 <vTaskPlaceOnEventListRestricted+0x3c>)
   8121c:	4798      	blx	r3
   8121e:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
   81220:	4b06      	ldr	r3, [pc, #24]	; (8123c <vTaskPlaceOnEventListRestricted+0x40>)
   81222:	4798      	blx	r3
   81224:	bf00      	nop
   81226:	e7fd      	b.n	81224 <vTaskPlaceOnEventListRestricted+0x28>
   81228:	2007ab58 	.word	0x2007ab58
   8122c:	00080223 	.word	0x00080223
   81230:	00080279 	.word	0x00080279
   81234:	2007ac54 	.word	0x2007ac54
   81238:	00080acd 	.word	0x00080acd
   8123c:	00080301 	.word	0x00080301

00081240 <xTaskRemoveFromEventList>:
{
   81240:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81242:	68c3      	ldr	r3, [r0, #12]
   81244:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81246:	b31c      	cbz	r4, 81290 <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81248:	f104 0518 	add.w	r5, r4, #24
   8124c:	4628      	mov	r0, r5
   8124e:	4b15      	ldr	r3, [pc, #84]	; (812a4 <xTaskRemoveFromEventList+0x64>)
   81250:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81252:	4b15      	ldr	r3, [pc, #84]	; (812a8 <xTaskRemoveFromEventList+0x68>)
   81254:	681b      	ldr	r3, [r3, #0]
   81256:	b9fb      	cbnz	r3, 81298 <xTaskRemoveFromEventList+0x58>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81258:	1d25      	adds	r5, r4, #4
   8125a:	4628      	mov	r0, r5
   8125c:	4b11      	ldr	r3, [pc, #68]	; (812a4 <xTaskRemoveFromEventList+0x64>)
   8125e:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81260:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81262:	4b12      	ldr	r3, [pc, #72]	; (812ac <xTaskRemoveFromEventList+0x6c>)
   81264:	681b      	ldr	r3, [r3, #0]
   81266:	4298      	cmp	r0, r3
   81268:	bf84      	itt	hi
   8126a:	4b10      	ldrhi	r3, [pc, #64]	; (812ac <xTaskRemoveFromEventList+0x6c>)
   8126c:	6018      	strhi	r0, [r3, #0]
   8126e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81272:	4629      	mov	r1, r5
   81274:	4b0e      	ldr	r3, [pc, #56]	; (812b0 <xTaskRemoveFromEventList+0x70>)
   81276:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8127a:	4b0e      	ldr	r3, [pc, #56]	; (812b4 <xTaskRemoveFromEventList+0x74>)
   8127c:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8127e:	4b0e      	ldr	r3, [pc, #56]	; (812b8 <xTaskRemoveFromEventList+0x78>)
   81280:	681b      	ldr	r3, [r3, #0]
   81282:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   81286:	4298      	cmp	r0, r3
   81288:	bf34      	ite	cc
   8128a:	2000      	movcc	r0, #0
   8128c:	2001      	movcs	r0, #1
   8128e:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   81290:	4b0a      	ldr	r3, [pc, #40]	; (812bc <xTaskRemoveFromEventList+0x7c>)
   81292:	4798      	blx	r3
   81294:	bf00      	nop
   81296:	e7fd      	b.n	81294 <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81298:	4629      	mov	r1, r5
   8129a:	4809      	ldr	r0, [pc, #36]	; (812c0 <xTaskRemoveFromEventList+0x80>)
   8129c:	4b05      	ldr	r3, [pc, #20]	; (812b4 <xTaskRemoveFromEventList+0x74>)
   8129e:	4798      	blx	r3
   812a0:	e7ed      	b.n	8127e <xTaskRemoveFromEventList+0x3e>
   812a2:	bf00      	nop
   812a4:	00080279 	.word	0x00080279
   812a8:	2007abd0 	.word	0x2007abd0
   812ac:	2007abdc 	.word	0x2007abdc
   812b0:	2007ab64 	.word	0x2007ab64
   812b4:	00080223 	.word	0x00080223
   812b8:	2007ab58 	.word	0x2007ab58
   812bc:	00080301 	.word	0x00080301
   812c0:	2007ac14 	.word	0x2007ac14

000812c4 <vTaskSetTimeOutState>:
{
   812c4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   812c6:	b130      	cbz	r0, 812d6 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   812c8:	4a05      	ldr	r2, [pc, #20]	; (812e0 <vTaskSetTimeOutState+0x1c>)
   812ca:	6812      	ldr	r2, [r2, #0]
   812cc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   812ce:	4a05      	ldr	r2, [pc, #20]	; (812e4 <vTaskSetTimeOutState+0x20>)
   812d0:	6812      	ldr	r2, [r2, #0]
   812d2:	6042      	str	r2, [r0, #4]
   812d4:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
   812d6:	4b04      	ldr	r3, [pc, #16]	; (812e8 <vTaskSetTimeOutState+0x24>)
   812d8:	4798      	blx	r3
   812da:	bf00      	nop
   812dc:	e7fd      	b.n	812da <vTaskSetTimeOutState+0x16>
   812de:	bf00      	nop
   812e0:	2007ac10 	.word	0x2007ac10
   812e4:	2007ac54 	.word	0x2007ac54
   812e8:	00080301 	.word	0x00080301

000812ec <xTaskCheckForTimeOut>:
{
   812ec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
   812ee:	b1e8      	cbz	r0, 8132c <xTaskCheckForTimeOut+0x40>
   812f0:	460d      	mov	r5, r1
   812f2:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   812f4:	b1f1      	cbz	r1, 81334 <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
   812f6:	4b18      	ldr	r3, [pc, #96]	; (81358 <xTaskCheckForTimeOut+0x6c>)
   812f8:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
   812fa:	682b      	ldr	r3, [r5, #0]
   812fc:	f1b3 3fff 	cmp.w	r3, #4294967295
   81300:	d026      	beq.n	81350 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81302:	4a16      	ldr	r2, [pc, #88]	; (8135c <xTaskCheckForTimeOut+0x70>)
   81304:	6812      	ldr	r2, [r2, #0]
   81306:	6821      	ldr	r1, [r4, #0]
   81308:	4291      	cmp	r1, r2
   8130a:	d004      	beq.n	81316 <xTaskCheckForTimeOut+0x2a>
   8130c:	4a14      	ldr	r2, [pc, #80]	; (81360 <xTaskCheckForTimeOut+0x74>)
   8130e:	6812      	ldr	r2, [r2, #0]
   81310:	6861      	ldr	r1, [r4, #4]
   81312:	4291      	cmp	r1, r2
   81314:	d91e      	bls.n	81354 <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81316:	4a12      	ldr	r2, [pc, #72]	; (81360 <xTaskCheckForTimeOut+0x74>)
   81318:	6812      	ldr	r2, [r2, #0]
   8131a:	6861      	ldr	r1, [r4, #4]
   8131c:	1a52      	subs	r2, r2, r1
   8131e:	4293      	cmp	r3, r2
   81320:	d80c      	bhi.n	8133c <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
   81322:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81324:	4b0f      	ldr	r3, [pc, #60]	; (81364 <xTaskCheckForTimeOut+0x78>)
   81326:	4798      	blx	r3
}
   81328:	4620      	mov	r0, r4
   8132a:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
   8132c:	4b0e      	ldr	r3, [pc, #56]	; (81368 <xTaskCheckForTimeOut+0x7c>)
   8132e:	4798      	blx	r3
   81330:	bf00      	nop
   81332:	e7fd      	b.n	81330 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   81334:	4b0c      	ldr	r3, [pc, #48]	; (81368 <xTaskCheckForTimeOut+0x7c>)
   81336:	4798      	blx	r3
   81338:	bf00      	nop
   8133a:	e7fd      	b.n	81338 <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   8133c:	4a08      	ldr	r2, [pc, #32]	; (81360 <xTaskCheckForTimeOut+0x74>)
   8133e:	6812      	ldr	r2, [r2, #0]
   81340:	1a52      	subs	r2, r2, r1
   81342:	1a9b      	subs	r3, r3, r2
   81344:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81346:	4620      	mov	r0, r4
   81348:	4b08      	ldr	r3, [pc, #32]	; (8136c <xTaskCheckForTimeOut+0x80>)
   8134a:	4798      	blx	r3
			xReturn = pdFALSE;
   8134c:	2400      	movs	r4, #0
   8134e:	e7e9      	b.n	81324 <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
   81350:	2400      	movs	r4, #0
   81352:	e7e7      	b.n	81324 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   81354:	2401      	movs	r4, #1
   81356:	e7e5      	b.n	81324 <xTaskCheckForTimeOut+0x38>
   81358:	00080311 	.word	0x00080311
   8135c:	2007ac10 	.word	0x2007ac10
   81360:	2007ac54 	.word	0x2007ac54
   81364:	00080331 	.word	0x00080331
   81368:	00080301 	.word	0x00080301
   8136c:	000812c5 	.word	0x000812c5

00081370 <vTaskMissedYield>:
	xMissedYield = pdTRUE;
   81370:	2201      	movs	r2, #1
   81372:	4b01      	ldr	r3, [pc, #4]	; (81378 <vTaskMissedYield+0x8>)
   81374:	601a      	str	r2, [r3, #0]
   81376:	4770      	bx	lr
   81378:	2007ac0c 	.word	0x2007ac0c

0008137c <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   8137c:	4b01      	ldr	r3, [pc, #4]	; (81384 <xTaskGetCurrentTaskHandle+0x8>)
   8137e:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81380:	4770      	bx	lr
   81382:	bf00      	nop
   81384:	2007ab58 	.word	0x2007ab58

00081388 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81388:	4b05      	ldr	r3, [pc, #20]	; (813a0 <xTaskGetSchedulerState+0x18>)
   8138a:	681b      	ldr	r3, [r3, #0]
   8138c:	b133      	cbz	r3, 8139c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8138e:	4b05      	ldr	r3, [pc, #20]	; (813a4 <xTaskGetSchedulerState+0x1c>)
   81390:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81392:	2b00      	cmp	r3, #0
   81394:	bf0c      	ite	eq
   81396:	2001      	moveq	r0, #1
   81398:	2002      	movne	r0, #2
   8139a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   8139c:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
   8139e:	4770      	bx	lr
   813a0:	2007ac28 	.word	0x2007ac28
   813a4:	2007abd0 	.word	0x2007abd0

000813a8 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   813a8:	2800      	cmp	r0, #0
   813aa:	d031      	beq.n	81410 <vTaskPriorityInherit+0x68>
	{
   813ac:	b538      	push	{r3, r4, r5, lr}
   813ae:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   813b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   813b2:	4918      	ldr	r1, [pc, #96]	; (81414 <vTaskPriorityInherit+0x6c>)
   813b4:	6809      	ldr	r1, [r1, #0]
   813b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   813b8:	428b      	cmp	r3, r1
   813ba:	d211      	bcs.n	813e0 <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   813bc:	4915      	ldr	r1, [pc, #84]	; (81414 <vTaskPriorityInherit+0x6c>)
   813be:	6809      	ldr	r1, [r1, #0]
   813c0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   813c2:	f1c1 0105 	rsb	r1, r1, #5
   813c6:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   813c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   813cc:	4912      	ldr	r1, [pc, #72]	; (81418 <vTaskPriorityInherit+0x70>)
   813ce:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   813d2:	6941      	ldr	r1, [r0, #20]
   813d4:	4299      	cmp	r1, r3
   813d6:	d004      	beq.n	813e2 <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   813d8:	4b0e      	ldr	r3, [pc, #56]	; (81414 <vTaskPriorityInherit+0x6c>)
   813da:	681b      	ldr	r3, [r3, #0]
   813dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   813de:	62c3      	str	r3, [r0, #44]	; 0x2c
   813e0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   813e2:	1d04      	adds	r4, r0, #4
   813e4:	4620      	mov	r0, r4
   813e6:	4b0d      	ldr	r3, [pc, #52]	; (8141c <vTaskPriorityInherit+0x74>)
   813e8:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   813ea:	4b0a      	ldr	r3, [pc, #40]	; (81414 <vTaskPriorityInherit+0x6c>)
   813ec:	681b      	ldr	r3, [r3, #0]
   813ee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   813f0:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   813f2:	4b0b      	ldr	r3, [pc, #44]	; (81420 <vTaskPriorityInherit+0x78>)
   813f4:	681b      	ldr	r3, [r3, #0]
   813f6:	4298      	cmp	r0, r3
   813f8:	bf84      	itt	hi
   813fa:	4b09      	ldrhi	r3, [pc, #36]	; (81420 <vTaskPriorityInherit+0x78>)
   813fc:	6018      	strhi	r0, [r3, #0]
   813fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81402:	4621      	mov	r1, r4
   81404:	4b04      	ldr	r3, [pc, #16]	; (81418 <vTaskPriorityInherit+0x70>)
   81406:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8140a:	4b06      	ldr	r3, [pc, #24]	; (81424 <vTaskPriorityInherit+0x7c>)
   8140c:	4798      	blx	r3
   8140e:	bd38      	pop	{r3, r4, r5, pc}
   81410:	4770      	bx	lr
   81412:	bf00      	nop
   81414:	2007ab58 	.word	0x2007ab58
   81418:	2007ab64 	.word	0x2007ab64
   8141c:	00080279 	.word	0x00080279
   81420:	2007abdc 	.word	0x2007abdc
   81424:	00080223 	.word	0x00080223

00081428 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81428:	b1e8      	cbz	r0, 81466 <vTaskPriorityDisinherit+0x3e>
	{
   8142a:	b538      	push	{r3, r4, r5, lr}
   8142c:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   8142e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81430:	6c82      	ldr	r2, [r0, #72]	; 0x48
   81432:	4291      	cmp	r1, r2
   81434:	d016      	beq.n	81464 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81436:	1d05      	adds	r5, r0, #4
   81438:	4628      	mov	r0, r5
   8143a:	4b0b      	ldr	r3, [pc, #44]	; (81468 <vTaskPriorityDisinherit+0x40>)
   8143c:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8143e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81440:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81442:	f1c0 0305 	rsb	r3, r0, #5
   81446:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81448:	4b08      	ldr	r3, [pc, #32]	; (8146c <vTaskPriorityDisinherit+0x44>)
   8144a:	681b      	ldr	r3, [r3, #0]
   8144c:	4298      	cmp	r0, r3
   8144e:	bf84      	itt	hi
   81450:	4b06      	ldrhi	r3, [pc, #24]	; (8146c <vTaskPriorityDisinherit+0x44>)
   81452:	6018      	strhi	r0, [r3, #0]
   81454:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81458:	4629      	mov	r1, r5
   8145a:	4b05      	ldr	r3, [pc, #20]	; (81470 <vTaskPriorityDisinherit+0x48>)
   8145c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81460:	4b04      	ldr	r3, [pc, #16]	; (81474 <vTaskPriorityDisinherit+0x4c>)
   81462:	4798      	blx	r3
   81464:	bd38      	pop	{r3, r4, r5, pc}
   81466:	4770      	bx	lr
   81468:	00080279 	.word	0x00080279
   8146c:	2007abdc 	.word	0x2007abdc
   81470:	2007ab64 	.word	0x2007ab64
   81474:	00080223 	.word	0x00080223

00081478 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81478:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8147a:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8147c:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   8147e:	4291      	cmp	r1, r2
   81480:	d80c      	bhi.n	8149c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81482:	1ad2      	subs	r2, r2, r3
   81484:	6983      	ldr	r3, [r0, #24]
   81486:	429a      	cmp	r2, r3
   81488:	d301      	bcc.n	8148e <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   8148a:	2001      	movs	r0, #1
   8148c:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8148e:	1d01      	adds	r1, r0, #4
   81490:	4b09      	ldr	r3, [pc, #36]	; (814b8 <prvInsertTimerInActiveList+0x40>)
   81492:	6818      	ldr	r0, [r3, #0]
   81494:	4b09      	ldr	r3, [pc, #36]	; (814bc <prvInsertTimerInActiveList+0x44>)
   81496:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81498:	2000      	movs	r0, #0
   8149a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   8149c:	429a      	cmp	r2, r3
   8149e:	d201      	bcs.n	814a4 <prvInsertTimerInActiveList+0x2c>
   814a0:	4299      	cmp	r1, r3
   814a2:	d206      	bcs.n	814b2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   814a4:	1d01      	adds	r1, r0, #4
   814a6:	4b06      	ldr	r3, [pc, #24]	; (814c0 <prvInsertTimerInActiveList+0x48>)
   814a8:	6818      	ldr	r0, [r3, #0]
   814aa:	4b04      	ldr	r3, [pc, #16]	; (814bc <prvInsertTimerInActiveList+0x44>)
   814ac:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   814ae:	2000      	movs	r0, #0
   814b0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   814b2:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   814b4:	bd08      	pop	{r3, pc}
   814b6:	bf00      	nop
   814b8:	2007ac5c 	.word	0x2007ac5c
   814bc:	0008023f 	.word	0x0008023f
   814c0:	2007ac58 	.word	0x2007ac58

000814c4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   814c4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   814c6:	4b0d      	ldr	r3, [pc, #52]	; (814fc <prvCheckForValidListAndQueue+0x38>)
   814c8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   814ca:	4b0d      	ldr	r3, [pc, #52]	; (81500 <prvCheckForValidListAndQueue+0x3c>)
   814cc:	681b      	ldr	r3, [r3, #0]
   814ce:	b113      	cbz	r3, 814d6 <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
   814d0:	4b0c      	ldr	r3, [pc, #48]	; (81504 <prvCheckForValidListAndQueue+0x40>)
   814d2:	4798      	blx	r3
   814d4:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   814d6:	4d0c      	ldr	r5, [pc, #48]	; (81508 <prvCheckForValidListAndQueue+0x44>)
   814d8:	4628      	mov	r0, r5
   814da:	4e0c      	ldr	r6, [pc, #48]	; (8150c <prvCheckForValidListAndQueue+0x48>)
   814dc:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   814de:	4c0c      	ldr	r4, [pc, #48]	; (81510 <prvCheckForValidListAndQueue+0x4c>)
   814e0:	4620      	mov	r0, r4
   814e2:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   814e4:	4b0b      	ldr	r3, [pc, #44]	; (81514 <prvCheckForValidListAndQueue+0x50>)
   814e6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   814e8:	4b0b      	ldr	r3, [pc, #44]	; (81518 <prvCheckForValidListAndQueue+0x54>)
   814ea:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   814ec:	2200      	movs	r2, #0
   814ee:	210c      	movs	r1, #12
   814f0:	2005      	movs	r0, #5
   814f2:	4b0a      	ldr	r3, [pc, #40]	; (8151c <prvCheckForValidListAndQueue+0x58>)
   814f4:	4798      	blx	r3
   814f6:	4b02      	ldr	r3, [pc, #8]	; (81500 <prvCheckForValidListAndQueue+0x3c>)
   814f8:	6018      	str	r0, [r3, #0]
   814fa:	e7e9      	b.n	814d0 <prvCheckForValidListAndQueue+0xc>
   814fc:	00080311 	.word	0x00080311
   81500:	2007ac8c 	.word	0x2007ac8c
   81504:	00080331 	.word	0x00080331
   81508:	2007ac60 	.word	0x2007ac60
   8150c:	00080207 	.word	0x00080207
   81510:	2007ac74 	.word	0x2007ac74
   81514:	2007ac58 	.word	0x2007ac58
   81518:	2007ac5c 	.word	0x2007ac5c
   8151c:	00080709 	.word	0x00080709

00081520 <xTimerCreateTimerTask>:
{
   81520:	b510      	push	{r4, lr}
   81522:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
   81524:	4b0b      	ldr	r3, [pc, #44]	; (81554 <xTimerCreateTimerTask+0x34>)
   81526:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81528:	4b0b      	ldr	r3, [pc, #44]	; (81558 <xTimerCreateTimerTask+0x38>)
   8152a:	681b      	ldr	r3, [r3, #0]
   8152c:	b173      	cbz	r3, 8154c <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8152e:	2300      	movs	r3, #0
   81530:	9303      	str	r3, [sp, #12]
   81532:	9302      	str	r3, [sp, #8]
   81534:	9301      	str	r3, [sp, #4]
   81536:	2204      	movs	r2, #4
   81538:	9200      	str	r2, [sp, #0]
   8153a:	f44f 7282 	mov.w	r2, #260	; 0x104
   8153e:	4907      	ldr	r1, [pc, #28]	; (8155c <xTimerCreateTimerTask+0x3c>)
   81540:	4807      	ldr	r0, [pc, #28]	; (81560 <xTimerCreateTimerTask+0x40>)
   81542:	4c08      	ldr	r4, [pc, #32]	; (81564 <xTimerCreateTimerTask+0x44>)
   81544:	47a0      	blx	r4
	configASSERT( xReturn );
   81546:	b108      	cbz	r0, 8154c <xTimerCreateTimerTask+0x2c>
}
   81548:	b004      	add	sp, #16
   8154a:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   8154c:	4b06      	ldr	r3, [pc, #24]	; (81568 <xTimerCreateTimerTask+0x48>)
   8154e:	4798      	blx	r3
   81550:	bf00      	nop
   81552:	e7fd      	b.n	81550 <xTimerCreateTimerTask+0x30>
   81554:	000814c5 	.word	0x000814c5
   81558:	2007ac8c 	.word	0x2007ac8c
   8155c:	0008550c 	.word	0x0008550c
   81560:	00081671 	.word	0x00081671
   81564:	00080b25 	.word	0x00080b25
   81568:	00080301 	.word	0x00080301

0008156c <xTimerGenericCommand>:
{
   8156c:	b530      	push	{r4, r5, lr}
   8156e:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   81570:	4c0f      	ldr	r4, [pc, #60]	; (815b0 <xTimerGenericCommand+0x44>)
   81572:	6825      	ldr	r5, [r4, #0]
   81574:	b1d5      	cbz	r5, 815ac <xTimerGenericCommand+0x40>
   81576:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
   81578:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   8157a:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   8157c:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
   8157e:	b13b      	cbz	r3, 81590 <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81580:	2300      	movs	r3, #0
   81582:	4622      	mov	r2, r4
   81584:	a901      	add	r1, sp, #4
   81586:	4628      	mov	r0, r5
   81588:	4c0a      	ldr	r4, [pc, #40]	; (815b4 <xTimerGenericCommand+0x48>)
   8158a:	47a0      	blx	r4
}
   8158c:	b005      	add	sp, #20
   8158e:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81590:	4b09      	ldr	r3, [pc, #36]	; (815b8 <xTimerGenericCommand+0x4c>)
   81592:	4798      	blx	r3
   81594:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81596:	f04f 0300 	mov.w	r3, #0
   8159a:	bf0c      	ite	eq
   8159c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   8159e:	461a      	movne	r2, r3
   815a0:	a901      	add	r1, sp, #4
   815a2:	4803      	ldr	r0, [pc, #12]	; (815b0 <xTimerGenericCommand+0x44>)
   815a4:	6800      	ldr	r0, [r0, #0]
   815a6:	4c05      	ldr	r4, [pc, #20]	; (815bc <xTimerGenericCommand+0x50>)
   815a8:	47a0      	blx	r4
   815aa:	e7ef      	b.n	8158c <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
   815ac:	2000      	movs	r0, #0
	return xReturn;
   815ae:	e7ed      	b.n	8158c <xTimerGenericCommand+0x20>
   815b0:	2007ac8c 	.word	0x2007ac8c
   815b4:	00080885 	.word	0x00080885
   815b8:	00081389 	.word	0x00081389
   815bc:	0008075d 	.word	0x0008075d

000815c0 <prvSampleTimeNow>:
{
   815c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   815c4:	b082      	sub	sp, #8
   815c6:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
   815c8:	4b21      	ldr	r3, [pc, #132]	; (81650 <prvSampleTimeNow+0x90>)
   815ca:	4798      	blx	r3
   815cc:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   815ce:	4b21      	ldr	r3, [pc, #132]	; (81654 <prvSampleTimeNow+0x94>)
   815d0:	681b      	ldr	r3, [r3, #0]
   815d2:	4298      	cmp	r0, r3
   815d4:	d315      	bcc.n	81602 <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
   815d6:	2300      	movs	r3, #0
   815d8:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
   815dc:	4b1d      	ldr	r3, [pc, #116]	; (81654 <prvSampleTimeNow+0x94>)
   815de:	f8c3 8000 	str.w	r8, [r3]
}
   815e2:	4640      	mov	r0, r8
   815e4:	b002      	add	sp, #8
   815e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   815ea:	2100      	movs	r1, #0
   815ec:	9100      	str	r1, [sp, #0]
   815ee:	460b      	mov	r3, r1
   815f0:	4652      	mov	r2, sl
   815f2:	4620      	mov	r0, r4
   815f4:	4c18      	ldr	r4, [pc, #96]	; (81658 <prvSampleTimeNow+0x98>)
   815f6:	47a0      	blx	r4
				configASSERT( xResult );
   815f8:	b928      	cbnz	r0, 81606 <prvSampleTimeNow+0x46>
   815fa:	4b18      	ldr	r3, [pc, #96]	; (8165c <prvSampleTimeNow+0x9c>)
   815fc:	4798      	blx	r3
   815fe:	bf00      	nop
   81600:	e7fd      	b.n	815fe <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81602:	4e17      	ldr	r6, [pc, #92]	; (81660 <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81604:	4f17      	ldr	r7, [pc, #92]	; (81664 <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81606:	6833      	ldr	r3, [r6, #0]
   81608:	681a      	ldr	r2, [r3, #0]
   8160a:	b1c2      	cbz	r2, 8163e <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8160c:	68da      	ldr	r2, [r3, #12]
   8160e:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81612:	68db      	ldr	r3, [r3, #12]
   81614:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81616:	1d25      	adds	r5, r4, #4
   81618:	4628      	mov	r0, r5
   8161a:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8161c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8161e:	4620      	mov	r0, r4
   81620:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81622:	69e3      	ldr	r3, [r4, #28]
   81624:	2b01      	cmp	r3, #1
   81626:	d1ee      	bne.n	81606 <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81628:	69a3      	ldr	r3, [r4, #24]
   8162a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   8162c:	459a      	cmp	sl, r3
   8162e:	d2dc      	bcs.n	815ea <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81630:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81632:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81634:	4629      	mov	r1, r5
   81636:	6830      	ldr	r0, [r6, #0]
   81638:	4b0b      	ldr	r3, [pc, #44]	; (81668 <prvSampleTimeNow+0xa8>)
   8163a:	4798      	blx	r3
   8163c:	e7e3      	b.n	81606 <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
   8163e:	4a0b      	ldr	r2, [pc, #44]	; (8166c <prvSampleTimeNow+0xac>)
   81640:	6810      	ldr	r0, [r2, #0]
   81642:	4907      	ldr	r1, [pc, #28]	; (81660 <prvSampleTimeNow+0xa0>)
   81644:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81646:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81648:	2301      	movs	r3, #1
   8164a:	f8c9 3000 	str.w	r3, [r9]
   8164e:	e7c5      	b.n	815dc <prvSampleTimeNow+0x1c>
   81650:	00080da1 	.word	0x00080da1
   81654:	2007ac88 	.word	0x2007ac88
   81658:	0008156d 	.word	0x0008156d
   8165c:	00080301 	.word	0x00080301
   81660:	2007ac58 	.word	0x2007ac58
   81664:	00080279 	.word	0x00080279
   81668:	0008023f 	.word	0x0008023f
   8166c:	2007ac5c 	.word	0x2007ac5c

00081670 <prvTimerTask>:
{
   81670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81674:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81676:	f8df 8168 	ldr.w	r8, [pc, #360]	; 817e0 <prvTimerTask+0x170>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   8167a:	4b4d      	ldr	r3, [pc, #308]	; (817b0 <prvTimerTask+0x140>)
   8167c:	681b      	ldr	r3, [r3, #0]
   8167e:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81680:	2a00      	cmp	r2, #0
   81682:	f000 8089 	beq.w	81798 <prvTimerTask+0x128>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81686:	68db      	ldr	r3, [r3, #12]
   81688:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
   8168a:	4b4a      	ldr	r3, [pc, #296]	; (817b4 <prvTimerTask+0x144>)
   8168c:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8168e:	a803      	add	r0, sp, #12
   81690:	4b49      	ldr	r3, [pc, #292]	; (817b8 <prvTimerTask+0x148>)
   81692:	4798      	blx	r3
   81694:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81696:	9b03      	ldr	r3, [sp, #12]
   81698:	2b00      	cmp	r3, #0
   8169a:	f040 8086 	bne.w	817aa <prvTimerTask+0x13a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   8169e:	42a8      	cmp	r0, r5
   816a0:	d20f      	bcs.n	816c2 <prvTimerTask+0x52>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   816a2:	1ba9      	subs	r1, r5, r6
   816a4:	4b45      	ldr	r3, [pc, #276]	; (817bc <prvTimerTask+0x14c>)
   816a6:	6818      	ldr	r0, [r3, #0]
   816a8:	4b45      	ldr	r3, [pc, #276]	; (817c0 <prvTimerTask+0x150>)
   816aa:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   816ac:	4b45      	ldr	r3, [pc, #276]	; (817c4 <prvTimerTask+0x154>)
   816ae:	4798      	blx	r3
   816b0:	b908      	cbnz	r0, 816b6 <prvTimerTask+0x46>
					portYIELD_WITHIN_API();
   816b2:	4b45      	ldr	r3, [pc, #276]	; (817c8 <prvTimerTask+0x158>)
   816b4:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   816b6:	a802      	add	r0, sp, #8
   816b8:	4b3f      	ldr	r3, [pc, #252]	; (817b8 <prvTimerTask+0x148>)
   816ba:	4798      	blx	r3
   816bc:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   816be:	4e3f      	ldr	r6, [pc, #252]	; (817bc <prvTimerTask+0x14c>)
   816c0:	e036      	b.n	81730 <prvTimerTask+0xc0>
				xTaskResumeAll();
   816c2:	4b40      	ldr	r3, [pc, #256]	; (817c4 <prvTimerTask+0x154>)
   816c4:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   816c6:	4b3a      	ldr	r3, [pc, #232]	; (817b0 <prvTimerTask+0x140>)
   816c8:	681b      	ldr	r3, [r3, #0]
   816ca:	68db      	ldr	r3, [r3, #12]
   816cc:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   816ce:	1d20      	adds	r0, r4, #4
   816d0:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   816d2:	69e3      	ldr	r3, [r4, #28]
   816d4:	2b01      	cmp	r3, #1
   816d6:	d114      	bne.n	81702 <prvTimerTask+0x92>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   816d8:	69a1      	ldr	r1, [r4, #24]
   816da:	462b      	mov	r3, r5
   816dc:	4632      	mov	r2, r6
   816de:	4429      	add	r1, r5
   816e0:	4620      	mov	r0, r4
   816e2:	4e3a      	ldr	r6, [pc, #232]	; (817cc <prvTimerTask+0x15c>)
   816e4:	47b0      	blx	r6
   816e6:	2801      	cmp	r0, #1
   816e8:	d10b      	bne.n	81702 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   816ea:	2100      	movs	r1, #0
   816ec:	9100      	str	r1, [sp, #0]
   816ee:	460b      	mov	r3, r1
   816f0:	462a      	mov	r2, r5
   816f2:	4620      	mov	r0, r4
   816f4:	4d36      	ldr	r5, [pc, #216]	; (817d0 <prvTimerTask+0x160>)
   816f6:	47a8      	blx	r5
			configASSERT( xResult );
   816f8:	b918      	cbnz	r0, 81702 <prvTimerTask+0x92>
   816fa:	4b36      	ldr	r3, [pc, #216]	; (817d4 <prvTimerTask+0x164>)
   816fc:	4798      	blx	r3
   816fe:	bf00      	nop
   81700:	e7fd      	b.n	816fe <prvTimerTask+0x8e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81702:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81704:	4620      	mov	r0, r4
   81706:	4798      	blx	r3
   81708:	e7d5      	b.n	816b6 <prvTimerTask+0x46>
		xNextExpireTime = ( portTickType ) 0U;
   8170a:	2500      	movs	r5, #0
   8170c:	e7c9      	b.n	816a2 <prvTimerTask+0x32>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8170e:	9904      	ldr	r1, [sp, #16]
   81710:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81712:	b131      	cbz	r1, 81722 <prvTimerTask+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81714:	463b      	mov	r3, r7
   81716:	463a      	mov	r2, r7
   81718:	4439      	add	r1, r7
   8171a:	4620      	mov	r0, r4
   8171c:	4c2b      	ldr	r4, [pc, #172]	; (817cc <prvTimerTask+0x15c>)
   8171e:	47a0      	blx	r4
   81720:	e006      	b.n	81730 <prvTimerTask+0xc0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81722:	4b2c      	ldr	r3, [pc, #176]	; (817d4 <prvTimerTask+0x164>)
   81724:	4798      	blx	r3
   81726:	bf00      	nop
   81728:	e7fd      	b.n	81726 <prvTimerTask+0xb6>
				vPortFree( pxTimer );
   8172a:	4620      	mov	r0, r4
   8172c:	4b2a      	ldr	r3, [pc, #168]	; (817d8 <prvTimerTask+0x168>)
   8172e:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81730:	4d2a      	ldr	r5, [pc, #168]	; (817dc <prvTimerTask+0x16c>)
   81732:	2300      	movs	r3, #0
   81734:	461a      	mov	r2, r3
   81736:	a903      	add	r1, sp, #12
   81738:	6830      	ldr	r0, [r6, #0]
   8173a:	47a8      	blx	r5
   8173c:	2800      	cmp	r0, #0
   8173e:	d09c      	beq.n	8167a <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
   81740:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
   81742:	b11c      	cbz	r4, 8174c <prvTimerTask+0xdc>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81744:	6963      	ldr	r3, [r4, #20]
   81746:	b10b      	cbz	r3, 8174c <prvTimerTask+0xdc>
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81748:	1d20      	adds	r0, r4, #4
   8174a:	47c0      	blx	r8
		switch( xMessage.xMessageID )
   8174c:	9b03      	ldr	r3, [sp, #12]
   8174e:	2b02      	cmp	r3, #2
   81750:	d0dd      	beq.n	8170e <prvTimerTask+0x9e>
   81752:	2b03      	cmp	r3, #3
   81754:	d0e9      	beq.n	8172a <prvTimerTask+0xba>
   81756:	2b00      	cmp	r3, #0
   81758:	d1eb      	bne.n	81732 <prvTimerTask+0xc2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   8175a:	9904      	ldr	r1, [sp, #16]
   8175c:	69a0      	ldr	r0, [r4, #24]
   8175e:	460b      	mov	r3, r1
   81760:	463a      	mov	r2, r7
   81762:	4401      	add	r1, r0
   81764:	4620      	mov	r0, r4
   81766:	4d19      	ldr	r5, [pc, #100]	; (817cc <prvTimerTask+0x15c>)
   81768:	47a8      	blx	r5
   8176a:	2801      	cmp	r0, #1
   8176c:	d1e0      	bne.n	81730 <prvTimerTask+0xc0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8176e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81770:	4620      	mov	r0, r4
   81772:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81774:	69e3      	ldr	r3, [r4, #28]
   81776:	2b01      	cmp	r3, #1
   81778:	d1da      	bne.n	81730 <prvTimerTask+0xc0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8177a:	69a2      	ldr	r2, [r4, #24]
   8177c:	2100      	movs	r1, #0
   8177e:	9100      	str	r1, [sp, #0]
   81780:	460b      	mov	r3, r1
   81782:	9804      	ldr	r0, [sp, #16]
   81784:	4402      	add	r2, r0
   81786:	4620      	mov	r0, r4
   81788:	4c11      	ldr	r4, [pc, #68]	; (817d0 <prvTimerTask+0x160>)
   8178a:	47a0      	blx	r4
						configASSERT( xResult );
   8178c:	2800      	cmp	r0, #0
   8178e:	d1cf      	bne.n	81730 <prvTimerTask+0xc0>
   81790:	4b10      	ldr	r3, [pc, #64]	; (817d4 <prvTimerTask+0x164>)
   81792:	4798      	blx	r3
   81794:	bf00      	nop
   81796:	e7fd      	b.n	81794 <prvTimerTask+0x124>
	vTaskSuspendAll();
   81798:	4b06      	ldr	r3, [pc, #24]	; (817b4 <prvTimerTask+0x144>)
   8179a:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8179c:	a803      	add	r0, sp, #12
   8179e:	4b06      	ldr	r3, [pc, #24]	; (817b8 <prvTimerTask+0x148>)
   817a0:	4798      	blx	r3
   817a2:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   817a4:	9b03      	ldr	r3, [sp, #12]
   817a6:	2b00      	cmp	r3, #0
   817a8:	d0af      	beq.n	8170a <prvTimerTask+0x9a>
			xTaskResumeAll();
   817aa:	4b06      	ldr	r3, [pc, #24]	; (817c4 <prvTimerTask+0x154>)
   817ac:	4798      	blx	r3
   817ae:	e782      	b.n	816b6 <prvTimerTask+0x46>
   817b0:	2007ac58 	.word	0x2007ac58
   817b4:	00080d91 	.word	0x00080d91
   817b8:	000815c1 	.word	0x000815c1
   817bc:	2007ac8c 	.word	0x2007ac8c
   817c0:	00080a7d 	.word	0x00080a7d
   817c4:	00080ee9 	.word	0x00080ee9
   817c8:	000802f1 	.word	0x000802f1
   817cc:	00081479 	.word	0x00081479
   817d0:	0008156d 	.word	0x0008156d
   817d4:	00080301 	.word	0x00080301
   817d8:	0008052d 	.word	0x0008052d
   817dc:	00080915 	.word	0x00080915
   817e0:	00080279 	.word	0x00080279

000817e4 <pio_interrupt>:
int get_counter(void) {
	return counter;
}

void pio_interrupt(void) {
	counter++;
   817e4:	4a02      	ldr	r2, [pc, #8]	; (817f0 <pio_interrupt+0xc>)
   817e6:	6813      	ldr	r3, [r2, #0]
   817e8:	3301      	adds	r3, #1
   817ea:	6013      	str	r3, [r2, #0]
   817ec:	4770      	bx	lr
   817ee:	bf00      	nop
   817f0:	2007ac90 	.word	0x2007ac90

000817f4 <encoder_init_pin_interrupt>:

/* 
* Enable interrupt to be triggered on high edge on any input pin
*/

void encoder_init_pin_interrupt(void) {
   817f4:	b570      	push	{r4, r5, r6, lr}
   817f6:	b082      	sub	sp, #8
	/* Enable Clock for PIOB - needed for sampling falling edge */
	pmc_enable_periph_clk(ID_PIOB);
   817f8:	200c      	movs	r0, #12
   817fa:	4b12      	ldr	r3, [pc, #72]	; (81844 <encoder_init_pin_interrupt+0x50>)
   817fc:	4798      	blx	r3
	/* Set specific pin to use as input */
	pio_set_input(PIOB, PIO_PB26, PIO_PULLUP);
   817fe:	4c12      	ldr	r4, [pc, #72]	; (81848 <encoder_init_pin_interrupt+0x54>)
   81800:	2201      	movs	r2, #1
   81802:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   81806:	4620      	mov	r0, r4
   81808:	4b10      	ldr	r3, [pc, #64]	; (8184c <encoder_init_pin_interrupt+0x58>)
   8180a:	4798      	blx	r3

	/* Enable Glitch/Debouncing filter */
	PIOB->PIO_IFER = PIO_PB26;
   8180c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
   81810:	6225      	str	r5, [r4, #32]

	/* Select Debouncing filter */
	PIOB->PIO_DIFSR = PIO_PB26;
   81812:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84

	/* Set Debouncing clock divider */
	PIOB->PIO_SCDR = 0x4FF;
   81816:	f240 43ff 	movw	r3, #1279	; 0x4ff
   8181a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

	/* Add an interrupt callback of our own choice and trigger on rising edge */
	pio_handler_set(PIOB, ID_PIOB, PIO_PB26, PIO_IT_RISE_EDGE, pio_interrupt);
   8181e:	4b0c      	ldr	r3, [pc, #48]	; (81850 <encoder_init_pin_interrupt+0x5c>)
   81820:	9300      	str	r3, [sp, #0]
   81822:	2370      	movs	r3, #112	; 0x70
   81824:	462a      	mov	r2, r5
   81826:	210c      	movs	r1, #12
   81828:	4620      	mov	r0, r4
   8182a:	4e0a      	ldr	r6, [pc, #40]	; (81854 <encoder_init_pin_interrupt+0x60>)
   8182c:	47b0      	blx	r6

	/* Enable Interrupt Handling in NVIC and in PIO */
	pio_enable_interrupt(PIOB, PIO_PB26);
   8182e:	4629      	mov	r1, r5
   81830:	4620      	mov	r0, r4
   81832:	4b09      	ldr	r3, [pc, #36]	; (81858 <encoder_init_pin_interrupt+0x64>)
   81834:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81836:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8183a:	4b08      	ldr	r3, [pc, #32]	; (8185c <encoder_init_pin_interrupt+0x68>)
   8183c:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(PIOB_IRQn);
}
   8183e:	b002      	add	sp, #8
   81840:	bd70      	pop	{r4, r5, r6, pc}
   81842:	bf00      	nop
   81844:	00082269 	.word	0x00082269
   81848:	400e1000 	.word	0x400e1000
   8184c:	00081e73 	.word	0x00081e73
   81850:	000817e5 	.word	0x000817e5
   81854:	000820c1 	.word	0x000820c1
   81858:	00081ef9 	.word	0x00081ef9
   8185c:	e000e100 	.word	0xe000e100

00081860 <motor_task>:
#include "motor_task.h"
#include "pin_mapper.h"

#define MOTOR_TASK_PERIODICITY 4 /* The number on the macro will decide the periodicity of the task */

void motor_task(void *pvParameters) {
   81860:	b5f0      	push	{r4, r5, r6, r7, lr}
   81862:	b083      	sub	sp, #12
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = MOTOR_TASK_PERIODICITY;
	
	while(1){
		ioport_set_pin_level(pin_mapper(TASK_DEBUG_MOTOR_PIN), 1);
   81864:	2735      	movs	r7, #53	; 0x35
   81866:	4e1e      	ldr	r6, [pc, #120]	; (818e0 <motor_task+0x80>)
	return 1U << (pin & 0x1F);
   81868:	2501      	movs	r5, #1
   8186a:	e011      	b.n	81890 <motor_task+0x30>
		for (int i = 0; i < 1000; ++i){
			j++;
			ioport_set_pin_level(pin_mapper(TASK_DEBUG_MOTOR_PIN), 1);
		}

		ioport_set_pin_level(pin_mapper(TASK_DEBUG_MOTOR_PIN), 0);
   8186c:	4638      	mov	r0, r7
   8186e:	47b0      	blx	r6
	return pin >> 5;
   81870:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81872:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81876:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8187a:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   8187c:	f000 021f 	and.w	r2, r0, #31
   81880:	fa05 f202 	lsl.w	r2, r5, r2
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81884:	635a      	str	r2, [r3, #52]	; 0x34

		/* The task is now done, go to sleep until it's time again */
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   81886:	2104      	movs	r1, #4
   81888:	eb0d 0001 	add.w	r0, sp, r1
   8188c:	4b15      	ldr	r3, [pc, #84]	; (818e4 <motor_task+0x84>)
   8188e:	4798      	blx	r3
		ioport_set_pin_level(pin_mapper(TASK_DEBUG_MOTOR_PIN), 1);
   81890:	4638      	mov	r0, r7
   81892:	47b0      	blx	r6
	return pin >> 5;
   81894:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81896:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8189a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8189e:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   818a0:	f000 021f 	and.w	r2, r0, #31
   818a4:	fa05 f202 	lsl.w	r2, r5, r2
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   818a8:	631a      	str	r2, [r3, #48]	; 0x30
		xLastWakeTime = xTaskGetTickCount();
   818aa:	4b0f      	ldr	r3, [pc, #60]	; (818e8 <motor_task+0x88>)
   818ac:	4798      	blx	r3
   818ae:	9001      	str	r0, [sp, #4]
		volatile int j = 0;
   818b0:	2300      	movs	r3, #0
   818b2:	9300      	str	r3, [sp, #0]
   818b4:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
			j++;
   818b8:	9b00      	ldr	r3, [sp, #0]
   818ba:	3301      	adds	r3, #1
   818bc:	9300      	str	r3, [sp, #0]
			ioport_set_pin_level(pin_mapper(TASK_DEBUG_MOTOR_PIN), 1);
   818be:	4638      	mov	r0, r7
   818c0:	47b0      	blx	r6
	return pin >> 5;
   818c2:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   818c4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   818c8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   818cc:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   818ce:	f000 001f 	and.w	r0, r0, #31
   818d2:	fa05 f000 	lsl.w	r0, r5, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   818d6:	6318      	str	r0, [r3, #48]	; 0x30
		for (int i = 0; i < 1000; ++i){
   818d8:	3c01      	subs	r4, #1
   818da:	d1ed      	bne.n	818b8 <motor_task+0x58>
   818dc:	e7c6      	b.n	8186c <motor_task+0xc>
   818de:	bf00      	nop
   818e0:	00081931 	.word	0x00081931
   818e4:	00080fe9 	.word	0x00080fe9
   818e8:	00080da1 	.word	0x00080da1

000818ec <nav_task>:

#include "nav_task.h"
#include "pin_mapper.h"
#include "drivers/encoder.h"

void nav_task(void *pvParameters) {
   818ec:	b508      	push	{r3, lr}
	while(1){
		ioport_set_pin_level(pin_mapper(TASK_DEBUG_NAV_PIN), 1);
   818ee:	2634      	movs	r6, #52	; 0x34
   818f0:	4d0e      	ldr	r5, [pc, #56]	; (8192c <nav_task+0x40>)
	return 1U << (pin & 0x1F);
   818f2:	2401      	movs	r4, #1
   818f4:	4630      	mov	r0, r6
   818f6:	47a8      	blx	r5
	return pin >> 5;
   818f8:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   818fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   818fe:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81902:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   81904:	f000 001f 	and.w	r0, r0, #31
   81908:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8190c:	6318      	str	r0, [r3, #48]	; 0x30
		
		ioport_set_pin_level(pin_mapper(TASK_DEBUG_NAV_PIN), 0);
   8190e:	4630      	mov	r0, r6
   81910:	47a8      	blx	r5
	return pin >> 5;
   81912:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81914:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81918:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8191c:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   8191e:	f000 001f 	and.w	r0, r0, #31
   81922:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81926:	6358      	str	r0, [r3, #52]	; 0x34
   81928:	e7e4      	b.n	818f4 <nav_task+0x8>
   8192a:	bf00      	nop
   8192c:	00081931 	.word	0x00081931

00081930 <pin_mapper>:
					PIO_PA22_IDX,PIO_PA6_IDX,PIO_PA4_IDX,PIO_PA3_IDX,PIO_PA2_IDX,PIO_PB17_IDX,
					PIO_PB18_IDX,PIO_PB19_IDX,PIO_PB20_IDX};
					
uint8_t pin_mapper(uint8_t pin){
	return pin_table[pin];
}
   81930:	4b01      	ldr	r3, [pc, #4]	; (81938 <pin_mapper+0x8>)
   81932:	5c18      	ldrb	r0, [r3, r0]
   81934:	4770      	bx	lr
   81936:	bf00      	nop
   81938:	20070138 	.word	0x20070138

0008193c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8193c:	6943      	ldr	r3, [r0, #20]
   8193e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81942:	bf1d      	ittte	ne
   81944:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81948:	61c1      	strne	r1, [r0, #28]
	return 0;
   8194a:	2000      	movne	r0, #0
		return 1;
   8194c:	2001      	moveq	r0, #1
}
   8194e:	4770      	bx	lr

00081950 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81950:	6943      	ldr	r3, [r0, #20]
   81952:	f013 0f01 	tst.w	r3, #1
   81956:	d005      	beq.n	81964 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81958:	6983      	ldr	r3, [r0, #24]
   8195a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8195e:	600b      	str	r3, [r1, #0]

	return 0;
   81960:	2000      	movs	r0, #0
   81962:	4770      	bx	lr
		return 1;
   81964:	2001      	movs	r0, #1
}
   81966:	4770      	bx	lr

00081968 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   81968:	b500      	push	{lr}
   8196a:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   8196c:	2201      	movs	r2, #1
   8196e:	f10d 0107 	add.w	r1, sp, #7
   81972:	4810      	ldr	r0, [pc, #64]	; (819b4 <USART0_Handler+0x4c>)
   81974:	4b10      	ldr	r3, [pc, #64]	; (819b8 <USART0_Handler+0x50>)
   81976:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81978:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8197a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8197e:	2200      	movs	r2, #0
   81980:	4b0e      	ldr	r3, [pc, #56]	; (819bc <USART0_Handler+0x54>)
   81982:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   81984:	4b0e      	ldr	r3, [pc, #56]	; (819c0 <USART0_Handler+0x58>)
   81986:	781b      	ldrb	r3, [r3, #0]
   81988:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8198c:	4a0d      	ldr	r2, [pc, #52]	; (819c4 <USART0_Handler+0x5c>)
   8198e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   81990:	2b9b      	cmp	r3, #155	; 0x9b
   81992:	d00b      	beq.n	819ac <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   81994:	3301      	adds	r3, #1
   81996:	4a0a      	ldr	r2, [pc, #40]	; (819c0 <USART0_Handler+0x58>)
   81998:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8199a:	2201      	movs	r2, #1
   8199c:	4b07      	ldr	r3, [pc, #28]	; (819bc <USART0_Handler+0x54>)
   8199e:	701a      	strb	r2, [r3, #0]
   819a0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   819a4:	b662      	cpsie	i
}
   819a6:	b003      	add	sp, #12
   819a8:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   819ac:	2200      	movs	r2, #0
   819ae:	4b04      	ldr	r3, [pc, #16]	; (819c0 <USART0_Handler+0x58>)
   819b0:	701a      	strb	r2, [r3, #0]
   819b2:	e7f2      	b.n	8199a <USART0_Handler+0x32>
   819b4:	40098000 	.word	0x40098000
   819b8:	00081c31 	.word	0x00081c31
   819bc:	2007017a 	.word	0x2007017a
   819c0:	2007ad30 	.word	0x2007ad30
   819c4:	2007ac94 	.word	0x2007ac94

000819c8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   819c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   819ca:	b083      	sub	sp, #12
   819cc:	4604      	mov	r4, r0
   819ce:	460d      	mov	r5, r1
	uint32_t val = 0;
   819d0:	2300      	movs	r3, #0
   819d2:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   819d4:	4b20      	ldr	r3, [pc, #128]	; (81a58 <usart_serial_getchar+0x90>)
   819d6:	4298      	cmp	r0, r3
   819d8:	d00d      	beq.n	819f6 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   819da:	4b20      	ldr	r3, [pc, #128]	; (81a5c <usart_serial_getchar+0x94>)
   819dc:	4298      	cmp	r0, r3
   819de:	d012      	beq.n	81a06 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   819e0:	4b1f      	ldr	r3, [pc, #124]	; (81a60 <usart_serial_getchar+0x98>)
   819e2:	4298      	cmp	r0, r3
   819e4:	d019      	beq.n	81a1a <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   819e6:	4b1f      	ldr	r3, [pc, #124]	; (81a64 <usart_serial_getchar+0x9c>)
   819e8:	429c      	cmp	r4, r3
   819ea:	d020      	beq.n	81a2e <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   819ec:	4b1e      	ldr	r3, [pc, #120]	; (81a68 <usart_serial_getchar+0xa0>)
   819ee:	429c      	cmp	r4, r3
   819f0:	d027      	beq.n	81a42 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   819f2:	b003      	add	sp, #12
   819f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   819f6:	461f      	mov	r7, r3
   819f8:	4e1c      	ldr	r6, [pc, #112]	; (81a6c <usart_serial_getchar+0xa4>)
   819fa:	4629      	mov	r1, r5
   819fc:	4638      	mov	r0, r7
   819fe:	47b0      	blx	r6
   81a00:	2800      	cmp	r0, #0
   81a02:	d1fa      	bne.n	819fa <usart_serial_getchar+0x32>
   81a04:	e7ef      	b.n	819e6 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   81a06:	461f      	mov	r7, r3
   81a08:	4e19      	ldr	r6, [pc, #100]	; (81a70 <usart_serial_getchar+0xa8>)
   81a0a:	a901      	add	r1, sp, #4
   81a0c:	4638      	mov	r0, r7
   81a0e:	47b0      	blx	r6
   81a10:	2800      	cmp	r0, #0
   81a12:	d1fa      	bne.n	81a0a <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   81a14:	9b01      	ldr	r3, [sp, #4]
   81a16:	702b      	strb	r3, [r5, #0]
   81a18:	e7e8      	b.n	819ec <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   81a1a:	461e      	mov	r6, r3
   81a1c:	4c14      	ldr	r4, [pc, #80]	; (81a70 <usart_serial_getchar+0xa8>)
   81a1e:	a901      	add	r1, sp, #4
   81a20:	4630      	mov	r0, r6
   81a22:	47a0      	blx	r4
   81a24:	2800      	cmp	r0, #0
   81a26:	d1fa      	bne.n	81a1e <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   81a28:	9b01      	ldr	r3, [sp, #4]
   81a2a:	702b      	strb	r3, [r5, #0]
   81a2c:	e7e1      	b.n	819f2 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   81a2e:	461e      	mov	r6, r3
   81a30:	4c0f      	ldr	r4, [pc, #60]	; (81a70 <usart_serial_getchar+0xa8>)
   81a32:	a901      	add	r1, sp, #4
   81a34:	4630      	mov	r0, r6
   81a36:	47a0      	blx	r4
   81a38:	2800      	cmp	r0, #0
   81a3a:	d1fa      	bne.n	81a32 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   81a3c:	9b01      	ldr	r3, [sp, #4]
   81a3e:	702b      	strb	r3, [r5, #0]
   81a40:	e7d7      	b.n	819f2 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   81a42:	461e      	mov	r6, r3
   81a44:	4c0a      	ldr	r4, [pc, #40]	; (81a70 <usart_serial_getchar+0xa8>)
   81a46:	a901      	add	r1, sp, #4
   81a48:	4630      	mov	r0, r6
   81a4a:	47a0      	blx	r4
   81a4c:	2800      	cmp	r0, #0
   81a4e:	d1fa      	bne.n	81a46 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   81a50:	9b01      	ldr	r3, [sp, #4]
   81a52:	702b      	strb	r3, [r5, #0]
}
   81a54:	e7cd      	b.n	819f2 <usart_serial_getchar+0x2a>
   81a56:	bf00      	nop
   81a58:	400e0800 	.word	0x400e0800
   81a5c:	40098000 	.word	0x40098000
   81a60:	4009c000 	.word	0x4009c000
   81a64:	400a0000 	.word	0x400a0000
   81a68:	400a4000 	.word	0x400a4000
   81a6c:	00081d3f 	.word	0x00081d3f
   81a70:	00081951 	.word	0x00081951

00081a74 <usart_serial_putchar>:
{
   81a74:	b570      	push	{r4, r5, r6, lr}
   81a76:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   81a78:	4b1e      	ldr	r3, [pc, #120]	; (81af4 <usart_serial_putchar+0x80>)
   81a7a:	4298      	cmp	r0, r3
   81a7c:	d00d      	beq.n	81a9a <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   81a7e:	4b1e      	ldr	r3, [pc, #120]	; (81af8 <usart_serial_putchar+0x84>)
   81a80:	4298      	cmp	r0, r3
   81a82:	d013      	beq.n	81aac <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   81a84:	4b1d      	ldr	r3, [pc, #116]	; (81afc <usart_serial_putchar+0x88>)
   81a86:	4298      	cmp	r0, r3
   81a88:	d019      	beq.n	81abe <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   81a8a:	4b1d      	ldr	r3, [pc, #116]	; (81b00 <usart_serial_putchar+0x8c>)
   81a8c:	4298      	cmp	r0, r3
   81a8e:	d01f      	beq.n	81ad0 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   81a90:	4b1c      	ldr	r3, [pc, #112]	; (81b04 <usart_serial_putchar+0x90>)
   81a92:	4298      	cmp	r0, r3
   81a94:	d025      	beq.n	81ae2 <usart_serial_putchar+0x6e>
	return 0;
   81a96:	2000      	movs	r0, #0
}
   81a98:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   81a9a:	461e      	mov	r6, r3
   81a9c:	4d1a      	ldr	r5, [pc, #104]	; (81b08 <usart_serial_putchar+0x94>)
   81a9e:	4621      	mov	r1, r4
   81aa0:	4630      	mov	r0, r6
   81aa2:	47a8      	blx	r5
   81aa4:	2800      	cmp	r0, #0
   81aa6:	d1fa      	bne.n	81a9e <usart_serial_putchar+0x2a>
		return 1;
   81aa8:	2001      	movs	r0, #1
   81aaa:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81aac:	461e      	mov	r6, r3
   81aae:	4d17      	ldr	r5, [pc, #92]	; (81b0c <usart_serial_putchar+0x98>)
   81ab0:	4621      	mov	r1, r4
   81ab2:	4630      	mov	r0, r6
   81ab4:	47a8      	blx	r5
   81ab6:	2800      	cmp	r0, #0
   81ab8:	d1fa      	bne.n	81ab0 <usart_serial_putchar+0x3c>
		return 1;
   81aba:	2001      	movs	r0, #1
   81abc:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81abe:	461e      	mov	r6, r3
   81ac0:	4d12      	ldr	r5, [pc, #72]	; (81b0c <usart_serial_putchar+0x98>)
   81ac2:	4621      	mov	r1, r4
   81ac4:	4630      	mov	r0, r6
   81ac6:	47a8      	blx	r5
   81ac8:	2800      	cmp	r0, #0
   81aca:	d1fa      	bne.n	81ac2 <usart_serial_putchar+0x4e>
		return 1;
   81acc:	2001      	movs	r0, #1
   81ace:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81ad0:	461e      	mov	r6, r3
   81ad2:	4d0e      	ldr	r5, [pc, #56]	; (81b0c <usart_serial_putchar+0x98>)
   81ad4:	4621      	mov	r1, r4
   81ad6:	4630      	mov	r0, r6
   81ad8:	47a8      	blx	r5
   81ada:	2800      	cmp	r0, #0
   81adc:	d1fa      	bne.n	81ad4 <usart_serial_putchar+0x60>
		return 1;
   81ade:	2001      	movs	r0, #1
   81ae0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   81ae2:	461e      	mov	r6, r3
   81ae4:	4d09      	ldr	r5, [pc, #36]	; (81b0c <usart_serial_putchar+0x98>)
   81ae6:	4621      	mov	r1, r4
   81ae8:	4630      	mov	r0, r6
   81aea:	47a8      	blx	r5
   81aec:	2800      	cmp	r0, #0
   81aee:	d1fa      	bne.n	81ae6 <usart_serial_putchar+0x72>
		return 1;
   81af0:	2001      	movs	r0, #1
   81af2:	bd70      	pop	{r4, r5, r6, pc}
   81af4:	400e0800 	.word	0x400e0800
   81af8:	40098000 	.word	0x40098000
   81afc:	4009c000 	.word	0x4009c000
   81b00:	400a0000 	.word	0x400a0000
   81b04:	400a4000 	.word	0x400a4000
   81b08:	00081d2f 	.word	0x00081d2f
   81b0c:	0008193d 	.word	0x0008193d

00081b10 <console_init>:
#include "console_driver.h"

void console_init(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   81b10:	b530      	push	{r4, r5, lr}
   81b12:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   81b14:	2008      	movs	r0, #8
   81b16:	4d15      	ldr	r5, [pc, #84]	; (81b6c <console_init+0x5c>)
   81b18:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   81b1a:	4c15      	ldr	r4, [pc, #84]	; (81b70 <console_init+0x60>)
   81b1c:	4b15      	ldr	r3, [pc, #84]	; (81b74 <console_init+0x64>)
   81b1e:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81b20:	4a15      	ldr	r2, [pc, #84]	; (81b78 <console_init+0x68>)
   81b22:	4b16      	ldr	r3, [pc, #88]	; (81b7c <console_init+0x6c>)
   81b24:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81b26:	4a16      	ldr	r2, [pc, #88]	; (81b80 <console_init+0x70>)
   81b28:	4b16      	ldr	r3, [pc, #88]	; (81b84 <console_init+0x74>)
   81b2a:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   81b2c:	4b16      	ldr	r3, [pc, #88]	; (81b88 <console_init+0x78>)
   81b2e:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   81b30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   81b34:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   81b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81b3a:	9303      	str	r3, [sp, #12]
   81b3c:	2008      	movs	r0, #8
   81b3e:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   81b40:	a901      	add	r1, sp, #4
   81b42:	4620      	mov	r0, r4
   81b44:	4b11      	ldr	r3, [pc, #68]	; (81b8c <console_init+0x7c>)
   81b46:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81b48:	4d11      	ldr	r5, [pc, #68]	; (81b90 <console_init+0x80>)
   81b4a:	682b      	ldr	r3, [r5, #0]
   81b4c:	2100      	movs	r1, #0
   81b4e:	6898      	ldr	r0, [r3, #8]
   81b50:	4c10      	ldr	r4, [pc, #64]	; (81b94 <console_init+0x84>)
   81b52:	47a0      	blx	r4
	setbuf(stdin, NULL);
   81b54:	682b      	ldr	r3, [r5, #0]
   81b56:	2100      	movs	r1, #0
   81b58:	6858      	ldr	r0, [r3, #4]
   81b5a:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   81b5c:	480e      	ldr	r0, [pc, #56]	; (81b98 <console_init+0x88>)
   81b5e:	4c0f      	ldr	r4, [pc, #60]	; (81b9c <console_init+0x8c>)
   81b60:	47a0      	blx	r4
	printf("=============\n");
   81b62:	480f      	ldr	r0, [pc, #60]	; (81ba0 <console_init+0x90>)
   81b64:	47a0      	blx	r4
   81b66:	b005      	add	sp, #20
   81b68:	bd30      	pop	{r4, r5, pc}
   81b6a:	bf00      	nop
   81b6c:	00082269 	.word	0x00082269
   81b70:	400e0800 	.word	0x400e0800
   81b74:	2007ade8 	.word	0x2007ade8
   81b78:	00081a75 	.word	0x00081a75
   81b7c:	2007ade4 	.word	0x2007ade4
   81b80:	000819c9 	.word	0x000819c9
   81b84:	2007ade0 	.word	0x2007ade0
   81b88:	0501bd00 	.word	0x0501bd00
   81b8c:	00081cf9 	.word	0x00081cf9
   81b90:	20070180 	.word	0x20070180
   81b94:	00082821 	.word	0x00082821
   81b98:	00085514 	.word	0x00085514
   81b9c:	00082671 	.word	0x00082671
   81ba0:	00085524 	.word	0x00085524

00081ba4 <delay_init>:
 */

#include "asf.h"
#include "delay.h"

int delay_init(void) {
   81ba4:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC3);	/* power on the peripheral clock for timers */
   81ba6:	201e      	movs	r0, #30
   81ba8:	4b08      	ldr	r3, [pc, #32]	; (81bcc <delay_init+0x28>)
   81baa:	4798      	blx	r3
	tc_init(TC1,0,0);				/* Enable timer block 2, channel 0, TCLK1 och capturemode */
   81bac:	4c08      	ldr	r4, [pc, #32]	; (81bd0 <delay_init+0x2c>)
   81bae:	2200      	movs	r2, #0
   81bb0:	4611      	mov	r1, r2
   81bb2:	4620      	mov	r0, r4
   81bb4:	4b07      	ldr	r3, [pc, #28]	; (81bd4 <delay_init+0x30>)
   81bb6:	4798      	blx	r3
	tc_set_block_mode(TC1,0);
   81bb8:	2100      	movs	r1, #0
   81bba:	4620      	mov	r0, r4
   81bbc:	4b06      	ldr	r3, [pc, #24]	; (81bd8 <delay_init+0x34>)
   81bbe:	4798      	blx	r3
	tc_stop(TC1,0);					/* making sure the timer does not run  */
   81bc0:	2100      	movs	r1, #0
   81bc2:	4620      	mov	r0, r4
   81bc4:	4b05      	ldr	r3, [pc, #20]	; (81bdc <delay_init+0x38>)
   81bc6:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   81bc8:	2000      	movs	r0, #0
   81bca:	bd10      	pop	{r4, pc}
   81bcc:	00082269 	.word	0x00082269
   81bd0:	40084000 	.word	0x40084000
   81bd4:	000801e1 	.word	0x000801e1
   81bd8:	000801f9 	.word	0x000801f9
   81bdc:	000801ff 	.word	0x000801ff

00081be0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81be0:	3801      	subs	r0, #1
   81be2:	2802      	cmp	r0, #2
   81be4:	d815      	bhi.n	81c12 <_write+0x32>
{
   81be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81bea:	460e      	mov	r6, r1
   81bec:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   81bee:	b19a      	cbz	r2, 81c18 <_write+0x38>
   81bf0:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81bf2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 81c2c <_write+0x4c>
   81bf6:	4f0c      	ldr	r7, [pc, #48]	; (81c28 <_write+0x48>)
   81bf8:	f8d8 0000 	ldr.w	r0, [r8]
   81bfc:	f815 1b01 	ldrb.w	r1, [r5], #1
   81c00:	683b      	ldr	r3, [r7, #0]
   81c02:	4798      	blx	r3
   81c04:	2800      	cmp	r0, #0
   81c06:	db0a      	blt.n	81c1e <_write+0x3e>
   81c08:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   81c0a:	3c01      	subs	r4, #1
   81c0c:	d1f4      	bne.n	81bf8 <_write+0x18>
   81c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   81c12:	f04f 30ff 	mov.w	r0, #4294967295
   81c16:	4770      	bx	lr
	for (; len != 0; --len) {
   81c18:	4610      	mov	r0, r2
   81c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   81c1e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   81c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81c26:	bf00      	nop
   81c28:	2007ade4 	.word	0x2007ade4
   81c2c:	2007ade8 	.word	0x2007ade8

00081c30 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   81c30:	2a00      	cmp	r2, #0
   81c32:	d051      	beq.n	81cd8 <usart_serial_read_packet+0xa8>
{
   81c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c38:	b083      	sub	sp, #12
   81c3a:	4605      	mov	r5, r0
   81c3c:	460c      	mov	r4, r1
   81c3e:	4692      	mov	sl, r2
   81c40:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   81c42:	4f26      	ldr	r7, [pc, #152]	; (81cdc <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   81c44:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 81cf0 <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   81c48:	4e25      	ldr	r6, [pc, #148]	; (81ce0 <usart_serial_read_packet+0xb0>)
   81c4a:	e01d      	b.n	81c88 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   81c4c:	4621      	mov	r1, r4
   81c4e:	4638      	mov	r0, r7
   81c50:	47c8      	blx	r9
   81c52:	2800      	cmp	r0, #0
   81c54:	d1fa      	bne.n	81c4c <usart_serial_read_packet+0x1c>
   81c56:	e021      	b.n	81c9c <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   81c58:	469b      	mov	fp, r3
   81c5a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 81cf4 <usart_serial_read_packet+0xc4>
   81c5e:	a901      	add	r1, sp, #4
   81c60:	4658      	mov	r0, fp
   81c62:	47c0      	blx	r8
   81c64:	2800      	cmp	r0, #0
   81c66:	d1fa      	bne.n	81c5e <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   81c68:	9b01      	ldr	r3, [sp, #4]
   81c6a:	7023      	strb	r3, [r4, #0]
   81c6c:	e019      	b.n	81ca2 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   81c6e:	469b      	mov	fp, r3
   81c70:	f8df 8080 	ldr.w	r8, [pc, #128]	; 81cf4 <usart_serial_read_packet+0xc4>
   81c74:	a901      	add	r1, sp, #4
   81c76:	4658      	mov	r0, fp
   81c78:	47c0      	blx	r8
   81c7a:	2800      	cmp	r0, #0
   81c7c:	d1fa      	bne.n	81c74 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   81c7e:	9b01      	ldr	r3, [sp, #4]
   81c80:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   81c82:	3401      	adds	r4, #1
	while (len) {
   81c84:	4554      	cmp	r4, sl
   81c86:	d023      	beq.n	81cd0 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   81c88:	2300      	movs	r3, #0
   81c8a:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   81c8c:	42bd      	cmp	r5, r7
   81c8e:	d0dd      	beq.n	81c4c <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   81c90:	4b14      	ldr	r3, [pc, #80]	; (81ce4 <usart_serial_read_packet+0xb4>)
   81c92:	429d      	cmp	r5, r3
   81c94:	d0e0      	beq.n	81c58 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   81c96:	4b14      	ldr	r3, [pc, #80]	; (81ce8 <usart_serial_read_packet+0xb8>)
   81c98:	429d      	cmp	r5, r3
   81c9a:	d0e8      	beq.n	81c6e <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   81c9c:	4b13      	ldr	r3, [pc, #76]	; (81cec <usart_serial_read_packet+0xbc>)
   81c9e:	429d      	cmp	r5, r3
   81ca0:	d00b      	beq.n	81cba <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   81ca2:	42b5      	cmp	r5, r6
   81ca4:	d1ed      	bne.n	81c82 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   81ca6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81cf4 <usart_serial_read_packet+0xc4>
   81caa:	a901      	add	r1, sp, #4
   81cac:	4630      	mov	r0, r6
   81cae:	47c0      	blx	r8
   81cb0:	2800      	cmp	r0, #0
   81cb2:	d1fa      	bne.n	81caa <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81cb4:	9b01      	ldr	r3, [sp, #4]
   81cb6:	7023      	strb	r3, [r4, #0]
   81cb8:	e7e3      	b.n	81c82 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   81cba:	469b      	mov	fp, r3
   81cbc:	f8df 8034 	ldr.w	r8, [pc, #52]	; 81cf4 <usart_serial_read_packet+0xc4>
   81cc0:	a901      	add	r1, sp, #4
   81cc2:	4658      	mov	r0, fp
   81cc4:	47c0      	blx	r8
   81cc6:	2800      	cmp	r0, #0
   81cc8:	d1fa      	bne.n	81cc0 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   81cca:	9b01      	ldr	r3, [sp, #4]
   81ccc:	7023      	strb	r3, [r4, #0]
   81cce:	e7d8      	b.n	81c82 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   81cd0:	2000      	movs	r0, #0
   81cd2:	b003      	add	sp, #12
   81cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81cd8:	2000      	movs	r0, #0
   81cda:	4770      	bx	lr
   81cdc:	400e0800 	.word	0x400e0800
   81ce0:	400a4000 	.word	0x400a4000
   81ce4:	40098000 	.word	0x40098000
   81ce8:	4009c000 	.word	0x4009c000
   81cec:	400a0000 	.word	0x400a0000
   81cf0:	00081d3f 	.word	0x00081d3f
   81cf4:	00081951 	.word	0x00081951

00081cf8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81cf8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81cfa:	23ac      	movs	r3, #172	; 0xac
   81cfc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81cfe:	680b      	ldr	r3, [r1, #0]
   81d00:	684a      	ldr	r2, [r1, #4]
   81d02:	fbb3 f3f2 	udiv	r3, r3, r2
   81d06:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81d08:	1e5c      	subs	r4, r3, #1
   81d0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81d0e:	4294      	cmp	r4, r2
   81d10:	d80b      	bhi.n	81d2a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   81d12:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81d14:	688b      	ldr	r3, [r1, #8]
   81d16:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81d18:	f240 2302 	movw	r3, #514	; 0x202
   81d1c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81d20:	2350      	movs	r3, #80	; 0x50
   81d22:	6003      	str	r3, [r0, #0]

	return 0;
   81d24:	2000      	movs	r0, #0
}
   81d26:	bc10      	pop	{r4}
   81d28:	4770      	bx	lr
		return 1;
   81d2a:	2001      	movs	r0, #1
   81d2c:	e7fb      	b.n	81d26 <uart_init+0x2e>

00081d2e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81d2e:	6943      	ldr	r3, [r0, #20]
   81d30:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81d34:	bf1a      	itte	ne
   81d36:	61c1      	strne	r1, [r0, #28]
	return 0;
   81d38:	2000      	movne	r0, #0
		return 1;
   81d3a:	2001      	moveq	r0, #1
}
   81d3c:	4770      	bx	lr

00081d3e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81d3e:	6943      	ldr	r3, [r0, #20]
   81d40:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81d44:	bf1d      	ittte	ne
   81d46:	6983      	ldrne	r3, [r0, #24]
   81d48:	700b      	strbne	r3, [r1, #0]
	return 0;
   81d4a:	2000      	movne	r0, #0
		return 1;
   81d4c:	2001      	moveq	r0, #1
}
   81d4e:	4770      	bx	lr

00081d50 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81d50:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81d52:	480e      	ldr	r0, [pc, #56]	; (81d8c <sysclk_init+0x3c>)
   81d54:	4b0e      	ldr	r3, [pc, #56]	; (81d90 <sysclk_init+0x40>)
   81d56:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81d58:	213e      	movs	r1, #62	; 0x3e
   81d5a:	2000      	movs	r0, #0
   81d5c:	4b0d      	ldr	r3, [pc, #52]	; (81d94 <sysclk_init+0x44>)
   81d5e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81d60:	4c0d      	ldr	r4, [pc, #52]	; (81d98 <sysclk_init+0x48>)
   81d62:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81d64:	2800      	cmp	r0, #0
   81d66:	d0fc      	beq.n	81d62 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81d68:	4b0c      	ldr	r3, [pc, #48]	; (81d9c <sysclk_init+0x4c>)
   81d6a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81d6c:	4a0c      	ldr	r2, [pc, #48]	; (81da0 <sysclk_init+0x50>)
   81d6e:	4b0d      	ldr	r3, [pc, #52]	; (81da4 <sysclk_init+0x54>)
   81d70:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81d72:	4c0d      	ldr	r4, [pc, #52]	; (81da8 <sysclk_init+0x58>)
   81d74:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81d76:	2800      	cmp	r0, #0
   81d78:	d0fc      	beq.n	81d74 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81d7a:	2010      	movs	r0, #16
   81d7c:	4b0b      	ldr	r3, [pc, #44]	; (81dac <sysclk_init+0x5c>)
   81d7e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81d80:	4b0b      	ldr	r3, [pc, #44]	; (81db0 <sysclk_init+0x60>)
   81d82:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81d84:	4801      	ldr	r0, [pc, #4]	; (81d8c <sysclk_init+0x3c>)
   81d86:	4b02      	ldr	r3, [pc, #8]	; (81d90 <sysclk_init+0x40>)
   81d88:	4798      	blx	r3
   81d8a:	bd10      	pop	{r4, pc}
   81d8c:	0501bd00 	.word	0x0501bd00
   81d90:	200700a5 	.word	0x200700a5
   81d94:	000821e5 	.word	0x000821e5
   81d98:	00082239 	.word	0x00082239
   81d9c:	00082249 	.word	0x00082249
   81da0:	200d3f01 	.word	0x200d3f01
   81da4:	400e0600 	.word	0x400e0600
   81da8:	00082259 	.word	0x00082259
   81dac:	00082181 	.word	0x00082181
   81db0:	00082359 	.word	0x00082359

00081db4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81db4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81db6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81dba:	4b16      	ldr	r3, [pc, #88]	; (81e14 <board_init+0x60>)
   81dbc:	605a      	str	r2, [r3, #4]
   81dbe:	200b      	movs	r0, #11
   81dc0:	4c15      	ldr	r4, [pc, #84]	; (81e18 <board_init+0x64>)
   81dc2:	47a0      	blx	r4
   81dc4:	200c      	movs	r0, #12
   81dc6:	47a0      	blx	r4
   81dc8:	200d      	movs	r0, #13
   81dca:	47a0      	blx	r4
   81dcc:	200e      	movs	r0, #14
   81dce:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81dd0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81dd4:	203b      	movs	r0, #59	; 0x3b
   81dd6:	4c11      	ldr	r4, [pc, #68]	; (81e1c <board_init+0x68>)
   81dd8:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81dda:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81dde:	2055      	movs	r0, #85	; 0x55
   81de0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81de2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81de6:	2056      	movs	r0, #86	; 0x56
   81de8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81dea:	490d      	ldr	r1, [pc, #52]	; (81e20 <board_init+0x6c>)
   81dec:	2068      	movs	r0, #104	; 0x68
   81dee:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81df0:	490c      	ldr	r1, [pc, #48]	; (81e24 <board_init+0x70>)
   81df2:	205c      	movs	r0, #92	; 0x5c
   81df4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81df6:	4a0c      	ldr	r2, [pc, #48]	; (81e28 <board_init+0x74>)
   81df8:	f44f 7140 	mov.w	r1, #768	; 0x300
   81dfc:	480b      	ldr	r0, [pc, #44]	; (81e2c <board_init+0x78>)
   81dfe:	4b0c      	ldr	r3, [pc, #48]	; (81e30 <board_init+0x7c>)
   81e00:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81e02:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81e06:	202b      	movs	r0, #43	; 0x2b
   81e08:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81e0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81e0e:	202a      	movs	r0, #42	; 0x2a
   81e10:	47a0      	blx	r4
   81e12:	bd10      	pop	{r4, pc}
   81e14:	400e1a50 	.word	0x400e1a50
   81e18:	00082269 	.word	0x00082269
   81e1c:	00081f05 	.word	0x00081f05
   81e20:	28000079 	.word	0x28000079
   81e24:	28000001 	.word	0x28000001
   81e28:	08000001 	.word	0x08000001
   81e2c:	400e0e00 	.word	0x400e0e00
   81e30:	00081fd5 	.word	0x00081fd5

00081e34 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81e34:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81e36:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81e3a:	d016      	beq.n	81e6a <pio_set_peripheral+0x36>
   81e3c:	d80b      	bhi.n	81e56 <pio_set_peripheral+0x22>
   81e3e:	b149      	cbz	r1, 81e54 <pio_set_peripheral+0x20>
   81e40:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81e44:	d105      	bne.n	81e52 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81e46:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81e48:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81e4a:	400b      	ands	r3, r1
   81e4c:	ea23 0302 	bic.w	r3, r3, r2
   81e50:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81e52:	6042      	str	r2, [r0, #4]
   81e54:	4770      	bx	lr
	switch (ul_type) {
   81e56:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81e5a:	d0fb      	beq.n	81e54 <pio_set_peripheral+0x20>
   81e5c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81e60:	d0f8      	beq.n	81e54 <pio_set_peripheral+0x20>
   81e62:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81e66:	d1f4      	bne.n	81e52 <pio_set_peripheral+0x1e>
   81e68:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81e6a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81e6c:	4313      	orrs	r3, r2
   81e6e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81e70:	e7ef      	b.n	81e52 <pio_set_peripheral+0x1e>

00081e72 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81e72:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81e74:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81e78:	bf14      	ite	ne
   81e7a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81e7c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81e7e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81e82:	bf14      	ite	ne
   81e84:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81e86:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81e88:	f012 0f02 	tst.w	r2, #2
   81e8c:	d107      	bne.n	81e9e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81e8e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81e92:	bf18      	it	ne
   81e94:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81e98:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81e9a:	6001      	str	r1, [r0, #0]
   81e9c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81e9e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81ea2:	e7f9      	b.n	81e98 <pio_set_input+0x26>

00081ea4 <pio_set_output>:
{
   81ea4:	b410      	push	{r4}
   81ea6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81ea8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81eaa:	b944      	cbnz	r4, 81ebe <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81eac:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81eae:	b143      	cbz	r3, 81ec2 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81eb0:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81eb2:	b942      	cbnz	r2, 81ec6 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81eb4:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81eb6:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81eb8:	6001      	str	r1, [r0, #0]
}
   81eba:	bc10      	pop	{r4}
   81ebc:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81ebe:	6641      	str	r1, [r0, #100]	; 0x64
   81ec0:	e7f5      	b.n	81eae <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81ec2:	6541      	str	r1, [r0, #84]	; 0x54
   81ec4:	e7f5      	b.n	81eb2 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81ec6:	6301      	str	r1, [r0, #48]	; 0x30
   81ec8:	e7f5      	b.n	81eb6 <pio_set_output+0x12>

00081eca <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   81eca:	f012 0f10 	tst.w	r2, #16
   81ece:	d010      	beq.n	81ef2 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   81ed0:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   81ed4:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   81ed8:	bf14      	ite	ne
   81eda:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   81ede:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   81ee2:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   81ee6:	bf14      	ite	ne
   81ee8:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   81eec:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   81ef0:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   81ef2:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81ef6:	4770      	bx	lr

00081ef8 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   81ef8:	6401      	str	r1, [r0, #64]	; 0x40
   81efa:	4770      	bx	lr

00081efc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81efc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81efe:	4770      	bx	lr

00081f00 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81f00:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81f02:	4770      	bx	lr

00081f04 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81f04:	b570      	push	{r4, r5, r6, lr}
   81f06:	b082      	sub	sp, #8
   81f08:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81f0a:	0943      	lsrs	r3, r0, #5
   81f0c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81f10:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81f14:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81f16:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81f1a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f1e:	d031      	beq.n	81f84 <pio_configure_pin+0x80>
   81f20:	d816      	bhi.n	81f50 <pio_configure_pin+0x4c>
   81f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81f26:	d01b      	beq.n	81f60 <pio_configure_pin+0x5c>
   81f28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81f2c:	d116      	bne.n	81f5c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81f2e:	f000 001f 	and.w	r0, r0, #31
   81f32:	2601      	movs	r6, #1
   81f34:	4086      	lsls	r6, r0
   81f36:	4632      	mov	r2, r6
   81f38:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f3c:	4620      	mov	r0, r4
   81f3e:	4b22      	ldr	r3, [pc, #136]	; (81fc8 <pio_configure_pin+0xc4>)
   81f40:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81f42:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81f46:	bf14      	ite	ne
   81f48:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81f4a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81f4c:	2001      	movs	r0, #1
   81f4e:	e017      	b.n	81f80 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81f50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81f54:	d021      	beq.n	81f9a <pio_configure_pin+0x96>
   81f56:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f5a:	d01e      	beq.n	81f9a <pio_configure_pin+0x96>
		return 0;
   81f5c:	2000      	movs	r0, #0
   81f5e:	e00f      	b.n	81f80 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81f60:	f000 001f 	and.w	r0, r0, #31
   81f64:	2601      	movs	r6, #1
   81f66:	4086      	lsls	r6, r0
   81f68:	4632      	mov	r2, r6
   81f6a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f6e:	4620      	mov	r0, r4
   81f70:	4b15      	ldr	r3, [pc, #84]	; (81fc8 <pio_configure_pin+0xc4>)
   81f72:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81f74:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81f78:	bf14      	ite	ne
   81f7a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81f7c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81f7e:	2001      	movs	r0, #1
}
   81f80:	b002      	add	sp, #8
   81f82:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81f84:	f000 011f 	and.w	r1, r0, #31
   81f88:	2601      	movs	r6, #1
   81f8a:	462a      	mov	r2, r5
   81f8c:	fa06 f101 	lsl.w	r1, r6, r1
   81f90:	4620      	mov	r0, r4
   81f92:	4b0e      	ldr	r3, [pc, #56]	; (81fcc <pio_configure_pin+0xc8>)
   81f94:	4798      	blx	r3
	return 1;
   81f96:	4630      	mov	r0, r6
		break;
   81f98:	e7f2      	b.n	81f80 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81f9a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81f9e:	f000 011f 	and.w	r1, r0, #31
   81fa2:	2601      	movs	r6, #1
   81fa4:	ea05 0306 	and.w	r3, r5, r6
   81fa8:	9300      	str	r3, [sp, #0]
   81faa:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81fae:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81fb2:	bf14      	ite	ne
   81fb4:	2200      	movne	r2, #0
   81fb6:	2201      	moveq	r2, #1
   81fb8:	fa06 f101 	lsl.w	r1, r6, r1
   81fbc:	4620      	mov	r0, r4
   81fbe:	4c04      	ldr	r4, [pc, #16]	; (81fd0 <pio_configure_pin+0xcc>)
   81fc0:	47a0      	blx	r4
	return 1;
   81fc2:	4630      	mov	r0, r6
		break;
   81fc4:	e7dc      	b.n	81f80 <pio_configure_pin+0x7c>
   81fc6:	bf00      	nop
   81fc8:	00081e35 	.word	0x00081e35
   81fcc:	00081e73 	.word	0x00081e73
   81fd0:	00081ea5 	.word	0x00081ea5

00081fd4 <pio_configure_pin_group>:
{
   81fd4:	b570      	push	{r4, r5, r6, lr}
   81fd6:	b082      	sub	sp, #8
   81fd8:	4605      	mov	r5, r0
   81fda:	460e      	mov	r6, r1
   81fdc:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81fde:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81fe2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81fe6:	d027      	beq.n	82038 <pio_configure_pin_group+0x64>
   81fe8:	d811      	bhi.n	8200e <pio_configure_pin_group+0x3a>
   81fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81fee:	d016      	beq.n	8201e <pio_configure_pin_group+0x4a>
   81ff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81ff4:	d111      	bne.n	8201a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81ff6:	460a      	mov	r2, r1
   81ff8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81ffc:	4b19      	ldr	r3, [pc, #100]	; (82064 <pio_configure_pin_group+0x90>)
   81ffe:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82000:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82004:	bf14      	ite	ne
   82006:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82008:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8200a:	2001      	movs	r0, #1
   8200c:	e012      	b.n	82034 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8200e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82012:	d015      	beq.n	82040 <pio_configure_pin_group+0x6c>
   82014:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82018:	d012      	beq.n	82040 <pio_configure_pin_group+0x6c>
		return 0;
   8201a:	2000      	movs	r0, #0
   8201c:	e00a      	b.n	82034 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8201e:	460a      	mov	r2, r1
   82020:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82024:	4b0f      	ldr	r3, [pc, #60]	; (82064 <pio_configure_pin_group+0x90>)
   82026:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82028:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8202c:	bf14      	ite	ne
   8202e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82030:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82032:	2001      	movs	r0, #1
}
   82034:	b002      	add	sp, #8
   82036:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82038:	4b0b      	ldr	r3, [pc, #44]	; (82068 <pio_configure_pin_group+0x94>)
   8203a:	4798      	blx	r3
	return 1;
   8203c:	2001      	movs	r0, #1
		break;
   8203e:	e7f9      	b.n	82034 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82040:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82044:	f004 0301 	and.w	r3, r4, #1
   82048:	9300      	str	r3, [sp, #0]
   8204a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8204e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82052:	bf14      	ite	ne
   82054:	2200      	movne	r2, #0
   82056:	2201      	moveq	r2, #1
   82058:	4631      	mov	r1, r6
   8205a:	4628      	mov	r0, r5
   8205c:	4c03      	ldr	r4, [pc, #12]	; (8206c <pio_configure_pin_group+0x98>)
   8205e:	47a0      	blx	r4
	return 1;
   82060:	2001      	movs	r0, #1
		break;
   82062:	e7e7      	b.n	82034 <pio_configure_pin_group+0x60>
   82064:	00081e35 	.word	0x00081e35
   82068:	00081e73 	.word	0x00081e73
   8206c:	00081ea5 	.word	0x00081ea5

00082070 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82074:	4604      	mov	r4, r0
   82076:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82078:	4b0e      	ldr	r3, [pc, #56]	; (820b4 <pio_handler_process+0x44>)
   8207a:	4798      	blx	r3
   8207c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8207e:	4620      	mov	r0, r4
   82080:	4b0d      	ldr	r3, [pc, #52]	; (820b8 <pio_handler_process+0x48>)
   82082:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82084:	4005      	ands	r5, r0
   82086:	d013      	beq.n	820b0 <pio_handler_process+0x40>
   82088:	4c0c      	ldr	r4, [pc, #48]	; (820bc <pio_handler_process+0x4c>)
   8208a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8208e:	e003      	b.n	82098 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82090:	42b4      	cmp	r4, r6
   82092:	d00d      	beq.n	820b0 <pio_handler_process+0x40>
   82094:	3410      	adds	r4, #16
		while (status != 0) {
   82096:	b15d      	cbz	r5, 820b0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82098:	6820      	ldr	r0, [r4, #0]
   8209a:	4540      	cmp	r0, r8
   8209c:	d1f8      	bne.n	82090 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8209e:	6861      	ldr	r1, [r4, #4]
   820a0:	4229      	tst	r1, r5
   820a2:	d0f5      	beq.n	82090 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   820a4:	68e3      	ldr	r3, [r4, #12]
   820a6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   820a8:	6863      	ldr	r3, [r4, #4]
   820aa:	ea25 0503 	bic.w	r5, r5, r3
   820ae:	e7ef      	b.n	82090 <pio_handler_process+0x20>
   820b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   820b4:	00081efd 	.word	0x00081efd
   820b8:	00081f01 	.word	0x00081f01
   820bc:	2007ad34 	.word	0x2007ad34

000820c0 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   820c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   820c2:	4c18      	ldr	r4, [pc, #96]	; (82124 <pio_handler_set+0x64>)
   820c4:	6826      	ldr	r6, [r4, #0]
   820c6:	2e06      	cmp	r6, #6
   820c8:	d829      	bhi.n	8211e <pio_handler_set+0x5e>
   820ca:	f04f 0c00 	mov.w	ip, #0
   820ce:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   820d0:	4f15      	ldr	r7, [pc, #84]	; (82128 <pio_handler_set+0x68>)
   820d2:	e004      	b.n	820de <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   820d4:	3401      	adds	r4, #1
   820d6:	b2e4      	uxtb	r4, r4
   820d8:	46a4      	mov	ip, r4
   820da:	42a6      	cmp	r6, r4
   820dc:	d309      	bcc.n	820f2 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   820de:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   820e0:	0125      	lsls	r5, r4, #4
   820e2:	597d      	ldr	r5, [r7, r5]
   820e4:	428d      	cmp	r5, r1
   820e6:	d1f5      	bne.n	820d4 <pio_handler_set+0x14>
   820e8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   820ec:	686d      	ldr	r5, [r5, #4]
   820ee:	4295      	cmp	r5, r2
   820f0:	d1f0      	bne.n	820d4 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   820f2:	4d0d      	ldr	r5, [pc, #52]	; (82128 <pio_handler_set+0x68>)
   820f4:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   820f8:	eb05 040e 	add.w	r4, r5, lr
   820fc:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   82100:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   82102:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   82104:	9906      	ldr	r1, [sp, #24]
   82106:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   82108:	3601      	adds	r6, #1
   8210a:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   8210c:	bf04      	itt	eq
   8210e:	4905      	ldreq	r1, [pc, #20]	; (82124 <pio_handler_set+0x64>)
   82110:	600e      	streq	r6, [r1, #0]
   82112:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   82114:	461a      	mov	r2, r3
   82116:	4b05      	ldr	r3, [pc, #20]	; (8212c <pio_handler_set+0x6c>)
   82118:	4798      	blx	r3

	return 0;
   8211a:	2000      	movs	r0, #0
   8211c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   8211e:	2001      	movs	r0, #1
}
   82120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82122:	bf00      	nop
   82124:	2007ada4 	.word	0x2007ada4
   82128:	2007ad34 	.word	0x2007ad34
   8212c:	00081ecb 	.word	0x00081ecb

00082130 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82130:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82132:	210b      	movs	r1, #11
   82134:	4801      	ldr	r0, [pc, #4]	; (8213c <PIOA_Handler+0xc>)
   82136:	4b02      	ldr	r3, [pc, #8]	; (82140 <PIOA_Handler+0x10>)
   82138:	4798      	blx	r3
   8213a:	bd08      	pop	{r3, pc}
   8213c:	400e0e00 	.word	0x400e0e00
   82140:	00082071 	.word	0x00082071

00082144 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82144:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82146:	210c      	movs	r1, #12
   82148:	4801      	ldr	r0, [pc, #4]	; (82150 <PIOB_Handler+0xc>)
   8214a:	4b02      	ldr	r3, [pc, #8]	; (82154 <PIOB_Handler+0x10>)
   8214c:	4798      	blx	r3
   8214e:	bd08      	pop	{r3, pc}
   82150:	400e1000 	.word	0x400e1000
   82154:	00082071 	.word	0x00082071

00082158 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82158:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8215a:	210d      	movs	r1, #13
   8215c:	4801      	ldr	r0, [pc, #4]	; (82164 <PIOC_Handler+0xc>)
   8215e:	4b02      	ldr	r3, [pc, #8]	; (82168 <PIOC_Handler+0x10>)
   82160:	4798      	blx	r3
   82162:	bd08      	pop	{r3, pc}
   82164:	400e1200 	.word	0x400e1200
   82168:	00082071 	.word	0x00082071

0008216c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8216c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8216e:	210e      	movs	r1, #14
   82170:	4801      	ldr	r0, [pc, #4]	; (82178 <PIOD_Handler+0xc>)
   82172:	4b02      	ldr	r3, [pc, #8]	; (8217c <PIOD_Handler+0x10>)
   82174:	4798      	blx	r3
   82176:	bd08      	pop	{r3, pc}
   82178:	400e1400 	.word	0x400e1400
   8217c:	00082071 	.word	0x00082071

00082180 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82180:	4a17      	ldr	r2, [pc, #92]	; (821e0 <pmc_switch_mck_to_pllack+0x60>)
   82182:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82188:	4318      	orrs	r0, r3
   8218a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8218c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8218e:	f013 0f08 	tst.w	r3, #8
   82192:	d10a      	bne.n	821aa <pmc_switch_mck_to_pllack+0x2a>
   82194:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82198:	4911      	ldr	r1, [pc, #68]	; (821e0 <pmc_switch_mck_to_pllack+0x60>)
   8219a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8219c:	f012 0f08 	tst.w	r2, #8
   821a0:	d103      	bne.n	821aa <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   821a2:	3b01      	subs	r3, #1
   821a4:	d1f9      	bne.n	8219a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   821a6:	2001      	movs	r0, #1
   821a8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   821aa:	4a0d      	ldr	r2, [pc, #52]	; (821e0 <pmc_switch_mck_to_pllack+0x60>)
   821ac:	6b13      	ldr	r3, [r2, #48]	; 0x30
   821ae:	f023 0303 	bic.w	r3, r3, #3
   821b2:	f043 0302 	orr.w	r3, r3, #2
   821b6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   821b8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   821ba:	f013 0f08 	tst.w	r3, #8
   821be:	d10a      	bne.n	821d6 <pmc_switch_mck_to_pllack+0x56>
   821c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   821c4:	4906      	ldr	r1, [pc, #24]	; (821e0 <pmc_switch_mck_to_pllack+0x60>)
   821c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   821c8:	f012 0f08 	tst.w	r2, #8
   821cc:	d105      	bne.n	821da <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   821ce:	3b01      	subs	r3, #1
   821d0:	d1f9      	bne.n	821c6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   821d2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   821d4:	4770      	bx	lr
	return 0;
   821d6:	2000      	movs	r0, #0
   821d8:	4770      	bx	lr
   821da:	2000      	movs	r0, #0
   821dc:	4770      	bx	lr
   821de:	bf00      	nop
   821e0:	400e0600 	.word	0x400e0600

000821e4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   821e4:	b9c8      	cbnz	r0, 8221a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   821e6:	4a11      	ldr	r2, [pc, #68]	; (8222c <pmc_switch_mainck_to_xtal+0x48>)
   821e8:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   821ea:	0209      	lsls	r1, r1, #8
   821ec:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   821ee:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   821f2:	f023 0303 	bic.w	r3, r3, #3
   821f6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   821fa:	f043 0301 	orr.w	r3, r3, #1
   821fe:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82200:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82202:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82204:	f013 0f01 	tst.w	r3, #1
   82208:	d0fb      	beq.n	82202 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8220a:	4a08      	ldr	r2, [pc, #32]	; (8222c <pmc_switch_mainck_to_xtal+0x48>)
   8220c:	6a13      	ldr	r3, [r2, #32]
   8220e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82212:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82216:	6213      	str	r3, [r2, #32]
   82218:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8221a:	4904      	ldr	r1, [pc, #16]	; (8222c <pmc_switch_mainck_to_xtal+0x48>)
   8221c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8221e:	4a04      	ldr	r2, [pc, #16]	; (82230 <pmc_switch_mainck_to_xtal+0x4c>)
   82220:	401a      	ands	r2, r3
   82222:	4b04      	ldr	r3, [pc, #16]	; (82234 <pmc_switch_mainck_to_xtal+0x50>)
   82224:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82226:	620b      	str	r3, [r1, #32]
   82228:	4770      	bx	lr
   8222a:	bf00      	nop
   8222c:	400e0600 	.word	0x400e0600
   82230:	fec8fffc 	.word	0xfec8fffc
   82234:	01370002 	.word	0x01370002

00082238 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82238:	4b02      	ldr	r3, [pc, #8]	; (82244 <pmc_osc_is_ready_mainck+0xc>)
   8223a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8223c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82240:	4770      	bx	lr
   82242:	bf00      	nop
   82244:	400e0600 	.word	0x400e0600

00082248 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82248:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8224c:	4b01      	ldr	r3, [pc, #4]	; (82254 <pmc_disable_pllack+0xc>)
   8224e:	629a      	str	r2, [r3, #40]	; 0x28
   82250:	4770      	bx	lr
   82252:	bf00      	nop
   82254:	400e0600 	.word	0x400e0600

00082258 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82258:	4b02      	ldr	r3, [pc, #8]	; (82264 <pmc_is_locked_pllack+0xc>)
   8225a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8225c:	f000 0002 	and.w	r0, r0, #2
   82260:	4770      	bx	lr
   82262:	bf00      	nop
   82264:	400e0600 	.word	0x400e0600

00082268 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82268:	282c      	cmp	r0, #44	; 0x2c
   8226a:	d81e      	bhi.n	822aa <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8226c:	281f      	cmp	r0, #31
   8226e:	d80c      	bhi.n	8228a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82270:	4b11      	ldr	r3, [pc, #68]	; (822b8 <pmc_enable_periph_clk+0x50>)
   82272:	699a      	ldr	r2, [r3, #24]
   82274:	2301      	movs	r3, #1
   82276:	4083      	lsls	r3, r0
   82278:	4393      	bics	r3, r2
   8227a:	d018      	beq.n	822ae <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8227c:	2301      	movs	r3, #1
   8227e:	fa03 f000 	lsl.w	r0, r3, r0
   82282:	4b0d      	ldr	r3, [pc, #52]	; (822b8 <pmc_enable_periph_clk+0x50>)
   82284:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82286:	2000      	movs	r0, #0
   82288:	4770      	bx	lr
		ul_id -= 32;
   8228a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8228c:	4b0a      	ldr	r3, [pc, #40]	; (822b8 <pmc_enable_periph_clk+0x50>)
   8228e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82292:	2301      	movs	r3, #1
   82294:	4083      	lsls	r3, r0
   82296:	4393      	bics	r3, r2
   82298:	d00b      	beq.n	822b2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8229a:	2301      	movs	r3, #1
   8229c:	fa03 f000 	lsl.w	r0, r3, r0
   822a0:	4b05      	ldr	r3, [pc, #20]	; (822b8 <pmc_enable_periph_clk+0x50>)
   822a2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   822a6:	2000      	movs	r0, #0
   822a8:	4770      	bx	lr
		return 1;
   822aa:	2001      	movs	r0, #1
   822ac:	4770      	bx	lr
	return 0;
   822ae:	2000      	movs	r0, #0
   822b0:	4770      	bx	lr
   822b2:	2000      	movs	r0, #0
}
   822b4:	4770      	bx	lr
   822b6:	bf00      	nop
   822b8:	400e0600 	.word	0x400e0600

000822bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   822bc:	e7fe      	b.n	822bc <Dummy_Handler>
	...

000822c0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   822c0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   822c2:	4b1c      	ldr	r3, [pc, #112]	; (82334 <Reset_Handler+0x74>)
   822c4:	4a1c      	ldr	r2, [pc, #112]	; (82338 <Reset_Handler+0x78>)
   822c6:	429a      	cmp	r2, r3
   822c8:	d010      	beq.n	822ec <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   822ca:	4b1c      	ldr	r3, [pc, #112]	; (8233c <Reset_Handler+0x7c>)
   822cc:	4a19      	ldr	r2, [pc, #100]	; (82334 <Reset_Handler+0x74>)
   822ce:	429a      	cmp	r2, r3
   822d0:	d20c      	bcs.n	822ec <Reset_Handler+0x2c>
   822d2:	3b01      	subs	r3, #1
   822d4:	1a9b      	subs	r3, r3, r2
   822d6:	f023 0303 	bic.w	r3, r3, #3
   822da:	3304      	adds	r3, #4
   822dc:	4413      	add	r3, r2
   822de:	4916      	ldr	r1, [pc, #88]	; (82338 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   822e0:	f851 0b04 	ldr.w	r0, [r1], #4
   822e4:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   822e8:	429a      	cmp	r2, r3
   822ea:	d1f9      	bne.n	822e0 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   822ec:	4b14      	ldr	r3, [pc, #80]	; (82340 <Reset_Handler+0x80>)
   822ee:	4a15      	ldr	r2, [pc, #84]	; (82344 <Reset_Handler+0x84>)
   822f0:	429a      	cmp	r2, r3
   822f2:	d20a      	bcs.n	8230a <Reset_Handler+0x4a>
   822f4:	3b01      	subs	r3, #1
   822f6:	1a9b      	subs	r3, r3, r2
   822f8:	f023 0303 	bic.w	r3, r3, #3
   822fc:	3304      	adds	r3, #4
   822fe:	4413      	add	r3, r2
		*pDest++ = 0;
   82300:	2100      	movs	r1, #0
   82302:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   82306:	4293      	cmp	r3, r2
   82308:	d1fb      	bne.n	82302 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8230a:	4b0f      	ldr	r3, [pc, #60]	; (82348 <Reset_Handler+0x88>)
   8230c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82310:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82314:	490d      	ldr	r1, [pc, #52]	; (8234c <Reset_Handler+0x8c>)
   82316:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82318:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8231c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82320:	d203      	bcs.n	8232a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82322:	688b      	ldr	r3, [r1, #8]
   82324:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82328:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8232a:	4b09      	ldr	r3, [pc, #36]	; (82350 <Reset_Handler+0x90>)
   8232c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8232e:	4b09      	ldr	r3, [pc, #36]	; (82354 <Reset_Handler+0x94>)
   82330:	4798      	blx	r3
   82332:	e7fe      	b.n	82332 <Reset_Handler+0x72>
   82334:	20070000 	.word	0x20070000
   82338:	000856f0 	.word	0x000856f0
   8233c:	20070b30 	.word	0x20070b30
   82340:	2007ae14 	.word	0x2007ae14
   82344:	20070b30 	.word	0x20070b30
   82348:	00080000 	.word	0x00080000
   8234c:	e000ed00 	.word	0xe000ed00
   82350:	00082621 	.word	0x00082621
   82354:	000824c1 	.word	0x000824c1

00082358 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82358:	4b3d      	ldr	r3, [pc, #244]	; (82450 <SystemCoreClockUpdate+0xf8>)
   8235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8235c:	f003 0303 	and.w	r3, r3, #3
   82360:	2b03      	cmp	r3, #3
   82362:	d80e      	bhi.n	82382 <SystemCoreClockUpdate+0x2a>
   82364:	e8df f003 	tbb	[pc, r3]
   82368:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8236c:	4b39      	ldr	r3, [pc, #228]	; (82454 <SystemCoreClockUpdate+0xfc>)
   8236e:	695b      	ldr	r3, [r3, #20]
   82370:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82374:	bf14      	ite	ne
   82376:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8237a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8237e:	4b36      	ldr	r3, [pc, #216]	; (82458 <SystemCoreClockUpdate+0x100>)
   82380:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82382:	4b33      	ldr	r3, [pc, #204]	; (82450 <SystemCoreClockUpdate+0xf8>)
   82384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82386:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8238a:	2b70      	cmp	r3, #112	; 0x70
   8238c:	d057      	beq.n	8243e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8238e:	4b30      	ldr	r3, [pc, #192]	; (82450 <SystemCoreClockUpdate+0xf8>)
   82390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82392:	4931      	ldr	r1, [pc, #196]	; (82458 <SystemCoreClockUpdate+0x100>)
   82394:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82398:	680b      	ldr	r3, [r1, #0]
   8239a:	40d3      	lsrs	r3, r2
   8239c:	600b      	str	r3, [r1, #0]
   8239e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   823a0:	4b2b      	ldr	r3, [pc, #172]	; (82450 <SystemCoreClockUpdate+0xf8>)
   823a2:	6a1b      	ldr	r3, [r3, #32]
   823a4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   823a8:	d003      	beq.n	823b2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   823aa:	4a2c      	ldr	r2, [pc, #176]	; (8245c <SystemCoreClockUpdate+0x104>)
   823ac:	4b2a      	ldr	r3, [pc, #168]	; (82458 <SystemCoreClockUpdate+0x100>)
   823ae:	601a      	str	r2, [r3, #0]
   823b0:	e7e7      	b.n	82382 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   823b2:	4a2b      	ldr	r2, [pc, #172]	; (82460 <SystemCoreClockUpdate+0x108>)
   823b4:	4b28      	ldr	r3, [pc, #160]	; (82458 <SystemCoreClockUpdate+0x100>)
   823b6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   823b8:	4b25      	ldr	r3, [pc, #148]	; (82450 <SystemCoreClockUpdate+0xf8>)
   823ba:	6a1b      	ldr	r3, [r3, #32]
   823bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   823c0:	2b10      	cmp	r3, #16
   823c2:	d005      	beq.n	823d0 <SystemCoreClockUpdate+0x78>
   823c4:	2b20      	cmp	r3, #32
   823c6:	d1dc      	bne.n	82382 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   823c8:	4a24      	ldr	r2, [pc, #144]	; (8245c <SystemCoreClockUpdate+0x104>)
   823ca:	4b23      	ldr	r3, [pc, #140]	; (82458 <SystemCoreClockUpdate+0x100>)
   823cc:	601a      	str	r2, [r3, #0]
				break;
   823ce:	e7d8      	b.n	82382 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   823d0:	4a24      	ldr	r2, [pc, #144]	; (82464 <SystemCoreClockUpdate+0x10c>)
   823d2:	4b21      	ldr	r3, [pc, #132]	; (82458 <SystemCoreClockUpdate+0x100>)
   823d4:	601a      	str	r2, [r3, #0]
				break;
   823d6:	e7d4      	b.n	82382 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   823d8:	4b1d      	ldr	r3, [pc, #116]	; (82450 <SystemCoreClockUpdate+0xf8>)
   823da:	6a1b      	ldr	r3, [r3, #32]
   823dc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   823e0:	d00c      	beq.n	823fc <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   823e2:	4a1e      	ldr	r2, [pc, #120]	; (8245c <SystemCoreClockUpdate+0x104>)
   823e4:	4b1c      	ldr	r3, [pc, #112]	; (82458 <SystemCoreClockUpdate+0x100>)
   823e6:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   823e8:	4b19      	ldr	r3, [pc, #100]	; (82450 <SystemCoreClockUpdate+0xf8>)
   823ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   823ec:	f003 0303 	and.w	r3, r3, #3
   823f0:	2b02      	cmp	r3, #2
   823f2:	d016      	beq.n	82422 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   823f4:	4a1c      	ldr	r2, [pc, #112]	; (82468 <SystemCoreClockUpdate+0x110>)
   823f6:	4b18      	ldr	r3, [pc, #96]	; (82458 <SystemCoreClockUpdate+0x100>)
   823f8:	601a      	str	r2, [r3, #0]
   823fa:	e7c2      	b.n	82382 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   823fc:	4a18      	ldr	r2, [pc, #96]	; (82460 <SystemCoreClockUpdate+0x108>)
   823fe:	4b16      	ldr	r3, [pc, #88]	; (82458 <SystemCoreClockUpdate+0x100>)
   82400:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82402:	4b13      	ldr	r3, [pc, #76]	; (82450 <SystemCoreClockUpdate+0xf8>)
   82404:	6a1b      	ldr	r3, [r3, #32]
   82406:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8240a:	2b10      	cmp	r3, #16
   8240c:	d005      	beq.n	8241a <SystemCoreClockUpdate+0xc2>
   8240e:	2b20      	cmp	r3, #32
   82410:	d1ea      	bne.n	823e8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   82412:	4a12      	ldr	r2, [pc, #72]	; (8245c <SystemCoreClockUpdate+0x104>)
   82414:	4b10      	ldr	r3, [pc, #64]	; (82458 <SystemCoreClockUpdate+0x100>)
   82416:	601a      	str	r2, [r3, #0]
				break;
   82418:	e7e6      	b.n	823e8 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8241a:	4a12      	ldr	r2, [pc, #72]	; (82464 <SystemCoreClockUpdate+0x10c>)
   8241c:	4b0e      	ldr	r3, [pc, #56]	; (82458 <SystemCoreClockUpdate+0x100>)
   8241e:	601a      	str	r2, [r3, #0]
				break;
   82420:	e7e2      	b.n	823e8 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82422:	4a0b      	ldr	r2, [pc, #44]	; (82450 <SystemCoreClockUpdate+0xf8>)
   82424:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82426:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82428:	480b      	ldr	r0, [pc, #44]	; (82458 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8242a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8242e:	6803      	ldr	r3, [r0, #0]
   82430:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82434:	b2d2      	uxtb	r2, r2
   82436:	fbb3 f3f2 	udiv	r3, r3, r2
   8243a:	6003      	str	r3, [r0, #0]
   8243c:	e7a1      	b.n	82382 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8243e:	4a06      	ldr	r2, [pc, #24]	; (82458 <SystemCoreClockUpdate+0x100>)
   82440:	6813      	ldr	r3, [r2, #0]
   82442:	490a      	ldr	r1, [pc, #40]	; (8246c <SystemCoreClockUpdate+0x114>)
   82444:	fba1 1303 	umull	r1, r3, r1, r3
   82448:	085b      	lsrs	r3, r3, #1
   8244a:	6013      	str	r3, [r2, #0]
   8244c:	4770      	bx	lr
   8244e:	bf00      	nop
   82450:	400e0600 	.word	0x400e0600
   82454:	400e1a10 	.word	0x400e1a10
   82458:	2007017c 	.word	0x2007017c
   8245c:	00b71b00 	.word	0x00b71b00
   82460:	003d0900 	.word	0x003d0900
   82464:	007a1200 	.word	0x007a1200
   82468:	0e4e1c00 	.word	0x0e4e1c00
   8246c:	aaaaaaab 	.word	0xaaaaaaab

00082470 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82470:	4b0a      	ldr	r3, [pc, #40]	; (8249c <_sbrk+0x2c>)
   82472:	681b      	ldr	r3, [r3, #0]
   82474:	b153      	cbz	r3, 8248c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   82476:	4b09      	ldr	r3, [pc, #36]	; (8249c <_sbrk+0x2c>)
   82478:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8247a:	181a      	adds	r2, r3, r0
   8247c:	4908      	ldr	r1, [pc, #32]	; (824a0 <_sbrk+0x30>)
   8247e:	4291      	cmp	r1, r2
   82480:	db08      	blt.n	82494 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   82482:	4610      	mov	r0, r2
   82484:	4a05      	ldr	r2, [pc, #20]	; (8249c <_sbrk+0x2c>)
   82486:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82488:	4618      	mov	r0, r3
   8248a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   8248c:	4a05      	ldr	r2, [pc, #20]	; (824a4 <_sbrk+0x34>)
   8248e:	4b03      	ldr	r3, [pc, #12]	; (8249c <_sbrk+0x2c>)
   82490:	601a      	str	r2, [r3, #0]
   82492:	e7f0      	b.n	82476 <_sbrk+0x6>
		return (caddr_t) -1;	
   82494:	f04f 30ff 	mov.w	r0, #4294967295
}
   82498:	4770      	bx	lr
   8249a:	bf00      	nop
   8249c:	2007ada8 	.word	0x2007ada8
   824a0:	20087ffc 	.word	0x20087ffc
   824a4:	2007ce18 	.word	0x2007ce18

000824a8 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   824a8:	f04f 30ff 	mov.w	r0, #4294967295
   824ac:	4770      	bx	lr

000824ae <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   824ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   824b2:	604b      	str	r3, [r1, #4]

	return 0;
}
   824b4:	2000      	movs	r0, #0
   824b6:	4770      	bx	lr

000824b8 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   824b8:	2001      	movs	r0, #1
   824ba:	4770      	bx	lr

000824bc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   824bc:	2000      	movs	r0, #0
   824be:	4770      	bx	lr

000824c0 <main>:
#include "drivers/delay.h"
#include "drivers/encoder.h"
#include "pin_mapper.h"

int main (void)
{
   824c0:	b570      	push	{r4, r5, r6, lr}
   824c2:	b084      	sub	sp, #16
	sysclk_init();
   824c4:	4b47      	ldr	r3, [pc, #284]	; (825e4 <main+0x124>)
   824c6:	4798      	blx	r3
	board_init();
   824c8:	4b47      	ldr	r3, [pc, #284]	; (825e8 <main+0x128>)
   824ca:	4798      	blx	r3

	delay_init();
   824cc:	4b47      	ldr	r3, [pc, #284]	; (825ec <main+0x12c>)
   824ce:	4798      	blx	r3
   824d0:	200b      	movs	r0, #11
   824d2:	4c47      	ldr	r4, [pc, #284]	; (825f0 <main+0x130>)
   824d4:	47a0      	blx	r4
   824d6:	200c      	movs	r0, #12
   824d8:	47a0      	blx	r4
   824da:	200d      	movs	r0, #13
   824dc:	47a0      	blx	r4
   824de:	200e      	movs	r0, #14
   824e0:	47a0      	blx	r4
	ioport_init();
	console_init();
   824e2:	4b44      	ldr	r3, [pc, #272]	; (825f4 <main+0x134>)
   824e4:	4798      	blx	r3
	encoder_init_pin_interrupt();
   824e6:	4b44      	ldr	r3, [pc, #272]	; (825f8 <main+0x138>)
   824e8:	4798      	blx	r3
	
	ioport_enable_pin(pin_mapper(TASK_DEBUG_ARM_PIN));
   824ea:	2033      	movs	r0, #51	; 0x33
   824ec:	4c43      	ldr	r4, [pc, #268]	; (825fc <main+0x13c>)
   824ee:	47a0      	blx	r4
	return 1U << (pin & 0x1F);
   824f0:	f000 031f 	and.w	r3, r0, #31
   824f4:	2501      	movs	r5, #1
   824f6:	fa05 f303 	lsl.w	r3, r5, r3
	return pin >> 5;
   824fa:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   824fc:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   82500:	f200 7007 	addw	r0, r0, #1799	; 0x707
   82504:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   82506:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(TASK_DEBUG_MOTOR_PIN));
   82508:	2035      	movs	r0, #53	; 0x35
   8250a:	47a0      	blx	r4
	return 1U << (pin & 0x1F);
   8250c:	f000 031f 	and.w	r3, r0, #31
   82510:	fa05 f303 	lsl.w	r3, r5, r3
	return pin >> 5;
   82514:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82516:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   8251a:	f200 7007 	addw	r0, r0, #1799	; 0x707
   8251e:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   82520:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(TASK_DEBUG_NAV_PIN));
   82522:	2034      	movs	r0, #52	; 0x34
   82524:	47a0      	blx	r4
	return 1U << (pin & 0x1F);
   82526:	f000 031f 	and.w	r3, r0, #31
   8252a:	fa05 f303 	lsl.w	r3, r5, r3
	return pin >> 5;
   8252e:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82530:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   82534:	f200 7007 	addw	r0, r0, #1799	; 0x707
   82538:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   8253a:	6003      	str	r3, [r0, #0]
	ioport_set_pin_dir(pin_mapper(TASK_DEBUG_ARM_PIN), IOPORT_DIR_OUTPUT);
   8253c:	2033      	movs	r0, #51	; 0x33
   8253e:	47a0      	blx	r4
	return pin >> 5;
   82540:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82542:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82546:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8254a:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   8254c:	f000 001f 	and.w	r0, r0, #31
   82550:	fa05 f000 	lsl.w	r0, r5, r0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82554:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82556:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(TASK_DEBUG_MOTOR_PIN), IOPORT_DIR_OUTPUT);
   8255a:	2035      	movs	r0, #53	; 0x35
   8255c:	47a0      	blx	r4
	return pin >> 5;
   8255e:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82560:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82564:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82568:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   8256a:	f000 001f 	and.w	r0, r0, #31
   8256e:	fa05 f000 	lsl.w	r0, r5, r0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82572:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82574:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(TASK_DEBUG_NAV_PIN), IOPORT_DIR_OUTPUT);
   82578:	2034      	movs	r0, #52	; 0x34
   8257a:	47a0      	blx	r4
	return pin >> 5;
   8257c:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8257e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82582:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82586:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   82588:	f000 001f 	and.w	r0, r0, #31
   8258c:	fa05 f000 	lsl.w	r0, r5, r0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82590:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82592:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	
	/* Create our tasks for the program */
	xTaskCreate(motor_task, (const signed char * const) "motor_task", TASK_MOTOR_STACK_SIZE, NULL, TASK_MOTOR_PRIORITY, NULL);
   82596:	2400      	movs	r4, #0
   82598:	9403      	str	r4, [sp, #12]
   8259a:	9402      	str	r4, [sp, #8]
   8259c:	9401      	str	r4, [sp, #4]
   8259e:	2302      	movs	r3, #2
   825a0:	9300      	str	r3, [sp, #0]
   825a2:	4623      	mov	r3, r4
   825a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   825a8:	4915      	ldr	r1, [pc, #84]	; (82600 <main+0x140>)
   825aa:	4816      	ldr	r0, [pc, #88]	; (82604 <main+0x144>)
   825ac:	4e16      	ldr	r6, [pc, #88]	; (82608 <main+0x148>)
   825ae:	47b0      	blx	r6
	xTaskCreate(nav_task, (const signed char * const) "navigation_task", TASK_NAV_STACK_SIZE, NULL, TASK_NAV_PRIORITY, NULL);
   825b0:	9403      	str	r4, [sp, #12]
   825b2:	9402      	str	r4, [sp, #8]
   825b4:	9401      	str	r4, [sp, #4]
   825b6:	9500      	str	r5, [sp, #0]
   825b8:	4623      	mov	r3, r4
   825ba:	f44f 7200 	mov.w	r2, #512	; 0x200
   825be:	4913      	ldr	r1, [pc, #76]	; (8260c <main+0x14c>)
   825c0:	4813      	ldr	r0, [pc, #76]	; (82610 <main+0x150>)
   825c2:	47b0      	blx	r6
	xTaskCreate(arm_task, (const signed char * const) "arm_task", TASK_ARM_STACK_SIZE, NULL, TASK_ARM_PRIORITY, NULL);
   825c4:	9403      	str	r4, [sp, #12]
   825c6:	9402      	str	r4, [sp, #8]
   825c8:	9401      	str	r4, [sp, #4]
   825ca:	9500      	str	r5, [sp, #0]
   825cc:	4623      	mov	r3, r4
   825ce:	f44f 7200 	mov.w	r2, #512	; 0x200
   825d2:	4910      	ldr	r1, [pc, #64]	; (82614 <main+0x154>)
   825d4:	4810      	ldr	r0, [pc, #64]	; (82618 <main+0x158>)
   825d6:	47b0      	blx	r6
	
	vTaskStartScheduler();
   825d8:	4b10      	ldr	r3, [pc, #64]	; (8261c <main+0x15c>)
   825da:	4798      	blx	r3
	
	return 0;
}
   825dc:	4620      	mov	r0, r4
   825de:	b004      	add	sp, #16
   825e0:	bd70      	pop	{r4, r5, r6, pc}
   825e2:	bf00      	nop
   825e4:	00081d51 	.word	0x00081d51
   825e8:	00081db5 	.word	0x00081db5
   825ec:	00081ba5 	.word	0x00081ba5
   825f0:	00082269 	.word	0x00082269
   825f4:	00081b11 	.word	0x00081b11
   825f8:	000817f5 	.word	0x000817f5
   825fc:	00081931 	.word	0x00081931
   82600:	00085534 	.word	0x00085534
   82604:	00081861 	.word	0x00081861
   82608:	00080b25 	.word	0x00080b25
   8260c:	00085540 	.word	0x00085540
   82610:	000818ed 	.word	0x000818ed
   82614:	00085550 	.word	0x00085550
   82618:	00080161 	.word	0x00080161
   8261c:	00080d29 	.word	0x00080d29

00082620 <__libc_init_array>:
   82620:	b570      	push	{r4, r5, r6, lr}
   82622:	4e0f      	ldr	r6, [pc, #60]	; (82660 <__libc_init_array+0x40>)
   82624:	4d0f      	ldr	r5, [pc, #60]	; (82664 <__libc_init_array+0x44>)
   82626:	1b76      	subs	r6, r6, r5
   82628:	10b6      	asrs	r6, r6, #2
   8262a:	bf18      	it	ne
   8262c:	2400      	movne	r4, #0
   8262e:	d005      	beq.n	8263c <__libc_init_array+0x1c>
   82630:	3401      	adds	r4, #1
   82632:	f855 3b04 	ldr.w	r3, [r5], #4
   82636:	4798      	blx	r3
   82638:	42a6      	cmp	r6, r4
   8263a:	d1f9      	bne.n	82630 <__libc_init_array+0x10>
   8263c:	4e0a      	ldr	r6, [pc, #40]	; (82668 <__libc_init_array+0x48>)
   8263e:	4d0b      	ldr	r5, [pc, #44]	; (8266c <__libc_init_array+0x4c>)
   82640:	f003 f840 	bl	856c4 <_init>
   82644:	1b76      	subs	r6, r6, r5
   82646:	10b6      	asrs	r6, r6, #2
   82648:	bf18      	it	ne
   8264a:	2400      	movne	r4, #0
   8264c:	d006      	beq.n	8265c <__libc_init_array+0x3c>
   8264e:	3401      	adds	r4, #1
   82650:	f855 3b04 	ldr.w	r3, [r5], #4
   82654:	4798      	blx	r3
   82656:	42a6      	cmp	r6, r4
   82658:	d1f9      	bne.n	8264e <__libc_init_array+0x2e>
   8265a:	bd70      	pop	{r4, r5, r6, pc}
   8265c:	bd70      	pop	{r4, r5, r6, pc}
   8265e:	bf00      	nop
   82660:	000856d0 	.word	0x000856d0
   82664:	000856d0 	.word	0x000856d0
   82668:	000856d8 	.word	0x000856d8
   8266c:	000856d0 	.word	0x000856d0

00082670 <iprintf>:
   82670:	b40f      	push	{r0, r1, r2, r3}
   82672:	b510      	push	{r4, lr}
   82674:	4b07      	ldr	r3, [pc, #28]	; (82694 <iprintf+0x24>)
   82676:	b082      	sub	sp, #8
   82678:	ac04      	add	r4, sp, #16
   8267a:	f854 2b04 	ldr.w	r2, [r4], #4
   8267e:	6818      	ldr	r0, [r3, #0]
   82680:	4623      	mov	r3, r4
   82682:	6881      	ldr	r1, [r0, #8]
   82684:	9401      	str	r4, [sp, #4]
   82686:	f000 fa3b 	bl	82b00 <_vfiprintf_r>
   8268a:	b002      	add	sp, #8
   8268c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82690:	b004      	add	sp, #16
   82692:	4770      	bx	lr
   82694:	20070180 	.word	0x20070180

00082698 <memcpy>:
   82698:	4684      	mov	ip, r0
   8269a:	ea41 0300 	orr.w	r3, r1, r0
   8269e:	f013 0303 	ands.w	r3, r3, #3
   826a2:	d149      	bne.n	82738 <memcpy+0xa0>
   826a4:	3a40      	subs	r2, #64	; 0x40
   826a6:	d323      	bcc.n	826f0 <memcpy+0x58>
   826a8:	680b      	ldr	r3, [r1, #0]
   826aa:	6003      	str	r3, [r0, #0]
   826ac:	684b      	ldr	r3, [r1, #4]
   826ae:	6043      	str	r3, [r0, #4]
   826b0:	688b      	ldr	r3, [r1, #8]
   826b2:	6083      	str	r3, [r0, #8]
   826b4:	68cb      	ldr	r3, [r1, #12]
   826b6:	60c3      	str	r3, [r0, #12]
   826b8:	690b      	ldr	r3, [r1, #16]
   826ba:	6103      	str	r3, [r0, #16]
   826bc:	694b      	ldr	r3, [r1, #20]
   826be:	6143      	str	r3, [r0, #20]
   826c0:	698b      	ldr	r3, [r1, #24]
   826c2:	6183      	str	r3, [r0, #24]
   826c4:	69cb      	ldr	r3, [r1, #28]
   826c6:	61c3      	str	r3, [r0, #28]
   826c8:	6a0b      	ldr	r3, [r1, #32]
   826ca:	6203      	str	r3, [r0, #32]
   826cc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   826ce:	6243      	str	r3, [r0, #36]	; 0x24
   826d0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   826d2:	6283      	str	r3, [r0, #40]	; 0x28
   826d4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   826d6:	62c3      	str	r3, [r0, #44]	; 0x2c
   826d8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   826da:	6303      	str	r3, [r0, #48]	; 0x30
   826dc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   826de:	6343      	str	r3, [r0, #52]	; 0x34
   826e0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   826e2:	6383      	str	r3, [r0, #56]	; 0x38
   826e4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   826e6:	63c3      	str	r3, [r0, #60]	; 0x3c
   826e8:	3040      	adds	r0, #64	; 0x40
   826ea:	3140      	adds	r1, #64	; 0x40
   826ec:	3a40      	subs	r2, #64	; 0x40
   826ee:	d2db      	bcs.n	826a8 <memcpy+0x10>
   826f0:	3230      	adds	r2, #48	; 0x30
   826f2:	d30b      	bcc.n	8270c <memcpy+0x74>
   826f4:	680b      	ldr	r3, [r1, #0]
   826f6:	6003      	str	r3, [r0, #0]
   826f8:	684b      	ldr	r3, [r1, #4]
   826fa:	6043      	str	r3, [r0, #4]
   826fc:	688b      	ldr	r3, [r1, #8]
   826fe:	6083      	str	r3, [r0, #8]
   82700:	68cb      	ldr	r3, [r1, #12]
   82702:	60c3      	str	r3, [r0, #12]
   82704:	3010      	adds	r0, #16
   82706:	3110      	adds	r1, #16
   82708:	3a10      	subs	r2, #16
   8270a:	d2f3      	bcs.n	826f4 <memcpy+0x5c>
   8270c:	320c      	adds	r2, #12
   8270e:	d305      	bcc.n	8271c <memcpy+0x84>
   82710:	f851 3b04 	ldr.w	r3, [r1], #4
   82714:	f840 3b04 	str.w	r3, [r0], #4
   82718:	3a04      	subs	r2, #4
   8271a:	d2f9      	bcs.n	82710 <memcpy+0x78>
   8271c:	3204      	adds	r2, #4
   8271e:	d008      	beq.n	82732 <memcpy+0x9a>
   82720:	07d2      	lsls	r2, r2, #31
   82722:	bf1c      	itt	ne
   82724:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82728:	f800 3b01 	strbne.w	r3, [r0], #1
   8272c:	d301      	bcc.n	82732 <memcpy+0x9a>
   8272e:	880b      	ldrh	r3, [r1, #0]
   82730:	8003      	strh	r3, [r0, #0]
   82732:	4660      	mov	r0, ip
   82734:	4770      	bx	lr
   82736:	bf00      	nop
   82738:	2a08      	cmp	r2, #8
   8273a:	d313      	bcc.n	82764 <memcpy+0xcc>
   8273c:	078b      	lsls	r3, r1, #30
   8273e:	d0b1      	beq.n	826a4 <memcpy+0xc>
   82740:	f010 0303 	ands.w	r3, r0, #3
   82744:	d0ae      	beq.n	826a4 <memcpy+0xc>
   82746:	f1c3 0304 	rsb	r3, r3, #4
   8274a:	1ad2      	subs	r2, r2, r3
   8274c:	07db      	lsls	r3, r3, #31
   8274e:	bf1c      	itt	ne
   82750:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82754:	f800 3b01 	strbne.w	r3, [r0], #1
   82758:	d3a4      	bcc.n	826a4 <memcpy+0xc>
   8275a:	f831 3b02 	ldrh.w	r3, [r1], #2
   8275e:	f820 3b02 	strh.w	r3, [r0], #2
   82762:	e79f      	b.n	826a4 <memcpy+0xc>
   82764:	3a04      	subs	r2, #4
   82766:	d3d9      	bcc.n	8271c <memcpy+0x84>
   82768:	3a01      	subs	r2, #1
   8276a:	f811 3b01 	ldrb.w	r3, [r1], #1
   8276e:	f800 3b01 	strb.w	r3, [r0], #1
   82772:	d2f9      	bcs.n	82768 <memcpy+0xd0>
   82774:	780b      	ldrb	r3, [r1, #0]
   82776:	7003      	strb	r3, [r0, #0]
   82778:	784b      	ldrb	r3, [r1, #1]
   8277a:	7043      	strb	r3, [r0, #1]
   8277c:	788b      	ldrb	r3, [r1, #2]
   8277e:	7083      	strb	r3, [r0, #2]
   82780:	4660      	mov	r0, ip
   82782:	4770      	bx	lr

00082784 <memset>:
   82784:	b470      	push	{r4, r5, r6}
   82786:	0786      	lsls	r6, r0, #30
   82788:	d046      	beq.n	82818 <memset+0x94>
   8278a:	1e54      	subs	r4, r2, #1
   8278c:	2a00      	cmp	r2, #0
   8278e:	d041      	beq.n	82814 <memset+0x90>
   82790:	b2ca      	uxtb	r2, r1
   82792:	4603      	mov	r3, r0
   82794:	e002      	b.n	8279c <memset+0x18>
   82796:	f114 34ff 	adds.w	r4, r4, #4294967295
   8279a:	d33b      	bcc.n	82814 <memset+0x90>
   8279c:	f803 2b01 	strb.w	r2, [r3], #1
   827a0:	079d      	lsls	r5, r3, #30
   827a2:	d1f8      	bne.n	82796 <memset+0x12>
   827a4:	2c03      	cmp	r4, #3
   827a6:	d92e      	bls.n	82806 <memset+0x82>
   827a8:	b2cd      	uxtb	r5, r1
   827aa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   827ae:	2c0f      	cmp	r4, #15
   827b0:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   827b4:	d919      	bls.n	827ea <memset+0x66>
   827b6:	4626      	mov	r6, r4
   827b8:	f103 0210 	add.w	r2, r3, #16
   827bc:	3e10      	subs	r6, #16
   827be:	2e0f      	cmp	r6, #15
   827c0:	f842 5c10 	str.w	r5, [r2, #-16]
   827c4:	f842 5c0c 	str.w	r5, [r2, #-12]
   827c8:	f842 5c08 	str.w	r5, [r2, #-8]
   827cc:	f842 5c04 	str.w	r5, [r2, #-4]
   827d0:	f102 0210 	add.w	r2, r2, #16
   827d4:	d8f2      	bhi.n	827bc <memset+0x38>
   827d6:	f1a4 0210 	sub.w	r2, r4, #16
   827da:	f022 020f 	bic.w	r2, r2, #15
   827de:	f004 040f 	and.w	r4, r4, #15
   827e2:	3210      	adds	r2, #16
   827e4:	2c03      	cmp	r4, #3
   827e6:	4413      	add	r3, r2
   827e8:	d90d      	bls.n	82806 <memset+0x82>
   827ea:	461e      	mov	r6, r3
   827ec:	4622      	mov	r2, r4
   827ee:	3a04      	subs	r2, #4
   827f0:	2a03      	cmp	r2, #3
   827f2:	f846 5b04 	str.w	r5, [r6], #4
   827f6:	d8fa      	bhi.n	827ee <memset+0x6a>
   827f8:	1f22      	subs	r2, r4, #4
   827fa:	f022 0203 	bic.w	r2, r2, #3
   827fe:	3204      	adds	r2, #4
   82800:	4413      	add	r3, r2
   82802:	f004 0403 	and.w	r4, r4, #3
   82806:	b12c      	cbz	r4, 82814 <memset+0x90>
   82808:	b2c9      	uxtb	r1, r1
   8280a:	441c      	add	r4, r3
   8280c:	f803 1b01 	strb.w	r1, [r3], #1
   82810:	429c      	cmp	r4, r3
   82812:	d1fb      	bne.n	8280c <memset+0x88>
   82814:	bc70      	pop	{r4, r5, r6}
   82816:	4770      	bx	lr
   82818:	4614      	mov	r4, r2
   8281a:	4603      	mov	r3, r0
   8281c:	e7c2      	b.n	827a4 <memset+0x20>
   8281e:	bf00      	nop

00082820 <setbuf>:
   82820:	2900      	cmp	r1, #0
   82822:	bf0c      	ite	eq
   82824:	2202      	moveq	r2, #2
   82826:	2200      	movne	r2, #0
   82828:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8282c:	f000 b800 	b.w	82830 <setvbuf>

00082830 <setvbuf>:
   82830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82834:	4d61      	ldr	r5, [pc, #388]	; (829bc <setvbuf+0x18c>)
   82836:	b083      	sub	sp, #12
   82838:	682d      	ldr	r5, [r5, #0]
   8283a:	4604      	mov	r4, r0
   8283c:	460f      	mov	r7, r1
   8283e:	4690      	mov	r8, r2
   82840:	461e      	mov	r6, r3
   82842:	b115      	cbz	r5, 8284a <setvbuf+0x1a>
   82844:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82846:	2b00      	cmp	r3, #0
   82848:	d064      	beq.n	82914 <setvbuf+0xe4>
   8284a:	f1b8 0f02 	cmp.w	r8, #2
   8284e:	d006      	beq.n	8285e <setvbuf+0x2e>
   82850:	f1b8 0f01 	cmp.w	r8, #1
   82854:	f200 809f 	bhi.w	82996 <setvbuf+0x166>
   82858:	2e00      	cmp	r6, #0
   8285a:	f2c0 809c 	blt.w	82996 <setvbuf+0x166>
   8285e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82860:	07d8      	lsls	r0, r3, #31
   82862:	d534      	bpl.n	828ce <setvbuf+0x9e>
   82864:	4621      	mov	r1, r4
   82866:	4628      	mov	r0, r5
   82868:	f001 f8e2 	bl	83a30 <_fflush_r>
   8286c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8286e:	b141      	cbz	r1, 82882 <setvbuf+0x52>
   82870:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82874:	4299      	cmp	r1, r3
   82876:	d002      	beq.n	8287e <setvbuf+0x4e>
   82878:	4628      	mov	r0, r5
   8287a:	f001 fa57 	bl	83d2c <_free_r>
   8287e:	2300      	movs	r3, #0
   82880:	6323      	str	r3, [r4, #48]	; 0x30
   82882:	2200      	movs	r2, #0
   82884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82888:	61a2      	str	r2, [r4, #24]
   8288a:	6062      	str	r2, [r4, #4]
   8288c:	061a      	lsls	r2, r3, #24
   8288e:	d43a      	bmi.n	82906 <setvbuf+0xd6>
   82890:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82894:	f023 0303 	bic.w	r3, r3, #3
   82898:	f1b8 0f02 	cmp.w	r8, #2
   8289c:	81a3      	strh	r3, [r4, #12]
   8289e:	d01d      	beq.n	828dc <setvbuf+0xac>
   828a0:	ab01      	add	r3, sp, #4
   828a2:	466a      	mov	r2, sp
   828a4:	4621      	mov	r1, r4
   828a6:	4628      	mov	r0, r5
   828a8:	f001 fcde 	bl	84268 <__swhatbuf_r>
   828ac:	89a3      	ldrh	r3, [r4, #12]
   828ae:	4318      	orrs	r0, r3
   828b0:	81a0      	strh	r0, [r4, #12]
   828b2:	2e00      	cmp	r6, #0
   828b4:	d132      	bne.n	8291c <setvbuf+0xec>
   828b6:	9e00      	ldr	r6, [sp, #0]
   828b8:	4630      	mov	r0, r6
   828ba:	f001 fd4d 	bl	84358 <malloc>
   828be:	4607      	mov	r7, r0
   828c0:	2800      	cmp	r0, #0
   828c2:	d06b      	beq.n	8299c <setvbuf+0x16c>
   828c4:	89a3      	ldrh	r3, [r4, #12]
   828c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   828ca:	81a3      	strh	r3, [r4, #12]
   828cc:	e028      	b.n	82920 <setvbuf+0xf0>
   828ce:	89a3      	ldrh	r3, [r4, #12]
   828d0:	0599      	lsls	r1, r3, #22
   828d2:	d4c7      	bmi.n	82864 <setvbuf+0x34>
   828d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   828d6:	f001 fcc3 	bl	84260 <__retarget_lock_acquire_recursive>
   828da:	e7c3      	b.n	82864 <setvbuf+0x34>
   828dc:	2500      	movs	r5, #0
   828de:	2600      	movs	r6, #0
   828e0:	2001      	movs	r0, #1
   828e2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   828e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   828e8:	f043 0302 	orr.w	r3, r3, #2
   828ec:	60a6      	str	r6, [r4, #8]
   828ee:	07ce      	lsls	r6, r1, #31
   828f0:	81a3      	strh	r3, [r4, #12]
   828f2:	6160      	str	r0, [r4, #20]
   828f4:	6022      	str	r2, [r4, #0]
   828f6:	6122      	str	r2, [r4, #16]
   828f8:	d401      	bmi.n	828fe <setvbuf+0xce>
   828fa:	0598      	lsls	r0, r3, #22
   828fc:	d53e      	bpl.n	8297c <setvbuf+0x14c>
   828fe:	4628      	mov	r0, r5
   82900:	b003      	add	sp, #12
   82902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82906:	6921      	ldr	r1, [r4, #16]
   82908:	4628      	mov	r0, r5
   8290a:	f001 fa0f 	bl	83d2c <_free_r>
   8290e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82912:	e7bd      	b.n	82890 <setvbuf+0x60>
   82914:	4628      	mov	r0, r5
   82916:	f001 f8e3 	bl	83ae0 <__sinit>
   8291a:	e796      	b.n	8284a <setvbuf+0x1a>
   8291c:	2f00      	cmp	r7, #0
   8291e:	d0cb      	beq.n	828b8 <setvbuf+0x88>
   82920:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82922:	2b00      	cmp	r3, #0
   82924:	d033      	beq.n	8298e <setvbuf+0x15e>
   82926:	9b00      	ldr	r3, [sp, #0]
   82928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8292c:	429e      	cmp	r6, r3
   8292e:	bf1c      	itt	ne
   82930:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82934:	81a2      	strhne	r2, [r4, #12]
   82936:	f1b8 0f01 	cmp.w	r8, #1
   8293a:	bf04      	itt	eq
   8293c:	f042 0201 	orreq.w	r2, r2, #1
   82940:	81a2      	strheq	r2, [r4, #12]
   82942:	b292      	uxth	r2, r2
   82944:	f012 0308 	ands.w	r3, r2, #8
   82948:	6027      	str	r7, [r4, #0]
   8294a:	6127      	str	r7, [r4, #16]
   8294c:	6166      	str	r6, [r4, #20]
   8294e:	d00e      	beq.n	8296e <setvbuf+0x13e>
   82950:	07d1      	lsls	r1, r2, #31
   82952:	d51a      	bpl.n	8298a <setvbuf+0x15a>
   82954:	2300      	movs	r3, #0
   82956:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82958:	4276      	negs	r6, r6
   8295a:	f015 0501 	ands.w	r5, r5, #1
   8295e:	61a6      	str	r6, [r4, #24]
   82960:	60a3      	str	r3, [r4, #8]
   82962:	d009      	beq.n	82978 <setvbuf+0x148>
   82964:	2500      	movs	r5, #0
   82966:	4628      	mov	r0, r5
   82968:	b003      	add	sp, #12
   8296a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8296e:	60a3      	str	r3, [r4, #8]
   82970:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82972:	f015 0501 	ands.w	r5, r5, #1
   82976:	d1f5      	bne.n	82964 <setvbuf+0x134>
   82978:	0593      	lsls	r3, r2, #22
   8297a:	d4c0      	bmi.n	828fe <setvbuf+0xce>
   8297c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8297e:	f001 fc71 	bl	84264 <__retarget_lock_release_recursive>
   82982:	4628      	mov	r0, r5
   82984:	b003      	add	sp, #12
   82986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8298a:	60a6      	str	r6, [r4, #8]
   8298c:	e7f0      	b.n	82970 <setvbuf+0x140>
   8298e:	4628      	mov	r0, r5
   82990:	f001 f8a6 	bl	83ae0 <__sinit>
   82994:	e7c7      	b.n	82926 <setvbuf+0xf6>
   82996:	f04f 35ff 	mov.w	r5, #4294967295
   8299a:	e7b0      	b.n	828fe <setvbuf+0xce>
   8299c:	f8dd 9000 	ldr.w	r9, [sp]
   829a0:	45b1      	cmp	r9, r6
   829a2:	d004      	beq.n	829ae <setvbuf+0x17e>
   829a4:	4648      	mov	r0, r9
   829a6:	f001 fcd7 	bl	84358 <malloc>
   829aa:	4607      	mov	r7, r0
   829ac:	b920      	cbnz	r0, 829b8 <setvbuf+0x188>
   829ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   829b2:	f04f 35ff 	mov.w	r5, #4294967295
   829b6:	e792      	b.n	828de <setvbuf+0xae>
   829b8:	464e      	mov	r6, r9
   829ba:	e783      	b.n	828c4 <setvbuf+0x94>
   829bc:	20070180 	.word	0x20070180

000829c0 <strlen>:
   829c0:	f020 0103 	bic.w	r1, r0, #3
   829c4:	f010 0003 	ands.w	r0, r0, #3
   829c8:	f1c0 0000 	rsb	r0, r0, #0
   829cc:	f851 3b04 	ldr.w	r3, [r1], #4
   829d0:	f100 0c04 	add.w	ip, r0, #4
   829d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   829d8:	f06f 0200 	mvn.w	r2, #0
   829dc:	bf1c      	itt	ne
   829de:	fa22 f20c 	lsrne.w	r2, r2, ip
   829e2:	4313      	orrne	r3, r2
   829e4:	f04f 0c01 	mov.w	ip, #1
   829e8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   829ec:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   829f0:	eba3 020c 	sub.w	r2, r3, ip
   829f4:	ea22 0203 	bic.w	r2, r2, r3
   829f8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   829fc:	bf04      	itt	eq
   829fe:	f851 3b04 	ldreq.w	r3, [r1], #4
   82a02:	3004      	addeq	r0, #4
   82a04:	d0f4      	beq.n	829f0 <strlen+0x30>
   82a06:	f1c2 0100 	rsb	r1, r2, #0
   82a0a:	ea02 0201 	and.w	r2, r2, r1
   82a0e:	fab2 f282 	clz	r2, r2
   82a12:	f1c2 021f 	rsb	r2, r2, #31
   82a16:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82a1a:	4770      	bx	lr

00082a1c <strncpy>:
   82a1c:	ea40 0301 	orr.w	r3, r0, r1
   82a20:	f013 0f03 	tst.w	r3, #3
   82a24:	b470      	push	{r4, r5, r6}
   82a26:	4603      	mov	r3, r0
   82a28:	d024      	beq.n	82a74 <strncpy+0x58>
   82a2a:	b1a2      	cbz	r2, 82a56 <strncpy+0x3a>
   82a2c:	780c      	ldrb	r4, [r1, #0]
   82a2e:	3a01      	subs	r2, #1
   82a30:	701c      	strb	r4, [r3, #0]
   82a32:	3101      	adds	r1, #1
   82a34:	3301      	adds	r3, #1
   82a36:	b13c      	cbz	r4, 82a48 <strncpy+0x2c>
   82a38:	b16a      	cbz	r2, 82a56 <strncpy+0x3a>
   82a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
   82a3e:	3a01      	subs	r2, #1
   82a40:	f803 4b01 	strb.w	r4, [r3], #1
   82a44:	2c00      	cmp	r4, #0
   82a46:	d1f7      	bne.n	82a38 <strncpy+0x1c>
   82a48:	b12a      	cbz	r2, 82a56 <strncpy+0x3a>
   82a4a:	2100      	movs	r1, #0
   82a4c:	441a      	add	r2, r3
   82a4e:	f803 1b01 	strb.w	r1, [r3], #1
   82a52:	429a      	cmp	r2, r3
   82a54:	d1fb      	bne.n	82a4e <strncpy+0x32>
   82a56:	bc70      	pop	{r4, r5, r6}
   82a58:	4770      	bx	lr
   82a5a:	460e      	mov	r6, r1
   82a5c:	f851 5b04 	ldr.w	r5, [r1], #4
   82a60:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   82a64:	ea24 0405 	bic.w	r4, r4, r5
   82a68:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   82a6c:	d105      	bne.n	82a7a <strncpy+0x5e>
   82a6e:	3a04      	subs	r2, #4
   82a70:	f843 5b04 	str.w	r5, [r3], #4
   82a74:	2a03      	cmp	r2, #3
   82a76:	d8f0      	bhi.n	82a5a <strncpy+0x3e>
   82a78:	e7d7      	b.n	82a2a <strncpy+0xe>
   82a7a:	4631      	mov	r1, r6
   82a7c:	e7d6      	b.n	82a2c <strncpy+0x10>
   82a7e:	bf00      	nop

00082a80 <__sprint_r.part.0>:
   82a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a84:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82a86:	4693      	mov	fp, r2
   82a88:	049c      	lsls	r4, r3, #18
   82a8a:	d52f      	bpl.n	82aec <__sprint_r.part.0+0x6c>
   82a8c:	6893      	ldr	r3, [r2, #8]
   82a8e:	6812      	ldr	r2, [r2, #0]
   82a90:	b353      	cbz	r3, 82ae8 <__sprint_r.part.0+0x68>
   82a92:	460e      	mov	r6, r1
   82a94:	4607      	mov	r7, r0
   82a96:	f102 0908 	add.w	r9, r2, #8
   82a9a:	e919 0420 	ldmdb	r9, {r5, sl}
   82a9e:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82aa2:	d017      	beq.n	82ad4 <__sprint_r.part.0+0x54>
   82aa4:	2400      	movs	r4, #0
   82aa6:	3d04      	subs	r5, #4
   82aa8:	e001      	b.n	82aae <__sprint_r.part.0+0x2e>
   82aaa:	45a0      	cmp	r8, r4
   82aac:	d010      	beq.n	82ad0 <__sprint_r.part.0+0x50>
   82aae:	4632      	mov	r2, r6
   82ab0:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82ab4:	4638      	mov	r0, r7
   82ab6:	f001 f8b5 	bl	83c24 <_fputwc_r>
   82aba:	1c43      	adds	r3, r0, #1
   82abc:	f104 0401 	add.w	r4, r4, #1
   82ac0:	d1f3      	bne.n	82aaa <__sprint_r.part.0+0x2a>
   82ac2:	2300      	movs	r3, #0
   82ac4:	f8cb 3008 	str.w	r3, [fp, #8]
   82ac8:	f8cb 3004 	str.w	r3, [fp, #4]
   82acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ad0:	f8db 3008 	ldr.w	r3, [fp, #8]
   82ad4:	f02a 0a03 	bic.w	sl, sl, #3
   82ad8:	eba3 030a 	sub.w	r3, r3, sl
   82adc:	f8cb 3008 	str.w	r3, [fp, #8]
   82ae0:	f109 0908 	add.w	r9, r9, #8
   82ae4:	2b00      	cmp	r3, #0
   82ae6:	d1d8      	bne.n	82a9a <__sprint_r.part.0+0x1a>
   82ae8:	2000      	movs	r0, #0
   82aea:	e7ea      	b.n	82ac2 <__sprint_r.part.0+0x42>
   82aec:	f001 fa04 	bl	83ef8 <__sfvwrite_r>
   82af0:	2300      	movs	r3, #0
   82af2:	f8cb 3008 	str.w	r3, [fp, #8]
   82af6:	f8cb 3004 	str.w	r3, [fp, #4]
   82afa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82afe:	bf00      	nop

00082b00 <_vfiprintf_r>:
   82b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b04:	b0ad      	sub	sp, #180	; 0xb4
   82b06:	461d      	mov	r5, r3
   82b08:	468b      	mov	fp, r1
   82b0a:	4690      	mov	r8, r2
   82b0c:	9307      	str	r3, [sp, #28]
   82b0e:	9006      	str	r0, [sp, #24]
   82b10:	b118      	cbz	r0, 82b1a <_vfiprintf_r+0x1a>
   82b12:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82b14:	2b00      	cmp	r3, #0
   82b16:	f000 80f3 	beq.w	82d00 <_vfiprintf_r+0x200>
   82b1a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82b1e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82b22:	07df      	lsls	r7, r3, #31
   82b24:	b281      	uxth	r1, r0
   82b26:	d402      	bmi.n	82b2e <_vfiprintf_r+0x2e>
   82b28:	058e      	lsls	r6, r1, #22
   82b2a:	f140 80fc 	bpl.w	82d26 <_vfiprintf_r+0x226>
   82b2e:	048c      	lsls	r4, r1, #18
   82b30:	d40a      	bmi.n	82b48 <_vfiprintf_r+0x48>
   82b32:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82b36:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   82b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82b3e:	f8ab 100c 	strh.w	r1, [fp, #12]
   82b42:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   82b46:	b289      	uxth	r1, r1
   82b48:	0708      	lsls	r0, r1, #28
   82b4a:	f140 80b3 	bpl.w	82cb4 <_vfiprintf_r+0x1b4>
   82b4e:	f8db 3010 	ldr.w	r3, [fp, #16]
   82b52:	2b00      	cmp	r3, #0
   82b54:	f000 80ae 	beq.w	82cb4 <_vfiprintf_r+0x1b4>
   82b58:	f001 031a 	and.w	r3, r1, #26
   82b5c:	2b0a      	cmp	r3, #10
   82b5e:	f000 80b5 	beq.w	82ccc <_vfiprintf_r+0x1cc>
   82b62:	2300      	movs	r3, #0
   82b64:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   82b68:	46d1      	mov	r9, sl
   82b6a:	930b      	str	r3, [sp, #44]	; 0x2c
   82b6c:	9303      	str	r3, [sp, #12]
   82b6e:	9311      	str	r3, [sp, #68]	; 0x44
   82b70:	9310      	str	r3, [sp, #64]	; 0x40
   82b72:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   82b76:	f8cd b010 	str.w	fp, [sp, #16]
   82b7a:	f898 3000 	ldrb.w	r3, [r8]
   82b7e:	4644      	mov	r4, r8
   82b80:	b1fb      	cbz	r3, 82bc2 <_vfiprintf_r+0xc2>
   82b82:	2b25      	cmp	r3, #37	; 0x25
   82b84:	d102      	bne.n	82b8c <_vfiprintf_r+0x8c>
   82b86:	e01c      	b.n	82bc2 <_vfiprintf_r+0xc2>
   82b88:	2b25      	cmp	r3, #37	; 0x25
   82b8a:	d003      	beq.n	82b94 <_vfiprintf_r+0x94>
   82b8c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82b90:	2b00      	cmp	r3, #0
   82b92:	d1f9      	bne.n	82b88 <_vfiprintf_r+0x88>
   82b94:	eba4 0508 	sub.w	r5, r4, r8
   82b98:	b19d      	cbz	r5, 82bc2 <_vfiprintf_r+0xc2>
   82b9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82b9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82b9e:	3301      	adds	r3, #1
   82ba0:	442a      	add	r2, r5
   82ba2:	2b07      	cmp	r3, #7
   82ba4:	f8c9 8000 	str.w	r8, [r9]
   82ba8:	f8c9 5004 	str.w	r5, [r9, #4]
   82bac:	9211      	str	r2, [sp, #68]	; 0x44
   82bae:	9310      	str	r3, [sp, #64]	; 0x40
   82bb0:	dd7a      	ble.n	82ca8 <_vfiprintf_r+0x1a8>
   82bb2:	2a00      	cmp	r2, #0
   82bb4:	f040 84b5 	bne.w	83522 <_vfiprintf_r+0xa22>
   82bb8:	46d1      	mov	r9, sl
   82bba:	9b03      	ldr	r3, [sp, #12]
   82bbc:	9210      	str	r2, [sp, #64]	; 0x40
   82bbe:	442b      	add	r3, r5
   82bc0:	9303      	str	r3, [sp, #12]
   82bc2:	7823      	ldrb	r3, [r4, #0]
   82bc4:	2b00      	cmp	r3, #0
   82bc6:	f000 83e5 	beq.w	83394 <_vfiprintf_r+0x894>
   82bca:	2000      	movs	r0, #0
   82bcc:	f04f 0300 	mov.w	r3, #0
   82bd0:	f104 0801 	add.w	r8, r4, #1
   82bd4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82bd8:	7862      	ldrb	r2, [r4, #1]
   82bda:	4606      	mov	r6, r0
   82bdc:	4605      	mov	r5, r0
   82bde:	4603      	mov	r3, r0
   82be0:	f04f 34ff 	mov.w	r4, #4294967295
   82be4:	f108 0801 	add.w	r8, r8, #1
   82be8:	f1a2 0120 	sub.w	r1, r2, #32
   82bec:	2958      	cmp	r1, #88	; 0x58
   82bee:	f200 82d9 	bhi.w	831a4 <_vfiprintf_r+0x6a4>
   82bf2:	e8df f011 	tbh	[pc, r1, lsl #1]
   82bf6:	0228      	.short	0x0228
   82bf8:	02d702d7 	.word	0x02d702d7
   82bfc:	02d70230 	.word	0x02d70230
   82c00:	02d702d7 	.word	0x02d702d7
   82c04:	02d702d7 	.word	0x02d702d7
   82c08:	00a002d7 	.word	0x00a002d7
   82c0c:	02d70288 	.word	0x02d70288
   82c10:	02b800a8 	.word	0x02b800a8
   82c14:	01a602d7 	.word	0x01a602d7
   82c18:	01ab01ab 	.word	0x01ab01ab
   82c1c:	01ab01ab 	.word	0x01ab01ab
   82c20:	01ab01ab 	.word	0x01ab01ab
   82c24:	01ab01ab 	.word	0x01ab01ab
   82c28:	02d701ab 	.word	0x02d701ab
   82c2c:	02d702d7 	.word	0x02d702d7
   82c30:	02d702d7 	.word	0x02d702d7
   82c34:	02d702d7 	.word	0x02d702d7
   82c38:	02d702d7 	.word	0x02d702d7
   82c3c:	01b902d7 	.word	0x01b902d7
   82c40:	02d702d7 	.word	0x02d702d7
   82c44:	02d702d7 	.word	0x02d702d7
   82c48:	02d702d7 	.word	0x02d702d7
   82c4c:	02d702d7 	.word	0x02d702d7
   82c50:	02d702d7 	.word	0x02d702d7
   82c54:	02d7019e 	.word	0x02d7019e
   82c58:	02d702d7 	.word	0x02d702d7
   82c5c:	02d702d7 	.word	0x02d702d7
   82c60:	02d701a2 	.word	0x02d701a2
   82c64:	025a02d7 	.word	0x025a02d7
   82c68:	02d702d7 	.word	0x02d702d7
   82c6c:	02d702d7 	.word	0x02d702d7
   82c70:	02d702d7 	.word	0x02d702d7
   82c74:	02d702d7 	.word	0x02d702d7
   82c78:	02d702d7 	.word	0x02d702d7
   82c7c:	02220261 	.word	0x02220261
   82c80:	02d702d7 	.word	0x02d702d7
   82c84:	027602d7 	.word	0x027602d7
   82c88:	02d70222 	.word	0x02d70222
   82c8c:	027b02d7 	.word	0x027b02d7
   82c90:	01fc02d7 	.word	0x01fc02d7
   82c94:	02100189 	.word	0x02100189
   82c98:	02d702d2 	.word	0x02d702d2
   82c9c:	02d70295 	.word	0x02d70295
   82ca0:	02d700ad 	.word	0x02d700ad
   82ca4:	023502d7 	.word	0x023502d7
   82ca8:	f109 0908 	add.w	r9, r9, #8
   82cac:	9b03      	ldr	r3, [sp, #12]
   82cae:	442b      	add	r3, r5
   82cb0:	9303      	str	r3, [sp, #12]
   82cb2:	e786      	b.n	82bc2 <_vfiprintf_r+0xc2>
   82cb4:	4659      	mov	r1, fp
   82cb6:	9806      	ldr	r0, [sp, #24]
   82cb8:	f000 fdaa 	bl	83810 <__swsetup_r>
   82cbc:	bb18      	cbnz	r0, 82d06 <_vfiprintf_r+0x206>
   82cbe:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82cc2:	f001 031a 	and.w	r3, r1, #26
   82cc6:	2b0a      	cmp	r3, #10
   82cc8:	f47f af4b 	bne.w	82b62 <_vfiprintf_r+0x62>
   82ccc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82cd0:	2b00      	cmp	r3, #0
   82cd2:	f6ff af46 	blt.w	82b62 <_vfiprintf_r+0x62>
   82cd6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82cda:	07db      	lsls	r3, r3, #31
   82cdc:	d405      	bmi.n	82cea <_vfiprintf_r+0x1ea>
   82cde:	058f      	lsls	r7, r1, #22
   82ce0:	d403      	bmi.n	82cea <_vfiprintf_r+0x1ea>
   82ce2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82ce6:	f001 fabd 	bl	84264 <__retarget_lock_release_recursive>
   82cea:	462b      	mov	r3, r5
   82cec:	4642      	mov	r2, r8
   82cee:	4659      	mov	r1, fp
   82cf0:	9806      	ldr	r0, [sp, #24]
   82cf2:	f000 fd49 	bl	83788 <__sbprintf>
   82cf6:	9003      	str	r0, [sp, #12]
   82cf8:	9803      	ldr	r0, [sp, #12]
   82cfa:	b02d      	add	sp, #180	; 0xb4
   82cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d00:	f000 feee 	bl	83ae0 <__sinit>
   82d04:	e709      	b.n	82b1a <_vfiprintf_r+0x1a>
   82d06:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82d0a:	07d9      	lsls	r1, r3, #31
   82d0c:	d404      	bmi.n	82d18 <_vfiprintf_r+0x218>
   82d0e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82d12:	059a      	lsls	r2, r3, #22
   82d14:	f140 84ae 	bpl.w	83674 <_vfiprintf_r+0xb74>
   82d18:	f04f 33ff 	mov.w	r3, #4294967295
   82d1c:	9303      	str	r3, [sp, #12]
   82d1e:	9803      	ldr	r0, [sp, #12]
   82d20:	b02d      	add	sp, #180	; 0xb4
   82d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d26:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82d2a:	f001 fa99 	bl	84260 <__retarget_lock_acquire_recursive>
   82d2e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82d32:	b281      	uxth	r1, r0
   82d34:	e6fb      	b.n	82b2e <_vfiprintf_r+0x2e>
   82d36:	9907      	ldr	r1, [sp, #28]
   82d38:	460a      	mov	r2, r1
   82d3a:	680d      	ldr	r5, [r1, #0]
   82d3c:	3204      	adds	r2, #4
   82d3e:	2d00      	cmp	r5, #0
   82d40:	9207      	str	r2, [sp, #28]
   82d42:	da02      	bge.n	82d4a <_vfiprintf_r+0x24a>
   82d44:	426d      	negs	r5, r5
   82d46:	f043 0304 	orr.w	r3, r3, #4
   82d4a:	f898 2000 	ldrb.w	r2, [r8]
   82d4e:	e749      	b.n	82be4 <_vfiprintf_r+0xe4>
   82d50:	9508      	str	r5, [sp, #32]
   82d52:	069e      	lsls	r6, r3, #26
   82d54:	f100 845a 	bmi.w	8360c <_vfiprintf_r+0xb0c>
   82d58:	9907      	ldr	r1, [sp, #28]
   82d5a:	06dd      	lsls	r5, r3, #27
   82d5c:	460a      	mov	r2, r1
   82d5e:	f100 83ef 	bmi.w	83540 <_vfiprintf_r+0xa40>
   82d62:	0658      	lsls	r0, r3, #25
   82d64:	f140 83ec 	bpl.w	83540 <_vfiprintf_r+0xa40>
   82d68:	2700      	movs	r7, #0
   82d6a:	2201      	movs	r2, #1
   82d6c:	880e      	ldrh	r6, [r1, #0]
   82d6e:	3104      	adds	r1, #4
   82d70:	9107      	str	r1, [sp, #28]
   82d72:	f04f 0100 	mov.w	r1, #0
   82d76:	2500      	movs	r5, #0
   82d78:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82d7c:	1c61      	adds	r1, r4, #1
   82d7e:	f000 8117 	beq.w	82fb0 <_vfiprintf_r+0x4b0>
   82d82:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   82d86:	9102      	str	r1, [sp, #8]
   82d88:	ea56 0107 	orrs.w	r1, r6, r7
   82d8c:	f040 8115 	bne.w	82fba <_vfiprintf_r+0x4ba>
   82d90:	2c00      	cmp	r4, #0
   82d92:	f040 835b 	bne.w	8344c <_vfiprintf_r+0x94c>
   82d96:	2a00      	cmp	r2, #0
   82d98:	f040 83b6 	bne.w	83508 <_vfiprintf_r+0xa08>
   82d9c:	f013 0301 	ands.w	r3, r3, #1
   82da0:	9305      	str	r3, [sp, #20]
   82da2:	f000 8455 	beq.w	83650 <_vfiprintf_r+0xb50>
   82da6:	2330      	movs	r3, #48	; 0x30
   82da8:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82dac:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82db0:	9b05      	ldr	r3, [sp, #20]
   82db2:	42a3      	cmp	r3, r4
   82db4:	bfb8      	it	lt
   82db6:	4623      	movlt	r3, r4
   82db8:	9301      	str	r3, [sp, #4]
   82dba:	b10d      	cbz	r5, 82dc0 <_vfiprintf_r+0x2c0>
   82dbc:	3301      	adds	r3, #1
   82dbe:	9301      	str	r3, [sp, #4]
   82dc0:	9b02      	ldr	r3, [sp, #8]
   82dc2:	f013 0302 	ands.w	r3, r3, #2
   82dc6:	9309      	str	r3, [sp, #36]	; 0x24
   82dc8:	d002      	beq.n	82dd0 <_vfiprintf_r+0x2d0>
   82dca:	9b01      	ldr	r3, [sp, #4]
   82dcc:	3302      	adds	r3, #2
   82dce:	9301      	str	r3, [sp, #4]
   82dd0:	9b02      	ldr	r3, [sp, #8]
   82dd2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82dd6:	930a      	str	r3, [sp, #40]	; 0x28
   82dd8:	f040 8215 	bne.w	83206 <_vfiprintf_r+0x706>
   82ddc:	9b08      	ldr	r3, [sp, #32]
   82dde:	9a01      	ldr	r2, [sp, #4]
   82de0:	1a9d      	subs	r5, r3, r2
   82de2:	2d00      	cmp	r5, #0
   82de4:	f340 820f 	ble.w	83206 <_vfiprintf_r+0x706>
   82de8:	2d10      	cmp	r5, #16
   82dea:	f340 8484 	ble.w	836f6 <_vfiprintf_r+0xbf6>
   82dee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82df0:	46ce      	mov	lr, r9
   82df2:	2710      	movs	r7, #16
   82df4:	46a1      	mov	r9, r4
   82df6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82df8:	4ec5      	ldr	r6, [pc, #788]	; (83110 <_vfiprintf_r+0x610>)
   82dfa:	4619      	mov	r1, r3
   82dfc:	9c06      	ldr	r4, [sp, #24]
   82dfe:	e007      	b.n	82e10 <_vfiprintf_r+0x310>
   82e00:	f101 0c02 	add.w	ip, r1, #2
   82e04:	4601      	mov	r1, r0
   82e06:	f10e 0e08 	add.w	lr, lr, #8
   82e0a:	3d10      	subs	r5, #16
   82e0c:	2d10      	cmp	r5, #16
   82e0e:	dd11      	ble.n	82e34 <_vfiprintf_r+0x334>
   82e10:	1c48      	adds	r0, r1, #1
   82e12:	3210      	adds	r2, #16
   82e14:	2807      	cmp	r0, #7
   82e16:	9211      	str	r2, [sp, #68]	; 0x44
   82e18:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82e1c:	9010      	str	r0, [sp, #64]	; 0x40
   82e1e:	ddef      	ble.n	82e00 <_vfiprintf_r+0x300>
   82e20:	2a00      	cmp	r2, #0
   82e22:	f040 81d9 	bne.w	831d8 <_vfiprintf_r+0x6d8>
   82e26:	3d10      	subs	r5, #16
   82e28:	2d10      	cmp	r5, #16
   82e2a:	4611      	mov	r1, r2
   82e2c:	f04f 0c01 	mov.w	ip, #1
   82e30:	46d6      	mov	lr, sl
   82e32:	dced      	bgt.n	82e10 <_vfiprintf_r+0x310>
   82e34:	464c      	mov	r4, r9
   82e36:	4661      	mov	r1, ip
   82e38:	46f1      	mov	r9, lr
   82e3a:	442a      	add	r2, r5
   82e3c:	2907      	cmp	r1, #7
   82e3e:	9211      	str	r2, [sp, #68]	; 0x44
   82e40:	f8c9 6000 	str.w	r6, [r9]
   82e44:	f8c9 5004 	str.w	r5, [r9, #4]
   82e48:	9110      	str	r1, [sp, #64]	; 0x40
   82e4a:	f300 82eb 	bgt.w	83424 <_vfiprintf_r+0x924>
   82e4e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82e52:	f109 0908 	add.w	r9, r9, #8
   82e56:	1c48      	adds	r0, r1, #1
   82e58:	2d00      	cmp	r5, #0
   82e5a:	f040 81dc 	bne.w	83216 <_vfiprintf_r+0x716>
   82e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82e60:	2b00      	cmp	r3, #0
   82e62:	f000 81f6 	beq.w	83252 <_vfiprintf_r+0x752>
   82e66:	2102      	movs	r1, #2
   82e68:	ab0e      	add	r3, sp, #56	; 0x38
   82e6a:	440a      	add	r2, r1
   82e6c:	2807      	cmp	r0, #7
   82e6e:	9211      	str	r2, [sp, #68]	; 0x44
   82e70:	9010      	str	r0, [sp, #64]	; 0x40
   82e72:	f8c9 1004 	str.w	r1, [r9, #4]
   82e76:	f8c9 3000 	str.w	r3, [r9]
   82e7a:	f340 81e6 	ble.w	8324a <_vfiprintf_r+0x74a>
   82e7e:	2a00      	cmp	r2, #0
   82e80:	f040 8395 	bne.w	835ae <_vfiprintf_r+0xaae>
   82e84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82e86:	2001      	movs	r0, #1
   82e88:	2b80      	cmp	r3, #128	; 0x80
   82e8a:	4611      	mov	r1, r2
   82e8c:	46d1      	mov	r9, sl
   82e8e:	f040 81e4 	bne.w	8325a <_vfiprintf_r+0x75a>
   82e92:	9b08      	ldr	r3, [sp, #32]
   82e94:	9d01      	ldr	r5, [sp, #4]
   82e96:	1b5e      	subs	r6, r3, r5
   82e98:	2e00      	cmp	r6, #0
   82e9a:	f340 81de 	ble.w	8325a <_vfiprintf_r+0x75a>
   82e9e:	2e10      	cmp	r6, #16
   82ea0:	f340 843c 	ble.w	8371c <_vfiprintf_r+0xc1c>
   82ea4:	46cc      	mov	ip, r9
   82ea6:	2710      	movs	r7, #16
   82ea8:	46a1      	mov	r9, r4
   82eaa:	4d9a      	ldr	r5, [pc, #616]	; (83114 <_vfiprintf_r+0x614>)
   82eac:	9c06      	ldr	r4, [sp, #24]
   82eae:	e007      	b.n	82ec0 <_vfiprintf_r+0x3c0>
   82eb0:	f101 0e02 	add.w	lr, r1, #2
   82eb4:	4601      	mov	r1, r0
   82eb6:	f10c 0c08 	add.w	ip, ip, #8
   82eba:	3e10      	subs	r6, #16
   82ebc:	2e10      	cmp	r6, #16
   82ebe:	dd11      	ble.n	82ee4 <_vfiprintf_r+0x3e4>
   82ec0:	1c48      	adds	r0, r1, #1
   82ec2:	3210      	adds	r2, #16
   82ec4:	2807      	cmp	r0, #7
   82ec6:	9211      	str	r2, [sp, #68]	; 0x44
   82ec8:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82ecc:	9010      	str	r0, [sp, #64]	; 0x40
   82ece:	ddef      	ble.n	82eb0 <_vfiprintf_r+0x3b0>
   82ed0:	2a00      	cmp	r2, #0
   82ed2:	f040 829b 	bne.w	8340c <_vfiprintf_r+0x90c>
   82ed6:	3e10      	subs	r6, #16
   82ed8:	2e10      	cmp	r6, #16
   82eda:	f04f 0e01 	mov.w	lr, #1
   82ede:	4611      	mov	r1, r2
   82ee0:	46d4      	mov	ip, sl
   82ee2:	dced      	bgt.n	82ec0 <_vfiprintf_r+0x3c0>
   82ee4:	464c      	mov	r4, r9
   82ee6:	46e1      	mov	r9, ip
   82ee8:	4432      	add	r2, r6
   82eea:	f1be 0f07 	cmp.w	lr, #7
   82eee:	9211      	str	r2, [sp, #68]	; 0x44
   82ef0:	e889 0060 	stmia.w	r9, {r5, r6}
   82ef4:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82ef8:	f300 8366 	bgt.w	835c8 <_vfiprintf_r+0xac8>
   82efc:	f109 0908 	add.w	r9, r9, #8
   82f00:	f10e 0001 	add.w	r0, lr, #1
   82f04:	4671      	mov	r1, lr
   82f06:	e1a8      	b.n	8325a <_vfiprintf_r+0x75a>
   82f08:	9508      	str	r5, [sp, #32]
   82f0a:	f013 0220 	ands.w	r2, r3, #32
   82f0e:	f040 8389 	bne.w	83624 <_vfiprintf_r+0xb24>
   82f12:	f013 0110 	ands.w	r1, r3, #16
   82f16:	f040 8319 	bne.w	8354c <_vfiprintf_r+0xa4c>
   82f1a:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82f1e:	f000 8315 	beq.w	8354c <_vfiprintf_r+0xa4c>
   82f22:	9807      	ldr	r0, [sp, #28]
   82f24:	460a      	mov	r2, r1
   82f26:	4601      	mov	r1, r0
   82f28:	3104      	adds	r1, #4
   82f2a:	8806      	ldrh	r6, [r0, #0]
   82f2c:	2700      	movs	r7, #0
   82f2e:	9107      	str	r1, [sp, #28]
   82f30:	e71f      	b.n	82d72 <_vfiprintf_r+0x272>
   82f32:	9508      	str	r5, [sp, #32]
   82f34:	f043 0310 	orr.w	r3, r3, #16
   82f38:	e7e7      	b.n	82f0a <_vfiprintf_r+0x40a>
   82f3a:	9508      	str	r5, [sp, #32]
   82f3c:	f043 0310 	orr.w	r3, r3, #16
   82f40:	e707      	b.n	82d52 <_vfiprintf_r+0x252>
   82f42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82f46:	f898 2000 	ldrb.w	r2, [r8]
   82f4a:	e64b      	b.n	82be4 <_vfiprintf_r+0xe4>
   82f4c:	2500      	movs	r5, #0
   82f4e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82f52:	f818 2b01 	ldrb.w	r2, [r8], #1
   82f56:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82f5a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82f5e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82f62:	2909      	cmp	r1, #9
   82f64:	d9f5      	bls.n	82f52 <_vfiprintf_r+0x452>
   82f66:	e63f      	b.n	82be8 <_vfiprintf_r+0xe8>
   82f68:	9508      	str	r5, [sp, #32]
   82f6a:	2800      	cmp	r0, #0
   82f6c:	f040 8402 	bne.w	83774 <_vfiprintf_r+0xc74>
   82f70:	f043 0310 	orr.w	r3, r3, #16
   82f74:	069e      	lsls	r6, r3, #26
   82f76:	f100 833d 	bmi.w	835f4 <_vfiprintf_r+0xaf4>
   82f7a:	9907      	ldr	r1, [sp, #28]
   82f7c:	06dd      	lsls	r5, r3, #27
   82f7e:	460a      	mov	r2, r1
   82f80:	f100 82f0 	bmi.w	83564 <_vfiprintf_r+0xa64>
   82f84:	0658      	lsls	r0, r3, #25
   82f86:	f140 82ed 	bpl.w	83564 <_vfiprintf_r+0xa64>
   82f8a:	f9b1 6000 	ldrsh.w	r6, [r1]
   82f8e:	3204      	adds	r2, #4
   82f90:	17f7      	asrs	r7, r6, #31
   82f92:	4630      	mov	r0, r6
   82f94:	4639      	mov	r1, r7
   82f96:	9207      	str	r2, [sp, #28]
   82f98:	2800      	cmp	r0, #0
   82f9a:	f171 0200 	sbcs.w	r2, r1, #0
   82f9e:	f2c0 835a 	blt.w	83656 <_vfiprintf_r+0xb56>
   82fa2:	1c61      	adds	r1, r4, #1
   82fa4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82fa8:	f04f 0201 	mov.w	r2, #1
   82fac:	f47f aee9 	bne.w	82d82 <_vfiprintf_r+0x282>
   82fb0:	ea56 0107 	orrs.w	r1, r6, r7
   82fb4:	f000 824b 	beq.w	8344e <_vfiprintf_r+0x94e>
   82fb8:	9302      	str	r3, [sp, #8]
   82fba:	2a01      	cmp	r2, #1
   82fbc:	f000 828a 	beq.w	834d4 <_vfiprintf_r+0x9d4>
   82fc0:	2a02      	cmp	r2, #2
   82fc2:	f040 825a 	bne.w	8347a <_vfiprintf_r+0x97a>
   82fc6:	46d3      	mov	fp, sl
   82fc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
   82fca:	0933      	lsrs	r3, r6, #4
   82fcc:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82fd0:	0939      	lsrs	r1, r7, #4
   82fd2:	f006 020f 	and.w	r2, r6, #15
   82fd6:	460f      	mov	r7, r1
   82fd8:	461e      	mov	r6, r3
   82fda:	5c83      	ldrb	r3, [r0, r2]
   82fdc:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82fe0:	ea56 0307 	orrs.w	r3, r6, r7
   82fe4:	d1f1      	bne.n	82fca <_vfiprintf_r+0x4ca>
   82fe6:	ebaa 030b 	sub.w	r3, sl, fp
   82fea:	9305      	str	r3, [sp, #20]
   82fec:	e6e0      	b.n	82db0 <_vfiprintf_r+0x2b0>
   82fee:	2800      	cmp	r0, #0
   82ff0:	f040 83bd 	bne.w	8376e <_vfiprintf_r+0xc6e>
   82ff4:	0699      	lsls	r1, r3, #26
   82ff6:	f100 8359 	bmi.w	836ac <_vfiprintf_r+0xbac>
   82ffa:	06da      	lsls	r2, r3, #27
   82ffc:	f100 80e5 	bmi.w	831ca <_vfiprintf_r+0x6ca>
   83000:	065b      	lsls	r3, r3, #25
   83002:	f140 80e2 	bpl.w	831ca <_vfiprintf_r+0x6ca>
   83006:	9a07      	ldr	r2, [sp, #28]
   83008:	6813      	ldr	r3, [r2, #0]
   8300a:	3204      	adds	r2, #4
   8300c:	9207      	str	r2, [sp, #28]
   8300e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   83012:	801a      	strh	r2, [r3, #0]
   83014:	e5b1      	b.n	82b7a <_vfiprintf_r+0x7a>
   83016:	2278      	movs	r2, #120	; 0x78
   83018:	2130      	movs	r1, #48	; 0x30
   8301a:	9508      	str	r5, [sp, #32]
   8301c:	9d07      	ldr	r5, [sp, #28]
   8301e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   83022:	1d2a      	adds	r2, r5, #4
   83024:	9207      	str	r2, [sp, #28]
   83026:	4a3c      	ldr	r2, [pc, #240]	; (83118 <_vfiprintf_r+0x618>)
   83028:	682e      	ldr	r6, [r5, #0]
   8302a:	920b      	str	r2, [sp, #44]	; 0x2c
   8302c:	f043 0302 	orr.w	r3, r3, #2
   83030:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   83034:	2700      	movs	r7, #0
   83036:	2202      	movs	r2, #2
   83038:	e69b      	b.n	82d72 <_vfiprintf_r+0x272>
   8303a:	9508      	str	r5, [sp, #32]
   8303c:	2800      	cmp	r0, #0
   8303e:	d099      	beq.n	82f74 <_vfiprintf_r+0x474>
   83040:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83044:	e796      	b.n	82f74 <_vfiprintf_r+0x474>
   83046:	f898 2000 	ldrb.w	r2, [r8]
   8304a:	2e00      	cmp	r6, #0
   8304c:	f47f adca 	bne.w	82be4 <_vfiprintf_r+0xe4>
   83050:	2001      	movs	r0, #1
   83052:	2620      	movs	r6, #32
   83054:	e5c6      	b.n	82be4 <_vfiprintf_r+0xe4>
   83056:	f043 0301 	orr.w	r3, r3, #1
   8305a:	f898 2000 	ldrb.w	r2, [r8]
   8305e:	e5c1      	b.n	82be4 <_vfiprintf_r+0xe4>
   83060:	9508      	str	r5, [sp, #32]
   83062:	2800      	cmp	r0, #0
   83064:	f040 8380 	bne.w	83768 <_vfiprintf_r+0xc68>
   83068:	492b      	ldr	r1, [pc, #172]	; (83118 <_vfiprintf_r+0x618>)
   8306a:	910b      	str	r1, [sp, #44]	; 0x2c
   8306c:	069f      	lsls	r7, r3, #26
   8306e:	f100 82e5 	bmi.w	8363c <_vfiprintf_r+0xb3c>
   83072:	9807      	ldr	r0, [sp, #28]
   83074:	06de      	lsls	r6, r3, #27
   83076:	4601      	mov	r1, r0
   83078:	f100 826f 	bmi.w	8355a <_vfiprintf_r+0xa5a>
   8307c:	065d      	lsls	r5, r3, #25
   8307e:	f140 826c 	bpl.w	8355a <_vfiprintf_r+0xa5a>
   83082:	2700      	movs	r7, #0
   83084:	3104      	adds	r1, #4
   83086:	8806      	ldrh	r6, [r0, #0]
   83088:	9107      	str	r1, [sp, #28]
   8308a:	07d8      	lsls	r0, r3, #31
   8308c:	f140 8220 	bpl.w	834d0 <_vfiprintf_r+0x9d0>
   83090:	ea56 0107 	orrs.w	r1, r6, r7
   83094:	f000 821c 	beq.w	834d0 <_vfiprintf_r+0x9d0>
   83098:	2130      	movs	r1, #48	; 0x30
   8309a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8309e:	f043 0302 	orr.w	r3, r3, #2
   830a2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   830a6:	2202      	movs	r2, #2
   830a8:	e663      	b.n	82d72 <_vfiprintf_r+0x272>
   830aa:	9508      	str	r5, [sp, #32]
   830ac:	2800      	cmp	r0, #0
   830ae:	f040 8355 	bne.w	8375c <_vfiprintf_r+0xc5c>
   830b2:	491a      	ldr	r1, [pc, #104]	; (8311c <_vfiprintf_r+0x61c>)
   830b4:	910b      	str	r1, [sp, #44]	; 0x2c
   830b6:	e7d9      	b.n	8306c <_vfiprintf_r+0x56c>
   830b8:	2201      	movs	r2, #1
   830ba:	9807      	ldr	r0, [sp, #28]
   830bc:	4611      	mov	r1, r2
   830be:	9201      	str	r2, [sp, #4]
   830c0:	6802      	ldr	r2, [r0, #0]
   830c2:	f04f 0400 	mov.w	r4, #0
   830c6:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   830ca:	4602      	mov	r2, r0
   830cc:	3204      	adds	r2, #4
   830ce:	9508      	str	r5, [sp, #32]
   830d0:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   830d4:	9105      	str	r1, [sp, #20]
   830d6:	9207      	str	r2, [sp, #28]
   830d8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   830dc:	9302      	str	r3, [sp, #8]
   830de:	2400      	movs	r4, #0
   830e0:	e66e      	b.n	82dc0 <_vfiprintf_r+0x2c0>
   830e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   830e6:	f898 2000 	ldrb.w	r2, [r8]
   830ea:	e57b      	b.n	82be4 <_vfiprintf_r+0xe4>
   830ec:	f898 2000 	ldrb.w	r2, [r8]
   830f0:	2a6c      	cmp	r2, #108	; 0x6c
   830f2:	bf03      	ittte	eq
   830f4:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   830f8:	f043 0320 	orreq.w	r3, r3, #32
   830fc:	f108 0801 	addeq.w	r8, r8, #1
   83100:	f043 0310 	orrne.w	r3, r3, #16
   83104:	e56e      	b.n	82be4 <_vfiprintf_r+0xe4>
   83106:	f898 2000 	ldrb.w	r2, [r8]
   8310a:	2001      	movs	r0, #1
   8310c:	262b      	movs	r6, #43	; 0x2b
   8310e:	e569      	b.n	82be4 <_vfiprintf_r+0xe4>
   83110:	00085590 	.word	0x00085590
   83114:	000855a0 	.word	0x000855a0
   83118:	00085574 	.word	0x00085574
   8311c:	00085560 	.word	0x00085560
   83120:	f04f 0200 	mov.w	r2, #0
   83124:	9907      	ldr	r1, [sp, #28]
   83126:	9508      	str	r5, [sp, #32]
   83128:	f8d1 b000 	ldr.w	fp, [r1]
   8312c:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83130:	1d0d      	adds	r5, r1, #4
   83132:	f1bb 0f00 	cmp.w	fp, #0
   83136:	f000 82e4 	beq.w	83702 <_vfiprintf_r+0xc02>
   8313a:	1c67      	adds	r7, r4, #1
   8313c:	f000 82c3 	beq.w	836c6 <_vfiprintf_r+0xbc6>
   83140:	4622      	mov	r2, r4
   83142:	2100      	movs	r1, #0
   83144:	4658      	mov	r0, fp
   83146:	9301      	str	r3, [sp, #4]
   83148:	f001 fbc6 	bl	848d8 <memchr>
   8314c:	9b01      	ldr	r3, [sp, #4]
   8314e:	2800      	cmp	r0, #0
   83150:	f000 82e8 	beq.w	83724 <_vfiprintf_r+0xc24>
   83154:	eba0 020b 	sub.w	r2, r0, fp
   83158:	9507      	str	r5, [sp, #28]
   8315a:	9205      	str	r2, [sp, #20]
   8315c:	9302      	str	r3, [sp, #8]
   8315e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83162:	2400      	movs	r4, #0
   83164:	e624      	b.n	82db0 <_vfiprintf_r+0x2b0>
   83166:	f898 2000 	ldrb.w	r2, [r8]
   8316a:	f108 0701 	add.w	r7, r8, #1
   8316e:	2a2a      	cmp	r2, #42	; 0x2a
   83170:	f000 82e9 	beq.w	83746 <_vfiprintf_r+0xc46>
   83174:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83178:	2909      	cmp	r1, #9
   8317a:	46b8      	mov	r8, r7
   8317c:	f04f 0400 	mov.w	r4, #0
   83180:	f63f ad32 	bhi.w	82be8 <_vfiprintf_r+0xe8>
   83184:	f818 2b01 	ldrb.w	r2, [r8], #1
   83188:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8318c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   83190:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83194:	2909      	cmp	r1, #9
   83196:	d9f5      	bls.n	83184 <_vfiprintf_r+0x684>
   83198:	e526      	b.n	82be8 <_vfiprintf_r+0xe8>
   8319a:	f043 0320 	orr.w	r3, r3, #32
   8319e:	f898 2000 	ldrb.w	r2, [r8]
   831a2:	e51f      	b.n	82be4 <_vfiprintf_r+0xe4>
   831a4:	9508      	str	r5, [sp, #32]
   831a6:	2800      	cmp	r0, #0
   831a8:	f040 82db 	bne.w	83762 <_vfiprintf_r+0xc62>
   831ac:	2a00      	cmp	r2, #0
   831ae:	f000 80f1 	beq.w	83394 <_vfiprintf_r+0x894>
   831b2:	2101      	movs	r1, #1
   831b4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   831b8:	f04f 0200 	mov.w	r2, #0
   831bc:	9101      	str	r1, [sp, #4]
   831be:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   831c2:	9105      	str	r1, [sp, #20]
   831c4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   831c8:	e788      	b.n	830dc <_vfiprintf_r+0x5dc>
   831ca:	9a07      	ldr	r2, [sp, #28]
   831cc:	6813      	ldr	r3, [r2, #0]
   831ce:	3204      	adds	r2, #4
   831d0:	9207      	str	r2, [sp, #28]
   831d2:	9a03      	ldr	r2, [sp, #12]
   831d4:	601a      	str	r2, [r3, #0]
   831d6:	e4d0      	b.n	82b7a <_vfiprintf_r+0x7a>
   831d8:	aa0f      	add	r2, sp, #60	; 0x3c
   831da:	9904      	ldr	r1, [sp, #16]
   831dc:	4620      	mov	r0, r4
   831de:	f7ff fc4f 	bl	82a80 <__sprint_r.part.0>
   831e2:	2800      	cmp	r0, #0
   831e4:	f040 8143 	bne.w	8346e <_vfiprintf_r+0x96e>
   831e8:	9910      	ldr	r1, [sp, #64]	; 0x40
   831ea:	46d6      	mov	lr, sl
   831ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
   831ee:	f101 0c01 	add.w	ip, r1, #1
   831f2:	e60a      	b.n	82e0a <_vfiprintf_r+0x30a>
   831f4:	aa0f      	add	r2, sp, #60	; 0x3c
   831f6:	9904      	ldr	r1, [sp, #16]
   831f8:	9806      	ldr	r0, [sp, #24]
   831fa:	f7ff fc41 	bl	82a80 <__sprint_r.part.0>
   831fe:	2800      	cmp	r0, #0
   83200:	f040 8135 	bne.w	8346e <_vfiprintf_r+0x96e>
   83204:	46d1      	mov	r9, sl
   83206:	9910      	ldr	r1, [sp, #64]	; 0x40
   83208:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8320c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8320e:	1c48      	adds	r0, r1, #1
   83210:	2d00      	cmp	r5, #0
   83212:	f43f ae24 	beq.w	82e5e <_vfiprintf_r+0x35e>
   83216:	2101      	movs	r1, #1
   83218:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   8321c:	440a      	add	r2, r1
   8321e:	2807      	cmp	r0, #7
   83220:	9211      	str	r2, [sp, #68]	; 0x44
   83222:	9010      	str	r0, [sp, #64]	; 0x40
   83224:	f8c9 1004 	str.w	r1, [r9, #4]
   83228:	f8c9 5000 	str.w	r5, [r9]
   8322c:	f340 8109 	ble.w	83442 <_vfiprintf_r+0x942>
   83230:	2a00      	cmp	r2, #0
   83232:	f040 81af 	bne.w	83594 <_vfiprintf_r+0xa94>
   83236:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83238:	2b00      	cmp	r3, #0
   8323a:	f43f ae23 	beq.w	82e84 <_vfiprintf_r+0x384>
   8323e:	2202      	movs	r2, #2
   83240:	4608      	mov	r0, r1
   83242:	46d1      	mov	r9, sl
   83244:	ab0e      	add	r3, sp, #56	; 0x38
   83246:	921d      	str	r2, [sp, #116]	; 0x74
   83248:	931c      	str	r3, [sp, #112]	; 0x70
   8324a:	4601      	mov	r1, r0
   8324c:	f109 0908 	add.w	r9, r9, #8
   83250:	3001      	adds	r0, #1
   83252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   83254:	2b80      	cmp	r3, #128	; 0x80
   83256:	f43f ae1c 	beq.w	82e92 <_vfiprintf_r+0x392>
   8325a:	9b05      	ldr	r3, [sp, #20]
   8325c:	1ae4      	subs	r4, r4, r3
   8325e:	2c00      	cmp	r4, #0
   83260:	dd2f      	ble.n	832c2 <_vfiprintf_r+0x7c2>
   83262:	2c10      	cmp	r4, #16
   83264:	f340 8220 	ble.w	836a8 <_vfiprintf_r+0xba8>
   83268:	46ce      	mov	lr, r9
   8326a:	2610      	movs	r6, #16
   8326c:	4db2      	ldr	r5, [pc, #712]	; (83538 <_vfiprintf_r+0xa38>)
   8326e:	9f06      	ldr	r7, [sp, #24]
   83270:	f8dd 9010 	ldr.w	r9, [sp, #16]
   83274:	e006      	b.n	83284 <_vfiprintf_r+0x784>
   83276:	1c88      	adds	r0, r1, #2
   83278:	4619      	mov	r1, r3
   8327a:	f10e 0e08 	add.w	lr, lr, #8
   8327e:	3c10      	subs	r4, #16
   83280:	2c10      	cmp	r4, #16
   83282:	dd10      	ble.n	832a6 <_vfiprintf_r+0x7a6>
   83284:	1c4b      	adds	r3, r1, #1
   83286:	3210      	adds	r2, #16
   83288:	2b07      	cmp	r3, #7
   8328a:	9211      	str	r2, [sp, #68]	; 0x44
   8328c:	e88e 0060 	stmia.w	lr, {r5, r6}
   83290:	9310      	str	r3, [sp, #64]	; 0x40
   83292:	ddf0      	ble.n	83276 <_vfiprintf_r+0x776>
   83294:	2a00      	cmp	r2, #0
   83296:	d165      	bne.n	83364 <_vfiprintf_r+0x864>
   83298:	3c10      	subs	r4, #16
   8329a:	2c10      	cmp	r4, #16
   8329c:	f04f 0001 	mov.w	r0, #1
   832a0:	4611      	mov	r1, r2
   832a2:	46d6      	mov	lr, sl
   832a4:	dcee      	bgt.n	83284 <_vfiprintf_r+0x784>
   832a6:	46f1      	mov	r9, lr
   832a8:	4422      	add	r2, r4
   832aa:	2807      	cmp	r0, #7
   832ac:	9211      	str	r2, [sp, #68]	; 0x44
   832ae:	f8c9 5000 	str.w	r5, [r9]
   832b2:	f8c9 4004 	str.w	r4, [r9, #4]
   832b6:	9010      	str	r0, [sp, #64]	; 0x40
   832b8:	f300 8085 	bgt.w	833c6 <_vfiprintf_r+0x8c6>
   832bc:	f109 0908 	add.w	r9, r9, #8
   832c0:	3001      	adds	r0, #1
   832c2:	9905      	ldr	r1, [sp, #20]
   832c4:	2807      	cmp	r0, #7
   832c6:	440a      	add	r2, r1
   832c8:	9211      	str	r2, [sp, #68]	; 0x44
   832ca:	f8c9 b000 	str.w	fp, [r9]
   832ce:	f8c9 1004 	str.w	r1, [r9, #4]
   832d2:	9010      	str	r0, [sp, #64]	; 0x40
   832d4:	f340 8082 	ble.w	833dc <_vfiprintf_r+0x8dc>
   832d8:	2a00      	cmp	r2, #0
   832da:	f040 8118 	bne.w	8350e <_vfiprintf_r+0xa0e>
   832de:	9b02      	ldr	r3, [sp, #8]
   832e0:	9210      	str	r2, [sp, #64]	; 0x40
   832e2:	0758      	lsls	r0, r3, #29
   832e4:	d535      	bpl.n	83352 <_vfiprintf_r+0x852>
   832e6:	9b08      	ldr	r3, [sp, #32]
   832e8:	9901      	ldr	r1, [sp, #4]
   832ea:	1a5c      	subs	r4, r3, r1
   832ec:	2c00      	cmp	r4, #0
   832ee:	f340 80e7 	ble.w	834c0 <_vfiprintf_r+0x9c0>
   832f2:	46d1      	mov	r9, sl
   832f4:	2c10      	cmp	r4, #16
   832f6:	f340 820d 	ble.w	83714 <_vfiprintf_r+0xc14>
   832fa:	2510      	movs	r5, #16
   832fc:	9910      	ldr	r1, [sp, #64]	; 0x40
   832fe:	4e8f      	ldr	r6, [pc, #572]	; (8353c <_vfiprintf_r+0xa3c>)
   83300:	9f06      	ldr	r7, [sp, #24]
   83302:	f8dd b010 	ldr.w	fp, [sp, #16]
   83306:	e006      	b.n	83316 <_vfiprintf_r+0x816>
   83308:	1c88      	adds	r0, r1, #2
   8330a:	4619      	mov	r1, r3
   8330c:	f109 0908 	add.w	r9, r9, #8
   83310:	3c10      	subs	r4, #16
   83312:	2c10      	cmp	r4, #16
   83314:	dd11      	ble.n	8333a <_vfiprintf_r+0x83a>
   83316:	1c4b      	adds	r3, r1, #1
   83318:	3210      	adds	r2, #16
   8331a:	2b07      	cmp	r3, #7
   8331c:	9211      	str	r2, [sp, #68]	; 0x44
   8331e:	f8c9 6000 	str.w	r6, [r9]
   83322:	f8c9 5004 	str.w	r5, [r9, #4]
   83326:	9310      	str	r3, [sp, #64]	; 0x40
   83328:	ddee      	ble.n	83308 <_vfiprintf_r+0x808>
   8332a:	bb42      	cbnz	r2, 8337e <_vfiprintf_r+0x87e>
   8332c:	3c10      	subs	r4, #16
   8332e:	2c10      	cmp	r4, #16
   83330:	f04f 0001 	mov.w	r0, #1
   83334:	4611      	mov	r1, r2
   83336:	46d1      	mov	r9, sl
   83338:	dced      	bgt.n	83316 <_vfiprintf_r+0x816>
   8333a:	4422      	add	r2, r4
   8333c:	2807      	cmp	r0, #7
   8333e:	9211      	str	r2, [sp, #68]	; 0x44
   83340:	f8c9 6000 	str.w	r6, [r9]
   83344:	f8c9 4004 	str.w	r4, [r9, #4]
   83348:	9010      	str	r0, [sp, #64]	; 0x40
   8334a:	dd51      	ble.n	833f0 <_vfiprintf_r+0x8f0>
   8334c:	2a00      	cmp	r2, #0
   8334e:	f040 819a 	bne.w	83686 <_vfiprintf_r+0xb86>
   83352:	9b03      	ldr	r3, [sp, #12]
   83354:	9a08      	ldr	r2, [sp, #32]
   83356:	9901      	ldr	r1, [sp, #4]
   83358:	428a      	cmp	r2, r1
   8335a:	bfac      	ite	ge
   8335c:	189b      	addge	r3, r3, r2
   8335e:	185b      	addlt	r3, r3, r1
   83360:	9303      	str	r3, [sp, #12]
   83362:	e04e      	b.n	83402 <_vfiprintf_r+0x902>
   83364:	aa0f      	add	r2, sp, #60	; 0x3c
   83366:	4649      	mov	r1, r9
   83368:	4638      	mov	r0, r7
   8336a:	f7ff fb89 	bl	82a80 <__sprint_r.part.0>
   8336e:	2800      	cmp	r0, #0
   83370:	f040 813e 	bne.w	835f0 <_vfiprintf_r+0xaf0>
   83374:	9910      	ldr	r1, [sp, #64]	; 0x40
   83376:	46d6      	mov	lr, sl
   83378:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8337a:	1c48      	adds	r0, r1, #1
   8337c:	e77f      	b.n	8327e <_vfiprintf_r+0x77e>
   8337e:	aa0f      	add	r2, sp, #60	; 0x3c
   83380:	4659      	mov	r1, fp
   83382:	4638      	mov	r0, r7
   83384:	f7ff fb7c 	bl	82a80 <__sprint_r.part.0>
   83388:	b960      	cbnz	r0, 833a4 <_vfiprintf_r+0x8a4>
   8338a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8338c:	46d1      	mov	r9, sl
   8338e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83390:	1c48      	adds	r0, r1, #1
   83392:	e7bd      	b.n	83310 <_vfiprintf_r+0x810>
   83394:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83396:	f8dd b010 	ldr.w	fp, [sp, #16]
   8339a:	2b00      	cmp	r3, #0
   8339c:	f040 81ca 	bne.w	83734 <_vfiprintf_r+0xc34>
   833a0:	2300      	movs	r3, #0
   833a2:	9310      	str	r3, [sp, #64]	; 0x40
   833a4:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   833a8:	f013 0f01 	tst.w	r3, #1
   833ac:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   833b0:	d102      	bne.n	833b8 <_vfiprintf_r+0x8b8>
   833b2:	059a      	lsls	r2, r3, #22
   833b4:	f140 80dd 	bpl.w	83572 <_vfiprintf_r+0xa72>
   833b8:	065b      	lsls	r3, r3, #25
   833ba:	f53f acad 	bmi.w	82d18 <_vfiprintf_r+0x218>
   833be:	9803      	ldr	r0, [sp, #12]
   833c0:	b02d      	add	sp, #180	; 0xb4
   833c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833c6:	2a00      	cmp	r2, #0
   833c8:	f040 8105 	bne.w	835d6 <_vfiprintf_r+0xad6>
   833cc:	2301      	movs	r3, #1
   833ce:	46d1      	mov	r9, sl
   833d0:	9a05      	ldr	r2, [sp, #20]
   833d2:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   833d6:	921d      	str	r2, [sp, #116]	; 0x74
   833d8:	9211      	str	r2, [sp, #68]	; 0x44
   833da:	9310      	str	r3, [sp, #64]	; 0x40
   833dc:	f109 0908 	add.w	r9, r9, #8
   833e0:	9b02      	ldr	r3, [sp, #8]
   833e2:	0759      	lsls	r1, r3, #29
   833e4:	d504      	bpl.n	833f0 <_vfiprintf_r+0x8f0>
   833e6:	9b08      	ldr	r3, [sp, #32]
   833e8:	9901      	ldr	r1, [sp, #4]
   833ea:	1a5c      	subs	r4, r3, r1
   833ec:	2c00      	cmp	r4, #0
   833ee:	dc81      	bgt.n	832f4 <_vfiprintf_r+0x7f4>
   833f0:	9b03      	ldr	r3, [sp, #12]
   833f2:	9908      	ldr	r1, [sp, #32]
   833f4:	9801      	ldr	r0, [sp, #4]
   833f6:	4281      	cmp	r1, r0
   833f8:	bfac      	ite	ge
   833fa:	185b      	addge	r3, r3, r1
   833fc:	181b      	addlt	r3, r3, r0
   833fe:	9303      	str	r3, [sp, #12]
   83400:	bb72      	cbnz	r2, 83460 <_vfiprintf_r+0x960>
   83402:	2300      	movs	r3, #0
   83404:	46d1      	mov	r9, sl
   83406:	9310      	str	r3, [sp, #64]	; 0x40
   83408:	f7ff bbb7 	b.w	82b7a <_vfiprintf_r+0x7a>
   8340c:	aa0f      	add	r2, sp, #60	; 0x3c
   8340e:	9904      	ldr	r1, [sp, #16]
   83410:	4620      	mov	r0, r4
   83412:	f7ff fb35 	bl	82a80 <__sprint_r.part.0>
   83416:	bb50      	cbnz	r0, 8346e <_vfiprintf_r+0x96e>
   83418:	9910      	ldr	r1, [sp, #64]	; 0x40
   8341a:	46d4      	mov	ip, sl
   8341c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8341e:	f101 0e01 	add.w	lr, r1, #1
   83422:	e54a      	b.n	82eba <_vfiprintf_r+0x3ba>
   83424:	2a00      	cmp	r2, #0
   83426:	f47f aee5 	bne.w	831f4 <_vfiprintf_r+0x6f4>
   8342a:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   8342e:	2900      	cmp	r1, #0
   83430:	f000 811a 	beq.w	83668 <_vfiprintf_r+0xb68>
   83434:	2201      	movs	r2, #1
   83436:	46d1      	mov	r9, sl
   83438:	4610      	mov	r0, r2
   8343a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   8343e:	921d      	str	r2, [sp, #116]	; 0x74
   83440:	911c      	str	r1, [sp, #112]	; 0x70
   83442:	4601      	mov	r1, r0
   83444:	f109 0908 	add.w	r9, r9, #8
   83448:	3001      	adds	r0, #1
   8344a:	e508      	b.n	82e5e <_vfiprintf_r+0x35e>
   8344c:	9b02      	ldr	r3, [sp, #8]
   8344e:	2a01      	cmp	r2, #1
   83450:	f000 8097 	beq.w	83582 <_vfiprintf_r+0xa82>
   83454:	2a02      	cmp	r2, #2
   83456:	d10d      	bne.n	83474 <_vfiprintf_r+0x974>
   83458:	9302      	str	r3, [sp, #8]
   8345a:	2600      	movs	r6, #0
   8345c:	2700      	movs	r7, #0
   8345e:	e5b2      	b.n	82fc6 <_vfiprintf_r+0x4c6>
   83460:	aa0f      	add	r2, sp, #60	; 0x3c
   83462:	9904      	ldr	r1, [sp, #16]
   83464:	9806      	ldr	r0, [sp, #24]
   83466:	f7ff fb0b 	bl	82a80 <__sprint_r.part.0>
   8346a:	2800      	cmp	r0, #0
   8346c:	d0c9      	beq.n	83402 <_vfiprintf_r+0x902>
   8346e:	f8dd b010 	ldr.w	fp, [sp, #16]
   83472:	e797      	b.n	833a4 <_vfiprintf_r+0x8a4>
   83474:	2600      	movs	r6, #0
   83476:	2700      	movs	r7, #0
   83478:	9302      	str	r3, [sp, #8]
   8347a:	4651      	mov	r1, sl
   8347c:	e000      	b.n	83480 <_vfiprintf_r+0x980>
   8347e:	4659      	mov	r1, fp
   83480:	08f2      	lsrs	r2, r6, #3
   83482:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   83486:	08f8      	lsrs	r0, r7, #3
   83488:	f006 0307 	and.w	r3, r6, #7
   8348c:	4607      	mov	r7, r0
   8348e:	4616      	mov	r6, r2
   83490:	3330      	adds	r3, #48	; 0x30
   83492:	ea56 0207 	orrs.w	r2, r6, r7
   83496:	f801 3c01 	strb.w	r3, [r1, #-1]
   8349a:	f101 3bff 	add.w	fp, r1, #4294967295
   8349e:	d1ee      	bne.n	8347e <_vfiprintf_r+0x97e>
   834a0:	9a02      	ldr	r2, [sp, #8]
   834a2:	07d6      	lsls	r6, r2, #31
   834a4:	f57f ad9f 	bpl.w	82fe6 <_vfiprintf_r+0x4e6>
   834a8:	2b30      	cmp	r3, #48	; 0x30
   834aa:	f43f ad9c 	beq.w	82fe6 <_vfiprintf_r+0x4e6>
   834ae:	2330      	movs	r3, #48	; 0x30
   834b0:	3902      	subs	r1, #2
   834b2:	f80b 3c01 	strb.w	r3, [fp, #-1]
   834b6:	ebaa 0301 	sub.w	r3, sl, r1
   834ba:	9305      	str	r3, [sp, #20]
   834bc:	468b      	mov	fp, r1
   834be:	e477      	b.n	82db0 <_vfiprintf_r+0x2b0>
   834c0:	9b03      	ldr	r3, [sp, #12]
   834c2:	9a08      	ldr	r2, [sp, #32]
   834c4:	428a      	cmp	r2, r1
   834c6:	bfac      	ite	ge
   834c8:	189b      	addge	r3, r3, r2
   834ca:	185b      	addlt	r3, r3, r1
   834cc:	9303      	str	r3, [sp, #12]
   834ce:	e798      	b.n	83402 <_vfiprintf_r+0x902>
   834d0:	2202      	movs	r2, #2
   834d2:	e44e      	b.n	82d72 <_vfiprintf_r+0x272>
   834d4:	2f00      	cmp	r7, #0
   834d6:	bf08      	it	eq
   834d8:	2e0a      	cmpeq	r6, #10
   834da:	d351      	bcc.n	83580 <_vfiprintf_r+0xa80>
   834dc:	46d3      	mov	fp, sl
   834de:	4630      	mov	r0, r6
   834e0:	4639      	mov	r1, r7
   834e2:	220a      	movs	r2, #10
   834e4:	2300      	movs	r3, #0
   834e6:	f001 fe85 	bl	851f4 <__aeabi_uldivmod>
   834ea:	3230      	adds	r2, #48	; 0x30
   834ec:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   834f0:	4630      	mov	r0, r6
   834f2:	4639      	mov	r1, r7
   834f4:	2300      	movs	r3, #0
   834f6:	220a      	movs	r2, #10
   834f8:	f001 fe7c 	bl	851f4 <__aeabi_uldivmod>
   834fc:	4606      	mov	r6, r0
   834fe:	460f      	mov	r7, r1
   83500:	ea56 0307 	orrs.w	r3, r6, r7
   83504:	d1eb      	bne.n	834de <_vfiprintf_r+0x9de>
   83506:	e56e      	b.n	82fe6 <_vfiprintf_r+0x4e6>
   83508:	9405      	str	r4, [sp, #20]
   8350a:	46d3      	mov	fp, sl
   8350c:	e450      	b.n	82db0 <_vfiprintf_r+0x2b0>
   8350e:	aa0f      	add	r2, sp, #60	; 0x3c
   83510:	9904      	ldr	r1, [sp, #16]
   83512:	9806      	ldr	r0, [sp, #24]
   83514:	f7ff fab4 	bl	82a80 <__sprint_r.part.0>
   83518:	2800      	cmp	r0, #0
   8351a:	d1a8      	bne.n	8346e <_vfiprintf_r+0x96e>
   8351c:	46d1      	mov	r9, sl
   8351e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83520:	e75e      	b.n	833e0 <_vfiprintf_r+0x8e0>
   83522:	aa0f      	add	r2, sp, #60	; 0x3c
   83524:	9904      	ldr	r1, [sp, #16]
   83526:	9806      	ldr	r0, [sp, #24]
   83528:	f7ff faaa 	bl	82a80 <__sprint_r.part.0>
   8352c:	2800      	cmp	r0, #0
   8352e:	d19e      	bne.n	8346e <_vfiprintf_r+0x96e>
   83530:	46d1      	mov	r9, sl
   83532:	f7ff bbbb 	b.w	82cac <_vfiprintf_r+0x1ac>
   83536:	bf00      	nop
   83538:	000855a0 	.word	0x000855a0
   8353c:	00085590 	.word	0x00085590
   83540:	3104      	adds	r1, #4
   83542:	6816      	ldr	r6, [r2, #0]
   83544:	2700      	movs	r7, #0
   83546:	2201      	movs	r2, #1
   83548:	9107      	str	r1, [sp, #28]
   8354a:	e412      	b.n	82d72 <_vfiprintf_r+0x272>
   8354c:	9807      	ldr	r0, [sp, #28]
   8354e:	2700      	movs	r7, #0
   83550:	4601      	mov	r1, r0
   83552:	3104      	adds	r1, #4
   83554:	6806      	ldr	r6, [r0, #0]
   83556:	9107      	str	r1, [sp, #28]
   83558:	e40b      	b.n	82d72 <_vfiprintf_r+0x272>
   8355a:	680e      	ldr	r6, [r1, #0]
   8355c:	3104      	adds	r1, #4
   8355e:	9107      	str	r1, [sp, #28]
   83560:	2700      	movs	r7, #0
   83562:	e592      	b.n	8308a <_vfiprintf_r+0x58a>
   83564:	6816      	ldr	r6, [r2, #0]
   83566:	3204      	adds	r2, #4
   83568:	17f7      	asrs	r7, r6, #31
   8356a:	9207      	str	r2, [sp, #28]
   8356c:	4630      	mov	r0, r6
   8356e:	4639      	mov	r1, r7
   83570:	e512      	b.n	82f98 <_vfiprintf_r+0x498>
   83572:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83576:	f000 fe75 	bl	84264 <__retarget_lock_release_recursive>
   8357a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8357e:	e71b      	b.n	833b8 <_vfiprintf_r+0x8b8>
   83580:	9b02      	ldr	r3, [sp, #8]
   83582:	9302      	str	r3, [sp, #8]
   83584:	2301      	movs	r3, #1
   83586:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8358a:	3630      	adds	r6, #48	; 0x30
   8358c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   83590:	9305      	str	r3, [sp, #20]
   83592:	e40d      	b.n	82db0 <_vfiprintf_r+0x2b0>
   83594:	aa0f      	add	r2, sp, #60	; 0x3c
   83596:	9904      	ldr	r1, [sp, #16]
   83598:	9806      	ldr	r0, [sp, #24]
   8359a:	f7ff fa71 	bl	82a80 <__sprint_r.part.0>
   8359e:	2800      	cmp	r0, #0
   835a0:	f47f af65 	bne.w	8346e <_vfiprintf_r+0x96e>
   835a4:	9910      	ldr	r1, [sp, #64]	; 0x40
   835a6:	46d1      	mov	r9, sl
   835a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   835aa:	1c48      	adds	r0, r1, #1
   835ac:	e457      	b.n	82e5e <_vfiprintf_r+0x35e>
   835ae:	aa0f      	add	r2, sp, #60	; 0x3c
   835b0:	9904      	ldr	r1, [sp, #16]
   835b2:	9806      	ldr	r0, [sp, #24]
   835b4:	f7ff fa64 	bl	82a80 <__sprint_r.part.0>
   835b8:	2800      	cmp	r0, #0
   835ba:	f47f af58 	bne.w	8346e <_vfiprintf_r+0x96e>
   835be:	9910      	ldr	r1, [sp, #64]	; 0x40
   835c0:	46d1      	mov	r9, sl
   835c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   835c4:	1c48      	adds	r0, r1, #1
   835c6:	e644      	b.n	83252 <_vfiprintf_r+0x752>
   835c8:	2a00      	cmp	r2, #0
   835ca:	f040 8087 	bne.w	836dc <_vfiprintf_r+0xbdc>
   835ce:	2001      	movs	r0, #1
   835d0:	4611      	mov	r1, r2
   835d2:	46d1      	mov	r9, sl
   835d4:	e641      	b.n	8325a <_vfiprintf_r+0x75a>
   835d6:	aa0f      	add	r2, sp, #60	; 0x3c
   835d8:	9904      	ldr	r1, [sp, #16]
   835da:	9806      	ldr	r0, [sp, #24]
   835dc:	f7ff fa50 	bl	82a80 <__sprint_r.part.0>
   835e0:	2800      	cmp	r0, #0
   835e2:	f47f af44 	bne.w	8346e <_vfiprintf_r+0x96e>
   835e6:	9810      	ldr	r0, [sp, #64]	; 0x40
   835e8:	46d1      	mov	r9, sl
   835ea:	9a11      	ldr	r2, [sp, #68]	; 0x44
   835ec:	3001      	adds	r0, #1
   835ee:	e668      	b.n	832c2 <_vfiprintf_r+0x7c2>
   835f0:	46cb      	mov	fp, r9
   835f2:	e6d7      	b.n	833a4 <_vfiprintf_r+0x8a4>
   835f4:	9d07      	ldr	r5, [sp, #28]
   835f6:	3507      	adds	r5, #7
   835f8:	f025 0507 	bic.w	r5, r5, #7
   835fc:	f105 0208 	add.w	r2, r5, #8
   83600:	e9d5 0100 	ldrd	r0, r1, [r5]
   83604:	9207      	str	r2, [sp, #28]
   83606:	4606      	mov	r6, r0
   83608:	460f      	mov	r7, r1
   8360a:	e4c5      	b.n	82f98 <_vfiprintf_r+0x498>
   8360c:	9d07      	ldr	r5, [sp, #28]
   8360e:	3507      	adds	r5, #7
   83610:	f025 0207 	bic.w	r2, r5, #7
   83614:	f102 0108 	add.w	r1, r2, #8
   83618:	e9d2 6700 	ldrd	r6, r7, [r2]
   8361c:	9107      	str	r1, [sp, #28]
   8361e:	2201      	movs	r2, #1
   83620:	f7ff bba7 	b.w	82d72 <_vfiprintf_r+0x272>
   83624:	9d07      	ldr	r5, [sp, #28]
   83626:	3507      	adds	r5, #7
   83628:	f025 0207 	bic.w	r2, r5, #7
   8362c:	f102 0108 	add.w	r1, r2, #8
   83630:	e9d2 6700 	ldrd	r6, r7, [r2]
   83634:	9107      	str	r1, [sp, #28]
   83636:	2200      	movs	r2, #0
   83638:	f7ff bb9b 	b.w	82d72 <_vfiprintf_r+0x272>
   8363c:	9d07      	ldr	r5, [sp, #28]
   8363e:	3507      	adds	r5, #7
   83640:	f025 0107 	bic.w	r1, r5, #7
   83644:	f101 0008 	add.w	r0, r1, #8
   83648:	9007      	str	r0, [sp, #28]
   8364a:	e9d1 6700 	ldrd	r6, r7, [r1]
   8364e:	e51c      	b.n	8308a <_vfiprintf_r+0x58a>
   83650:	46d3      	mov	fp, sl
   83652:	f7ff bbad 	b.w	82db0 <_vfiprintf_r+0x2b0>
   83656:	252d      	movs	r5, #45	; 0x2d
   83658:	4276      	negs	r6, r6
   8365a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   8365e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   83662:	2201      	movs	r2, #1
   83664:	f7ff bb8a 	b.w	82d7c <_vfiprintf_r+0x27c>
   83668:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8366a:	b9b3      	cbnz	r3, 8369a <_vfiprintf_r+0xb9a>
   8366c:	4611      	mov	r1, r2
   8366e:	2001      	movs	r0, #1
   83670:	46d1      	mov	r9, sl
   83672:	e5f2      	b.n	8325a <_vfiprintf_r+0x75a>
   83674:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83678:	f000 fdf4 	bl	84264 <__retarget_lock_release_recursive>
   8367c:	f04f 33ff 	mov.w	r3, #4294967295
   83680:	9303      	str	r3, [sp, #12]
   83682:	f7ff bb4c 	b.w	82d1e <_vfiprintf_r+0x21e>
   83686:	aa0f      	add	r2, sp, #60	; 0x3c
   83688:	9904      	ldr	r1, [sp, #16]
   8368a:	9806      	ldr	r0, [sp, #24]
   8368c:	f7ff f9f8 	bl	82a80 <__sprint_r.part.0>
   83690:	2800      	cmp	r0, #0
   83692:	f47f aeec 	bne.w	8346e <_vfiprintf_r+0x96e>
   83696:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83698:	e6aa      	b.n	833f0 <_vfiprintf_r+0x8f0>
   8369a:	2202      	movs	r2, #2
   8369c:	ab0e      	add	r3, sp, #56	; 0x38
   8369e:	921d      	str	r2, [sp, #116]	; 0x74
   836a0:	931c      	str	r3, [sp, #112]	; 0x70
   836a2:	2001      	movs	r0, #1
   836a4:	46d1      	mov	r9, sl
   836a6:	e5d0      	b.n	8324a <_vfiprintf_r+0x74a>
   836a8:	4d34      	ldr	r5, [pc, #208]	; (8377c <_vfiprintf_r+0xc7c>)
   836aa:	e5fd      	b.n	832a8 <_vfiprintf_r+0x7a8>
   836ac:	9a07      	ldr	r2, [sp, #28]
   836ae:	4613      	mov	r3, r2
   836b0:	3304      	adds	r3, #4
   836b2:	9307      	str	r3, [sp, #28]
   836b4:	9b03      	ldr	r3, [sp, #12]
   836b6:	6811      	ldr	r1, [r2, #0]
   836b8:	17dd      	asrs	r5, r3, #31
   836ba:	461a      	mov	r2, r3
   836bc:	462b      	mov	r3, r5
   836be:	e9c1 2300 	strd	r2, r3, [r1]
   836c2:	f7ff ba5a 	b.w	82b7a <_vfiprintf_r+0x7a>
   836c6:	4658      	mov	r0, fp
   836c8:	9507      	str	r5, [sp, #28]
   836ca:	9302      	str	r3, [sp, #8]
   836cc:	f7ff f978 	bl	829c0 <strlen>
   836d0:	2400      	movs	r4, #0
   836d2:	9005      	str	r0, [sp, #20]
   836d4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   836d8:	f7ff bb6a 	b.w	82db0 <_vfiprintf_r+0x2b0>
   836dc:	aa0f      	add	r2, sp, #60	; 0x3c
   836de:	9904      	ldr	r1, [sp, #16]
   836e0:	9806      	ldr	r0, [sp, #24]
   836e2:	f7ff f9cd 	bl	82a80 <__sprint_r.part.0>
   836e6:	2800      	cmp	r0, #0
   836e8:	f47f aec1 	bne.w	8346e <_vfiprintf_r+0x96e>
   836ec:	9910      	ldr	r1, [sp, #64]	; 0x40
   836ee:	46d1      	mov	r9, sl
   836f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   836f2:	1c48      	adds	r0, r1, #1
   836f4:	e5b1      	b.n	8325a <_vfiprintf_r+0x75a>
   836f6:	9910      	ldr	r1, [sp, #64]	; 0x40
   836f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   836fa:	3101      	adds	r1, #1
   836fc:	4e20      	ldr	r6, [pc, #128]	; (83780 <_vfiprintf_r+0xc80>)
   836fe:	f7ff bb9c 	b.w	82e3a <_vfiprintf_r+0x33a>
   83702:	2c06      	cmp	r4, #6
   83704:	bf28      	it	cs
   83706:	2406      	movcs	r4, #6
   83708:	9507      	str	r5, [sp, #28]
   8370a:	9405      	str	r4, [sp, #20]
   8370c:	9401      	str	r4, [sp, #4]
   8370e:	f8df b074 	ldr.w	fp, [pc, #116]	; 83784 <_vfiprintf_r+0xc84>
   83712:	e4e3      	b.n	830dc <_vfiprintf_r+0x5dc>
   83714:	9810      	ldr	r0, [sp, #64]	; 0x40
   83716:	4e1a      	ldr	r6, [pc, #104]	; (83780 <_vfiprintf_r+0xc80>)
   83718:	3001      	adds	r0, #1
   8371a:	e60e      	b.n	8333a <_vfiprintf_r+0x83a>
   8371c:	4686      	mov	lr, r0
   8371e:	4d17      	ldr	r5, [pc, #92]	; (8377c <_vfiprintf_r+0xc7c>)
   83720:	f7ff bbe2 	b.w	82ee8 <_vfiprintf_r+0x3e8>
   83724:	9405      	str	r4, [sp, #20]
   83726:	9507      	str	r5, [sp, #28]
   83728:	9302      	str	r3, [sp, #8]
   8372a:	4604      	mov	r4, r0
   8372c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83730:	f7ff bb3e 	b.w	82db0 <_vfiprintf_r+0x2b0>
   83734:	9806      	ldr	r0, [sp, #24]
   83736:	aa0f      	add	r2, sp, #60	; 0x3c
   83738:	4659      	mov	r1, fp
   8373a:	f7ff f9a1 	bl	82a80 <__sprint_r.part.0>
   8373e:	2800      	cmp	r0, #0
   83740:	f43f ae2e 	beq.w	833a0 <_vfiprintf_r+0x8a0>
   83744:	e62e      	b.n	833a4 <_vfiprintf_r+0x8a4>
   83746:	9907      	ldr	r1, [sp, #28]
   83748:	f898 2001 	ldrb.w	r2, [r8, #1]
   8374c:	680c      	ldr	r4, [r1, #0]
   8374e:	3104      	adds	r1, #4
   83750:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   83754:	46b8      	mov	r8, r7
   83756:	9107      	str	r1, [sp, #28]
   83758:	f7ff ba44 	b.w	82be4 <_vfiprintf_r+0xe4>
   8375c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83760:	e4a7      	b.n	830b2 <_vfiprintf_r+0x5b2>
   83762:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83766:	e521      	b.n	831ac <_vfiprintf_r+0x6ac>
   83768:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8376c:	e47c      	b.n	83068 <_vfiprintf_r+0x568>
   8376e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83772:	e43f      	b.n	82ff4 <_vfiprintf_r+0x4f4>
   83774:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83778:	f7ff bbfa 	b.w	82f70 <_vfiprintf_r+0x470>
   8377c:	000855a0 	.word	0x000855a0
   83780:	00085590 	.word	0x00085590
   83784:	00085588 	.word	0x00085588

00083788 <__sbprintf>:
   83788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8378c:	460c      	mov	r4, r1
   8378e:	f04f 0e00 	mov.w	lr, #0
   83792:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83796:	4606      	mov	r6, r0
   83798:	4617      	mov	r7, r2
   8379a:	4698      	mov	r8, r3
   8379c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8379e:	89e3      	ldrh	r3, [r4, #14]
   837a0:	8989      	ldrh	r1, [r1, #12]
   837a2:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   837a6:	f021 0102 	bic.w	r1, r1, #2
   837aa:	9219      	str	r2, [sp, #100]	; 0x64
   837ac:	f8ad 300e 	strh.w	r3, [sp, #14]
   837b0:	69e2      	ldr	r2, [r4, #28]
   837b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   837b4:	f8ad 100c 	strh.w	r1, [sp, #12]
   837b8:	a816      	add	r0, sp, #88	; 0x58
   837ba:	a91a      	add	r1, sp, #104	; 0x68
   837bc:	f8cd e018 	str.w	lr, [sp, #24]
   837c0:	9207      	str	r2, [sp, #28]
   837c2:	9309      	str	r3, [sp, #36]	; 0x24
   837c4:	9100      	str	r1, [sp, #0]
   837c6:	9104      	str	r1, [sp, #16]
   837c8:	9502      	str	r5, [sp, #8]
   837ca:	9505      	str	r5, [sp, #20]
   837cc:	f000 fd44 	bl	84258 <__retarget_lock_init_recursive>
   837d0:	4643      	mov	r3, r8
   837d2:	463a      	mov	r2, r7
   837d4:	4669      	mov	r1, sp
   837d6:	4630      	mov	r0, r6
   837d8:	f7ff f992 	bl	82b00 <_vfiprintf_r>
   837dc:	1e05      	subs	r5, r0, #0
   837de:	db07      	blt.n	837f0 <__sbprintf+0x68>
   837e0:	4630      	mov	r0, r6
   837e2:	4669      	mov	r1, sp
   837e4:	f000 f924 	bl	83a30 <_fflush_r>
   837e8:	2800      	cmp	r0, #0
   837ea:	bf18      	it	ne
   837ec:	f04f 35ff 	movne.w	r5, #4294967295
   837f0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   837f4:	065b      	lsls	r3, r3, #25
   837f6:	d503      	bpl.n	83800 <__sbprintf+0x78>
   837f8:	89a3      	ldrh	r3, [r4, #12]
   837fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   837fe:	81a3      	strh	r3, [r4, #12]
   83800:	9816      	ldr	r0, [sp, #88]	; 0x58
   83802:	f000 fd2b 	bl	8425c <__retarget_lock_close_recursive>
   83806:	4628      	mov	r0, r5
   83808:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083810 <__swsetup_r>:
   83810:	b538      	push	{r3, r4, r5, lr}
   83812:	4b30      	ldr	r3, [pc, #192]	; (838d4 <__swsetup_r+0xc4>)
   83814:	4605      	mov	r5, r0
   83816:	6818      	ldr	r0, [r3, #0]
   83818:	460c      	mov	r4, r1
   8381a:	b110      	cbz	r0, 83822 <__swsetup_r+0x12>
   8381c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8381e:	2b00      	cmp	r3, #0
   83820:	d038      	beq.n	83894 <__swsetup_r+0x84>
   83822:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83826:	b293      	uxth	r3, r2
   83828:	0718      	lsls	r0, r3, #28
   8382a:	d50c      	bpl.n	83846 <__swsetup_r+0x36>
   8382c:	6920      	ldr	r0, [r4, #16]
   8382e:	b1a8      	cbz	r0, 8385c <__swsetup_r+0x4c>
   83830:	f013 0201 	ands.w	r2, r3, #1
   83834:	d01e      	beq.n	83874 <__swsetup_r+0x64>
   83836:	2200      	movs	r2, #0
   83838:	6963      	ldr	r3, [r4, #20]
   8383a:	60a2      	str	r2, [r4, #8]
   8383c:	425b      	negs	r3, r3
   8383e:	61a3      	str	r3, [r4, #24]
   83840:	b1f0      	cbz	r0, 83880 <__swsetup_r+0x70>
   83842:	2000      	movs	r0, #0
   83844:	bd38      	pop	{r3, r4, r5, pc}
   83846:	06d9      	lsls	r1, r3, #27
   83848:	d53b      	bpl.n	838c2 <__swsetup_r+0xb2>
   8384a:	0758      	lsls	r0, r3, #29
   8384c:	d425      	bmi.n	8389a <__swsetup_r+0x8a>
   8384e:	6920      	ldr	r0, [r4, #16]
   83850:	f042 0308 	orr.w	r3, r2, #8
   83854:	81a3      	strh	r3, [r4, #12]
   83856:	b29b      	uxth	r3, r3
   83858:	2800      	cmp	r0, #0
   8385a:	d1e9      	bne.n	83830 <__swsetup_r+0x20>
   8385c:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83860:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83864:	d0e4      	beq.n	83830 <__swsetup_r+0x20>
   83866:	4628      	mov	r0, r5
   83868:	4621      	mov	r1, r4
   8386a:	f000 fd2b 	bl	842c4 <__smakebuf_r>
   8386e:	89a3      	ldrh	r3, [r4, #12]
   83870:	6920      	ldr	r0, [r4, #16]
   83872:	e7dd      	b.n	83830 <__swsetup_r+0x20>
   83874:	0799      	lsls	r1, r3, #30
   83876:	bf58      	it	pl
   83878:	6962      	ldrpl	r2, [r4, #20]
   8387a:	60a2      	str	r2, [r4, #8]
   8387c:	2800      	cmp	r0, #0
   8387e:	d1e0      	bne.n	83842 <__swsetup_r+0x32>
   83880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83884:	061a      	lsls	r2, r3, #24
   83886:	d5dd      	bpl.n	83844 <__swsetup_r+0x34>
   83888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8388c:	81a3      	strh	r3, [r4, #12]
   8388e:	f04f 30ff 	mov.w	r0, #4294967295
   83892:	bd38      	pop	{r3, r4, r5, pc}
   83894:	f000 f924 	bl	83ae0 <__sinit>
   83898:	e7c3      	b.n	83822 <__swsetup_r+0x12>
   8389a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8389c:	b151      	cbz	r1, 838b4 <__swsetup_r+0xa4>
   8389e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   838a2:	4299      	cmp	r1, r3
   838a4:	d004      	beq.n	838b0 <__swsetup_r+0xa0>
   838a6:	4628      	mov	r0, r5
   838a8:	f000 fa40 	bl	83d2c <_free_r>
   838ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   838b0:	2300      	movs	r3, #0
   838b2:	6323      	str	r3, [r4, #48]	; 0x30
   838b4:	2300      	movs	r3, #0
   838b6:	6920      	ldr	r0, [r4, #16]
   838b8:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   838bc:	e884 0009 	stmia.w	r4, {r0, r3}
   838c0:	e7c6      	b.n	83850 <__swsetup_r+0x40>
   838c2:	2309      	movs	r3, #9
   838c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   838c8:	602b      	str	r3, [r5, #0]
   838ca:	f04f 30ff 	mov.w	r0, #4294967295
   838ce:	81a2      	strh	r2, [r4, #12]
   838d0:	bd38      	pop	{r3, r4, r5, pc}
   838d2:	bf00      	nop
   838d4:	20070180 	.word	0x20070180

000838d8 <register_fini>:
   838d8:	4b02      	ldr	r3, [pc, #8]	; (838e4 <register_fini+0xc>)
   838da:	b113      	cbz	r3, 838e2 <register_fini+0xa>
   838dc:	4802      	ldr	r0, [pc, #8]	; (838e8 <register_fini+0x10>)
   838de:	f000 b805 	b.w	838ec <atexit>
   838e2:	4770      	bx	lr
   838e4:	00000000 	.word	0x00000000
   838e8:	00083b59 	.word	0x00083b59

000838ec <atexit>:
   838ec:	2300      	movs	r3, #0
   838ee:	4601      	mov	r1, r0
   838f0:	461a      	mov	r2, r3
   838f2:	4618      	mov	r0, r3
   838f4:	f001 bb56 	b.w	84fa4 <__register_exitproc>

000838f8 <__sflush_r>:
   838f8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   838fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83900:	b29a      	uxth	r2, r3
   83902:	460d      	mov	r5, r1
   83904:	0711      	lsls	r1, r2, #28
   83906:	4680      	mov	r8, r0
   83908:	d43a      	bmi.n	83980 <__sflush_r+0x88>
   8390a:	686a      	ldr	r2, [r5, #4]
   8390c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83910:	2a00      	cmp	r2, #0
   83912:	81ab      	strh	r3, [r5, #12]
   83914:	dd70      	ble.n	839f8 <__sflush_r+0x100>
   83916:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83918:	2c00      	cmp	r4, #0
   8391a:	d04a      	beq.n	839b2 <__sflush_r+0xba>
   8391c:	2200      	movs	r2, #0
   8391e:	b29b      	uxth	r3, r3
   83920:	f8d8 6000 	ldr.w	r6, [r8]
   83924:	f8c8 2000 	str.w	r2, [r8]
   83928:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   8392c:	d068      	beq.n	83a00 <__sflush_r+0x108>
   8392e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83930:	075f      	lsls	r7, r3, #29
   83932:	d505      	bpl.n	83940 <__sflush_r+0x48>
   83934:	6869      	ldr	r1, [r5, #4]
   83936:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83938:	1a52      	subs	r2, r2, r1
   8393a:	b10b      	cbz	r3, 83940 <__sflush_r+0x48>
   8393c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8393e:	1ad2      	subs	r2, r2, r3
   83940:	2300      	movs	r3, #0
   83942:	69e9      	ldr	r1, [r5, #28]
   83944:	4640      	mov	r0, r8
   83946:	47a0      	blx	r4
   83948:	1c44      	adds	r4, r0, #1
   8394a:	d03d      	beq.n	839c8 <__sflush_r+0xd0>
   8394c:	2100      	movs	r1, #0
   8394e:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83952:	692a      	ldr	r2, [r5, #16]
   83954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83958:	81ab      	strh	r3, [r5, #12]
   8395a:	04db      	lsls	r3, r3, #19
   8395c:	6069      	str	r1, [r5, #4]
   8395e:	602a      	str	r2, [r5, #0]
   83960:	d448      	bmi.n	839f4 <__sflush_r+0xfc>
   83962:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83964:	f8c8 6000 	str.w	r6, [r8]
   83968:	b319      	cbz	r1, 839b2 <__sflush_r+0xba>
   8396a:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8396e:	4299      	cmp	r1, r3
   83970:	d002      	beq.n	83978 <__sflush_r+0x80>
   83972:	4640      	mov	r0, r8
   83974:	f000 f9da 	bl	83d2c <_free_r>
   83978:	2000      	movs	r0, #0
   8397a:	6328      	str	r0, [r5, #48]	; 0x30
   8397c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83980:	692e      	ldr	r6, [r5, #16]
   83982:	b1b6      	cbz	r6, 839b2 <__sflush_r+0xba>
   83984:	0791      	lsls	r1, r2, #30
   83986:	bf18      	it	ne
   83988:	2300      	movne	r3, #0
   8398a:	682c      	ldr	r4, [r5, #0]
   8398c:	bf08      	it	eq
   8398e:	696b      	ldreq	r3, [r5, #20]
   83990:	602e      	str	r6, [r5, #0]
   83992:	1ba4      	subs	r4, r4, r6
   83994:	60ab      	str	r3, [r5, #8]
   83996:	e00a      	b.n	839ae <__sflush_r+0xb6>
   83998:	4623      	mov	r3, r4
   8399a:	4632      	mov	r2, r6
   8399c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8399e:	69e9      	ldr	r1, [r5, #28]
   839a0:	4640      	mov	r0, r8
   839a2:	47b8      	blx	r7
   839a4:	2800      	cmp	r0, #0
   839a6:	eba4 0400 	sub.w	r4, r4, r0
   839aa:	4406      	add	r6, r0
   839ac:	dd04      	ble.n	839b8 <__sflush_r+0xc0>
   839ae:	2c00      	cmp	r4, #0
   839b0:	dcf2      	bgt.n	83998 <__sflush_r+0xa0>
   839b2:	2000      	movs	r0, #0
   839b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839b8:	89ab      	ldrh	r3, [r5, #12]
   839ba:	f04f 30ff 	mov.w	r0, #4294967295
   839be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   839c2:	81ab      	strh	r3, [r5, #12]
   839c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   839c8:	f8d8 4000 	ldr.w	r4, [r8]
   839cc:	2c1d      	cmp	r4, #29
   839ce:	d8f3      	bhi.n	839b8 <__sflush_r+0xc0>
   839d0:	4b16      	ldr	r3, [pc, #88]	; (83a2c <__sflush_r+0x134>)
   839d2:	40e3      	lsrs	r3, r4
   839d4:	43db      	mvns	r3, r3
   839d6:	f013 0301 	ands.w	r3, r3, #1
   839da:	d1ed      	bne.n	839b8 <__sflush_r+0xc0>
   839dc:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   839e0:	6929      	ldr	r1, [r5, #16]
   839e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   839e6:	81aa      	strh	r2, [r5, #12]
   839e8:	04d2      	lsls	r2, r2, #19
   839ea:	606b      	str	r3, [r5, #4]
   839ec:	6029      	str	r1, [r5, #0]
   839ee:	d5b8      	bpl.n	83962 <__sflush_r+0x6a>
   839f0:	2c00      	cmp	r4, #0
   839f2:	d1b6      	bne.n	83962 <__sflush_r+0x6a>
   839f4:	6528      	str	r0, [r5, #80]	; 0x50
   839f6:	e7b4      	b.n	83962 <__sflush_r+0x6a>
   839f8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   839fa:	2a00      	cmp	r2, #0
   839fc:	dc8b      	bgt.n	83916 <__sflush_r+0x1e>
   839fe:	e7d8      	b.n	839b2 <__sflush_r+0xba>
   83a00:	2301      	movs	r3, #1
   83a02:	69e9      	ldr	r1, [r5, #28]
   83a04:	4640      	mov	r0, r8
   83a06:	47a0      	blx	r4
   83a08:	1c43      	adds	r3, r0, #1
   83a0a:	4602      	mov	r2, r0
   83a0c:	d002      	beq.n	83a14 <__sflush_r+0x11c>
   83a0e:	89ab      	ldrh	r3, [r5, #12]
   83a10:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83a12:	e78d      	b.n	83930 <__sflush_r+0x38>
   83a14:	f8d8 3000 	ldr.w	r3, [r8]
   83a18:	2b00      	cmp	r3, #0
   83a1a:	d0f8      	beq.n	83a0e <__sflush_r+0x116>
   83a1c:	2b1d      	cmp	r3, #29
   83a1e:	d001      	beq.n	83a24 <__sflush_r+0x12c>
   83a20:	2b16      	cmp	r3, #22
   83a22:	d1c9      	bne.n	839b8 <__sflush_r+0xc0>
   83a24:	f8c8 6000 	str.w	r6, [r8]
   83a28:	e7c3      	b.n	839b2 <__sflush_r+0xba>
   83a2a:	bf00      	nop
   83a2c:	20400001 	.word	0x20400001

00083a30 <_fflush_r>:
   83a30:	b538      	push	{r3, r4, r5, lr}
   83a32:	460d      	mov	r5, r1
   83a34:	4604      	mov	r4, r0
   83a36:	b108      	cbz	r0, 83a3c <_fflush_r+0xc>
   83a38:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83a3a:	b1bb      	cbz	r3, 83a6c <_fflush_r+0x3c>
   83a3c:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   83a40:	b188      	cbz	r0, 83a66 <_fflush_r+0x36>
   83a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83a44:	07db      	lsls	r3, r3, #31
   83a46:	d401      	bmi.n	83a4c <_fflush_r+0x1c>
   83a48:	0581      	lsls	r1, r0, #22
   83a4a:	d517      	bpl.n	83a7c <_fflush_r+0x4c>
   83a4c:	4620      	mov	r0, r4
   83a4e:	4629      	mov	r1, r5
   83a50:	f7ff ff52 	bl	838f8 <__sflush_r>
   83a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83a56:	4604      	mov	r4, r0
   83a58:	07da      	lsls	r2, r3, #31
   83a5a:	d402      	bmi.n	83a62 <_fflush_r+0x32>
   83a5c:	89ab      	ldrh	r3, [r5, #12]
   83a5e:	059b      	lsls	r3, r3, #22
   83a60:	d507      	bpl.n	83a72 <_fflush_r+0x42>
   83a62:	4620      	mov	r0, r4
   83a64:	bd38      	pop	{r3, r4, r5, pc}
   83a66:	4604      	mov	r4, r0
   83a68:	4620      	mov	r0, r4
   83a6a:	bd38      	pop	{r3, r4, r5, pc}
   83a6c:	f000 f838 	bl	83ae0 <__sinit>
   83a70:	e7e4      	b.n	83a3c <_fflush_r+0xc>
   83a72:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83a74:	f000 fbf6 	bl	84264 <__retarget_lock_release_recursive>
   83a78:	4620      	mov	r0, r4
   83a7a:	bd38      	pop	{r3, r4, r5, pc}
   83a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83a7e:	f000 fbef 	bl	84260 <__retarget_lock_acquire_recursive>
   83a82:	e7e3      	b.n	83a4c <_fflush_r+0x1c>

00083a84 <_cleanup_r>:
   83a84:	4901      	ldr	r1, [pc, #4]	; (83a8c <_cleanup_r+0x8>)
   83a86:	f000 bbb1 	b.w	841ec <_fwalk_reent>
   83a8a:	bf00      	nop
   83a8c:	0008508d 	.word	0x0008508d

00083a90 <std.isra.0>:
   83a90:	2300      	movs	r3, #0
   83a92:	b510      	push	{r4, lr}
   83a94:	4604      	mov	r4, r0
   83a96:	8181      	strh	r1, [r0, #12]
   83a98:	81c2      	strh	r2, [r0, #14]
   83a9a:	6003      	str	r3, [r0, #0]
   83a9c:	6043      	str	r3, [r0, #4]
   83a9e:	6083      	str	r3, [r0, #8]
   83aa0:	6643      	str	r3, [r0, #100]	; 0x64
   83aa2:	6103      	str	r3, [r0, #16]
   83aa4:	6143      	str	r3, [r0, #20]
   83aa6:	6183      	str	r3, [r0, #24]
   83aa8:	4619      	mov	r1, r3
   83aaa:	2208      	movs	r2, #8
   83aac:	305c      	adds	r0, #92	; 0x5c
   83aae:	f7fe fe69 	bl	82784 <memset>
   83ab2:	4807      	ldr	r0, [pc, #28]	; (83ad0 <std.isra.0+0x40>)
   83ab4:	4907      	ldr	r1, [pc, #28]	; (83ad4 <std.isra.0+0x44>)
   83ab6:	4a08      	ldr	r2, [pc, #32]	; (83ad8 <std.isra.0+0x48>)
   83ab8:	4b08      	ldr	r3, [pc, #32]	; (83adc <std.isra.0+0x4c>)
   83aba:	6220      	str	r0, [r4, #32]
   83abc:	61e4      	str	r4, [r4, #28]
   83abe:	6261      	str	r1, [r4, #36]	; 0x24
   83ac0:	62a2      	str	r2, [r4, #40]	; 0x28
   83ac2:	62e3      	str	r3, [r4, #44]	; 0x2c
   83ac4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83acc:	f000 bbc4 	b.w	84258 <__retarget_lock_init_recursive>
   83ad0:	00084dd5 	.word	0x00084dd5
   83ad4:	00084df9 	.word	0x00084df9
   83ad8:	00084e35 	.word	0x00084e35
   83adc:	00084e55 	.word	0x00084e55

00083ae0 <__sinit>:
   83ae0:	b510      	push	{r4, lr}
   83ae2:	4604      	mov	r4, r0
   83ae4:	4814      	ldr	r0, [pc, #80]	; (83b38 <__sinit+0x58>)
   83ae6:	f000 fbbb 	bl	84260 <__retarget_lock_acquire_recursive>
   83aea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83aec:	b9fa      	cbnz	r2, 83b2e <__sinit+0x4e>
   83aee:	2003      	movs	r0, #3
   83af0:	4912      	ldr	r1, [pc, #72]	; (83b3c <__sinit+0x5c>)
   83af2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83af6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83afa:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   83afe:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   83b02:	63e1      	str	r1, [r4, #60]	; 0x3c
   83b04:	6860      	ldr	r0, [r4, #4]
   83b06:	2104      	movs	r1, #4
   83b08:	f7ff ffc2 	bl	83a90 <std.isra.0>
   83b0c:	68a0      	ldr	r0, [r4, #8]
   83b0e:	2201      	movs	r2, #1
   83b10:	2109      	movs	r1, #9
   83b12:	f7ff ffbd 	bl	83a90 <std.isra.0>
   83b16:	68e0      	ldr	r0, [r4, #12]
   83b18:	2202      	movs	r2, #2
   83b1a:	2112      	movs	r1, #18
   83b1c:	f7ff ffb8 	bl	83a90 <std.isra.0>
   83b20:	2301      	movs	r3, #1
   83b22:	4805      	ldr	r0, [pc, #20]	; (83b38 <__sinit+0x58>)
   83b24:	63a3      	str	r3, [r4, #56]	; 0x38
   83b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83b2a:	f000 bb9b 	b.w	84264 <__retarget_lock_release_recursive>
   83b2e:	4802      	ldr	r0, [pc, #8]	; (83b38 <__sinit+0x58>)
   83b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83b34:	f000 bb96 	b.w	84264 <__retarget_lock_release_recursive>
   83b38:	2007adf8 	.word	0x2007adf8
   83b3c:	00083a85 	.word	0x00083a85

00083b40 <__sfp_lock_acquire>:
   83b40:	4801      	ldr	r0, [pc, #4]	; (83b48 <__sfp_lock_acquire+0x8>)
   83b42:	f000 bb8d 	b.w	84260 <__retarget_lock_acquire_recursive>
   83b46:	bf00      	nop
   83b48:	2007ae0c 	.word	0x2007ae0c

00083b4c <__sfp_lock_release>:
   83b4c:	4801      	ldr	r0, [pc, #4]	; (83b54 <__sfp_lock_release+0x8>)
   83b4e:	f000 bb89 	b.w	84264 <__retarget_lock_release_recursive>
   83b52:	bf00      	nop
   83b54:	2007ae0c 	.word	0x2007ae0c

00083b58 <__libc_fini_array>:
   83b58:	b538      	push	{r3, r4, r5, lr}
   83b5a:	4c0a      	ldr	r4, [pc, #40]	; (83b84 <__libc_fini_array+0x2c>)
   83b5c:	4d0a      	ldr	r5, [pc, #40]	; (83b88 <__libc_fini_array+0x30>)
   83b5e:	1b64      	subs	r4, r4, r5
   83b60:	10a4      	asrs	r4, r4, #2
   83b62:	d00a      	beq.n	83b7a <__libc_fini_array+0x22>
   83b64:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   83b68:	3b01      	subs	r3, #1
   83b6a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83b6e:	3c01      	subs	r4, #1
   83b70:	f855 3904 	ldr.w	r3, [r5], #-4
   83b74:	4798      	blx	r3
   83b76:	2c00      	cmp	r4, #0
   83b78:	d1f9      	bne.n	83b6e <__libc_fini_array+0x16>
   83b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83b7e:	f001 bdab 	b.w	856d8 <_fini>
   83b82:	bf00      	nop
   83b84:	000856e8 	.word	0x000856e8
   83b88:	000856e4 	.word	0x000856e4

00083b8c <__fputwc>:
   83b8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83b90:	b083      	sub	sp, #12
   83b92:	4607      	mov	r7, r0
   83b94:	4688      	mov	r8, r1
   83b96:	4614      	mov	r4, r2
   83b98:	f000 fb50 	bl	8423c <__locale_mb_cur_max>
   83b9c:	2801      	cmp	r0, #1
   83b9e:	d033      	beq.n	83c08 <__fputwc+0x7c>
   83ba0:	4642      	mov	r2, r8
   83ba2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83ba6:	a901      	add	r1, sp, #4
   83ba8:	4638      	mov	r0, r7
   83baa:	f001 f9af 	bl	84f0c <_wcrtomb_r>
   83bae:	1c42      	adds	r2, r0, #1
   83bb0:	4606      	mov	r6, r0
   83bb2:	d022      	beq.n	83bfa <__fputwc+0x6e>
   83bb4:	b390      	cbz	r0, 83c1c <__fputwc+0x90>
   83bb6:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83bba:	2500      	movs	r5, #0
   83bbc:	f10d 0904 	add.w	r9, sp, #4
   83bc0:	e008      	b.n	83bd4 <__fputwc+0x48>
   83bc2:	6823      	ldr	r3, [r4, #0]
   83bc4:	1c5a      	adds	r2, r3, #1
   83bc6:	6022      	str	r2, [r4, #0]
   83bc8:	7019      	strb	r1, [r3, #0]
   83bca:	3501      	adds	r5, #1
   83bcc:	42b5      	cmp	r5, r6
   83bce:	d225      	bcs.n	83c1c <__fputwc+0x90>
   83bd0:	f815 1009 	ldrb.w	r1, [r5, r9]
   83bd4:	68a3      	ldr	r3, [r4, #8]
   83bd6:	3b01      	subs	r3, #1
   83bd8:	2b00      	cmp	r3, #0
   83bda:	60a3      	str	r3, [r4, #8]
   83bdc:	daf1      	bge.n	83bc2 <__fputwc+0x36>
   83bde:	69a2      	ldr	r2, [r4, #24]
   83be0:	4293      	cmp	r3, r2
   83be2:	db01      	blt.n	83be8 <__fputwc+0x5c>
   83be4:	290a      	cmp	r1, #10
   83be6:	d1ec      	bne.n	83bc2 <__fputwc+0x36>
   83be8:	4622      	mov	r2, r4
   83bea:	4638      	mov	r0, r7
   83bec:	f001 f936 	bl	84e5c <__swbuf_r>
   83bf0:	1c43      	adds	r3, r0, #1
   83bf2:	d1ea      	bne.n	83bca <__fputwc+0x3e>
   83bf4:	b003      	add	sp, #12
   83bf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83bfa:	89a3      	ldrh	r3, [r4, #12]
   83bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83c00:	81a3      	strh	r3, [r4, #12]
   83c02:	b003      	add	sp, #12
   83c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83c08:	f108 33ff 	add.w	r3, r8, #4294967295
   83c0c:	2bfe      	cmp	r3, #254	; 0xfe
   83c0e:	d8c7      	bhi.n	83ba0 <__fputwc+0x14>
   83c10:	fa5f f188 	uxtb.w	r1, r8
   83c14:	4606      	mov	r6, r0
   83c16:	f88d 1004 	strb.w	r1, [sp, #4]
   83c1a:	e7ce      	b.n	83bba <__fputwc+0x2e>
   83c1c:	4640      	mov	r0, r8
   83c1e:	b003      	add	sp, #12
   83c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00083c24 <_fputwc_r>:
   83c24:	b530      	push	{r4, r5, lr}
   83c26:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83c28:	4614      	mov	r4, r2
   83c2a:	f013 0f01 	tst.w	r3, #1
   83c2e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83c32:	b083      	sub	sp, #12
   83c34:	4605      	mov	r5, r0
   83c36:	b29a      	uxth	r2, r3
   83c38:	d101      	bne.n	83c3e <_fputwc_r+0x1a>
   83c3a:	0590      	lsls	r0, r2, #22
   83c3c:	d51c      	bpl.n	83c78 <_fputwc_r+0x54>
   83c3e:	0490      	lsls	r0, r2, #18
   83c40:	d406      	bmi.n	83c50 <_fputwc_r+0x2c>
   83c42:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83c44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83c4c:	81a3      	strh	r3, [r4, #12]
   83c4e:	6662      	str	r2, [r4, #100]	; 0x64
   83c50:	4628      	mov	r0, r5
   83c52:	4622      	mov	r2, r4
   83c54:	f7ff ff9a 	bl	83b8c <__fputwc>
   83c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83c5a:	4605      	mov	r5, r0
   83c5c:	07da      	lsls	r2, r3, #31
   83c5e:	d402      	bmi.n	83c66 <_fputwc_r+0x42>
   83c60:	89a3      	ldrh	r3, [r4, #12]
   83c62:	059b      	lsls	r3, r3, #22
   83c64:	d502      	bpl.n	83c6c <_fputwc_r+0x48>
   83c66:	4628      	mov	r0, r5
   83c68:	b003      	add	sp, #12
   83c6a:	bd30      	pop	{r4, r5, pc}
   83c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c6e:	f000 faf9 	bl	84264 <__retarget_lock_release_recursive>
   83c72:	4628      	mov	r0, r5
   83c74:	b003      	add	sp, #12
   83c76:	bd30      	pop	{r4, r5, pc}
   83c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c7a:	9101      	str	r1, [sp, #4]
   83c7c:	f000 faf0 	bl	84260 <__retarget_lock_acquire_recursive>
   83c80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c84:	9901      	ldr	r1, [sp, #4]
   83c86:	b29a      	uxth	r2, r3
   83c88:	e7d9      	b.n	83c3e <_fputwc_r+0x1a>
   83c8a:	bf00      	nop

00083c8c <_malloc_trim_r>:
   83c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c8e:	460c      	mov	r4, r1
   83c90:	4f23      	ldr	r7, [pc, #140]	; (83d20 <_malloc_trim_r+0x94>)
   83c92:	4606      	mov	r6, r0
   83c94:	f000 feca 	bl	84a2c <__malloc_lock>
   83c98:	68bb      	ldr	r3, [r7, #8]
   83c9a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83c9e:	685d      	ldr	r5, [r3, #4]
   83ca0:	310f      	adds	r1, #15
   83ca2:	f025 0503 	bic.w	r5, r5, #3
   83ca6:	4429      	add	r1, r5
   83ca8:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83cac:	f021 010f 	bic.w	r1, r1, #15
   83cb0:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83cb4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83cb8:	db07      	blt.n	83cca <_malloc_trim_r+0x3e>
   83cba:	2100      	movs	r1, #0
   83cbc:	4630      	mov	r0, r6
   83cbe:	f001 f877 	bl	84db0 <_sbrk_r>
   83cc2:	68bb      	ldr	r3, [r7, #8]
   83cc4:	442b      	add	r3, r5
   83cc6:	4298      	cmp	r0, r3
   83cc8:	d004      	beq.n	83cd4 <_malloc_trim_r+0x48>
   83cca:	4630      	mov	r0, r6
   83ccc:	f000 feb4 	bl	84a38 <__malloc_unlock>
   83cd0:	2000      	movs	r0, #0
   83cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cd4:	4261      	negs	r1, r4
   83cd6:	4630      	mov	r0, r6
   83cd8:	f001 f86a 	bl	84db0 <_sbrk_r>
   83cdc:	3001      	adds	r0, #1
   83cde:	d00d      	beq.n	83cfc <_malloc_trim_r+0x70>
   83ce0:	4b10      	ldr	r3, [pc, #64]	; (83d24 <_malloc_trim_r+0x98>)
   83ce2:	68ba      	ldr	r2, [r7, #8]
   83ce4:	6819      	ldr	r1, [r3, #0]
   83ce6:	1b2d      	subs	r5, r5, r4
   83ce8:	f045 0501 	orr.w	r5, r5, #1
   83cec:	4630      	mov	r0, r6
   83cee:	1b09      	subs	r1, r1, r4
   83cf0:	6055      	str	r5, [r2, #4]
   83cf2:	6019      	str	r1, [r3, #0]
   83cf4:	f000 fea0 	bl	84a38 <__malloc_unlock>
   83cf8:	2001      	movs	r0, #1
   83cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cfc:	2100      	movs	r1, #0
   83cfe:	4630      	mov	r0, r6
   83d00:	f001 f856 	bl	84db0 <_sbrk_r>
   83d04:	68ba      	ldr	r2, [r7, #8]
   83d06:	1a83      	subs	r3, r0, r2
   83d08:	2b0f      	cmp	r3, #15
   83d0a:	ddde      	ble.n	83cca <_malloc_trim_r+0x3e>
   83d0c:	4c06      	ldr	r4, [pc, #24]	; (83d28 <_malloc_trim_r+0x9c>)
   83d0e:	4905      	ldr	r1, [pc, #20]	; (83d24 <_malloc_trim_r+0x98>)
   83d10:	6824      	ldr	r4, [r4, #0]
   83d12:	f043 0301 	orr.w	r3, r3, #1
   83d16:	1b00      	subs	r0, r0, r4
   83d18:	6053      	str	r3, [r2, #4]
   83d1a:	6008      	str	r0, [r1, #0]
   83d1c:	e7d5      	b.n	83cca <_malloc_trim_r+0x3e>
   83d1e:	bf00      	nop
   83d20:	20070720 	.word	0x20070720
   83d24:	2007adac 	.word	0x2007adac
   83d28:	20070b28 	.word	0x20070b28

00083d2c <_free_r>:
   83d2c:	2900      	cmp	r1, #0
   83d2e:	d044      	beq.n	83dba <_free_r+0x8e>
   83d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d34:	460d      	mov	r5, r1
   83d36:	4680      	mov	r8, r0
   83d38:	f000 fe78 	bl	84a2c <__malloc_lock>
   83d3c:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83d40:	4969      	ldr	r1, [pc, #420]	; (83ee8 <_free_r+0x1bc>)
   83d42:	f1a5 0408 	sub.w	r4, r5, #8
   83d46:	f027 0301 	bic.w	r3, r7, #1
   83d4a:	18e2      	adds	r2, r4, r3
   83d4c:	688e      	ldr	r6, [r1, #8]
   83d4e:	6850      	ldr	r0, [r2, #4]
   83d50:	42b2      	cmp	r2, r6
   83d52:	f020 0003 	bic.w	r0, r0, #3
   83d56:	d05e      	beq.n	83e16 <_free_r+0xea>
   83d58:	07fe      	lsls	r6, r7, #31
   83d5a:	6050      	str	r0, [r2, #4]
   83d5c:	d40b      	bmi.n	83d76 <_free_r+0x4a>
   83d5e:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83d62:	f101 0e08 	add.w	lr, r1, #8
   83d66:	1be4      	subs	r4, r4, r7
   83d68:	68a5      	ldr	r5, [r4, #8]
   83d6a:	443b      	add	r3, r7
   83d6c:	4575      	cmp	r5, lr
   83d6e:	d06d      	beq.n	83e4c <_free_r+0x120>
   83d70:	68e7      	ldr	r7, [r4, #12]
   83d72:	60ef      	str	r7, [r5, #12]
   83d74:	60bd      	str	r5, [r7, #8]
   83d76:	1815      	adds	r5, r2, r0
   83d78:	686d      	ldr	r5, [r5, #4]
   83d7a:	07ed      	lsls	r5, r5, #31
   83d7c:	d53e      	bpl.n	83dfc <_free_r+0xd0>
   83d7e:	f043 0201 	orr.w	r2, r3, #1
   83d82:	6062      	str	r2, [r4, #4]
   83d84:	50e3      	str	r3, [r4, r3]
   83d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83d8a:	d217      	bcs.n	83dbc <_free_r+0x90>
   83d8c:	2201      	movs	r2, #1
   83d8e:	08db      	lsrs	r3, r3, #3
   83d90:	1098      	asrs	r0, r3, #2
   83d92:	684d      	ldr	r5, [r1, #4]
   83d94:	4413      	add	r3, r2
   83d96:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83d9a:	4082      	lsls	r2, r0
   83d9c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83da0:	432a      	orrs	r2, r5
   83da2:	3808      	subs	r0, #8
   83da4:	60e0      	str	r0, [r4, #12]
   83da6:	60a7      	str	r7, [r4, #8]
   83da8:	604a      	str	r2, [r1, #4]
   83daa:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83dae:	60fc      	str	r4, [r7, #12]
   83db0:	4640      	mov	r0, r8
   83db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83db6:	f000 be3f 	b.w	84a38 <__malloc_unlock>
   83dba:	4770      	bx	lr
   83dbc:	0a5a      	lsrs	r2, r3, #9
   83dbe:	2a04      	cmp	r2, #4
   83dc0:	d852      	bhi.n	83e68 <_free_r+0x13c>
   83dc2:	099a      	lsrs	r2, r3, #6
   83dc4:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83dc8:	00ff      	lsls	r7, r7, #3
   83dca:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83dce:	19c8      	adds	r0, r1, r7
   83dd0:	59ca      	ldr	r2, [r1, r7]
   83dd2:	3808      	subs	r0, #8
   83dd4:	4290      	cmp	r0, r2
   83dd6:	d04f      	beq.n	83e78 <_free_r+0x14c>
   83dd8:	6851      	ldr	r1, [r2, #4]
   83dda:	f021 0103 	bic.w	r1, r1, #3
   83dde:	428b      	cmp	r3, r1
   83de0:	d232      	bcs.n	83e48 <_free_r+0x11c>
   83de2:	6892      	ldr	r2, [r2, #8]
   83de4:	4290      	cmp	r0, r2
   83de6:	d1f7      	bne.n	83dd8 <_free_r+0xac>
   83de8:	68c3      	ldr	r3, [r0, #12]
   83dea:	60a0      	str	r0, [r4, #8]
   83dec:	60e3      	str	r3, [r4, #12]
   83dee:	609c      	str	r4, [r3, #8]
   83df0:	60c4      	str	r4, [r0, #12]
   83df2:	4640      	mov	r0, r8
   83df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83df8:	f000 be1e 	b.w	84a38 <__malloc_unlock>
   83dfc:	6895      	ldr	r5, [r2, #8]
   83dfe:	4f3b      	ldr	r7, [pc, #236]	; (83eec <_free_r+0x1c0>)
   83e00:	4403      	add	r3, r0
   83e02:	42bd      	cmp	r5, r7
   83e04:	d040      	beq.n	83e88 <_free_r+0x15c>
   83e06:	68d0      	ldr	r0, [r2, #12]
   83e08:	f043 0201 	orr.w	r2, r3, #1
   83e0c:	60e8      	str	r0, [r5, #12]
   83e0e:	6085      	str	r5, [r0, #8]
   83e10:	6062      	str	r2, [r4, #4]
   83e12:	50e3      	str	r3, [r4, r3]
   83e14:	e7b7      	b.n	83d86 <_free_r+0x5a>
   83e16:	07ff      	lsls	r7, r7, #31
   83e18:	4403      	add	r3, r0
   83e1a:	d407      	bmi.n	83e2c <_free_r+0x100>
   83e1c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83e20:	1b64      	subs	r4, r4, r5
   83e22:	68e2      	ldr	r2, [r4, #12]
   83e24:	68a0      	ldr	r0, [r4, #8]
   83e26:	442b      	add	r3, r5
   83e28:	60c2      	str	r2, [r0, #12]
   83e2a:	6090      	str	r0, [r2, #8]
   83e2c:	4a30      	ldr	r2, [pc, #192]	; (83ef0 <_free_r+0x1c4>)
   83e2e:	f043 0001 	orr.w	r0, r3, #1
   83e32:	6812      	ldr	r2, [r2, #0]
   83e34:	6060      	str	r0, [r4, #4]
   83e36:	4293      	cmp	r3, r2
   83e38:	608c      	str	r4, [r1, #8]
   83e3a:	d3b9      	bcc.n	83db0 <_free_r+0x84>
   83e3c:	4b2d      	ldr	r3, [pc, #180]	; (83ef4 <_free_r+0x1c8>)
   83e3e:	4640      	mov	r0, r8
   83e40:	6819      	ldr	r1, [r3, #0]
   83e42:	f7ff ff23 	bl	83c8c <_malloc_trim_r>
   83e46:	e7b3      	b.n	83db0 <_free_r+0x84>
   83e48:	4610      	mov	r0, r2
   83e4a:	e7cd      	b.n	83de8 <_free_r+0xbc>
   83e4c:	1811      	adds	r1, r2, r0
   83e4e:	6849      	ldr	r1, [r1, #4]
   83e50:	07c9      	lsls	r1, r1, #31
   83e52:	d444      	bmi.n	83ede <_free_r+0x1b2>
   83e54:	6891      	ldr	r1, [r2, #8]
   83e56:	4403      	add	r3, r0
   83e58:	68d2      	ldr	r2, [r2, #12]
   83e5a:	f043 0001 	orr.w	r0, r3, #1
   83e5e:	60ca      	str	r2, [r1, #12]
   83e60:	6091      	str	r1, [r2, #8]
   83e62:	6060      	str	r0, [r4, #4]
   83e64:	50e3      	str	r3, [r4, r3]
   83e66:	e7a3      	b.n	83db0 <_free_r+0x84>
   83e68:	2a14      	cmp	r2, #20
   83e6a:	d816      	bhi.n	83e9a <_free_r+0x16e>
   83e6c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83e70:	00ff      	lsls	r7, r7, #3
   83e72:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83e76:	e7aa      	b.n	83dce <_free_r+0xa2>
   83e78:	2301      	movs	r3, #1
   83e7a:	10aa      	asrs	r2, r5, #2
   83e7c:	684d      	ldr	r5, [r1, #4]
   83e7e:	4093      	lsls	r3, r2
   83e80:	432b      	orrs	r3, r5
   83e82:	604b      	str	r3, [r1, #4]
   83e84:	4603      	mov	r3, r0
   83e86:	e7b0      	b.n	83dea <_free_r+0xbe>
   83e88:	f043 0201 	orr.w	r2, r3, #1
   83e8c:	614c      	str	r4, [r1, #20]
   83e8e:	610c      	str	r4, [r1, #16]
   83e90:	60e5      	str	r5, [r4, #12]
   83e92:	60a5      	str	r5, [r4, #8]
   83e94:	6062      	str	r2, [r4, #4]
   83e96:	50e3      	str	r3, [r4, r3]
   83e98:	e78a      	b.n	83db0 <_free_r+0x84>
   83e9a:	2a54      	cmp	r2, #84	; 0x54
   83e9c:	d806      	bhi.n	83eac <_free_r+0x180>
   83e9e:	0b1a      	lsrs	r2, r3, #12
   83ea0:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83ea4:	00ff      	lsls	r7, r7, #3
   83ea6:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83eaa:	e790      	b.n	83dce <_free_r+0xa2>
   83eac:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83eb0:	d806      	bhi.n	83ec0 <_free_r+0x194>
   83eb2:	0bda      	lsrs	r2, r3, #15
   83eb4:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83eb8:	00ff      	lsls	r7, r7, #3
   83eba:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83ebe:	e786      	b.n	83dce <_free_r+0xa2>
   83ec0:	f240 5054 	movw	r0, #1364	; 0x554
   83ec4:	4282      	cmp	r2, r0
   83ec6:	d806      	bhi.n	83ed6 <_free_r+0x1aa>
   83ec8:	0c9a      	lsrs	r2, r3, #18
   83eca:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83ece:	00ff      	lsls	r7, r7, #3
   83ed0:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83ed4:	e77b      	b.n	83dce <_free_r+0xa2>
   83ed6:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83eda:	257e      	movs	r5, #126	; 0x7e
   83edc:	e777      	b.n	83dce <_free_r+0xa2>
   83ede:	f043 0101 	orr.w	r1, r3, #1
   83ee2:	6061      	str	r1, [r4, #4]
   83ee4:	6013      	str	r3, [r2, #0]
   83ee6:	e763      	b.n	83db0 <_free_r+0x84>
   83ee8:	20070720 	.word	0x20070720
   83eec:	20070728 	.word	0x20070728
   83ef0:	20070b2c 	.word	0x20070b2c
   83ef4:	2007addc 	.word	0x2007addc

00083ef8 <__sfvwrite_r>:
   83ef8:	6893      	ldr	r3, [r2, #8]
   83efa:	2b00      	cmp	r3, #0
   83efc:	d071      	beq.n	83fe2 <__sfvwrite_r+0xea>
   83efe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83f02:	898b      	ldrh	r3, [r1, #12]
   83f04:	b083      	sub	sp, #12
   83f06:	460c      	mov	r4, r1
   83f08:	0719      	lsls	r1, r3, #28
   83f0a:	9000      	str	r0, [sp, #0]
   83f0c:	4616      	mov	r6, r2
   83f0e:	d525      	bpl.n	83f5c <__sfvwrite_r+0x64>
   83f10:	6922      	ldr	r2, [r4, #16]
   83f12:	b31a      	cbz	r2, 83f5c <__sfvwrite_r+0x64>
   83f14:	f013 0002 	ands.w	r0, r3, #2
   83f18:	6835      	ldr	r5, [r6, #0]
   83f1a:	d02b      	beq.n	83f74 <__sfvwrite_r+0x7c>
   83f1c:	f04f 0900 	mov.w	r9, #0
   83f20:	46b0      	mov	r8, r6
   83f22:	464f      	mov	r7, r9
   83f24:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 841e8 <__sfvwrite_r+0x2f0>
   83f28:	2f00      	cmp	r7, #0
   83f2a:	d055      	beq.n	83fd8 <__sfvwrite_r+0xe0>
   83f2c:	4557      	cmp	r7, sl
   83f2e:	463b      	mov	r3, r7
   83f30:	464a      	mov	r2, r9
   83f32:	bf28      	it	cs
   83f34:	4653      	movcs	r3, sl
   83f36:	69e1      	ldr	r1, [r4, #28]
   83f38:	9800      	ldr	r0, [sp, #0]
   83f3a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83f3c:	47b0      	blx	r6
   83f3e:	2800      	cmp	r0, #0
   83f40:	dd56      	ble.n	83ff0 <__sfvwrite_r+0xf8>
   83f42:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83f46:	4481      	add	r9, r0
   83f48:	1a1b      	subs	r3, r3, r0
   83f4a:	1a3f      	subs	r7, r7, r0
   83f4c:	f8c8 3008 	str.w	r3, [r8, #8]
   83f50:	2b00      	cmp	r3, #0
   83f52:	d1e9      	bne.n	83f28 <__sfvwrite_r+0x30>
   83f54:	2000      	movs	r0, #0
   83f56:	b003      	add	sp, #12
   83f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f5c:	4621      	mov	r1, r4
   83f5e:	9800      	ldr	r0, [sp, #0]
   83f60:	f7ff fc56 	bl	83810 <__swsetup_r>
   83f64:	2800      	cmp	r0, #0
   83f66:	f040 8135 	bne.w	841d4 <__sfvwrite_r+0x2dc>
   83f6a:	89a3      	ldrh	r3, [r4, #12]
   83f6c:	6835      	ldr	r5, [r6, #0]
   83f6e:	f013 0002 	ands.w	r0, r3, #2
   83f72:	d1d3      	bne.n	83f1c <__sfvwrite_r+0x24>
   83f74:	f013 0901 	ands.w	r9, r3, #1
   83f78:	d144      	bne.n	84004 <__sfvwrite_r+0x10c>
   83f7a:	464f      	mov	r7, r9
   83f7c:	9601      	str	r6, [sp, #4]
   83f7e:	b337      	cbz	r7, 83fce <__sfvwrite_r+0xd6>
   83f80:	059a      	lsls	r2, r3, #22
   83f82:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83f86:	f140 8085 	bpl.w	84094 <__sfvwrite_r+0x19c>
   83f8a:	4547      	cmp	r7, r8
   83f8c:	46c3      	mov	fp, r8
   83f8e:	f0c0 80ad 	bcc.w	840ec <__sfvwrite_r+0x1f4>
   83f92:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83f96:	f040 80ae 	bne.w	840f6 <__sfvwrite_r+0x1fe>
   83f9a:	46ba      	mov	sl, r7
   83f9c:	6820      	ldr	r0, [r4, #0]
   83f9e:	465a      	mov	r2, fp
   83fa0:	4649      	mov	r1, r9
   83fa2:	f000 fcdf 	bl	84964 <memmove>
   83fa6:	68a2      	ldr	r2, [r4, #8]
   83fa8:	6823      	ldr	r3, [r4, #0]
   83faa:	eba2 0208 	sub.w	r2, r2, r8
   83fae:	445b      	add	r3, fp
   83fb0:	60a2      	str	r2, [r4, #8]
   83fb2:	6023      	str	r3, [r4, #0]
   83fb4:	9a01      	ldr	r2, [sp, #4]
   83fb6:	44d1      	add	r9, sl
   83fb8:	6893      	ldr	r3, [r2, #8]
   83fba:	eba7 070a 	sub.w	r7, r7, sl
   83fbe:	eba3 030a 	sub.w	r3, r3, sl
   83fc2:	6093      	str	r3, [r2, #8]
   83fc4:	2b00      	cmp	r3, #0
   83fc6:	d0c5      	beq.n	83f54 <__sfvwrite_r+0x5c>
   83fc8:	89a3      	ldrh	r3, [r4, #12]
   83fca:	2f00      	cmp	r7, #0
   83fcc:	d1d8      	bne.n	83f80 <__sfvwrite_r+0x88>
   83fce:	f8d5 9000 	ldr.w	r9, [r5]
   83fd2:	686f      	ldr	r7, [r5, #4]
   83fd4:	3508      	adds	r5, #8
   83fd6:	e7d2      	b.n	83f7e <__sfvwrite_r+0x86>
   83fd8:	f8d5 9000 	ldr.w	r9, [r5]
   83fdc:	686f      	ldr	r7, [r5, #4]
   83fde:	3508      	adds	r5, #8
   83fe0:	e7a2      	b.n	83f28 <__sfvwrite_r+0x30>
   83fe2:	2000      	movs	r0, #0
   83fe4:	4770      	bx	lr
   83fe6:	4621      	mov	r1, r4
   83fe8:	9800      	ldr	r0, [sp, #0]
   83fea:	f7ff fd21 	bl	83a30 <_fflush_r>
   83fee:	b378      	cbz	r0, 84050 <__sfvwrite_r+0x158>
   83ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ff4:	f04f 30ff 	mov.w	r0, #4294967295
   83ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83ffc:	81a3      	strh	r3, [r4, #12]
   83ffe:	b003      	add	sp, #12
   84000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84004:	4681      	mov	r9, r0
   84006:	4633      	mov	r3, r6
   84008:	464e      	mov	r6, r9
   8400a:	46a8      	mov	r8, r5
   8400c:	469a      	mov	sl, r3
   8400e:	464d      	mov	r5, r9
   84010:	b356      	cbz	r6, 84068 <__sfvwrite_r+0x170>
   84012:	2800      	cmp	r0, #0
   84014:	d032      	beq.n	8407c <__sfvwrite_r+0x184>
   84016:	45b1      	cmp	r9, r6
   84018:	46cb      	mov	fp, r9
   8401a:	bf28      	it	cs
   8401c:	46b3      	movcs	fp, r6
   8401e:	6820      	ldr	r0, [r4, #0]
   84020:	6923      	ldr	r3, [r4, #16]
   84022:	465f      	mov	r7, fp
   84024:	4298      	cmp	r0, r3
   84026:	6962      	ldr	r2, [r4, #20]
   84028:	d904      	bls.n	84034 <__sfvwrite_r+0x13c>
   8402a:	68a3      	ldr	r3, [r4, #8]
   8402c:	4413      	add	r3, r2
   8402e:	459b      	cmp	fp, r3
   84030:	f300 80a8 	bgt.w	84184 <__sfvwrite_r+0x28c>
   84034:	4593      	cmp	fp, r2
   84036:	db4d      	blt.n	840d4 <__sfvwrite_r+0x1dc>
   84038:	4613      	mov	r3, r2
   8403a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8403c:	462a      	mov	r2, r5
   8403e:	69e1      	ldr	r1, [r4, #28]
   84040:	9800      	ldr	r0, [sp, #0]
   84042:	47b8      	blx	r7
   84044:	1e07      	subs	r7, r0, #0
   84046:	ddd3      	ble.n	83ff0 <__sfvwrite_r+0xf8>
   84048:	ebb9 0907 	subs.w	r9, r9, r7
   8404c:	d0cb      	beq.n	83fe6 <__sfvwrite_r+0xee>
   8404e:	2001      	movs	r0, #1
   84050:	f8da 3008 	ldr.w	r3, [sl, #8]
   84054:	443d      	add	r5, r7
   84056:	1bdb      	subs	r3, r3, r7
   84058:	1bf6      	subs	r6, r6, r7
   8405a:	f8ca 3008 	str.w	r3, [sl, #8]
   8405e:	2b00      	cmp	r3, #0
   84060:	f43f af78 	beq.w	83f54 <__sfvwrite_r+0x5c>
   84064:	2e00      	cmp	r6, #0
   84066:	d1d4      	bne.n	84012 <__sfvwrite_r+0x11a>
   84068:	f108 0308 	add.w	r3, r8, #8
   8406c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84070:	4698      	mov	r8, r3
   84072:	f853 5c08 	ldr.w	r5, [r3, #-8]
   84076:	3308      	adds	r3, #8
   84078:	2e00      	cmp	r6, #0
   8407a:	d0f7      	beq.n	8406c <__sfvwrite_r+0x174>
   8407c:	4632      	mov	r2, r6
   8407e:	210a      	movs	r1, #10
   84080:	4628      	mov	r0, r5
   84082:	f000 fc29 	bl	848d8 <memchr>
   84086:	2800      	cmp	r0, #0
   84088:	f000 80a1 	beq.w	841ce <__sfvwrite_r+0x2d6>
   8408c:	3001      	adds	r0, #1
   8408e:	eba0 0905 	sub.w	r9, r0, r5
   84092:	e7c0      	b.n	84016 <__sfvwrite_r+0x11e>
   84094:	6820      	ldr	r0, [r4, #0]
   84096:	6923      	ldr	r3, [r4, #16]
   84098:	4298      	cmp	r0, r3
   8409a:	d802      	bhi.n	840a2 <__sfvwrite_r+0x1aa>
   8409c:	6963      	ldr	r3, [r4, #20]
   8409e:	429f      	cmp	r7, r3
   840a0:	d25d      	bcs.n	8415e <__sfvwrite_r+0x266>
   840a2:	45b8      	cmp	r8, r7
   840a4:	bf28      	it	cs
   840a6:	46b8      	movcs	r8, r7
   840a8:	4649      	mov	r1, r9
   840aa:	4642      	mov	r2, r8
   840ac:	f000 fc5a 	bl	84964 <memmove>
   840b0:	68a3      	ldr	r3, [r4, #8]
   840b2:	6822      	ldr	r2, [r4, #0]
   840b4:	eba3 0308 	sub.w	r3, r3, r8
   840b8:	4442      	add	r2, r8
   840ba:	60a3      	str	r3, [r4, #8]
   840bc:	6022      	str	r2, [r4, #0]
   840be:	b10b      	cbz	r3, 840c4 <__sfvwrite_r+0x1cc>
   840c0:	46c2      	mov	sl, r8
   840c2:	e777      	b.n	83fb4 <__sfvwrite_r+0xbc>
   840c4:	4621      	mov	r1, r4
   840c6:	9800      	ldr	r0, [sp, #0]
   840c8:	f7ff fcb2 	bl	83a30 <_fflush_r>
   840cc:	2800      	cmp	r0, #0
   840ce:	d18f      	bne.n	83ff0 <__sfvwrite_r+0xf8>
   840d0:	46c2      	mov	sl, r8
   840d2:	e76f      	b.n	83fb4 <__sfvwrite_r+0xbc>
   840d4:	465a      	mov	r2, fp
   840d6:	4629      	mov	r1, r5
   840d8:	f000 fc44 	bl	84964 <memmove>
   840dc:	68a2      	ldr	r2, [r4, #8]
   840de:	6823      	ldr	r3, [r4, #0]
   840e0:	eba2 020b 	sub.w	r2, r2, fp
   840e4:	445b      	add	r3, fp
   840e6:	60a2      	str	r2, [r4, #8]
   840e8:	6023      	str	r3, [r4, #0]
   840ea:	e7ad      	b.n	84048 <__sfvwrite_r+0x150>
   840ec:	46b8      	mov	r8, r7
   840ee:	46ba      	mov	sl, r7
   840f0:	46bb      	mov	fp, r7
   840f2:	6820      	ldr	r0, [r4, #0]
   840f4:	e753      	b.n	83f9e <__sfvwrite_r+0xa6>
   840f6:	6962      	ldr	r2, [r4, #20]
   840f8:	6820      	ldr	r0, [r4, #0]
   840fa:	6921      	ldr	r1, [r4, #16]
   840fc:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   84100:	eba0 0a01 	sub.w	sl, r0, r1
   84104:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   84108:	f10a 0001 	add.w	r0, sl, #1
   8410c:	ea4f 0868 	mov.w	r8, r8, asr #1
   84110:	4438      	add	r0, r7
   84112:	4540      	cmp	r0, r8
   84114:	4642      	mov	r2, r8
   84116:	bf84      	itt	hi
   84118:	4680      	movhi	r8, r0
   8411a:	4642      	movhi	r2, r8
   8411c:	055b      	lsls	r3, r3, #21
   8411e:	d544      	bpl.n	841aa <__sfvwrite_r+0x2b2>
   84120:	4611      	mov	r1, r2
   84122:	9800      	ldr	r0, [sp, #0]
   84124:	f000 f920 	bl	84368 <_malloc_r>
   84128:	4683      	mov	fp, r0
   8412a:	2800      	cmp	r0, #0
   8412c:	d055      	beq.n	841da <__sfvwrite_r+0x2e2>
   8412e:	4652      	mov	r2, sl
   84130:	6921      	ldr	r1, [r4, #16]
   84132:	f7fe fab1 	bl	82698 <memcpy>
   84136:	89a3      	ldrh	r3, [r4, #12]
   84138:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   8413c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84140:	81a3      	strh	r3, [r4, #12]
   84142:	eb0b 000a 	add.w	r0, fp, sl
   84146:	eba8 030a 	sub.w	r3, r8, sl
   8414a:	f8c4 b010 	str.w	fp, [r4, #16]
   8414e:	f8c4 8014 	str.w	r8, [r4, #20]
   84152:	6020      	str	r0, [r4, #0]
   84154:	60a3      	str	r3, [r4, #8]
   84156:	46b8      	mov	r8, r7
   84158:	46ba      	mov	sl, r7
   8415a:	46bb      	mov	fp, r7
   8415c:	e71f      	b.n	83f9e <__sfvwrite_r+0xa6>
   8415e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   84162:	42ba      	cmp	r2, r7
   84164:	bf28      	it	cs
   84166:	463a      	movcs	r2, r7
   84168:	fb92 f2f3 	sdiv	r2, r2, r3
   8416c:	69e1      	ldr	r1, [r4, #28]
   8416e:	fb03 f302 	mul.w	r3, r3, r2
   84172:	9800      	ldr	r0, [sp, #0]
   84174:	464a      	mov	r2, r9
   84176:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84178:	47b0      	blx	r6
   8417a:	f1b0 0a00 	subs.w	sl, r0, #0
   8417e:	f73f af19 	bgt.w	83fb4 <__sfvwrite_r+0xbc>
   84182:	e735      	b.n	83ff0 <__sfvwrite_r+0xf8>
   84184:	461a      	mov	r2, r3
   84186:	4629      	mov	r1, r5
   84188:	9301      	str	r3, [sp, #4]
   8418a:	f000 fbeb 	bl	84964 <memmove>
   8418e:	6822      	ldr	r2, [r4, #0]
   84190:	9b01      	ldr	r3, [sp, #4]
   84192:	4621      	mov	r1, r4
   84194:	441a      	add	r2, r3
   84196:	6022      	str	r2, [r4, #0]
   84198:	9800      	ldr	r0, [sp, #0]
   8419a:	f7ff fc49 	bl	83a30 <_fflush_r>
   8419e:	9b01      	ldr	r3, [sp, #4]
   841a0:	2800      	cmp	r0, #0
   841a2:	f47f af25 	bne.w	83ff0 <__sfvwrite_r+0xf8>
   841a6:	461f      	mov	r7, r3
   841a8:	e74e      	b.n	84048 <__sfvwrite_r+0x150>
   841aa:	9800      	ldr	r0, [sp, #0]
   841ac:	f000 fc4a 	bl	84a44 <_realloc_r>
   841b0:	4683      	mov	fp, r0
   841b2:	2800      	cmp	r0, #0
   841b4:	d1c5      	bne.n	84142 <__sfvwrite_r+0x24a>
   841b6:	9d00      	ldr	r5, [sp, #0]
   841b8:	6921      	ldr	r1, [r4, #16]
   841ba:	4628      	mov	r0, r5
   841bc:	f7ff fdb6 	bl	83d2c <_free_r>
   841c0:	220c      	movs	r2, #12
   841c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   841c6:	602a      	str	r2, [r5, #0]
   841c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   841cc:	e712      	b.n	83ff4 <__sfvwrite_r+0xfc>
   841ce:	f106 0901 	add.w	r9, r6, #1
   841d2:	e720      	b.n	84016 <__sfvwrite_r+0x11e>
   841d4:	f04f 30ff 	mov.w	r0, #4294967295
   841d8:	e6bd      	b.n	83f56 <__sfvwrite_r+0x5e>
   841da:	220c      	movs	r2, #12
   841dc:	9900      	ldr	r1, [sp, #0]
   841de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   841e2:	600a      	str	r2, [r1, #0]
   841e4:	e706      	b.n	83ff4 <__sfvwrite_r+0xfc>
   841e6:	bf00      	nop
   841e8:	7ffffc00 	.word	0x7ffffc00

000841ec <_fwalk_reent>:
   841ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   841f0:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   841f4:	d01e      	beq.n	84234 <_fwalk_reent+0x48>
   841f6:	4688      	mov	r8, r1
   841f8:	4607      	mov	r7, r0
   841fa:	f04f 0900 	mov.w	r9, #0
   841fe:	6875      	ldr	r5, [r6, #4]
   84200:	68b4      	ldr	r4, [r6, #8]
   84202:	3d01      	subs	r5, #1
   84204:	d410      	bmi.n	84228 <_fwalk_reent+0x3c>
   84206:	89a3      	ldrh	r3, [r4, #12]
   84208:	3d01      	subs	r5, #1
   8420a:	2b01      	cmp	r3, #1
   8420c:	d908      	bls.n	84220 <_fwalk_reent+0x34>
   8420e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84212:	3301      	adds	r3, #1
   84214:	d004      	beq.n	84220 <_fwalk_reent+0x34>
   84216:	4621      	mov	r1, r4
   84218:	4638      	mov	r0, r7
   8421a:	47c0      	blx	r8
   8421c:	ea49 0900 	orr.w	r9, r9, r0
   84220:	1c6b      	adds	r3, r5, #1
   84222:	f104 0468 	add.w	r4, r4, #104	; 0x68
   84226:	d1ee      	bne.n	84206 <_fwalk_reent+0x1a>
   84228:	6836      	ldr	r6, [r6, #0]
   8422a:	2e00      	cmp	r6, #0
   8422c:	d1e7      	bne.n	841fe <_fwalk_reent+0x12>
   8422e:	4648      	mov	r0, r9
   84230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84234:	46b1      	mov	r9, r6
   84236:	4648      	mov	r0, r9
   84238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0008423c <__locale_mb_cur_max>:
   8423c:	4b04      	ldr	r3, [pc, #16]	; (84250 <__locale_mb_cur_max+0x14>)
   8423e:	4a05      	ldr	r2, [pc, #20]	; (84254 <__locale_mb_cur_max+0x18>)
   84240:	681b      	ldr	r3, [r3, #0]
   84242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   84244:	2b00      	cmp	r3, #0
   84246:	bf08      	it	eq
   84248:	4613      	moveq	r3, r2
   8424a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8424e:	4770      	bx	lr
   84250:	20070180 	.word	0x20070180
   84254:	200705b4 	.word	0x200705b4

00084258 <__retarget_lock_init_recursive>:
   84258:	4770      	bx	lr
   8425a:	bf00      	nop

0008425c <__retarget_lock_close_recursive>:
   8425c:	4770      	bx	lr
   8425e:	bf00      	nop

00084260 <__retarget_lock_acquire_recursive>:
   84260:	4770      	bx	lr
   84262:	bf00      	nop

00084264 <__retarget_lock_release_recursive>:
   84264:	4770      	bx	lr
   84266:	bf00      	nop

00084268 <__swhatbuf_r>:
   84268:	b570      	push	{r4, r5, r6, lr}
   8426a:	460c      	mov	r4, r1
   8426c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84270:	b090      	sub	sp, #64	; 0x40
   84272:	2900      	cmp	r1, #0
   84274:	4615      	mov	r5, r2
   84276:	461e      	mov	r6, r3
   84278:	db14      	blt.n	842a4 <__swhatbuf_r+0x3c>
   8427a:	aa01      	add	r2, sp, #4
   8427c:	f000 ff68 	bl	85150 <_fstat_r>
   84280:	2800      	cmp	r0, #0
   84282:	db0f      	blt.n	842a4 <__swhatbuf_r+0x3c>
   84284:	9a02      	ldr	r2, [sp, #8]
   84286:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8428a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8428e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   84292:	fab2 f282 	clz	r2, r2
   84296:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8429a:	0952      	lsrs	r2, r2, #5
   8429c:	6032      	str	r2, [r6, #0]
   8429e:	602b      	str	r3, [r5, #0]
   842a0:	b010      	add	sp, #64	; 0x40
   842a2:	bd70      	pop	{r4, r5, r6, pc}
   842a4:	2300      	movs	r3, #0
   842a6:	89a2      	ldrh	r2, [r4, #12]
   842a8:	6033      	str	r3, [r6, #0]
   842aa:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   842ae:	d004      	beq.n	842ba <__swhatbuf_r+0x52>
   842b0:	2240      	movs	r2, #64	; 0x40
   842b2:	4618      	mov	r0, r3
   842b4:	602a      	str	r2, [r5, #0]
   842b6:	b010      	add	sp, #64	; 0x40
   842b8:	bd70      	pop	{r4, r5, r6, pc}
   842ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   842be:	602b      	str	r3, [r5, #0]
   842c0:	b010      	add	sp, #64	; 0x40
   842c2:	bd70      	pop	{r4, r5, r6, pc}

000842c4 <__smakebuf_r>:
   842c4:	898a      	ldrh	r2, [r1, #12]
   842c6:	460b      	mov	r3, r1
   842c8:	0792      	lsls	r2, r2, #30
   842ca:	d506      	bpl.n	842da <__smakebuf_r+0x16>
   842cc:	2101      	movs	r1, #1
   842ce:	f103 0243 	add.w	r2, r3, #67	; 0x43
   842d2:	6159      	str	r1, [r3, #20]
   842d4:	601a      	str	r2, [r3, #0]
   842d6:	611a      	str	r2, [r3, #16]
   842d8:	4770      	bx	lr
   842da:	b5f0      	push	{r4, r5, r6, r7, lr}
   842dc:	b083      	sub	sp, #12
   842de:	ab01      	add	r3, sp, #4
   842e0:	466a      	mov	r2, sp
   842e2:	460c      	mov	r4, r1
   842e4:	4606      	mov	r6, r0
   842e6:	f7ff ffbf 	bl	84268 <__swhatbuf_r>
   842ea:	9900      	ldr	r1, [sp, #0]
   842ec:	4605      	mov	r5, r0
   842ee:	4630      	mov	r0, r6
   842f0:	f000 f83a 	bl	84368 <_malloc_r>
   842f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   842f8:	b1d8      	cbz	r0, 84332 <__smakebuf_r+0x6e>
   842fa:	e89d 0006 	ldmia.w	sp, {r1, r2}
   842fe:	4f15      	ldr	r7, [pc, #84]	; (84354 <__smakebuf_r+0x90>)
   84300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84304:	63f7      	str	r7, [r6, #60]	; 0x3c
   84306:	81a3      	strh	r3, [r4, #12]
   84308:	6020      	str	r0, [r4, #0]
   8430a:	6120      	str	r0, [r4, #16]
   8430c:	6161      	str	r1, [r4, #20]
   8430e:	b91a      	cbnz	r2, 84318 <__smakebuf_r+0x54>
   84310:	432b      	orrs	r3, r5
   84312:	81a3      	strh	r3, [r4, #12]
   84314:	b003      	add	sp, #12
   84316:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84318:	4630      	mov	r0, r6
   8431a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8431e:	f000 ff2b 	bl	85178 <_isatty_r>
   84322:	b1a0      	cbz	r0, 8434e <__smakebuf_r+0x8a>
   84324:	89a3      	ldrh	r3, [r4, #12]
   84326:	f023 0303 	bic.w	r3, r3, #3
   8432a:	f043 0301 	orr.w	r3, r3, #1
   8432e:	b21b      	sxth	r3, r3
   84330:	e7ee      	b.n	84310 <__smakebuf_r+0x4c>
   84332:	059a      	lsls	r2, r3, #22
   84334:	d4ee      	bmi.n	84314 <__smakebuf_r+0x50>
   84336:	2101      	movs	r1, #1
   84338:	f023 0303 	bic.w	r3, r3, #3
   8433c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84340:	f043 0302 	orr.w	r3, r3, #2
   84344:	81a3      	strh	r3, [r4, #12]
   84346:	6161      	str	r1, [r4, #20]
   84348:	6022      	str	r2, [r4, #0]
   8434a:	6122      	str	r2, [r4, #16]
   8434c:	e7e2      	b.n	84314 <__smakebuf_r+0x50>
   8434e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84352:	e7dd      	b.n	84310 <__smakebuf_r+0x4c>
   84354:	00083a85 	.word	0x00083a85

00084358 <malloc>:
   84358:	4b02      	ldr	r3, [pc, #8]	; (84364 <malloc+0xc>)
   8435a:	4601      	mov	r1, r0
   8435c:	6818      	ldr	r0, [r3, #0]
   8435e:	f000 b803 	b.w	84368 <_malloc_r>
   84362:	bf00      	nop
   84364:	20070180 	.word	0x20070180

00084368 <_malloc_r>:
   84368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8436c:	f101 060b 	add.w	r6, r1, #11
   84370:	2e16      	cmp	r6, #22
   84372:	b083      	sub	sp, #12
   84374:	4605      	mov	r5, r0
   84376:	f240 809e 	bls.w	844b6 <_malloc_r+0x14e>
   8437a:	f036 0607 	bics.w	r6, r6, #7
   8437e:	f100 80bd 	bmi.w	844fc <_malloc_r+0x194>
   84382:	42b1      	cmp	r1, r6
   84384:	f200 80ba 	bhi.w	844fc <_malloc_r+0x194>
   84388:	f000 fb50 	bl	84a2c <__malloc_lock>
   8438c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84390:	f0c0 8285 	bcc.w	8489e <_malloc_r+0x536>
   84394:	0a73      	lsrs	r3, r6, #9
   84396:	f000 80b8 	beq.w	8450a <_malloc_r+0x1a2>
   8439a:	2b04      	cmp	r3, #4
   8439c:	f200 816c 	bhi.w	84678 <_malloc_r+0x310>
   843a0:	09b3      	lsrs	r3, r6, #6
   843a2:	f103 0039 	add.w	r0, r3, #57	; 0x39
   843a6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   843aa:	00c1      	lsls	r1, r0, #3
   843ac:	4fb8      	ldr	r7, [pc, #736]	; (84690 <_malloc_r+0x328>)
   843ae:	4439      	add	r1, r7
   843b0:	684c      	ldr	r4, [r1, #4]
   843b2:	3908      	subs	r1, #8
   843b4:	42a1      	cmp	r1, r4
   843b6:	d106      	bne.n	843c6 <_malloc_r+0x5e>
   843b8:	e00c      	b.n	843d4 <_malloc_r+0x6c>
   843ba:	2a00      	cmp	r2, #0
   843bc:	f280 80ab 	bge.w	84516 <_malloc_r+0x1ae>
   843c0:	68e4      	ldr	r4, [r4, #12]
   843c2:	42a1      	cmp	r1, r4
   843c4:	d006      	beq.n	843d4 <_malloc_r+0x6c>
   843c6:	6863      	ldr	r3, [r4, #4]
   843c8:	f023 0303 	bic.w	r3, r3, #3
   843cc:	1b9a      	subs	r2, r3, r6
   843ce:	2a0f      	cmp	r2, #15
   843d0:	ddf3      	ble.n	843ba <_malloc_r+0x52>
   843d2:	4670      	mov	r0, lr
   843d4:	693c      	ldr	r4, [r7, #16]
   843d6:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 846a4 <_malloc_r+0x33c>
   843da:	4574      	cmp	r4, lr
   843dc:	f000 819e 	beq.w	8471c <_malloc_r+0x3b4>
   843e0:	6863      	ldr	r3, [r4, #4]
   843e2:	f023 0303 	bic.w	r3, r3, #3
   843e6:	1b9a      	subs	r2, r3, r6
   843e8:	2a0f      	cmp	r2, #15
   843ea:	f300 8183 	bgt.w	846f4 <_malloc_r+0x38c>
   843ee:	2a00      	cmp	r2, #0
   843f0:	f8c7 e014 	str.w	lr, [r7, #20]
   843f4:	f8c7 e010 	str.w	lr, [r7, #16]
   843f8:	f280 8091 	bge.w	8451e <_malloc_r+0x1b6>
   843fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84400:	f080 8154 	bcs.w	846ac <_malloc_r+0x344>
   84404:	2201      	movs	r2, #1
   84406:	08db      	lsrs	r3, r3, #3
   84408:	6879      	ldr	r1, [r7, #4]
   8440a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8440e:	4413      	add	r3, r2
   84410:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   84414:	fa02 f20c 	lsl.w	r2, r2, ip
   84418:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8441c:	430a      	orrs	r2, r1
   8441e:	f1ac 0108 	sub.w	r1, ip, #8
   84422:	60e1      	str	r1, [r4, #12]
   84424:	f8c4 8008 	str.w	r8, [r4, #8]
   84428:	607a      	str	r2, [r7, #4]
   8442a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8442e:	f8c8 400c 	str.w	r4, [r8, #12]
   84432:	2401      	movs	r4, #1
   84434:	1083      	asrs	r3, r0, #2
   84436:	409c      	lsls	r4, r3
   84438:	4294      	cmp	r4, r2
   8443a:	d87d      	bhi.n	84538 <_malloc_r+0x1d0>
   8443c:	4214      	tst	r4, r2
   8443e:	d106      	bne.n	8444e <_malloc_r+0xe6>
   84440:	f020 0003 	bic.w	r0, r0, #3
   84444:	0064      	lsls	r4, r4, #1
   84446:	4214      	tst	r4, r2
   84448:	f100 0004 	add.w	r0, r0, #4
   8444c:	d0fa      	beq.n	84444 <_malloc_r+0xdc>
   8444e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   84452:	46cc      	mov	ip, r9
   84454:	4680      	mov	r8, r0
   84456:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8445a:	459c      	cmp	ip, r3
   8445c:	d107      	bne.n	8446e <_malloc_r+0x106>
   8445e:	e15f      	b.n	84720 <_malloc_r+0x3b8>
   84460:	2a00      	cmp	r2, #0
   84462:	f280 816d 	bge.w	84740 <_malloc_r+0x3d8>
   84466:	68db      	ldr	r3, [r3, #12]
   84468:	459c      	cmp	ip, r3
   8446a:	f000 8159 	beq.w	84720 <_malloc_r+0x3b8>
   8446e:	6859      	ldr	r1, [r3, #4]
   84470:	f021 0103 	bic.w	r1, r1, #3
   84474:	1b8a      	subs	r2, r1, r6
   84476:	2a0f      	cmp	r2, #15
   84478:	ddf2      	ble.n	84460 <_malloc_r+0xf8>
   8447a:	68dc      	ldr	r4, [r3, #12]
   8447c:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84480:	f046 0801 	orr.w	r8, r6, #1
   84484:	4628      	mov	r0, r5
   84486:	441e      	add	r6, r3
   84488:	f042 0501 	orr.w	r5, r2, #1
   8448c:	f8c3 8004 	str.w	r8, [r3, #4]
   84490:	f8cc 400c 	str.w	r4, [ip, #12]
   84494:	f8c4 c008 	str.w	ip, [r4, #8]
   84498:	617e      	str	r6, [r7, #20]
   8449a:	613e      	str	r6, [r7, #16]
   8449c:	f8c6 e00c 	str.w	lr, [r6, #12]
   844a0:	f8c6 e008 	str.w	lr, [r6, #8]
   844a4:	6075      	str	r5, [r6, #4]
   844a6:	505a      	str	r2, [r3, r1]
   844a8:	9300      	str	r3, [sp, #0]
   844aa:	f000 fac5 	bl	84a38 <__malloc_unlock>
   844ae:	9b00      	ldr	r3, [sp, #0]
   844b0:	f103 0408 	add.w	r4, r3, #8
   844b4:	e01e      	b.n	844f4 <_malloc_r+0x18c>
   844b6:	2910      	cmp	r1, #16
   844b8:	d820      	bhi.n	844fc <_malloc_r+0x194>
   844ba:	f000 fab7 	bl	84a2c <__malloc_lock>
   844be:	2610      	movs	r6, #16
   844c0:	2318      	movs	r3, #24
   844c2:	2002      	movs	r0, #2
   844c4:	4f72      	ldr	r7, [pc, #456]	; (84690 <_malloc_r+0x328>)
   844c6:	443b      	add	r3, r7
   844c8:	685c      	ldr	r4, [r3, #4]
   844ca:	f1a3 0208 	sub.w	r2, r3, #8
   844ce:	4294      	cmp	r4, r2
   844d0:	f000 812f 	beq.w	84732 <_malloc_r+0x3ca>
   844d4:	6863      	ldr	r3, [r4, #4]
   844d6:	68e1      	ldr	r1, [r4, #12]
   844d8:	f023 0303 	bic.w	r3, r3, #3
   844dc:	4423      	add	r3, r4
   844de:	685a      	ldr	r2, [r3, #4]
   844e0:	68a6      	ldr	r6, [r4, #8]
   844e2:	f042 0201 	orr.w	r2, r2, #1
   844e6:	60f1      	str	r1, [r6, #12]
   844e8:	4628      	mov	r0, r5
   844ea:	608e      	str	r6, [r1, #8]
   844ec:	605a      	str	r2, [r3, #4]
   844ee:	f000 faa3 	bl	84a38 <__malloc_unlock>
   844f2:	3408      	adds	r4, #8
   844f4:	4620      	mov	r0, r4
   844f6:	b003      	add	sp, #12
   844f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844fc:	2400      	movs	r4, #0
   844fe:	230c      	movs	r3, #12
   84500:	4620      	mov	r0, r4
   84502:	602b      	str	r3, [r5, #0]
   84504:	b003      	add	sp, #12
   84506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8450a:	2040      	movs	r0, #64	; 0x40
   8450c:	f44f 7100 	mov.w	r1, #512	; 0x200
   84510:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   84514:	e74a      	b.n	843ac <_malloc_r+0x44>
   84516:	4423      	add	r3, r4
   84518:	685a      	ldr	r2, [r3, #4]
   8451a:	68e1      	ldr	r1, [r4, #12]
   8451c:	e7e0      	b.n	844e0 <_malloc_r+0x178>
   8451e:	4423      	add	r3, r4
   84520:	685a      	ldr	r2, [r3, #4]
   84522:	4628      	mov	r0, r5
   84524:	f042 0201 	orr.w	r2, r2, #1
   84528:	605a      	str	r2, [r3, #4]
   8452a:	3408      	adds	r4, #8
   8452c:	f000 fa84 	bl	84a38 <__malloc_unlock>
   84530:	4620      	mov	r0, r4
   84532:	b003      	add	sp, #12
   84534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84538:	68bc      	ldr	r4, [r7, #8]
   8453a:	6863      	ldr	r3, [r4, #4]
   8453c:	f023 0803 	bic.w	r8, r3, #3
   84540:	45b0      	cmp	r8, r6
   84542:	d304      	bcc.n	8454e <_malloc_r+0x1e6>
   84544:	eba8 0306 	sub.w	r3, r8, r6
   84548:	2b0f      	cmp	r3, #15
   8454a:	f300 8085 	bgt.w	84658 <_malloc_r+0x2f0>
   8454e:	f8df 9158 	ldr.w	r9, [pc, #344]	; 846a8 <_malloc_r+0x340>
   84552:	4b50      	ldr	r3, [pc, #320]	; (84694 <_malloc_r+0x32c>)
   84554:	f8d9 2000 	ldr.w	r2, [r9]
   84558:	681b      	ldr	r3, [r3, #0]
   8455a:	3201      	adds	r2, #1
   8455c:	4433      	add	r3, r6
   8455e:	eb04 0a08 	add.w	sl, r4, r8
   84562:	f000 8154 	beq.w	8480e <_malloc_r+0x4a6>
   84566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8456a:	330f      	adds	r3, #15
   8456c:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   84570:	f02b 0b0f 	bic.w	fp, fp, #15
   84574:	4659      	mov	r1, fp
   84576:	4628      	mov	r0, r5
   84578:	f000 fc1a 	bl	84db0 <_sbrk_r>
   8457c:	1c41      	adds	r1, r0, #1
   8457e:	4602      	mov	r2, r0
   84580:	f000 80fb 	beq.w	8477a <_malloc_r+0x412>
   84584:	4582      	cmp	sl, r0
   84586:	f200 80f6 	bhi.w	84776 <_malloc_r+0x40e>
   8458a:	4b43      	ldr	r3, [pc, #268]	; (84698 <_malloc_r+0x330>)
   8458c:	6819      	ldr	r1, [r3, #0]
   8458e:	4459      	add	r1, fp
   84590:	6019      	str	r1, [r3, #0]
   84592:	f000 814c 	beq.w	8482e <_malloc_r+0x4c6>
   84596:	f8d9 0000 	ldr.w	r0, [r9]
   8459a:	3001      	adds	r0, #1
   8459c:	bf1b      	ittet	ne
   8459e:	eba2 0a0a 	subne.w	sl, r2, sl
   845a2:	4451      	addne	r1, sl
   845a4:	f8c9 2000 	streq.w	r2, [r9]
   845a8:	6019      	strne	r1, [r3, #0]
   845aa:	f012 0107 	ands.w	r1, r2, #7
   845ae:	f000 8114 	beq.w	847da <_malloc_r+0x472>
   845b2:	f1c1 0008 	rsb	r0, r1, #8
   845b6:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   845ba:	4402      	add	r2, r0
   845bc:	3108      	adds	r1, #8
   845be:	eb02 090b 	add.w	r9, r2, fp
   845c2:	f3c9 090b 	ubfx	r9, r9, #0, #12
   845c6:	eba1 0909 	sub.w	r9, r1, r9
   845ca:	4649      	mov	r1, r9
   845cc:	4628      	mov	r0, r5
   845ce:	9301      	str	r3, [sp, #4]
   845d0:	9200      	str	r2, [sp, #0]
   845d2:	f000 fbed 	bl	84db0 <_sbrk_r>
   845d6:	1c43      	adds	r3, r0, #1
   845d8:	e89d 000c 	ldmia.w	sp, {r2, r3}
   845dc:	f000 8142 	beq.w	84864 <_malloc_r+0x4fc>
   845e0:	1a80      	subs	r0, r0, r2
   845e2:	4448      	add	r0, r9
   845e4:	f040 0001 	orr.w	r0, r0, #1
   845e8:	6819      	ldr	r1, [r3, #0]
   845ea:	42bc      	cmp	r4, r7
   845ec:	4449      	add	r1, r9
   845ee:	60ba      	str	r2, [r7, #8]
   845f0:	6019      	str	r1, [r3, #0]
   845f2:	6050      	str	r0, [r2, #4]
   845f4:	d017      	beq.n	84626 <_malloc_r+0x2be>
   845f6:	f1b8 0f0f 	cmp.w	r8, #15
   845fa:	f240 80fa 	bls.w	847f2 <_malloc_r+0x48a>
   845fe:	f04f 0c05 	mov.w	ip, #5
   84602:	6862      	ldr	r2, [r4, #4]
   84604:	f1a8 000c 	sub.w	r0, r8, #12
   84608:	f020 0007 	bic.w	r0, r0, #7
   8460c:	f002 0201 	and.w	r2, r2, #1
   84610:	eb04 0e00 	add.w	lr, r4, r0
   84614:	4302      	orrs	r2, r0
   84616:	280f      	cmp	r0, #15
   84618:	6062      	str	r2, [r4, #4]
   8461a:	f8ce c004 	str.w	ip, [lr, #4]
   8461e:	f8ce c008 	str.w	ip, [lr, #8]
   84622:	f200 8116 	bhi.w	84852 <_malloc_r+0x4ea>
   84626:	4b1d      	ldr	r3, [pc, #116]	; (8469c <_malloc_r+0x334>)
   84628:	68bc      	ldr	r4, [r7, #8]
   8462a:	681a      	ldr	r2, [r3, #0]
   8462c:	4291      	cmp	r1, r2
   8462e:	bf88      	it	hi
   84630:	6019      	strhi	r1, [r3, #0]
   84632:	4b1b      	ldr	r3, [pc, #108]	; (846a0 <_malloc_r+0x338>)
   84634:	681a      	ldr	r2, [r3, #0]
   84636:	4291      	cmp	r1, r2
   84638:	6862      	ldr	r2, [r4, #4]
   8463a:	bf88      	it	hi
   8463c:	6019      	strhi	r1, [r3, #0]
   8463e:	f022 0203 	bic.w	r2, r2, #3
   84642:	4296      	cmp	r6, r2
   84644:	eba2 0306 	sub.w	r3, r2, r6
   84648:	d801      	bhi.n	8464e <_malloc_r+0x2e6>
   8464a:	2b0f      	cmp	r3, #15
   8464c:	dc04      	bgt.n	84658 <_malloc_r+0x2f0>
   8464e:	4628      	mov	r0, r5
   84650:	f000 f9f2 	bl	84a38 <__malloc_unlock>
   84654:	2400      	movs	r4, #0
   84656:	e74d      	b.n	844f4 <_malloc_r+0x18c>
   84658:	f046 0201 	orr.w	r2, r6, #1
   8465c:	f043 0301 	orr.w	r3, r3, #1
   84660:	4426      	add	r6, r4
   84662:	6062      	str	r2, [r4, #4]
   84664:	4628      	mov	r0, r5
   84666:	60be      	str	r6, [r7, #8]
   84668:	3408      	adds	r4, #8
   8466a:	6073      	str	r3, [r6, #4]
   8466c:	f000 f9e4 	bl	84a38 <__malloc_unlock>
   84670:	4620      	mov	r0, r4
   84672:	b003      	add	sp, #12
   84674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84678:	2b14      	cmp	r3, #20
   8467a:	d970      	bls.n	8475e <_malloc_r+0x3f6>
   8467c:	2b54      	cmp	r3, #84	; 0x54
   8467e:	f200 80a2 	bhi.w	847c6 <_malloc_r+0x45e>
   84682:	0b33      	lsrs	r3, r6, #12
   84684:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84688:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8468c:	00c1      	lsls	r1, r0, #3
   8468e:	e68d      	b.n	843ac <_malloc_r+0x44>
   84690:	20070720 	.word	0x20070720
   84694:	2007addc 	.word	0x2007addc
   84698:	2007adac 	.word	0x2007adac
   8469c:	2007add4 	.word	0x2007add4
   846a0:	2007add8 	.word	0x2007add8
   846a4:	20070728 	.word	0x20070728
   846a8:	20070b28 	.word	0x20070b28
   846ac:	0a5a      	lsrs	r2, r3, #9
   846ae:	2a04      	cmp	r2, #4
   846b0:	d95b      	bls.n	8476a <_malloc_r+0x402>
   846b2:	2a14      	cmp	r2, #20
   846b4:	f200 80ae 	bhi.w	84814 <_malloc_r+0x4ac>
   846b8:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   846bc:	00c9      	lsls	r1, r1, #3
   846be:	325b      	adds	r2, #91	; 0x5b
   846c0:	eb07 0c01 	add.w	ip, r7, r1
   846c4:	5879      	ldr	r1, [r7, r1]
   846c6:	f1ac 0c08 	sub.w	ip, ip, #8
   846ca:	458c      	cmp	ip, r1
   846cc:	f000 8088 	beq.w	847e0 <_malloc_r+0x478>
   846d0:	684a      	ldr	r2, [r1, #4]
   846d2:	f022 0203 	bic.w	r2, r2, #3
   846d6:	4293      	cmp	r3, r2
   846d8:	d273      	bcs.n	847c2 <_malloc_r+0x45a>
   846da:	6889      	ldr	r1, [r1, #8]
   846dc:	458c      	cmp	ip, r1
   846de:	d1f7      	bne.n	846d0 <_malloc_r+0x368>
   846e0:	f8dc 300c 	ldr.w	r3, [ip, #12]
   846e4:	687a      	ldr	r2, [r7, #4]
   846e6:	60e3      	str	r3, [r4, #12]
   846e8:	f8c4 c008 	str.w	ip, [r4, #8]
   846ec:	609c      	str	r4, [r3, #8]
   846ee:	f8cc 400c 	str.w	r4, [ip, #12]
   846f2:	e69e      	b.n	84432 <_malloc_r+0xca>
   846f4:	f046 0c01 	orr.w	ip, r6, #1
   846f8:	f042 0101 	orr.w	r1, r2, #1
   846fc:	4426      	add	r6, r4
   846fe:	f8c4 c004 	str.w	ip, [r4, #4]
   84702:	4628      	mov	r0, r5
   84704:	617e      	str	r6, [r7, #20]
   84706:	613e      	str	r6, [r7, #16]
   84708:	f8c6 e00c 	str.w	lr, [r6, #12]
   8470c:	f8c6 e008 	str.w	lr, [r6, #8]
   84710:	6071      	str	r1, [r6, #4]
   84712:	50e2      	str	r2, [r4, r3]
   84714:	f000 f990 	bl	84a38 <__malloc_unlock>
   84718:	3408      	adds	r4, #8
   8471a:	e6eb      	b.n	844f4 <_malloc_r+0x18c>
   8471c:	687a      	ldr	r2, [r7, #4]
   8471e:	e688      	b.n	84432 <_malloc_r+0xca>
   84720:	f108 0801 	add.w	r8, r8, #1
   84724:	f018 0f03 	tst.w	r8, #3
   84728:	f10c 0c08 	add.w	ip, ip, #8
   8472c:	f47f ae93 	bne.w	84456 <_malloc_r+0xee>
   84730:	e02d      	b.n	8478e <_malloc_r+0x426>
   84732:	68dc      	ldr	r4, [r3, #12]
   84734:	42a3      	cmp	r3, r4
   84736:	bf08      	it	eq
   84738:	3002      	addeq	r0, #2
   8473a:	f43f ae4b 	beq.w	843d4 <_malloc_r+0x6c>
   8473e:	e6c9      	b.n	844d4 <_malloc_r+0x16c>
   84740:	461c      	mov	r4, r3
   84742:	4419      	add	r1, r3
   84744:	684a      	ldr	r2, [r1, #4]
   84746:	68db      	ldr	r3, [r3, #12]
   84748:	f854 6f08 	ldr.w	r6, [r4, #8]!
   8474c:	f042 0201 	orr.w	r2, r2, #1
   84750:	604a      	str	r2, [r1, #4]
   84752:	4628      	mov	r0, r5
   84754:	60f3      	str	r3, [r6, #12]
   84756:	609e      	str	r6, [r3, #8]
   84758:	f000 f96e 	bl	84a38 <__malloc_unlock>
   8475c:	e6ca      	b.n	844f4 <_malloc_r+0x18c>
   8475e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   84762:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   84766:	00c1      	lsls	r1, r0, #3
   84768:	e620      	b.n	843ac <_malloc_r+0x44>
   8476a:	099a      	lsrs	r2, r3, #6
   8476c:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84770:	00c9      	lsls	r1, r1, #3
   84772:	3238      	adds	r2, #56	; 0x38
   84774:	e7a4      	b.n	846c0 <_malloc_r+0x358>
   84776:	42bc      	cmp	r4, r7
   84778:	d054      	beq.n	84824 <_malloc_r+0x4bc>
   8477a:	68bc      	ldr	r4, [r7, #8]
   8477c:	6862      	ldr	r2, [r4, #4]
   8477e:	f022 0203 	bic.w	r2, r2, #3
   84782:	e75e      	b.n	84642 <_malloc_r+0x2da>
   84784:	f859 3908 	ldr.w	r3, [r9], #-8
   84788:	4599      	cmp	r9, r3
   8478a:	f040 8086 	bne.w	8489a <_malloc_r+0x532>
   8478e:	f010 0f03 	tst.w	r0, #3
   84792:	f100 30ff 	add.w	r0, r0, #4294967295
   84796:	d1f5      	bne.n	84784 <_malloc_r+0x41c>
   84798:	687b      	ldr	r3, [r7, #4]
   8479a:	ea23 0304 	bic.w	r3, r3, r4
   8479e:	607b      	str	r3, [r7, #4]
   847a0:	0064      	lsls	r4, r4, #1
   847a2:	429c      	cmp	r4, r3
   847a4:	f63f aec8 	bhi.w	84538 <_malloc_r+0x1d0>
   847a8:	2c00      	cmp	r4, #0
   847aa:	f43f aec5 	beq.w	84538 <_malloc_r+0x1d0>
   847ae:	421c      	tst	r4, r3
   847b0:	4640      	mov	r0, r8
   847b2:	f47f ae4c 	bne.w	8444e <_malloc_r+0xe6>
   847b6:	0064      	lsls	r4, r4, #1
   847b8:	421c      	tst	r4, r3
   847ba:	f100 0004 	add.w	r0, r0, #4
   847be:	d0fa      	beq.n	847b6 <_malloc_r+0x44e>
   847c0:	e645      	b.n	8444e <_malloc_r+0xe6>
   847c2:	468c      	mov	ip, r1
   847c4:	e78c      	b.n	846e0 <_malloc_r+0x378>
   847c6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   847ca:	d815      	bhi.n	847f8 <_malloc_r+0x490>
   847cc:	0bf3      	lsrs	r3, r6, #15
   847ce:	f103 0078 	add.w	r0, r3, #120	; 0x78
   847d2:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   847d6:	00c1      	lsls	r1, r0, #3
   847d8:	e5e8      	b.n	843ac <_malloc_r+0x44>
   847da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   847de:	e6ee      	b.n	845be <_malloc_r+0x256>
   847e0:	2101      	movs	r1, #1
   847e2:	687b      	ldr	r3, [r7, #4]
   847e4:	1092      	asrs	r2, r2, #2
   847e6:	fa01 f202 	lsl.w	r2, r1, r2
   847ea:	431a      	orrs	r2, r3
   847ec:	607a      	str	r2, [r7, #4]
   847ee:	4663      	mov	r3, ip
   847f0:	e779      	b.n	846e6 <_malloc_r+0x37e>
   847f2:	2301      	movs	r3, #1
   847f4:	6053      	str	r3, [r2, #4]
   847f6:	e72a      	b.n	8464e <_malloc_r+0x2e6>
   847f8:	f240 5254 	movw	r2, #1364	; 0x554
   847fc:	4293      	cmp	r3, r2
   847fe:	d822      	bhi.n	84846 <_malloc_r+0x4de>
   84800:	0cb3      	lsrs	r3, r6, #18
   84802:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   84806:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8480a:	00c1      	lsls	r1, r0, #3
   8480c:	e5ce      	b.n	843ac <_malloc_r+0x44>
   8480e:	f103 0b10 	add.w	fp, r3, #16
   84812:	e6af      	b.n	84574 <_malloc_r+0x20c>
   84814:	2a54      	cmp	r2, #84	; 0x54
   84816:	d829      	bhi.n	8486c <_malloc_r+0x504>
   84818:	0b1a      	lsrs	r2, r3, #12
   8481a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8481e:	00c9      	lsls	r1, r1, #3
   84820:	326e      	adds	r2, #110	; 0x6e
   84822:	e74d      	b.n	846c0 <_malloc_r+0x358>
   84824:	4b20      	ldr	r3, [pc, #128]	; (848a8 <_malloc_r+0x540>)
   84826:	6819      	ldr	r1, [r3, #0]
   84828:	4459      	add	r1, fp
   8482a:	6019      	str	r1, [r3, #0]
   8482c:	e6b3      	b.n	84596 <_malloc_r+0x22e>
   8482e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   84832:	2800      	cmp	r0, #0
   84834:	f47f aeaf 	bne.w	84596 <_malloc_r+0x22e>
   84838:	eb08 030b 	add.w	r3, r8, fp
   8483c:	68ba      	ldr	r2, [r7, #8]
   8483e:	f043 0301 	orr.w	r3, r3, #1
   84842:	6053      	str	r3, [r2, #4]
   84844:	e6ef      	b.n	84626 <_malloc_r+0x2be>
   84846:	207f      	movs	r0, #127	; 0x7f
   84848:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8484c:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84850:	e5ac      	b.n	843ac <_malloc_r+0x44>
   84852:	f104 0108 	add.w	r1, r4, #8
   84856:	4628      	mov	r0, r5
   84858:	9300      	str	r3, [sp, #0]
   8485a:	f7ff fa67 	bl	83d2c <_free_r>
   8485e:	9b00      	ldr	r3, [sp, #0]
   84860:	6819      	ldr	r1, [r3, #0]
   84862:	e6e0      	b.n	84626 <_malloc_r+0x2be>
   84864:	2001      	movs	r0, #1
   84866:	f04f 0900 	mov.w	r9, #0
   8486a:	e6bd      	b.n	845e8 <_malloc_r+0x280>
   8486c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84870:	d805      	bhi.n	8487e <_malloc_r+0x516>
   84872:	0bda      	lsrs	r2, r3, #15
   84874:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84878:	00c9      	lsls	r1, r1, #3
   8487a:	3277      	adds	r2, #119	; 0x77
   8487c:	e720      	b.n	846c0 <_malloc_r+0x358>
   8487e:	f240 5154 	movw	r1, #1364	; 0x554
   84882:	428a      	cmp	r2, r1
   84884:	d805      	bhi.n	84892 <_malloc_r+0x52a>
   84886:	0c9a      	lsrs	r2, r3, #18
   84888:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8488c:	00c9      	lsls	r1, r1, #3
   8488e:	327c      	adds	r2, #124	; 0x7c
   84890:	e716      	b.n	846c0 <_malloc_r+0x358>
   84892:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84896:	227e      	movs	r2, #126	; 0x7e
   84898:	e712      	b.n	846c0 <_malloc_r+0x358>
   8489a:	687b      	ldr	r3, [r7, #4]
   8489c:	e780      	b.n	847a0 <_malloc_r+0x438>
   8489e:	08f0      	lsrs	r0, r6, #3
   848a0:	f106 0308 	add.w	r3, r6, #8
   848a4:	e60e      	b.n	844c4 <_malloc_r+0x15c>
   848a6:	bf00      	nop
   848a8:	2007adac 	.word	0x2007adac

000848ac <__ascii_mbtowc>:
   848ac:	b082      	sub	sp, #8
   848ae:	b149      	cbz	r1, 848c4 <__ascii_mbtowc+0x18>
   848b0:	b15a      	cbz	r2, 848ca <__ascii_mbtowc+0x1e>
   848b2:	b16b      	cbz	r3, 848d0 <__ascii_mbtowc+0x24>
   848b4:	7813      	ldrb	r3, [r2, #0]
   848b6:	600b      	str	r3, [r1, #0]
   848b8:	7812      	ldrb	r2, [r2, #0]
   848ba:	1c10      	adds	r0, r2, #0
   848bc:	bf18      	it	ne
   848be:	2001      	movne	r0, #1
   848c0:	b002      	add	sp, #8
   848c2:	4770      	bx	lr
   848c4:	a901      	add	r1, sp, #4
   848c6:	2a00      	cmp	r2, #0
   848c8:	d1f3      	bne.n	848b2 <__ascii_mbtowc+0x6>
   848ca:	4610      	mov	r0, r2
   848cc:	b002      	add	sp, #8
   848ce:	4770      	bx	lr
   848d0:	f06f 0001 	mvn.w	r0, #1
   848d4:	e7f4      	b.n	848c0 <__ascii_mbtowc+0x14>
   848d6:	bf00      	nop

000848d8 <memchr>:
   848d8:	0783      	lsls	r3, r0, #30
   848da:	b470      	push	{r4, r5, r6}
   848dc:	b2cd      	uxtb	r5, r1
   848de:	d03d      	beq.n	8495c <memchr+0x84>
   848e0:	1e54      	subs	r4, r2, #1
   848e2:	b30a      	cbz	r2, 84928 <memchr+0x50>
   848e4:	7803      	ldrb	r3, [r0, #0]
   848e6:	42ab      	cmp	r3, r5
   848e8:	d01f      	beq.n	8492a <memchr+0x52>
   848ea:	1c43      	adds	r3, r0, #1
   848ec:	e005      	b.n	848fa <memchr+0x22>
   848ee:	f114 34ff 	adds.w	r4, r4, #4294967295
   848f2:	d319      	bcc.n	84928 <memchr+0x50>
   848f4:	7802      	ldrb	r2, [r0, #0]
   848f6:	42aa      	cmp	r2, r5
   848f8:	d017      	beq.n	8492a <memchr+0x52>
   848fa:	f013 0f03 	tst.w	r3, #3
   848fe:	4618      	mov	r0, r3
   84900:	f103 0301 	add.w	r3, r3, #1
   84904:	d1f3      	bne.n	848ee <memchr+0x16>
   84906:	2c03      	cmp	r4, #3
   84908:	d811      	bhi.n	8492e <memchr+0x56>
   8490a:	b34c      	cbz	r4, 84960 <memchr+0x88>
   8490c:	7803      	ldrb	r3, [r0, #0]
   8490e:	42ab      	cmp	r3, r5
   84910:	d00b      	beq.n	8492a <memchr+0x52>
   84912:	4404      	add	r4, r0
   84914:	1c43      	adds	r3, r0, #1
   84916:	e002      	b.n	8491e <memchr+0x46>
   84918:	7802      	ldrb	r2, [r0, #0]
   8491a:	42aa      	cmp	r2, r5
   8491c:	d005      	beq.n	8492a <memchr+0x52>
   8491e:	429c      	cmp	r4, r3
   84920:	4618      	mov	r0, r3
   84922:	f103 0301 	add.w	r3, r3, #1
   84926:	d1f7      	bne.n	84918 <memchr+0x40>
   84928:	2000      	movs	r0, #0
   8492a:	bc70      	pop	{r4, r5, r6}
   8492c:	4770      	bx	lr
   8492e:	0209      	lsls	r1, r1, #8
   84930:	b289      	uxth	r1, r1
   84932:	4329      	orrs	r1, r5
   84934:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84938:	6803      	ldr	r3, [r0, #0]
   8493a:	4606      	mov	r6, r0
   8493c:	404b      	eors	r3, r1
   8493e:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84942:	ea22 0303 	bic.w	r3, r2, r3
   84946:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8494a:	f100 0004 	add.w	r0, r0, #4
   8494e:	d103      	bne.n	84958 <memchr+0x80>
   84950:	3c04      	subs	r4, #4
   84952:	2c03      	cmp	r4, #3
   84954:	d8f0      	bhi.n	84938 <memchr+0x60>
   84956:	e7d8      	b.n	8490a <memchr+0x32>
   84958:	4630      	mov	r0, r6
   8495a:	e7d7      	b.n	8490c <memchr+0x34>
   8495c:	4614      	mov	r4, r2
   8495e:	e7d2      	b.n	84906 <memchr+0x2e>
   84960:	4620      	mov	r0, r4
   84962:	e7e2      	b.n	8492a <memchr+0x52>

00084964 <memmove>:
   84964:	4288      	cmp	r0, r1
   84966:	b5f0      	push	{r4, r5, r6, r7, lr}
   84968:	d90d      	bls.n	84986 <memmove+0x22>
   8496a:	188b      	adds	r3, r1, r2
   8496c:	4298      	cmp	r0, r3
   8496e:	d20a      	bcs.n	84986 <memmove+0x22>
   84970:	1884      	adds	r4, r0, r2
   84972:	2a00      	cmp	r2, #0
   84974:	d051      	beq.n	84a1a <memmove+0xb6>
   84976:	4622      	mov	r2, r4
   84978:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   8497c:	4299      	cmp	r1, r3
   8497e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84982:	d1f9      	bne.n	84978 <memmove+0x14>
   84984:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84986:	2a0f      	cmp	r2, #15
   84988:	d948      	bls.n	84a1c <memmove+0xb8>
   8498a:	ea41 0300 	orr.w	r3, r1, r0
   8498e:	079b      	lsls	r3, r3, #30
   84990:	d146      	bne.n	84a20 <memmove+0xbc>
   84992:	4615      	mov	r5, r2
   84994:	f100 0410 	add.w	r4, r0, #16
   84998:	f101 0310 	add.w	r3, r1, #16
   8499c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   849a0:	3d10      	subs	r5, #16
   849a2:	f844 6c10 	str.w	r6, [r4, #-16]
   849a6:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   849aa:	2d0f      	cmp	r5, #15
   849ac:	f844 6c0c 	str.w	r6, [r4, #-12]
   849b0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   849b4:	f104 0410 	add.w	r4, r4, #16
   849b8:	f844 6c18 	str.w	r6, [r4, #-24]
   849bc:	f853 6c04 	ldr.w	r6, [r3, #-4]
   849c0:	f103 0310 	add.w	r3, r3, #16
   849c4:	f844 6c14 	str.w	r6, [r4, #-20]
   849c8:	d8e8      	bhi.n	8499c <memmove+0x38>
   849ca:	f1a2 0310 	sub.w	r3, r2, #16
   849ce:	f023 030f 	bic.w	r3, r3, #15
   849d2:	f002 0e0f 	and.w	lr, r2, #15
   849d6:	3310      	adds	r3, #16
   849d8:	f1be 0f03 	cmp.w	lr, #3
   849dc:	4419      	add	r1, r3
   849de:	4403      	add	r3, r0
   849e0:	d921      	bls.n	84a26 <memmove+0xc2>
   849e2:	460e      	mov	r6, r1
   849e4:	4674      	mov	r4, lr
   849e6:	1f1d      	subs	r5, r3, #4
   849e8:	f856 7b04 	ldr.w	r7, [r6], #4
   849ec:	3c04      	subs	r4, #4
   849ee:	2c03      	cmp	r4, #3
   849f0:	f845 7f04 	str.w	r7, [r5, #4]!
   849f4:	d8f8      	bhi.n	849e8 <memmove+0x84>
   849f6:	f1ae 0404 	sub.w	r4, lr, #4
   849fa:	f024 0403 	bic.w	r4, r4, #3
   849fe:	3404      	adds	r4, #4
   84a00:	4421      	add	r1, r4
   84a02:	4423      	add	r3, r4
   84a04:	f002 0203 	and.w	r2, r2, #3
   84a08:	b162      	cbz	r2, 84a24 <memmove+0xc0>
   84a0a:	3b01      	subs	r3, #1
   84a0c:	440a      	add	r2, r1
   84a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
   84a12:	428a      	cmp	r2, r1
   84a14:	f803 4f01 	strb.w	r4, [r3, #1]!
   84a18:	d1f9      	bne.n	84a0e <memmove+0xaa>
   84a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84a1c:	4603      	mov	r3, r0
   84a1e:	e7f3      	b.n	84a08 <memmove+0xa4>
   84a20:	4603      	mov	r3, r0
   84a22:	e7f2      	b.n	84a0a <memmove+0xa6>
   84a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84a26:	4672      	mov	r2, lr
   84a28:	e7ee      	b.n	84a08 <memmove+0xa4>
   84a2a:	bf00      	nop

00084a2c <__malloc_lock>:
   84a2c:	4801      	ldr	r0, [pc, #4]	; (84a34 <__malloc_lock+0x8>)
   84a2e:	f7ff bc17 	b.w	84260 <__retarget_lock_acquire_recursive>
   84a32:	bf00      	nop
   84a34:	2007adfc 	.word	0x2007adfc

00084a38 <__malloc_unlock>:
   84a38:	4801      	ldr	r0, [pc, #4]	; (84a40 <__malloc_unlock+0x8>)
   84a3a:	f7ff bc13 	b.w	84264 <__retarget_lock_release_recursive>
   84a3e:	bf00      	nop
   84a40:	2007adfc 	.word	0x2007adfc

00084a44 <_realloc_r>:
   84a44:	2900      	cmp	r1, #0
   84a46:	f000 8094 	beq.w	84b72 <_realloc_r+0x12e>
   84a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a4e:	460c      	mov	r4, r1
   84a50:	4615      	mov	r5, r2
   84a52:	b083      	sub	sp, #12
   84a54:	4680      	mov	r8, r0
   84a56:	f105 060b 	add.w	r6, r5, #11
   84a5a:	f7ff ffe7 	bl	84a2c <__malloc_lock>
   84a5e:	f854 ec04 	ldr.w	lr, [r4, #-4]
   84a62:	2e16      	cmp	r6, #22
   84a64:	f02e 0703 	bic.w	r7, lr, #3
   84a68:	f1a4 0908 	sub.w	r9, r4, #8
   84a6c:	d83c      	bhi.n	84ae8 <_realloc_r+0xa4>
   84a6e:	2210      	movs	r2, #16
   84a70:	4616      	mov	r6, r2
   84a72:	42b5      	cmp	r5, r6
   84a74:	d83d      	bhi.n	84af2 <_realloc_r+0xae>
   84a76:	4297      	cmp	r7, r2
   84a78:	da43      	bge.n	84b02 <_realloc_r+0xbe>
   84a7a:	4bc6      	ldr	r3, [pc, #792]	; (84d94 <_realloc_r+0x350>)
   84a7c:	eb09 0007 	add.w	r0, r9, r7
   84a80:	6899      	ldr	r1, [r3, #8]
   84a82:	4288      	cmp	r0, r1
   84a84:	f000 80c3 	beq.w	84c0e <_realloc_r+0x1ca>
   84a88:	6843      	ldr	r3, [r0, #4]
   84a8a:	f023 0101 	bic.w	r1, r3, #1
   84a8e:	4401      	add	r1, r0
   84a90:	6849      	ldr	r1, [r1, #4]
   84a92:	07c9      	lsls	r1, r1, #31
   84a94:	d54d      	bpl.n	84b32 <_realloc_r+0xee>
   84a96:	f01e 0f01 	tst.w	lr, #1
   84a9a:	f000 809b 	beq.w	84bd4 <_realloc_r+0x190>
   84a9e:	4629      	mov	r1, r5
   84aa0:	4640      	mov	r0, r8
   84aa2:	f7ff fc61 	bl	84368 <_malloc_r>
   84aa6:	4605      	mov	r5, r0
   84aa8:	2800      	cmp	r0, #0
   84aaa:	d03b      	beq.n	84b24 <_realloc_r+0xe0>
   84aac:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84ab0:	f1a0 0208 	sub.w	r2, r0, #8
   84ab4:	f023 0301 	bic.w	r3, r3, #1
   84ab8:	444b      	add	r3, r9
   84aba:	429a      	cmp	r2, r3
   84abc:	f000 812b 	beq.w	84d16 <_realloc_r+0x2d2>
   84ac0:	1f3a      	subs	r2, r7, #4
   84ac2:	2a24      	cmp	r2, #36	; 0x24
   84ac4:	f200 8118 	bhi.w	84cf8 <_realloc_r+0x2b4>
   84ac8:	2a13      	cmp	r2, #19
   84aca:	f200 80eb 	bhi.w	84ca4 <_realloc_r+0x260>
   84ace:	4603      	mov	r3, r0
   84ad0:	4622      	mov	r2, r4
   84ad2:	6811      	ldr	r1, [r2, #0]
   84ad4:	6019      	str	r1, [r3, #0]
   84ad6:	6851      	ldr	r1, [r2, #4]
   84ad8:	6059      	str	r1, [r3, #4]
   84ada:	6892      	ldr	r2, [r2, #8]
   84adc:	609a      	str	r2, [r3, #8]
   84ade:	4621      	mov	r1, r4
   84ae0:	4640      	mov	r0, r8
   84ae2:	f7ff f923 	bl	83d2c <_free_r>
   84ae6:	e01d      	b.n	84b24 <_realloc_r+0xe0>
   84ae8:	f026 0607 	bic.w	r6, r6, #7
   84aec:	2e00      	cmp	r6, #0
   84aee:	4632      	mov	r2, r6
   84af0:	dabf      	bge.n	84a72 <_realloc_r+0x2e>
   84af2:	2500      	movs	r5, #0
   84af4:	230c      	movs	r3, #12
   84af6:	4628      	mov	r0, r5
   84af8:	f8c8 3000 	str.w	r3, [r8]
   84afc:	b003      	add	sp, #12
   84afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b02:	4625      	mov	r5, r4
   84b04:	1bbb      	subs	r3, r7, r6
   84b06:	2b0f      	cmp	r3, #15
   84b08:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84b0c:	d81d      	bhi.n	84b4a <_realloc_r+0x106>
   84b0e:	f002 0201 	and.w	r2, r2, #1
   84b12:	433a      	orrs	r2, r7
   84b14:	eb09 0107 	add.w	r1, r9, r7
   84b18:	f8c9 2004 	str.w	r2, [r9, #4]
   84b1c:	684b      	ldr	r3, [r1, #4]
   84b1e:	f043 0301 	orr.w	r3, r3, #1
   84b22:	604b      	str	r3, [r1, #4]
   84b24:	4640      	mov	r0, r8
   84b26:	f7ff ff87 	bl	84a38 <__malloc_unlock>
   84b2a:	4628      	mov	r0, r5
   84b2c:	b003      	add	sp, #12
   84b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b32:	f023 0303 	bic.w	r3, r3, #3
   84b36:	18f9      	adds	r1, r7, r3
   84b38:	4291      	cmp	r1, r2
   84b3a:	db1d      	blt.n	84b78 <_realloc_r+0x134>
   84b3c:	68c3      	ldr	r3, [r0, #12]
   84b3e:	6882      	ldr	r2, [r0, #8]
   84b40:	4625      	mov	r5, r4
   84b42:	60d3      	str	r3, [r2, #12]
   84b44:	460f      	mov	r7, r1
   84b46:	609a      	str	r2, [r3, #8]
   84b48:	e7dc      	b.n	84b04 <_realloc_r+0xc0>
   84b4a:	f002 0201 	and.w	r2, r2, #1
   84b4e:	eb09 0106 	add.w	r1, r9, r6
   84b52:	f043 0301 	orr.w	r3, r3, #1
   84b56:	4332      	orrs	r2, r6
   84b58:	f8c9 2004 	str.w	r2, [r9, #4]
   84b5c:	444f      	add	r7, r9
   84b5e:	604b      	str	r3, [r1, #4]
   84b60:	687b      	ldr	r3, [r7, #4]
   84b62:	3108      	adds	r1, #8
   84b64:	f043 0301 	orr.w	r3, r3, #1
   84b68:	607b      	str	r3, [r7, #4]
   84b6a:	4640      	mov	r0, r8
   84b6c:	f7ff f8de 	bl	83d2c <_free_r>
   84b70:	e7d8      	b.n	84b24 <_realloc_r+0xe0>
   84b72:	4611      	mov	r1, r2
   84b74:	f7ff bbf8 	b.w	84368 <_malloc_r>
   84b78:	f01e 0f01 	tst.w	lr, #1
   84b7c:	d18f      	bne.n	84a9e <_realloc_r+0x5a>
   84b7e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84b82:	eba9 0a01 	sub.w	sl, r9, r1
   84b86:	f8da 1004 	ldr.w	r1, [sl, #4]
   84b8a:	f021 0103 	bic.w	r1, r1, #3
   84b8e:	440b      	add	r3, r1
   84b90:	443b      	add	r3, r7
   84b92:	4293      	cmp	r3, r2
   84b94:	db26      	blt.n	84be4 <_realloc_r+0x1a0>
   84b96:	4655      	mov	r5, sl
   84b98:	68c1      	ldr	r1, [r0, #12]
   84b9a:	6880      	ldr	r0, [r0, #8]
   84b9c:	1f3a      	subs	r2, r7, #4
   84b9e:	60c1      	str	r1, [r0, #12]
   84ba0:	6088      	str	r0, [r1, #8]
   84ba2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84ba6:	f8da 100c 	ldr.w	r1, [sl, #12]
   84baa:	2a24      	cmp	r2, #36	; 0x24
   84bac:	60c1      	str	r1, [r0, #12]
   84bae:	6088      	str	r0, [r1, #8]
   84bb0:	d826      	bhi.n	84c00 <_realloc_r+0x1bc>
   84bb2:	2a13      	cmp	r2, #19
   84bb4:	f240 8081 	bls.w	84cba <_realloc_r+0x276>
   84bb8:	6821      	ldr	r1, [r4, #0]
   84bba:	2a1b      	cmp	r2, #27
   84bbc:	f8ca 1008 	str.w	r1, [sl, #8]
   84bc0:	6861      	ldr	r1, [r4, #4]
   84bc2:	f8ca 100c 	str.w	r1, [sl, #12]
   84bc6:	f200 80ad 	bhi.w	84d24 <_realloc_r+0x2e0>
   84bca:	f104 0008 	add.w	r0, r4, #8
   84bce:	f10a 0210 	add.w	r2, sl, #16
   84bd2:	e074      	b.n	84cbe <_realloc_r+0x27a>
   84bd4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84bd8:	eba9 0a03 	sub.w	sl, r9, r3
   84bdc:	f8da 1004 	ldr.w	r1, [sl, #4]
   84be0:	f021 0103 	bic.w	r1, r1, #3
   84be4:	187b      	adds	r3, r7, r1
   84be6:	4293      	cmp	r3, r2
   84be8:	f6ff af59 	blt.w	84a9e <_realloc_r+0x5a>
   84bec:	4655      	mov	r5, sl
   84bee:	f8da 100c 	ldr.w	r1, [sl, #12]
   84bf2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84bf6:	1f3a      	subs	r2, r7, #4
   84bf8:	2a24      	cmp	r2, #36	; 0x24
   84bfa:	60c1      	str	r1, [r0, #12]
   84bfc:	6088      	str	r0, [r1, #8]
   84bfe:	d9d8      	bls.n	84bb2 <_realloc_r+0x16e>
   84c00:	4621      	mov	r1, r4
   84c02:	4628      	mov	r0, r5
   84c04:	461f      	mov	r7, r3
   84c06:	46d1      	mov	r9, sl
   84c08:	f7ff feac 	bl	84964 <memmove>
   84c0c:	e77a      	b.n	84b04 <_realloc_r+0xc0>
   84c0e:	6841      	ldr	r1, [r0, #4]
   84c10:	f106 0010 	add.w	r0, r6, #16
   84c14:	f021 0b03 	bic.w	fp, r1, #3
   84c18:	44bb      	add	fp, r7
   84c1a:	4583      	cmp	fp, r0
   84c1c:	da58      	bge.n	84cd0 <_realloc_r+0x28c>
   84c1e:	f01e 0f01 	tst.w	lr, #1
   84c22:	f47f af3c 	bne.w	84a9e <_realloc_r+0x5a>
   84c26:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84c2a:	eba9 0a01 	sub.w	sl, r9, r1
   84c2e:	f8da 1004 	ldr.w	r1, [sl, #4]
   84c32:	f021 0103 	bic.w	r1, r1, #3
   84c36:	448b      	add	fp, r1
   84c38:	4558      	cmp	r0, fp
   84c3a:	dcd3      	bgt.n	84be4 <_realloc_r+0x1a0>
   84c3c:	4655      	mov	r5, sl
   84c3e:	f8da 100c 	ldr.w	r1, [sl, #12]
   84c42:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84c46:	1f3a      	subs	r2, r7, #4
   84c48:	2a24      	cmp	r2, #36	; 0x24
   84c4a:	60c1      	str	r1, [r0, #12]
   84c4c:	6088      	str	r0, [r1, #8]
   84c4e:	f200 808d 	bhi.w	84d6c <_realloc_r+0x328>
   84c52:	2a13      	cmp	r2, #19
   84c54:	f240 8087 	bls.w	84d66 <_realloc_r+0x322>
   84c58:	6821      	ldr	r1, [r4, #0]
   84c5a:	2a1b      	cmp	r2, #27
   84c5c:	f8ca 1008 	str.w	r1, [sl, #8]
   84c60:	6861      	ldr	r1, [r4, #4]
   84c62:	f8ca 100c 	str.w	r1, [sl, #12]
   84c66:	f200 8088 	bhi.w	84d7a <_realloc_r+0x336>
   84c6a:	f104 0108 	add.w	r1, r4, #8
   84c6e:	f10a 0210 	add.w	r2, sl, #16
   84c72:	6808      	ldr	r0, [r1, #0]
   84c74:	6010      	str	r0, [r2, #0]
   84c76:	6848      	ldr	r0, [r1, #4]
   84c78:	6050      	str	r0, [r2, #4]
   84c7a:	6889      	ldr	r1, [r1, #8]
   84c7c:	6091      	str	r1, [r2, #8]
   84c7e:	ebab 0206 	sub.w	r2, fp, r6
   84c82:	eb0a 0106 	add.w	r1, sl, r6
   84c86:	f042 0201 	orr.w	r2, r2, #1
   84c8a:	6099      	str	r1, [r3, #8]
   84c8c:	604a      	str	r2, [r1, #4]
   84c8e:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c92:	4640      	mov	r0, r8
   84c94:	f003 0301 	and.w	r3, r3, #1
   84c98:	431e      	orrs	r6, r3
   84c9a:	f8ca 6004 	str.w	r6, [sl, #4]
   84c9e:	f7ff fecb 	bl	84a38 <__malloc_unlock>
   84ca2:	e742      	b.n	84b2a <_realloc_r+0xe6>
   84ca4:	6823      	ldr	r3, [r4, #0]
   84ca6:	2a1b      	cmp	r2, #27
   84ca8:	6003      	str	r3, [r0, #0]
   84caa:	6863      	ldr	r3, [r4, #4]
   84cac:	6043      	str	r3, [r0, #4]
   84cae:	d827      	bhi.n	84d00 <_realloc_r+0x2bc>
   84cb0:	f100 0308 	add.w	r3, r0, #8
   84cb4:	f104 0208 	add.w	r2, r4, #8
   84cb8:	e70b      	b.n	84ad2 <_realloc_r+0x8e>
   84cba:	4620      	mov	r0, r4
   84cbc:	462a      	mov	r2, r5
   84cbe:	6801      	ldr	r1, [r0, #0]
   84cc0:	461f      	mov	r7, r3
   84cc2:	6011      	str	r1, [r2, #0]
   84cc4:	6841      	ldr	r1, [r0, #4]
   84cc6:	46d1      	mov	r9, sl
   84cc8:	6051      	str	r1, [r2, #4]
   84cca:	6883      	ldr	r3, [r0, #8]
   84ccc:	6093      	str	r3, [r2, #8]
   84cce:	e719      	b.n	84b04 <_realloc_r+0xc0>
   84cd0:	ebab 0b06 	sub.w	fp, fp, r6
   84cd4:	eb09 0106 	add.w	r1, r9, r6
   84cd8:	f04b 0201 	orr.w	r2, fp, #1
   84cdc:	6099      	str	r1, [r3, #8]
   84cde:	604a      	str	r2, [r1, #4]
   84ce0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84ce4:	4640      	mov	r0, r8
   84ce6:	f003 0301 	and.w	r3, r3, #1
   84cea:	431e      	orrs	r6, r3
   84cec:	f844 6c04 	str.w	r6, [r4, #-4]
   84cf0:	f7ff fea2 	bl	84a38 <__malloc_unlock>
   84cf4:	4625      	mov	r5, r4
   84cf6:	e718      	b.n	84b2a <_realloc_r+0xe6>
   84cf8:	4621      	mov	r1, r4
   84cfa:	f7ff fe33 	bl	84964 <memmove>
   84cfe:	e6ee      	b.n	84ade <_realloc_r+0x9a>
   84d00:	68a3      	ldr	r3, [r4, #8]
   84d02:	2a24      	cmp	r2, #36	; 0x24
   84d04:	6083      	str	r3, [r0, #8]
   84d06:	68e3      	ldr	r3, [r4, #12]
   84d08:	60c3      	str	r3, [r0, #12]
   84d0a:	d018      	beq.n	84d3e <_realloc_r+0x2fa>
   84d0c:	f100 0310 	add.w	r3, r0, #16
   84d10:	f104 0210 	add.w	r2, r4, #16
   84d14:	e6dd      	b.n	84ad2 <_realloc_r+0x8e>
   84d16:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84d1a:	4625      	mov	r5, r4
   84d1c:	f023 0303 	bic.w	r3, r3, #3
   84d20:	441f      	add	r7, r3
   84d22:	e6ef      	b.n	84b04 <_realloc_r+0xc0>
   84d24:	68a1      	ldr	r1, [r4, #8]
   84d26:	2a24      	cmp	r2, #36	; 0x24
   84d28:	f8ca 1010 	str.w	r1, [sl, #16]
   84d2c:	68e1      	ldr	r1, [r4, #12]
   84d2e:	f8ca 1014 	str.w	r1, [sl, #20]
   84d32:	d00d      	beq.n	84d50 <_realloc_r+0x30c>
   84d34:	f104 0010 	add.w	r0, r4, #16
   84d38:	f10a 0218 	add.w	r2, sl, #24
   84d3c:	e7bf      	b.n	84cbe <_realloc_r+0x27a>
   84d3e:	6922      	ldr	r2, [r4, #16]
   84d40:	f100 0318 	add.w	r3, r0, #24
   84d44:	6102      	str	r2, [r0, #16]
   84d46:	6961      	ldr	r1, [r4, #20]
   84d48:	f104 0218 	add.w	r2, r4, #24
   84d4c:	6141      	str	r1, [r0, #20]
   84d4e:	e6c0      	b.n	84ad2 <_realloc_r+0x8e>
   84d50:	6922      	ldr	r2, [r4, #16]
   84d52:	f104 0018 	add.w	r0, r4, #24
   84d56:	f8ca 2018 	str.w	r2, [sl, #24]
   84d5a:	6961      	ldr	r1, [r4, #20]
   84d5c:	f10a 0220 	add.w	r2, sl, #32
   84d60:	f8ca 101c 	str.w	r1, [sl, #28]
   84d64:	e7ab      	b.n	84cbe <_realloc_r+0x27a>
   84d66:	4621      	mov	r1, r4
   84d68:	462a      	mov	r2, r5
   84d6a:	e782      	b.n	84c72 <_realloc_r+0x22e>
   84d6c:	4621      	mov	r1, r4
   84d6e:	4628      	mov	r0, r5
   84d70:	9301      	str	r3, [sp, #4]
   84d72:	f7ff fdf7 	bl	84964 <memmove>
   84d76:	9b01      	ldr	r3, [sp, #4]
   84d78:	e781      	b.n	84c7e <_realloc_r+0x23a>
   84d7a:	68a1      	ldr	r1, [r4, #8]
   84d7c:	2a24      	cmp	r2, #36	; 0x24
   84d7e:	f8ca 1010 	str.w	r1, [sl, #16]
   84d82:	68e1      	ldr	r1, [r4, #12]
   84d84:	f8ca 1014 	str.w	r1, [sl, #20]
   84d88:	d006      	beq.n	84d98 <_realloc_r+0x354>
   84d8a:	f104 0110 	add.w	r1, r4, #16
   84d8e:	f10a 0218 	add.w	r2, sl, #24
   84d92:	e76e      	b.n	84c72 <_realloc_r+0x22e>
   84d94:	20070720 	.word	0x20070720
   84d98:	6922      	ldr	r2, [r4, #16]
   84d9a:	f104 0118 	add.w	r1, r4, #24
   84d9e:	f8ca 2018 	str.w	r2, [sl, #24]
   84da2:	6960      	ldr	r0, [r4, #20]
   84da4:	f10a 0220 	add.w	r2, sl, #32
   84da8:	f8ca 001c 	str.w	r0, [sl, #28]
   84dac:	e761      	b.n	84c72 <_realloc_r+0x22e>
   84dae:	bf00      	nop

00084db0 <_sbrk_r>:
   84db0:	b538      	push	{r3, r4, r5, lr}
   84db2:	2300      	movs	r3, #0
   84db4:	4c06      	ldr	r4, [pc, #24]	; (84dd0 <_sbrk_r+0x20>)
   84db6:	4605      	mov	r5, r0
   84db8:	4608      	mov	r0, r1
   84dba:	6023      	str	r3, [r4, #0]
   84dbc:	f7fd fb58 	bl	82470 <_sbrk>
   84dc0:	1c43      	adds	r3, r0, #1
   84dc2:	d000      	beq.n	84dc6 <_sbrk_r+0x16>
   84dc4:	bd38      	pop	{r3, r4, r5, pc}
   84dc6:	6823      	ldr	r3, [r4, #0]
   84dc8:	2b00      	cmp	r3, #0
   84dca:	d0fb      	beq.n	84dc4 <_sbrk_r+0x14>
   84dcc:	602b      	str	r3, [r5, #0]
   84dce:	bd38      	pop	{r3, r4, r5, pc}
   84dd0:	2007ae10 	.word	0x2007ae10

00084dd4 <__sread>:
   84dd4:	b510      	push	{r4, lr}
   84dd6:	460c      	mov	r4, r1
   84dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84ddc:	f000 f9f4 	bl	851c8 <_read_r>
   84de0:	2800      	cmp	r0, #0
   84de2:	db03      	blt.n	84dec <__sread+0x18>
   84de4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84de6:	4403      	add	r3, r0
   84de8:	6523      	str	r3, [r4, #80]	; 0x50
   84dea:	bd10      	pop	{r4, pc}
   84dec:	89a3      	ldrh	r3, [r4, #12]
   84dee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84df2:	81a3      	strh	r3, [r4, #12]
   84df4:	bd10      	pop	{r4, pc}
   84df6:	bf00      	nop

00084df8 <__swrite>:
   84df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84dfc:	460c      	mov	r4, r1
   84dfe:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84e02:	461f      	mov	r7, r3
   84e04:	05cb      	lsls	r3, r1, #23
   84e06:	4616      	mov	r6, r2
   84e08:	4605      	mov	r5, r0
   84e0a:	d507      	bpl.n	84e1c <__swrite+0x24>
   84e0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84e10:	2302      	movs	r3, #2
   84e12:	2200      	movs	r2, #0
   84e14:	f000 f9c2 	bl	8519c <_lseek_r>
   84e18:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84e1c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84e20:	81a1      	strh	r1, [r4, #12]
   84e22:	463b      	mov	r3, r7
   84e24:	4632      	mov	r2, r6
   84e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84e2a:	4628      	mov	r0, r5
   84e2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84e30:	f000 b8a2 	b.w	84f78 <_write_r>

00084e34 <__sseek>:
   84e34:	b510      	push	{r4, lr}
   84e36:	460c      	mov	r4, r1
   84e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84e3c:	f000 f9ae 	bl	8519c <_lseek_r>
   84e40:	89a3      	ldrh	r3, [r4, #12]
   84e42:	1c42      	adds	r2, r0, #1
   84e44:	bf0e      	itee	eq
   84e46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84e4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84e4e:	6520      	strne	r0, [r4, #80]	; 0x50
   84e50:	81a3      	strh	r3, [r4, #12]
   84e52:	bd10      	pop	{r4, pc}

00084e54 <__sclose>:
   84e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84e58:	f000 b906 	b.w	85068 <_close_r>

00084e5c <__swbuf_r>:
   84e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e5e:	460d      	mov	r5, r1
   84e60:	4614      	mov	r4, r2
   84e62:	4606      	mov	r6, r0
   84e64:	b110      	cbz	r0, 84e6c <__swbuf_r+0x10>
   84e66:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84e68:	2b00      	cmp	r3, #0
   84e6a:	d04b      	beq.n	84f04 <__swbuf_r+0xa8>
   84e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84e70:	69a3      	ldr	r3, [r4, #24]
   84e72:	b291      	uxth	r1, r2
   84e74:	0708      	lsls	r0, r1, #28
   84e76:	60a3      	str	r3, [r4, #8]
   84e78:	d539      	bpl.n	84eee <__swbuf_r+0x92>
   84e7a:	6923      	ldr	r3, [r4, #16]
   84e7c:	2b00      	cmp	r3, #0
   84e7e:	d036      	beq.n	84eee <__swbuf_r+0x92>
   84e80:	b2ed      	uxtb	r5, r5
   84e82:	0489      	lsls	r1, r1, #18
   84e84:	462f      	mov	r7, r5
   84e86:	d515      	bpl.n	84eb4 <__swbuf_r+0x58>
   84e88:	6822      	ldr	r2, [r4, #0]
   84e8a:	6961      	ldr	r1, [r4, #20]
   84e8c:	1ad3      	subs	r3, r2, r3
   84e8e:	428b      	cmp	r3, r1
   84e90:	da1c      	bge.n	84ecc <__swbuf_r+0x70>
   84e92:	3301      	adds	r3, #1
   84e94:	68a1      	ldr	r1, [r4, #8]
   84e96:	1c50      	adds	r0, r2, #1
   84e98:	3901      	subs	r1, #1
   84e9a:	60a1      	str	r1, [r4, #8]
   84e9c:	6020      	str	r0, [r4, #0]
   84e9e:	7015      	strb	r5, [r2, #0]
   84ea0:	6962      	ldr	r2, [r4, #20]
   84ea2:	429a      	cmp	r2, r3
   84ea4:	d01a      	beq.n	84edc <__swbuf_r+0x80>
   84ea6:	89a3      	ldrh	r3, [r4, #12]
   84ea8:	07db      	lsls	r3, r3, #31
   84eaa:	d501      	bpl.n	84eb0 <__swbuf_r+0x54>
   84eac:	2d0a      	cmp	r5, #10
   84eae:	d015      	beq.n	84edc <__swbuf_r+0x80>
   84eb0:	4638      	mov	r0, r7
   84eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84eb4:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84eb6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84eba:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84ebe:	81a2      	strh	r2, [r4, #12]
   84ec0:	6822      	ldr	r2, [r4, #0]
   84ec2:	6661      	str	r1, [r4, #100]	; 0x64
   84ec4:	6961      	ldr	r1, [r4, #20]
   84ec6:	1ad3      	subs	r3, r2, r3
   84ec8:	428b      	cmp	r3, r1
   84eca:	dbe2      	blt.n	84e92 <__swbuf_r+0x36>
   84ecc:	4621      	mov	r1, r4
   84ece:	4630      	mov	r0, r6
   84ed0:	f7fe fdae 	bl	83a30 <_fflush_r>
   84ed4:	b940      	cbnz	r0, 84ee8 <__swbuf_r+0x8c>
   84ed6:	2301      	movs	r3, #1
   84ed8:	6822      	ldr	r2, [r4, #0]
   84eda:	e7db      	b.n	84e94 <__swbuf_r+0x38>
   84edc:	4621      	mov	r1, r4
   84ede:	4630      	mov	r0, r6
   84ee0:	f7fe fda6 	bl	83a30 <_fflush_r>
   84ee4:	2800      	cmp	r0, #0
   84ee6:	d0e3      	beq.n	84eb0 <__swbuf_r+0x54>
   84ee8:	f04f 37ff 	mov.w	r7, #4294967295
   84eec:	e7e0      	b.n	84eb0 <__swbuf_r+0x54>
   84eee:	4621      	mov	r1, r4
   84ef0:	4630      	mov	r0, r6
   84ef2:	f7fe fc8d 	bl	83810 <__swsetup_r>
   84ef6:	2800      	cmp	r0, #0
   84ef8:	d1f6      	bne.n	84ee8 <__swbuf_r+0x8c>
   84efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84efe:	6923      	ldr	r3, [r4, #16]
   84f00:	b291      	uxth	r1, r2
   84f02:	e7bd      	b.n	84e80 <__swbuf_r+0x24>
   84f04:	f7fe fdec 	bl	83ae0 <__sinit>
   84f08:	e7b0      	b.n	84e6c <__swbuf_r+0x10>
   84f0a:	bf00      	nop

00084f0c <_wcrtomb_r>:
   84f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   84f0e:	4606      	mov	r6, r0
   84f10:	b085      	sub	sp, #20
   84f12:	461f      	mov	r7, r3
   84f14:	b189      	cbz	r1, 84f3a <_wcrtomb_r+0x2e>
   84f16:	4c10      	ldr	r4, [pc, #64]	; (84f58 <_wcrtomb_r+0x4c>)
   84f18:	4d10      	ldr	r5, [pc, #64]	; (84f5c <_wcrtomb_r+0x50>)
   84f1a:	6824      	ldr	r4, [r4, #0]
   84f1c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84f1e:	2c00      	cmp	r4, #0
   84f20:	bf08      	it	eq
   84f22:	462c      	moveq	r4, r5
   84f24:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84f28:	47a0      	blx	r4
   84f2a:	1c43      	adds	r3, r0, #1
   84f2c:	d103      	bne.n	84f36 <_wcrtomb_r+0x2a>
   84f2e:	2200      	movs	r2, #0
   84f30:	238a      	movs	r3, #138	; 0x8a
   84f32:	603a      	str	r2, [r7, #0]
   84f34:	6033      	str	r3, [r6, #0]
   84f36:	b005      	add	sp, #20
   84f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84f3a:	460c      	mov	r4, r1
   84f3c:	4a06      	ldr	r2, [pc, #24]	; (84f58 <_wcrtomb_r+0x4c>)
   84f3e:	4d07      	ldr	r5, [pc, #28]	; (84f5c <_wcrtomb_r+0x50>)
   84f40:	6811      	ldr	r1, [r2, #0]
   84f42:	4622      	mov	r2, r4
   84f44:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   84f46:	a901      	add	r1, sp, #4
   84f48:	2c00      	cmp	r4, #0
   84f4a:	bf08      	it	eq
   84f4c:	462c      	moveq	r4, r5
   84f4e:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84f52:	47a0      	blx	r4
   84f54:	e7e9      	b.n	84f2a <_wcrtomb_r+0x1e>
   84f56:	bf00      	nop
   84f58:	20070180 	.word	0x20070180
   84f5c:	200705b4 	.word	0x200705b4

00084f60 <__ascii_wctomb>:
   84f60:	b119      	cbz	r1, 84f6a <__ascii_wctomb+0xa>
   84f62:	2aff      	cmp	r2, #255	; 0xff
   84f64:	d803      	bhi.n	84f6e <__ascii_wctomb+0xe>
   84f66:	700a      	strb	r2, [r1, #0]
   84f68:	2101      	movs	r1, #1
   84f6a:	4608      	mov	r0, r1
   84f6c:	4770      	bx	lr
   84f6e:	238a      	movs	r3, #138	; 0x8a
   84f70:	f04f 31ff 	mov.w	r1, #4294967295
   84f74:	6003      	str	r3, [r0, #0]
   84f76:	e7f8      	b.n	84f6a <__ascii_wctomb+0xa>

00084f78 <_write_r>:
   84f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84f7a:	460e      	mov	r6, r1
   84f7c:	2500      	movs	r5, #0
   84f7e:	4c08      	ldr	r4, [pc, #32]	; (84fa0 <_write_r+0x28>)
   84f80:	4611      	mov	r1, r2
   84f82:	4607      	mov	r7, r0
   84f84:	461a      	mov	r2, r3
   84f86:	4630      	mov	r0, r6
   84f88:	6025      	str	r5, [r4, #0]
   84f8a:	f7fc fe29 	bl	81be0 <_write>
   84f8e:	1c43      	adds	r3, r0, #1
   84f90:	d000      	beq.n	84f94 <_write_r+0x1c>
   84f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f94:	6823      	ldr	r3, [r4, #0]
   84f96:	2b00      	cmp	r3, #0
   84f98:	d0fb      	beq.n	84f92 <_write_r+0x1a>
   84f9a:	603b      	str	r3, [r7, #0]
   84f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f9e:	bf00      	nop
   84fa0:	2007ae10 	.word	0x2007ae10

00084fa4 <__register_exitproc>:
   84fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84fa8:	4d2c      	ldr	r5, [pc, #176]	; (8505c <__register_exitproc+0xb8>)
   84faa:	4606      	mov	r6, r0
   84fac:	6828      	ldr	r0, [r5, #0]
   84fae:	4698      	mov	r8, r3
   84fb0:	460f      	mov	r7, r1
   84fb2:	4691      	mov	r9, r2
   84fb4:	f7ff f954 	bl	84260 <__retarget_lock_acquire_recursive>
   84fb8:	4b29      	ldr	r3, [pc, #164]	; (85060 <__register_exitproc+0xbc>)
   84fba:	681c      	ldr	r4, [r3, #0]
   84fbc:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   84fc0:	2b00      	cmp	r3, #0
   84fc2:	d03e      	beq.n	85042 <__register_exitproc+0x9e>
   84fc4:	685a      	ldr	r2, [r3, #4]
   84fc6:	2a1f      	cmp	r2, #31
   84fc8:	dc1c      	bgt.n	85004 <__register_exitproc+0x60>
   84fca:	f102 0e01 	add.w	lr, r2, #1
   84fce:	b176      	cbz	r6, 84fee <__register_exitproc+0x4a>
   84fd0:	2101      	movs	r1, #1
   84fd2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   84fd6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   84fda:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84fde:	4091      	lsls	r1, r2
   84fe0:	4308      	orrs	r0, r1
   84fe2:	2e02      	cmp	r6, #2
   84fe4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84fe8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84fec:	d023      	beq.n	85036 <__register_exitproc+0x92>
   84fee:	3202      	adds	r2, #2
   84ff0:	f8c3 e004 	str.w	lr, [r3, #4]
   84ff4:	6828      	ldr	r0, [r5, #0]
   84ff6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   84ffa:	f7ff f933 	bl	84264 <__retarget_lock_release_recursive>
   84ffe:	2000      	movs	r0, #0
   85000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85004:	4b17      	ldr	r3, [pc, #92]	; (85064 <__register_exitproc+0xc0>)
   85006:	b30b      	cbz	r3, 8504c <__register_exitproc+0xa8>
   85008:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8500c:	f7ff f9a4 	bl	84358 <malloc>
   85010:	4603      	mov	r3, r0
   85012:	b1d8      	cbz	r0, 8504c <__register_exitproc+0xa8>
   85014:	2000      	movs	r0, #0
   85016:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8501a:	f04f 0e01 	mov.w	lr, #1
   8501e:	6058      	str	r0, [r3, #4]
   85020:	6019      	str	r1, [r3, #0]
   85022:	4602      	mov	r2, r0
   85024:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85028:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8502c:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85030:	2e00      	cmp	r6, #0
   85032:	d0dc      	beq.n	84fee <__register_exitproc+0x4a>
   85034:	e7cc      	b.n	84fd0 <__register_exitproc+0x2c>
   85036:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8503a:	4301      	orrs	r1, r0
   8503c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85040:	e7d5      	b.n	84fee <__register_exitproc+0x4a>
   85042:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   85046:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8504a:	e7bb      	b.n	84fc4 <__register_exitproc+0x20>
   8504c:	6828      	ldr	r0, [r5, #0]
   8504e:	f7ff f909 	bl	84264 <__retarget_lock_release_recursive>
   85052:	f04f 30ff 	mov.w	r0, #4294967295
   85056:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8505a:	bf00      	nop
   8505c:	200705b0 	.word	0x200705b0
   85060:	0008555c 	.word	0x0008555c
   85064:	00084359 	.word	0x00084359

00085068 <_close_r>:
   85068:	b538      	push	{r3, r4, r5, lr}
   8506a:	2300      	movs	r3, #0
   8506c:	4c06      	ldr	r4, [pc, #24]	; (85088 <_close_r+0x20>)
   8506e:	4605      	mov	r5, r0
   85070:	4608      	mov	r0, r1
   85072:	6023      	str	r3, [r4, #0]
   85074:	f7fd fa18 	bl	824a8 <_close>
   85078:	1c43      	adds	r3, r0, #1
   8507a:	d000      	beq.n	8507e <_close_r+0x16>
   8507c:	bd38      	pop	{r3, r4, r5, pc}
   8507e:	6823      	ldr	r3, [r4, #0]
   85080:	2b00      	cmp	r3, #0
   85082:	d0fb      	beq.n	8507c <_close_r+0x14>
   85084:	602b      	str	r3, [r5, #0]
   85086:	bd38      	pop	{r3, r4, r5, pc}
   85088:	2007ae10 	.word	0x2007ae10

0008508c <_fclose_r>:
   8508c:	b570      	push	{r4, r5, r6, lr}
   8508e:	b159      	cbz	r1, 850a8 <_fclose_r+0x1c>
   85090:	4605      	mov	r5, r0
   85092:	460c      	mov	r4, r1
   85094:	b110      	cbz	r0, 8509c <_fclose_r+0x10>
   85096:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85098:	2b00      	cmp	r3, #0
   8509a:	d03c      	beq.n	85116 <_fclose_r+0x8a>
   8509c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8509e:	07d8      	lsls	r0, r3, #31
   850a0:	d505      	bpl.n	850ae <_fclose_r+0x22>
   850a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   850a6:	b92b      	cbnz	r3, 850b4 <_fclose_r+0x28>
   850a8:	2600      	movs	r6, #0
   850aa:	4630      	mov	r0, r6
   850ac:	bd70      	pop	{r4, r5, r6, pc}
   850ae:	89a3      	ldrh	r3, [r4, #12]
   850b0:	0599      	lsls	r1, r3, #22
   850b2:	d53c      	bpl.n	8512e <_fclose_r+0xa2>
   850b4:	4621      	mov	r1, r4
   850b6:	4628      	mov	r0, r5
   850b8:	f7fe fc1e 	bl	838f8 <__sflush_r>
   850bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   850be:	4606      	mov	r6, r0
   850c0:	b133      	cbz	r3, 850d0 <_fclose_r+0x44>
   850c2:	69e1      	ldr	r1, [r4, #28]
   850c4:	4628      	mov	r0, r5
   850c6:	4798      	blx	r3
   850c8:	2800      	cmp	r0, #0
   850ca:	bfb8      	it	lt
   850cc:	f04f 36ff 	movlt.w	r6, #4294967295
   850d0:	89a3      	ldrh	r3, [r4, #12]
   850d2:	061a      	lsls	r2, r3, #24
   850d4:	d422      	bmi.n	8511c <_fclose_r+0x90>
   850d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
   850d8:	b141      	cbz	r1, 850ec <_fclose_r+0x60>
   850da:	f104 0340 	add.w	r3, r4, #64	; 0x40
   850de:	4299      	cmp	r1, r3
   850e0:	d002      	beq.n	850e8 <_fclose_r+0x5c>
   850e2:	4628      	mov	r0, r5
   850e4:	f7fe fe22 	bl	83d2c <_free_r>
   850e8:	2300      	movs	r3, #0
   850ea:	6323      	str	r3, [r4, #48]	; 0x30
   850ec:	6c61      	ldr	r1, [r4, #68]	; 0x44
   850ee:	b121      	cbz	r1, 850fa <_fclose_r+0x6e>
   850f0:	4628      	mov	r0, r5
   850f2:	f7fe fe1b 	bl	83d2c <_free_r>
   850f6:	2300      	movs	r3, #0
   850f8:	6463      	str	r3, [r4, #68]	; 0x44
   850fa:	f7fe fd21 	bl	83b40 <__sfp_lock_acquire>
   850fe:	2200      	movs	r2, #0
   85100:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85102:	81a2      	strh	r2, [r4, #12]
   85104:	07db      	lsls	r3, r3, #31
   85106:	d50e      	bpl.n	85126 <_fclose_r+0x9a>
   85108:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8510a:	f7ff f8a7 	bl	8425c <__retarget_lock_close_recursive>
   8510e:	f7fe fd1d 	bl	83b4c <__sfp_lock_release>
   85112:	4630      	mov	r0, r6
   85114:	bd70      	pop	{r4, r5, r6, pc}
   85116:	f7fe fce3 	bl	83ae0 <__sinit>
   8511a:	e7bf      	b.n	8509c <_fclose_r+0x10>
   8511c:	6921      	ldr	r1, [r4, #16]
   8511e:	4628      	mov	r0, r5
   85120:	f7fe fe04 	bl	83d2c <_free_r>
   85124:	e7d7      	b.n	850d6 <_fclose_r+0x4a>
   85126:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85128:	f7ff f89c 	bl	84264 <__retarget_lock_release_recursive>
   8512c:	e7ec      	b.n	85108 <_fclose_r+0x7c>
   8512e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85130:	f7ff f896 	bl	84260 <__retarget_lock_acquire_recursive>
   85134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85138:	2b00      	cmp	r3, #0
   8513a:	d1bb      	bne.n	850b4 <_fclose_r+0x28>
   8513c:	6e66      	ldr	r6, [r4, #100]	; 0x64
   8513e:	f016 0601 	ands.w	r6, r6, #1
   85142:	d1b1      	bne.n	850a8 <_fclose_r+0x1c>
   85144:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85146:	f7ff f88d 	bl	84264 <__retarget_lock_release_recursive>
   8514a:	4630      	mov	r0, r6
   8514c:	bd70      	pop	{r4, r5, r6, pc}
   8514e:	bf00      	nop

00085150 <_fstat_r>:
   85150:	b570      	push	{r4, r5, r6, lr}
   85152:	460d      	mov	r5, r1
   85154:	2300      	movs	r3, #0
   85156:	4c07      	ldr	r4, [pc, #28]	; (85174 <_fstat_r+0x24>)
   85158:	4606      	mov	r6, r0
   8515a:	4611      	mov	r1, r2
   8515c:	4628      	mov	r0, r5
   8515e:	6023      	str	r3, [r4, #0]
   85160:	f7fd f9a5 	bl	824ae <_fstat>
   85164:	1c43      	adds	r3, r0, #1
   85166:	d000      	beq.n	8516a <_fstat_r+0x1a>
   85168:	bd70      	pop	{r4, r5, r6, pc}
   8516a:	6823      	ldr	r3, [r4, #0]
   8516c:	2b00      	cmp	r3, #0
   8516e:	d0fb      	beq.n	85168 <_fstat_r+0x18>
   85170:	6033      	str	r3, [r6, #0]
   85172:	bd70      	pop	{r4, r5, r6, pc}
   85174:	2007ae10 	.word	0x2007ae10

00085178 <_isatty_r>:
   85178:	b538      	push	{r3, r4, r5, lr}
   8517a:	2300      	movs	r3, #0
   8517c:	4c06      	ldr	r4, [pc, #24]	; (85198 <_isatty_r+0x20>)
   8517e:	4605      	mov	r5, r0
   85180:	4608      	mov	r0, r1
   85182:	6023      	str	r3, [r4, #0]
   85184:	f7fd f998 	bl	824b8 <_isatty>
   85188:	1c43      	adds	r3, r0, #1
   8518a:	d000      	beq.n	8518e <_isatty_r+0x16>
   8518c:	bd38      	pop	{r3, r4, r5, pc}
   8518e:	6823      	ldr	r3, [r4, #0]
   85190:	2b00      	cmp	r3, #0
   85192:	d0fb      	beq.n	8518c <_isatty_r+0x14>
   85194:	602b      	str	r3, [r5, #0]
   85196:	bd38      	pop	{r3, r4, r5, pc}
   85198:	2007ae10 	.word	0x2007ae10

0008519c <_lseek_r>:
   8519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8519e:	460e      	mov	r6, r1
   851a0:	2500      	movs	r5, #0
   851a2:	4c08      	ldr	r4, [pc, #32]	; (851c4 <_lseek_r+0x28>)
   851a4:	4611      	mov	r1, r2
   851a6:	4607      	mov	r7, r0
   851a8:	461a      	mov	r2, r3
   851aa:	4630      	mov	r0, r6
   851ac:	6025      	str	r5, [r4, #0]
   851ae:	f7fd f985 	bl	824bc <_lseek>
   851b2:	1c43      	adds	r3, r0, #1
   851b4:	d000      	beq.n	851b8 <_lseek_r+0x1c>
   851b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   851b8:	6823      	ldr	r3, [r4, #0]
   851ba:	2b00      	cmp	r3, #0
   851bc:	d0fb      	beq.n	851b6 <_lseek_r+0x1a>
   851be:	603b      	str	r3, [r7, #0]
   851c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   851c2:	bf00      	nop
   851c4:	2007ae10 	.word	0x2007ae10

000851c8 <_read_r>:
   851c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   851ca:	460e      	mov	r6, r1
   851cc:	2500      	movs	r5, #0
   851ce:	4c08      	ldr	r4, [pc, #32]	; (851f0 <_read_r+0x28>)
   851d0:	4611      	mov	r1, r2
   851d2:	4607      	mov	r7, r0
   851d4:	461a      	mov	r2, r3
   851d6:	4630      	mov	r0, r6
   851d8:	6025      	str	r5, [r4, #0]
   851da:	f7fa ffe3 	bl	801a4 <_read>
   851de:	1c43      	adds	r3, r0, #1
   851e0:	d000      	beq.n	851e4 <_read_r+0x1c>
   851e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   851e4:	6823      	ldr	r3, [r4, #0]
   851e6:	2b00      	cmp	r3, #0
   851e8:	d0fb      	beq.n	851e2 <_read_r+0x1a>
   851ea:	603b      	str	r3, [r7, #0]
   851ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   851ee:	bf00      	nop
   851f0:	2007ae10 	.word	0x2007ae10

000851f4 <__aeabi_uldivmod>:
   851f4:	b953      	cbnz	r3, 8520c <__aeabi_uldivmod+0x18>
   851f6:	b94a      	cbnz	r2, 8520c <__aeabi_uldivmod+0x18>
   851f8:	2900      	cmp	r1, #0
   851fa:	bf08      	it	eq
   851fc:	2800      	cmpeq	r0, #0
   851fe:	bf1c      	itt	ne
   85200:	f04f 31ff 	movne.w	r1, #4294967295
   85204:	f04f 30ff 	movne.w	r0, #4294967295
   85208:	f000 b97a 	b.w	85500 <__aeabi_idiv0>
   8520c:	f1ad 0c08 	sub.w	ip, sp, #8
   85210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85214:	f000 f806 	bl	85224 <__udivmoddi4>
   85218:	f8dd e004 	ldr.w	lr, [sp, #4]
   8521c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85220:	b004      	add	sp, #16
   85222:	4770      	bx	lr

00085224 <__udivmoddi4>:
   85224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85228:	468c      	mov	ip, r1
   8522a:	460e      	mov	r6, r1
   8522c:	4604      	mov	r4, r0
   8522e:	9d08      	ldr	r5, [sp, #32]
   85230:	2b00      	cmp	r3, #0
   85232:	d150      	bne.n	852d6 <__udivmoddi4+0xb2>
   85234:	428a      	cmp	r2, r1
   85236:	4617      	mov	r7, r2
   85238:	d96c      	bls.n	85314 <__udivmoddi4+0xf0>
   8523a:	fab2 fe82 	clz	lr, r2
   8523e:	f1be 0f00 	cmp.w	lr, #0
   85242:	d00b      	beq.n	8525c <__udivmoddi4+0x38>
   85244:	f1ce 0c20 	rsb	ip, lr, #32
   85248:	fa01 f60e 	lsl.w	r6, r1, lr
   8524c:	fa20 fc0c 	lsr.w	ip, r0, ip
   85250:	fa02 f70e 	lsl.w	r7, r2, lr
   85254:	ea4c 0c06 	orr.w	ip, ip, r6
   85258:	fa00 f40e 	lsl.w	r4, r0, lr
   8525c:	0c3a      	lsrs	r2, r7, #16
   8525e:	fbbc f9f2 	udiv	r9, ip, r2
   85262:	b2bb      	uxth	r3, r7
   85264:	fb02 cc19 	mls	ip, r2, r9, ip
   85268:	fb09 fa03 	mul.w	sl, r9, r3
   8526c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85270:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   85274:	45b2      	cmp	sl, r6
   85276:	d90a      	bls.n	8528e <__udivmoddi4+0x6a>
   85278:	19f6      	adds	r6, r6, r7
   8527a:	f109 31ff 	add.w	r1, r9, #4294967295
   8527e:	f080 8125 	bcs.w	854cc <__udivmoddi4+0x2a8>
   85282:	45b2      	cmp	sl, r6
   85284:	f240 8122 	bls.w	854cc <__udivmoddi4+0x2a8>
   85288:	f1a9 0902 	sub.w	r9, r9, #2
   8528c:	443e      	add	r6, r7
   8528e:	eba6 060a 	sub.w	r6, r6, sl
   85292:	fbb6 f0f2 	udiv	r0, r6, r2
   85296:	fb02 6610 	mls	r6, r2, r0, r6
   8529a:	fb00 f303 	mul.w	r3, r0, r3
   8529e:	b2a4      	uxth	r4, r4
   852a0:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   852a4:	42a3      	cmp	r3, r4
   852a6:	d909      	bls.n	852bc <__udivmoddi4+0x98>
   852a8:	19e4      	adds	r4, r4, r7
   852aa:	f100 32ff 	add.w	r2, r0, #4294967295
   852ae:	f080 810b 	bcs.w	854c8 <__udivmoddi4+0x2a4>
   852b2:	42a3      	cmp	r3, r4
   852b4:	f240 8108 	bls.w	854c8 <__udivmoddi4+0x2a4>
   852b8:	3802      	subs	r0, #2
   852ba:	443c      	add	r4, r7
   852bc:	2100      	movs	r1, #0
   852be:	1ae4      	subs	r4, r4, r3
   852c0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   852c4:	2d00      	cmp	r5, #0
   852c6:	d062      	beq.n	8538e <__udivmoddi4+0x16a>
   852c8:	2300      	movs	r3, #0
   852ca:	fa24 f40e 	lsr.w	r4, r4, lr
   852ce:	602c      	str	r4, [r5, #0]
   852d0:	606b      	str	r3, [r5, #4]
   852d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   852d6:	428b      	cmp	r3, r1
   852d8:	d907      	bls.n	852ea <__udivmoddi4+0xc6>
   852da:	2d00      	cmp	r5, #0
   852dc:	d055      	beq.n	8538a <__udivmoddi4+0x166>
   852de:	2100      	movs	r1, #0
   852e0:	e885 0041 	stmia.w	r5, {r0, r6}
   852e4:	4608      	mov	r0, r1
   852e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   852ea:	fab3 f183 	clz	r1, r3
   852ee:	2900      	cmp	r1, #0
   852f0:	f040 808f 	bne.w	85412 <__udivmoddi4+0x1ee>
   852f4:	42b3      	cmp	r3, r6
   852f6:	d302      	bcc.n	852fe <__udivmoddi4+0xda>
   852f8:	4282      	cmp	r2, r0
   852fa:	f200 80fc 	bhi.w	854f6 <__udivmoddi4+0x2d2>
   852fe:	1a84      	subs	r4, r0, r2
   85300:	eb66 0603 	sbc.w	r6, r6, r3
   85304:	2001      	movs	r0, #1
   85306:	46b4      	mov	ip, r6
   85308:	2d00      	cmp	r5, #0
   8530a:	d040      	beq.n	8538e <__udivmoddi4+0x16a>
   8530c:	e885 1010 	stmia.w	r5, {r4, ip}
   85310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85314:	b912      	cbnz	r2, 8531c <__udivmoddi4+0xf8>
   85316:	2701      	movs	r7, #1
   85318:	fbb7 f7f2 	udiv	r7, r7, r2
   8531c:	fab7 fe87 	clz	lr, r7
   85320:	f1be 0f00 	cmp.w	lr, #0
   85324:	d135      	bne.n	85392 <__udivmoddi4+0x16e>
   85326:	2101      	movs	r1, #1
   85328:	1bf6      	subs	r6, r6, r7
   8532a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8532e:	fa1f f887 	uxth.w	r8, r7
   85332:	fbb6 f2fc 	udiv	r2, r6, ip
   85336:	fb0c 6612 	mls	r6, ip, r2, r6
   8533a:	fb08 f002 	mul.w	r0, r8, r2
   8533e:	0c23      	lsrs	r3, r4, #16
   85340:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   85344:	42b0      	cmp	r0, r6
   85346:	d907      	bls.n	85358 <__udivmoddi4+0x134>
   85348:	19f6      	adds	r6, r6, r7
   8534a:	f102 33ff 	add.w	r3, r2, #4294967295
   8534e:	d202      	bcs.n	85356 <__udivmoddi4+0x132>
   85350:	42b0      	cmp	r0, r6
   85352:	f200 80d2 	bhi.w	854fa <__udivmoddi4+0x2d6>
   85356:	461a      	mov	r2, r3
   85358:	1a36      	subs	r6, r6, r0
   8535a:	fbb6 f0fc 	udiv	r0, r6, ip
   8535e:	fb0c 6610 	mls	r6, ip, r0, r6
   85362:	fb08 f800 	mul.w	r8, r8, r0
   85366:	b2a3      	uxth	r3, r4
   85368:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   8536c:	45a0      	cmp	r8, r4
   8536e:	d907      	bls.n	85380 <__udivmoddi4+0x15c>
   85370:	19e4      	adds	r4, r4, r7
   85372:	f100 33ff 	add.w	r3, r0, #4294967295
   85376:	d202      	bcs.n	8537e <__udivmoddi4+0x15a>
   85378:	45a0      	cmp	r8, r4
   8537a:	f200 80b9 	bhi.w	854f0 <__udivmoddi4+0x2cc>
   8537e:	4618      	mov	r0, r3
   85380:	eba4 0408 	sub.w	r4, r4, r8
   85384:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   85388:	e79c      	b.n	852c4 <__udivmoddi4+0xa0>
   8538a:	4629      	mov	r1, r5
   8538c:	4628      	mov	r0, r5
   8538e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85392:	fa07 f70e 	lsl.w	r7, r7, lr
   85396:	f1ce 0320 	rsb	r3, lr, #32
   8539a:	fa26 f203 	lsr.w	r2, r6, r3
   8539e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   853a2:	fbb2 f1fc 	udiv	r1, r2, ip
   853a6:	fa1f f887 	uxth.w	r8, r7
   853aa:	fb0c 2211 	mls	r2, ip, r1, r2
   853ae:	fa06 f60e 	lsl.w	r6, r6, lr
   853b2:	fa20 f303 	lsr.w	r3, r0, r3
   853b6:	fb01 f908 	mul.w	r9, r1, r8
   853ba:	4333      	orrs	r3, r6
   853bc:	0c1e      	lsrs	r6, r3, #16
   853be:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   853c2:	45b1      	cmp	r9, r6
   853c4:	fa00 f40e 	lsl.w	r4, r0, lr
   853c8:	d909      	bls.n	853de <__udivmoddi4+0x1ba>
   853ca:	19f6      	adds	r6, r6, r7
   853cc:	f101 32ff 	add.w	r2, r1, #4294967295
   853d0:	f080 808c 	bcs.w	854ec <__udivmoddi4+0x2c8>
   853d4:	45b1      	cmp	r9, r6
   853d6:	f240 8089 	bls.w	854ec <__udivmoddi4+0x2c8>
   853da:	3902      	subs	r1, #2
   853dc:	443e      	add	r6, r7
   853de:	eba6 0609 	sub.w	r6, r6, r9
   853e2:	fbb6 f0fc 	udiv	r0, r6, ip
   853e6:	fb0c 6210 	mls	r2, ip, r0, r6
   853ea:	fb00 f908 	mul.w	r9, r0, r8
   853ee:	b29e      	uxth	r6, r3
   853f0:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   853f4:	45b1      	cmp	r9, r6
   853f6:	d907      	bls.n	85408 <__udivmoddi4+0x1e4>
   853f8:	19f6      	adds	r6, r6, r7
   853fa:	f100 33ff 	add.w	r3, r0, #4294967295
   853fe:	d271      	bcs.n	854e4 <__udivmoddi4+0x2c0>
   85400:	45b1      	cmp	r9, r6
   85402:	d96f      	bls.n	854e4 <__udivmoddi4+0x2c0>
   85404:	3802      	subs	r0, #2
   85406:	443e      	add	r6, r7
   85408:	eba6 0609 	sub.w	r6, r6, r9
   8540c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   85410:	e78f      	b.n	85332 <__udivmoddi4+0x10e>
   85412:	f1c1 0720 	rsb	r7, r1, #32
   85416:	fa22 f807 	lsr.w	r8, r2, r7
   8541a:	408b      	lsls	r3, r1
   8541c:	ea48 0303 	orr.w	r3, r8, r3
   85420:	fa26 f407 	lsr.w	r4, r6, r7
   85424:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   85428:	fbb4 f9fe 	udiv	r9, r4, lr
   8542c:	fa1f fc83 	uxth.w	ip, r3
   85430:	fb0e 4419 	mls	r4, lr, r9, r4
   85434:	408e      	lsls	r6, r1
   85436:	fa20 f807 	lsr.w	r8, r0, r7
   8543a:	fb09 fa0c 	mul.w	sl, r9, ip
   8543e:	ea48 0806 	orr.w	r8, r8, r6
   85442:	ea4f 4618 	mov.w	r6, r8, lsr #16
   85446:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8544a:	45a2      	cmp	sl, r4
   8544c:	fa02 f201 	lsl.w	r2, r2, r1
   85450:	fa00 f601 	lsl.w	r6, r0, r1
   85454:	d908      	bls.n	85468 <__udivmoddi4+0x244>
   85456:	18e4      	adds	r4, r4, r3
   85458:	f109 30ff 	add.w	r0, r9, #4294967295
   8545c:	d244      	bcs.n	854e8 <__udivmoddi4+0x2c4>
   8545e:	45a2      	cmp	sl, r4
   85460:	d942      	bls.n	854e8 <__udivmoddi4+0x2c4>
   85462:	f1a9 0902 	sub.w	r9, r9, #2
   85466:	441c      	add	r4, r3
   85468:	eba4 040a 	sub.w	r4, r4, sl
   8546c:	fbb4 f0fe 	udiv	r0, r4, lr
   85470:	fb0e 4410 	mls	r4, lr, r0, r4
   85474:	fb00 fc0c 	mul.w	ip, r0, ip
   85478:	fa1f f888 	uxth.w	r8, r8
   8547c:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   85480:	45a4      	cmp	ip, r4
   85482:	d907      	bls.n	85494 <__udivmoddi4+0x270>
   85484:	18e4      	adds	r4, r4, r3
   85486:	f100 3eff 	add.w	lr, r0, #4294967295
   8548a:	d229      	bcs.n	854e0 <__udivmoddi4+0x2bc>
   8548c:	45a4      	cmp	ip, r4
   8548e:	d927      	bls.n	854e0 <__udivmoddi4+0x2bc>
   85490:	3802      	subs	r0, #2
   85492:	441c      	add	r4, r3
   85494:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85498:	fba0 8902 	umull	r8, r9, r0, r2
   8549c:	eba4 0c0c 	sub.w	ip, r4, ip
   854a0:	45cc      	cmp	ip, r9
   854a2:	46c2      	mov	sl, r8
   854a4:	46ce      	mov	lr, r9
   854a6:	d315      	bcc.n	854d4 <__udivmoddi4+0x2b0>
   854a8:	d012      	beq.n	854d0 <__udivmoddi4+0x2ac>
   854aa:	b155      	cbz	r5, 854c2 <__udivmoddi4+0x29e>
   854ac:	ebb6 030a 	subs.w	r3, r6, sl
   854b0:	eb6c 060e 	sbc.w	r6, ip, lr
   854b4:	fa06 f707 	lsl.w	r7, r6, r7
   854b8:	40cb      	lsrs	r3, r1
   854ba:	431f      	orrs	r7, r3
   854bc:	40ce      	lsrs	r6, r1
   854be:	602f      	str	r7, [r5, #0]
   854c0:	606e      	str	r6, [r5, #4]
   854c2:	2100      	movs	r1, #0
   854c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   854c8:	4610      	mov	r0, r2
   854ca:	e6f7      	b.n	852bc <__udivmoddi4+0x98>
   854cc:	4689      	mov	r9, r1
   854ce:	e6de      	b.n	8528e <__udivmoddi4+0x6a>
   854d0:	4546      	cmp	r6, r8
   854d2:	d2ea      	bcs.n	854aa <__udivmoddi4+0x286>
   854d4:	ebb8 0a02 	subs.w	sl, r8, r2
   854d8:	eb69 0e03 	sbc.w	lr, r9, r3
   854dc:	3801      	subs	r0, #1
   854de:	e7e4      	b.n	854aa <__udivmoddi4+0x286>
   854e0:	4670      	mov	r0, lr
   854e2:	e7d7      	b.n	85494 <__udivmoddi4+0x270>
   854e4:	4618      	mov	r0, r3
   854e6:	e78f      	b.n	85408 <__udivmoddi4+0x1e4>
   854e8:	4681      	mov	r9, r0
   854ea:	e7bd      	b.n	85468 <__udivmoddi4+0x244>
   854ec:	4611      	mov	r1, r2
   854ee:	e776      	b.n	853de <__udivmoddi4+0x1ba>
   854f0:	3802      	subs	r0, #2
   854f2:	443c      	add	r4, r7
   854f4:	e744      	b.n	85380 <__udivmoddi4+0x15c>
   854f6:	4608      	mov	r0, r1
   854f8:	e706      	b.n	85308 <__udivmoddi4+0xe4>
   854fa:	3a02      	subs	r2, #2
   854fc:	443e      	add	r6, r7
   854fe:	e72b      	b.n	85358 <__udivmoddi4+0x134>

00085500 <__aeabi_idiv0>:
   85500:	4770      	bx	lr
   85502:	bf00      	nop
   85504:	454c4449 	.word	0x454c4449
   85508:	00000000 	.word	0x00000000
   8550c:	20726d54 	.word	0x20726d54
   85510:	00637653 	.word	0x00637653
   85514:	736e6f43 	.word	0x736e6f43
   85518:	20656c6f 	.word	0x20656c6f
   8551c:	64616572 	.word	0x64616572
   85520:	00000a79 	.word	0x00000a79
   85524:	3d3d3d3d 	.word	0x3d3d3d3d
   85528:	3d3d3d3d 	.word	0x3d3d3d3d
   8552c:	3d3d3d3d 	.word	0x3d3d3d3d
   85530:	00000a3d 	.word	0x00000a3d
   85534:	6f746f6d 	.word	0x6f746f6d
   85538:	61745f72 	.word	0x61745f72
   8553c:	00006b73 	.word	0x00006b73
   85540:	6976616e 	.word	0x6976616e
   85544:	69746167 	.word	0x69746167
   85548:	745f6e6f 	.word	0x745f6e6f
   8554c:	006b7361 	.word	0x006b7361
   85550:	5f6d7261 	.word	0x5f6d7261
   85554:	6b736174 	.word	0x6b736174
   85558:	00000000 	.word	0x00000000

0008555c <_global_impure_ptr>:
   8555c:	20070188 33323130 37363534 42413938     ... 0123456789AB
   8556c:	46454443 00000000 33323130 37363534     CDEF....01234567
   8557c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8558c:	0000296c                                l)..

00085590 <blanks.7217>:
   85590:	20202020 20202020 20202020 20202020                     

000855a0 <zeroes.7218>:
   855a0:	30303030 30303030 30303030 30303030     0000000000000000
   855b0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000855c0 <_ctype_>:
   855c0:	20202000 20202020 28282020 20282828     .         ((((( 
   855d0:	20202020 20202020 20202020 20202020                     
   855e0:	10108820 10101010 10101010 10101010      ...............
   855f0:	04040410 04040404 10040404 10101010     ................
   85600:	41411010 41414141 01010101 01010101     ..AAAAAA........
   85610:	01010101 01010101 01010101 10101010     ................
   85620:	42421010 42424242 02020202 02020202     ..BBBBBB........
   85630:	02020202 02020202 02020202 10101010     ................
   85640:	00000020 00000000 00000000 00000000      ...............
	...

000856c4 <_init>:
   856c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   856c6:	bf00      	nop
   856c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   856ca:	bc08      	pop	{r3}
   856cc:	469e      	mov	lr, r3
   856ce:	4770      	bx	lr

000856d0 <__init_array_start>:
   856d0:	000838d9 	.word	0x000838d9

000856d4 <__frame_dummy_init_array_entry>:
   856d4:	00080119                                ....

000856d8 <_fini>:
   856d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   856da:	bf00      	nop
   856dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   856de:	bc08      	pop	{r3}
   856e0:	469e      	mov	lr, r3
   856e2:	4770      	bx	lr

000856e4 <__fini_array_start>:
   856e4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007017c 	.word	0x2007017c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <pin_table>:
20070138:	5c390908 5758591d 675d5556 00003b68     ..9\.YXWVU]gh;..
20070148:	00000000 0e3a0000 6261600f 07696663     ......:..`abcfi.
20070158:	4342416a 47464544 14134948 50515253     jABCDEFGHI..SRQP
20070168:	4c4d4e4f 18102e35 04061617 32310203     ONML5.........12
20070178:	00013433                                         34

2007017a <g_interrupt_enabled>:
2007017a:	09000001                                         ..

2007017c <SystemCoreClock>:
2007017c:	003d0900                                ..=.

20070180 <_impure_ptr>:
20070180:	20070188 00000000                       ... ....

20070188 <impure_data>:
20070188:	00000000 20070474 200704dc 20070544     ....t.. ... D.. 
	...
20070230:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070240:	0005deec 0000000b 00000000 00000000     ................
	...

200705b0 <__atexit_recursive_mutex>:
200705b0:	2007adec                                ... 

200705b4 <__global_locale>:
200705b4:	00000043 00000000 00000000 00000000     C...............
	...
200705d4:	00000043 00000000 00000000 00000000     C...............
	...
200705f4:	00000043 00000000 00000000 00000000     C...............
	...
20070614:	00000043 00000000 00000000 00000000     C...............
	...
20070634:	00000043 00000000 00000000 00000000     C...............
	...
20070654:	00000043 00000000 00000000 00000000     C...............
	...
20070674:	00000043 00000000 00000000 00000000     C...............
	...
20070694:	00084f61 000848ad 00000000 000855c0     aO...H.......U..
200706a4:	000855bc 00085508 00085508 00085508     .U...U...U...U..
200706b4:	00085508 00085508 00085508 00085508     .U...U...U...U..
200706c4:	00085508 00085508 ffffffff ffffffff     .U...U..........
200706d4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706fc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070720 <__malloc_av_>:
	...
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 
20070ae8:	20070ae0 20070ae0 20070ae8 20070ae8     ... ... ... ... 
20070af8:	20070af0 20070af0 20070af8 20070af8     ... ... ... ... 
20070b08:	20070b00 20070b00 20070b08 20070b08     ... ... ... ... 
20070b18:	20070b10 20070b10 20070b18 20070b18     ... ... ... ... 

20070b28 <__malloc_sbrk_base>:
20070b28:	ffffffff                                ....

20070b2c <__malloc_trim_threshold>:
20070b2c:	00020000                                ....
