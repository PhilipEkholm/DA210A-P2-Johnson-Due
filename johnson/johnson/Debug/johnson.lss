
johnson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d0c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086d0c  00086d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b38  20070000  00086d14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a350  20070b38  00087850  00020b38  2**3
                  ALLOC
  4 .stack        00002000  2007ae88  00091ba0  00020b38  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b38  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b61  2**0
                  CONTENTS, READONLY
  7 .debug_info   000259d2  00000000  00000000  00020bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000059c9  00000000  00000000  0004658c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009108  00000000  00000000  0004bf55  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001038  00000000  00000000  0005505d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000fc0  00000000  00000000  00056095  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001ead2  00000000  00000000  00057055  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001a8de  00000000  00000000  00075b27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b94c  00000000  00000000  00090405  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00003544  00000000  00000000  000fbd54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	88 ce 07 20 c9 29 08 00 c5 29 08 00 c5 29 08 00     ... .)...)...)..
   80010:	c5 29 08 00 c5 29 08 00 c5 29 08 00 00 00 00 00     .)...)...)......
	...
   8002c:	99 04 08 00 c5 29 08 00 00 00 00 00 19 05 08 00     .....)..........
   8003c:	55 05 08 00 c5 29 08 00 c5 29 08 00 c5 29 08 00     U....)...)...)..
   8004c:	c5 29 08 00 c5 29 08 00 c5 29 08 00 c5 29 08 00     .)...)...)...)..
   8005c:	c5 29 08 00 c5 29 08 00 c5 29 08 00 00 00 00 00     .)...)...)......
   8006c:	39 28 08 00 4d 28 08 00 61 28 08 00 75 28 08 00     9(..M(..a(..u(..
	...
   80084:	ad 20 08 00 c5 29 08 00 c5 29 08 00 c5 29 08 00     . ...)...)...)..
   80094:	c5 29 08 00 c5 29 08 00 c5 29 08 00 c5 29 08 00     .)...)...)...)..
   800a4:	00 00 00 00 c5 29 08 00 c5 29 08 00 c5 29 08 00     .....)...)...)..
   800b4:	c5 29 08 00 c5 29 08 00 c5 29 08 00 c5 29 08 00     .)...)...)...)..
   800c4:	c5 29 08 00 c5 29 08 00 c5 29 08 00 c5 29 08 00     .)...)...)...)..
   800d4:	c5 29 08 00 c5 29 08 00 c5 29 08 00 c5 29 08 00     .)...)...)...)..
   800e4:	c5 29 08 00 c5 29 08 00 c5 29 08 00 c5 29 08 00     .)...)...)...)..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b38 	.word	0x20070b38
   80110:	00000000 	.word	0x00000000
   80114:	00086d14 	.word	0x00086d14

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00086d14 	.word	0x00086d14
   80154:	20070b3c 	.word	0x20070b3c
   80158:	00086d14 	.word	0x00086d14
   8015c:	00000000 	.word	0x00000000

00080160 <I2C_master_init>:
* enables TWI pios
*/


	 
void I2C_master_init(){
   80160:	b508      	push	{r3, lr}
	pmc_enable_periph_clk(ID_TWI1); /* power the clock for the TWI with pmc */
   80162:	2017      	movs	r0, #23
   80164:	4b14      	ldr	r3, [pc, #80]	; (801b8 <I2C_master_init+0x58>)
   80166:	4798      	blx	r3

	PIOA->PIO_PDR|= (PIO_PB12)|(PIO_PB13);	/* Enable TWI pios */
   80168:	4a14      	ldr	r2, [pc, #80]	; (801bc <I2C_master_init+0x5c>)
   8016a:	6853      	ldr	r3, [r2, #4]
   8016c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   80170:	6053      	str	r3, [r2, #4]
	TWI1->TWI_CR = (0x1u << 7);				// TWIn software reset
   80172:	4b13      	ldr	r3, [pc, #76]	; (801c0 <I2C_master_init+0x60>)
   80174:	2280      	movs	r2, #128	; 0x80
   80176:	601a      	str	r2, [r3, #0]
	TWI1->TWI_RHR;							// Flush reception buffer
   80178:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	/* Set Master Disable bit and Slave Disable bit */
	TWI1->TWI_CR = TWI_CR_MSDIS;
   8017a:	2208      	movs	r2, #8
   8017c:	601a      	str	r2, [r3, #0]
	TWI1->TWI_CR = TWI_CR_SVDIS;
   8017e:	2220      	movs	r2, #32
   80180:	601a      	str	r2, [r3, #0]
	TWI1->TWI_CR |= (0x1u << 2);			/* Set Master Enable bit */
   80182:	681a      	ldr	r2, [r3, #0]
   80184:	f042 0204 	orr.w	r2, r2, #4
   80188:	601a      	str	r2, [r3, #0]
	TWI1->TWI_MMR |= TWI_MMR_DADR(unoAddress);//device address
   8018a:	685a      	ldr	r2, [r3, #4]
   8018c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80190:	605a      	str	r2, [r3, #4]
	TWI1->TWI_PTCR |= (0x1u << 0)|(0x1u << 8);//Receiver/transmitter Transfer Enable 
   80192:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   80196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   8019a:	f042 0201 	orr.w	r2, r2, #1
   8019e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	TWI0->TWI_IDR = ~0UL;					/* Disable TWI interrupts */
   801a2:	f04f 31ff 	mov.w	r1, #4294967295
   801a6:	4a07      	ldr	r2, [pc, #28]	; (801c4 <I2C_master_init+0x64>)
   801a8:	6291      	str	r1, [r2, #40]	; 0x28
	TWI1->TWI_CWGR |= I2C_SPEED;
   801aa:	691a      	ldr	r2, [r3, #16]
   801ac:	f442 32c3 	orr.w	r2, r2, #99840	; 0x18600
   801b0:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
   801b4:	611a      	str	r2, [r3, #16]
   801b6:	bd08      	pop	{r3, pc}
   801b8:	00082971 	.word	0x00082971
   801bc:	400e0e00 	.word	0x400e0e00
   801c0:	40090000 	.word	0x40090000
   801c4:	4008c000 	.word	0x4008c000

000801c8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   801c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   801cc:	b980      	cbnz	r0, 801f0 <_read+0x28>
   801ce:	460c      	mov	r4, r1
   801d0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   801d2:	2a00      	cmp	r2, #0
   801d4:	dd0f      	ble.n	801f6 <_read+0x2e>
   801d6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   801d8:	4e08      	ldr	r6, [pc, #32]	; (801fc <_read+0x34>)
   801da:	4d09      	ldr	r5, [pc, #36]	; (80200 <_read+0x38>)
   801dc:	6830      	ldr	r0, [r6, #0]
   801de:	4621      	mov	r1, r4
   801e0:	682b      	ldr	r3, [r5, #0]
   801e2:	4798      	blx	r3
		ptr++;
   801e4:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   801e6:	42bc      	cmp	r4, r7
   801e8:	d1f8      	bne.n	801dc <_read+0x14>
		nChars++;
	}
	return nChars;
}
   801ea:	4640      	mov	r0, r8
   801ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   801f0:	f04f 38ff 	mov.w	r8, #4294967295
   801f4:	e7f9      	b.n	801ea <_read+0x22>
	for (; len > 0; --len) {
   801f6:	4680      	mov	r8, r0
   801f8:	e7f7      	b.n	801ea <_read+0x22>
   801fa:	bf00      	nop
   801fc:	2007ae5c 	.word	0x2007ae5c
   80200:	2007ae04 	.word	0x2007ae04

00080204 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80204:	b4f0      	push	{r4, r5, r6, r7}
   80206:	b08c      	sub	sp, #48	; 0x30
   80208:	4607      	mov	r7, r0
   8020a:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   8020c:	ac01      	add	r4, sp, #4
   8020e:	4d11      	ldr	r5, [pc, #68]	; (80254 <pwm_clocks_generate+0x50>)
   80210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80218:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   8021c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   80220:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   80222:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80224:	f852 0b04 	ldr.w	r0, [r2], #4
   80228:	fbb6 f0f0 	udiv	r0, r6, r0
   8022c:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   80230:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   80234:	d907      	bls.n	80246 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
   80236:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80238:	2b0b      	cmp	r3, #11
   8023a:	d1f3      	bne.n	80224 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   8023c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   80240:	b00c      	add	sp, #48	; 0x30
   80242:	bcf0      	pop	{r4, r5, r6, r7}
   80244:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80246:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
   80248:	bf94      	ite	ls
   8024a:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
   8024e:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
   80252:	e7f5      	b.n	80240 <pwm_clocks_generate+0x3c>
   80254:	00086a7c 	.word	0x00086a7c

00080258 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80258:	b570      	push	{r4, r5, r6, lr}
   8025a:	4606      	mov	r6, r0
   8025c:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8025e:	680c      	ldr	r4, [r1, #0]
   80260:	b144      	cbz	r4, 80274 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   80262:	6889      	ldr	r1, [r1, #8]
   80264:	4620      	mov	r0, r4
   80266:	4b0c      	ldr	r3, [pc, #48]	; (80298 <pwm_init+0x40>)
   80268:	4798      	blx	r3
   8026a:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
   8026c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80270:	4298      	cmp	r0, r3
   80272:	d00c      	beq.n	8028e <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   80274:	6868      	ldr	r0, [r5, #4]
   80276:	b140      	cbz	r0, 8028a <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   80278:	68a9      	ldr	r1, [r5, #8]
   8027a:	4b07      	ldr	r3, [pc, #28]	; (80298 <pwm_init+0x40>)
   8027c:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   8027e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   80282:	4298      	cmp	r0, r3
   80284:	d005      	beq.n	80292 <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   80286:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   8028a:	6034      	str	r4, [r6, #0]
#endif
	return 0;
   8028c:	2400      	movs	r4, #0
}
   8028e:	4620      	mov	r0, r4
   80290:	bd70      	pop	{r4, r5, r6, pc}
			return result;
   80292:	4604      	mov	r4, r0
   80294:	e7fb      	b.n	8028e <pwm_init+0x36>
   80296:	bf00      	nop
   80298:	00080205 	.word	0x00080205

0008029c <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   8029c:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   8029e:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   802a0:	684b      	ldr	r3, [r1, #4]
   802a2:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   802a6:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   802a8:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
   802aa:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   802ac:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
   802ae:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   802b0:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   802b4:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   802b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   802ba:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   802bc:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   802c0:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   802c2:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   802c6:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   802ca:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   802ce:	68cb      	ldr	r3, [r1, #12]
   802d0:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   802d4:	690b      	ldr	r3, [r1, #16]
   802d6:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   802da:	7d8b      	ldrb	r3, [r1, #22]
   802dc:	b13b      	cbz	r3, 802ee <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   802de:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   802e0:	8b4b      	ldrh	r3, [r1, #26]
   802e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   802e6:	eb00 1442 	add.w	r4, r0, r2, lsl #5
   802ea:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   802ee:	6c85      	ldr	r5, [r0, #72]	; 0x48
   802f0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   802f4:	4093      	lsls	r3, r2
   802f6:	43db      	mvns	r3, r3
   802f8:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   802fa:	7fcc      	ldrb	r4, [r1, #31]
   802fc:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   80300:	7f8c      	ldrb	r4, [r1, #30]
   80302:	4094      	lsls	r4, r2
   80304:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80308:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   8030a:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   8030c:	6c44      	ldr	r4, [r0, #68]	; 0x44
   8030e:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   80310:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   80314:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80318:	f891 4020 	ldrb.w	r4, [r1, #32]
   8031c:	4094      	lsls	r4, r2
   8031e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   80322:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80324:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80326:	2301      	movs	r3, #1
   80328:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
   8032a:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8032e:	b334      	cbz	r4, 8037e <pwm_channel_init+0xe2>
		p_pwm->PWM_SCM |= channel;
   80330:	6a04      	ldr	r4, [r0, #32]
   80332:	431c      	orrs	r4, r3
   80334:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80336:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   8033a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   8033c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8033e:	bf0c      	ite	eq
   80340:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   80342:	439c      	bicne	r4, r3
   80344:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80346:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   8034a:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   8034c:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8034e:	bf0c      	ite	eq
   80350:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80354:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
   80358:	6683      	str	r3, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   8035a:	2a03      	cmp	r2, #3
   8035c:	d914      	bls.n	80388 <pwm_channel_init+0xec>
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
   8035e:	3a04      	subs	r2, #4
		ch_num *= 8;
   80360:	00d2      	lsls	r2, r2, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
   80362:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
   80364:	23ff      	movs	r3, #255	; 0xff
   80366:	4093      	lsls	r3, r2
   80368:	ea24 0403 	bic.w	r4, r4, r3
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   8036c:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   80370:	fa03 f202 	lsl.w	r2, r3, r2
   80374:	4322      	orrs	r2, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   80376:	6702      	str	r2, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   80378:	2000      	movs	r0, #0
   8037a:	bc70      	pop	{r4, r5, r6}
   8037c:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   8037e:	6a04      	ldr	r4, [r0, #32]
   80380:	ea24 0403 	bic.w	r4, r4, r3
   80384:	6204      	str	r4, [r0, #32]
   80386:	e7d6      	b.n	80336 <pwm_channel_init+0x9a>
		ch_num *= 8;
   80388:	00d5      	lsls	r5, r2, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
   8038a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
		fault_enable_reg &= ~(0xFF << ch_num);
   8038c:	24ff      	movs	r4, #255	; 0xff
   8038e:	40ac      	lsls	r4, r5
   80390:	ea23 0304 	bic.w	r3, r3, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80394:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   80398:	40aa      	lsls	r2, r5
   8039a:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   8039c:	66c2      	str	r2, [r0, #108]	; 0x6c
   8039e:	e7eb      	b.n	80378 <pwm_channel_init+0xdc>

000803a0 <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   803a0:	690b      	ldr	r3, [r1, #16]
   803a2:	4293      	cmp	r3, r2
   803a4:	d202      	bcs.n	803ac <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
   803a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   803aa:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
   803ac:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
   803ae:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   803b0:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   803b4:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
   803b8:	2000      	movs	r0, #0
   803ba:	4770      	bx	lr

000803bc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   803bc:	2301      	movs	r3, #1
   803be:	fa03 f101 	lsl.w	r1, r3, r1
   803c2:	6041      	str	r1, [r0, #4]
   803c4:	4770      	bx	lr

000803c6 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   803c6:	2301      	movs	r3, #1
   803c8:	fa03 f101 	lsl.w	r1, r3, r1
   803cc:	6081      	str	r1, [r0, #8]
   803ce:	4770      	bx	lr

000803d0 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   803d0:	f100 0308 	add.w	r3, r0, #8
   803d4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   803d6:	f04f 32ff 	mov.w	r2, #4294967295
   803da:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   803dc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   803de:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   803e0:	2300      	movs	r3, #0
   803e2:	6003      	str	r3, [r0, #0]
   803e4:	4770      	bx	lr

000803e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   803e6:	2300      	movs	r3, #0
   803e8:	6103      	str	r3, [r0, #16]
   803ea:	4770      	bx	lr

000803ec <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   803ec:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   803ee:	685a      	ldr	r2, [r3, #4]
   803f0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   803f2:	6842      	ldr	r2, [r0, #4]
   803f4:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   803f6:	685a      	ldr	r2, [r3, #4]
   803f8:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   803fa:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   803fc:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   803fe:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80400:	6803      	ldr	r3, [r0, #0]
   80402:	3301      	adds	r3, #1
   80404:	6003      	str	r3, [r0, #0]
   80406:	4770      	bx	lr

00080408 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80408:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8040a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   8040c:	f1b4 3fff 	cmp.w	r4, #4294967295
   80410:	d015      	beq.n	8043e <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80412:	f100 0308 	add.w	r3, r0, #8
   80416:	68c2      	ldr	r2, [r0, #12]
   80418:	6812      	ldr	r2, [r2, #0]
   8041a:	4294      	cmp	r4, r2
   8041c:	d304      	bcc.n	80428 <vListInsert+0x20>
   8041e:	685b      	ldr	r3, [r3, #4]
   80420:	685a      	ldr	r2, [r3, #4]
   80422:	6812      	ldr	r2, [r2, #0]
   80424:	4294      	cmp	r4, r2
   80426:	d2fa      	bcs.n	8041e <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80428:	685a      	ldr	r2, [r3, #4]
   8042a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8042c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8042e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80430:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80432:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80434:	6803      	ldr	r3, [r0, #0]
   80436:	3301      	adds	r3, #1
   80438:	6003      	str	r3, [r0, #0]
}
   8043a:	bc10      	pop	{r4}
   8043c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   8043e:	6903      	ldr	r3, [r0, #16]
   80440:	e7f2      	b.n	80428 <vListInsert+0x20>

00080442 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80442:	6843      	ldr	r3, [r0, #4]
   80444:	6882      	ldr	r2, [r0, #8]
   80446:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80448:	6883      	ldr	r3, [r0, #8]
   8044a:	6842      	ldr	r2, [r0, #4]
   8044c:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8044e:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80450:	685a      	ldr	r2, [r3, #4]
   80452:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80454:	bf04      	itt	eq
   80456:	6882      	ldreq	r2, [r0, #8]
   80458:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8045a:	2200      	movs	r2, #0
   8045c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8045e:	681a      	ldr	r2, [r3, #0]
   80460:	3a01      	subs	r2, #1
   80462:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80464:	6818      	ldr	r0, [r3, #0]
}
   80466:	4770      	bx	lr

00080468 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80468:	4803      	ldr	r0, [pc, #12]	; (80478 <prvPortStartFirstTask+0x10>)
   8046a:	6800      	ldr	r0, [r0, #0]
   8046c:	6800      	ldr	r0, [r0, #0]
   8046e:	f380 8808 	msr	MSP, r0
   80472:	b662      	cpsie	i
   80474:	df00      	svc	0
   80476:	bf00      	nop
   80478:	e000ed08 	.word	0xe000ed08

0008047c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8047c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80480:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80484:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;	/* LR */
   80488:	2300      	movs	r3, #0
   8048a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8048e:	f840 2c20 	str.w	r2, [r0, #-32]
}
   80492:	3840      	subs	r0, #64	; 0x40
   80494:	4770      	bx	lr
	...

00080498 <SVC_Handler>:
	__asm volatile (
   80498:	4b06      	ldr	r3, [pc, #24]	; (804b4 <pxCurrentTCBConst2>)
   8049a:	6819      	ldr	r1, [r3, #0]
   8049c:	6808      	ldr	r0, [r1, #0]
   8049e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   804a2:	f380 8809 	msr	PSP, r0
   804a6:	f04f 0000 	mov.w	r0, #0
   804aa:	f380 8811 	msr	BASEPRI, r0
   804ae:	f04e 0e0d 	orr.w	lr, lr, #13
   804b2:	4770      	bx	lr

000804b4 <pxCurrentTCBConst2>:
   804b4:	2007ab60 	.word	0x2007ab60

000804b8 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   804b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   804bc:	4b01      	ldr	r3, [pc, #4]	; (804c4 <vPortYieldFromISR+0xc>)
   804be:	601a      	str	r2, [r3, #0]
   804c0:	4770      	bx	lr
   804c2:	bf00      	nop
   804c4:	e000ed04 	.word	0xe000ed04

000804c8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   804c8:	f3ef 8011 	mrs	r0, BASEPRI
   804cc:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   804d0:	f381 8811 	msr	BASEPRI, r1
   804d4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   804d6:	2000      	movs	r0, #0

000804d8 <vPortEnterCritical>:
{
   804d8:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   804da:	4b03      	ldr	r3, [pc, #12]	; (804e8 <vPortEnterCritical+0x10>)
   804dc:	4798      	blx	r3
	uxCriticalNesting++;
   804de:	4a03      	ldr	r2, [pc, #12]	; (804ec <vPortEnterCritical+0x14>)
   804e0:	6813      	ldr	r3, [r2, #0]
   804e2:	3301      	adds	r3, #1
   804e4:	6013      	str	r3, [r2, #0]
   804e6:	bd08      	pop	{r3, pc}
   804e8:	000804c9 	.word	0x000804c9
   804ec:	2007012c 	.word	0x2007012c

000804f0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   804f0:	f380 8811 	msr	BASEPRI, r0
   804f4:	4770      	bx	lr
	...

000804f8 <vPortExitCritical>:
{
   804f8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   804fa:	4a05      	ldr	r2, [pc, #20]	; (80510 <vPortExitCritical+0x18>)
   804fc:	6813      	ldr	r3, [r2, #0]
   804fe:	3b01      	subs	r3, #1
   80500:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80502:	b103      	cbz	r3, 80506 <vPortExitCritical+0xe>
   80504:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
   80506:	2000      	movs	r0, #0
   80508:	4b02      	ldr	r3, [pc, #8]	; (80514 <vPortExitCritical+0x1c>)
   8050a:	4798      	blx	r3
}
   8050c:	e7fa      	b.n	80504 <vPortExitCritical+0xc>
   8050e:	bf00      	nop
   80510:	2007012c 	.word	0x2007012c
   80514:	000804f1 	.word	0x000804f1

00080518 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80518:	f3ef 8009 	mrs	r0, PSP
   8051c:	4b0c      	ldr	r3, [pc, #48]	; (80550 <pxCurrentTCBConst>)
   8051e:	681a      	ldr	r2, [r3, #0]
   80520:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80524:	6010      	str	r0, [r2, #0]
   80526:	e92d 4008 	stmdb	sp!, {r3, lr}
   8052a:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8052e:	f380 8811 	msr	BASEPRI, r0
   80532:	f000 fec7 	bl	812c4 <vTaskSwitchContext>
   80536:	f04f 0000 	mov.w	r0, #0
   8053a:	f380 8811 	msr	BASEPRI, r0
   8053e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80542:	6819      	ldr	r1, [r3, #0]
   80544:	6808      	ldr	r0, [r1, #0]
   80546:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8054a:	f380 8809 	msr	PSP, r0
   8054e:	4770      	bx	lr

00080550 <pxCurrentTCBConst>:
   80550:	2007ab60 	.word	0x2007ab60

00080554 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80554:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8055a:	4b05      	ldr	r3, [pc, #20]	; (80570 <SysTick_Handler+0x1c>)
   8055c:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8055e:	4b05      	ldr	r3, [pc, #20]	; (80574 <SysTick_Handler+0x20>)
   80560:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80562:	4b05      	ldr	r3, [pc, #20]	; (80578 <SysTick_Handler+0x24>)
   80564:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80566:	2000      	movs	r0, #0
   80568:	4b04      	ldr	r3, [pc, #16]	; (8057c <SysTick_Handler+0x28>)
   8056a:	4798      	blx	r3
   8056c:	bd08      	pop	{r3, pc}
   8056e:	bf00      	nop
   80570:	e000ed04 	.word	0xe000ed04
   80574:	000804c9 	.word	0x000804c9
   80578:	00080f89 	.word	0x00080f89
   8057c:	000804f1 	.word	0x000804f1

00080580 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80580:	4a03      	ldr	r2, [pc, #12]	; (80590 <vPortSetupTimerInterrupt+0x10>)
   80582:	4b04      	ldr	r3, [pc, #16]	; (80594 <vPortSetupTimerInterrupt+0x14>)
   80584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80586:	2207      	movs	r2, #7
   80588:	3b04      	subs	r3, #4
   8058a:	601a      	str	r2, [r3, #0]
   8058c:	4770      	bx	lr
   8058e:	bf00      	nop
   80590:	0001481f 	.word	0x0001481f
   80594:	e000e014 	.word	0xe000e014

00080598 <xPortStartScheduler>:
{
   80598:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8059a:	4b09      	ldr	r3, [pc, #36]	; (805c0 <xPortStartScheduler+0x28>)
   8059c:	681a      	ldr	r2, [r3, #0]
   8059e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   805a2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   805a4:	681a      	ldr	r2, [r3, #0]
   805a6:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   805aa:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   805ac:	4b05      	ldr	r3, [pc, #20]	; (805c4 <xPortStartScheduler+0x2c>)
   805ae:	4798      	blx	r3
	uxCriticalNesting = 0;
   805b0:	2400      	movs	r4, #0
   805b2:	4b05      	ldr	r3, [pc, #20]	; (805c8 <xPortStartScheduler+0x30>)
   805b4:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   805b6:	4b05      	ldr	r3, [pc, #20]	; (805cc <xPortStartScheduler+0x34>)
   805b8:	4798      	blx	r3
}
   805ba:	4620      	mov	r0, r4
   805bc:	bd10      	pop	{r4, pc}
   805be:	bf00      	nop
   805c0:	e000ed20 	.word	0xe000ed20
   805c4:	00080581 	.word	0x00080581
   805c8:	2007012c 	.word	0x2007012c
   805cc:	00080469 	.word	0x00080469

000805d0 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   805d0:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   805d2:	4a13      	ldr	r2, [pc, #76]	; (80620 <prvInsertBlockIntoFreeList+0x50>)
   805d4:	e000      	b.n	805d8 <prvInsertBlockIntoFreeList+0x8>
   805d6:	461a      	mov	r2, r3
   805d8:	6813      	ldr	r3, [r2, #0]
   805da:	4283      	cmp	r3, r0
   805dc:	d3fb      	bcc.n	805d6 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   805de:	6851      	ldr	r1, [r2, #4]
   805e0:	1854      	adds	r4, r2, r1
   805e2:	42a0      	cmp	r0, r4
   805e4:	d009      	beq.n	805fa <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   805e6:	6841      	ldr	r1, [r0, #4]
   805e8:	1844      	adds	r4, r0, r1
   805ea:	42a3      	cmp	r3, r4
   805ec:	d00a      	beq.n	80604 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   805ee:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   805f0:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   805f2:	bf18      	it	ne
   805f4:	6010      	strne	r0, [r2, #0]
	}
}
   805f6:	bc10      	pop	{r4}
   805f8:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   805fa:	6840      	ldr	r0, [r0, #4]
   805fc:	4401      	add	r1, r0
   805fe:	6051      	str	r1, [r2, #4]
   80600:	4610      	mov	r0, r2
   80602:	e7f0      	b.n	805e6 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80604:	4c07      	ldr	r4, [pc, #28]	; (80624 <prvInsertBlockIntoFreeList+0x54>)
   80606:	6824      	ldr	r4, [r4, #0]
   80608:	42a3      	cmp	r3, r4
   8060a:	d006      	beq.n	8061a <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   8060c:	685b      	ldr	r3, [r3, #4]
   8060e:	4419      	add	r1, r3
   80610:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80612:	6813      	ldr	r3, [r2, #0]
   80614:	681b      	ldr	r3, [r3, #0]
   80616:	6003      	str	r3, [r0, #0]
   80618:	e7ea      	b.n	805f0 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8061a:	6003      	str	r3, [r0, #0]
   8061c:	e7e8      	b.n	805f0 <prvInsertBlockIntoFreeList+0x20>
   8061e:	bf00      	nop
   80620:	2007ab58 	.word	0x2007ab58
   80624:	20070b54 	.word	0x20070b54

00080628 <pvPortMalloc>:
{
   80628:	b538      	push	{r3, r4, r5, lr}
   8062a:	4604      	mov	r4, r0
	vTaskSuspendAll();
   8062c:	4b2a      	ldr	r3, [pc, #168]	; (806d8 <pvPortMalloc+0xb0>)
   8062e:	4798      	blx	r3
		if( pxEnd == NULL )
   80630:	4b2a      	ldr	r3, [pc, #168]	; (806dc <pvPortMalloc+0xb4>)
   80632:	681b      	ldr	r3, [r3, #0]
   80634:	b18b      	cbz	r3, 8065a <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
   80636:	2c00      	cmp	r4, #0
   80638:	d047      	beq.n	806ca <pvPortMalloc+0xa2>
			xWantedSize += heapSTRUCT_SIZE;
   8063a:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8063e:	f012 0f07 	tst.w	r2, #7
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80642:	bf1c      	itt	ne
   80644:	f022 0207 	bicne.w	r2, r2, #7
   80648:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   8064a:	1e51      	subs	r1, r2, #1
   8064c:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80650:	4299      	cmp	r1, r3
   80652:	d83c      	bhi.n	806ce <pvPortMalloc+0xa6>
			pxBlock = xStart.pxNextFreeBlock;
   80654:	4922      	ldr	r1, [pc, #136]	; (806e0 <pvPortMalloc+0xb8>)
   80656:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80658:	e016      	b.n	80688 <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8065a:	4a21      	ldr	r2, [pc, #132]	; (806e0 <pvPortMalloc+0xb8>)
   8065c:	4b21      	ldr	r3, [pc, #132]	; (806e4 <pvPortMalloc+0xbc>)
   8065e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80660:	2100      	movs	r1, #0
   80662:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
   80664:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80668:	1898      	adds	r0, r3, r2
   8066a:	4d1c      	ldr	r5, [pc, #112]	; (806dc <pvPortMalloc+0xb4>)
   8066c:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
   8066e:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80672:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80674:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80676:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80678:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8067a:	4a1b      	ldr	r2, [pc, #108]	; (806e8 <pvPortMalloc+0xc0>)
   8067c:	6813      	ldr	r3, [r2, #0]
   8067e:	3b10      	subs	r3, #16
   80680:	6013      	str	r3, [r2, #0]
   80682:	e7d8      	b.n	80636 <pvPortMalloc+0xe>
   80684:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
   80686:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80688:	6863      	ldr	r3, [r4, #4]
   8068a:	429a      	cmp	r2, r3
   8068c:	d902      	bls.n	80694 <pvPortMalloc+0x6c>
   8068e:	6823      	ldr	r3, [r4, #0]
   80690:	2b00      	cmp	r3, #0
   80692:	d1f7      	bne.n	80684 <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
   80694:	4b11      	ldr	r3, [pc, #68]	; (806dc <pvPortMalloc+0xb4>)
   80696:	681b      	ldr	r3, [r3, #0]
   80698:	429c      	cmp	r4, r3
   8069a:	d01a      	beq.n	806d2 <pvPortMalloc+0xaa>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8069c:	680d      	ldr	r5, [r1, #0]
   8069e:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   806a0:	6823      	ldr	r3, [r4, #0]
   806a2:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   806a4:	6863      	ldr	r3, [r4, #4]
   806a6:	1a9b      	subs	r3, r3, r2
   806a8:	2b20      	cmp	r3, #32
   806aa:	d808      	bhi.n	806be <pvPortMalloc+0x96>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   806ac:	4a0e      	ldr	r2, [pc, #56]	; (806e8 <pvPortMalloc+0xc0>)
   806ae:	6813      	ldr	r3, [r2, #0]
   806b0:	6861      	ldr	r1, [r4, #4]
   806b2:	1a5b      	subs	r3, r3, r1
   806b4:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
   806b6:	4b0d      	ldr	r3, [pc, #52]	; (806ec <pvPortMalloc+0xc4>)
   806b8:	4798      	blx	r3
}
   806ba:	4628      	mov	r0, r5
   806bc:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   806be:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   806c0:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   806c2:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   806c4:	4b0a      	ldr	r3, [pc, #40]	; (806f0 <pvPortMalloc+0xc8>)
   806c6:	4798      	blx	r3
   806c8:	e7f0      	b.n	806ac <pvPortMalloc+0x84>
void *pvReturn = NULL;
   806ca:	2500      	movs	r5, #0
   806cc:	e7f3      	b.n	806b6 <pvPortMalloc+0x8e>
   806ce:	2500      	movs	r5, #0
   806d0:	e7f1      	b.n	806b6 <pvPortMalloc+0x8e>
   806d2:	2500      	movs	r5, #0
   806d4:	e7ef      	b.n	806b6 <pvPortMalloc+0x8e>
   806d6:	bf00      	nop
   806d8:	00080f59 	.word	0x00080f59
   806dc:	20070b54 	.word	0x20070b54
   806e0:	2007ab58 	.word	0x2007ab58
   806e4:	20070b58 	.word	0x20070b58
   806e8:	20070130 	.word	0x20070130
   806ec:	000810b1 	.word	0x000810b1
   806f0:	000805d1 	.word	0x000805d1

000806f4 <vPortFree>:
	if( pv != NULL )
   806f4:	b180      	cbz	r0, 80718 <vPortFree+0x24>
{
   806f6:	b510      	push	{r4, lr}
   806f8:	4604      	mov	r4, r0
		vTaskSuspendAll();
   806fa:	4b08      	ldr	r3, [pc, #32]	; (8071c <vPortFree+0x28>)
   806fc:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
   806fe:	4a08      	ldr	r2, [pc, #32]	; (80720 <vPortFree+0x2c>)
   80700:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80704:	6811      	ldr	r1, [r2, #0]
   80706:	440b      	add	r3, r1
   80708:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8070a:	f1a4 0010 	sub.w	r0, r4, #16
   8070e:	4b05      	ldr	r3, [pc, #20]	; (80724 <vPortFree+0x30>)
   80710:	4798      	blx	r3
		xTaskResumeAll();
   80712:	4b05      	ldr	r3, [pc, #20]	; (80728 <vPortFree+0x34>)
   80714:	4798      	blx	r3
   80716:	bd10      	pop	{r4, pc}
   80718:	4770      	bx	lr
   8071a:	bf00      	nop
   8071c:	00080f59 	.word	0x00080f59
   80720:	20070130 	.word	0x20070130
   80724:	000805d1 	.word	0x000805d1
   80728:	000810b1 	.word	0x000810b1

0008072c <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   8072c:	b510      	push	{r4, lr}
   8072e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80730:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80732:	b95b      	cbnz	r3, 8074c <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80734:	6803      	ldr	r3, [r0, #0]
   80736:	b11b      	cbz	r3, 80740 <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80738:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8073a:	3301      	adds	r3, #1
   8073c:	63a3      	str	r3, [r4, #56]	; 0x38
   8073e:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80740:	6840      	ldr	r0, [r0, #4]
   80742:	4b12      	ldr	r3, [pc, #72]	; (8078c <prvCopyDataToQueue+0x60>)
   80744:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80746:	2300      	movs	r3, #0
   80748:	6063      	str	r3, [r4, #4]
   8074a:	e7f5      	b.n	80738 <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   8074c:	b96a      	cbnz	r2, 8076a <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8074e:	461a      	mov	r2, r3
   80750:	6880      	ldr	r0, [r0, #8]
   80752:	4b0f      	ldr	r3, [pc, #60]	; (80790 <prvCopyDataToQueue+0x64>)
   80754:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80756:	68a3      	ldr	r3, [r4, #8]
   80758:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8075a:	4413      	add	r3, r2
   8075c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   8075e:	6862      	ldr	r2, [r4, #4]
   80760:	4293      	cmp	r3, r2
   80762:	d3e9      	bcc.n	80738 <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80764:	6823      	ldr	r3, [r4, #0]
   80766:	60a3      	str	r3, [r4, #8]
   80768:	e7e6      	b.n	80738 <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8076a:	461a      	mov	r2, r3
   8076c:	68c0      	ldr	r0, [r0, #12]
   8076e:	4b08      	ldr	r3, [pc, #32]	; (80790 <prvCopyDataToQueue+0x64>)
   80770:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80772:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80774:	4252      	negs	r2, r2
   80776:	68e3      	ldr	r3, [r4, #12]
   80778:	4413      	add	r3, r2
   8077a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   8077c:	6821      	ldr	r1, [r4, #0]
   8077e:	428b      	cmp	r3, r1
   80780:	d2da      	bcs.n	80738 <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80782:	6863      	ldr	r3, [r4, #4]
   80784:	441a      	add	r2, r3
   80786:	60e2      	str	r2, [r4, #12]
   80788:	e7d6      	b.n	80738 <prvCopyDataToQueue+0xc>
   8078a:	bf00      	nop
   8078c:	000815f1 	.word	0x000815f1
   80790:	00083c11 	.word	0x00083c11

00080794 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80794:	b538      	push	{r3, r4, r5, lr}
   80796:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80798:	6800      	ldr	r0, [r0, #0]
   8079a:	b158      	cbz	r0, 807b4 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   8079c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8079e:	68dc      	ldr	r4, [r3, #12]
   807a0:	4414      	add	r4, r2
   807a2:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   807a4:	685d      	ldr	r5, [r3, #4]
   807a6:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   807a8:	bf28      	it	cs
   807aa:	60d8      	strcs	r0, [r3, #12]
   807ac:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   807ae:	68d9      	ldr	r1, [r3, #12]
   807b0:	4b01      	ldr	r3, [pc, #4]	; (807b8 <prvCopyDataFromQueue+0x24>)
   807b2:	4798      	blx	r3
   807b4:	bd38      	pop	{r3, r4, r5, pc}
   807b6:	bf00      	nop
   807b8:	00083c11 	.word	0x00083c11

000807bc <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   807bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   807be:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   807c0:	4b1f      	ldr	r3, [pc, #124]	; (80840 <prvUnlockQueue+0x84>)
   807c2:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   807c4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   807c6:	2b00      	cmp	r3, #0
   807c8:	dd14      	ble.n	807f4 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   807ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   807cc:	b193      	cbz	r3, 807f4 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   807ce:	f104 0624 	add.w	r6, r4, #36	; 0x24
   807d2:	4d1c      	ldr	r5, [pc, #112]	; (80844 <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   807d4:	4f1c      	ldr	r7, [pc, #112]	; (80848 <prvUnlockQueue+0x8c>)
   807d6:	e007      	b.n	807e8 <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
   807d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   807da:	3b01      	subs	r3, #1
   807dc:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   807de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   807e0:	2b00      	cmp	r3, #0
   807e2:	dd07      	ble.n	807f4 <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   807e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   807e6:	b12b      	cbz	r3, 807f4 <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   807e8:	4630      	mov	r0, r6
   807ea:	47a8      	blx	r5
   807ec:	2800      	cmp	r0, #0
   807ee:	d0f3      	beq.n	807d8 <prvUnlockQueue+0x1c>
					vTaskMissedYield();
   807f0:	47b8      	blx	r7
   807f2:	e7f1      	b.n	807d8 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   807f4:	f04f 33ff 	mov.w	r3, #4294967295
   807f8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   807fa:	4b14      	ldr	r3, [pc, #80]	; (8084c <prvUnlockQueue+0x90>)
   807fc:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   807fe:	4b10      	ldr	r3, [pc, #64]	; (80840 <prvUnlockQueue+0x84>)
   80800:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80802:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80804:	2b00      	cmp	r3, #0
   80806:	dd14      	ble.n	80832 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80808:	6923      	ldr	r3, [r4, #16]
   8080a:	b193      	cbz	r3, 80832 <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8080c:	f104 0610 	add.w	r6, r4, #16
   80810:	4d0c      	ldr	r5, [pc, #48]	; (80844 <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
   80812:	4f0d      	ldr	r7, [pc, #52]	; (80848 <prvUnlockQueue+0x8c>)
   80814:	e007      	b.n	80826 <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
   80816:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80818:	3b01      	subs	r3, #1
   8081a:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8081c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8081e:	2b00      	cmp	r3, #0
   80820:	dd07      	ble.n	80832 <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80822:	6923      	ldr	r3, [r4, #16]
   80824:	b12b      	cbz	r3, 80832 <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80826:	4630      	mov	r0, r6
   80828:	47a8      	blx	r5
   8082a:	2800      	cmp	r0, #0
   8082c:	d0f3      	beq.n	80816 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
   8082e:	47b8      	blx	r7
   80830:	e7f1      	b.n	80816 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80832:	f04f 33ff 	mov.w	r3, #4294967295
   80836:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80838:	4b04      	ldr	r3, [pc, #16]	; (8084c <prvUnlockQueue+0x90>)
   8083a:	4798      	blx	r3
   8083c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8083e:	bf00      	nop
   80840:	000804d9 	.word	0x000804d9
   80844:	00081409 	.word	0x00081409
   80848:	00081539 	.word	0x00081539
   8084c:	000804f9 	.word	0x000804f9

00080850 <xQueueGenericReset>:
{
   80850:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80852:	b308      	cbz	r0, 80898 <xQueueGenericReset+0x48>
   80854:	460d      	mov	r5, r1
   80856:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   80858:	4b17      	ldr	r3, [pc, #92]	; (808b8 <xQueueGenericReset+0x68>)
   8085a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8085c:	6822      	ldr	r2, [r4, #0]
   8085e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80860:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80862:	fb03 f301 	mul.w	r3, r3, r1
   80866:	18d0      	adds	r0, r2, r3
   80868:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8086a:	2000      	movs	r0, #0
   8086c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8086e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80870:	1a5b      	subs	r3, r3, r1
   80872:	4413      	add	r3, r2
   80874:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80876:	f04f 33ff 	mov.w	r3, #4294967295
   8087a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8087c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
   8087e:	b995      	cbnz	r5, 808a6 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80880:	6923      	ldr	r3, [r4, #16]
   80882:	b12b      	cbz	r3, 80890 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80884:	f104 0010 	add.w	r0, r4, #16
   80888:	4b0c      	ldr	r3, [pc, #48]	; (808bc <xQueueGenericReset+0x6c>)
   8088a:	4798      	blx	r3
   8088c:	2801      	cmp	r0, #1
   8088e:	d007      	beq.n	808a0 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
   80890:	4b0b      	ldr	r3, [pc, #44]	; (808c0 <xQueueGenericReset+0x70>)
   80892:	4798      	blx	r3
}
   80894:	2001      	movs	r0, #1
   80896:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   80898:	4b0a      	ldr	r3, [pc, #40]	; (808c4 <xQueueGenericReset+0x74>)
   8089a:	4798      	blx	r3
   8089c:	bf00      	nop
   8089e:	e7fd      	b.n	8089c <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
   808a0:	4b09      	ldr	r3, [pc, #36]	; (808c8 <xQueueGenericReset+0x78>)
   808a2:	4798      	blx	r3
   808a4:	e7f4      	b.n	80890 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   808a6:	f104 0010 	add.w	r0, r4, #16
   808aa:	4d08      	ldr	r5, [pc, #32]	; (808cc <xQueueGenericReset+0x7c>)
   808ac:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   808ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
   808b2:	47a8      	blx	r5
   808b4:	e7ec      	b.n	80890 <xQueueGenericReset+0x40>
   808b6:	bf00      	nop
   808b8:	000804d9 	.word	0x000804d9
   808bc:	00081409 	.word	0x00081409
   808c0:	000804f9 	.word	0x000804f9
   808c4:	000804c9 	.word	0x000804c9
   808c8:	000804b9 	.word	0x000804b9
   808cc:	000803d1 	.word	0x000803d1

000808d0 <xQueueGenericCreate>:
{
   808d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   808d2:	b1d8      	cbz	r0, 8090c <xQueueGenericCreate+0x3c>
   808d4:	460d      	mov	r5, r1
   808d6:	4617      	mov	r7, r2
   808d8:	4606      	mov	r6, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   808da:	2050      	movs	r0, #80	; 0x50
   808dc:	4b0d      	ldr	r3, [pc, #52]	; (80914 <xQueueGenericCreate+0x44>)
   808de:	4798      	blx	r3
		if( pxNewQueue != NULL )
   808e0:	4604      	mov	r4, r0
   808e2:	b198      	cbz	r0, 8090c <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   808e4:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   808e8:	3001      	adds	r0, #1
   808ea:	4b0a      	ldr	r3, [pc, #40]	; (80914 <xQueueGenericCreate+0x44>)
   808ec:	4798      	blx	r3
   808ee:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   808f0:	b148      	cbz	r0, 80906 <xQueueGenericCreate+0x36>
				pxNewQueue->uxLength = uxQueueLength;
   808f2:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   808f4:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   808f6:	2101      	movs	r1, #1
   808f8:	4620      	mov	r0, r4
   808fa:	4b07      	ldr	r3, [pc, #28]	; (80918 <xQueueGenericCreate+0x48>)
   808fc:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
   808fe:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
}
   80902:	4620      	mov	r0, r4
   80904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vPortFree( pxNewQueue );
   80906:	4620      	mov	r0, r4
   80908:	4b04      	ldr	r3, [pc, #16]	; (8091c <xQueueGenericCreate+0x4c>)
   8090a:	4798      	blx	r3
	configASSERT( xReturn );
   8090c:	4b04      	ldr	r3, [pc, #16]	; (80920 <xQueueGenericCreate+0x50>)
   8090e:	4798      	blx	r3
   80910:	bf00      	nop
   80912:	e7fd      	b.n	80910 <xQueueGenericCreate+0x40>
   80914:	00080629 	.word	0x00080629
   80918:	00080851 	.word	0x00080851
   8091c:	000806f5 	.word	0x000806f5
   80920:	000804c9 	.word	0x000804c9

00080924 <xQueueGenericSend>:
{
   80924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80928:	b085      	sub	sp, #20
   8092a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   8092c:	b148      	cbz	r0, 80942 <xQueueGenericSend+0x1e>
   8092e:	4688      	mov	r8, r1
   80930:	4699      	mov	r9, r3
   80932:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80934:	b149      	cbz	r1, 8094a <xQueueGenericSend+0x26>
   80936:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80938:	4e38      	ldr	r6, [pc, #224]	; (80a1c <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
   8093a:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80a48 <xQueueGenericSend+0x124>
		taskEXIT_CRITICAL();
   8093e:	4d38      	ldr	r5, [pc, #224]	; (80a20 <xQueueGenericSend+0xfc>)
   80940:	e02e      	b.n	809a0 <xQueueGenericSend+0x7c>
	configASSERT( pxQueue );
   80942:	4b38      	ldr	r3, [pc, #224]	; (80a24 <xQueueGenericSend+0x100>)
   80944:	4798      	blx	r3
   80946:	bf00      	nop
   80948:	e7fd      	b.n	80946 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8094a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8094c:	b11b      	cbz	r3, 80956 <xQueueGenericSend+0x32>
   8094e:	4b35      	ldr	r3, [pc, #212]	; (80a24 <xQueueGenericSend+0x100>)
   80950:	4798      	blx	r3
   80952:	bf00      	nop
   80954:	e7fd      	b.n	80952 <xQueueGenericSend+0x2e>
   80956:	2700      	movs	r7, #0
   80958:	e7ee      	b.n	80938 <xQueueGenericSend+0x14>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8095a:	464a      	mov	r2, r9
   8095c:	4641      	mov	r1, r8
   8095e:	4620      	mov	r0, r4
   80960:	4b31      	ldr	r3, [pc, #196]	; (80a28 <xQueueGenericSend+0x104>)
   80962:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80964:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80966:	b92b      	cbnz	r3, 80974 <xQueueGenericSend+0x50>
				taskEXIT_CRITICAL();
   80968:	4b2d      	ldr	r3, [pc, #180]	; (80a20 <xQueueGenericSend+0xfc>)
   8096a:	4798      	blx	r3
				return pdPASS;
   8096c:	2001      	movs	r0, #1
}
   8096e:	b005      	add	sp, #20
   80970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80974:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80978:	4b2c      	ldr	r3, [pc, #176]	; (80a2c <xQueueGenericSend+0x108>)
   8097a:	4798      	blx	r3
   8097c:	2801      	cmp	r0, #1
   8097e:	d1f3      	bne.n	80968 <xQueueGenericSend+0x44>
						portYIELD_WITHIN_API();
   80980:	4b2b      	ldr	r3, [pc, #172]	; (80a30 <xQueueGenericSend+0x10c>)
   80982:	4798      	blx	r3
   80984:	e7f0      	b.n	80968 <xQueueGenericSend+0x44>
					taskEXIT_CRITICAL();
   80986:	4b26      	ldr	r3, [pc, #152]	; (80a20 <xQueueGenericSend+0xfc>)
   80988:	4798      	blx	r3
					return errQUEUE_FULL;
   8098a:	2000      	movs	r0, #0
   8098c:	e7ef      	b.n	8096e <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
   8098e:	a802      	add	r0, sp, #8
   80990:	47d0      	blx	sl
   80992:	e00f      	b.n	809b4 <xQueueGenericSend+0x90>
				prvUnlockQueue( pxQueue );
   80994:	4620      	mov	r0, r4
   80996:	4b27      	ldr	r3, [pc, #156]	; (80a34 <xQueueGenericSend+0x110>)
   80998:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8099a:	4b27      	ldr	r3, [pc, #156]	; (80a38 <xQueueGenericSend+0x114>)
   8099c:	4798      	blx	r3
   8099e:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   809a0:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   809a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   809a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   809a6:	429a      	cmp	r2, r3
   809a8:	d3d7      	bcc.n	8095a <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   809aa:	9b01      	ldr	r3, [sp, #4]
   809ac:	2b00      	cmp	r3, #0
   809ae:	d0ea      	beq.n	80986 <xQueueGenericSend+0x62>
				else if( xEntryTimeSet == pdFALSE )
   809b0:	2f00      	cmp	r7, #0
   809b2:	d0ec      	beq.n	8098e <xQueueGenericSend+0x6a>
		taskEXIT_CRITICAL();
   809b4:	47a8      	blx	r5
		vTaskSuspendAll();
   809b6:	4b21      	ldr	r3, [pc, #132]	; (80a3c <xQueueGenericSend+0x118>)
   809b8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   809ba:	47b0      	blx	r6
   809bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   809be:	f1b3 3fff 	cmp.w	r3, #4294967295
   809c2:	bf04      	itt	eq
   809c4:	2300      	moveq	r3, #0
   809c6:	6463      	streq	r3, [r4, #68]	; 0x44
   809c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   809ca:	f1b3 3fff 	cmp.w	r3, #4294967295
   809ce:	bf04      	itt	eq
   809d0:	2300      	moveq	r3, #0
   809d2:	64a3      	streq	r3, [r4, #72]	; 0x48
   809d4:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   809d6:	a901      	add	r1, sp, #4
   809d8:	a802      	add	r0, sp, #8
   809da:	4b19      	ldr	r3, [pc, #100]	; (80a40 <xQueueGenericSend+0x11c>)
   809dc:	4798      	blx	r3
   809de:	b9a8      	cbnz	r0, 80a0c <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   809e0:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   809e2:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   809e6:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   809e8:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   809ea:	45bb      	cmp	fp, r7
   809ec:	d1d2      	bne.n	80994 <xQueueGenericSend+0x70>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   809ee:	9901      	ldr	r1, [sp, #4]
   809f0:	f104 0010 	add.w	r0, r4, #16
   809f4:	4b13      	ldr	r3, [pc, #76]	; (80a44 <xQueueGenericSend+0x120>)
   809f6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   809f8:	4620      	mov	r0, r4
   809fa:	4b0e      	ldr	r3, [pc, #56]	; (80a34 <xQueueGenericSend+0x110>)
   809fc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   809fe:	4b0e      	ldr	r3, [pc, #56]	; (80a38 <xQueueGenericSend+0x114>)
   80a00:	4798      	blx	r3
   80a02:	2800      	cmp	r0, #0
   80a04:	d1cb      	bne.n	8099e <xQueueGenericSend+0x7a>
					portYIELD_WITHIN_API();
   80a06:	4b0a      	ldr	r3, [pc, #40]	; (80a30 <xQueueGenericSend+0x10c>)
   80a08:	4798      	blx	r3
   80a0a:	e7c8      	b.n	8099e <xQueueGenericSend+0x7a>
			prvUnlockQueue( pxQueue );
   80a0c:	4620      	mov	r0, r4
   80a0e:	4b09      	ldr	r3, [pc, #36]	; (80a34 <xQueueGenericSend+0x110>)
   80a10:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80a12:	4b09      	ldr	r3, [pc, #36]	; (80a38 <xQueueGenericSend+0x114>)
   80a14:	4798      	blx	r3
			return errQUEUE_FULL;
   80a16:	2000      	movs	r0, #0
   80a18:	e7a9      	b.n	8096e <xQueueGenericSend+0x4a>
   80a1a:	bf00      	nop
   80a1c:	000804d9 	.word	0x000804d9
   80a20:	000804f9 	.word	0x000804f9
   80a24:	000804c9 	.word	0x000804c9
   80a28:	0008072d 	.word	0x0008072d
   80a2c:	00081409 	.word	0x00081409
   80a30:	000804b9 	.word	0x000804b9
   80a34:	000807bd 	.word	0x000807bd
   80a38:	000810b1 	.word	0x000810b1
   80a3c:	00080f59 	.word	0x00080f59
   80a40:	000814b5 	.word	0x000814b5
   80a44:	00081365 	.word	0x00081365
   80a48:	0008148d 	.word	0x0008148d

00080a4c <xQueueGenericSendFromISR>:
{
   80a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
   80a50:	b190      	cbz	r0, 80a78 <xQueueGenericSendFromISR+0x2c>
   80a52:	460e      	mov	r6, r1
   80a54:	4615      	mov	r5, r2
   80a56:	4698      	mov	r8, r3
   80a58:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a5a:	b189      	cbz	r1, 80a80 <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80a5c:	4b1b      	ldr	r3, [pc, #108]	; (80acc <xQueueGenericSendFromISR+0x80>)
   80a5e:	4798      	blx	r3
   80a60:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80a62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80a64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a66:	429a      	cmp	r2, r3
   80a68:	d311      	bcc.n	80a8e <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
   80a6a:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80a6c:	4638      	mov	r0, r7
   80a6e:	4b18      	ldr	r3, [pc, #96]	; (80ad0 <xQueueGenericSendFromISR+0x84>)
   80a70:	4798      	blx	r3
}
   80a72:	4620      	mov	r0, r4
   80a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
   80a78:	4b14      	ldr	r3, [pc, #80]	; (80acc <xQueueGenericSendFromISR+0x80>)
   80a7a:	4798      	blx	r3
   80a7c:	bf00      	nop
   80a7e:	e7fd      	b.n	80a7c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a80:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a82:	2b00      	cmp	r3, #0
   80a84:	d0ea      	beq.n	80a5c <xQueueGenericSendFromISR+0x10>
   80a86:	4b11      	ldr	r3, [pc, #68]	; (80acc <xQueueGenericSendFromISR+0x80>)
   80a88:	4798      	blx	r3
   80a8a:	bf00      	nop
   80a8c:	e7fd      	b.n	80a8a <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80a8e:	4642      	mov	r2, r8
   80a90:	4631      	mov	r1, r6
   80a92:	4620      	mov	r0, r4
   80a94:	4b0f      	ldr	r3, [pc, #60]	; (80ad4 <xQueueGenericSendFromISR+0x88>)
   80a96:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   80a98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a9e:	d10a      	bne.n	80ab6 <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80aa2:	b16b      	cbz	r3, 80ac0 <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80aa4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80aa8:	4b0b      	ldr	r3, [pc, #44]	; (80ad8 <xQueueGenericSendFromISR+0x8c>)
   80aaa:	4798      	blx	r3
   80aac:	b150      	cbz	r0, 80ac4 <xQueueGenericSendFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
   80aae:	b15d      	cbz	r5, 80ac8 <xQueueGenericSendFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
   80ab0:	2401      	movs	r4, #1
   80ab2:	602c      	str	r4, [r5, #0]
   80ab4:	e7da      	b.n	80a6c <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
   80ab6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ab8:	3301      	adds	r3, #1
   80aba:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   80abc:	2401      	movs	r4, #1
   80abe:	e7d5      	b.n	80a6c <xQueueGenericSendFromISR+0x20>
   80ac0:	2401      	movs	r4, #1
   80ac2:	e7d3      	b.n	80a6c <xQueueGenericSendFromISR+0x20>
   80ac4:	2401      	movs	r4, #1
   80ac6:	e7d1      	b.n	80a6c <xQueueGenericSendFromISR+0x20>
   80ac8:	2401      	movs	r4, #1
   80aca:	e7cf      	b.n	80a6c <xQueueGenericSendFromISR+0x20>
   80acc:	000804c9 	.word	0x000804c9
   80ad0:	000804f1 	.word	0x000804f1
   80ad4:	0008072d 	.word	0x0008072d
   80ad8:	00081409 	.word	0x00081409

00080adc <xQueueGenericReceive>:
{
   80adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80ae0:	b084      	sub	sp, #16
   80ae2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80ae4:	b148      	cbz	r0, 80afa <xQueueGenericReceive+0x1e>
   80ae6:	4688      	mov	r8, r1
   80ae8:	4699      	mov	r9, r3
   80aea:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80aec:	b149      	cbz	r1, 80b02 <xQueueGenericReceive+0x26>
   80aee:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80af0:	4e46      	ldr	r6, [pc, #280]	; (80c0c <xQueueGenericReceive+0x130>)
					vTaskSetTimeOutState( &xTimeOut );
   80af2:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80c40 <xQueueGenericReceive+0x164>
		taskEXIT_CRITICAL();
   80af6:	4d46      	ldr	r5, [pc, #280]	; (80c10 <xQueueGenericReceive+0x134>)
   80af8:	e04b      	b.n	80b92 <xQueueGenericReceive+0xb6>
	configASSERT( pxQueue );
   80afa:	4b46      	ldr	r3, [pc, #280]	; (80c14 <xQueueGenericReceive+0x138>)
   80afc:	4798      	blx	r3
   80afe:	bf00      	nop
   80b00:	e7fd      	b.n	80afe <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80b02:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80b04:	b11b      	cbz	r3, 80b0e <xQueueGenericReceive+0x32>
   80b06:	4b43      	ldr	r3, [pc, #268]	; (80c14 <xQueueGenericReceive+0x138>)
   80b08:	4798      	blx	r3
   80b0a:	bf00      	nop
   80b0c:	e7fd      	b.n	80b0a <xQueueGenericReceive+0x2e>
   80b0e:	2700      	movs	r7, #0
   80b10:	e7ee      	b.n	80af0 <xQueueGenericReceive+0x14>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80b12:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80b14:	4641      	mov	r1, r8
   80b16:	4620      	mov	r0, r4
   80b18:	4b3f      	ldr	r3, [pc, #252]	; (80c18 <xQueueGenericReceive+0x13c>)
   80b1a:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
   80b1c:	f1b9 0f00 	cmp.w	r9, #0
   80b20:	d117      	bne.n	80b52 <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
   80b22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80b24:	3b01      	subs	r3, #1
   80b26:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80b28:	6823      	ldr	r3, [r4, #0]
   80b2a:	b913      	cbnz	r3, 80b32 <xQueueGenericReceive+0x56>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80b2c:	4b3b      	ldr	r3, [pc, #236]	; (80c1c <xQueueGenericReceive+0x140>)
   80b2e:	4798      	blx	r3
   80b30:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b32:	6923      	ldr	r3, [r4, #16]
   80b34:	b13b      	cbz	r3, 80b46 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80b36:	f104 0010 	add.w	r0, r4, #16
   80b3a:	4b39      	ldr	r3, [pc, #228]	; (80c20 <xQueueGenericReceive+0x144>)
   80b3c:	4798      	blx	r3
   80b3e:	2801      	cmp	r0, #1
   80b40:	d101      	bne.n	80b46 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80b42:	4b38      	ldr	r3, [pc, #224]	; (80c24 <xQueueGenericReceive+0x148>)
   80b44:	4798      	blx	r3
				taskEXIT_CRITICAL();
   80b46:	4b32      	ldr	r3, [pc, #200]	; (80c10 <xQueueGenericReceive+0x134>)
   80b48:	4798      	blx	r3
				return pdPASS;
   80b4a:	2001      	movs	r0, #1
}
   80b4c:	b004      	add	sp, #16
   80b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80b52:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b54:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b56:	2b00      	cmp	r3, #0
   80b58:	d0f5      	beq.n	80b46 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b5a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80b5e:	4b30      	ldr	r3, [pc, #192]	; (80c20 <xQueueGenericReceive+0x144>)
   80b60:	4798      	blx	r3
   80b62:	2800      	cmp	r0, #0
   80b64:	d0ef      	beq.n	80b46 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80b66:	4b2f      	ldr	r3, [pc, #188]	; (80c24 <xQueueGenericReceive+0x148>)
   80b68:	4798      	blx	r3
   80b6a:	e7ec      	b.n	80b46 <xQueueGenericReceive+0x6a>
					taskEXIT_CRITICAL();
   80b6c:	4b28      	ldr	r3, [pc, #160]	; (80c10 <xQueueGenericReceive+0x134>)
   80b6e:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80b70:	2000      	movs	r0, #0
   80b72:	e7eb      	b.n	80b4c <xQueueGenericReceive+0x70>
					vTaskSetTimeOutState( &xTimeOut );
   80b74:	a802      	add	r0, sp, #8
   80b76:	47d0      	blx	sl
   80b78:	e014      	b.n	80ba4 <xQueueGenericReceive+0xc8>
						portENTER_CRITICAL();
   80b7a:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80b7c:	6860      	ldr	r0, [r4, #4]
   80b7e:	4b2a      	ldr	r3, [pc, #168]	; (80c28 <xQueueGenericReceive+0x14c>)
   80b80:	4798      	blx	r3
						portEXIT_CRITICAL();
   80b82:	47a8      	blx	r5
   80b84:	e02c      	b.n	80be0 <xQueueGenericReceive+0x104>
				prvUnlockQueue( pxQueue );
   80b86:	4620      	mov	r0, r4
   80b88:	4b28      	ldr	r3, [pc, #160]	; (80c2c <xQueueGenericReceive+0x150>)
   80b8a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80b8c:	4b28      	ldr	r3, [pc, #160]	; (80c30 <xQueueGenericReceive+0x154>)
   80b8e:	4798      	blx	r3
   80b90:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80b92:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80b94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80b96:	2b00      	cmp	r3, #0
   80b98:	d1bb      	bne.n	80b12 <xQueueGenericReceive+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   80b9a:	9b01      	ldr	r3, [sp, #4]
   80b9c:	2b00      	cmp	r3, #0
   80b9e:	d0e5      	beq.n	80b6c <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
   80ba0:	2f00      	cmp	r7, #0
   80ba2:	d0e7      	beq.n	80b74 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
   80ba4:	47a8      	blx	r5
		vTaskSuspendAll();
   80ba6:	4b23      	ldr	r3, [pc, #140]	; (80c34 <xQueueGenericReceive+0x158>)
   80ba8:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80baa:	47b0      	blx	r6
   80bac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80bae:	f1b3 3fff 	cmp.w	r3, #4294967295
   80bb2:	bf04      	itt	eq
   80bb4:	2300      	moveq	r3, #0
   80bb6:	6463      	streq	r3, [r4, #68]	; 0x44
   80bb8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80bba:	f1b3 3fff 	cmp.w	r3, #4294967295
   80bbe:	bf04      	itt	eq
   80bc0:	2300      	moveq	r3, #0
   80bc2:	64a3      	streq	r3, [r4, #72]	; 0x48
   80bc4:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80bc6:	a901      	add	r1, sp, #4
   80bc8:	a802      	add	r0, sp, #8
   80bca:	4b1b      	ldr	r3, [pc, #108]	; (80c38 <xQueueGenericReceive+0x15c>)
   80bcc:	4798      	blx	r3
   80bce:	b9b0      	cbnz	r0, 80bfe <xQueueGenericReceive+0x122>
	taskENTER_CRITICAL();
   80bd0:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80bd2:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80bd4:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80bd6:	2f00      	cmp	r7, #0
   80bd8:	d1d5      	bne.n	80b86 <xQueueGenericReceive+0xaa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80bda:	6823      	ldr	r3, [r4, #0]
   80bdc:	2b00      	cmp	r3, #0
   80bde:	d0cc      	beq.n	80b7a <xQueueGenericReceive+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80be0:	9901      	ldr	r1, [sp, #4]
   80be2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80be6:	4b15      	ldr	r3, [pc, #84]	; (80c3c <xQueueGenericReceive+0x160>)
   80be8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80bea:	4620      	mov	r0, r4
   80bec:	4b0f      	ldr	r3, [pc, #60]	; (80c2c <xQueueGenericReceive+0x150>)
   80bee:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80bf0:	4b0f      	ldr	r3, [pc, #60]	; (80c30 <xQueueGenericReceive+0x154>)
   80bf2:	4798      	blx	r3
   80bf4:	2800      	cmp	r0, #0
   80bf6:	d1cb      	bne.n	80b90 <xQueueGenericReceive+0xb4>
					portYIELD_WITHIN_API();
   80bf8:	4b0a      	ldr	r3, [pc, #40]	; (80c24 <xQueueGenericReceive+0x148>)
   80bfa:	4798      	blx	r3
   80bfc:	e7c8      	b.n	80b90 <xQueueGenericReceive+0xb4>
			prvUnlockQueue( pxQueue );
   80bfe:	4620      	mov	r0, r4
   80c00:	4b0a      	ldr	r3, [pc, #40]	; (80c2c <xQueueGenericReceive+0x150>)
   80c02:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80c04:	4b0a      	ldr	r3, [pc, #40]	; (80c30 <xQueueGenericReceive+0x154>)
   80c06:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80c08:	2000      	movs	r0, #0
   80c0a:	e79f      	b.n	80b4c <xQueueGenericReceive+0x70>
   80c0c:	000804d9 	.word	0x000804d9
   80c10:	000804f9 	.word	0x000804f9
   80c14:	000804c9 	.word	0x000804c9
   80c18:	00080795 	.word	0x00080795
   80c1c:	00081545 	.word	0x00081545
   80c20:	00081409 	.word	0x00081409
   80c24:	000804b9 	.word	0x000804b9
   80c28:	00081571 	.word	0x00081571
   80c2c:	000807bd 	.word	0x000807bd
   80c30:	000810b1 	.word	0x000810b1
   80c34:	00080f59 	.word	0x00080f59
   80c38:	000814b5 	.word	0x000814b5
   80c3c:	00081365 	.word	0x00081365
   80c40:	0008148d 	.word	0x0008148d

00080c44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80c44:	b538      	push	{r3, r4, r5, lr}
   80c46:	4604      	mov	r4, r0
   80c48:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80c4a:	4b0e      	ldr	r3, [pc, #56]	; (80c84 <vQueueWaitForMessageRestricted+0x40>)
   80c4c:	4798      	blx	r3
   80c4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c50:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c54:	bf04      	itt	eq
   80c56:	2300      	moveq	r3, #0
   80c58:	6463      	streq	r3, [r4, #68]	; 0x44
   80c5a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c60:	bf04      	itt	eq
   80c62:	2300      	moveq	r3, #0
   80c64:	64a3      	streq	r3, [r4, #72]	; 0x48
   80c66:	4b08      	ldr	r3, [pc, #32]	; (80c88 <vQueueWaitForMessageRestricted+0x44>)
   80c68:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80c6c:	b11b      	cbz	r3, 80c76 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
   80c6e:	4620      	mov	r0, r4
   80c70:	4b06      	ldr	r3, [pc, #24]	; (80c8c <vQueueWaitForMessageRestricted+0x48>)
   80c72:	4798      	blx	r3
   80c74:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80c76:	4629      	mov	r1, r5
   80c78:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c7c:	4b04      	ldr	r3, [pc, #16]	; (80c90 <vQueueWaitForMessageRestricted+0x4c>)
   80c7e:	4798      	blx	r3
   80c80:	e7f5      	b.n	80c6e <vQueueWaitForMessageRestricted+0x2a>
   80c82:	bf00      	nop
   80c84:	000804d9 	.word	0x000804d9
   80c88:	000804f9 	.word	0x000804f9
   80c8c:	000807bd 	.word	0x000807bd
   80c90:	000813c5 	.word	0x000813c5

00080c94 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80c94:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80c96:	4b0f      	ldr	r3, [pc, #60]	; (80cd4 <prvAddCurrentTaskToDelayedList+0x40>)
   80c98:	681b      	ldr	r3, [r3, #0]
   80c9a:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80c9c:	4b0e      	ldr	r3, [pc, #56]	; (80cd8 <prvAddCurrentTaskToDelayedList+0x44>)
   80c9e:	681b      	ldr	r3, [r3, #0]
   80ca0:	4298      	cmp	r0, r3
   80ca2:	d30e      	bcc.n	80cc2 <prvAddCurrentTaskToDelayedList+0x2e>
   80ca4:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80ca6:	4b0d      	ldr	r3, [pc, #52]	; (80cdc <prvAddCurrentTaskToDelayedList+0x48>)
   80ca8:	6818      	ldr	r0, [r3, #0]
   80caa:	4b0a      	ldr	r3, [pc, #40]	; (80cd4 <prvAddCurrentTaskToDelayedList+0x40>)
   80cac:	6819      	ldr	r1, [r3, #0]
   80cae:	3104      	adds	r1, #4
   80cb0:	4b0b      	ldr	r3, [pc, #44]	; (80ce0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80cb2:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80cb4:	4b0b      	ldr	r3, [pc, #44]	; (80ce4 <prvAddCurrentTaskToDelayedList+0x50>)
   80cb6:	681b      	ldr	r3, [r3, #0]
   80cb8:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80cba:	bf3c      	itt	cc
   80cbc:	4b09      	ldrcc	r3, [pc, #36]	; (80ce4 <prvAddCurrentTaskToDelayedList+0x50>)
   80cbe:	601c      	strcc	r4, [r3, #0]
   80cc0:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80cc2:	4b09      	ldr	r3, [pc, #36]	; (80ce8 <prvAddCurrentTaskToDelayedList+0x54>)
   80cc4:	6818      	ldr	r0, [r3, #0]
   80cc6:	4b03      	ldr	r3, [pc, #12]	; (80cd4 <prvAddCurrentTaskToDelayedList+0x40>)
   80cc8:	6819      	ldr	r1, [r3, #0]
   80cca:	3104      	adds	r1, #4
   80ccc:	4b04      	ldr	r3, [pc, #16]	; (80ce0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80cce:	4798      	blx	r3
   80cd0:	bd10      	pop	{r4, pc}
   80cd2:	bf00      	nop
   80cd4:	2007ab60 	.word	0x2007ab60
   80cd8:	2007ac5c 	.word	0x2007ac5c
   80cdc:	2007ab64 	.word	0x2007ab64
   80ce0:	00080409 	.word	0x00080409
   80ce4:	20070134 	.word	0x20070134
   80ce8:	2007ab68 	.word	0x2007ab68

00080cec <xTaskGenericCreate>:
{
   80cec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80cf0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   80cf2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   80cf6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
   80cf8:	b148      	cbz	r0, 80d0e <xTaskGenericCreate+0x22>
   80cfa:	4688      	mov	r8, r1
   80cfc:	4615      	mov	r5, r2
   80cfe:	469b      	mov	fp, r3
   80d00:	4682      	mov	sl, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80d02:	2f04      	cmp	r7, #4
   80d04:	d907      	bls.n	80d16 <xTaskGenericCreate+0x2a>
   80d06:	4b60      	ldr	r3, [pc, #384]	; (80e88 <xTaskGenericCreate+0x19c>)
   80d08:	4798      	blx	r3
   80d0a:	bf00      	nop
   80d0c:	e7fd      	b.n	80d0a <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
   80d0e:	4b5e      	ldr	r3, [pc, #376]	; (80e88 <xTaskGenericCreate+0x19c>)
   80d10:	4798      	blx	r3
   80d12:	bf00      	nop
   80d14:	e7fd      	b.n	80d12 <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80d16:	204c      	movs	r0, #76	; 0x4c
   80d18:	4b5c      	ldr	r3, [pc, #368]	; (80e8c <xTaskGenericCreate+0x1a0>)
   80d1a:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80d1c:	4604      	mov	r4, r0
   80d1e:	2800      	cmp	r0, #0
   80d20:	d054      	beq.n	80dcc <xTaskGenericCreate+0xe0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80d22:	2e00      	cmp	r6, #0
   80d24:	d048      	beq.n	80db8 <xTaskGenericCreate+0xcc>
   80d26:	6306      	str	r6, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80d28:	00aa      	lsls	r2, r5, #2
   80d2a:	21a5      	movs	r1, #165	; 0xa5
   80d2c:	4630      	mov	r0, r6
   80d2e:	4b58      	ldr	r3, [pc, #352]	; (80e90 <xTaskGenericCreate+0x1a4>)
   80d30:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80d32:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80d36:	3d01      	subs	r5, #1
   80d38:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80d3a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80d3e:	f023 0507 	bic.w	r5, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80d42:	220a      	movs	r2, #10
   80d44:	4641      	mov	r1, r8
   80d46:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80d4a:	4b52      	ldr	r3, [pc, #328]	; (80e94 <xTaskGenericCreate+0x1a8>)
   80d4c:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80d4e:	2300      	movs	r3, #0
   80d50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
   80d54:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
   80d56:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80d58:	f104 0804 	add.w	r8, r4, #4
   80d5c:	4640      	mov	r0, r8
   80d5e:	4e4e      	ldr	r6, [pc, #312]	; (80e98 <xTaskGenericCreate+0x1ac>)
   80d60:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80d62:	f104 0018 	add.w	r0, r4, #24
   80d66:	47b0      	blx	r6
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80d68:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80d6a:	f1c7 0305 	rsb	r3, r7, #5
   80d6e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80d70:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80d72:	465a      	mov	r2, fp
   80d74:	4651      	mov	r1, sl
   80d76:	4628      	mov	r0, r5
   80d78:	4b48      	ldr	r3, [pc, #288]	; (80e9c <xTaskGenericCreate+0x1b0>)
   80d7a:	4798      	blx	r3
   80d7c:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80d7e:	f010 0f07 	tst.w	r0, #7
   80d82:	d127      	bne.n	80dd4 <xTaskGenericCreate+0xe8>
		if( ( void * ) pxCreatedTask != NULL )
   80d84:	f1b9 0f00 	cmp.w	r9, #0
   80d88:	d001      	beq.n	80d8e <xTaskGenericCreate+0xa2>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80d8a:	f8c9 4000 	str.w	r4, [r9]
		taskENTER_CRITICAL();
   80d8e:	4b44      	ldr	r3, [pc, #272]	; (80ea0 <xTaskGenericCreate+0x1b4>)
   80d90:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
   80d92:	4a44      	ldr	r2, [pc, #272]	; (80ea4 <xTaskGenericCreate+0x1b8>)
   80d94:	6813      	ldr	r3, [r2, #0]
   80d96:	3301      	adds	r3, #1
   80d98:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80d9a:	4b43      	ldr	r3, [pc, #268]	; (80ea8 <xTaskGenericCreate+0x1bc>)
   80d9c:	681b      	ldr	r3, [r3, #0]
   80d9e:	b1eb      	cbz	r3, 80ddc <xTaskGenericCreate+0xf0>
				if( xSchedulerRunning == pdFALSE )
   80da0:	4b42      	ldr	r3, [pc, #264]	; (80eac <xTaskGenericCreate+0x1c0>)
   80da2:	681b      	ldr	r3, [r3, #0]
   80da4:	2b00      	cmp	r3, #0
   80da6:	d140      	bne.n	80e2a <xTaskGenericCreate+0x13e>
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80da8:	4b3f      	ldr	r3, [pc, #252]	; (80ea8 <xTaskGenericCreate+0x1bc>)
   80daa:	681b      	ldr	r3, [r3, #0]
   80dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80dae:	429f      	cmp	r7, r3
						pxCurrentTCB = pxNewTCB;
   80db0:	bf24      	itt	cs
   80db2:	4b3d      	ldrcs	r3, [pc, #244]	; (80ea8 <xTaskGenericCreate+0x1bc>)
   80db4:	601c      	strcs	r4, [r3, #0]
   80db6:	e038      	b.n	80e2a <xTaskGenericCreate+0x13e>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80db8:	00a8      	lsls	r0, r5, #2
   80dba:	4b34      	ldr	r3, [pc, #208]	; (80e8c <xTaskGenericCreate+0x1a0>)
   80dbc:	4798      	blx	r3
   80dbe:	4606      	mov	r6, r0
   80dc0:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
   80dc2:	2800      	cmp	r0, #0
   80dc4:	d1b0      	bne.n	80d28 <xTaskGenericCreate+0x3c>
			vPortFree( pxNewTCB );
   80dc6:	4620      	mov	r0, r4
   80dc8:	4b39      	ldr	r3, [pc, #228]	; (80eb0 <xTaskGenericCreate+0x1c4>)
   80dca:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80dcc:	f04f 30ff 	mov.w	r0, #4294967295
}
   80dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80dd4:	4b2c      	ldr	r3, [pc, #176]	; (80e88 <xTaskGenericCreate+0x19c>)
   80dd6:	4798      	blx	r3
   80dd8:	bf00      	nop
   80dda:	e7fd      	b.n	80dd8 <xTaskGenericCreate+0xec>
				pxCurrentTCB =  pxNewTCB;
   80ddc:	4b32      	ldr	r3, [pc, #200]	; (80ea8 <xTaskGenericCreate+0x1bc>)
   80dde:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80de0:	6813      	ldr	r3, [r2, #0]
   80de2:	2b01      	cmp	r3, #1
   80de4:	d121      	bne.n	80e2a <xTaskGenericCreate+0x13e>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80de6:	4e33      	ldr	r6, [pc, #204]	; (80eb4 <xTaskGenericCreate+0x1c8>)
   80de8:	4630      	mov	r0, r6
   80dea:	4d33      	ldr	r5, [pc, #204]	; (80eb8 <xTaskGenericCreate+0x1cc>)
   80dec:	47a8      	blx	r5
   80dee:	f106 0014 	add.w	r0, r6, #20
   80df2:	47a8      	blx	r5
   80df4:	f106 0028 	add.w	r0, r6, #40	; 0x28
   80df8:	47a8      	blx	r5
   80dfa:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   80dfe:	47a8      	blx	r5
   80e00:	f106 0050 	add.w	r0, r6, #80	; 0x50
   80e04:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80e06:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80eec <xTaskGenericCreate+0x200>
   80e0a:	4648      	mov	r0, r9
   80e0c:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80e0e:	4e2b      	ldr	r6, [pc, #172]	; (80ebc <xTaskGenericCreate+0x1d0>)
   80e10:	4630      	mov	r0, r6
   80e12:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80e14:	482a      	ldr	r0, [pc, #168]	; (80ec0 <xTaskGenericCreate+0x1d4>)
   80e16:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80e18:	482a      	ldr	r0, [pc, #168]	; (80ec4 <xTaskGenericCreate+0x1d8>)
   80e1a:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80e1c:	482a      	ldr	r0, [pc, #168]	; (80ec8 <xTaskGenericCreate+0x1dc>)
   80e1e:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   80e20:	4b2a      	ldr	r3, [pc, #168]	; (80ecc <xTaskGenericCreate+0x1e0>)
   80e22:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80e26:	4b2a      	ldr	r3, [pc, #168]	; (80ed0 <xTaskGenericCreate+0x1e4>)
   80e28:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80e2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80e2c:	4b29      	ldr	r3, [pc, #164]	; (80ed4 <xTaskGenericCreate+0x1e8>)
   80e2e:	681b      	ldr	r3, [r3, #0]
   80e30:	4298      	cmp	r0, r3
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80e32:	bf84      	itt	hi
   80e34:	4b27      	ldrhi	r3, [pc, #156]	; (80ed4 <xTaskGenericCreate+0x1e8>)
   80e36:	6018      	strhi	r0, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80e38:	4a27      	ldr	r2, [pc, #156]	; (80ed8 <xTaskGenericCreate+0x1ec>)
   80e3a:	6813      	ldr	r3, [r2, #0]
   80e3c:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
   80e3e:	3301      	adds	r3, #1
   80e40:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
   80e42:	4b26      	ldr	r3, [pc, #152]	; (80edc <xTaskGenericCreate+0x1f0>)
   80e44:	681b      	ldr	r3, [r3, #0]
   80e46:	4298      	cmp	r0, r3
   80e48:	bf84      	itt	hi
   80e4a:	4b24      	ldrhi	r3, [pc, #144]	; (80edc <xTaskGenericCreate+0x1f0>)
   80e4c:	6018      	strhi	r0, [r3, #0]
   80e4e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80e52:	4641      	mov	r1, r8
   80e54:	4b17      	ldr	r3, [pc, #92]	; (80eb4 <xTaskGenericCreate+0x1c8>)
   80e56:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80e5a:	4b21      	ldr	r3, [pc, #132]	; (80ee0 <xTaskGenericCreate+0x1f4>)
   80e5c:	4798      	blx	r3
		taskEXIT_CRITICAL();
   80e5e:	4b21      	ldr	r3, [pc, #132]	; (80ee4 <xTaskGenericCreate+0x1f8>)
   80e60:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   80e62:	4b12      	ldr	r3, [pc, #72]	; (80eac <xTaskGenericCreate+0x1c0>)
   80e64:	681b      	ldr	r3, [r3, #0]
   80e66:	b14b      	cbz	r3, 80e7c <xTaskGenericCreate+0x190>
			if( pxCurrentTCB->uxPriority < uxPriority )
   80e68:	4b0f      	ldr	r3, [pc, #60]	; (80ea8 <xTaskGenericCreate+0x1bc>)
   80e6a:	681b      	ldr	r3, [r3, #0]
   80e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80e6e:	429f      	cmp	r7, r3
   80e70:	d907      	bls.n	80e82 <xTaskGenericCreate+0x196>
				portYIELD_WITHIN_API();
   80e72:	4b1d      	ldr	r3, [pc, #116]	; (80ee8 <xTaskGenericCreate+0x1fc>)
   80e74:	4798      	blx	r3
   80e76:	2001      	movs	r0, #1
   80e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e7c:	2001      	movs	r0, #1
   80e7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e82:	2001      	movs	r0, #1
	return xReturn;
   80e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80e88:	000804c9 	.word	0x000804c9
   80e8c:	00080629 	.word	0x00080629
   80e90:	00083cfd 	.word	0x00083cfd
   80e94:	00083f95 	.word	0x00083f95
   80e98:	000803e7 	.word	0x000803e7
   80e9c:	0008047d 	.word	0x0008047d
   80ea0:	000804d9 	.word	0x000804d9
   80ea4:	2007abd0 	.word	0x2007abd0
   80ea8:	2007ab60 	.word	0x2007ab60
   80eac:	2007ac30 	.word	0x2007ac30
   80eb0:	000806f5 	.word	0x000806f5
   80eb4:	2007ab6c 	.word	0x2007ab6c
   80eb8:	000803d1 	.word	0x000803d1
   80ebc:	2007ac00 	.word	0x2007ac00
   80ec0:	2007ac1c 	.word	0x2007ac1c
   80ec4:	2007ac48 	.word	0x2007ac48
   80ec8:	2007ac34 	.word	0x2007ac34
   80ecc:	2007ab64 	.word	0x2007ab64
   80ed0:	2007ab68 	.word	0x2007ab68
   80ed4:	2007abe8 	.word	0x2007abe8
   80ed8:	2007abdc 	.word	0x2007abdc
   80edc:	2007abe4 	.word	0x2007abe4
   80ee0:	000803ed 	.word	0x000803ed
   80ee4:	000804f9 	.word	0x000804f9
   80ee8:	000804b9 	.word	0x000804b9
   80eec:	2007abec 	.word	0x2007abec

00080ef0 <vTaskStartScheduler>:
{
   80ef0:	b510      	push	{r4, lr}
   80ef2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   80ef4:	2300      	movs	r3, #0
   80ef6:	9303      	str	r3, [sp, #12]
   80ef8:	9302      	str	r3, [sp, #8]
   80efa:	9301      	str	r3, [sp, #4]
   80efc:	9300      	str	r3, [sp, #0]
   80efe:	2282      	movs	r2, #130	; 0x82
   80f00:	490d      	ldr	r1, [pc, #52]	; (80f38 <vTaskStartScheduler+0x48>)
   80f02:	480e      	ldr	r0, [pc, #56]	; (80f3c <vTaskStartScheduler+0x4c>)
   80f04:	4c0e      	ldr	r4, [pc, #56]	; (80f40 <vTaskStartScheduler+0x50>)
   80f06:	47a0      	blx	r4
		if( xReturn == pdPASS )
   80f08:	2801      	cmp	r0, #1
   80f0a:	d002      	beq.n	80f12 <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
   80f0c:	b180      	cbz	r0, 80f30 <vTaskStartScheduler+0x40>
}
   80f0e:	b004      	add	sp, #16
   80f10:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   80f12:	4b0c      	ldr	r3, [pc, #48]	; (80f44 <vTaskStartScheduler+0x54>)
   80f14:	4798      	blx	r3
	if( xReturn == pdPASS )
   80f16:	2801      	cmp	r0, #1
   80f18:	d1f8      	bne.n	80f0c <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   80f1a:	4b0b      	ldr	r3, [pc, #44]	; (80f48 <vTaskStartScheduler+0x58>)
   80f1c:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
   80f1e:	2201      	movs	r2, #1
   80f20:	4b0a      	ldr	r3, [pc, #40]	; (80f4c <vTaskStartScheduler+0x5c>)
   80f22:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   80f24:	2200      	movs	r2, #0
   80f26:	4b0a      	ldr	r3, [pc, #40]	; (80f50 <vTaskStartScheduler+0x60>)
   80f28:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   80f2a:	4b0a      	ldr	r3, [pc, #40]	; (80f54 <vTaskStartScheduler+0x64>)
   80f2c:	4798      	blx	r3
   80f2e:	e7ee      	b.n	80f0e <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
   80f30:	4b05      	ldr	r3, [pc, #20]	; (80f48 <vTaskStartScheduler+0x58>)
   80f32:	4798      	blx	r3
   80f34:	bf00      	nop
   80f36:	e7fd      	b.n	80f34 <vTaskStartScheduler+0x44>
   80f38:	00086aa8 	.word	0x00086aa8
   80f3c:	0008123d 	.word	0x0008123d
   80f40:	00080ced 	.word	0x00080ced
   80f44:	000816e9 	.word	0x000816e9
   80f48:	000804c9 	.word	0x000804c9
   80f4c:	2007ac30 	.word	0x2007ac30
   80f50:	2007ac5c 	.word	0x2007ac5c
   80f54:	00080599 	.word	0x00080599

00080f58 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   80f58:	4a02      	ldr	r2, [pc, #8]	; (80f64 <vTaskSuspendAll+0xc>)
   80f5a:	6813      	ldr	r3, [r2, #0]
   80f5c:	3301      	adds	r3, #1
   80f5e:	6013      	str	r3, [r2, #0]
   80f60:	4770      	bx	lr
   80f62:	bf00      	nop
   80f64:	2007abd8 	.word	0x2007abd8

00080f68 <xTaskGetTickCount>:
{
   80f68:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
   80f6a:	4b04      	ldr	r3, [pc, #16]	; (80f7c <xTaskGetTickCount+0x14>)
   80f6c:	4798      	blx	r3
		xTicks = xTickCount;
   80f6e:	4b04      	ldr	r3, [pc, #16]	; (80f80 <xTaskGetTickCount+0x18>)
   80f70:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
   80f72:	4b04      	ldr	r3, [pc, #16]	; (80f84 <xTaskGetTickCount+0x1c>)
   80f74:	4798      	blx	r3
}
   80f76:	4620      	mov	r0, r4
   80f78:	bd10      	pop	{r4, pc}
   80f7a:	bf00      	nop
   80f7c:	000804d9 	.word	0x000804d9
   80f80:	2007ac5c 	.word	0x2007ac5c
   80f84:	000804f9 	.word	0x000804f9

00080f88 <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80f88:	4b3d      	ldr	r3, [pc, #244]	; (81080 <vTaskIncrementTick+0xf8>)
   80f8a:	681b      	ldr	r3, [r3, #0]
   80f8c:	2b00      	cmp	r3, #0
   80f8e:	d16f      	bne.n	81070 <vTaskIncrementTick+0xe8>
{
   80f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		++xTickCount;
   80f94:	4b3b      	ldr	r3, [pc, #236]	; (81084 <vTaskIncrementTick+0xfc>)
   80f96:	681a      	ldr	r2, [r3, #0]
   80f98:	3201      	adds	r2, #1
   80f9a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80f9c:	681b      	ldr	r3, [r3, #0]
   80f9e:	b9ab      	cbnz	r3, 80fcc <vTaskIncrementTick+0x44>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80fa0:	4b39      	ldr	r3, [pc, #228]	; (81088 <vTaskIncrementTick+0x100>)
   80fa2:	681b      	ldr	r3, [r3, #0]
   80fa4:	681b      	ldr	r3, [r3, #0]
   80fa6:	2b00      	cmp	r3, #0
   80fa8:	d128      	bne.n	80ffc <vTaskIncrementTick+0x74>
			pxTemp = pxDelayedTaskList;
   80faa:	4b37      	ldr	r3, [pc, #220]	; (81088 <vTaskIncrementTick+0x100>)
   80fac:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80fae:	4a37      	ldr	r2, [pc, #220]	; (8108c <vTaskIncrementTick+0x104>)
   80fb0:	6810      	ldr	r0, [r2, #0]
   80fb2:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80fb4:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80fb6:	4936      	ldr	r1, [pc, #216]	; (81090 <vTaskIncrementTick+0x108>)
   80fb8:	680a      	ldr	r2, [r1, #0]
   80fba:	3201      	adds	r2, #1
   80fbc:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80fbe:	681b      	ldr	r3, [r3, #0]
   80fc0:	681b      	ldr	r3, [r3, #0]
   80fc2:	b9fb      	cbnz	r3, 81004 <vTaskIncrementTick+0x7c>
				xNextTaskUnblockTime = portMAX_DELAY;
   80fc4:	f04f 32ff 	mov.w	r2, #4294967295
   80fc8:	4b32      	ldr	r3, [pc, #200]	; (81094 <vTaskIncrementTick+0x10c>)
   80fca:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
   80fcc:	4b2d      	ldr	r3, [pc, #180]	; (81084 <vTaskIncrementTick+0xfc>)
   80fce:	681a      	ldr	r2, [r3, #0]
   80fd0:	4b30      	ldr	r3, [pc, #192]	; (81094 <vTaskIncrementTick+0x10c>)
   80fd2:	681b      	ldr	r3, [r3, #0]
   80fd4:	429a      	cmp	r2, r3
   80fd6:	d350      	bcc.n	8107a <vTaskIncrementTick+0xf2>
   80fd8:	4b2b      	ldr	r3, [pc, #172]	; (81088 <vTaskIncrementTick+0x100>)
   80fda:	681b      	ldr	r3, [r3, #0]
   80fdc:	681b      	ldr	r3, [r3, #0]
   80fde:	b1cb      	cbz	r3, 81014 <vTaskIncrementTick+0x8c>
   80fe0:	4b29      	ldr	r3, [pc, #164]	; (81088 <vTaskIncrementTick+0x100>)
   80fe2:	681b      	ldr	r3, [r3, #0]
   80fe4:	68db      	ldr	r3, [r3, #12]
   80fe6:	68dc      	ldr	r4, [r3, #12]
   80fe8:	6863      	ldr	r3, [r4, #4]
   80fea:	4a26      	ldr	r2, [pc, #152]	; (81084 <vTaskIncrementTick+0xfc>)
   80fec:	6812      	ldr	r2, [r2, #0]
   80fee:	4293      	cmp	r3, r2
   80ff0:	d816      	bhi.n	81020 <vTaskIncrementTick+0x98>
   80ff2:	4e29      	ldr	r6, [pc, #164]	; (81098 <vTaskIncrementTick+0x110>)
   80ff4:	4f29      	ldr	r7, [pc, #164]	; (8109c <vTaskIncrementTick+0x114>)
   80ff6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 810ac <vTaskIncrementTick+0x124>
   80ffa:	e02f      	b.n	8105c <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80ffc:	4b28      	ldr	r3, [pc, #160]	; (810a0 <vTaskIncrementTick+0x118>)
   80ffe:	4798      	blx	r3
   81000:	bf00      	nop
   81002:	e7fd      	b.n	81000 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81004:	4b20      	ldr	r3, [pc, #128]	; (81088 <vTaskIncrementTick+0x100>)
   81006:	681b      	ldr	r3, [r3, #0]
   81008:	68db      	ldr	r3, [r3, #12]
   8100a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8100c:	685a      	ldr	r2, [r3, #4]
   8100e:	4b21      	ldr	r3, [pc, #132]	; (81094 <vTaskIncrementTick+0x10c>)
   81010:	601a      	str	r2, [r3, #0]
   81012:	e7db      	b.n	80fcc <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   81014:	f04f 32ff 	mov.w	r2, #4294967295
   81018:	4b1e      	ldr	r3, [pc, #120]	; (81094 <vTaskIncrementTick+0x10c>)
   8101a:	601a      	str	r2, [r3, #0]
   8101c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81020:	4a1c      	ldr	r2, [pc, #112]	; (81094 <vTaskIncrementTick+0x10c>)
   81022:	6013      	str	r3, [r2, #0]
   81024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81028:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8102a:	683b      	ldr	r3, [r7, #0]
   8102c:	4298      	cmp	r0, r3
   8102e:	bf88      	it	hi
   81030:	6038      	strhi	r0, [r7, #0]
   81032:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81036:	4629      	mov	r1, r5
   81038:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   8103c:	4b19      	ldr	r3, [pc, #100]	; (810a4 <vTaskIncrementTick+0x11c>)
   8103e:	4798      	blx	r3
   81040:	4b11      	ldr	r3, [pc, #68]	; (81088 <vTaskIncrementTick+0x100>)
   81042:	681b      	ldr	r3, [r3, #0]
   81044:	681b      	ldr	r3, [r3, #0]
   81046:	2b00      	cmp	r3, #0
   81048:	d0e4      	beq.n	81014 <vTaskIncrementTick+0x8c>
   8104a:	4b0f      	ldr	r3, [pc, #60]	; (81088 <vTaskIncrementTick+0x100>)
   8104c:	681b      	ldr	r3, [r3, #0]
   8104e:	68db      	ldr	r3, [r3, #12]
   81050:	68dc      	ldr	r4, [r3, #12]
   81052:	6863      	ldr	r3, [r4, #4]
   81054:	4a0b      	ldr	r2, [pc, #44]	; (81084 <vTaskIncrementTick+0xfc>)
   81056:	6812      	ldr	r2, [r2, #0]
   81058:	4293      	cmp	r3, r2
   8105a:	d8e1      	bhi.n	81020 <vTaskIncrementTick+0x98>
   8105c:	1d25      	adds	r5, r4, #4
   8105e:	4628      	mov	r0, r5
   81060:	47b0      	blx	r6
   81062:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81064:	2b00      	cmp	r3, #0
   81066:	d0df      	beq.n	81028 <vTaskIncrementTick+0xa0>
   81068:	f104 0018 	add.w	r0, r4, #24
   8106c:	47b0      	blx	r6
   8106e:	e7db      	b.n	81028 <vTaskIncrementTick+0xa0>
		++uxMissedTicks;
   81070:	4a0d      	ldr	r2, [pc, #52]	; (810a8 <vTaskIncrementTick+0x120>)
   81072:	6813      	ldr	r3, [r2, #0]
   81074:	3301      	adds	r3, #1
   81076:	6013      	str	r3, [r2, #0]
}
   81078:	4770      	bx	lr
   8107a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8107e:	bf00      	nop
   81080:	2007abd8 	.word	0x2007abd8
   81084:	2007ac5c 	.word	0x2007ac5c
   81088:	2007ab64 	.word	0x2007ab64
   8108c:	2007ab68 	.word	0x2007ab68
   81090:	2007ac18 	.word	0x2007ac18
   81094:	20070134 	.word	0x20070134
   81098:	00080443 	.word	0x00080443
   8109c:	2007abe4 	.word	0x2007abe4
   810a0:	000804c9 	.word	0x000804c9
   810a4:	000803ed 	.word	0x000803ed
   810a8:	2007abd4 	.word	0x2007abd4
   810ac:	2007ab6c 	.word	0x2007ab6c

000810b0 <xTaskResumeAll>:
{
   810b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
   810b4:	4b2f      	ldr	r3, [pc, #188]	; (81174 <xTaskResumeAll+0xc4>)
   810b6:	681b      	ldr	r3, [r3, #0]
   810b8:	b91b      	cbnz	r3, 810c2 <xTaskResumeAll+0x12>
   810ba:	4b2f      	ldr	r3, [pc, #188]	; (81178 <xTaskResumeAll+0xc8>)
   810bc:	4798      	blx	r3
   810be:	bf00      	nop
   810c0:	e7fd      	b.n	810be <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
   810c2:	4b2e      	ldr	r3, [pc, #184]	; (8117c <xTaskResumeAll+0xcc>)
   810c4:	4798      	blx	r3
		--uxSchedulerSuspended;
   810c6:	4b2b      	ldr	r3, [pc, #172]	; (81174 <xTaskResumeAll+0xc4>)
   810c8:	681a      	ldr	r2, [r3, #0]
   810ca:	3a01      	subs	r2, #1
   810cc:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   810ce:	681b      	ldr	r3, [r3, #0]
   810d0:	2b00      	cmp	r3, #0
   810d2:	d14d      	bne.n	81170 <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   810d4:	4b2a      	ldr	r3, [pc, #168]	; (81180 <xTaskResumeAll+0xd0>)
   810d6:	681b      	ldr	r3, [r3, #0]
   810d8:	b12b      	cbz	r3, 810e6 <xTaskResumeAll+0x36>
   810da:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   810dc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 811ac <xTaskResumeAll+0xfc>
					uxListRemove( &( pxTCB->xEventListItem ) );
   810e0:	4f28      	ldr	r7, [pc, #160]	; (81184 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyQueue( pxTCB );
   810e2:	4e29      	ldr	r6, [pc, #164]	; (81188 <xTaskResumeAll+0xd8>)
   810e4:	e023      	b.n	8112e <xTaskResumeAll+0x7e>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   810e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   810e8:	4b28      	ldr	r3, [pc, #160]	; (8118c <xTaskResumeAll+0xdc>)
   810ea:	4798      	blx	r3
}
   810ec:	4620      	mov	r0, r4
   810ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   810f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   810f6:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   810f8:	f105 0018 	add.w	r0, r5, #24
   810fc:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   810fe:	f105 0904 	add.w	r9, r5, #4
   81102:	4648      	mov	r0, r9
   81104:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81106:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   81108:	6833      	ldr	r3, [r6, #0]
   8110a:	4298      	cmp	r0, r3
   8110c:	bf88      	it	hi
   8110e:	6030      	strhi	r0, [r6, #0]
   81110:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81114:	4649      	mov	r1, r9
   81116:	4b1e      	ldr	r3, [pc, #120]	; (81190 <xTaskResumeAll+0xe0>)
   81118:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8111c:	4b1d      	ldr	r3, [pc, #116]	; (81194 <xTaskResumeAll+0xe4>)
   8111e:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81120:	4b1d      	ldr	r3, [pc, #116]	; (81198 <xTaskResumeAll+0xe8>)
   81122:	681b      	ldr	r3, [r3, #0]
   81124:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   81126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
   81128:	429a      	cmp	r2, r3
   8112a:	bf28      	it	cs
   8112c:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8112e:	f8d8 3000 	ldr.w	r3, [r8]
   81132:	2b00      	cmp	r3, #0
   81134:	d1dd      	bne.n	810f2 <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81136:	4b19      	ldr	r3, [pc, #100]	; (8119c <xTaskResumeAll+0xec>)
   81138:	681b      	ldr	r3, [r3, #0]
   8113a:	b193      	cbz	r3, 81162 <xTaskResumeAll+0xb2>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8113c:	4b17      	ldr	r3, [pc, #92]	; (8119c <xTaskResumeAll+0xec>)
   8113e:	681b      	ldr	r3, [r3, #0]
   81140:	b143      	cbz	r3, 81154 <xTaskResumeAll+0xa4>
						vTaskIncrementTick();
   81142:	4d17      	ldr	r5, [pc, #92]	; (811a0 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81144:	4c15      	ldr	r4, [pc, #84]	; (8119c <xTaskResumeAll+0xec>)
						vTaskIncrementTick();
   81146:	47a8      	blx	r5
						--uxMissedTicks;
   81148:	6823      	ldr	r3, [r4, #0]
   8114a:	3b01      	subs	r3, #1
   8114c:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8114e:	6823      	ldr	r3, [r4, #0]
   81150:	2b00      	cmp	r3, #0
   81152:	d1f8      	bne.n	81146 <xTaskResumeAll+0x96>
					xMissedYield = pdFALSE;
   81154:	2200      	movs	r2, #0
   81156:	4b13      	ldr	r3, [pc, #76]	; (811a4 <xTaskResumeAll+0xf4>)
   81158:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   8115a:	4b13      	ldr	r3, [pc, #76]	; (811a8 <xTaskResumeAll+0xf8>)
   8115c:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
   8115e:	2401      	movs	r4, #1
   81160:	e7c2      	b.n	810e8 <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81162:	2c01      	cmp	r4, #1
   81164:	d0f6      	beq.n	81154 <xTaskResumeAll+0xa4>
   81166:	4b0f      	ldr	r3, [pc, #60]	; (811a4 <xTaskResumeAll+0xf4>)
   81168:	681b      	ldr	r3, [r3, #0]
   8116a:	2b01      	cmp	r3, #1
   8116c:	d1bc      	bne.n	810e8 <xTaskResumeAll+0x38>
   8116e:	e7f1      	b.n	81154 <xTaskResumeAll+0xa4>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81170:	2400      	movs	r4, #0
   81172:	e7b9      	b.n	810e8 <xTaskResumeAll+0x38>
   81174:	2007abd8 	.word	0x2007abd8
   81178:	000804c9 	.word	0x000804c9
   8117c:	000804d9 	.word	0x000804d9
   81180:	2007abd0 	.word	0x2007abd0
   81184:	00080443 	.word	0x00080443
   81188:	2007abe4 	.word	0x2007abe4
   8118c:	000804f9 	.word	0x000804f9
   81190:	2007ab6c 	.word	0x2007ab6c
   81194:	000803ed 	.word	0x000803ed
   81198:	2007ab60 	.word	0x2007ab60
   8119c:	2007abd4 	.word	0x2007abd4
   811a0:	00080f89 	.word	0x00080f89
   811a4:	2007ac14 	.word	0x2007ac14
   811a8:	000804b9 	.word	0x000804b9
   811ac:	2007ac1c 	.word	0x2007ac1c

000811b0 <vTaskDelayUntil>:
	{
   811b0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   811b2:	b130      	cbz	r0, 811c2 <vTaskDelayUntil+0x12>
   811b4:	460c      	mov	r4, r1
   811b6:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   811b8:	b939      	cbnz	r1, 811ca <vTaskDelayUntil+0x1a>
   811ba:	4b18      	ldr	r3, [pc, #96]	; (8121c <vTaskDelayUntil+0x6c>)
   811bc:	4798      	blx	r3
   811be:	bf00      	nop
   811c0:	e7fd      	b.n	811be <vTaskDelayUntil+0xe>
		configASSERT( pxPreviousWakeTime );
   811c2:	4b16      	ldr	r3, [pc, #88]	; (8121c <vTaskDelayUntil+0x6c>)
   811c4:	4798      	blx	r3
   811c6:	bf00      	nop
   811c8:	e7fd      	b.n	811c6 <vTaskDelayUntil+0x16>
		vTaskSuspendAll();
   811ca:	4b15      	ldr	r3, [pc, #84]	; (81220 <vTaskDelayUntil+0x70>)
   811cc:	4798      	blx	r3
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   811ce:	682b      	ldr	r3, [r5, #0]
   811d0:	441c      	add	r4, r3
			if( xTickCount < *pxPreviousWakeTime )
   811d2:	4a14      	ldr	r2, [pc, #80]	; (81224 <vTaskDelayUntil+0x74>)
   811d4:	6812      	ldr	r2, [r2, #0]
   811d6:	4293      	cmp	r3, r2
   811d8:	d90a      	bls.n	811f0 <vTaskDelayUntil+0x40>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   811da:	42a3      	cmp	r3, r4
   811dc:	d90e      	bls.n	811fc <vTaskDelayUntil+0x4c>
   811de:	4b11      	ldr	r3, [pc, #68]	; (81224 <vTaskDelayUntil+0x74>)
   811e0:	681b      	ldr	r3, [r3, #0]
			*pxPreviousWakeTime = xTimeToWake;
   811e2:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   811e4:	429c      	cmp	r4, r3
   811e6:	d80f      	bhi.n	81208 <vTaskDelayUntil+0x58>
		xAlreadyYielded = xTaskResumeAll();
   811e8:	4b0f      	ldr	r3, [pc, #60]	; (81228 <vTaskDelayUntil+0x78>)
   811ea:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   811ec:	b140      	cbz	r0, 81200 <vTaskDelayUntil+0x50>
   811ee:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   811f0:	42a3      	cmp	r3, r4
   811f2:	d808      	bhi.n	81206 <vTaskDelayUntil+0x56>
   811f4:	4b0b      	ldr	r3, [pc, #44]	; (81224 <vTaskDelayUntil+0x74>)
   811f6:	681b      	ldr	r3, [r3, #0]
   811f8:	429c      	cmp	r4, r3
   811fa:	d804      	bhi.n	81206 <vTaskDelayUntil+0x56>
			*pxPreviousWakeTime = xTimeToWake;
   811fc:	602c      	str	r4, [r5, #0]
   811fe:	e7f3      	b.n	811e8 <vTaskDelayUntil+0x38>
			portYIELD_WITHIN_API();
   81200:	4b0a      	ldr	r3, [pc, #40]	; (8122c <vTaskDelayUntil+0x7c>)
   81202:	4798      	blx	r3
	}
   81204:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
   81206:	602c      	str	r4, [r5, #0]
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81208:	4b09      	ldr	r3, [pc, #36]	; (81230 <vTaskDelayUntil+0x80>)
   8120a:	6818      	ldr	r0, [r3, #0]
   8120c:	3004      	adds	r0, #4
   8120e:	4b09      	ldr	r3, [pc, #36]	; (81234 <vTaskDelayUntil+0x84>)
   81210:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81212:	4620      	mov	r0, r4
   81214:	4b08      	ldr	r3, [pc, #32]	; (81238 <vTaskDelayUntil+0x88>)
   81216:	4798      	blx	r3
   81218:	e7e6      	b.n	811e8 <vTaskDelayUntil+0x38>
   8121a:	bf00      	nop
   8121c:	000804c9 	.word	0x000804c9
   81220:	00080f59 	.word	0x00080f59
   81224:	2007ac5c 	.word	0x2007ac5c
   81228:	000810b1 	.word	0x000810b1
   8122c:	000804b9 	.word	0x000804b9
   81230:	2007ab60 	.word	0x2007ab60
   81234:	00080443 	.word	0x00080443
   81238:	00080c95 	.word	0x00080c95

0008123c <prvIdleTask>:
{
   8123c:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8123e:	4d16      	ldr	r5, [pc, #88]	; (81298 <prvIdleTask+0x5c>)
			vTaskSuspendAll();
   81240:	f8df 8078 	ldr.w	r8, [pc, #120]	; 812bc <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81244:	4e15      	ldr	r6, [pc, #84]	; (8129c <prvIdleTask+0x60>)
   81246:	e024      	b.n	81292 <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81248:	4b15      	ldr	r3, [pc, #84]	; (812a0 <prvIdleTask+0x64>)
   8124a:	681b      	ldr	r3, [r3, #0]
   8124c:	2b01      	cmp	r3, #1
   8124e:	d81e      	bhi.n	8128e <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81250:	682b      	ldr	r3, [r5, #0]
   81252:	2b00      	cmp	r3, #0
   81254:	d0f8      	beq.n	81248 <prvIdleTask+0xc>
			vTaskSuspendAll();
   81256:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81258:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   8125a:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
   8125c:	2c00      	cmp	r4, #0
   8125e:	d0f7      	beq.n	81250 <prvIdleTask+0x14>
				taskENTER_CRITICAL();
   81260:	4b10      	ldr	r3, [pc, #64]	; (812a4 <prvIdleTask+0x68>)
   81262:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81264:	68f3      	ldr	r3, [r6, #12]
   81266:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81268:	1d20      	adds	r0, r4, #4
   8126a:	4b0f      	ldr	r3, [pc, #60]	; (812a8 <prvIdleTask+0x6c>)
   8126c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   8126e:	4a0f      	ldr	r2, [pc, #60]	; (812ac <prvIdleTask+0x70>)
   81270:	6813      	ldr	r3, [r2, #0]
   81272:	3b01      	subs	r3, #1
   81274:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81276:	682b      	ldr	r3, [r5, #0]
   81278:	3b01      	subs	r3, #1
   8127a:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
   8127c:	4b0c      	ldr	r3, [pc, #48]	; (812b0 <prvIdleTask+0x74>)
   8127e:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81280:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81282:	f8df 903c 	ldr.w	r9, [pc, #60]	; 812c0 <prvIdleTask+0x84>
   81286:	47c8      	blx	r9
		vPortFree( pxTCB );
   81288:	4620      	mov	r0, r4
   8128a:	47c8      	blx	r9
   8128c:	e7e0      	b.n	81250 <prvIdleTask+0x14>
				taskYIELD();
   8128e:	4b09      	ldr	r3, [pc, #36]	; (812b4 <prvIdleTask+0x78>)
   81290:	4798      	blx	r3
			xTaskResumeAll();
   81292:	4f09      	ldr	r7, [pc, #36]	; (812b8 <prvIdleTask+0x7c>)
   81294:	e7dc      	b.n	81250 <prvIdleTask+0x14>
   81296:	bf00      	nop
   81298:	2007abe0 	.word	0x2007abe0
   8129c:	2007ac48 	.word	0x2007ac48
   812a0:	2007ab6c 	.word	0x2007ab6c
   812a4:	000804d9 	.word	0x000804d9
   812a8:	00080443 	.word	0x00080443
   812ac:	2007abd0 	.word	0x2007abd0
   812b0:	000804f9 	.word	0x000804f9
   812b4:	000804b9 	.word	0x000804b9
   812b8:	000810b1 	.word	0x000810b1
   812bc:	00080f59 	.word	0x00080f59
   812c0:	000806f5 	.word	0x000806f5

000812c4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   812c4:	4b21      	ldr	r3, [pc, #132]	; (8134c <vTaskSwitchContext+0x88>)
   812c6:	681b      	ldr	r3, [r3, #0]
   812c8:	b9eb      	cbnz	r3, 81306 <vTaskSwitchContext+0x42>
{
   812ca:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   812cc:	4b20      	ldr	r3, [pc, #128]	; (81350 <vTaskSwitchContext+0x8c>)
   812ce:	681b      	ldr	r3, [r3, #0]
   812d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   812d4:	009b      	lsls	r3, r3, #2
   812d6:	4a1f      	ldr	r2, [pc, #124]	; (81354 <vTaskSwitchContext+0x90>)
   812d8:	58d3      	ldr	r3, [r2, r3]
   812da:	b9c3      	cbnz	r3, 8130e <vTaskSwitchContext+0x4a>
   812dc:	4b1c      	ldr	r3, [pc, #112]	; (81350 <vTaskSwitchContext+0x8c>)
   812de:	681b      	ldr	r3, [r3, #0]
   812e0:	b16b      	cbz	r3, 812fe <vTaskSwitchContext+0x3a>
   812e2:	4a1b      	ldr	r2, [pc, #108]	; (81350 <vTaskSwitchContext+0x8c>)
   812e4:	491b      	ldr	r1, [pc, #108]	; (81354 <vTaskSwitchContext+0x90>)
   812e6:	6813      	ldr	r3, [r2, #0]
   812e8:	3b01      	subs	r3, #1
   812ea:	6013      	str	r3, [r2, #0]
   812ec:	6813      	ldr	r3, [r2, #0]
   812ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   812f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   812f6:	b953      	cbnz	r3, 8130e <vTaskSwitchContext+0x4a>
   812f8:	6813      	ldr	r3, [r2, #0]
   812fa:	2b00      	cmp	r3, #0
   812fc:	d1f3      	bne.n	812e6 <vTaskSwitchContext+0x22>
   812fe:	4b16      	ldr	r3, [pc, #88]	; (81358 <vTaskSwitchContext+0x94>)
   81300:	4798      	blx	r3
   81302:	bf00      	nop
   81304:	e7fd      	b.n	81302 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   81306:	2201      	movs	r2, #1
   81308:	4b14      	ldr	r3, [pc, #80]	; (8135c <vTaskSwitchContext+0x98>)
   8130a:	601a      	str	r2, [r3, #0]
   8130c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8130e:	4b10      	ldr	r3, [pc, #64]	; (81350 <vTaskSwitchContext+0x8c>)
   81310:	681b      	ldr	r3, [r3, #0]
   81312:	4a10      	ldr	r2, [pc, #64]	; (81354 <vTaskSwitchContext+0x90>)
   81314:	0099      	lsls	r1, r3, #2
   81316:	18c8      	adds	r0, r1, r3
   81318:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   8131c:	6844      	ldr	r4, [r0, #4]
   8131e:	6864      	ldr	r4, [r4, #4]
   81320:	6044      	str	r4, [r0, #4]
   81322:	4419      	add	r1, r3
   81324:	4602      	mov	r2, r0
   81326:	3208      	adds	r2, #8
   81328:	4294      	cmp	r4, r2
   8132a:	d009      	beq.n	81340 <vTaskSwitchContext+0x7c>
   8132c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81330:	4a08      	ldr	r2, [pc, #32]	; (81354 <vTaskSwitchContext+0x90>)
   81332:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81336:	685b      	ldr	r3, [r3, #4]
   81338:	68da      	ldr	r2, [r3, #12]
   8133a:	4b09      	ldr	r3, [pc, #36]	; (81360 <vTaskSwitchContext+0x9c>)
   8133c:	601a      	str	r2, [r3, #0]
   8133e:	bd10      	pop	{r4, pc}
   81340:	6860      	ldr	r0, [r4, #4]
   81342:	4a04      	ldr	r2, [pc, #16]	; (81354 <vTaskSwitchContext+0x90>)
   81344:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81348:	6050      	str	r0, [r2, #4]
   8134a:	e7ef      	b.n	8132c <vTaskSwitchContext+0x68>
   8134c:	2007abd8 	.word	0x2007abd8
   81350:	2007abe4 	.word	0x2007abe4
   81354:	2007ab6c 	.word	0x2007ab6c
   81358:	000804c9 	.word	0x000804c9
   8135c:	2007ac14 	.word	0x2007ac14
   81360:	2007ab60 	.word	0x2007ab60

00081364 <vTaskPlaceOnEventList>:
{
   81364:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
   81366:	b190      	cbz	r0, 8138e <vTaskPlaceOnEventList+0x2a>
   81368:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8136a:	4d0e      	ldr	r5, [pc, #56]	; (813a4 <vTaskPlaceOnEventList+0x40>)
   8136c:	6829      	ldr	r1, [r5, #0]
   8136e:	3118      	adds	r1, #24
   81370:	4b0d      	ldr	r3, [pc, #52]	; (813a8 <vTaskPlaceOnEventList+0x44>)
   81372:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81374:	6828      	ldr	r0, [r5, #0]
   81376:	3004      	adds	r0, #4
   81378:	4b0c      	ldr	r3, [pc, #48]	; (813ac <vTaskPlaceOnEventList+0x48>)
   8137a:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
   8137c:	f1b4 3fff 	cmp.w	r4, #4294967295
   81380:	d009      	beq.n	81396 <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
   81382:	4b0b      	ldr	r3, [pc, #44]	; (813b0 <vTaskPlaceOnEventList+0x4c>)
   81384:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81386:	4420      	add	r0, r4
   81388:	4b0a      	ldr	r3, [pc, #40]	; (813b4 <vTaskPlaceOnEventList+0x50>)
   8138a:	4798      	blx	r3
   8138c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   8138e:	4b0a      	ldr	r3, [pc, #40]	; (813b8 <vTaskPlaceOnEventList+0x54>)
   81390:	4798      	blx	r3
   81392:	bf00      	nop
   81394:	e7fd      	b.n	81392 <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81396:	6829      	ldr	r1, [r5, #0]
   81398:	3104      	adds	r1, #4
   8139a:	4808      	ldr	r0, [pc, #32]	; (813bc <vTaskPlaceOnEventList+0x58>)
   8139c:	4b08      	ldr	r3, [pc, #32]	; (813c0 <vTaskPlaceOnEventList+0x5c>)
   8139e:	4798      	blx	r3
   813a0:	bd38      	pop	{r3, r4, r5, pc}
   813a2:	bf00      	nop
   813a4:	2007ab60 	.word	0x2007ab60
   813a8:	00080409 	.word	0x00080409
   813ac:	00080443 	.word	0x00080443
   813b0:	2007ac5c 	.word	0x2007ac5c
   813b4:	00080c95 	.word	0x00080c95
   813b8:	000804c9 	.word	0x000804c9
   813bc:	2007ac34 	.word	0x2007ac34
   813c0:	000803ed 	.word	0x000803ed

000813c4 <vTaskPlaceOnEventListRestricted>:
	{
   813c4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   813c6:	b178      	cbz	r0, 813e8 <vTaskPlaceOnEventListRestricted+0x24>
   813c8:	460d      	mov	r5, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   813ca:	4c09      	ldr	r4, [pc, #36]	; (813f0 <vTaskPlaceOnEventListRestricted+0x2c>)
   813cc:	6821      	ldr	r1, [r4, #0]
   813ce:	3118      	adds	r1, #24
   813d0:	4b08      	ldr	r3, [pc, #32]	; (813f4 <vTaskPlaceOnEventListRestricted+0x30>)
   813d2:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   813d4:	6820      	ldr	r0, [r4, #0]
   813d6:	3004      	adds	r0, #4
   813d8:	4b07      	ldr	r3, [pc, #28]	; (813f8 <vTaskPlaceOnEventListRestricted+0x34>)
   813da:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
   813dc:	4b07      	ldr	r3, [pc, #28]	; (813fc <vTaskPlaceOnEventListRestricted+0x38>)
   813de:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   813e0:	4428      	add	r0, r5
   813e2:	4b07      	ldr	r3, [pc, #28]	; (81400 <vTaskPlaceOnEventListRestricted+0x3c>)
   813e4:	4798      	blx	r3
   813e6:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
   813e8:	4b06      	ldr	r3, [pc, #24]	; (81404 <vTaskPlaceOnEventListRestricted+0x40>)
   813ea:	4798      	blx	r3
   813ec:	bf00      	nop
   813ee:	e7fd      	b.n	813ec <vTaskPlaceOnEventListRestricted+0x28>
   813f0:	2007ab60 	.word	0x2007ab60
   813f4:	000803ed 	.word	0x000803ed
   813f8:	00080443 	.word	0x00080443
   813fc:	2007ac5c 	.word	0x2007ac5c
   81400:	00080c95 	.word	0x00080c95
   81404:	000804c9 	.word	0x000804c9

00081408 <xTaskRemoveFromEventList>:
{
   81408:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8140a:	68c3      	ldr	r3, [r0, #12]
   8140c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8140e:	b31c      	cbz	r4, 81458 <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81410:	f104 0518 	add.w	r5, r4, #24
   81414:	4628      	mov	r0, r5
   81416:	4b15      	ldr	r3, [pc, #84]	; (8146c <xTaskRemoveFromEventList+0x64>)
   81418:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8141a:	4b15      	ldr	r3, [pc, #84]	; (81470 <xTaskRemoveFromEventList+0x68>)
   8141c:	681b      	ldr	r3, [r3, #0]
   8141e:	b9fb      	cbnz	r3, 81460 <xTaskRemoveFromEventList+0x58>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81420:	1d25      	adds	r5, r4, #4
   81422:	4628      	mov	r0, r5
   81424:	4b11      	ldr	r3, [pc, #68]	; (8146c <xTaskRemoveFromEventList+0x64>)
   81426:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81428:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8142a:	4b12      	ldr	r3, [pc, #72]	; (81474 <xTaskRemoveFromEventList+0x6c>)
   8142c:	681b      	ldr	r3, [r3, #0]
   8142e:	4298      	cmp	r0, r3
   81430:	bf84      	itt	hi
   81432:	4b10      	ldrhi	r3, [pc, #64]	; (81474 <xTaskRemoveFromEventList+0x6c>)
   81434:	6018      	strhi	r0, [r3, #0]
   81436:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8143a:	4629      	mov	r1, r5
   8143c:	4b0e      	ldr	r3, [pc, #56]	; (81478 <xTaskRemoveFromEventList+0x70>)
   8143e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81442:	4b0e      	ldr	r3, [pc, #56]	; (8147c <xTaskRemoveFromEventList+0x74>)
   81444:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81446:	4b0e      	ldr	r3, [pc, #56]	; (81480 <xTaskRemoveFromEventList+0x78>)
   81448:	681b      	ldr	r3, [r3, #0]
   8144a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8144e:	4298      	cmp	r0, r3
   81450:	bf34      	ite	cc
   81452:	2000      	movcc	r0, #0
   81454:	2001      	movcs	r0, #1
   81456:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   81458:	4b0a      	ldr	r3, [pc, #40]	; (81484 <xTaskRemoveFromEventList+0x7c>)
   8145a:	4798      	blx	r3
   8145c:	bf00      	nop
   8145e:	e7fd      	b.n	8145c <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81460:	4629      	mov	r1, r5
   81462:	4809      	ldr	r0, [pc, #36]	; (81488 <xTaskRemoveFromEventList+0x80>)
   81464:	4b05      	ldr	r3, [pc, #20]	; (8147c <xTaskRemoveFromEventList+0x74>)
   81466:	4798      	blx	r3
   81468:	e7ed      	b.n	81446 <xTaskRemoveFromEventList+0x3e>
   8146a:	bf00      	nop
   8146c:	00080443 	.word	0x00080443
   81470:	2007abd8 	.word	0x2007abd8
   81474:	2007abe4 	.word	0x2007abe4
   81478:	2007ab6c 	.word	0x2007ab6c
   8147c:	000803ed 	.word	0x000803ed
   81480:	2007ab60 	.word	0x2007ab60
   81484:	000804c9 	.word	0x000804c9
   81488:	2007ac1c 	.word	0x2007ac1c

0008148c <vTaskSetTimeOutState>:
{
   8148c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8148e:	b130      	cbz	r0, 8149e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81490:	4a05      	ldr	r2, [pc, #20]	; (814a8 <vTaskSetTimeOutState+0x1c>)
   81492:	6812      	ldr	r2, [r2, #0]
   81494:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81496:	4a05      	ldr	r2, [pc, #20]	; (814ac <vTaskSetTimeOutState+0x20>)
   81498:	6812      	ldr	r2, [r2, #0]
   8149a:	6042      	str	r2, [r0, #4]
   8149c:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
   8149e:	4b04      	ldr	r3, [pc, #16]	; (814b0 <vTaskSetTimeOutState+0x24>)
   814a0:	4798      	blx	r3
   814a2:	bf00      	nop
   814a4:	e7fd      	b.n	814a2 <vTaskSetTimeOutState+0x16>
   814a6:	bf00      	nop
   814a8:	2007ac18 	.word	0x2007ac18
   814ac:	2007ac5c 	.word	0x2007ac5c
   814b0:	000804c9 	.word	0x000804c9

000814b4 <xTaskCheckForTimeOut>:
{
   814b4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
   814b6:	b1e8      	cbz	r0, 814f4 <xTaskCheckForTimeOut+0x40>
   814b8:	460d      	mov	r5, r1
   814ba:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   814bc:	b1f1      	cbz	r1, 814fc <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
   814be:	4b18      	ldr	r3, [pc, #96]	; (81520 <xTaskCheckForTimeOut+0x6c>)
   814c0:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
   814c2:	682b      	ldr	r3, [r5, #0]
   814c4:	f1b3 3fff 	cmp.w	r3, #4294967295
   814c8:	d026      	beq.n	81518 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   814ca:	4a16      	ldr	r2, [pc, #88]	; (81524 <xTaskCheckForTimeOut+0x70>)
   814cc:	6812      	ldr	r2, [r2, #0]
   814ce:	6821      	ldr	r1, [r4, #0]
   814d0:	4291      	cmp	r1, r2
   814d2:	d004      	beq.n	814de <xTaskCheckForTimeOut+0x2a>
   814d4:	4a14      	ldr	r2, [pc, #80]	; (81528 <xTaskCheckForTimeOut+0x74>)
   814d6:	6812      	ldr	r2, [r2, #0]
   814d8:	6861      	ldr	r1, [r4, #4]
   814da:	4291      	cmp	r1, r2
   814dc:	d91e      	bls.n	8151c <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   814de:	4a12      	ldr	r2, [pc, #72]	; (81528 <xTaskCheckForTimeOut+0x74>)
   814e0:	6812      	ldr	r2, [r2, #0]
   814e2:	6861      	ldr	r1, [r4, #4]
   814e4:	1a52      	subs	r2, r2, r1
   814e6:	4293      	cmp	r3, r2
   814e8:	d80c      	bhi.n	81504 <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
   814ea:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   814ec:	4b0f      	ldr	r3, [pc, #60]	; (8152c <xTaskCheckForTimeOut+0x78>)
   814ee:	4798      	blx	r3
}
   814f0:	4620      	mov	r0, r4
   814f2:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
   814f4:	4b0e      	ldr	r3, [pc, #56]	; (81530 <xTaskCheckForTimeOut+0x7c>)
   814f6:	4798      	blx	r3
   814f8:	bf00      	nop
   814fa:	e7fd      	b.n	814f8 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   814fc:	4b0c      	ldr	r3, [pc, #48]	; (81530 <xTaskCheckForTimeOut+0x7c>)
   814fe:	4798      	blx	r3
   81500:	bf00      	nop
   81502:	e7fd      	b.n	81500 <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81504:	4a08      	ldr	r2, [pc, #32]	; (81528 <xTaskCheckForTimeOut+0x74>)
   81506:	6812      	ldr	r2, [r2, #0]
   81508:	1a52      	subs	r2, r2, r1
   8150a:	1a9b      	subs	r3, r3, r2
   8150c:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8150e:	4620      	mov	r0, r4
   81510:	4b08      	ldr	r3, [pc, #32]	; (81534 <xTaskCheckForTimeOut+0x80>)
   81512:	4798      	blx	r3
			xReturn = pdFALSE;
   81514:	2400      	movs	r4, #0
   81516:	e7e9      	b.n	814ec <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
   81518:	2400      	movs	r4, #0
   8151a:	e7e7      	b.n	814ec <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   8151c:	2401      	movs	r4, #1
   8151e:	e7e5      	b.n	814ec <xTaskCheckForTimeOut+0x38>
   81520:	000804d9 	.word	0x000804d9
   81524:	2007ac18 	.word	0x2007ac18
   81528:	2007ac5c 	.word	0x2007ac5c
   8152c:	000804f9 	.word	0x000804f9
   81530:	000804c9 	.word	0x000804c9
   81534:	0008148d 	.word	0x0008148d

00081538 <vTaskMissedYield>:
	xMissedYield = pdTRUE;
   81538:	2201      	movs	r2, #1
   8153a:	4b01      	ldr	r3, [pc, #4]	; (81540 <vTaskMissedYield+0x8>)
   8153c:	601a      	str	r2, [r3, #0]
   8153e:	4770      	bx	lr
   81540:	2007ac14 	.word	0x2007ac14

00081544 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81544:	4b01      	ldr	r3, [pc, #4]	; (8154c <xTaskGetCurrentTaskHandle+0x8>)
   81546:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81548:	4770      	bx	lr
   8154a:	bf00      	nop
   8154c:	2007ab60 	.word	0x2007ab60

00081550 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81550:	4b05      	ldr	r3, [pc, #20]	; (81568 <xTaskGetSchedulerState+0x18>)
   81552:	681b      	ldr	r3, [r3, #0]
   81554:	b133      	cbz	r3, 81564 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81556:	4b05      	ldr	r3, [pc, #20]	; (8156c <xTaskGetSchedulerState+0x1c>)
   81558:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8155a:	2b00      	cmp	r3, #0
   8155c:	bf0c      	ite	eq
   8155e:	2001      	moveq	r0, #1
   81560:	2002      	movne	r0, #2
   81562:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81564:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
   81566:	4770      	bx	lr
   81568:	2007ac30 	.word	0x2007ac30
   8156c:	2007abd8 	.word	0x2007abd8

00081570 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81570:	2800      	cmp	r0, #0
   81572:	d031      	beq.n	815d8 <vTaskPriorityInherit+0x68>
	{
   81574:	b538      	push	{r3, r4, r5, lr}
   81576:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81578:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8157a:	4918      	ldr	r1, [pc, #96]	; (815dc <vTaskPriorityInherit+0x6c>)
   8157c:	6809      	ldr	r1, [r1, #0]
   8157e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81580:	428b      	cmp	r3, r1
   81582:	d211      	bcs.n	815a8 <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81584:	4915      	ldr	r1, [pc, #84]	; (815dc <vTaskPriorityInherit+0x6c>)
   81586:	6809      	ldr	r1, [r1, #0]
   81588:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   8158a:	f1c1 0105 	rsb	r1, r1, #5
   8158e:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81590:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81594:	4912      	ldr	r1, [pc, #72]	; (815e0 <vTaskPriorityInherit+0x70>)
   81596:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8159a:	6941      	ldr	r1, [r0, #20]
   8159c:	4299      	cmp	r1, r3
   8159e:	d004      	beq.n	815aa <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   815a0:	4b0e      	ldr	r3, [pc, #56]	; (815dc <vTaskPriorityInherit+0x6c>)
   815a2:	681b      	ldr	r3, [r3, #0]
   815a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   815a6:	62c3      	str	r3, [r0, #44]	; 0x2c
   815a8:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   815aa:	1d04      	adds	r4, r0, #4
   815ac:	4620      	mov	r0, r4
   815ae:	4b0d      	ldr	r3, [pc, #52]	; (815e4 <vTaskPriorityInherit+0x74>)
   815b0:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   815b2:	4b0a      	ldr	r3, [pc, #40]	; (815dc <vTaskPriorityInherit+0x6c>)
   815b4:	681b      	ldr	r3, [r3, #0]
   815b6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   815b8:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   815ba:	4b0b      	ldr	r3, [pc, #44]	; (815e8 <vTaskPriorityInherit+0x78>)
   815bc:	681b      	ldr	r3, [r3, #0]
   815be:	4298      	cmp	r0, r3
   815c0:	bf84      	itt	hi
   815c2:	4b09      	ldrhi	r3, [pc, #36]	; (815e8 <vTaskPriorityInherit+0x78>)
   815c4:	6018      	strhi	r0, [r3, #0]
   815c6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   815ca:	4621      	mov	r1, r4
   815cc:	4b04      	ldr	r3, [pc, #16]	; (815e0 <vTaskPriorityInherit+0x70>)
   815ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   815d2:	4b06      	ldr	r3, [pc, #24]	; (815ec <vTaskPriorityInherit+0x7c>)
   815d4:	4798      	blx	r3
   815d6:	bd38      	pop	{r3, r4, r5, pc}
   815d8:	4770      	bx	lr
   815da:	bf00      	nop
   815dc:	2007ab60 	.word	0x2007ab60
   815e0:	2007ab6c 	.word	0x2007ab6c
   815e4:	00080443 	.word	0x00080443
   815e8:	2007abe4 	.word	0x2007abe4
   815ec:	000803ed 	.word	0x000803ed

000815f0 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   815f0:	b1e8      	cbz	r0, 8162e <vTaskPriorityDisinherit+0x3e>
	{
   815f2:	b538      	push	{r3, r4, r5, lr}
   815f4:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   815f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   815f8:	6c82      	ldr	r2, [r0, #72]	; 0x48
   815fa:	4291      	cmp	r1, r2
   815fc:	d016      	beq.n	8162c <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   815fe:	1d05      	adds	r5, r0, #4
   81600:	4628      	mov	r0, r5
   81602:	4b0b      	ldr	r3, [pc, #44]	; (81630 <vTaskPriorityDisinherit+0x40>)
   81604:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81606:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81608:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8160a:	f1c0 0305 	rsb	r3, r0, #5
   8160e:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81610:	4b08      	ldr	r3, [pc, #32]	; (81634 <vTaskPriorityDisinherit+0x44>)
   81612:	681b      	ldr	r3, [r3, #0]
   81614:	4298      	cmp	r0, r3
   81616:	bf84      	itt	hi
   81618:	4b06      	ldrhi	r3, [pc, #24]	; (81634 <vTaskPriorityDisinherit+0x44>)
   8161a:	6018      	strhi	r0, [r3, #0]
   8161c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81620:	4629      	mov	r1, r5
   81622:	4b05      	ldr	r3, [pc, #20]	; (81638 <vTaskPriorityDisinherit+0x48>)
   81624:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81628:	4b04      	ldr	r3, [pc, #16]	; (8163c <vTaskPriorityDisinherit+0x4c>)
   8162a:	4798      	blx	r3
   8162c:	bd38      	pop	{r3, r4, r5, pc}
   8162e:	4770      	bx	lr
   81630:	00080443 	.word	0x00080443
   81634:	2007abe4 	.word	0x2007abe4
   81638:	2007ab6c 	.word	0x2007ab6c
   8163c:	000803ed 	.word	0x000803ed

00081640 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81640:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81642:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81644:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81646:	4291      	cmp	r1, r2
   81648:	d80c      	bhi.n	81664 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8164a:	1ad2      	subs	r2, r2, r3
   8164c:	6983      	ldr	r3, [r0, #24]
   8164e:	429a      	cmp	r2, r3
   81650:	d301      	bcc.n	81656 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81652:	2001      	movs	r0, #1
   81654:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81656:	1d01      	adds	r1, r0, #4
   81658:	4b09      	ldr	r3, [pc, #36]	; (81680 <prvInsertTimerInActiveList+0x40>)
   8165a:	6818      	ldr	r0, [r3, #0]
   8165c:	4b09      	ldr	r3, [pc, #36]	; (81684 <prvInsertTimerInActiveList+0x44>)
   8165e:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81660:	2000      	movs	r0, #0
   81662:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81664:	429a      	cmp	r2, r3
   81666:	d201      	bcs.n	8166c <prvInsertTimerInActiveList+0x2c>
   81668:	4299      	cmp	r1, r3
   8166a:	d206      	bcs.n	8167a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8166c:	1d01      	adds	r1, r0, #4
   8166e:	4b06      	ldr	r3, [pc, #24]	; (81688 <prvInsertTimerInActiveList+0x48>)
   81670:	6818      	ldr	r0, [r3, #0]
   81672:	4b04      	ldr	r3, [pc, #16]	; (81684 <prvInsertTimerInActiveList+0x44>)
   81674:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81676:	2000      	movs	r0, #0
   81678:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   8167a:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   8167c:	bd08      	pop	{r3, pc}
   8167e:	bf00      	nop
   81680:	2007ac64 	.word	0x2007ac64
   81684:	00080409 	.word	0x00080409
   81688:	2007ac60 	.word	0x2007ac60

0008168c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   8168c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8168e:	4b0d      	ldr	r3, [pc, #52]	; (816c4 <prvCheckForValidListAndQueue+0x38>)
   81690:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81692:	4b0d      	ldr	r3, [pc, #52]	; (816c8 <prvCheckForValidListAndQueue+0x3c>)
   81694:	681b      	ldr	r3, [r3, #0]
   81696:	b113      	cbz	r3, 8169e <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
   81698:	4b0c      	ldr	r3, [pc, #48]	; (816cc <prvCheckForValidListAndQueue+0x40>)
   8169a:	4798      	blx	r3
   8169c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   8169e:	4d0c      	ldr	r5, [pc, #48]	; (816d0 <prvCheckForValidListAndQueue+0x44>)
   816a0:	4628      	mov	r0, r5
   816a2:	4e0c      	ldr	r6, [pc, #48]	; (816d4 <prvCheckForValidListAndQueue+0x48>)
   816a4:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   816a6:	4c0c      	ldr	r4, [pc, #48]	; (816d8 <prvCheckForValidListAndQueue+0x4c>)
   816a8:	4620      	mov	r0, r4
   816aa:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   816ac:	4b0b      	ldr	r3, [pc, #44]	; (816dc <prvCheckForValidListAndQueue+0x50>)
   816ae:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   816b0:	4b0b      	ldr	r3, [pc, #44]	; (816e0 <prvCheckForValidListAndQueue+0x54>)
   816b2:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   816b4:	2200      	movs	r2, #0
   816b6:	210c      	movs	r1, #12
   816b8:	2005      	movs	r0, #5
   816ba:	4b0a      	ldr	r3, [pc, #40]	; (816e4 <prvCheckForValidListAndQueue+0x58>)
   816bc:	4798      	blx	r3
   816be:	4b02      	ldr	r3, [pc, #8]	; (816c8 <prvCheckForValidListAndQueue+0x3c>)
   816c0:	6018      	str	r0, [r3, #0]
   816c2:	e7e9      	b.n	81698 <prvCheckForValidListAndQueue+0xc>
   816c4:	000804d9 	.word	0x000804d9
   816c8:	2007ac94 	.word	0x2007ac94
   816cc:	000804f9 	.word	0x000804f9
   816d0:	2007ac68 	.word	0x2007ac68
   816d4:	000803d1 	.word	0x000803d1
   816d8:	2007ac7c 	.word	0x2007ac7c
   816dc:	2007ac60 	.word	0x2007ac60
   816e0:	2007ac64 	.word	0x2007ac64
   816e4:	000808d1 	.word	0x000808d1

000816e8 <xTimerCreateTimerTask>:
{
   816e8:	b510      	push	{r4, lr}
   816ea:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
   816ec:	4b0b      	ldr	r3, [pc, #44]	; (8171c <xTimerCreateTimerTask+0x34>)
   816ee:	4798      	blx	r3
	if( xTimerQueue != NULL )
   816f0:	4b0b      	ldr	r3, [pc, #44]	; (81720 <xTimerCreateTimerTask+0x38>)
   816f2:	681b      	ldr	r3, [r3, #0]
   816f4:	b173      	cbz	r3, 81714 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   816f6:	2300      	movs	r3, #0
   816f8:	9303      	str	r3, [sp, #12]
   816fa:	9302      	str	r3, [sp, #8]
   816fc:	9301      	str	r3, [sp, #4]
   816fe:	2204      	movs	r2, #4
   81700:	9200      	str	r2, [sp, #0]
   81702:	f44f 7282 	mov.w	r2, #260	; 0x104
   81706:	4907      	ldr	r1, [pc, #28]	; (81724 <xTimerCreateTimerTask+0x3c>)
   81708:	4807      	ldr	r0, [pc, #28]	; (81728 <xTimerCreateTimerTask+0x40>)
   8170a:	4c08      	ldr	r4, [pc, #32]	; (8172c <xTimerCreateTimerTask+0x44>)
   8170c:	47a0      	blx	r4
	configASSERT( xReturn );
   8170e:	b108      	cbz	r0, 81714 <xTimerCreateTimerTask+0x2c>
}
   81710:	b004      	add	sp, #16
   81712:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   81714:	4b06      	ldr	r3, [pc, #24]	; (81730 <xTimerCreateTimerTask+0x48>)
   81716:	4798      	blx	r3
   81718:	bf00      	nop
   8171a:	e7fd      	b.n	81718 <xTimerCreateTimerTask+0x30>
   8171c:	0008168d 	.word	0x0008168d
   81720:	2007ac94 	.word	0x2007ac94
   81724:	00086ab0 	.word	0x00086ab0
   81728:	00081839 	.word	0x00081839
   8172c:	00080ced 	.word	0x00080ced
   81730:	000804c9 	.word	0x000804c9

00081734 <xTimerGenericCommand>:
{
   81734:	b530      	push	{r4, r5, lr}
   81736:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   81738:	4c0f      	ldr	r4, [pc, #60]	; (81778 <xTimerGenericCommand+0x44>)
   8173a:	6825      	ldr	r5, [r4, #0]
   8173c:	b1d5      	cbz	r5, 81774 <xTimerGenericCommand+0x40>
   8173e:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
   81740:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81742:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81744:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
   81746:	b13b      	cbz	r3, 81758 <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81748:	2300      	movs	r3, #0
   8174a:	4622      	mov	r2, r4
   8174c:	a901      	add	r1, sp, #4
   8174e:	4628      	mov	r0, r5
   81750:	4c0a      	ldr	r4, [pc, #40]	; (8177c <xTimerGenericCommand+0x48>)
   81752:	47a0      	blx	r4
}
   81754:	b005      	add	sp, #20
   81756:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81758:	4b09      	ldr	r3, [pc, #36]	; (81780 <xTimerGenericCommand+0x4c>)
   8175a:	4798      	blx	r3
   8175c:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   8175e:	f04f 0300 	mov.w	r3, #0
   81762:	bf0c      	ite	eq
   81764:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81766:	461a      	movne	r2, r3
   81768:	a901      	add	r1, sp, #4
   8176a:	4803      	ldr	r0, [pc, #12]	; (81778 <xTimerGenericCommand+0x44>)
   8176c:	6800      	ldr	r0, [r0, #0]
   8176e:	4c05      	ldr	r4, [pc, #20]	; (81784 <xTimerGenericCommand+0x50>)
   81770:	47a0      	blx	r4
   81772:	e7ef      	b.n	81754 <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
   81774:	2000      	movs	r0, #0
	return xReturn;
   81776:	e7ed      	b.n	81754 <xTimerGenericCommand+0x20>
   81778:	2007ac94 	.word	0x2007ac94
   8177c:	00080a4d 	.word	0x00080a4d
   81780:	00081551 	.word	0x00081551
   81784:	00080925 	.word	0x00080925

00081788 <prvSampleTimeNow>:
{
   81788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8178c:	b082      	sub	sp, #8
   8178e:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
   81790:	4b21      	ldr	r3, [pc, #132]	; (81818 <prvSampleTimeNow+0x90>)
   81792:	4798      	blx	r3
   81794:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   81796:	4b21      	ldr	r3, [pc, #132]	; (8181c <prvSampleTimeNow+0x94>)
   81798:	681b      	ldr	r3, [r3, #0]
   8179a:	4298      	cmp	r0, r3
   8179c:	d315      	bcc.n	817ca <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
   8179e:	2300      	movs	r3, #0
   817a0:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
   817a4:	4b1d      	ldr	r3, [pc, #116]	; (8181c <prvSampleTimeNow+0x94>)
   817a6:	f8c3 8000 	str.w	r8, [r3]
}
   817aa:	4640      	mov	r0, r8
   817ac:	b002      	add	sp, #8
   817ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   817b2:	2100      	movs	r1, #0
   817b4:	9100      	str	r1, [sp, #0]
   817b6:	460b      	mov	r3, r1
   817b8:	4652      	mov	r2, sl
   817ba:	4620      	mov	r0, r4
   817bc:	4c18      	ldr	r4, [pc, #96]	; (81820 <prvSampleTimeNow+0x98>)
   817be:	47a0      	blx	r4
				configASSERT( xResult );
   817c0:	b928      	cbnz	r0, 817ce <prvSampleTimeNow+0x46>
   817c2:	4b18      	ldr	r3, [pc, #96]	; (81824 <prvSampleTimeNow+0x9c>)
   817c4:	4798      	blx	r3
   817c6:	bf00      	nop
   817c8:	e7fd      	b.n	817c6 <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   817ca:	4e17      	ldr	r6, [pc, #92]	; (81828 <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
   817cc:	4f17      	ldr	r7, [pc, #92]	; (8182c <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   817ce:	6833      	ldr	r3, [r6, #0]
   817d0:	681a      	ldr	r2, [r3, #0]
   817d2:	b1c2      	cbz	r2, 81806 <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   817d4:	68da      	ldr	r2, [r3, #12]
   817d6:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   817da:	68db      	ldr	r3, [r3, #12]
   817dc:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   817de:	1d25      	adds	r5, r4, #4
   817e0:	4628      	mov	r0, r5
   817e2:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   817e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   817e6:	4620      	mov	r0, r4
   817e8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   817ea:	69e3      	ldr	r3, [r4, #28]
   817ec:	2b01      	cmp	r3, #1
   817ee:	d1ee      	bne.n	817ce <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   817f0:	69a3      	ldr	r3, [r4, #24]
   817f2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   817f4:	459a      	cmp	sl, r3
   817f6:	d2dc      	bcs.n	817b2 <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   817f8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   817fa:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   817fc:	4629      	mov	r1, r5
   817fe:	6830      	ldr	r0, [r6, #0]
   81800:	4b0b      	ldr	r3, [pc, #44]	; (81830 <prvSampleTimeNow+0xa8>)
   81802:	4798      	blx	r3
   81804:	e7e3      	b.n	817ce <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
   81806:	4a0b      	ldr	r2, [pc, #44]	; (81834 <prvSampleTimeNow+0xac>)
   81808:	6810      	ldr	r0, [r2, #0]
   8180a:	4907      	ldr	r1, [pc, #28]	; (81828 <prvSampleTimeNow+0xa0>)
   8180c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   8180e:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81810:	2301      	movs	r3, #1
   81812:	f8c9 3000 	str.w	r3, [r9]
   81816:	e7c5      	b.n	817a4 <prvSampleTimeNow+0x1c>
   81818:	00080f69 	.word	0x00080f69
   8181c:	2007ac90 	.word	0x2007ac90
   81820:	00081735 	.word	0x00081735
   81824:	000804c9 	.word	0x000804c9
   81828:	2007ac60 	.word	0x2007ac60
   8182c:	00080443 	.word	0x00080443
   81830:	00080409 	.word	0x00080409
   81834:	2007ac64 	.word	0x2007ac64

00081838 <prvTimerTask>:
{
   81838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8183c:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8183e:	f8df 8168 	ldr.w	r8, [pc, #360]	; 819a8 <prvTimerTask+0x170>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81842:	4b4d      	ldr	r3, [pc, #308]	; (81978 <prvTimerTask+0x140>)
   81844:	681b      	ldr	r3, [r3, #0]
   81846:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81848:	2a00      	cmp	r2, #0
   8184a:	f000 8089 	beq.w	81960 <prvTimerTask+0x128>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8184e:	68db      	ldr	r3, [r3, #12]
   81850:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
   81852:	4b4a      	ldr	r3, [pc, #296]	; (8197c <prvTimerTask+0x144>)
   81854:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81856:	a803      	add	r0, sp, #12
   81858:	4b49      	ldr	r3, [pc, #292]	; (81980 <prvTimerTask+0x148>)
   8185a:	4798      	blx	r3
   8185c:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8185e:	9b03      	ldr	r3, [sp, #12]
   81860:	2b00      	cmp	r3, #0
   81862:	f040 8086 	bne.w	81972 <prvTimerTask+0x13a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81866:	42a8      	cmp	r0, r5
   81868:	d20f      	bcs.n	8188a <prvTimerTask+0x52>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8186a:	1ba9      	subs	r1, r5, r6
   8186c:	4b45      	ldr	r3, [pc, #276]	; (81984 <prvTimerTask+0x14c>)
   8186e:	6818      	ldr	r0, [r3, #0]
   81870:	4b45      	ldr	r3, [pc, #276]	; (81988 <prvTimerTask+0x150>)
   81872:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81874:	4b45      	ldr	r3, [pc, #276]	; (8198c <prvTimerTask+0x154>)
   81876:	4798      	blx	r3
   81878:	b908      	cbnz	r0, 8187e <prvTimerTask+0x46>
					portYIELD_WITHIN_API();
   8187a:	4b45      	ldr	r3, [pc, #276]	; (81990 <prvTimerTask+0x158>)
   8187c:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8187e:	a802      	add	r0, sp, #8
   81880:	4b3f      	ldr	r3, [pc, #252]	; (81980 <prvTimerTask+0x148>)
   81882:	4798      	blx	r3
   81884:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81886:	4e3f      	ldr	r6, [pc, #252]	; (81984 <prvTimerTask+0x14c>)
   81888:	e036      	b.n	818f8 <prvTimerTask+0xc0>
				xTaskResumeAll();
   8188a:	4b40      	ldr	r3, [pc, #256]	; (8198c <prvTimerTask+0x154>)
   8188c:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8188e:	4b3a      	ldr	r3, [pc, #232]	; (81978 <prvTimerTask+0x140>)
   81890:	681b      	ldr	r3, [r3, #0]
   81892:	68db      	ldr	r3, [r3, #12]
   81894:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81896:	1d20      	adds	r0, r4, #4
   81898:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8189a:	69e3      	ldr	r3, [r4, #28]
   8189c:	2b01      	cmp	r3, #1
   8189e:	d114      	bne.n	818ca <prvTimerTask+0x92>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   818a0:	69a1      	ldr	r1, [r4, #24]
   818a2:	462b      	mov	r3, r5
   818a4:	4632      	mov	r2, r6
   818a6:	4429      	add	r1, r5
   818a8:	4620      	mov	r0, r4
   818aa:	4e3a      	ldr	r6, [pc, #232]	; (81994 <prvTimerTask+0x15c>)
   818ac:	47b0      	blx	r6
   818ae:	2801      	cmp	r0, #1
   818b0:	d10b      	bne.n	818ca <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   818b2:	2100      	movs	r1, #0
   818b4:	9100      	str	r1, [sp, #0]
   818b6:	460b      	mov	r3, r1
   818b8:	462a      	mov	r2, r5
   818ba:	4620      	mov	r0, r4
   818bc:	4d36      	ldr	r5, [pc, #216]	; (81998 <prvTimerTask+0x160>)
   818be:	47a8      	blx	r5
			configASSERT( xResult );
   818c0:	b918      	cbnz	r0, 818ca <prvTimerTask+0x92>
   818c2:	4b36      	ldr	r3, [pc, #216]	; (8199c <prvTimerTask+0x164>)
   818c4:	4798      	blx	r3
   818c6:	bf00      	nop
   818c8:	e7fd      	b.n	818c6 <prvTimerTask+0x8e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   818ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
   818cc:	4620      	mov	r0, r4
   818ce:	4798      	blx	r3
   818d0:	e7d5      	b.n	8187e <prvTimerTask+0x46>
		xNextExpireTime = ( portTickType ) 0U;
   818d2:	2500      	movs	r5, #0
   818d4:	e7c9      	b.n	8186a <prvTimerTask+0x32>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   818d6:	9904      	ldr	r1, [sp, #16]
   818d8:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   818da:	b131      	cbz	r1, 818ea <prvTimerTask+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   818dc:	463b      	mov	r3, r7
   818de:	463a      	mov	r2, r7
   818e0:	4439      	add	r1, r7
   818e2:	4620      	mov	r0, r4
   818e4:	4c2b      	ldr	r4, [pc, #172]	; (81994 <prvTimerTask+0x15c>)
   818e6:	47a0      	blx	r4
   818e8:	e006      	b.n	818f8 <prvTimerTask+0xc0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   818ea:	4b2c      	ldr	r3, [pc, #176]	; (8199c <prvTimerTask+0x164>)
   818ec:	4798      	blx	r3
   818ee:	bf00      	nop
   818f0:	e7fd      	b.n	818ee <prvTimerTask+0xb6>
				vPortFree( pxTimer );
   818f2:	4620      	mov	r0, r4
   818f4:	4b2a      	ldr	r3, [pc, #168]	; (819a0 <prvTimerTask+0x168>)
   818f6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   818f8:	4d2a      	ldr	r5, [pc, #168]	; (819a4 <prvTimerTask+0x16c>)
   818fa:	2300      	movs	r3, #0
   818fc:	461a      	mov	r2, r3
   818fe:	a903      	add	r1, sp, #12
   81900:	6830      	ldr	r0, [r6, #0]
   81902:	47a8      	blx	r5
   81904:	2800      	cmp	r0, #0
   81906:	d09c      	beq.n	81842 <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
   81908:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
   8190a:	b11c      	cbz	r4, 81914 <prvTimerTask+0xdc>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   8190c:	6963      	ldr	r3, [r4, #20]
   8190e:	b10b      	cbz	r3, 81914 <prvTimerTask+0xdc>
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81910:	1d20      	adds	r0, r4, #4
   81912:	47c0      	blx	r8
		switch( xMessage.xMessageID )
   81914:	9b03      	ldr	r3, [sp, #12]
   81916:	2b02      	cmp	r3, #2
   81918:	d0dd      	beq.n	818d6 <prvTimerTask+0x9e>
   8191a:	2b03      	cmp	r3, #3
   8191c:	d0e9      	beq.n	818f2 <prvTimerTask+0xba>
   8191e:	2b00      	cmp	r3, #0
   81920:	d1eb      	bne.n	818fa <prvTimerTask+0xc2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81922:	9904      	ldr	r1, [sp, #16]
   81924:	69a0      	ldr	r0, [r4, #24]
   81926:	460b      	mov	r3, r1
   81928:	463a      	mov	r2, r7
   8192a:	4401      	add	r1, r0
   8192c:	4620      	mov	r0, r4
   8192e:	4d19      	ldr	r5, [pc, #100]	; (81994 <prvTimerTask+0x15c>)
   81930:	47a8      	blx	r5
   81932:	2801      	cmp	r0, #1
   81934:	d1e0      	bne.n	818f8 <prvTimerTask+0xc0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81936:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81938:	4620      	mov	r0, r4
   8193a:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8193c:	69e3      	ldr	r3, [r4, #28]
   8193e:	2b01      	cmp	r3, #1
   81940:	d1da      	bne.n	818f8 <prvTimerTask+0xc0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81942:	69a2      	ldr	r2, [r4, #24]
   81944:	2100      	movs	r1, #0
   81946:	9100      	str	r1, [sp, #0]
   81948:	460b      	mov	r3, r1
   8194a:	9804      	ldr	r0, [sp, #16]
   8194c:	4402      	add	r2, r0
   8194e:	4620      	mov	r0, r4
   81950:	4c11      	ldr	r4, [pc, #68]	; (81998 <prvTimerTask+0x160>)
   81952:	47a0      	blx	r4
						configASSERT( xResult );
   81954:	2800      	cmp	r0, #0
   81956:	d1cf      	bne.n	818f8 <prvTimerTask+0xc0>
   81958:	4b10      	ldr	r3, [pc, #64]	; (8199c <prvTimerTask+0x164>)
   8195a:	4798      	blx	r3
   8195c:	bf00      	nop
   8195e:	e7fd      	b.n	8195c <prvTimerTask+0x124>
	vTaskSuspendAll();
   81960:	4b06      	ldr	r3, [pc, #24]	; (8197c <prvTimerTask+0x144>)
   81962:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81964:	a803      	add	r0, sp, #12
   81966:	4b06      	ldr	r3, [pc, #24]	; (81980 <prvTimerTask+0x148>)
   81968:	4798      	blx	r3
   8196a:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8196c:	9b03      	ldr	r3, [sp, #12]
   8196e:	2b00      	cmp	r3, #0
   81970:	d0af      	beq.n	818d2 <prvTimerTask+0x9a>
			xTaskResumeAll();
   81972:	4b06      	ldr	r3, [pc, #24]	; (8198c <prvTimerTask+0x154>)
   81974:	4798      	blx	r3
   81976:	e782      	b.n	8187e <prvTimerTask+0x46>
   81978:	2007ac60 	.word	0x2007ac60
   8197c:	00080f59 	.word	0x00080f59
   81980:	00081789 	.word	0x00081789
   81984:	2007ac94 	.word	0x2007ac94
   81988:	00080c45 	.word	0x00080c45
   8198c:	000810b1 	.word	0x000810b1
   81990:	000804b9 	.word	0x000804b9
   81994:	00081641 	.word	0x00081641
   81998:	00081735 	.word	0x00081735
   8199c:	000804c9 	.word	0x000804c9
   819a0:	000806f5 	.word	0x000806f5
   819a4:	00080add 	.word	0x00080add
   819a8:	00080443 	.word	0x00080443

000819ac <initPin6>:
	   initPin6();
	   initPin7();

   }
   
   void initPin6 (void){
   819ac:	b538      	push	{r3, r4, r5, lr}
	   pio_configure_pin(PIN_24, PIO_TYPE_PIO_PERIPH_B);
   819ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   819b2:	2058      	movs	r0, #88	; 0x58
   819b4:	4b0b      	ldr	r3, [pc, #44]	; (819e4 <initPin6+0x38>)
   819b6:	4798      	blx	r3
	   PWM_pin_6.channel = PWM_CHANNEL_7;
   819b8:	490b      	ldr	r1, [pc, #44]	; (819e8 <initPin6+0x3c>)
   819ba:	2507      	movs	r5, #7
   819bc:	600d      	str	r5, [r1, #0]
	   PWM_pin_6.alignment = PWM_ALIGN_LEFT;
   819be:	2300      	movs	r3, #0
   819c0:	810b      	strh	r3, [r1, #8]
	   PWM_pin_6.polarity = PWM_LOW;
   819c2:	728b      	strb	r3, [r1, #10]
	   PWM_pin_6.ul_prescaler = PWM_CMR_CPRE_CLKA;
   819c4:	220b      	movs	r2, #11
   819c6:	604a      	str	r2, [r1, #4]
	   PWM_pin_6.ul_period = 7500;
   819c8:	f641 524c 	movw	r2, #7500	; 0x1d4c
   819cc:	610a      	str	r2, [r1, #16]
	   PWM_pin_6.ul_duty = 0;	   
   819ce:	60cb      	str	r3, [r1, #12]
	   pwm_channel_init(PWM, &PWM_pin_6);
   819d0:	4c06      	ldr	r4, [pc, #24]	; (819ec <initPin6+0x40>)
   819d2:	4620      	mov	r0, r4
   819d4:	4b06      	ldr	r3, [pc, #24]	; (819f0 <initPin6+0x44>)
   819d6:	4798      	blx	r3
	   pwm_channel_enable(PWM, PWM_CHANNEL_7);
   819d8:	4629      	mov	r1, r5
   819da:	4620      	mov	r0, r4
   819dc:	4b05      	ldr	r3, [pc, #20]	; (819f4 <initPin6+0x48>)
   819de:	4798      	blx	r3
   819e0:	bd38      	pop	{r3, r4, r5, pc}
   819e2:	bf00      	nop
   819e4:	0008260d 	.word	0x0008260d
   819e8:	2007ae30 	.word	0x2007ae30
   819ec:	40094000 	.word	0x40094000
   819f0:	0008029d 	.word	0x0008029d
   819f4:	000803bd 	.word	0x000803bd

000819f8 <initPin7>:

   }
   void initPin7 (void){
   819f8:	b538      	push	{r3, r4, r5, lr}
	   pio_configure_pin(PIN_23, PIO_TYPE_PIO_PERIPH_B);
   819fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   819fe:	2057      	movs	r0, #87	; 0x57
   81a00:	4b0b      	ldr	r3, [pc, #44]	; (81a30 <initPin7+0x38>)
   81a02:	4798      	blx	r3
	   PWM_pin_7.alignment = PWM_ALIGN_LEFT;
   81a04:	490b      	ldr	r1, [pc, #44]	; (81a34 <initPin7+0x3c>)
   81a06:	2300      	movs	r3, #0
   81a08:	810b      	strh	r3, [r1, #8]
	   PWM_pin_7.polarity = PWM_LOW;
   81a0a:	728b      	strb	r3, [r1, #10]
	   PWM_pin_7.ul_prescaler = PWM_CMR_CPRE_CLKA;
   81a0c:	220b      	movs	r2, #11
   81a0e:	604a      	str	r2, [r1, #4]
	   PWM_pin_7.ul_period = 7500;
   81a10:	f641 524c 	movw	r2, #7500	; 0x1d4c
   81a14:	610a      	str	r2, [r1, #16]
	   PWM_pin_7.ul_duty = 0;
   81a16:	60cb      	str	r3, [r1, #12]
	   PWM_pin_7.channel = PWM_CHANNEL_6 ;
   81a18:	2506      	movs	r5, #6
   81a1a:	600d      	str	r5, [r1, #0]
	   pwm_channel_init(PWM, &PWM_pin_7);
   81a1c:	4c06      	ldr	r4, [pc, #24]	; (81a38 <initPin7+0x40>)
   81a1e:	4620      	mov	r0, r4
   81a20:	4b06      	ldr	r3, [pc, #24]	; (81a3c <initPin7+0x44>)
   81a22:	4798      	blx	r3
	   pwm_channel_enable(PWM, PWM_CHANNEL_6);
   81a24:	4629      	mov	r1, r5
   81a26:	4620      	mov	r0, r4
   81a28:	4b05      	ldr	r3, [pc, #20]	; (81a40 <initPin7+0x48>)
   81a2a:	4798      	blx	r3
   81a2c:	bd38      	pop	{r3, r4, r5, pc}
   81a2e:	bf00      	nop
   81a30:	0008260d 	.word	0x0008260d
   81a34:	2007ae08 	.word	0x2007ae08
   81a38:	40094000 	.word	0x40094000
   81a3c:	0008029d 	.word	0x0008029d
   81a40:	000803bd 	.word	0x000803bd

00081a44 <PWM_init>:
   void PWM_init(void){
   81a44:	b530      	push	{r4, r5, lr}
   81a46:	b085      	sub	sp, #20
	   pmc_enable_periph_clk(ID_PWM);
   81a48:	2024      	movs	r0, #36	; 0x24
   81a4a:	4b0d      	ldr	r3, [pc, #52]	; (81a80 <PWM_init+0x3c>)
   81a4c:	4798      	blx	r3
	   pwm_channel_disable(PWM,PWM_CHANNEL_7);
   81a4e:	4c0d      	ldr	r4, [pc, #52]	; (81a84 <PWM_init+0x40>)
   81a50:	2107      	movs	r1, #7
   81a52:	4620      	mov	r0, r4
   81a54:	4d0c      	ldr	r5, [pc, #48]	; (81a88 <PWM_init+0x44>)
   81a56:	47a8      	blx	r5
	   pwm_channel_disable(PWM,PWM_CHANNEL_6);
   81a58:	2106      	movs	r1, #6
   81a5a:	4620      	mov	r0, r4
   81a5c:	47a8      	blx	r5
	   pwm_clock_t PWMDAC_clock_config = {
   81a5e:	4b0b      	ldr	r3, [pc, #44]	; (81a8c <PWM_init+0x48>)
   81a60:	9301      	str	r3, [sp, #4]
   81a62:	2300      	movs	r3, #0
   81a64:	9302      	str	r3, [sp, #8]
   81a66:	4b0a      	ldr	r3, [pc, #40]	; (81a90 <PWM_init+0x4c>)
   81a68:	9303      	str	r3, [sp, #12]
	   pwm_init(PWM, &PWMDAC_clock_config);
   81a6a:	a901      	add	r1, sp, #4
   81a6c:	4620      	mov	r0, r4
   81a6e:	4b09      	ldr	r3, [pc, #36]	; (81a94 <PWM_init+0x50>)
   81a70:	4798      	blx	r3
	   initPin6();
   81a72:	4b09      	ldr	r3, [pc, #36]	; (81a98 <PWM_init+0x54>)
   81a74:	4798      	blx	r3
	   initPin7();
   81a76:	4b09      	ldr	r3, [pc, #36]	; (81a9c <PWM_init+0x58>)
   81a78:	4798      	blx	r3
   }
   81a7a:	b005      	add	sp, #20
   81a7c:	bd30      	pop	{r4, r5, pc}
   81a7e:	bf00      	nop
   81a80:	00082971 	.word	0x00082971
   81a84:	40094000 	.word	0x40094000
   81a88:	000803c7 	.word	0x000803c7
   81a8c:	000f4240 	.word	0x000f4240
   81a90:	0501bd00 	.word	0x0501bd00
   81a94:	00080259 	.word	0x00080259
   81a98:	000819ad 	.word	0x000819ad
   81a9c:	000819f9 	.word	0x000819f9

00081aa0 <pwm_pin_6>:
   }
   
   
   void pwm_pin_6(uint32_t speed1){
   81aa0:	b508      	push	{r3, lr}
   81aa2:	f640 0298 	movw	r2, #2200	; 0x898
   81aa6:	4282      	cmp	r2, r0
   81aa8:	bf28      	it	cs
   81aaa:	4602      	movcs	r2, r0
		    speed1=800;
	    }
	    else if(speed1>2200){
		    speed1=2200;
	    }
     pwm_channel_update_duty(PWM, &PWM_pin_6, speed1); 
   81aac:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
   81ab0:	bf38      	it	cc
   81ab2:	f44f 7248 	movcc.w	r2, #800	; 0x320
   81ab6:	4902      	ldr	r1, [pc, #8]	; (81ac0 <pwm_pin_6+0x20>)
   81ab8:	4802      	ldr	r0, [pc, #8]	; (81ac4 <pwm_pin_6+0x24>)
   81aba:	4b03      	ldr	r3, [pc, #12]	; (81ac8 <pwm_pin_6+0x28>)
   81abc:	4798      	blx	r3
   81abe:	bd08      	pop	{r3, pc}
   81ac0:	2007ae30 	.word	0x2007ae30
   81ac4:	40094000 	.word	0x40094000
   81ac8:	000803a1 	.word	0x000803a1

00081acc <pwm_pin_7>:
}

  void pwm_pin_7(uint32_t speed2){
   81acc:	b508      	push	{r3, lr}
   81ace:	f640 0298 	movw	r2, #2200	; 0x898
   81ad2:	4282      	cmp	r2, r0
   81ad4:	bf28      	it	cs
   81ad6:	4602      	movcs	r2, r0
		speed2=800;
	}
	else if(speed2>2200){
		speed2=2200;
	}
	pwm_channel_update_duty(PWM, & PWM_pin_7, speed2 );
   81ad8:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
   81adc:	bf38      	it	cc
   81ade:	f44f 7248 	movcc.w	r2, #800	; 0x320
   81ae2:	4902      	ldr	r1, [pc, #8]	; (81aec <pwm_pin_7+0x20>)
   81ae4:	4802      	ldr	r0, [pc, #8]	; (81af0 <pwm_pin_7+0x24>)
   81ae6:	4b03      	ldr	r3, [pc, #12]	; (81af4 <pwm_pin_7+0x28>)
   81ae8:	4798      	blx	r3
   81aea:	bd08      	pop	{r3, pc}
   81aec:	2007ae08 	.word	0x2007ae08
   81af0:	40094000 	.word	0x40094000
   81af4:	000803a1 	.word	0x000803a1

00081af8 <pio_interruptA>:
	counterB = b;
}

void pio_interruptA(void) {
	// Save all triggered interrupts
	uint32_t status1 = PIOA->PIO_ISR;
   81af8:	4b03      	ldr	r3, [pc, #12]	; (81b08 <pio_interruptA+0x10>)
   81afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	counterA++;
   81afc:	4a03      	ldr	r2, [pc, #12]	; (81b0c <pio_interruptA+0x14>)
   81afe:	6813      	ldr	r3, [r2, #0]
   81b00:	3301      	adds	r3, #1
   81b02:	6013      	str	r3, [r2, #0]
   81b04:	4770      	bx	lr
   81b06:	bf00      	nop
   81b08:	400e0e00 	.word	0x400e0e00
   81b0c:	2007ac98 	.word	0x2007ac98

00081b10 <pio_interruptB>:
}

void pio_interruptB(void) {
	// Save all triggered interrupts
	uint32_t status2 = PIOD->PIO_ISR;
   81b10:	4b03      	ldr	r3, [pc, #12]	; (81b20 <pio_interruptB+0x10>)
   81b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	counterB++;
   81b14:	4a03      	ldr	r2, [pc, #12]	; (81b24 <pio_interruptB+0x14>)
   81b16:	6813      	ldr	r3, [r2, #0]
   81b18:	3301      	adds	r3, #1
   81b1a:	6013      	str	r3, [r2, #0]
   81b1c:	4770      	bx	lr
   81b1e:	bf00      	nop
   81b20:	400e1400 	.word	0x400e1400
   81b24:	2007ac9c 	.word	0x2007ac9c

00081b28 <get_counterA>:
	return counterA;
   81b28:	4b01      	ldr	r3, [pc, #4]	; (81b30 <get_counterA+0x8>)
   81b2a:	6818      	ldr	r0, [r3, #0]
}
   81b2c:	4770      	bx	lr
   81b2e:	bf00      	nop
   81b30:	2007ac98 	.word	0x2007ac98

00081b34 <get_counterB>:
	return counterB;
   81b34:	4b01      	ldr	r3, [pc, #4]	; (81b3c <get_counterB+0x8>)
   81b36:	6818      	ldr	r0, [r3, #0]
}
   81b38:	4770      	bx	lr
   81b3a:	bf00      	nop
   81b3c:	2007ac9c 	.word	0x2007ac9c

00081b40 <encoder_init>:
}

void encoder_init(void) {
   81b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81b44:	b082      	sub	sp, #8
	// Enable Clock for PIOB - needed for sampling falling edge
	pmc_enable_periph_clk(ID_PIOA);
   81b46:	200b      	movs	r0, #11
   81b48:	4c1c      	ldr	r4, [pc, #112]	; (81bbc <encoder_init+0x7c>)
   81b4a:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
   81b4c:	200e      	movs	r0, #14
   81b4e:	47a0      	blx	r4
	
	pio_set_input(PIOA, PIO_PA15, PIO_PULLUP); 
   81b50:	4d1b      	ldr	r5, [pc, #108]	; (81bc0 <encoder_init+0x80>)
   81b52:	2201      	movs	r2, #1
   81b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81b58:	4628      	mov	r0, r5
   81b5a:	4e1a      	ldr	r6, [pc, #104]	; (81bc4 <encoder_init+0x84>)
   81b5c:	47b0      	blx	r6
	pio_set_input(PIOD, PIO_PD0, PIO_PULLUP);
   81b5e:	4c1a      	ldr	r4, [pc, #104]	; (81bc8 <encoder_init+0x88>)
   81b60:	2201      	movs	r2, #1
   81b62:	4611      	mov	r1, r2
   81b64:	4620      	mov	r0, r4
   81b66:	47b0      	blx	r6
	
	// Enable Glitch/Debouncing filter
	PIOA->PIO_IFER = PIO_PA15;
   81b68:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   81b6c:	622f      	str	r7, [r5, #32]
	PIOD->PIO_IFER = PIO_PD0;
   81b6e:	2601      	movs	r6, #1
   81b70:	6226      	str	r6, [r4, #32]
	
	// Select Debouncing filter
	PIOA->PIO_DIFSR = PIO_PA15;
   81b72:	f8c5 7084 	str.w	r7, [r5, #132]	; 0x84
	PIOD->PIO_DIFSR = PIO_PD0;
   81b76:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
	
// 	if(getVenster() < 1500){
// 		pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_FALL_EDGE, pio_interruptA);
// 	}
// 	else{
		pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_RISE_EDGE, pio_interruptA);
   81b7a:	4b14      	ldr	r3, [pc, #80]	; (81bcc <encoder_init+0x8c>)
   81b7c:	9300      	str	r3, [sp, #0]
   81b7e:	2370      	movs	r3, #112	; 0x70
   81b80:	463a      	mov	r2, r7
   81b82:	210b      	movs	r1, #11
   81b84:	4628      	mov	r0, r5
   81b86:	f8df 8054 	ldr.w	r8, [pc, #84]	; 81bdc <encoder_init+0x9c>
   81b8a:	47c0      	blx	r8
//	}
	pio_enable_interrupt(PIOA, PIO_PA15);
   81b8c:	4639      	mov	r1, r7
   81b8e:	4628      	mov	r0, r5
   81b90:	4d0f      	ldr	r5, [pc, #60]	; (81bd0 <encoder_init+0x90>)
   81b92:	47a8      	blx	r5

// 	if(getHoger() < 1500){
// 		pio_handler_set(PIOD, ID_PIOD, PIO_PD0, PIO_IT_FALL_EDGE, pio_interruptB);
// 	}
// 	else{
		pio_handler_set(PIOD, ID_PIOD, PIO_PD0, PIO_IT_RISE_EDGE, pio_interruptB);
   81b94:	4b0f      	ldr	r3, [pc, #60]	; (81bd4 <encoder_init+0x94>)
   81b96:	9300      	str	r3, [sp, #0]
   81b98:	2370      	movs	r3, #112	; 0x70
   81b9a:	4632      	mov	r2, r6
   81b9c:	210e      	movs	r1, #14
   81b9e:	4620      	mov	r0, r4
   81ba0:	47c0      	blx	r8
//	}
	
	pio_enable_interrupt(PIOD, PIO_PD0);
   81ba2:	4631      	mov	r1, r6
   81ba4:	4620      	mov	r0, r4
   81ba6:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81ba8:	4b0b      	ldr	r3, [pc, #44]	; (81bd8 <encoder_init+0x98>)
   81baa:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81bae:	601a      	str	r2, [r3, #0]
   81bb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81bb4:	601a      	str	r2, [r3, #0]
	
	// Enable Interrupt Handling in NVIC
	NVIC_EnableIRQ(PIOA_IRQn);
	NVIC_EnableIRQ(PIOD_IRQn);
}
   81bb6:	b002      	add	sp, #8
   81bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81bbc:	00082971 	.word	0x00082971
   81bc0:	400e0e00 	.word	0x400e0e00
   81bc4:	0008257b 	.word	0x0008257b
   81bc8:	400e1400 	.word	0x400e1400
   81bcc:	00081af9 	.word	0x00081af9
   81bd0:	00082601 	.word	0x00082601
   81bd4:	00081b11 	.word	0x00081b11
   81bd8:	e000e100 	.word	0xe000e100
   81bdc:	000827c9 	.word	0x000827c9

00081be0 <math_get_angle_deg>:
#define PI 3.141592653589

double X = 0;
double Y = 0;
/* Takes an angle in radians and converts to degrees (from 0 to 360) */
double math_get_angle_deg(double rad){
   81be0:	b510      	push	{r4, lr}
	return (rad * (180/PI));
   81be2:	a303      	add	r3, pc, #12	; (adr r3, 81bf0 <math_get_angle_deg+0x10>)
   81be4:	e9d3 2300 	ldrd	r2, r3, [r3]
   81be8:	4c03      	ldr	r4, [pc, #12]	; (81bf8 <math_get_angle_deg+0x18>)
   81bea:	47a0      	blx	r4
}
   81bec:	bd10      	pop	{r4, pc}
   81bee:	bf00      	nop
   81bf0:	1a63c9ec 	.word	0x1a63c9ec
   81bf4:	404ca5dc 	.word	0x404ca5dc
   81bf8:	000835ed 	.word	0x000835ed

00081bfc <get_euclid_distance>:
double math_get_angle_rad(double deg){
	return (deg * (PI/180));
}

/* Get euclidean distance between two points (see Pythagorean theorem) */
double get_euclid_distance(double x, double y, double x1, double y1) {
   81bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81c00:	4690      	mov	r8, r2
   81c02:	4699      	mov	r9, r3
	X = x - x1;
   81c04:	4c15      	ldr	r4, [pc, #84]	; (81c5c <get_euclid_distance+0x60>)
   81c06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   81c0a:	47a0      	blx	r4
   81c0c:	4606      	mov	r6, r0
   81c0e:	460f      	mov	r7, r1
   81c10:	4b13      	ldr	r3, [pc, #76]	; (81c60 <get_euclid_distance+0x64>)
   81c12:	e9c3 6700 	strd	r6, r7, [r3]
	Y = y - y1;
   81c16:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   81c1a:	4640      	mov	r0, r8
   81c1c:	4649      	mov	r1, r9
   81c1e:	47a0      	blx	r4
   81c20:	4604      	mov	r4, r0
   81c22:	460d      	mov	r5, r1
   81c24:	4b0f      	ldr	r3, [pc, #60]	; (81c64 <get_euclid_distance+0x68>)
   81c26:	e9c3 4500 	strd	r4, r5, [r3]
	return sqrt((X*X) + (Y*Y));
   81c2a:	f8df 8044 	ldr.w	r8, [pc, #68]	; 81c70 <get_euclid_distance+0x74>
   81c2e:	4632      	mov	r2, r6
   81c30:	463b      	mov	r3, r7
   81c32:	4630      	mov	r0, r6
   81c34:	4639      	mov	r1, r7
   81c36:	47c0      	blx	r8
   81c38:	4606      	mov	r6, r0
   81c3a:	460f      	mov	r7, r1
   81c3c:	4622      	mov	r2, r4
   81c3e:	462b      	mov	r3, r5
   81c40:	4620      	mov	r0, r4
   81c42:	4629      	mov	r1, r5
   81c44:	47c0      	blx	r8
   81c46:	4602      	mov	r2, r0
   81c48:	460b      	mov	r3, r1
   81c4a:	4630      	mov	r0, r6
   81c4c:	4639      	mov	r1, r7
   81c4e:	4c06      	ldr	r4, [pc, #24]	; (81c68 <get_euclid_distance+0x6c>)
   81c50:	47a0      	blx	r4
   81c52:	4b06      	ldr	r3, [pc, #24]	; (81c6c <get_euclid_distance+0x70>)
   81c54:	4798      	blx	r3
}
   81c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81c5a:	bf00      	nop
   81c5c:	00083285 	.word	0x00083285
   81c60:	2007aca0 	.word	0x2007aca0
   81c64:	2007aca8 	.word	0x2007aca8
   81c68:	00083289 	.word	0x00083289
   81c6c:	00083045 	.word	0x00083045
   81c70:	000835ed 	.word	0x000835ed
   81c74:	00000000 	.word	0x00000000

00081c78 <math_atan2>:

/* Return the angle in radians, see atan2 Wikipedia for reference */
double math_atan2(double x, double y, double x1, double y1) {
   81c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81c7c:	4690      	mov	r8, r2
   81c7e:	4699      	mov	r9, r3
	X = x - x1;
   81c80:	4e53      	ldr	r6, [pc, #332]	; (81dd0 <math_atan2+0x158>)
   81c82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   81c86:	47b0      	blx	r6
   81c88:	4604      	mov	r4, r0
   81c8a:	460d      	mov	r5, r1
   81c8c:	4b51      	ldr	r3, [pc, #324]	; (81dd4 <math_atan2+0x15c>)
   81c8e:	e9c3 4500 	strd	r4, r5, [r3]
	Y = y - y1;
   81c92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   81c96:	4640      	mov	r0, r8
   81c98:	4649      	mov	r1, r9
   81c9a:	47b0      	blx	r6
   81c9c:	4606      	mov	r6, r0
   81c9e:	460f      	mov	r7, r1
   81ca0:	4b4d      	ldr	r3, [pc, #308]	; (81dd8 <math_atan2+0x160>)
   81ca2:	e9c3 6700 	strd	r6, r7, [r3]
	if (X == 0 && Y == 0){
   81ca6:	2200      	movs	r2, #0
   81ca8:	2300      	movs	r3, #0
   81caa:	4620      	mov	r0, r4
   81cac:	4629      	mov	r1, r5
   81cae:	f8df 8140 	ldr.w	r8, [pc, #320]	; 81df0 <math_atan2+0x178>
   81cb2:	47c0      	blx	r8
   81cb4:	b128      	cbz	r0, 81cc2 <math_atan2+0x4a>
   81cb6:	2200      	movs	r2, #0
   81cb8:	2300      	movs	r3, #0
   81cba:	4630      	mov	r0, r6
   81cbc:	4639      	mov	r1, r7
   81cbe:	47c0      	blx	r8
   81cc0:	b988      	cbnz	r0, 81ce6 <math_atan2+0x6e>
		printf("Invalid input values!\n");
		return -1;
	}

	if (X > 0)
   81cc2:	2200      	movs	r2, #0
   81cc4:	2300      	movs	r3, #0
   81cc6:	4620      	mov	r0, r4
   81cc8:	4629      	mov	r1, r5
   81cca:	f8df 8128 	ldr.w	r8, [pc, #296]	; 81df4 <math_atan2+0x17c>
   81cce:	47c0      	blx	r8
   81cd0:	b180      	cbz	r0, 81cf4 <math_atan2+0x7c>
		return atan(Y/X);
   81cd2:	4622      	mov	r2, r4
   81cd4:	462b      	mov	r3, r5
   81cd6:	4630      	mov	r0, r6
   81cd8:	4639      	mov	r1, r7
   81cda:	4c40      	ldr	r4, [pc, #256]	; (81ddc <math_atan2+0x164>)
   81cdc:	47a0      	blx	r4
   81cde:	4b40      	ldr	r3, [pc, #256]	; (81de0 <math_atan2+0x168>)
   81ce0:	4798      	blx	r3
   81ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		printf("Invalid input values!\n");
   81ce6:	483f      	ldr	r0, [pc, #252]	; (81de4 <math_atan2+0x16c>)
   81ce8:	4b3f      	ldr	r3, [pc, #252]	; (81de8 <math_atan2+0x170>)
   81cea:	4798      	blx	r3
		return -1;
   81cec:	2000      	movs	r0, #0
   81cee:	493f      	ldr	r1, [pc, #252]	; (81dec <math_atan2+0x174>)
   81cf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if (X < 0 && Y >= 0)
   81cf4:	2200      	movs	r2, #0
   81cf6:	2300      	movs	r3, #0
   81cf8:	4620      	mov	r0, r4
   81cfa:	4629      	mov	r1, r5
   81cfc:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 81dfc <math_atan2+0x184>
   81d00:	47c0      	blx	r8
   81d02:	b9e0      	cbnz	r0, 81d3e <math_atan2+0xc6>
		return (atan(Y/X) + PI);
	else if(X < 0 && Y < 0)
   81d04:	2200      	movs	r2, #0
   81d06:	2300      	movs	r3, #0
   81d08:	4620      	mov	r0, r4
   81d0a:	4629      	mov	r1, r5
   81d0c:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 81dfc <math_atan2+0x184>
   81d10:	47c0      	blx	r8
   81d12:	bb58      	cbnz	r0, 81d6c <math_atan2+0xf4>
		return (atan(Y/X) - PI);
	else if(X == 0 && Y > 0)
   81d14:	2200      	movs	r2, #0
   81d16:	2300      	movs	r3, #0
   81d18:	4620      	mov	r0, r4
   81d1a:	4629      	mov	r1, r5
   81d1c:	4c34      	ldr	r4, [pc, #208]	; (81df0 <math_atan2+0x178>)
   81d1e:	47a0      	blx	r4
   81d20:	2800      	cmp	r0, #0
   81d22:	d03f      	beq.n	81da4 <math_atan2+0x12c>
   81d24:	2200      	movs	r2, #0
   81d26:	2300      	movs	r3, #0
   81d28:	4630      	mov	r0, r6
   81d2a:	4639      	mov	r1, r7
   81d2c:	4c31      	ldr	r4, [pc, #196]	; (81df4 <math_atan2+0x17c>)
   81d2e:	47a0      	blx	r4
   81d30:	2800      	cmp	r0, #0
   81d32:	d03c      	beq.n	81dae <math_atan2+0x136>
		return (PI/2);
   81d34:	a120      	add	r1, pc, #128	; (adr r1, 81db8 <math_atan2+0x140>)
   81d36:	e9d1 0100 	ldrd	r0, r1, [r1]
   81d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if (X < 0 && Y >= 0)
   81d3e:	2200      	movs	r2, #0
   81d40:	2300      	movs	r3, #0
   81d42:	4630      	mov	r0, r6
   81d44:	4639      	mov	r1, r7
   81d46:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 81e00 <math_atan2+0x188>
   81d4a:	47c0      	blx	r8
   81d4c:	b170      	cbz	r0, 81d6c <math_atan2+0xf4>
		return (atan(Y/X) + PI);
   81d4e:	4622      	mov	r2, r4
   81d50:	462b      	mov	r3, r5
   81d52:	4630      	mov	r0, r6
   81d54:	4639      	mov	r1, r7
   81d56:	4c21      	ldr	r4, [pc, #132]	; (81ddc <math_atan2+0x164>)
   81d58:	47a0      	blx	r4
   81d5a:	4b21      	ldr	r3, [pc, #132]	; (81de0 <math_atan2+0x168>)
   81d5c:	4798      	blx	r3
   81d5e:	a318      	add	r3, pc, #96	; (adr r3, 81dc0 <math_atan2+0x148>)
   81d60:	e9d3 2300 	ldrd	r2, r3, [r3]
   81d64:	4c24      	ldr	r4, [pc, #144]	; (81df8 <math_atan2+0x180>)
   81d66:	47a0      	blx	r4
   81d68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if(X < 0 && Y < 0)
   81d6c:	2200      	movs	r2, #0
   81d6e:	2300      	movs	r3, #0
   81d70:	4630      	mov	r0, r6
   81d72:	4639      	mov	r1, r7
   81d74:	f8df 8084 	ldr.w	r8, [pc, #132]	; 81dfc <math_atan2+0x184>
   81d78:	47c0      	blx	r8
   81d7a:	b920      	cbnz	r0, 81d86 <math_atan2+0x10e>
	else
		return (-PI/2);
   81d7c:	a112      	add	r1, pc, #72	; (adr r1, 81dc8 <math_atan2+0x150>)
   81d7e:	e9d1 0100 	ldrd	r0, r1, [r1]
   81d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return (atan(Y/X) - PI);
   81d86:	4622      	mov	r2, r4
   81d88:	462b      	mov	r3, r5
   81d8a:	4630      	mov	r0, r6
   81d8c:	4639      	mov	r1, r7
   81d8e:	4c13      	ldr	r4, [pc, #76]	; (81ddc <math_atan2+0x164>)
   81d90:	47a0      	blx	r4
   81d92:	4b13      	ldr	r3, [pc, #76]	; (81de0 <math_atan2+0x168>)
   81d94:	4798      	blx	r3
   81d96:	a30a      	add	r3, pc, #40	; (adr r3, 81dc0 <math_atan2+0x148>)
   81d98:	e9d3 2300 	ldrd	r2, r3, [r3]
   81d9c:	4c0c      	ldr	r4, [pc, #48]	; (81dd0 <math_atan2+0x158>)
   81d9e:	47a0      	blx	r4
   81da0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return (-PI/2);
   81da4:	a108      	add	r1, pc, #32	; (adr r1, 81dc8 <math_atan2+0x150>)
   81da6:	e9d1 0100 	ldrd	r0, r1, [r1]
   81daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81dae:	a106      	add	r1, pc, #24	; (adr r1, 81dc8 <math_atan2+0x150>)
   81db0:	e9d1 0100 	ldrd	r0, r1, [r1]
}
   81db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81db8:	5444261e 	.word	0x5444261e
   81dbc:	3ff921fb 	.word	0x3ff921fb
   81dc0:	5444261e 	.word	0x5444261e
   81dc4:	400921fb 	.word	0x400921fb
   81dc8:	5444261e 	.word	0x5444261e
   81dcc:	bff921fb 	.word	0xbff921fb
   81dd0:	00083285 	.word	0x00083285
   81dd4:	2007aca0 	.word	0x2007aca0
   81dd8:	2007aca8 	.word	0x2007aca8
   81ddc:	00083841 	.word	0x00083841
   81de0:	00082cf9 	.word	0x00082cf9
   81de4:	00086ab8 	.word	0x00086ab8
   81de8:	00083be9 	.word	0x00083be9
   81dec:	bff00000 	.word	0xbff00000
   81df0:	00083abd 	.word	0x00083abd
   81df4:	00083b0d 	.word	0x00083b0d
   81df8:	00083289 	.word	0x00083289
   81dfc:	00083ad1 	.word	0x00083ad1
   81e00:	00083af9 	.word	0x00083af9
   81e04:	00000000 	.word	0x00000000

00081e08 <distance>:
	 pwm_pin_6(speed2);
 }
 /************************************************************************/
 /* This function converts a specific distance to pulses for the motor                                                                  */
 /************************************************************************/
 uint16_t distance(uint16_t cm){
   81e08:	b510      	push	{r4, lr}
	return cm/1.396;
   81e0a:	4b07      	ldr	r3, [pc, #28]	; (81e28 <distance+0x20>)
   81e0c:	4798      	blx	r3
   81e0e:	a304      	add	r3, pc, #16	; (adr r3, 81e20 <distance+0x18>)
   81e10:	e9d3 2300 	ldrd	r2, r3, [r3]
   81e14:	4c05      	ldr	r4, [pc, #20]	; (81e2c <distance+0x24>)
   81e16:	47a0      	blx	r4
   81e18:	4b05      	ldr	r3, [pc, #20]	; (81e30 <distance+0x28>)
   81e1a:	4798      	blx	r3
 }
   81e1c:	b280      	uxth	r0, r0
   81e1e:	bd10      	pop	{r4, pc}
   81e20:	189374bc 	.word	0x189374bc
   81e24:	3ff65604 	.word	0x3ff65604
   81e28:	00083521 	.word	0x00083521
   81e2c:	00083841 	.word	0x00083841
   81e30:	00083b4d 	.word	0x00083b4d

00081e34 <drive>:
 
 /************************************************************************/
 /* This function gives power to both of the motors and keeps them
 /* moving at he same speed
 /************************************************************************/
 void drive(uint16_t U0v, uint16_t U0h){
   81e34:	b570      	push	{r4, r5, r6, lr}
   81e36:	4604      	mov	r4, r0
   81e38:	460e      	mov	r6, r1
	 e = (get_counterA() - get_counterB());
   81e3a:	4b11      	ldr	r3, [pc, #68]	; (81e80 <drive+0x4c>)
   81e3c:	4798      	blx	r3
   81e3e:	4605      	mov	r5, r0
   81e40:	4b10      	ldr	r3, [pc, #64]	; (81e84 <drive+0x50>)
   81e42:	4798      	blx	r3
   81e44:	1a28      	subs	r0, r5, r0
   81e46:	b280      	uxth	r0, r0
   81e48:	4d0f      	ldr	r5, [pc, #60]	; (81e88 <drive+0x54>)
   81e4a:	8028      	strh	r0, [r5, #0]
	 u = (k*e);
   81e4c:	4b0f      	ldr	r3, [pc, #60]	; (81e8c <drive+0x58>)
   81e4e:	7819      	ldrb	r1, [r3, #0]
   81e50:	fb01 f100 	mul.w	r1, r1, r0
   81e54:	b289      	uxth	r1, r1
   81e56:	4b0e      	ldr	r3, [pc, #56]	; (81e90 <drive+0x5c>)
   81e58:	8019      	strh	r1, [r3, #0]
	 
	 Uv = U0v - u;
   81e5a:	1a60      	subs	r0, r4, r1
   81e5c:	b280      	uxth	r0, r0
   81e5e:	4b0d      	ldr	r3, [pc, #52]	; (81e94 <drive+0x60>)
   81e60:	8018      	strh	r0, [r3, #0]
	 Uh = u + U0h;
   81e62:	4c0d      	ldr	r4, [pc, #52]	; (81e98 <drive+0x64>)
   81e64:	4431      	add	r1, r6
   81e66:	8021      	strh	r1, [r4, #0]
	 pwm_pin_7(speed1);
   81e68:	4b0c      	ldr	r3, [pc, #48]	; (81e9c <drive+0x68>)
   81e6a:	4798      	blx	r3
	 pwm_pin_6(speed2);
   81e6c:	8820      	ldrh	r0, [r4, #0]
   81e6e:	4b0c      	ldr	r3, [pc, #48]	; (81ea0 <drive+0x6c>)
   81e70:	4798      	blx	r3
	 motorA(Uv);
	 motorB(Uh);
	 
// 	 printf("encoder A %d och encoder B %d\n",get_counterA(), get_counterB());
// 	 printf("Motor A %d och motor B %d\n",Uv,Uh);
	 printf("e = %d\n",e);
   81e72:	f9b5 1000 	ldrsh.w	r1, [r5]
   81e76:	480b      	ldr	r0, [pc, #44]	; (81ea4 <drive+0x70>)
   81e78:	4b0b      	ldr	r3, [pc, #44]	; (81ea8 <drive+0x74>)
   81e7a:	4798      	blx	r3
   81e7c:	bd70      	pop	{r4, r5, r6, pc}
   81e7e:	bf00      	nop
   81e80:	00081b29 	.word	0x00081b29
   81e84:	00081b35 	.word	0x00081b35
   81e88:	2007acb4 	.word	0x2007acb4
   81e8c:	20070138 	.word	0x20070138
   81e90:	2007acb6 	.word	0x2007acb6
   81e94:	2007acb2 	.word	0x2007acb2
   81e98:	2007acb0 	.word	0x2007acb0
   81e9c:	00081acd 	.word	0x00081acd
   81ea0:	00081aa1 	.word	0x00081aa1
   81ea4:	00086ad0 	.word	0x00086ad0
   81ea8:	00083be9 	.word	0x00083be9

00081eac <driveVinkel>:
 
 /************************************************************************/
 /* This function rotates the robot and keeps it in its place, one motor
 /* rotates forward the other motor rotates backwards
 /************************************************************************/
 void driveVinkel(int riktning){
   81eac:	b508      	push	{r3, lr}
	 if(riktning == 1){
   81eae:	2801      	cmp	r0, #1
   81eb0:	d00c      	beq.n	81ecc <driveVinkel+0x20>
		 drive(1400, 1575);
	 }else if (riktning == -1){
   81eb2:	f1b0 3fff 	cmp.w	r0, #4294967295
		 drive(1575, 1400);
   81eb6:	bf07      	ittee	eq
   81eb8:	f44f 61af 	moveq.w	r1, #1400	; 0x578
   81ebc:	f240 6027 	movweq	r0, #1575	; 0x627
	 }else{
		 drive(1500, 1500);
   81ec0:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   81ec4:	4608      	movne	r0, r1
   81ec6:	4b05      	ldr	r3, [pc, #20]	; (81edc <driveVinkel+0x30>)
   81ec8:	4798      	blx	r3
   81eca:	bd08      	pop	{r3, pc}
		 drive(1400, 1575);
   81ecc:	f240 6127 	movw	r1, #1575	; 0x627
   81ed0:	f44f 60af 	mov.w	r0, #1400	; 0x578
   81ed4:	4b01      	ldr	r3, [pc, #4]	; (81edc <driveVinkel+0x30>)
   81ed6:	4798      	blx	r3
   81ed8:	bd08      	pop	{r3, pc}
   81eda:	bf00      	nop
   81edc:	00081e35 	.word	0x00081e35

00081ee0 <motor_task>:
#include "drivers/encoder.h"
#include "TWI.h"

#define MOTOR_TASK_PERIODICITY 4 /* The number on the macro will decide the periodicity of the task */

void motor_task(void *pvParameters) {
   81ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81ee4:	b087      	sub	sp, #28
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = MOTOR_TASK_PERIODICITY;
	uint16_t newAngle = math_get_angle_deg(math_atan2(200,400,0,0))/3.809;
   81ee6:	f04f 0800 	mov.w	r8, #0
   81eea:	f8df 915c 	ldr.w	r9, [pc, #348]	; 82048 <motor_task+0x168>
   81eee:	2600      	movs	r6, #0
   81ef0:	4f45      	ldr	r7, [pc, #276]	; (82008 <motor_task+0x128>)
   81ef2:	2400      	movs	r4, #0
   81ef4:	2500      	movs	r5, #0
   81ef6:	e9cd 4502 	strd	r4, r5, [sp, #8]
   81efa:	e9cd 4500 	strd	r4, r5, [sp]
   81efe:	4642      	mov	r2, r8
   81f00:	464b      	mov	r3, r9
   81f02:	4630      	mov	r0, r6
   81f04:	4639      	mov	r1, r7
   81f06:	f8df a144 	ldr.w	sl, [pc, #324]	; 8204c <motor_task+0x16c>
   81f0a:	47d0      	blx	sl
   81f0c:	4b3f      	ldr	r3, [pc, #252]	; (8200c <motor_task+0x12c>)
   81f0e:	4798      	blx	r3
   81f10:	a33b      	add	r3, pc, #236	; (adr r3, 82000 <motor_task+0x120>)
   81f12:	e9d3 2300 	ldrd	r2, r3, [r3]
   81f16:	f8df a138 	ldr.w	sl, [pc, #312]	; 82050 <motor_task+0x170>
   81f1a:	47d0      	blx	sl
   81f1c:	f8df b134 	ldr.w	fp, [pc, #308]	; 82054 <motor_task+0x174>
   81f20:	47d8      	blx	fp
   81f22:	fa1f fa80 	uxth.w	sl, r0
	uint16_t newDistance = distance(get_euclid_distance(200,400,0,0));
   81f26:	e9cd 4502 	strd	r4, r5, [sp, #8]
   81f2a:	e9cd 4500 	strd	r4, r5, [sp]
   81f2e:	4642      	mov	r2, r8
   81f30:	464b      	mov	r3, r9
   81f32:	4630      	mov	r0, r6
   81f34:	4639      	mov	r1, r7
   81f36:	4c36      	ldr	r4, [pc, #216]	; (82010 <motor_task+0x130>)
   81f38:	47a0      	blx	r4
   81f3a:	47d8      	blx	fp
   81f3c:	b280      	uxth	r0, r0
   81f3e:	4b35      	ldr	r3, [pc, #212]	; (82014 <motor_task+0x134>)
   81f40:	4798      	blx	r3
	uint16_t oldAngle = 0;
	uint16_t oldDistance = 0;
	uint8_t flagg = 0;
   81f42:	2700      	movs	r7, #0
	
	while(1){
		/* Get current tick count */
		xLastWakeTime = xTaskGetTickCount();
   81f44:	4e34      	ldr	r6, [pc, #208]	; (82018 <motor_task+0x138>)
		
		//drive(1753,1793);
		if(get_counterA() < newAngle + newDistance -30 && get_counterB() < newAngle + newDistance -30){
   81f46:	4d35      	ldr	r5, [pc, #212]	; (8201c <motor_task+0x13c>)
   81f48:	4450      	add	r0, sl
   81f4a:	f1a0 041e 	sub.w	r4, r0, #30
   81f4e:	e028      	b.n	81fa2 <motor_task+0xc2>
			if(get_counterA() < (newAngle - oldAngle) && get_counterB() < (newAngle - oldAngle) && flagg == 0){
				printf("1");
   81f50:	4833      	ldr	r0, [pc, #204]	; (82020 <motor_task+0x140>)
   81f52:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 82044 <motor_task+0x164>
   81f56:	47c0      	blx	r8
				printf("NEWangel: %d\n", newAngle);
   81f58:	4651      	mov	r1, sl
   81f5a:	4832      	ldr	r0, [pc, #200]	; (82024 <motor_task+0x144>)
   81f5c:	47c0      	blx	r8
				printf("OLDangel: %d\n", oldAngle);
   81f5e:	2100      	movs	r1, #0
   81f60:	4831      	ldr	r0, [pc, #196]	; (82028 <motor_task+0x148>)
   81f62:	47c0      	blx	r8
				driveVinkel(1);
   81f64:	2001      	movs	r0, #1
   81f66:	4b31      	ldr	r3, [pc, #196]	; (8202c <motor_task+0x14c>)
   81f68:	4798      	blx	r3
   81f6a:	e016      	b.n	81f9a <motor_task+0xba>
//				oldAngle = oldAngle - 1;
			}else if(get_counterA() > (newAngle - oldAngle) && get_counterB() > (newAngle - oldAngle) && flagg == 0){
				printf("2");
   81f6c:	4830      	ldr	r0, [pc, #192]	; (82030 <motor_task+0x150>)
   81f6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 82044 <motor_task+0x164>
   81f72:	47c0      	blx	r8
				printf("NEWangel: %d\n", newAngle);
   81f74:	4651      	mov	r1, sl
   81f76:	482b      	ldr	r0, [pc, #172]	; (82024 <motor_task+0x144>)
   81f78:	47c0      	blx	r8
				printf("OLDangel: %d\n", oldAngle);
   81f7a:	2100      	movs	r1, #0
   81f7c:	482a      	ldr	r0, [pc, #168]	; (82028 <motor_task+0x148>)
   81f7e:	47c0      	blx	r8
				driveVinkel(-1);
   81f80:	f04f 30ff 	mov.w	r0, #4294967295
   81f84:	4b29      	ldr	r3, [pc, #164]	; (8202c <motor_task+0x14c>)
   81f86:	4798      	blx	r3
   81f88:	e007      	b.n	81f9a <motor_task+0xba>
				drive(1753,1793);
				flagg = 1;
				for(int i = 0;i < 100;i++);
			}
		}else{
			drive(1500,1500);
   81f8a:	f240 51dc 	movw	r1, #1500	; 0x5dc
   81f8e:	4608      	mov	r0, r1
   81f90:	4b28      	ldr	r3, [pc, #160]	; (82034 <motor_task+0x154>)
   81f92:	4798      	blx	r3
   81f94:	2364      	movs	r3, #100	; 0x64
// 			v1 = atan([gammalposx],[gammalposy],[nyposx],[nyposy]));
// 			v2 = atan([nyposx],[nyposy],[objektposx],[objektposy]));
// 			oldAngle = newAngle;
// 			newAngle = v1-v2;
			for(int i = 0;i < 100;i++);
   81f96:	3b01      	subs	r3, #1
   81f98:	d1fd      	bne.n	81f96 <motor_task+0xb6>
		}
	
		
		/* The task is now done, go to sleep until it's time again */
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   81f9a:	2104      	movs	r1, #4
   81f9c:	a805      	add	r0, sp, #20
   81f9e:	4b26      	ldr	r3, [pc, #152]	; (82038 <motor_task+0x158>)
   81fa0:	4798      	blx	r3
		xLastWakeTime = xTaskGetTickCount();
   81fa2:	47b0      	blx	r6
   81fa4:	9005      	str	r0, [sp, #20]
		if(get_counterA() < newAngle + newDistance -30 && get_counterB() < newAngle + newDistance -30){
   81fa6:	47a8      	blx	r5
   81fa8:	42a0      	cmp	r0, r4
   81faa:	daee      	bge.n	81f8a <motor_task+0xaa>
   81fac:	4b23      	ldr	r3, [pc, #140]	; (8203c <motor_task+0x15c>)
   81fae:	4798      	blx	r3
   81fb0:	4284      	cmp	r4, r0
   81fb2:	ddea      	ble.n	81f8a <motor_task+0xaa>
			if(get_counterA() < (newAngle - oldAngle) && get_counterB() < (newAngle - oldAngle) && flagg == 0){
   81fb4:	47a8      	blx	r5
   81fb6:	4582      	cmp	sl, r0
   81fb8:	dd05      	ble.n	81fc6 <motor_task+0xe6>
   81fba:	4b20      	ldr	r3, [pc, #128]	; (8203c <motor_task+0x15c>)
   81fbc:	4798      	blx	r3
   81fbe:	4582      	cmp	sl, r0
   81fc0:	dd01      	ble.n	81fc6 <motor_task+0xe6>
   81fc2:	2f00      	cmp	r7, #0
   81fc4:	d0c4      	beq.n	81f50 <motor_task+0x70>
			}else if(get_counterA() > (newAngle - oldAngle) && get_counterB() > (newAngle - oldAngle) && flagg == 0){
   81fc6:	47a8      	blx	r5
   81fc8:	4582      	cmp	sl, r0
   81fca:	da05      	bge.n	81fd8 <motor_task+0xf8>
   81fcc:	4b1b      	ldr	r3, [pc, #108]	; (8203c <motor_task+0x15c>)
   81fce:	4798      	blx	r3
   81fd0:	4582      	cmp	sl, r0
   81fd2:	da01      	bge.n	81fd8 <motor_task+0xf8>
   81fd4:	2f00      	cmp	r7, #0
   81fd6:	d0c9      	beq.n	81f6c <motor_task+0x8c>
				printf("");
   81fd8:	4819      	ldr	r0, [pc, #100]	; (82040 <motor_task+0x160>)
   81fda:	4f1a      	ldr	r7, [pc, #104]	; (82044 <motor_task+0x164>)
   81fdc:	47b8      	blx	r7
				printf("NEWangel: %d\n", newAngle);
   81fde:	4651      	mov	r1, sl
   81fe0:	4810      	ldr	r0, [pc, #64]	; (82024 <motor_task+0x144>)
   81fe2:	47b8      	blx	r7
				printf("OLDangel: %d\n", oldAngle);
   81fe4:	2100      	movs	r1, #0
   81fe6:	4810      	ldr	r0, [pc, #64]	; (82028 <motor_task+0x148>)
   81fe8:	47b8      	blx	r7
				drive(1753,1793);
   81fea:	f240 7101 	movw	r1, #1793	; 0x701
   81fee:	f240 60d9 	movw	r0, #1753	; 0x6d9
   81ff2:	4b10      	ldr	r3, [pc, #64]	; (82034 <motor_task+0x154>)
   81ff4:	4798      	blx	r3
   81ff6:	2364      	movs	r3, #100	; 0x64
				for(int i = 0;i < 100;i++);
   81ff8:	3b01      	subs	r3, #1
   81ffa:	d1fd      	bne.n	81ff8 <motor_task+0x118>
				flagg = 1;
   81ffc:	2701      	movs	r7, #1
   81ffe:	e7cc      	b.n	81f9a <motor_task+0xba>
   82000:	fdf3b646 	.word	0xfdf3b646
   82004:	400e78d4 	.word	0x400e78d4
   82008:	40690000 	.word	0x40690000
   8200c:	00081be1 	.word	0x00081be1
   82010:	00081bfd 	.word	0x00081bfd
   82014:	00081e09 	.word	0x00081e09
   82018:	00080f69 	.word	0x00080f69
   8201c:	00081b29 	.word	0x00081b29
   82020:	00086ad8 	.word	0x00086ad8
   82024:	00086adc 	.word	0x00086adc
   82028:	00086aec 	.word	0x00086aec
   8202c:	00081ead 	.word	0x00081ead
   82030:	00086afc 	.word	0x00086afc
   82034:	00081e35 	.word	0x00081e35
   82038:	000811b1 	.word	0x000811b1
   8203c:	00081b35 	.word	0x00081b35
   82040:	00086aac 	.word	0x00086aac
   82044:	00083be9 	.word	0x00083be9
   82048:	40790000 	.word	0x40790000
   8204c:	00081c79 	.word	0x00081c79
   82050:	00083841 	.word	0x00083841
   82054:	00083b4d 	.word	0x00083b4d

00082058 <main_task>:
// 		.chip = unoAddress,
// 		.buffer = array,
// 		.length =10,
// 	};

void main_task(void *pvParameters) {
   82058:	b530      	push	{r4, r5, lr}
   8205a:	b083      	sub	sp, #12
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = MAIN_TASK_PERIODICITY;
	while(1){
		xLastWakeTime = xTaskGetTickCount();
   8205c:	4d03      	ldr	r5, [pc, #12]	; (8206c <main_task+0x14>)
		
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   8205e:	4c04      	ldr	r4, [pc, #16]	; (82070 <main_task+0x18>)
		xLastWakeTime = xTaskGetTickCount();
   82060:	47a8      	blx	r5
   82062:	9001      	str	r0, [sp, #4]
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   82064:	210a      	movs	r1, #10
   82066:	a801      	add	r0, sp, #4
   82068:	47a0      	blx	r4
   8206a:	e7f9      	b.n	82060 <main_task+0x8>
   8206c:	00080f69 	.word	0x00080f69
   82070:	000811b1 	.word	0x000811b1

00082074 <pin_mapper>:
					PIO_PA22_IDX,PIO_PA6_IDX,PIO_PA4_IDX,PIO_PA3_IDX,PIO_PA2_IDX,PIO_PB17_IDX,
					PIO_PB18_IDX,PIO_PB19_IDX,PIO_PB20_IDX};
					
uint8_t pin_mapper(uint8_t pin){
	return pin_table[pin];
}
   82074:	4b01      	ldr	r3, [pc, #4]	; (8207c <pin_mapper+0x8>)
   82076:	5c18      	ldrb	r0, [r3, r0]
   82078:	4770      	bx	lr
   8207a:	bf00      	nop
   8207c:	2007013c 	.word	0x2007013c

00082080 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82080:	6943      	ldr	r3, [r0, #20]
   82082:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82086:	bf1d      	ittte	ne
   82088:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8208c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8208e:	2000      	movne	r0, #0
		return 1;
   82090:	2001      	moveq	r0, #1
}
   82092:	4770      	bx	lr

00082094 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82094:	6943      	ldr	r3, [r0, #20]
   82096:	f013 0f01 	tst.w	r3, #1
   8209a:	d005      	beq.n	820a8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8209c:	6983      	ldr	r3, [r0, #24]
   8209e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   820a2:	600b      	str	r3, [r1, #0]

	return 0;
   820a4:	2000      	movs	r0, #0
   820a6:	4770      	bx	lr
		return 1;
   820a8:	2001      	movs	r0, #1
}
   820aa:	4770      	bx	lr

000820ac <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   820ac:	b500      	push	{lr}
   820ae:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   820b0:	2201      	movs	r2, #1
   820b2:	f10d 0107 	add.w	r1, sp, #7
   820b6:	4810      	ldr	r0, [pc, #64]	; (820f8 <USART0_Handler+0x4c>)
   820b8:	4b10      	ldr	r3, [pc, #64]	; (820fc <USART0_Handler+0x50>)
   820ba:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   820bc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   820be:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   820c2:	2200      	movs	r2, #0
   820c4:	4b0e      	ldr	r3, [pc, #56]	; (82100 <USART0_Handler+0x54>)
   820c6:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   820c8:	4b0e      	ldr	r3, [pc, #56]	; (82104 <USART0_Handler+0x58>)
   820ca:	781b      	ldrb	r3, [r3, #0]
   820cc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   820d0:	4a0d      	ldr	r2, [pc, #52]	; (82108 <USART0_Handler+0x5c>)
   820d2:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   820d4:	2b9b      	cmp	r3, #155	; 0x9b
   820d6:	d00b      	beq.n	820f0 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   820d8:	3301      	adds	r3, #1
   820da:	4a0a      	ldr	r2, [pc, #40]	; (82104 <USART0_Handler+0x58>)
   820dc:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   820de:	2201      	movs	r2, #1
   820e0:	4b07      	ldr	r3, [pc, #28]	; (82100 <USART0_Handler+0x54>)
   820e2:	701a      	strb	r2, [r3, #0]
   820e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   820e8:	b662      	cpsie	i
}
   820ea:	b003      	add	sp, #12
   820ec:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   820f0:	2200      	movs	r2, #0
   820f2:	4b04      	ldr	r3, [pc, #16]	; (82104 <USART0_Handler+0x58>)
   820f4:	701a      	strb	r2, [r3, #0]
   820f6:	e7f2      	b.n	820de <USART0_Handler+0x32>
   820f8:	40098000 	.word	0x40098000
   820fc:	00082339 	.word	0x00082339
   82100:	2007017e 	.word	0x2007017e
   82104:	2007ad54 	.word	0x2007ad54
   82108:	2007acb8 	.word	0x2007acb8

0008210c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8210c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8210e:	b083      	sub	sp, #12
   82110:	4604      	mov	r4, r0
   82112:	460d      	mov	r5, r1
	uint32_t val = 0;
   82114:	2300      	movs	r3, #0
   82116:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82118:	4b20      	ldr	r3, [pc, #128]	; (8219c <usart_serial_getchar+0x90>)
   8211a:	4298      	cmp	r0, r3
   8211c:	d00d      	beq.n	8213a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8211e:	4b20      	ldr	r3, [pc, #128]	; (821a0 <usart_serial_getchar+0x94>)
   82120:	4298      	cmp	r0, r3
   82122:	d012      	beq.n	8214a <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82124:	4b1f      	ldr	r3, [pc, #124]	; (821a4 <usart_serial_getchar+0x98>)
   82126:	4298      	cmp	r0, r3
   82128:	d019      	beq.n	8215e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8212a:	4b1f      	ldr	r3, [pc, #124]	; (821a8 <usart_serial_getchar+0x9c>)
   8212c:	429c      	cmp	r4, r3
   8212e:	d020      	beq.n	82172 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82130:	4b1e      	ldr	r3, [pc, #120]	; (821ac <usart_serial_getchar+0xa0>)
   82132:	429c      	cmp	r4, r3
   82134:	d027      	beq.n	82186 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   82136:	b003      	add	sp, #12
   82138:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8213a:	461f      	mov	r7, r3
   8213c:	4e1c      	ldr	r6, [pc, #112]	; (821b0 <usart_serial_getchar+0xa4>)
   8213e:	4629      	mov	r1, r5
   82140:	4638      	mov	r0, r7
   82142:	47b0      	blx	r6
   82144:	2800      	cmp	r0, #0
   82146:	d1fa      	bne.n	8213e <usart_serial_getchar+0x32>
   82148:	e7ef      	b.n	8212a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8214a:	461f      	mov	r7, r3
   8214c:	4e19      	ldr	r6, [pc, #100]	; (821b4 <usart_serial_getchar+0xa8>)
   8214e:	a901      	add	r1, sp, #4
   82150:	4638      	mov	r0, r7
   82152:	47b0      	blx	r6
   82154:	2800      	cmp	r0, #0
   82156:	d1fa      	bne.n	8214e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   82158:	9b01      	ldr	r3, [sp, #4]
   8215a:	702b      	strb	r3, [r5, #0]
   8215c:	e7e8      	b.n	82130 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8215e:	461e      	mov	r6, r3
   82160:	4c14      	ldr	r4, [pc, #80]	; (821b4 <usart_serial_getchar+0xa8>)
   82162:	a901      	add	r1, sp, #4
   82164:	4630      	mov	r0, r6
   82166:	47a0      	blx	r4
   82168:	2800      	cmp	r0, #0
   8216a:	d1fa      	bne.n	82162 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   8216c:	9b01      	ldr	r3, [sp, #4]
   8216e:	702b      	strb	r3, [r5, #0]
   82170:	e7e1      	b.n	82136 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   82172:	461e      	mov	r6, r3
   82174:	4c0f      	ldr	r4, [pc, #60]	; (821b4 <usart_serial_getchar+0xa8>)
   82176:	a901      	add	r1, sp, #4
   82178:	4630      	mov	r0, r6
   8217a:	47a0      	blx	r4
   8217c:	2800      	cmp	r0, #0
   8217e:	d1fa      	bne.n	82176 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   82180:	9b01      	ldr	r3, [sp, #4]
   82182:	702b      	strb	r3, [r5, #0]
   82184:	e7d7      	b.n	82136 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   82186:	461e      	mov	r6, r3
   82188:	4c0a      	ldr	r4, [pc, #40]	; (821b4 <usart_serial_getchar+0xa8>)
   8218a:	a901      	add	r1, sp, #4
   8218c:	4630      	mov	r0, r6
   8218e:	47a0      	blx	r4
   82190:	2800      	cmp	r0, #0
   82192:	d1fa      	bne.n	8218a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   82194:	9b01      	ldr	r3, [sp, #4]
   82196:	702b      	strb	r3, [r5, #0]
}
   82198:	e7cd      	b.n	82136 <usart_serial_getchar+0x2a>
   8219a:	bf00      	nop
   8219c:	400e0800 	.word	0x400e0800
   821a0:	40098000 	.word	0x40098000
   821a4:	4009c000 	.word	0x4009c000
   821a8:	400a0000 	.word	0x400a0000
   821ac:	400a4000 	.word	0x400a4000
   821b0:	00082447 	.word	0x00082447
   821b4:	00082095 	.word	0x00082095

000821b8 <usart_serial_putchar>:
{
   821b8:	b570      	push	{r4, r5, r6, lr}
   821ba:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   821bc:	4b1e      	ldr	r3, [pc, #120]	; (82238 <usart_serial_putchar+0x80>)
   821be:	4298      	cmp	r0, r3
   821c0:	d00d      	beq.n	821de <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   821c2:	4b1e      	ldr	r3, [pc, #120]	; (8223c <usart_serial_putchar+0x84>)
   821c4:	4298      	cmp	r0, r3
   821c6:	d013      	beq.n	821f0 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   821c8:	4b1d      	ldr	r3, [pc, #116]	; (82240 <usart_serial_putchar+0x88>)
   821ca:	4298      	cmp	r0, r3
   821cc:	d019      	beq.n	82202 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   821ce:	4b1d      	ldr	r3, [pc, #116]	; (82244 <usart_serial_putchar+0x8c>)
   821d0:	4298      	cmp	r0, r3
   821d2:	d01f      	beq.n	82214 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   821d4:	4b1c      	ldr	r3, [pc, #112]	; (82248 <usart_serial_putchar+0x90>)
   821d6:	4298      	cmp	r0, r3
   821d8:	d025      	beq.n	82226 <usart_serial_putchar+0x6e>
	return 0;
   821da:	2000      	movs	r0, #0
}
   821dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   821de:	461e      	mov	r6, r3
   821e0:	4d1a      	ldr	r5, [pc, #104]	; (8224c <usart_serial_putchar+0x94>)
   821e2:	4621      	mov	r1, r4
   821e4:	4630      	mov	r0, r6
   821e6:	47a8      	blx	r5
   821e8:	2800      	cmp	r0, #0
   821ea:	d1fa      	bne.n	821e2 <usart_serial_putchar+0x2a>
		return 1;
   821ec:	2001      	movs	r0, #1
   821ee:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   821f0:	461e      	mov	r6, r3
   821f2:	4d17      	ldr	r5, [pc, #92]	; (82250 <usart_serial_putchar+0x98>)
   821f4:	4621      	mov	r1, r4
   821f6:	4630      	mov	r0, r6
   821f8:	47a8      	blx	r5
   821fa:	2800      	cmp	r0, #0
   821fc:	d1fa      	bne.n	821f4 <usart_serial_putchar+0x3c>
		return 1;
   821fe:	2001      	movs	r0, #1
   82200:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82202:	461e      	mov	r6, r3
   82204:	4d12      	ldr	r5, [pc, #72]	; (82250 <usart_serial_putchar+0x98>)
   82206:	4621      	mov	r1, r4
   82208:	4630      	mov	r0, r6
   8220a:	47a8      	blx	r5
   8220c:	2800      	cmp	r0, #0
   8220e:	d1fa      	bne.n	82206 <usart_serial_putchar+0x4e>
		return 1;
   82210:	2001      	movs	r0, #1
   82212:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82214:	461e      	mov	r6, r3
   82216:	4d0e      	ldr	r5, [pc, #56]	; (82250 <usart_serial_putchar+0x98>)
   82218:	4621      	mov	r1, r4
   8221a:	4630      	mov	r0, r6
   8221c:	47a8      	blx	r5
   8221e:	2800      	cmp	r0, #0
   82220:	d1fa      	bne.n	82218 <usart_serial_putchar+0x60>
		return 1;
   82222:	2001      	movs	r0, #1
   82224:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82226:	461e      	mov	r6, r3
   82228:	4d09      	ldr	r5, [pc, #36]	; (82250 <usart_serial_putchar+0x98>)
   8222a:	4621      	mov	r1, r4
   8222c:	4630      	mov	r0, r6
   8222e:	47a8      	blx	r5
   82230:	2800      	cmp	r0, #0
   82232:	d1fa      	bne.n	8222a <usart_serial_putchar+0x72>
		return 1;
   82234:	2001      	movs	r0, #1
   82236:	bd70      	pop	{r4, r5, r6, pc}
   82238:	400e0800 	.word	0x400e0800
   8223c:	40098000 	.word	0x40098000
   82240:	4009c000 	.word	0x4009c000
   82244:	400a0000 	.word	0x400a0000
   82248:	400a4000 	.word	0x400a4000
   8224c:	00082437 	.word	0x00082437
   82250:	00082081 	.word	0x00082081

00082254 <console_init>:
#include "console_driver.h"

void console_init(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   82254:	b530      	push	{r4, r5, lr}
   82256:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   82258:	2008      	movs	r0, #8
   8225a:	4d15      	ldr	r5, [pc, #84]	; (822b0 <console_init+0x5c>)
   8225c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8225e:	4c15      	ldr	r4, [pc, #84]	; (822b4 <console_init+0x60>)
   82260:	4b15      	ldr	r3, [pc, #84]	; (822b8 <console_init+0x64>)
   82262:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82264:	4a15      	ldr	r2, [pc, #84]	; (822bc <console_init+0x68>)
   82266:	4b16      	ldr	r3, [pc, #88]	; (822c0 <console_init+0x6c>)
   82268:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8226a:	4a16      	ldr	r2, [pc, #88]	; (822c4 <console_init+0x70>)
   8226c:	4b16      	ldr	r3, [pc, #88]	; (822c8 <console_init+0x74>)
   8226e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   82270:	4b16      	ldr	r3, [pc, #88]	; (822cc <console_init+0x78>)
   82272:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   82274:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82278:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8227a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8227e:	9303      	str	r3, [sp, #12]
   82280:	2008      	movs	r0, #8
   82282:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   82284:	a901      	add	r1, sp, #4
   82286:	4620      	mov	r0, r4
   82288:	4b11      	ldr	r3, [pc, #68]	; (822d0 <console_init+0x7c>)
   8228a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8228c:	4d11      	ldr	r5, [pc, #68]	; (822d4 <console_init+0x80>)
   8228e:	682b      	ldr	r3, [r5, #0]
   82290:	2100      	movs	r1, #0
   82292:	6898      	ldr	r0, [r3, #8]
   82294:	4c10      	ldr	r4, [pc, #64]	; (822d8 <console_init+0x84>)
   82296:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82298:	682b      	ldr	r3, [r5, #0]
   8229a:	2100      	movs	r1, #0
   8229c:	6858      	ldr	r0, [r3, #4]
   8229e:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   822a0:	480e      	ldr	r0, [pc, #56]	; (822dc <console_init+0x88>)
   822a2:	4c0f      	ldr	r4, [pc, #60]	; (822e0 <console_init+0x8c>)
   822a4:	47a0      	blx	r4
	printf("=============\n");
   822a6:	480f      	ldr	r0, [pc, #60]	; (822e4 <console_init+0x90>)
   822a8:	47a0      	blx	r4
   822aa:	b005      	add	sp, #20
   822ac:	bd30      	pop	{r4, r5, pc}
   822ae:	bf00      	nop
   822b0:	00082971 	.word	0x00082971
   822b4:	400e0800 	.word	0x400e0800
   822b8:	2007ae5c 	.word	0x2007ae5c
   822bc:	000821b9 	.word	0x000821b9
   822c0:	2007ae58 	.word	0x2007ae58
   822c4:	0008210d 	.word	0x0008210d
   822c8:	2007ae04 	.word	0x2007ae04
   822cc:	0501bd00 	.word	0x0501bd00
   822d0:	00082401 	.word	0x00082401
   822d4:	20070188 	.word	0x20070188
   822d8:	00083d99 	.word	0x00083d99
   822dc:	00086b00 	.word	0x00086b00
   822e0:	00083be9 	.word	0x00083be9
   822e4:	00086b10 	.word	0x00086b10

000822e8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   822e8:	3801      	subs	r0, #1
   822ea:	2802      	cmp	r0, #2
   822ec:	d815      	bhi.n	8231a <_write+0x32>
{
   822ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822f2:	460e      	mov	r6, r1
   822f4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   822f6:	b19a      	cbz	r2, 82320 <_write+0x38>
   822f8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   822fa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 82334 <_write+0x4c>
   822fe:	4f0c      	ldr	r7, [pc, #48]	; (82330 <_write+0x48>)
   82300:	f8d8 0000 	ldr.w	r0, [r8]
   82304:	f815 1b01 	ldrb.w	r1, [r5], #1
   82308:	683b      	ldr	r3, [r7, #0]
   8230a:	4798      	blx	r3
   8230c:	2800      	cmp	r0, #0
   8230e:	db0a      	blt.n	82326 <_write+0x3e>
   82310:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   82312:	3c01      	subs	r4, #1
   82314:	d1f4      	bne.n	82300 <_write+0x18>
   82316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8231a:	f04f 30ff 	mov.w	r0, #4294967295
   8231e:	4770      	bx	lr
	for (; len != 0; --len) {
   82320:	4610      	mov	r0, r2
   82322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   82326:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8232a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8232e:	bf00      	nop
   82330:	2007ae58 	.word	0x2007ae58
   82334:	2007ae5c 	.word	0x2007ae5c

00082338 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   82338:	2a00      	cmp	r2, #0
   8233a:	d051      	beq.n	823e0 <usart_serial_read_packet+0xa8>
{
   8233c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82340:	b083      	sub	sp, #12
   82342:	4605      	mov	r5, r0
   82344:	460c      	mov	r4, r1
   82346:	4692      	mov	sl, r2
   82348:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   8234a:	4f26      	ldr	r7, [pc, #152]	; (823e4 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   8234c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 823f8 <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   82350:	4e25      	ldr	r6, [pc, #148]	; (823e8 <usart_serial_read_packet+0xb0>)
   82352:	e01d      	b.n	82390 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   82354:	4621      	mov	r1, r4
   82356:	4638      	mov	r0, r7
   82358:	47c8      	blx	r9
   8235a:	2800      	cmp	r0, #0
   8235c:	d1fa      	bne.n	82354 <usart_serial_read_packet+0x1c>
   8235e:	e021      	b.n	823a4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   82360:	469b      	mov	fp, r3
   82362:	f8df 8098 	ldr.w	r8, [pc, #152]	; 823fc <usart_serial_read_packet+0xc4>
   82366:	a901      	add	r1, sp, #4
   82368:	4658      	mov	r0, fp
   8236a:	47c0      	blx	r8
   8236c:	2800      	cmp	r0, #0
   8236e:	d1fa      	bne.n	82366 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   82370:	9b01      	ldr	r3, [sp, #4]
   82372:	7023      	strb	r3, [r4, #0]
   82374:	e019      	b.n	823aa <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   82376:	469b      	mov	fp, r3
   82378:	f8df 8080 	ldr.w	r8, [pc, #128]	; 823fc <usart_serial_read_packet+0xc4>
   8237c:	a901      	add	r1, sp, #4
   8237e:	4658      	mov	r0, fp
   82380:	47c0      	blx	r8
   82382:	2800      	cmp	r0, #0
   82384:	d1fa      	bne.n	8237c <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   82386:	9b01      	ldr	r3, [sp, #4]
   82388:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   8238a:	3401      	adds	r4, #1
	while (len) {
   8238c:	4554      	cmp	r4, sl
   8238e:	d023      	beq.n	823d8 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   82390:	2300      	movs	r3, #0
   82392:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   82394:	42bd      	cmp	r5, r7
   82396:	d0dd      	beq.n	82354 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   82398:	4b14      	ldr	r3, [pc, #80]	; (823ec <usart_serial_read_packet+0xb4>)
   8239a:	429d      	cmp	r5, r3
   8239c:	d0e0      	beq.n	82360 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   8239e:	4b14      	ldr	r3, [pc, #80]	; (823f0 <usart_serial_read_packet+0xb8>)
   823a0:	429d      	cmp	r5, r3
   823a2:	d0e8      	beq.n	82376 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   823a4:	4b13      	ldr	r3, [pc, #76]	; (823f4 <usart_serial_read_packet+0xbc>)
   823a6:	429d      	cmp	r5, r3
   823a8:	d00b      	beq.n	823c2 <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   823aa:	42b5      	cmp	r5, r6
   823ac:	d1ed      	bne.n	8238a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   823ae:	f8df 804c 	ldr.w	r8, [pc, #76]	; 823fc <usart_serial_read_packet+0xc4>
   823b2:	a901      	add	r1, sp, #4
   823b4:	4630      	mov	r0, r6
   823b6:	47c0      	blx	r8
   823b8:	2800      	cmp	r0, #0
   823ba:	d1fa      	bne.n	823b2 <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   823bc:	9b01      	ldr	r3, [sp, #4]
   823be:	7023      	strb	r3, [r4, #0]
   823c0:	e7e3      	b.n	8238a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   823c2:	469b      	mov	fp, r3
   823c4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 823fc <usart_serial_read_packet+0xc4>
   823c8:	a901      	add	r1, sp, #4
   823ca:	4658      	mov	r0, fp
   823cc:	47c0      	blx	r8
   823ce:	2800      	cmp	r0, #0
   823d0:	d1fa      	bne.n	823c8 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   823d2:	9b01      	ldr	r3, [sp, #4]
   823d4:	7023      	strb	r3, [r4, #0]
   823d6:	e7d8      	b.n	8238a <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   823d8:	2000      	movs	r0, #0
   823da:	b003      	add	sp, #12
   823dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823e0:	2000      	movs	r0, #0
   823e2:	4770      	bx	lr
   823e4:	400e0800 	.word	0x400e0800
   823e8:	400a4000 	.word	0x400a4000
   823ec:	40098000 	.word	0x40098000
   823f0:	4009c000 	.word	0x4009c000
   823f4:	400a0000 	.word	0x400a0000
   823f8:	00082447 	.word	0x00082447
   823fc:	00082095 	.word	0x00082095

00082400 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82400:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82402:	23ac      	movs	r3, #172	; 0xac
   82404:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   82406:	680b      	ldr	r3, [r1, #0]
   82408:	684a      	ldr	r2, [r1, #4]
   8240a:	fbb3 f3f2 	udiv	r3, r3, r2
   8240e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82410:	1e5c      	subs	r4, r3, #1
   82412:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   82416:	4294      	cmp	r4, r2
   82418:	d80b      	bhi.n	82432 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8241a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8241c:	688b      	ldr	r3, [r1, #8]
   8241e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   82420:	f240 2302 	movw	r3, #514	; 0x202
   82424:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   82428:	2350      	movs	r3, #80	; 0x50
   8242a:	6003      	str	r3, [r0, #0]

	return 0;
   8242c:	2000      	movs	r0, #0
}
   8242e:	bc10      	pop	{r4}
   82430:	4770      	bx	lr
		return 1;
   82432:	2001      	movs	r0, #1
   82434:	e7fb      	b.n	8242e <uart_init+0x2e>

00082436 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   82436:	6943      	ldr	r3, [r0, #20]
   82438:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8243c:	bf1a      	itte	ne
   8243e:	61c1      	strne	r1, [r0, #28]
	return 0;
   82440:	2000      	movne	r0, #0
		return 1;
   82442:	2001      	moveq	r0, #1
}
   82444:	4770      	bx	lr

00082446 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   82446:	6943      	ldr	r3, [r0, #20]
   82448:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8244c:	bf1d      	ittte	ne
   8244e:	6983      	ldrne	r3, [r0, #24]
   82450:	700b      	strbne	r3, [r1, #0]
	return 0;
   82452:	2000      	movne	r0, #0
		return 1;
   82454:	2001      	moveq	r0, #1
}
   82456:	4770      	bx	lr

00082458 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82458:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8245a:	480e      	ldr	r0, [pc, #56]	; (82494 <sysclk_init+0x3c>)
   8245c:	4b0e      	ldr	r3, [pc, #56]	; (82498 <sysclk_init+0x40>)
   8245e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82460:	213e      	movs	r1, #62	; 0x3e
   82462:	2000      	movs	r0, #0
   82464:	4b0d      	ldr	r3, [pc, #52]	; (8249c <sysclk_init+0x44>)
   82466:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   82468:	4c0d      	ldr	r4, [pc, #52]	; (824a0 <sysclk_init+0x48>)
   8246a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8246c:	2800      	cmp	r0, #0
   8246e:	d0fc      	beq.n	8246a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   82470:	4b0c      	ldr	r3, [pc, #48]	; (824a4 <sysclk_init+0x4c>)
   82472:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82474:	4a0c      	ldr	r2, [pc, #48]	; (824a8 <sysclk_init+0x50>)
   82476:	4b0d      	ldr	r3, [pc, #52]	; (824ac <sysclk_init+0x54>)
   82478:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8247a:	4c0d      	ldr	r4, [pc, #52]	; (824b0 <sysclk_init+0x58>)
   8247c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8247e:	2800      	cmp	r0, #0
   82480:	d0fc      	beq.n	8247c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82482:	2010      	movs	r0, #16
   82484:	4b0b      	ldr	r3, [pc, #44]	; (824b4 <sysclk_init+0x5c>)
   82486:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82488:	4b0b      	ldr	r3, [pc, #44]	; (824b8 <sysclk_init+0x60>)
   8248a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8248c:	4801      	ldr	r0, [pc, #4]	; (82494 <sysclk_init+0x3c>)
   8248e:	4b02      	ldr	r3, [pc, #8]	; (82498 <sysclk_init+0x40>)
   82490:	4798      	blx	r3
   82492:	bd10      	pop	{r4, pc}
   82494:	0501bd00 	.word	0x0501bd00
   82498:	200700a5 	.word	0x200700a5
   8249c:	000828ed 	.word	0x000828ed
   824a0:	00082941 	.word	0x00082941
   824a4:	00082951 	.word	0x00082951
   824a8:	200d3f01 	.word	0x200d3f01
   824ac:	400e0600 	.word	0x400e0600
   824b0:	00082961 	.word	0x00082961
   824b4:	00082889 	.word	0x00082889
   824b8:	00082a61 	.word	0x00082a61

000824bc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   824bc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   824be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   824c2:	4b16      	ldr	r3, [pc, #88]	; (8251c <board_init+0x60>)
   824c4:	605a      	str	r2, [r3, #4]
   824c6:	200b      	movs	r0, #11
   824c8:	4c15      	ldr	r4, [pc, #84]	; (82520 <board_init+0x64>)
   824ca:	47a0      	blx	r4
   824cc:	200c      	movs	r0, #12
   824ce:	47a0      	blx	r4
   824d0:	200d      	movs	r0, #13
   824d2:	47a0      	blx	r4
   824d4:	200e      	movs	r0, #14
   824d6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   824d8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   824dc:	203b      	movs	r0, #59	; 0x3b
   824de:	4c11      	ldr	r4, [pc, #68]	; (82524 <board_init+0x68>)
   824e0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   824e2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   824e6:	2055      	movs	r0, #85	; 0x55
   824e8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   824ea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   824ee:	2056      	movs	r0, #86	; 0x56
   824f0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   824f2:	490d      	ldr	r1, [pc, #52]	; (82528 <board_init+0x6c>)
   824f4:	2068      	movs	r0, #104	; 0x68
   824f6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   824f8:	490c      	ldr	r1, [pc, #48]	; (8252c <board_init+0x70>)
   824fa:	205c      	movs	r0, #92	; 0x5c
   824fc:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   824fe:	4a0c      	ldr	r2, [pc, #48]	; (82530 <board_init+0x74>)
   82500:	f44f 7140 	mov.w	r1, #768	; 0x300
   82504:	480b      	ldr	r0, [pc, #44]	; (82534 <board_init+0x78>)
   82506:	4b0c      	ldr	r3, [pc, #48]	; (82538 <board_init+0x7c>)
   82508:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8250a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8250e:	202b      	movs	r0, #43	; 0x2b
   82510:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82512:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82516:	202a      	movs	r0, #42	; 0x2a
   82518:	47a0      	blx	r4
   8251a:	bd10      	pop	{r4, pc}
   8251c:	400e1a50 	.word	0x400e1a50
   82520:	00082971 	.word	0x00082971
   82524:	0008260d 	.word	0x0008260d
   82528:	28000079 	.word	0x28000079
   8252c:	28000001 	.word	0x28000001
   82530:	08000001 	.word	0x08000001
   82534:	400e0e00 	.word	0x400e0e00
   82538:	000826dd 	.word	0x000826dd

0008253c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8253c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8253e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   82542:	d016      	beq.n	82572 <pio_set_peripheral+0x36>
   82544:	d80b      	bhi.n	8255e <pio_set_peripheral+0x22>
   82546:	b149      	cbz	r1, 8255c <pio_set_peripheral+0x20>
   82548:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8254c:	d105      	bne.n	8255a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8254e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   82550:	6f01      	ldr	r1, [r0, #112]	; 0x70
   82552:	400b      	ands	r3, r1
   82554:	ea23 0302 	bic.w	r3, r3, r2
   82558:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8255a:	6042      	str	r2, [r0, #4]
   8255c:	4770      	bx	lr
	switch (ul_type) {
   8255e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   82562:	d0fb      	beq.n	8255c <pio_set_peripheral+0x20>
   82564:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   82568:	d0f8      	beq.n	8255c <pio_set_peripheral+0x20>
   8256a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8256e:	d1f4      	bne.n	8255a <pio_set_peripheral+0x1e>
   82570:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   82572:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   82574:	4313      	orrs	r3, r2
   82576:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   82578:	e7ef      	b.n	8255a <pio_set_peripheral+0x1e>

0008257a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8257a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8257c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82580:	bf14      	ite	ne
   82582:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82584:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82586:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8258a:	bf14      	ite	ne
   8258c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8258e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   82590:	f012 0f02 	tst.w	r2, #2
   82594:	d107      	bne.n	825a6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   82596:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8259a:	bf18      	it	ne
   8259c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   825a0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   825a2:	6001      	str	r1, [r0, #0]
   825a4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   825a6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   825aa:	e7f9      	b.n	825a0 <pio_set_input+0x26>

000825ac <pio_set_output>:
{
   825ac:	b410      	push	{r4}
   825ae:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   825b0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   825b2:	b944      	cbnz	r4, 825c6 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   825b4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   825b6:	b143      	cbz	r3, 825ca <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   825b8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   825ba:	b942      	cbnz	r2, 825ce <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   825bc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   825be:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   825c0:	6001      	str	r1, [r0, #0]
}
   825c2:	bc10      	pop	{r4}
   825c4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   825c6:	6641      	str	r1, [r0, #100]	; 0x64
   825c8:	e7f5      	b.n	825b6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   825ca:	6541      	str	r1, [r0, #84]	; 0x54
   825cc:	e7f5      	b.n	825ba <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   825ce:	6301      	str	r1, [r0, #48]	; 0x30
   825d0:	e7f5      	b.n	825be <pio_set_output+0x12>

000825d2 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   825d2:	f012 0f10 	tst.w	r2, #16
   825d6:	d010      	beq.n	825fa <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   825d8:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   825dc:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   825e0:	bf14      	ite	ne
   825e2:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   825e6:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   825ea:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   825ee:	bf14      	ite	ne
   825f0:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   825f4:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   825f8:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   825fa:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   825fe:	4770      	bx	lr

00082600 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   82600:	6401      	str	r1, [r0, #64]	; 0x40
   82602:	4770      	bx	lr

00082604 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82604:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82606:	4770      	bx	lr

00082608 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82608:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8260a:	4770      	bx	lr

0008260c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8260c:	b570      	push	{r4, r5, r6, lr}
   8260e:	b082      	sub	sp, #8
   82610:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82612:	0943      	lsrs	r3, r0, #5
   82614:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82618:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8261c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8261e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   82622:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82626:	d031      	beq.n	8268c <pio_configure_pin+0x80>
   82628:	d816      	bhi.n	82658 <pio_configure_pin+0x4c>
   8262a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8262e:	d01b      	beq.n	82668 <pio_configure_pin+0x5c>
   82630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82634:	d116      	bne.n	82664 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82636:	f000 001f 	and.w	r0, r0, #31
   8263a:	2601      	movs	r6, #1
   8263c:	4086      	lsls	r6, r0
   8263e:	4632      	mov	r2, r6
   82640:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82644:	4620      	mov	r0, r4
   82646:	4b22      	ldr	r3, [pc, #136]	; (826d0 <pio_configure_pin+0xc4>)
   82648:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8264a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8264e:	bf14      	ite	ne
   82650:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82652:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82654:	2001      	movs	r0, #1
   82656:	e017      	b.n	82688 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82658:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8265c:	d021      	beq.n	826a2 <pio_configure_pin+0x96>
   8265e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82662:	d01e      	beq.n	826a2 <pio_configure_pin+0x96>
		return 0;
   82664:	2000      	movs	r0, #0
   82666:	e00f      	b.n	82688 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82668:	f000 001f 	and.w	r0, r0, #31
   8266c:	2601      	movs	r6, #1
   8266e:	4086      	lsls	r6, r0
   82670:	4632      	mov	r2, r6
   82672:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82676:	4620      	mov	r0, r4
   82678:	4b15      	ldr	r3, [pc, #84]	; (826d0 <pio_configure_pin+0xc4>)
   8267a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   8267c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82680:	bf14      	ite	ne
   82682:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82684:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82686:	2001      	movs	r0, #1
}
   82688:	b002      	add	sp, #8
   8268a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8268c:	f000 011f 	and.w	r1, r0, #31
   82690:	2601      	movs	r6, #1
   82692:	462a      	mov	r2, r5
   82694:	fa06 f101 	lsl.w	r1, r6, r1
   82698:	4620      	mov	r0, r4
   8269a:	4b0e      	ldr	r3, [pc, #56]	; (826d4 <pio_configure_pin+0xc8>)
   8269c:	4798      	blx	r3
	return 1;
   8269e:	4630      	mov	r0, r6
		break;
   826a0:	e7f2      	b.n	82688 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   826a2:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   826a6:	f000 011f 	and.w	r1, r0, #31
   826aa:	2601      	movs	r6, #1
   826ac:	ea05 0306 	and.w	r3, r5, r6
   826b0:	9300      	str	r3, [sp, #0]
   826b2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   826b6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   826ba:	bf14      	ite	ne
   826bc:	2200      	movne	r2, #0
   826be:	2201      	moveq	r2, #1
   826c0:	fa06 f101 	lsl.w	r1, r6, r1
   826c4:	4620      	mov	r0, r4
   826c6:	4c04      	ldr	r4, [pc, #16]	; (826d8 <pio_configure_pin+0xcc>)
   826c8:	47a0      	blx	r4
	return 1;
   826ca:	4630      	mov	r0, r6
		break;
   826cc:	e7dc      	b.n	82688 <pio_configure_pin+0x7c>
   826ce:	bf00      	nop
   826d0:	0008253d 	.word	0x0008253d
   826d4:	0008257b 	.word	0x0008257b
   826d8:	000825ad 	.word	0x000825ad

000826dc <pio_configure_pin_group>:
{
   826dc:	b570      	push	{r4, r5, r6, lr}
   826de:	b082      	sub	sp, #8
   826e0:	4605      	mov	r5, r0
   826e2:	460e      	mov	r6, r1
   826e4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   826e6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   826ea:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   826ee:	d027      	beq.n	82740 <pio_configure_pin_group+0x64>
   826f0:	d811      	bhi.n	82716 <pio_configure_pin_group+0x3a>
   826f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   826f6:	d016      	beq.n	82726 <pio_configure_pin_group+0x4a>
   826f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   826fc:	d111      	bne.n	82722 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   826fe:	460a      	mov	r2, r1
   82700:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82704:	4b19      	ldr	r3, [pc, #100]	; (8276c <pio_configure_pin_group+0x90>)
   82706:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82708:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8270c:	bf14      	ite	ne
   8270e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82710:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82712:	2001      	movs	r0, #1
   82714:	e012      	b.n	8273c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   82716:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8271a:	d015      	beq.n	82748 <pio_configure_pin_group+0x6c>
   8271c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82720:	d012      	beq.n	82748 <pio_configure_pin_group+0x6c>
		return 0;
   82722:	2000      	movs	r0, #0
   82724:	e00a      	b.n	8273c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82726:	460a      	mov	r2, r1
   82728:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8272c:	4b0f      	ldr	r3, [pc, #60]	; (8276c <pio_configure_pin_group+0x90>)
   8272e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82730:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82734:	bf14      	ite	ne
   82736:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82738:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8273a:	2001      	movs	r0, #1
}
   8273c:	b002      	add	sp, #8
   8273e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82740:	4b0b      	ldr	r3, [pc, #44]	; (82770 <pio_configure_pin_group+0x94>)
   82742:	4798      	blx	r3
	return 1;
   82744:	2001      	movs	r0, #1
		break;
   82746:	e7f9      	b.n	8273c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82748:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   8274c:	f004 0301 	and.w	r3, r4, #1
   82750:	9300      	str	r3, [sp, #0]
   82752:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82756:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8275a:	bf14      	ite	ne
   8275c:	2200      	movne	r2, #0
   8275e:	2201      	moveq	r2, #1
   82760:	4631      	mov	r1, r6
   82762:	4628      	mov	r0, r5
   82764:	4c03      	ldr	r4, [pc, #12]	; (82774 <pio_configure_pin_group+0x98>)
   82766:	47a0      	blx	r4
	return 1;
   82768:	2001      	movs	r0, #1
		break;
   8276a:	e7e7      	b.n	8273c <pio_configure_pin_group+0x60>
   8276c:	0008253d 	.word	0x0008253d
   82770:	0008257b 	.word	0x0008257b
   82774:	000825ad 	.word	0x000825ad

00082778 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8277c:	4604      	mov	r4, r0
   8277e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82780:	4b0e      	ldr	r3, [pc, #56]	; (827bc <pio_handler_process+0x44>)
   82782:	4798      	blx	r3
   82784:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82786:	4620      	mov	r0, r4
   82788:	4b0d      	ldr	r3, [pc, #52]	; (827c0 <pio_handler_process+0x48>)
   8278a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8278c:	4005      	ands	r5, r0
   8278e:	d013      	beq.n	827b8 <pio_handler_process+0x40>
   82790:	4c0c      	ldr	r4, [pc, #48]	; (827c4 <pio_handler_process+0x4c>)
   82792:	f104 0660 	add.w	r6, r4, #96	; 0x60
   82796:	e003      	b.n	827a0 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82798:	42b4      	cmp	r4, r6
   8279a:	d00d      	beq.n	827b8 <pio_handler_process+0x40>
   8279c:	3410      	adds	r4, #16
		while (status != 0) {
   8279e:	b15d      	cbz	r5, 827b8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   827a0:	6820      	ldr	r0, [r4, #0]
   827a2:	4540      	cmp	r0, r8
   827a4:	d1f8      	bne.n	82798 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   827a6:	6861      	ldr	r1, [r4, #4]
   827a8:	4229      	tst	r1, r5
   827aa:	d0f5      	beq.n	82798 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   827ac:	68e3      	ldr	r3, [r4, #12]
   827ae:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   827b0:	6863      	ldr	r3, [r4, #4]
   827b2:	ea25 0503 	bic.w	r5, r5, r3
   827b6:	e7ef      	b.n	82798 <pio_handler_process+0x20>
   827b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   827bc:	00082605 	.word	0x00082605
   827c0:	00082609 	.word	0x00082609
   827c4:	2007ad58 	.word	0x2007ad58

000827c8 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   827c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   827ca:	4c18      	ldr	r4, [pc, #96]	; (8282c <pio_handler_set+0x64>)
   827cc:	6826      	ldr	r6, [r4, #0]
   827ce:	2e06      	cmp	r6, #6
   827d0:	d829      	bhi.n	82826 <pio_handler_set+0x5e>
   827d2:	f04f 0c00 	mov.w	ip, #0
   827d6:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   827d8:	4f15      	ldr	r7, [pc, #84]	; (82830 <pio_handler_set+0x68>)
   827da:	e004      	b.n	827e6 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   827dc:	3401      	adds	r4, #1
   827de:	b2e4      	uxtb	r4, r4
   827e0:	46a4      	mov	ip, r4
   827e2:	42a6      	cmp	r6, r4
   827e4:	d309      	bcc.n	827fa <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   827e6:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   827e8:	0125      	lsls	r5, r4, #4
   827ea:	597d      	ldr	r5, [r7, r5]
   827ec:	428d      	cmp	r5, r1
   827ee:	d1f5      	bne.n	827dc <pio_handler_set+0x14>
   827f0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   827f4:	686d      	ldr	r5, [r5, #4]
   827f6:	4295      	cmp	r5, r2
   827f8:	d1f0      	bne.n	827dc <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   827fa:	4d0d      	ldr	r5, [pc, #52]	; (82830 <pio_handler_set+0x68>)
   827fc:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   82800:	eb05 040e 	add.w	r4, r5, lr
   82804:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   82808:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   8280a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   8280c:	9906      	ldr	r1, [sp, #24]
   8280e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   82810:	3601      	adds	r6, #1
   82812:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   82814:	bf04      	itt	eq
   82816:	4905      	ldreq	r1, [pc, #20]	; (8282c <pio_handler_set+0x64>)
   82818:	600e      	streq	r6, [r1, #0]
   8281a:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   8281c:	461a      	mov	r2, r3
   8281e:	4b05      	ldr	r3, [pc, #20]	; (82834 <pio_handler_set+0x6c>)
   82820:	4798      	blx	r3

	return 0;
   82822:	2000      	movs	r0, #0
   82824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   82826:	2001      	movs	r0, #1
}
   82828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8282a:	bf00      	nop
   8282c:	2007adc8 	.word	0x2007adc8
   82830:	2007ad58 	.word	0x2007ad58
   82834:	000825d3 	.word	0x000825d3

00082838 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82838:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8283a:	210b      	movs	r1, #11
   8283c:	4801      	ldr	r0, [pc, #4]	; (82844 <PIOA_Handler+0xc>)
   8283e:	4b02      	ldr	r3, [pc, #8]	; (82848 <PIOA_Handler+0x10>)
   82840:	4798      	blx	r3
   82842:	bd08      	pop	{r3, pc}
   82844:	400e0e00 	.word	0x400e0e00
   82848:	00082779 	.word	0x00082779

0008284c <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   8284c:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8284e:	210c      	movs	r1, #12
   82850:	4801      	ldr	r0, [pc, #4]	; (82858 <PIOB_Handler+0xc>)
   82852:	4b02      	ldr	r3, [pc, #8]	; (8285c <PIOB_Handler+0x10>)
   82854:	4798      	blx	r3
   82856:	bd08      	pop	{r3, pc}
   82858:	400e1000 	.word	0x400e1000
   8285c:	00082779 	.word	0x00082779

00082860 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82860:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82862:	210d      	movs	r1, #13
   82864:	4801      	ldr	r0, [pc, #4]	; (8286c <PIOC_Handler+0xc>)
   82866:	4b02      	ldr	r3, [pc, #8]	; (82870 <PIOC_Handler+0x10>)
   82868:	4798      	blx	r3
   8286a:	bd08      	pop	{r3, pc}
   8286c:	400e1200 	.word	0x400e1200
   82870:	00082779 	.word	0x00082779

00082874 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82874:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82876:	210e      	movs	r1, #14
   82878:	4801      	ldr	r0, [pc, #4]	; (82880 <PIOD_Handler+0xc>)
   8287a:	4b02      	ldr	r3, [pc, #8]	; (82884 <PIOD_Handler+0x10>)
   8287c:	4798      	blx	r3
   8287e:	bd08      	pop	{r3, pc}
   82880:	400e1400 	.word	0x400e1400
   82884:	00082779 	.word	0x00082779

00082888 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82888:	4a17      	ldr	r2, [pc, #92]	; (828e8 <pmc_switch_mck_to_pllack+0x60>)
   8288a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8288c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82890:	4318      	orrs	r0, r3
   82892:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82894:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82896:	f013 0f08 	tst.w	r3, #8
   8289a:	d10a      	bne.n	828b2 <pmc_switch_mck_to_pllack+0x2a>
   8289c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   828a0:	4911      	ldr	r1, [pc, #68]	; (828e8 <pmc_switch_mck_to_pllack+0x60>)
   828a2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   828a4:	f012 0f08 	tst.w	r2, #8
   828a8:	d103      	bne.n	828b2 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   828aa:	3b01      	subs	r3, #1
   828ac:	d1f9      	bne.n	828a2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   828ae:	2001      	movs	r0, #1
   828b0:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   828b2:	4a0d      	ldr	r2, [pc, #52]	; (828e8 <pmc_switch_mck_to_pllack+0x60>)
   828b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   828b6:	f023 0303 	bic.w	r3, r3, #3
   828ba:	f043 0302 	orr.w	r3, r3, #2
   828be:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   828c0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   828c2:	f013 0f08 	tst.w	r3, #8
   828c6:	d10a      	bne.n	828de <pmc_switch_mck_to_pllack+0x56>
   828c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   828cc:	4906      	ldr	r1, [pc, #24]	; (828e8 <pmc_switch_mck_to_pllack+0x60>)
   828ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   828d0:	f012 0f08 	tst.w	r2, #8
   828d4:	d105      	bne.n	828e2 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   828d6:	3b01      	subs	r3, #1
   828d8:	d1f9      	bne.n	828ce <pmc_switch_mck_to_pllack+0x46>
			return 1;
   828da:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   828dc:	4770      	bx	lr
	return 0;
   828de:	2000      	movs	r0, #0
   828e0:	4770      	bx	lr
   828e2:	2000      	movs	r0, #0
   828e4:	4770      	bx	lr
   828e6:	bf00      	nop
   828e8:	400e0600 	.word	0x400e0600

000828ec <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   828ec:	b9c8      	cbnz	r0, 82922 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   828ee:	4a11      	ldr	r2, [pc, #68]	; (82934 <pmc_switch_mainck_to_xtal+0x48>)
   828f0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   828f2:	0209      	lsls	r1, r1, #8
   828f4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   828f6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   828fa:	f023 0303 	bic.w	r3, r3, #3
   828fe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82902:	f043 0301 	orr.w	r3, r3, #1
   82906:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82908:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8290a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8290c:	f013 0f01 	tst.w	r3, #1
   82910:	d0fb      	beq.n	8290a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82912:	4a08      	ldr	r2, [pc, #32]	; (82934 <pmc_switch_mainck_to_xtal+0x48>)
   82914:	6a13      	ldr	r3, [r2, #32]
   82916:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8291a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8291e:	6213      	str	r3, [r2, #32]
   82920:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82922:	4904      	ldr	r1, [pc, #16]	; (82934 <pmc_switch_mainck_to_xtal+0x48>)
   82924:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82926:	4a04      	ldr	r2, [pc, #16]	; (82938 <pmc_switch_mainck_to_xtal+0x4c>)
   82928:	401a      	ands	r2, r3
   8292a:	4b04      	ldr	r3, [pc, #16]	; (8293c <pmc_switch_mainck_to_xtal+0x50>)
   8292c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8292e:	620b      	str	r3, [r1, #32]
   82930:	4770      	bx	lr
   82932:	bf00      	nop
   82934:	400e0600 	.word	0x400e0600
   82938:	fec8fffc 	.word	0xfec8fffc
   8293c:	01370002 	.word	0x01370002

00082940 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82940:	4b02      	ldr	r3, [pc, #8]	; (8294c <pmc_osc_is_ready_mainck+0xc>)
   82942:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82944:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82948:	4770      	bx	lr
   8294a:	bf00      	nop
   8294c:	400e0600 	.word	0x400e0600

00082950 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82950:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82954:	4b01      	ldr	r3, [pc, #4]	; (8295c <pmc_disable_pllack+0xc>)
   82956:	629a      	str	r2, [r3, #40]	; 0x28
   82958:	4770      	bx	lr
   8295a:	bf00      	nop
   8295c:	400e0600 	.word	0x400e0600

00082960 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82960:	4b02      	ldr	r3, [pc, #8]	; (8296c <pmc_is_locked_pllack+0xc>)
   82962:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82964:	f000 0002 	and.w	r0, r0, #2
   82968:	4770      	bx	lr
   8296a:	bf00      	nop
   8296c:	400e0600 	.word	0x400e0600

00082970 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82970:	282c      	cmp	r0, #44	; 0x2c
   82972:	d81e      	bhi.n	829b2 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82974:	281f      	cmp	r0, #31
   82976:	d80c      	bhi.n	82992 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82978:	4b11      	ldr	r3, [pc, #68]	; (829c0 <pmc_enable_periph_clk+0x50>)
   8297a:	699a      	ldr	r2, [r3, #24]
   8297c:	2301      	movs	r3, #1
   8297e:	4083      	lsls	r3, r0
   82980:	4393      	bics	r3, r2
   82982:	d018      	beq.n	829b6 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   82984:	2301      	movs	r3, #1
   82986:	fa03 f000 	lsl.w	r0, r3, r0
   8298a:	4b0d      	ldr	r3, [pc, #52]	; (829c0 <pmc_enable_periph_clk+0x50>)
   8298c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8298e:	2000      	movs	r0, #0
   82990:	4770      	bx	lr
		ul_id -= 32;
   82992:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82994:	4b0a      	ldr	r3, [pc, #40]	; (829c0 <pmc_enable_periph_clk+0x50>)
   82996:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8299a:	2301      	movs	r3, #1
   8299c:	4083      	lsls	r3, r0
   8299e:	4393      	bics	r3, r2
   829a0:	d00b      	beq.n	829ba <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   829a2:	2301      	movs	r3, #1
   829a4:	fa03 f000 	lsl.w	r0, r3, r0
   829a8:	4b05      	ldr	r3, [pc, #20]	; (829c0 <pmc_enable_periph_clk+0x50>)
   829aa:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   829ae:	2000      	movs	r0, #0
   829b0:	4770      	bx	lr
		return 1;
   829b2:	2001      	movs	r0, #1
   829b4:	4770      	bx	lr
	return 0;
   829b6:	2000      	movs	r0, #0
   829b8:	4770      	bx	lr
   829ba:	2000      	movs	r0, #0
}
   829bc:	4770      	bx	lr
   829be:	bf00      	nop
   829c0:	400e0600 	.word	0x400e0600

000829c4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   829c4:	e7fe      	b.n	829c4 <Dummy_Handler>
	...

000829c8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   829c8:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   829ca:	4b1c      	ldr	r3, [pc, #112]	; (82a3c <Reset_Handler+0x74>)
   829cc:	4a1c      	ldr	r2, [pc, #112]	; (82a40 <Reset_Handler+0x78>)
   829ce:	429a      	cmp	r2, r3
   829d0:	d010      	beq.n	829f4 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   829d2:	4b1c      	ldr	r3, [pc, #112]	; (82a44 <Reset_Handler+0x7c>)
   829d4:	4a19      	ldr	r2, [pc, #100]	; (82a3c <Reset_Handler+0x74>)
   829d6:	429a      	cmp	r2, r3
   829d8:	d20c      	bcs.n	829f4 <Reset_Handler+0x2c>
   829da:	3b01      	subs	r3, #1
   829dc:	1a9b      	subs	r3, r3, r2
   829de:	f023 0303 	bic.w	r3, r3, #3
   829e2:	3304      	adds	r3, #4
   829e4:	4413      	add	r3, r2
   829e6:	4916      	ldr	r1, [pc, #88]	; (82a40 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   829e8:	f851 0b04 	ldr.w	r0, [r1], #4
   829ec:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   829f0:	429a      	cmp	r2, r3
   829f2:	d1f9      	bne.n	829e8 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   829f4:	4b14      	ldr	r3, [pc, #80]	; (82a48 <Reset_Handler+0x80>)
   829f6:	4a15      	ldr	r2, [pc, #84]	; (82a4c <Reset_Handler+0x84>)
   829f8:	429a      	cmp	r2, r3
   829fa:	d20a      	bcs.n	82a12 <Reset_Handler+0x4a>
   829fc:	3b01      	subs	r3, #1
   829fe:	1a9b      	subs	r3, r3, r2
   82a00:	f023 0303 	bic.w	r3, r3, #3
   82a04:	3304      	adds	r3, #4
   82a06:	4413      	add	r3, r2
		*pDest++ = 0;
   82a08:	2100      	movs	r1, #0
   82a0a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   82a0e:	4293      	cmp	r3, r2
   82a10:	d1fb      	bne.n	82a0a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82a12:	4b0f      	ldr	r3, [pc, #60]	; (82a50 <Reset_Handler+0x88>)
   82a14:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82a18:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82a1c:	490d      	ldr	r1, [pc, #52]	; (82a54 <Reset_Handler+0x8c>)
   82a1e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82a20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   82a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82a28:	d203      	bcs.n	82a32 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82a2a:	688b      	ldr	r3, [r1, #8]
   82a2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82a30:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82a32:	4b09      	ldr	r3, [pc, #36]	; (82a58 <Reset_Handler+0x90>)
   82a34:	4798      	blx	r3

	/* Branch to main function */
	main();
   82a36:	4b09      	ldr	r3, [pc, #36]	; (82a5c <Reset_Handler+0x94>)
   82a38:	4798      	blx	r3
   82a3a:	e7fe      	b.n	82a3a <Reset_Handler+0x72>
   82a3c:	20070000 	.word	0x20070000
   82a40:	00086d14 	.word	0x00086d14
   82a44:	20070b38 	.word	0x20070b38
   82a48:	2007ae88 	.word	0x2007ae88
   82a4c:	20070b38 	.word	0x20070b38
   82a50:	00080000 	.word	0x00080000
   82a54:	e000ed00 	.word	0xe000ed00
   82a58:	00083b99 	.word	0x00083b99
   82a5c:	00082bc9 	.word	0x00082bc9

00082a60 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82a60:	4b3d      	ldr	r3, [pc, #244]	; (82b58 <SystemCoreClockUpdate+0xf8>)
   82a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a64:	f003 0303 	and.w	r3, r3, #3
   82a68:	2b03      	cmp	r3, #3
   82a6a:	d80e      	bhi.n	82a8a <SystemCoreClockUpdate+0x2a>
   82a6c:	e8df f003 	tbb	[pc, r3]
   82a70:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82a74:	4b39      	ldr	r3, [pc, #228]	; (82b5c <SystemCoreClockUpdate+0xfc>)
   82a76:	695b      	ldr	r3, [r3, #20]
   82a78:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82a7c:	bf14      	ite	ne
   82a7e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82a82:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82a86:	4b36      	ldr	r3, [pc, #216]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82a88:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82a8a:	4b33      	ldr	r3, [pc, #204]	; (82b58 <SystemCoreClockUpdate+0xf8>)
   82a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82a8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82a92:	2b70      	cmp	r3, #112	; 0x70
   82a94:	d057      	beq.n	82b46 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82a96:	4b30      	ldr	r3, [pc, #192]	; (82b58 <SystemCoreClockUpdate+0xf8>)
   82a98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82a9a:	4931      	ldr	r1, [pc, #196]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82a9c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82aa0:	680b      	ldr	r3, [r1, #0]
   82aa2:	40d3      	lsrs	r3, r2
   82aa4:	600b      	str	r3, [r1, #0]
   82aa6:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82aa8:	4b2b      	ldr	r3, [pc, #172]	; (82b58 <SystemCoreClockUpdate+0xf8>)
   82aaa:	6a1b      	ldr	r3, [r3, #32]
   82aac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82ab0:	d003      	beq.n	82aba <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82ab2:	4a2c      	ldr	r2, [pc, #176]	; (82b64 <SystemCoreClockUpdate+0x104>)
   82ab4:	4b2a      	ldr	r3, [pc, #168]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82ab6:	601a      	str	r2, [r3, #0]
   82ab8:	e7e7      	b.n	82a8a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82aba:	4a2b      	ldr	r2, [pc, #172]	; (82b68 <SystemCoreClockUpdate+0x108>)
   82abc:	4b28      	ldr	r3, [pc, #160]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82abe:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82ac0:	4b25      	ldr	r3, [pc, #148]	; (82b58 <SystemCoreClockUpdate+0xf8>)
   82ac2:	6a1b      	ldr	r3, [r3, #32]
   82ac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82ac8:	2b10      	cmp	r3, #16
   82aca:	d005      	beq.n	82ad8 <SystemCoreClockUpdate+0x78>
   82acc:	2b20      	cmp	r3, #32
   82ace:	d1dc      	bne.n	82a8a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82ad0:	4a24      	ldr	r2, [pc, #144]	; (82b64 <SystemCoreClockUpdate+0x104>)
   82ad2:	4b23      	ldr	r3, [pc, #140]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82ad4:	601a      	str	r2, [r3, #0]
				break;
   82ad6:	e7d8      	b.n	82a8a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82ad8:	4a24      	ldr	r2, [pc, #144]	; (82b6c <SystemCoreClockUpdate+0x10c>)
   82ada:	4b21      	ldr	r3, [pc, #132]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82adc:	601a      	str	r2, [r3, #0]
				break;
   82ade:	e7d4      	b.n	82a8a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82ae0:	4b1d      	ldr	r3, [pc, #116]	; (82b58 <SystemCoreClockUpdate+0xf8>)
   82ae2:	6a1b      	ldr	r3, [r3, #32]
   82ae4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82ae8:	d00c      	beq.n	82b04 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82aea:	4a1e      	ldr	r2, [pc, #120]	; (82b64 <SystemCoreClockUpdate+0x104>)
   82aec:	4b1c      	ldr	r3, [pc, #112]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82aee:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82af0:	4b19      	ldr	r3, [pc, #100]	; (82b58 <SystemCoreClockUpdate+0xf8>)
   82af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82af4:	f003 0303 	and.w	r3, r3, #3
   82af8:	2b02      	cmp	r3, #2
   82afa:	d016      	beq.n	82b2a <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82afc:	4a1c      	ldr	r2, [pc, #112]	; (82b70 <SystemCoreClockUpdate+0x110>)
   82afe:	4b18      	ldr	r3, [pc, #96]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82b00:	601a      	str	r2, [r3, #0]
   82b02:	e7c2      	b.n	82a8a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82b04:	4a18      	ldr	r2, [pc, #96]	; (82b68 <SystemCoreClockUpdate+0x108>)
   82b06:	4b16      	ldr	r3, [pc, #88]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82b08:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82b0a:	4b13      	ldr	r3, [pc, #76]	; (82b58 <SystemCoreClockUpdate+0xf8>)
   82b0c:	6a1b      	ldr	r3, [r3, #32]
   82b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82b12:	2b10      	cmp	r3, #16
   82b14:	d005      	beq.n	82b22 <SystemCoreClockUpdate+0xc2>
   82b16:	2b20      	cmp	r3, #32
   82b18:	d1ea      	bne.n	82af0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   82b1a:	4a12      	ldr	r2, [pc, #72]	; (82b64 <SystemCoreClockUpdate+0x104>)
   82b1c:	4b10      	ldr	r3, [pc, #64]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82b1e:	601a      	str	r2, [r3, #0]
				break;
   82b20:	e7e6      	b.n	82af0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   82b22:	4a12      	ldr	r2, [pc, #72]	; (82b6c <SystemCoreClockUpdate+0x10c>)
   82b24:	4b0e      	ldr	r3, [pc, #56]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82b26:	601a      	str	r2, [r3, #0]
				break;
   82b28:	e7e2      	b.n	82af0 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82b2a:	4a0b      	ldr	r2, [pc, #44]	; (82b58 <SystemCoreClockUpdate+0xf8>)
   82b2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82b2e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82b30:	480b      	ldr	r0, [pc, #44]	; (82b60 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82b32:	f3c1 410a 	ubfx	r1, r1, #16, #11
   82b36:	6803      	ldr	r3, [r0, #0]
   82b38:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82b3c:	b2d2      	uxtb	r2, r2
   82b3e:	fbb3 f3f2 	udiv	r3, r3, r2
   82b42:	6003      	str	r3, [r0, #0]
   82b44:	e7a1      	b.n	82a8a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   82b46:	4a06      	ldr	r2, [pc, #24]	; (82b60 <SystemCoreClockUpdate+0x100>)
   82b48:	6813      	ldr	r3, [r2, #0]
   82b4a:	490a      	ldr	r1, [pc, #40]	; (82b74 <SystemCoreClockUpdate+0x114>)
   82b4c:	fba1 1303 	umull	r1, r3, r1, r3
   82b50:	085b      	lsrs	r3, r3, #1
   82b52:	6013      	str	r3, [r2, #0]
   82b54:	4770      	bx	lr
   82b56:	bf00      	nop
   82b58:	400e0600 	.word	0x400e0600
   82b5c:	400e1a10 	.word	0x400e1a10
   82b60:	20070180 	.word	0x20070180
   82b64:	00b71b00 	.word	0x00b71b00
   82b68:	003d0900 	.word	0x003d0900
   82b6c:	007a1200 	.word	0x007a1200
   82b70:	0e4e1c00 	.word	0x0e4e1c00
   82b74:	aaaaaaab 	.word	0xaaaaaaab

00082b78 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82b78:	4b0a      	ldr	r3, [pc, #40]	; (82ba4 <_sbrk+0x2c>)
   82b7a:	681b      	ldr	r3, [r3, #0]
   82b7c:	b153      	cbz	r3, 82b94 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   82b7e:	4b09      	ldr	r3, [pc, #36]	; (82ba4 <_sbrk+0x2c>)
   82b80:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82b82:	181a      	adds	r2, r3, r0
   82b84:	4908      	ldr	r1, [pc, #32]	; (82ba8 <_sbrk+0x30>)
   82b86:	4291      	cmp	r1, r2
   82b88:	db08      	blt.n	82b9c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   82b8a:	4610      	mov	r0, r2
   82b8c:	4a05      	ldr	r2, [pc, #20]	; (82ba4 <_sbrk+0x2c>)
   82b8e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82b90:	4618      	mov	r0, r3
   82b92:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82b94:	4a05      	ldr	r2, [pc, #20]	; (82bac <_sbrk+0x34>)
   82b96:	4b03      	ldr	r3, [pc, #12]	; (82ba4 <_sbrk+0x2c>)
   82b98:	601a      	str	r2, [r3, #0]
   82b9a:	e7f0      	b.n	82b7e <_sbrk+0x6>
		return (caddr_t) -1;	
   82b9c:	f04f 30ff 	mov.w	r0, #4294967295
}
   82ba0:	4770      	bx	lr
   82ba2:	bf00      	nop
   82ba4:	2007adcc 	.word	0x2007adcc
   82ba8:	20087ffc 	.word	0x20087ffc
   82bac:	2007ce88 	.word	0x2007ce88

00082bb0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82bb0:	f04f 30ff 	mov.w	r0, #4294967295
   82bb4:	4770      	bx	lr

00082bb6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82bb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82bba:	604b      	str	r3, [r1, #4]

	return 0;
}
   82bbc:	2000      	movs	r0, #0
   82bbe:	4770      	bx	lr

00082bc0 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82bc0:	2001      	movs	r0, #1
   82bc2:	4770      	bx	lr

00082bc4 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82bc4:	2000      	movs	r0, #0
   82bc6:	4770      	bx	lr

00082bc8 <main>:
// 		.length =10,
// 	};

int main (void)

{
   82bc8:	b570      	push	{r4, r5, r6, lr}
   82bca:	b084      	sub	sp, #16
	sysclk_init();
   82bcc:	4b3b      	ldr	r3, [pc, #236]	; (82cbc <main+0xf4>)
   82bce:	4798      	blx	r3
	board_init();
   82bd0:	4b3b      	ldr	r3, [pc, #236]	; (82cc0 <main+0xf8>)
   82bd2:	4798      	blx	r3
   82bd4:	200b      	movs	r0, #11
   82bd6:	4c3b      	ldr	r4, [pc, #236]	; (82cc4 <main+0xfc>)
   82bd8:	47a0      	blx	r4
   82bda:	200c      	movs	r0, #12
   82bdc:	47a0      	blx	r4
   82bde:	200d      	movs	r0, #13
   82be0:	47a0      	blx	r4
   82be2:	200e      	movs	r0, #14
   82be4:	47a0      	blx	r4
	delay_init();
	ioport_init();
	console_init();
   82be6:	4b38      	ldr	r3, [pc, #224]	; (82cc8 <main+0x100>)
   82be8:	4798      	blx	r3
	encoder_init();
   82bea:	4b38      	ldr	r3, [pc, #224]	; (82ccc <main+0x104>)
   82bec:	4798      	blx	r3
	PWM_init();
   82bee:	4b38      	ldr	r3, [pc, #224]	; (82cd0 <main+0x108>)
   82bf0:	4798      	blx	r3
	I2C_master_init();
   82bf2:	4b38      	ldr	r3, [pc, #224]	; (82cd4 <main+0x10c>)
   82bf4:	4798      	blx	r3
	
	ioport_enable_pin(pin_mapper(TASK_DEBUG_MOTOR_PIN));
   82bf6:	2035      	movs	r0, #53	; 0x35
   82bf8:	4d37      	ldr	r5, [pc, #220]	; (82cd8 <main+0x110>)
   82bfa:	47a8      	blx	r5
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   82bfc:	f000 031f 	and.w	r3, r0, #31
   82c00:	2401      	movs	r4, #1
   82c02:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   82c06:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82c08:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   82c0c:	f200 7007 	addw	r0, r0, #1799	; 0x707
   82c10:	0240      	lsls	r0, r0, #9
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   82c12:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(TASK_DEBUG_MAIN_PIN));
   82c14:	2034      	movs	r0, #52	; 0x34
   82c16:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   82c18:	f000 031f 	and.w	r3, r0, #31
   82c1c:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   82c20:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82c22:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   82c26:	f200 7007 	addw	r0, r0, #1799	; 0x707
   82c2a:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   82c2c:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(30));
   82c2e:	201e      	movs	r0, #30
   82c30:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   82c32:	f000 031f 	and.w	r3, r0, #31
   82c36:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   82c3a:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82c3c:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   82c40:	f200 7007 	addw	r0, r0, #1799	; 0x707
   82c44:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   82c46:	6003      	str	r3, [r0, #0]
	ioport_set_pin_dir(pin_mapper(TASK_DEBUG_MOTOR_PIN), IOPORT_DIR_OUTPUT);
   82c48:	2035      	movs	r0, #53	; 0x35
   82c4a:	47a8      	blx	r5
	return pin >> 5;
   82c4c:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82c4e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82c52:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82c56:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   82c58:	f000 001f 	and.w	r0, r0, #31
   82c5c:	fa04 f000 	lsl.w	r0, r4, r0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82c60:	6118      	str	r0, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82c62:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(TASK_DEBUG_MAIN_PIN), IOPORT_DIR_OUTPUT);
   82c66:	2034      	movs	r0, #52	; 0x34
   82c68:	47a8      	blx	r5
	return pin >> 5;
   82c6a:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82c6c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82c70:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82c74:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   82c76:	f000 001f 	and.w	r0, r0, #31
   82c7a:	4084      	lsls	r4, r0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82c7c:	611c      	str	r4, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82c7e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
// 		for(int i = 0; i < 10; i++){
// 			printf("%d\n", array[i]);
// 		}
// 	}
	/* Create our tasks for the program */
	xTaskCreate(motor_task, (const signed char * const) "motor_task", TASK_MOTOR_STACK_SIZE, NULL, TASK_MOTOR_PRIORITY, NULL);
   82c82:	2400      	movs	r4, #0
   82c84:	9403      	str	r4, [sp, #12]
   82c86:	9402      	str	r4, [sp, #8]
   82c88:	9401      	str	r4, [sp, #4]
   82c8a:	2602      	movs	r6, #2
   82c8c:	9600      	str	r6, [sp, #0]
   82c8e:	4623      	mov	r3, r4
   82c90:	f44f 7200 	mov.w	r2, #512	; 0x200
   82c94:	4911      	ldr	r1, [pc, #68]	; (82cdc <main+0x114>)
   82c96:	4812      	ldr	r0, [pc, #72]	; (82ce0 <main+0x118>)
   82c98:	4d12      	ldr	r5, [pc, #72]	; (82ce4 <main+0x11c>)
   82c9a:	47a8      	blx	r5
	xTaskCreate(main_task, (const signed char * const) "main_task", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL);
   82c9c:	9403      	str	r4, [sp, #12]
   82c9e:	9402      	str	r4, [sp, #8]
   82ca0:	9401      	str	r4, [sp, #4]
   82ca2:	9600      	str	r6, [sp, #0]
   82ca4:	4623      	mov	r3, r4
   82ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
   82caa:	490f      	ldr	r1, [pc, #60]	; (82ce8 <main+0x120>)
   82cac:	480f      	ldr	r0, [pc, #60]	; (82cec <main+0x124>)
   82cae:	47a8      	blx	r5
	
	vTaskStartScheduler();
   82cb0:	4b0f      	ldr	r3, [pc, #60]	; (82cf0 <main+0x128>)
   82cb2:	4798      	blx	r3
	
	return 0;
}
   82cb4:	4620      	mov	r0, r4
   82cb6:	b004      	add	sp, #16
   82cb8:	bd70      	pop	{r4, r5, r6, pc}
   82cba:	bf00      	nop
   82cbc:	00082459 	.word	0x00082459
   82cc0:	000824bd 	.word	0x000824bd
   82cc4:	00082971 	.word	0x00082971
   82cc8:	00082255 	.word	0x00082255
   82ccc:	00081b41 	.word	0x00081b41
   82cd0:	00081a45 	.word	0x00081a45
   82cd4:	00080161 	.word	0x00080161
   82cd8:	00082075 	.word	0x00082075
   82cdc:	00086b20 	.word	0x00086b20
   82ce0:	00081ee1 	.word	0x00081ee1
   82ce4:	00080ced 	.word	0x00080ced
   82ce8:	00086b2c 	.word	0x00086b2c
   82cec:	00082059 	.word	0x00082059
   82cf0:	00080ef1 	.word	0x00080ef1
   82cf4:	00000000 	.word	0x00000000

00082cf8 <atan>:
   82cf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82cfc:	4bc2      	ldr	r3, [pc, #776]	; (83008 <atan+0x310>)
   82cfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   82d02:	429e      	cmp	r6, r3
   82d04:	460d      	mov	r5, r1
   82d06:	468a      	mov	sl, r1
   82d08:	4604      	mov	r4, r0
   82d0a:	dd10      	ble.n	82d2e <atan+0x36>
   82d0c:	4bbf      	ldr	r3, [pc, #764]	; (8300c <atan+0x314>)
   82d0e:	429e      	cmp	r6, r3
   82d10:	f300 80b5 	bgt.w	82e7e <atan+0x186>
   82d14:	f000 80b0 	beq.w	82e78 <atan+0x180>
   82d18:	4bbd      	ldr	r3, [pc, #756]	; (83010 <atan+0x318>)
   82d1a:	49be      	ldr	r1, [pc, #760]	; (83014 <atan+0x31c>)
   82d1c:	4cbe      	ldr	r4, [pc, #760]	; (83018 <atan+0x320>)
   82d1e:	f1ba 0f00 	cmp.w	sl, #0
   82d22:	bfd8      	it	le
   82d24:	460b      	movle	r3, r1
   82d26:	4620      	mov	r0, r4
   82d28:	4619      	mov	r1, r3
   82d2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d2e:	4bbb      	ldr	r3, [pc, #748]	; (8301c <atan+0x324>)
   82d30:	429e      	cmp	r6, r3
   82d32:	f300 80c1 	bgt.w	82eb8 <atan+0x1c0>
   82d36:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   82d3a:	429e      	cmp	r6, r3
   82d3c:	f340 80ab 	ble.w	82e96 <atan+0x19e>
   82d40:	f04f 3bff 	mov.w	fp, #4294967295
   82d44:	4622      	mov	r2, r4
   82d46:	462b      	mov	r3, r5
   82d48:	4620      	mov	r0, r4
   82d4a:	4629      	mov	r1, r5
   82d4c:	f000 fc4e 	bl	835ec <__aeabi_dmul>
   82d50:	4602      	mov	r2, r0
   82d52:	460b      	mov	r3, r1
   82d54:	4680      	mov	r8, r0
   82d56:	4689      	mov	r9, r1
   82d58:	f000 fc48 	bl	835ec <__aeabi_dmul>
   82d5c:	a392      	add	r3, pc, #584	; (adr r3, 82fa8 <atan+0x2b0>)
   82d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   82d62:	4606      	mov	r6, r0
   82d64:	460f      	mov	r7, r1
   82d66:	f000 fc41 	bl	835ec <__aeabi_dmul>
   82d6a:	a391      	add	r3, pc, #580	; (adr r3, 82fb0 <atan+0x2b8>)
   82d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   82d70:	f000 fa8a 	bl	83288 <__adddf3>
   82d74:	4632      	mov	r2, r6
   82d76:	463b      	mov	r3, r7
   82d78:	f000 fc38 	bl	835ec <__aeabi_dmul>
   82d7c:	a38e      	add	r3, pc, #568	; (adr r3, 82fb8 <atan+0x2c0>)
   82d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   82d82:	f000 fa81 	bl	83288 <__adddf3>
   82d86:	4632      	mov	r2, r6
   82d88:	463b      	mov	r3, r7
   82d8a:	f000 fc2f 	bl	835ec <__aeabi_dmul>
   82d8e:	a38c      	add	r3, pc, #560	; (adr r3, 82fc0 <atan+0x2c8>)
   82d90:	e9d3 2300 	ldrd	r2, r3, [r3]
   82d94:	f000 fa78 	bl	83288 <__adddf3>
   82d98:	4632      	mov	r2, r6
   82d9a:	463b      	mov	r3, r7
   82d9c:	f000 fc26 	bl	835ec <__aeabi_dmul>
   82da0:	a389      	add	r3, pc, #548	; (adr r3, 82fc8 <atan+0x2d0>)
   82da2:	e9d3 2300 	ldrd	r2, r3, [r3]
   82da6:	f000 fa6f 	bl	83288 <__adddf3>
   82daa:	4632      	mov	r2, r6
   82dac:	463b      	mov	r3, r7
   82dae:	f000 fc1d 	bl	835ec <__aeabi_dmul>
   82db2:	a387      	add	r3, pc, #540	; (adr r3, 82fd0 <atan+0x2d8>)
   82db4:	e9d3 2300 	ldrd	r2, r3, [r3]
   82db8:	f000 fa66 	bl	83288 <__adddf3>
   82dbc:	4642      	mov	r2, r8
   82dbe:	464b      	mov	r3, r9
   82dc0:	f000 fc14 	bl	835ec <__aeabi_dmul>
   82dc4:	a384      	add	r3, pc, #528	; (adr r3, 82fd8 <atan+0x2e0>)
   82dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   82dca:	4680      	mov	r8, r0
   82dcc:	4689      	mov	r9, r1
   82dce:	4630      	mov	r0, r6
   82dd0:	4639      	mov	r1, r7
   82dd2:	f000 fc0b 	bl	835ec <__aeabi_dmul>
   82dd6:	a382      	add	r3, pc, #520	; (adr r3, 82fe0 <atan+0x2e8>)
   82dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
   82ddc:	f000 fa52 	bl	83284 <__aeabi_dsub>
   82de0:	4632      	mov	r2, r6
   82de2:	463b      	mov	r3, r7
   82de4:	f000 fc02 	bl	835ec <__aeabi_dmul>
   82de8:	a37f      	add	r3, pc, #508	; (adr r3, 82fe8 <atan+0x2f0>)
   82dea:	e9d3 2300 	ldrd	r2, r3, [r3]
   82dee:	f000 fa49 	bl	83284 <__aeabi_dsub>
   82df2:	4632      	mov	r2, r6
   82df4:	463b      	mov	r3, r7
   82df6:	f000 fbf9 	bl	835ec <__aeabi_dmul>
   82dfa:	a37d      	add	r3, pc, #500	; (adr r3, 82ff0 <atan+0x2f8>)
   82dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   82e00:	f000 fa40 	bl	83284 <__aeabi_dsub>
   82e04:	4632      	mov	r2, r6
   82e06:	463b      	mov	r3, r7
   82e08:	f000 fbf0 	bl	835ec <__aeabi_dmul>
   82e0c:	a37a      	add	r3, pc, #488	; (adr r3, 82ff8 <atan+0x300>)
   82e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   82e12:	f000 fa37 	bl	83284 <__aeabi_dsub>
   82e16:	4632      	mov	r2, r6
   82e18:	463b      	mov	r3, r7
   82e1a:	f000 fbe7 	bl	835ec <__aeabi_dmul>
   82e1e:	f1bb 3fff 	cmp.w	fp, #4294967295
   82e22:	4602      	mov	r2, r0
   82e24:	460b      	mov	r3, r1
   82e26:	d06e      	beq.n	82f06 <atan+0x20e>
   82e28:	4640      	mov	r0, r8
   82e2a:	4649      	mov	r1, r9
   82e2c:	f000 fa2c 	bl	83288 <__adddf3>
   82e30:	4622      	mov	r2, r4
   82e32:	462b      	mov	r3, r5
   82e34:	f000 fbda 	bl	835ec <__aeabi_dmul>
   82e38:	4e79      	ldr	r6, [pc, #484]	; (83020 <atan+0x328>)
   82e3a:	4b7a      	ldr	r3, [pc, #488]	; (83024 <atan+0x32c>)
   82e3c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   82e40:	445e      	add	r6, fp
   82e42:	449b      	add	fp, r3
   82e44:	e9db 2300 	ldrd	r2, r3, [fp]
   82e48:	f000 fa1c 	bl	83284 <__aeabi_dsub>
   82e4c:	4622      	mov	r2, r4
   82e4e:	462b      	mov	r3, r5
   82e50:	f000 fa18 	bl	83284 <__aeabi_dsub>
   82e54:	460b      	mov	r3, r1
   82e56:	4602      	mov	r2, r0
   82e58:	e9d6 0100 	ldrd	r0, r1, [r6]
   82e5c:	f000 fa12 	bl	83284 <__aeabi_dsub>
   82e60:	f1ba 0f00 	cmp.w	sl, #0
   82e64:	4604      	mov	r4, r0
   82e66:	460b      	mov	r3, r1
   82e68:	f6bf af5d 	bge.w	82d26 <atan+0x2e>
   82e6c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   82e70:	4620      	mov	r0, r4
   82e72:	4619      	mov	r1, r3
   82e74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e78:	2800      	cmp	r0, #0
   82e7a:	f43f af4d 	beq.w	82d18 <atan+0x20>
   82e7e:	4622      	mov	r2, r4
   82e80:	462b      	mov	r3, r5
   82e82:	4620      	mov	r0, r4
   82e84:	4629      	mov	r1, r5
   82e86:	f000 f9ff 	bl	83288 <__adddf3>
   82e8a:	4604      	mov	r4, r0
   82e8c:	460b      	mov	r3, r1
   82e8e:	4620      	mov	r0, r4
   82e90:	4619      	mov	r1, r3
   82e92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e96:	a35a      	add	r3, pc, #360	; (adr r3, 83000 <atan+0x308>)
   82e98:	e9d3 2300 	ldrd	r2, r3, [r3]
   82e9c:	f000 f9f4 	bl	83288 <__adddf3>
   82ea0:	2200      	movs	r2, #0
   82ea2:	4b61      	ldr	r3, [pc, #388]	; (83028 <atan+0x330>)
   82ea4:	f000 fe32 	bl	83b0c <__aeabi_dcmpgt>
   82ea8:	2800      	cmp	r0, #0
   82eaa:	f43f af49 	beq.w	82d40 <atan+0x48>
   82eae:	462b      	mov	r3, r5
   82eb0:	4620      	mov	r0, r4
   82eb2:	4619      	mov	r1, r3
   82eb4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82eb8:	f000 f8c0 	bl	8303c <fabs>
   82ebc:	4b5b      	ldr	r3, [pc, #364]	; (8302c <atan+0x334>)
   82ebe:	4604      	mov	r4, r0
   82ec0:	429e      	cmp	r6, r3
   82ec2:	460d      	mov	r5, r1
   82ec4:	dc30      	bgt.n	82f28 <atan+0x230>
   82ec6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   82eca:	429e      	cmp	r6, r3
   82ecc:	dc55      	bgt.n	82f7a <atan+0x282>
   82ece:	4602      	mov	r2, r0
   82ed0:	460b      	mov	r3, r1
   82ed2:	f000 f9d9 	bl	83288 <__adddf3>
   82ed6:	2200      	movs	r2, #0
   82ed8:	4b53      	ldr	r3, [pc, #332]	; (83028 <atan+0x330>)
   82eda:	f000 f9d3 	bl	83284 <__aeabi_dsub>
   82ede:	2200      	movs	r2, #0
   82ee0:	4606      	mov	r6, r0
   82ee2:	460f      	mov	r7, r1
   82ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   82ee8:	4620      	mov	r0, r4
   82eea:	4629      	mov	r1, r5
   82eec:	f000 f9cc 	bl	83288 <__adddf3>
   82ef0:	4602      	mov	r2, r0
   82ef2:	460b      	mov	r3, r1
   82ef4:	4630      	mov	r0, r6
   82ef6:	4639      	mov	r1, r7
   82ef8:	f000 fca2 	bl	83840 <__aeabi_ddiv>
   82efc:	f04f 0b00 	mov.w	fp, #0
   82f00:	4604      	mov	r4, r0
   82f02:	460d      	mov	r5, r1
   82f04:	e71e      	b.n	82d44 <atan+0x4c>
   82f06:	4640      	mov	r0, r8
   82f08:	4649      	mov	r1, r9
   82f0a:	f000 f9bd 	bl	83288 <__adddf3>
   82f0e:	4622      	mov	r2, r4
   82f10:	462b      	mov	r3, r5
   82f12:	f000 fb6b 	bl	835ec <__aeabi_dmul>
   82f16:	460b      	mov	r3, r1
   82f18:	4602      	mov	r2, r0
   82f1a:	4629      	mov	r1, r5
   82f1c:	4620      	mov	r0, r4
   82f1e:	f000 f9b1 	bl	83284 <__aeabi_dsub>
   82f22:	4604      	mov	r4, r0
   82f24:	460b      	mov	r3, r1
   82f26:	e6fe      	b.n	82d26 <atan+0x2e>
   82f28:	4b41      	ldr	r3, [pc, #260]	; (83030 <atan+0x338>)
   82f2a:	429e      	cmp	r6, r3
   82f2c:	dc1a      	bgt.n	82f64 <atan+0x26c>
   82f2e:	2200      	movs	r2, #0
   82f30:	4b40      	ldr	r3, [pc, #256]	; (83034 <atan+0x33c>)
   82f32:	f000 f9a7 	bl	83284 <__aeabi_dsub>
   82f36:	2200      	movs	r2, #0
   82f38:	4606      	mov	r6, r0
   82f3a:	460f      	mov	r7, r1
   82f3c:	4b3d      	ldr	r3, [pc, #244]	; (83034 <atan+0x33c>)
   82f3e:	4620      	mov	r0, r4
   82f40:	4629      	mov	r1, r5
   82f42:	f000 fb53 	bl	835ec <__aeabi_dmul>
   82f46:	2200      	movs	r2, #0
   82f48:	4b37      	ldr	r3, [pc, #220]	; (83028 <atan+0x330>)
   82f4a:	f000 f99d 	bl	83288 <__adddf3>
   82f4e:	4602      	mov	r2, r0
   82f50:	460b      	mov	r3, r1
   82f52:	4630      	mov	r0, r6
   82f54:	4639      	mov	r1, r7
   82f56:	f000 fc73 	bl	83840 <__aeabi_ddiv>
   82f5a:	f04f 0b02 	mov.w	fp, #2
   82f5e:	4604      	mov	r4, r0
   82f60:	460d      	mov	r5, r1
   82f62:	e6ef      	b.n	82d44 <atan+0x4c>
   82f64:	4602      	mov	r2, r0
   82f66:	460b      	mov	r3, r1
   82f68:	2000      	movs	r0, #0
   82f6a:	4933      	ldr	r1, [pc, #204]	; (83038 <atan+0x340>)
   82f6c:	f000 fc68 	bl	83840 <__aeabi_ddiv>
   82f70:	f04f 0b03 	mov.w	fp, #3
   82f74:	4604      	mov	r4, r0
   82f76:	460d      	mov	r5, r1
   82f78:	e6e4      	b.n	82d44 <atan+0x4c>
   82f7a:	2200      	movs	r2, #0
   82f7c:	4b2a      	ldr	r3, [pc, #168]	; (83028 <atan+0x330>)
   82f7e:	f000 f981 	bl	83284 <__aeabi_dsub>
   82f82:	2200      	movs	r2, #0
   82f84:	4606      	mov	r6, r0
   82f86:	460f      	mov	r7, r1
   82f88:	4b27      	ldr	r3, [pc, #156]	; (83028 <atan+0x330>)
   82f8a:	4620      	mov	r0, r4
   82f8c:	4629      	mov	r1, r5
   82f8e:	f000 f97b 	bl	83288 <__adddf3>
   82f92:	4602      	mov	r2, r0
   82f94:	460b      	mov	r3, r1
   82f96:	4630      	mov	r0, r6
   82f98:	4639      	mov	r1, r7
   82f9a:	f000 fc51 	bl	83840 <__aeabi_ddiv>
   82f9e:	f04f 0b01 	mov.w	fp, #1
   82fa2:	4604      	mov	r4, r0
   82fa4:	460d      	mov	r5, r1
   82fa6:	e6cd      	b.n	82d44 <atan+0x4c>
   82fa8:	e322da11 	.word	0xe322da11
   82fac:	3f90ad3a 	.word	0x3f90ad3a
   82fb0:	24760deb 	.word	0x24760deb
   82fb4:	3fa97b4b 	.word	0x3fa97b4b
   82fb8:	a0d03d51 	.word	0xa0d03d51
   82fbc:	3fb10d66 	.word	0x3fb10d66
   82fc0:	c54c206e 	.word	0xc54c206e
   82fc4:	3fb745cd 	.word	0x3fb745cd
   82fc8:	920083ff 	.word	0x920083ff
   82fcc:	3fc24924 	.word	0x3fc24924
   82fd0:	5555550d 	.word	0x5555550d
   82fd4:	3fd55555 	.word	0x3fd55555
   82fd8:	2c6a6c2f 	.word	0x2c6a6c2f
   82fdc:	bfa2b444 	.word	0xbfa2b444
   82fe0:	52defd9a 	.word	0x52defd9a
   82fe4:	3fadde2d 	.word	0x3fadde2d
   82fe8:	af749a6d 	.word	0xaf749a6d
   82fec:	3fb3b0f2 	.word	0x3fb3b0f2
   82ff0:	fe231671 	.word	0xfe231671
   82ff4:	3fbc71c6 	.word	0x3fbc71c6
   82ff8:	9998ebc4 	.word	0x9998ebc4
   82ffc:	3fc99999 	.word	0x3fc99999
   83000:	8800759c 	.word	0x8800759c
   83004:	7e37e43c 	.word	0x7e37e43c
   83008:	440fffff 	.word	0x440fffff
   8300c:	7ff00000 	.word	0x7ff00000
   83010:	3ff921fb 	.word	0x3ff921fb
   83014:	bff921fb 	.word	0xbff921fb
   83018:	54442d18 	.word	0x54442d18
   8301c:	3fdbffff 	.word	0x3fdbffff
   83020:	00086b38 	.word	0x00086b38
   83024:	00086b58 	.word	0x00086b58
   83028:	3ff00000 	.word	0x3ff00000
   8302c:	3ff2ffff 	.word	0x3ff2ffff
   83030:	40037fff 	.word	0x40037fff
   83034:	3ff80000 	.word	0x3ff80000
   83038:	bff00000 	.word	0xbff00000

0008303c <fabs>:
   8303c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83040:	4770      	bx	lr
   83042:	bf00      	nop

00083044 <sqrt>:
   83044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83048:	b08b      	sub	sp, #44	; 0x2c
   8304a:	4604      	mov	r4, r0
   8304c:	460d      	mov	r5, r1
   8304e:	f000 f857 	bl	83100 <__ieee754_sqrt>
   83052:	4b29      	ldr	r3, [pc, #164]	; (830f8 <sqrt+0xb4>)
   83054:	4606      	mov	r6, r0
   83056:	f993 a000 	ldrsb.w	sl, [r3]
   8305a:	460f      	mov	r7, r1
   8305c:	f1ba 3fff 	cmp.w	sl, #4294967295
   83060:	d012      	beq.n	83088 <sqrt+0x44>
   83062:	4622      	mov	r2, r4
   83064:	462b      	mov	r3, r5
   83066:	4620      	mov	r0, r4
   83068:	4629      	mov	r1, r5
   8306a:	f000 fd59 	bl	83b20 <__aeabi_dcmpun>
   8306e:	4683      	mov	fp, r0
   83070:	b950      	cbnz	r0, 83088 <sqrt+0x44>
   83072:	f04f 0800 	mov.w	r8, #0
   83076:	f04f 0900 	mov.w	r9, #0
   8307a:	4620      	mov	r0, r4
   8307c:	4629      	mov	r1, r5
   8307e:	4642      	mov	r2, r8
   83080:	464b      	mov	r3, r9
   83082:	f000 fd25 	bl	83ad0 <__aeabi_dcmplt>
   83086:	b920      	cbnz	r0, 83092 <sqrt+0x4e>
   83088:	4630      	mov	r0, r6
   8308a:	4639      	mov	r1, r7
   8308c:	b00b      	add	sp, #44	; 0x2c
   8308e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83092:	2201      	movs	r2, #1
   83094:	4b19      	ldr	r3, [pc, #100]	; (830fc <sqrt+0xb8>)
   83096:	f8cd b020 	str.w	fp, [sp, #32]
   8309a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   8309e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   830a2:	e88d 000c 	stmia.w	sp, {r2, r3}
   830a6:	f1ba 0f00 	cmp.w	sl, #0
   830aa:	d017      	beq.n	830dc <sqrt+0x98>
   830ac:	4642      	mov	r2, r8
   830ae:	464b      	mov	r3, r9
   830b0:	4640      	mov	r0, r8
   830b2:	4649      	mov	r1, r9
   830b4:	f000 fbc4 	bl	83840 <__aeabi_ddiv>
   830b8:	f1ba 0f02 	cmp.w	sl, #2
   830bc:	e9cd 0106 	strd	r0, r1, [sp, #24]
   830c0:	d10e      	bne.n	830e0 <sqrt+0x9c>
   830c2:	f000 fd63 	bl	83b8c <__errno>
   830c6:	2321      	movs	r3, #33	; 0x21
   830c8:	6003      	str	r3, [r0, #0]
   830ca:	9b08      	ldr	r3, [sp, #32]
   830cc:	b973      	cbnz	r3, 830ec <sqrt+0xa8>
   830ce:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   830d2:	4630      	mov	r0, r6
   830d4:	4639      	mov	r1, r7
   830d6:	b00b      	add	sp, #44	; 0x2c
   830d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830dc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   830e0:	4668      	mov	r0, sp
   830e2:	f000 f8c9 	bl	83278 <matherr>
   830e6:	2800      	cmp	r0, #0
   830e8:	d1ef      	bne.n	830ca <sqrt+0x86>
   830ea:	e7ea      	b.n	830c2 <sqrt+0x7e>
   830ec:	f000 fd4e 	bl	83b8c <__errno>
   830f0:	9b08      	ldr	r3, [sp, #32]
   830f2:	6003      	str	r3, [r0, #0]
   830f4:	e7eb      	b.n	830ce <sqrt+0x8a>
   830f6:	bf00      	nop
   830f8:	20070184 	.word	0x20070184
   830fc:	00086b78 	.word	0x00086b78

00083100 <__ieee754_sqrt>:
   83100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83104:	4f5b      	ldr	r7, [pc, #364]	; (83274 <__ieee754_sqrt+0x174>)
   83106:	4605      	mov	r5, r0
   83108:	438f      	bics	r7, r1
   8310a:	460c      	mov	r4, r1
   8310c:	f000 8092 	beq.w	83234 <__ieee754_sqrt+0x134>
   83110:	2900      	cmp	r1, #0
   83112:	460b      	mov	r3, r1
   83114:	4602      	mov	r2, r0
   83116:	dd6f      	ble.n	831f8 <__ieee754_sqrt+0xf8>
   83118:	150f      	asrs	r7, r1, #20
   8311a:	d07b      	beq.n	83214 <__ieee754_sqrt+0x114>
   8311c:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   83120:	f3c3 0313 	ubfx	r3, r3, #0, #20
   83124:	07f8      	lsls	r0, r7, #31
   83126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8312a:	d45c      	bmi.n	831e6 <__ieee754_sqrt+0xe6>
   8312c:	2600      	movs	r6, #0
   8312e:	2016      	movs	r0, #22
   83130:	46b6      	mov	lr, r6
   83132:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   83136:	eb03 74d2 	add.w	r4, r3, r2, lsr #31
   8313a:	107f      	asrs	r7, r7, #1
   8313c:	4423      	add	r3, r4
   8313e:	0052      	lsls	r2, r2, #1
   83140:	eb0e 0401 	add.w	r4, lr, r1
   83144:	429c      	cmp	r4, r3
   83146:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   8314a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8314e:	dc03      	bgt.n	83158 <__ieee754_sqrt+0x58>
   83150:	1b1b      	subs	r3, r3, r4
   83152:	eb04 0e01 	add.w	lr, r4, r1
   83156:	440e      	add	r6, r1
   83158:	3801      	subs	r0, #1
   8315a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   8315e:	ea4f 0151 	mov.w	r1, r1, lsr #1
   83162:	d1ed      	bne.n	83140 <__ieee754_sqrt+0x40>
   83164:	2420      	movs	r4, #32
   83166:	4684      	mov	ip, r0
   83168:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   8316c:	e009      	b.n	83182 <__ieee754_sqrt+0x82>
   8316e:	d020      	beq.n	831b2 <__ieee754_sqrt+0xb2>
   83170:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   83174:	3c01      	subs	r4, #1
   83176:	ea4f 0151 	mov.w	r1, r1, lsr #1
   8317a:	442b      	add	r3, r5
   8317c:	ea4f 0242 	mov.w	r2, r2, lsl #1
   83180:	d020      	beq.n	831c4 <__ieee754_sqrt+0xc4>
   83182:	4573      	cmp	r3, lr
   83184:	eb01 050c 	add.w	r5, r1, ip
   83188:	ddf1      	ble.n	8316e <__ieee754_sqrt+0x6e>
   8318a:	2d00      	cmp	r5, #0
   8318c:	eb05 0c01 	add.w	ip, r5, r1
   83190:	db09      	blt.n	831a6 <__ieee754_sqrt+0xa6>
   83192:	46f0      	mov	r8, lr
   83194:	4295      	cmp	r5, r2
   83196:	eba3 030e 	sub.w	r3, r3, lr
   8319a:	d900      	bls.n	8319e <__ieee754_sqrt+0x9e>
   8319c:	3b01      	subs	r3, #1
   8319e:	46c6      	mov	lr, r8
   831a0:	1b52      	subs	r2, r2, r5
   831a2:	4408      	add	r0, r1
   831a4:	e7e4      	b.n	83170 <__ieee754_sqrt+0x70>
   831a6:	f1bc 0f00 	cmp.w	ip, #0
   831aa:	dbf2      	blt.n	83192 <__ieee754_sqrt+0x92>
   831ac:	f10e 0801 	add.w	r8, lr, #1
   831b0:	e7f0      	b.n	83194 <__ieee754_sqrt+0x94>
   831b2:	4295      	cmp	r5, r2
   831b4:	d8dc      	bhi.n	83170 <__ieee754_sqrt+0x70>
   831b6:	2d00      	cmp	r5, #0
   831b8:	eb05 0c01 	add.w	ip, r5, r1
   831bc:	db44      	blt.n	83248 <__ieee754_sqrt+0x148>
   831be:	4698      	mov	r8, r3
   831c0:	2300      	movs	r3, #0
   831c2:	e7ec      	b.n	8319e <__ieee754_sqrt+0x9e>
   831c4:	4313      	orrs	r3, r2
   831c6:	d113      	bne.n	831f0 <__ieee754_sqrt+0xf0>
   831c8:	0840      	lsrs	r0, r0, #1
   831ca:	1073      	asrs	r3, r6, #1
   831cc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   831d0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   831d4:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   831d8:	4649      	mov	r1, r9
   831da:	07f2      	lsls	r2, r6, #31
   831dc:	bf48      	it	mi
   831de:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   831e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   831e6:	005b      	lsls	r3, r3, #1
   831e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   831ec:	0052      	lsls	r2, r2, #1
   831ee:	e79d      	b.n	8312c <__ieee754_sqrt+0x2c>
   831f0:	1c41      	adds	r1, r0, #1
   831f2:	d02d      	beq.n	83250 <__ieee754_sqrt+0x150>
   831f4:	3001      	adds	r0, #1
   831f6:	e7e7      	b.n	831c8 <__ieee754_sqrt+0xc8>
   831f8:	4606      	mov	r6, r0
   831fa:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   831fe:	433e      	orrs	r6, r7
   83200:	d0ef      	beq.n	831e2 <__ieee754_sqrt+0xe2>
   83202:	bb69      	cbnz	r1, 83260 <__ieee754_sqrt+0x160>
   83204:	460f      	mov	r7, r1
   83206:	0ad3      	lsrs	r3, r2, #11
   83208:	3f15      	subs	r7, #21
   8320a:	0552      	lsls	r2, r2, #21
   8320c:	2b00      	cmp	r3, #0
   8320e:	d0fa      	beq.n	83206 <__ieee754_sqrt+0x106>
   83210:	02de      	lsls	r6, r3, #11
   83212:	d420      	bmi.n	83256 <__ieee754_sqrt+0x156>
   83214:	2400      	movs	r4, #0
   83216:	e000      	b.n	8321a <__ieee754_sqrt+0x11a>
   83218:	4604      	mov	r4, r0
   8321a:	005b      	lsls	r3, r3, #1
   8321c:	02dd      	lsls	r5, r3, #11
   8321e:	f104 0001 	add.w	r0, r4, #1
   83222:	d5f9      	bpl.n	83218 <__ieee754_sqrt+0x118>
   83224:	f1c0 0120 	rsb	r1, r0, #32
   83228:	fa22 f101 	lsr.w	r1, r2, r1
   8322c:	430b      	orrs	r3, r1
   8322e:	1b3f      	subs	r7, r7, r4
   83230:	4082      	lsls	r2, r0
   83232:	e773      	b.n	8311c <__ieee754_sqrt+0x1c>
   83234:	4602      	mov	r2, r0
   83236:	460b      	mov	r3, r1
   83238:	f000 f9d8 	bl	835ec <__aeabi_dmul>
   8323c:	462a      	mov	r2, r5
   8323e:	4623      	mov	r3, r4
   83240:	f000 f822 	bl	83288 <__adddf3>
   83244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83248:	f1bc 0f00 	cmp.w	ip, #0
   8324c:	daae      	bge.n	831ac <__ieee754_sqrt+0xac>
   8324e:	e7b6      	b.n	831be <__ieee754_sqrt+0xbe>
   83250:	3601      	adds	r6, #1
   83252:	4620      	mov	r0, r4
   83254:	e7b9      	b.n	831ca <__ieee754_sqrt+0xca>
   83256:	2000      	movs	r0, #0
   83258:	2120      	movs	r1, #32
   8325a:	f04f 34ff 	mov.w	r4, #4294967295
   8325e:	e7e3      	b.n	83228 <__ieee754_sqrt+0x128>
   83260:	4602      	mov	r2, r0
   83262:	460b      	mov	r3, r1
   83264:	f000 f80e 	bl	83284 <__aeabi_dsub>
   83268:	4602      	mov	r2, r0
   8326a:	460b      	mov	r3, r1
   8326c:	f000 fae8 	bl	83840 <__aeabi_ddiv>
   83270:	e7b7      	b.n	831e2 <__ieee754_sqrt+0xe2>
   83272:	bf00      	nop
   83274:	7ff00000 	.word	0x7ff00000

00083278 <matherr>:
   83278:	2000      	movs	r0, #0
   8327a:	4770      	bx	lr

0008327c <__aeabi_drsub>:
   8327c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83280:	e002      	b.n	83288 <__adddf3>
   83282:	bf00      	nop

00083284 <__aeabi_dsub>:
   83284:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083288 <__adddf3>:
   83288:	b530      	push	{r4, r5, lr}
   8328a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8328e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83292:	ea94 0f05 	teq	r4, r5
   83296:	bf08      	it	eq
   83298:	ea90 0f02 	teqeq	r0, r2
   8329c:	bf1f      	itttt	ne
   8329e:	ea54 0c00 	orrsne.w	ip, r4, r0
   832a2:	ea55 0c02 	orrsne.w	ip, r5, r2
   832a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   832aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   832ae:	f000 80e2 	beq.w	83476 <__adddf3+0x1ee>
   832b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   832b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   832ba:	bfb8      	it	lt
   832bc:	426d      	neglt	r5, r5
   832be:	dd0c      	ble.n	832da <__adddf3+0x52>
   832c0:	442c      	add	r4, r5
   832c2:	ea80 0202 	eor.w	r2, r0, r2
   832c6:	ea81 0303 	eor.w	r3, r1, r3
   832ca:	ea82 0000 	eor.w	r0, r2, r0
   832ce:	ea83 0101 	eor.w	r1, r3, r1
   832d2:	ea80 0202 	eor.w	r2, r0, r2
   832d6:	ea81 0303 	eor.w	r3, r1, r3
   832da:	2d36      	cmp	r5, #54	; 0x36
   832dc:	bf88      	it	hi
   832de:	bd30      	pophi	{r4, r5, pc}
   832e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   832e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   832e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   832ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   832f0:	d002      	beq.n	832f8 <__adddf3+0x70>
   832f2:	4240      	negs	r0, r0
   832f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   832f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   832fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83300:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   83304:	d002      	beq.n	8330c <__adddf3+0x84>
   83306:	4252      	negs	r2, r2
   83308:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8330c:	ea94 0f05 	teq	r4, r5
   83310:	f000 80a7 	beq.w	83462 <__adddf3+0x1da>
   83314:	f1a4 0401 	sub.w	r4, r4, #1
   83318:	f1d5 0e20 	rsbs	lr, r5, #32
   8331c:	db0d      	blt.n	8333a <__adddf3+0xb2>
   8331e:	fa02 fc0e 	lsl.w	ip, r2, lr
   83322:	fa22 f205 	lsr.w	r2, r2, r5
   83326:	1880      	adds	r0, r0, r2
   83328:	f141 0100 	adc.w	r1, r1, #0
   8332c:	fa03 f20e 	lsl.w	r2, r3, lr
   83330:	1880      	adds	r0, r0, r2
   83332:	fa43 f305 	asr.w	r3, r3, r5
   83336:	4159      	adcs	r1, r3
   83338:	e00e      	b.n	83358 <__adddf3+0xd0>
   8333a:	f1a5 0520 	sub.w	r5, r5, #32
   8333e:	f10e 0e20 	add.w	lr, lr, #32
   83342:	2a01      	cmp	r2, #1
   83344:	fa03 fc0e 	lsl.w	ip, r3, lr
   83348:	bf28      	it	cs
   8334a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8334e:	fa43 f305 	asr.w	r3, r3, r5
   83352:	18c0      	adds	r0, r0, r3
   83354:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83358:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8335c:	d507      	bpl.n	8336e <__adddf3+0xe6>
   8335e:	f04f 0e00 	mov.w	lr, #0
   83362:	f1dc 0c00 	rsbs	ip, ip, #0
   83366:	eb7e 0000 	sbcs.w	r0, lr, r0
   8336a:	eb6e 0101 	sbc.w	r1, lr, r1
   8336e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83372:	d31b      	bcc.n	833ac <__adddf3+0x124>
   83374:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83378:	d30c      	bcc.n	83394 <__adddf3+0x10c>
   8337a:	0849      	lsrs	r1, r1, #1
   8337c:	ea5f 0030 	movs.w	r0, r0, rrx
   83380:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83384:	f104 0401 	add.w	r4, r4, #1
   83388:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8338c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83390:	f080 809a 	bcs.w	834c8 <__adddf3+0x240>
   83394:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83398:	bf08      	it	eq
   8339a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8339e:	f150 0000 	adcs.w	r0, r0, #0
   833a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   833a6:	ea41 0105 	orr.w	r1, r1, r5
   833aa:	bd30      	pop	{r4, r5, pc}
   833ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   833b0:	4140      	adcs	r0, r0
   833b2:	eb41 0101 	adc.w	r1, r1, r1
   833b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   833ba:	f1a4 0401 	sub.w	r4, r4, #1
   833be:	d1e9      	bne.n	83394 <__adddf3+0x10c>
   833c0:	f091 0f00 	teq	r1, #0
   833c4:	bf04      	itt	eq
   833c6:	4601      	moveq	r1, r0
   833c8:	2000      	moveq	r0, #0
   833ca:	fab1 f381 	clz	r3, r1
   833ce:	bf08      	it	eq
   833d0:	3320      	addeq	r3, #32
   833d2:	f1a3 030b 	sub.w	r3, r3, #11
   833d6:	f1b3 0220 	subs.w	r2, r3, #32
   833da:	da0c      	bge.n	833f6 <__adddf3+0x16e>
   833dc:	320c      	adds	r2, #12
   833de:	dd08      	ble.n	833f2 <__adddf3+0x16a>
   833e0:	f102 0c14 	add.w	ip, r2, #20
   833e4:	f1c2 020c 	rsb	r2, r2, #12
   833e8:	fa01 f00c 	lsl.w	r0, r1, ip
   833ec:	fa21 f102 	lsr.w	r1, r1, r2
   833f0:	e00c      	b.n	8340c <__adddf3+0x184>
   833f2:	f102 0214 	add.w	r2, r2, #20
   833f6:	bfd8      	it	le
   833f8:	f1c2 0c20 	rsble	ip, r2, #32
   833fc:	fa01 f102 	lsl.w	r1, r1, r2
   83400:	fa20 fc0c 	lsr.w	ip, r0, ip
   83404:	bfdc      	itt	le
   83406:	ea41 010c 	orrle.w	r1, r1, ip
   8340a:	4090      	lslle	r0, r2
   8340c:	1ae4      	subs	r4, r4, r3
   8340e:	bfa2      	ittt	ge
   83410:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   83414:	4329      	orrge	r1, r5
   83416:	bd30      	popge	{r4, r5, pc}
   83418:	ea6f 0404 	mvn.w	r4, r4
   8341c:	3c1f      	subs	r4, #31
   8341e:	da1c      	bge.n	8345a <__adddf3+0x1d2>
   83420:	340c      	adds	r4, #12
   83422:	dc0e      	bgt.n	83442 <__adddf3+0x1ba>
   83424:	f104 0414 	add.w	r4, r4, #20
   83428:	f1c4 0220 	rsb	r2, r4, #32
   8342c:	fa20 f004 	lsr.w	r0, r0, r4
   83430:	fa01 f302 	lsl.w	r3, r1, r2
   83434:	ea40 0003 	orr.w	r0, r0, r3
   83438:	fa21 f304 	lsr.w	r3, r1, r4
   8343c:	ea45 0103 	orr.w	r1, r5, r3
   83440:	bd30      	pop	{r4, r5, pc}
   83442:	f1c4 040c 	rsb	r4, r4, #12
   83446:	f1c4 0220 	rsb	r2, r4, #32
   8344a:	fa20 f002 	lsr.w	r0, r0, r2
   8344e:	fa01 f304 	lsl.w	r3, r1, r4
   83452:	ea40 0003 	orr.w	r0, r0, r3
   83456:	4629      	mov	r1, r5
   83458:	bd30      	pop	{r4, r5, pc}
   8345a:	fa21 f004 	lsr.w	r0, r1, r4
   8345e:	4629      	mov	r1, r5
   83460:	bd30      	pop	{r4, r5, pc}
   83462:	f094 0f00 	teq	r4, #0
   83466:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8346a:	bf06      	itte	eq
   8346c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83470:	3401      	addeq	r4, #1
   83472:	3d01      	subne	r5, #1
   83474:	e74e      	b.n	83314 <__adddf3+0x8c>
   83476:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8347a:	bf18      	it	ne
   8347c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83480:	d029      	beq.n	834d6 <__adddf3+0x24e>
   83482:	ea94 0f05 	teq	r4, r5
   83486:	bf08      	it	eq
   83488:	ea90 0f02 	teqeq	r0, r2
   8348c:	d005      	beq.n	8349a <__adddf3+0x212>
   8348e:	ea54 0c00 	orrs.w	ip, r4, r0
   83492:	bf04      	itt	eq
   83494:	4619      	moveq	r1, r3
   83496:	4610      	moveq	r0, r2
   83498:	bd30      	pop	{r4, r5, pc}
   8349a:	ea91 0f03 	teq	r1, r3
   8349e:	bf1e      	ittt	ne
   834a0:	2100      	movne	r1, #0
   834a2:	2000      	movne	r0, #0
   834a4:	bd30      	popne	{r4, r5, pc}
   834a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   834aa:	d105      	bne.n	834b8 <__adddf3+0x230>
   834ac:	0040      	lsls	r0, r0, #1
   834ae:	4149      	adcs	r1, r1
   834b0:	bf28      	it	cs
   834b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   834b6:	bd30      	pop	{r4, r5, pc}
   834b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   834bc:	bf3c      	itt	cc
   834be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   834c2:	bd30      	popcc	{r4, r5, pc}
   834c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   834c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   834cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   834d0:	f04f 0000 	mov.w	r0, #0
   834d4:	bd30      	pop	{r4, r5, pc}
   834d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   834da:	bf1a      	itte	ne
   834dc:	4619      	movne	r1, r3
   834de:	4610      	movne	r0, r2
   834e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   834e4:	bf1c      	itt	ne
   834e6:	460b      	movne	r3, r1
   834e8:	4602      	movne	r2, r0
   834ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   834ee:	bf06      	itte	eq
   834f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   834f4:	ea91 0f03 	teqeq	r1, r3
   834f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   834fc:	bd30      	pop	{r4, r5, pc}
   834fe:	bf00      	nop

00083500 <__aeabi_ui2d>:
   83500:	f090 0f00 	teq	r0, #0
   83504:	bf04      	itt	eq
   83506:	2100      	moveq	r1, #0
   83508:	4770      	bxeq	lr
   8350a:	b530      	push	{r4, r5, lr}
   8350c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83510:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83514:	f04f 0500 	mov.w	r5, #0
   83518:	f04f 0100 	mov.w	r1, #0
   8351c:	e750      	b.n	833c0 <__adddf3+0x138>
   8351e:	bf00      	nop

00083520 <__aeabi_i2d>:
   83520:	f090 0f00 	teq	r0, #0
   83524:	bf04      	itt	eq
   83526:	2100      	moveq	r1, #0
   83528:	4770      	bxeq	lr
   8352a:	b530      	push	{r4, r5, lr}
   8352c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83530:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83534:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83538:	bf48      	it	mi
   8353a:	4240      	negmi	r0, r0
   8353c:	f04f 0100 	mov.w	r1, #0
   83540:	e73e      	b.n	833c0 <__adddf3+0x138>
   83542:	bf00      	nop

00083544 <__aeabi_f2d>:
   83544:	0042      	lsls	r2, r0, #1
   83546:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8354a:	ea4f 0131 	mov.w	r1, r1, rrx
   8354e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83552:	bf1f      	itttt	ne
   83554:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83558:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8355c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83560:	4770      	bxne	lr
   83562:	f092 0f00 	teq	r2, #0
   83566:	bf14      	ite	ne
   83568:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8356c:	4770      	bxeq	lr
   8356e:	b530      	push	{r4, r5, lr}
   83570:	f44f 7460 	mov.w	r4, #896	; 0x380
   83574:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83578:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8357c:	e720      	b.n	833c0 <__adddf3+0x138>
   8357e:	bf00      	nop

00083580 <__aeabi_ul2d>:
   83580:	ea50 0201 	orrs.w	r2, r0, r1
   83584:	bf08      	it	eq
   83586:	4770      	bxeq	lr
   83588:	b530      	push	{r4, r5, lr}
   8358a:	f04f 0500 	mov.w	r5, #0
   8358e:	e00a      	b.n	835a6 <__aeabi_l2d+0x16>

00083590 <__aeabi_l2d>:
   83590:	ea50 0201 	orrs.w	r2, r0, r1
   83594:	bf08      	it	eq
   83596:	4770      	bxeq	lr
   83598:	b530      	push	{r4, r5, lr}
   8359a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8359e:	d502      	bpl.n	835a6 <__aeabi_l2d+0x16>
   835a0:	4240      	negs	r0, r0
   835a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   835a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   835aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   835ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   835b2:	f43f aedc 	beq.w	8336e <__adddf3+0xe6>
   835b6:	f04f 0203 	mov.w	r2, #3
   835ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   835be:	bf18      	it	ne
   835c0:	3203      	addne	r2, #3
   835c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   835c6:	bf18      	it	ne
   835c8:	3203      	addne	r2, #3
   835ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   835ce:	f1c2 0320 	rsb	r3, r2, #32
   835d2:	fa00 fc03 	lsl.w	ip, r0, r3
   835d6:	fa20 f002 	lsr.w	r0, r0, r2
   835da:	fa01 fe03 	lsl.w	lr, r1, r3
   835de:	ea40 000e 	orr.w	r0, r0, lr
   835e2:	fa21 f102 	lsr.w	r1, r1, r2
   835e6:	4414      	add	r4, r2
   835e8:	e6c1      	b.n	8336e <__adddf3+0xe6>
   835ea:	bf00      	nop

000835ec <__aeabi_dmul>:
   835ec:	b570      	push	{r4, r5, r6, lr}
   835ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   835f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   835f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   835fa:	bf1d      	ittte	ne
   835fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83600:	ea94 0f0c 	teqne	r4, ip
   83604:	ea95 0f0c 	teqne	r5, ip
   83608:	f000 f8de 	bleq	837c8 <__aeabi_dmul+0x1dc>
   8360c:	442c      	add	r4, r5
   8360e:	ea81 0603 	eor.w	r6, r1, r3
   83612:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   83616:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8361a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8361e:	bf18      	it	ne
   83620:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83628:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8362c:	d038      	beq.n	836a0 <__aeabi_dmul+0xb4>
   8362e:	fba0 ce02 	umull	ip, lr, r0, r2
   83632:	f04f 0500 	mov.w	r5, #0
   83636:	fbe1 e502 	umlal	lr, r5, r1, r2
   8363a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8363e:	fbe0 e503 	umlal	lr, r5, r0, r3
   83642:	f04f 0600 	mov.w	r6, #0
   83646:	fbe1 5603 	umlal	r5, r6, r1, r3
   8364a:	f09c 0f00 	teq	ip, #0
   8364e:	bf18      	it	ne
   83650:	f04e 0e01 	orrne.w	lr, lr, #1
   83654:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83658:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8365c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83660:	d204      	bcs.n	8366c <__aeabi_dmul+0x80>
   83662:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83666:	416d      	adcs	r5, r5
   83668:	eb46 0606 	adc.w	r6, r6, r6
   8366c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83670:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83674:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83678:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8367c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83680:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83684:	bf88      	it	hi
   83686:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8368a:	d81e      	bhi.n	836ca <__aeabi_dmul+0xde>
   8368c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83690:	bf08      	it	eq
   83692:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83696:	f150 0000 	adcs.w	r0, r0, #0
   8369a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8369e:	bd70      	pop	{r4, r5, r6, pc}
   836a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   836a4:	ea46 0101 	orr.w	r1, r6, r1
   836a8:	ea40 0002 	orr.w	r0, r0, r2
   836ac:	ea81 0103 	eor.w	r1, r1, r3
   836b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   836b4:	bfc2      	ittt	gt
   836b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   836ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   836be:	bd70      	popgt	{r4, r5, r6, pc}
   836c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   836c4:	f04f 0e00 	mov.w	lr, #0
   836c8:	3c01      	subs	r4, #1
   836ca:	f300 80ab 	bgt.w	83824 <__aeabi_dmul+0x238>
   836ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   836d2:	bfde      	ittt	le
   836d4:	2000      	movle	r0, #0
   836d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   836da:	bd70      	pople	{r4, r5, r6, pc}
   836dc:	f1c4 0400 	rsb	r4, r4, #0
   836e0:	3c20      	subs	r4, #32
   836e2:	da35      	bge.n	83750 <__aeabi_dmul+0x164>
   836e4:	340c      	adds	r4, #12
   836e6:	dc1b      	bgt.n	83720 <__aeabi_dmul+0x134>
   836e8:	f104 0414 	add.w	r4, r4, #20
   836ec:	f1c4 0520 	rsb	r5, r4, #32
   836f0:	fa00 f305 	lsl.w	r3, r0, r5
   836f4:	fa20 f004 	lsr.w	r0, r0, r4
   836f8:	fa01 f205 	lsl.w	r2, r1, r5
   836fc:	ea40 0002 	orr.w	r0, r0, r2
   83700:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83704:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8370c:	fa21 f604 	lsr.w	r6, r1, r4
   83710:	eb42 0106 	adc.w	r1, r2, r6
   83714:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83718:	bf08      	it	eq
   8371a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8371e:	bd70      	pop	{r4, r5, r6, pc}
   83720:	f1c4 040c 	rsb	r4, r4, #12
   83724:	f1c4 0520 	rsb	r5, r4, #32
   83728:	fa00 f304 	lsl.w	r3, r0, r4
   8372c:	fa20 f005 	lsr.w	r0, r0, r5
   83730:	fa01 f204 	lsl.w	r2, r1, r4
   83734:	ea40 0002 	orr.w	r0, r0, r2
   83738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8373c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83740:	f141 0100 	adc.w	r1, r1, #0
   83744:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83748:	bf08      	it	eq
   8374a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8374e:	bd70      	pop	{r4, r5, r6, pc}
   83750:	f1c4 0520 	rsb	r5, r4, #32
   83754:	fa00 f205 	lsl.w	r2, r0, r5
   83758:	ea4e 0e02 	orr.w	lr, lr, r2
   8375c:	fa20 f304 	lsr.w	r3, r0, r4
   83760:	fa01 f205 	lsl.w	r2, r1, r5
   83764:	ea43 0302 	orr.w	r3, r3, r2
   83768:	fa21 f004 	lsr.w	r0, r1, r4
   8376c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83770:	fa21 f204 	lsr.w	r2, r1, r4
   83774:	ea20 0002 	bic.w	r0, r0, r2
   83778:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8377c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83780:	bf08      	it	eq
   83782:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83786:	bd70      	pop	{r4, r5, r6, pc}
   83788:	f094 0f00 	teq	r4, #0
   8378c:	d10f      	bne.n	837ae <__aeabi_dmul+0x1c2>
   8378e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83792:	0040      	lsls	r0, r0, #1
   83794:	eb41 0101 	adc.w	r1, r1, r1
   83798:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8379c:	bf08      	it	eq
   8379e:	3c01      	subeq	r4, #1
   837a0:	d0f7      	beq.n	83792 <__aeabi_dmul+0x1a6>
   837a2:	ea41 0106 	orr.w	r1, r1, r6
   837a6:	f095 0f00 	teq	r5, #0
   837aa:	bf18      	it	ne
   837ac:	4770      	bxne	lr
   837ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   837b2:	0052      	lsls	r2, r2, #1
   837b4:	eb43 0303 	adc.w	r3, r3, r3
   837b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   837bc:	bf08      	it	eq
   837be:	3d01      	subeq	r5, #1
   837c0:	d0f7      	beq.n	837b2 <__aeabi_dmul+0x1c6>
   837c2:	ea43 0306 	orr.w	r3, r3, r6
   837c6:	4770      	bx	lr
   837c8:	ea94 0f0c 	teq	r4, ip
   837cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   837d0:	bf18      	it	ne
   837d2:	ea95 0f0c 	teqne	r5, ip
   837d6:	d00c      	beq.n	837f2 <__aeabi_dmul+0x206>
   837d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   837dc:	bf18      	it	ne
   837de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   837e2:	d1d1      	bne.n	83788 <__aeabi_dmul+0x19c>
   837e4:	ea81 0103 	eor.w	r1, r1, r3
   837e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   837ec:	f04f 0000 	mov.w	r0, #0
   837f0:	bd70      	pop	{r4, r5, r6, pc}
   837f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   837f6:	bf06      	itte	eq
   837f8:	4610      	moveq	r0, r2
   837fa:	4619      	moveq	r1, r3
   837fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83800:	d019      	beq.n	83836 <__aeabi_dmul+0x24a>
   83802:	ea94 0f0c 	teq	r4, ip
   83806:	d102      	bne.n	8380e <__aeabi_dmul+0x222>
   83808:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8380c:	d113      	bne.n	83836 <__aeabi_dmul+0x24a>
   8380e:	ea95 0f0c 	teq	r5, ip
   83812:	d105      	bne.n	83820 <__aeabi_dmul+0x234>
   83814:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83818:	bf1c      	itt	ne
   8381a:	4610      	movne	r0, r2
   8381c:	4619      	movne	r1, r3
   8381e:	d10a      	bne.n	83836 <__aeabi_dmul+0x24a>
   83820:	ea81 0103 	eor.w	r1, r1, r3
   83824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83828:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8382c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83830:	f04f 0000 	mov.w	r0, #0
   83834:	bd70      	pop	{r4, r5, r6, pc}
   83836:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8383a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8383e:	bd70      	pop	{r4, r5, r6, pc}

00083840 <__aeabi_ddiv>:
   83840:	b570      	push	{r4, r5, r6, lr}
   83842:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83846:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8384a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8384e:	bf1d      	ittte	ne
   83850:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83854:	ea94 0f0c 	teqne	r4, ip
   83858:	ea95 0f0c 	teqne	r5, ip
   8385c:	f000 f8a7 	bleq	839ae <__aeabi_ddiv+0x16e>
   83860:	eba4 0405 	sub.w	r4, r4, r5
   83864:	ea81 0e03 	eor.w	lr, r1, r3
   83868:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8386c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83870:	f000 8088 	beq.w	83984 <__aeabi_ddiv+0x144>
   83874:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83878:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8387c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83880:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83884:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83888:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8388c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83890:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83894:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83898:	429d      	cmp	r5, r3
   8389a:	bf08      	it	eq
   8389c:	4296      	cmpeq	r6, r2
   8389e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   838a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   838a6:	d202      	bcs.n	838ae <__aeabi_ddiv+0x6e>
   838a8:	085b      	lsrs	r3, r3, #1
   838aa:	ea4f 0232 	mov.w	r2, r2, rrx
   838ae:	1ab6      	subs	r6, r6, r2
   838b0:	eb65 0503 	sbc.w	r5, r5, r3
   838b4:	085b      	lsrs	r3, r3, #1
   838b6:	ea4f 0232 	mov.w	r2, r2, rrx
   838ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   838be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   838c2:	ebb6 0e02 	subs.w	lr, r6, r2
   838c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   838ca:	bf22      	ittt	cs
   838cc:	1ab6      	subcs	r6, r6, r2
   838ce:	4675      	movcs	r5, lr
   838d0:	ea40 000c 	orrcs.w	r0, r0, ip
   838d4:	085b      	lsrs	r3, r3, #1
   838d6:	ea4f 0232 	mov.w	r2, r2, rrx
   838da:	ebb6 0e02 	subs.w	lr, r6, r2
   838de:	eb75 0e03 	sbcs.w	lr, r5, r3
   838e2:	bf22      	ittt	cs
   838e4:	1ab6      	subcs	r6, r6, r2
   838e6:	4675      	movcs	r5, lr
   838e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   838ec:	085b      	lsrs	r3, r3, #1
   838ee:	ea4f 0232 	mov.w	r2, r2, rrx
   838f2:	ebb6 0e02 	subs.w	lr, r6, r2
   838f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   838fa:	bf22      	ittt	cs
   838fc:	1ab6      	subcs	r6, r6, r2
   838fe:	4675      	movcs	r5, lr
   83900:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83904:	085b      	lsrs	r3, r3, #1
   83906:	ea4f 0232 	mov.w	r2, r2, rrx
   8390a:	ebb6 0e02 	subs.w	lr, r6, r2
   8390e:	eb75 0e03 	sbcs.w	lr, r5, r3
   83912:	bf22      	ittt	cs
   83914:	1ab6      	subcs	r6, r6, r2
   83916:	4675      	movcs	r5, lr
   83918:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8391c:	ea55 0e06 	orrs.w	lr, r5, r6
   83920:	d018      	beq.n	83954 <__aeabi_ddiv+0x114>
   83922:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83926:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8392a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8392e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83932:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83936:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8393a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8393e:	d1c0      	bne.n	838c2 <__aeabi_ddiv+0x82>
   83940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83944:	d10b      	bne.n	8395e <__aeabi_ddiv+0x11e>
   83946:	ea41 0100 	orr.w	r1, r1, r0
   8394a:	f04f 0000 	mov.w	r0, #0
   8394e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83952:	e7b6      	b.n	838c2 <__aeabi_ddiv+0x82>
   83954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83958:	bf04      	itt	eq
   8395a:	4301      	orreq	r1, r0
   8395c:	2000      	moveq	r0, #0
   8395e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83962:	bf88      	it	hi
   83964:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83968:	f63f aeaf 	bhi.w	836ca <__aeabi_dmul+0xde>
   8396c:	ebb5 0c03 	subs.w	ip, r5, r3
   83970:	bf04      	itt	eq
   83972:	ebb6 0c02 	subseq.w	ip, r6, r2
   83976:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8397a:	f150 0000 	adcs.w	r0, r0, #0
   8397e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83982:	bd70      	pop	{r4, r5, r6, pc}
   83984:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83988:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8398c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83990:	bfc2      	ittt	gt
   83992:	ebd4 050c 	rsbsgt	r5, r4, ip
   83996:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8399a:	bd70      	popgt	{r4, r5, r6, pc}
   8399c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   839a0:	f04f 0e00 	mov.w	lr, #0
   839a4:	3c01      	subs	r4, #1
   839a6:	e690      	b.n	836ca <__aeabi_dmul+0xde>
   839a8:	ea45 0e06 	orr.w	lr, r5, r6
   839ac:	e68d      	b.n	836ca <__aeabi_dmul+0xde>
   839ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   839b2:	ea94 0f0c 	teq	r4, ip
   839b6:	bf08      	it	eq
   839b8:	ea95 0f0c 	teqeq	r5, ip
   839bc:	f43f af3b 	beq.w	83836 <__aeabi_dmul+0x24a>
   839c0:	ea94 0f0c 	teq	r4, ip
   839c4:	d10a      	bne.n	839dc <__aeabi_ddiv+0x19c>
   839c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   839ca:	f47f af34 	bne.w	83836 <__aeabi_dmul+0x24a>
   839ce:	ea95 0f0c 	teq	r5, ip
   839d2:	f47f af25 	bne.w	83820 <__aeabi_dmul+0x234>
   839d6:	4610      	mov	r0, r2
   839d8:	4619      	mov	r1, r3
   839da:	e72c      	b.n	83836 <__aeabi_dmul+0x24a>
   839dc:	ea95 0f0c 	teq	r5, ip
   839e0:	d106      	bne.n	839f0 <__aeabi_ddiv+0x1b0>
   839e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   839e6:	f43f aefd 	beq.w	837e4 <__aeabi_dmul+0x1f8>
   839ea:	4610      	mov	r0, r2
   839ec:	4619      	mov	r1, r3
   839ee:	e722      	b.n	83836 <__aeabi_dmul+0x24a>
   839f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   839f4:	bf18      	it	ne
   839f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   839fa:	f47f aec5 	bne.w	83788 <__aeabi_dmul+0x19c>
   839fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83a02:	f47f af0d 	bne.w	83820 <__aeabi_dmul+0x234>
   83a06:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   83a0a:	f47f aeeb 	bne.w	837e4 <__aeabi_dmul+0x1f8>
   83a0e:	e712      	b.n	83836 <__aeabi_dmul+0x24a>

00083a10 <__gedf2>:
   83a10:	f04f 3cff 	mov.w	ip, #4294967295
   83a14:	e006      	b.n	83a24 <__cmpdf2+0x4>
   83a16:	bf00      	nop

00083a18 <__ledf2>:
   83a18:	f04f 0c01 	mov.w	ip, #1
   83a1c:	e002      	b.n	83a24 <__cmpdf2+0x4>
   83a1e:	bf00      	nop

00083a20 <__cmpdf2>:
   83a20:	f04f 0c01 	mov.w	ip, #1
   83a24:	f84d cd04 	str.w	ip, [sp, #-4]!
   83a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83a34:	bf18      	it	ne
   83a36:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   83a3a:	d01b      	beq.n	83a74 <__cmpdf2+0x54>
   83a3c:	b001      	add	sp, #4
   83a3e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   83a42:	bf0c      	ite	eq
   83a44:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   83a48:	ea91 0f03 	teqne	r1, r3
   83a4c:	bf02      	ittt	eq
   83a4e:	ea90 0f02 	teqeq	r0, r2
   83a52:	2000      	moveq	r0, #0
   83a54:	4770      	bxeq	lr
   83a56:	f110 0f00 	cmn.w	r0, #0
   83a5a:	ea91 0f03 	teq	r1, r3
   83a5e:	bf58      	it	pl
   83a60:	4299      	cmppl	r1, r3
   83a62:	bf08      	it	eq
   83a64:	4290      	cmpeq	r0, r2
   83a66:	bf2c      	ite	cs
   83a68:	17d8      	asrcs	r0, r3, #31
   83a6a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   83a6e:	f040 0001 	orr.w	r0, r0, #1
   83a72:	4770      	bx	lr
   83a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83a7c:	d102      	bne.n	83a84 <__cmpdf2+0x64>
   83a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   83a82:	d107      	bne.n	83a94 <__cmpdf2+0x74>
   83a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83a8c:	d1d6      	bne.n	83a3c <__cmpdf2+0x1c>
   83a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   83a92:	d0d3      	beq.n	83a3c <__cmpdf2+0x1c>
   83a94:	f85d 0b04 	ldr.w	r0, [sp], #4
   83a98:	4770      	bx	lr
   83a9a:	bf00      	nop

00083a9c <__aeabi_cdrcmple>:
   83a9c:	4684      	mov	ip, r0
   83a9e:	4610      	mov	r0, r2
   83aa0:	4662      	mov	r2, ip
   83aa2:	468c      	mov	ip, r1
   83aa4:	4619      	mov	r1, r3
   83aa6:	4663      	mov	r3, ip
   83aa8:	e000      	b.n	83aac <__aeabi_cdcmpeq>
   83aaa:	bf00      	nop

00083aac <__aeabi_cdcmpeq>:
   83aac:	b501      	push	{r0, lr}
   83aae:	f7ff ffb7 	bl	83a20 <__cmpdf2>
   83ab2:	2800      	cmp	r0, #0
   83ab4:	bf48      	it	mi
   83ab6:	f110 0f00 	cmnmi.w	r0, #0
   83aba:	bd01      	pop	{r0, pc}

00083abc <__aeabi_dcmpeq>:
   83abc:	f84d ed08 	str.w	lr, [sp, #-8]!
   83ac0:	f7ff fff4 	bl	83aac <__aeabi_cdcmpeq>
   83ac4:	bf0c      	ite	eq
   83ac6:	2001      	moveq	r0, #1
   83ac8:	2000      	movne	r0, #0
   83aca:	f85d fb08 	ldr.w	pc, [sp], #8
   83ace:	bf00      	nop

00083ad0 <__aeabi_dcmplt>:
   83ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
   83ad4:	f7ff ffea 	bl	83aac <__aeabi_cdcmpeq>
   83ad8:	bf34      	ite	cc
   83ada:	2001      	movcc	r0, #1
   83adc:	2000      	movcs	r0, #0
   83ade:	f85d fb08 	ldr.w	pc, [sp], #8
   83ae2:	bf00      	nop

00083ae4 <__aeabi_dcmple>:
   83ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
   83ae8:	f7ff ffe0 	bl	83aac <__aeabi_cdcmpeq>
   83aec:	bf94      	ite	ls
   83aee:	2001      	movls	r0, #1
   83af0:	2000      	movhi	r0, #0
   83af2:	f85d fb08 	ldr.w	pc, [sp], #8
   83af6:	bf00      	nop

00083af8 <__aeabi_dcmpge>:
   83af8:	f84d ed08 	str.w	lr, [sp, #-8]!
   83afc:	f7ff ffce 	bl	83a9c <__aeabi_cdrcmple>
   83b00:	bf94      	ite	ls
   83b02:	2001      	movls	r0, #1
   83b04:	2000      	movhi	r0, #0
   83b06:	f85d fb08 	ldr.w	pc, [sp], #8
   83b0a:	bf00      	nop

00083b0c <__aeabi_dcmpgt>:
   83b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83b10:	f7ff ffc4 	bl	83a9c <__aeabi_cdrcmple>
   83b14:	bf34      	ite	cc
   83b16:	2001      	movcc	r0, #1
   83b18:	2000      	movcs	r0, #0
   83b1a:	f85d fb08 	ldr.w	pc, [sp], #8
   83b1e:	bf00      	nop

00083b20 <__aeabi_dcmpun>:
   83b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83b28:	d102      	bne.n	83b30 <__aeabi_dcmpun+0x10>
   83b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   83b2e:	d10a      	bne.n	83b46 <__aeabi_dcmpun+0x26>
   83b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83b38:	d102      	bne.n	83b40 <__aeabi_dcmpun+0x20>
   83b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   83b3e:	d102      	bne.n	83b46 <__aeabi_dcmpun+0x26>
   83b40:	f04f 0000 	mov.w	r0, #0
   83b44:	4770      	bx	lr
   83b46:	f04f 0001 	mov.w	r0, #1
   83b4a:	4770      	bx	lr

00083b4c <__aeabi_d2uiz>:
   83b4c:	004a      	lsls	r2, r1, #1
   83b4e:	d211      	bcs.n	83b74 <__aeabi_d2uiz+0x28>
   83b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83b54:	d211      	bcs.n	83b7a <__aeabi_d2uiz+0x2e>
   83b56:	d50d      	bpl.n	83b74 <__aeabi_d2uiz+0x28>
   83b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83b60:	d40e      	bmi.n	83b80 <__aeabi_d2uiz+0x34>
   83b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83b6e:	fa23 f002 	lsr.w	r0, r3, r2
   83b72:	4770      	bx	lr
   83b74:	f04f 0000 	mov.w	r0, #0
   83b78:	4770      	bx	lr
   83b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83b7e:	d102      	bne.n	83b86 <__aeabi_d2uiz+0x3a>
   83b80:	f04f 30ff 	mov.w	r0, #4294967295
   83b84:	4770      	bx	lr
   83b86:	f04f 0000 	mov.w	r0, #0
   83b8a:	4770      	bx	lr

00083b8c <__errno>:
   83b8c:	4b01      	ldr	r3, [pc, #4]	; (83b94 <__errno+0x8>)
   83b8e:	6818      	ldr	r0, [r3, #0]
   83b90:	4770      	bx	lr
   83b92:	bf00      	nop
   83b94:	20070188 	.word	0x20070188

00083b98 <__libc_init_array>:
   83b98:	b570      	push	{r4, r5, r6, lr}
   83b9a:	4e0f      	ldr	r6, [pc, #60]	; (83bd8 <__libc_init_array+0x40>)
   83b9c:	4d0f      	ldr	r5, [pc, #60]	; (83bdc <__libc_init_array+0x44>)
   83b9e:	1b76      	subs	r6, r6, r5
   83ba0:	10b6      	asrs	r6, r6, #2
   83ba2:	bf18      	it	ne
   83ba4:	2400      	movne	r4, #0
   83ba6:	d005      	beq.n	83bb4 <__libc_init_array+0x1c>
   83ba8:	3401      	adds	r4, #1
   83baa:	f855 3b04 	ldr.w	r3, [r5], #4
   83bae:	4798      	blx	r3
   83bb0:	42a6      	cmp	r6, r4
   83bb2:	d1f9      	bne.n	83ba8 <__libc_init_array+0x10>
   83bb4:	4e0a      	ldr	r6, [pc, #40]	; (83be0 <__libc_init_array+0x48>)
   83bb6:	4d0b      	ldr	r5, [pc, #44]	; (83be4 <__libc_init_array+0x4c>)
   83bb8:	f003 f896 	bl	86ce8 <_init>
   83bbc:	1b76      	subs	r6, r6, r5
   83bbe:	10b6      	asrs	r6, r6, #2
   83bc0:	bf18      	it	ne
   83bc2:	2400      	movne	r4, #0
   83bc4:	d006      	beq.n	83bd4 <__libc_init_array+0x3c>
   83bc6:	3401      	adds	r4, #1
   83bc8:	f855 3b04 	ldr.w	r3, [r5], #4
   83bcc:	4798      	blx	r3
   83bce:	42a6      	cmp	r6, r4
   83bd0:	d1f9      	bne.n	83bc6 <__libc_init_array+0x2e>
   83bd2:	bd70      	pop	{r4, r5, r6, pc}
   83bd4:	bd70      	pop	{r4, r5, r6, pc}
   83bd6:	bf00      	nop
   83bd8:	00086cf4 	.word	0x00086cf4
   83bdc:	00086cf4 	.word	0x00086cf4
   83be0:	00086cfc 	.word	0x00086cfc
   83be4:	00086cf4 	.word	0x00086cf4

00083be8 <iprintf>:
   83be8:	b40f      	push	{r0, r1, r2, r3}
   83bea:	b510      	push	{r4, lr}
   83bec:	4b07      	ldr	r3, [pc, #28]	; (83c0c <iprintf+0x24>)
   83bee:	b082      	sub	sp, #8
   83bf0:	ac04      	add	r4, sp, #16
   83bf2:	f854 2b04 	ldr.w	r2, [r4], #4
   83bf6:	6818      	ldr	r0, [r3, #0]
   83bf8:	4623      	mov	r3, r4
   83bfa:	6881      	ldr	r1, [r0, #8]
   83bfc:	9401      	str	r4, [sp, #4]
   83bfe:	f000 fa3b 	bl	84078 <_vfiprintf_r>
   83c02:	b002      	add	sp, #8
   83c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83c08:	b004      	add	sp, #16
   83c0a:	4770      	bx	lr
   83c0c:	20070188 	.word	0x20070188

00083c10 <memcpy>:
   83c10:	4684      	mov	ip, r0
   83c12:	ea41 0300 	orr.w	r3, r1, r0
   83c16:	f013 0303 	ands.w	r3, r3, #3
   83c1a:	d149      	bne.n	83cb0 <memcpy+0xa0>
   83c1c:	3a40      	subs	r2, #64	; 0x40
   83c1e:	d323      	bcc.n	83c68 <memcpy+0x58>
   83c20:	680b      	ldr	r3, [r1, #0]
   83c22:	6003      	str	r3, [r0, #0]
   83c24:	684b      	ldr	r3, [r1, #4]
   83c26:	6043      	str	r3, [r0, #4]
   83c28:	688b      	ldr	r3, [r1, #8]
   83c2a:	6083      	str	r3, [r0, #8]
   83c2c:	68cb      	ldr	r3, [r1, #12]
   83c2e:	60c3      	str	r3, [r0, #12]
   83c30:	690b      	ldr	r3, [r1, #16]
   83c32:	6103      	str	r3, [r0, #16]
   83c34:	694b      	ldr	r3, [r1, #20]
   83c36:	6143      	str	r3, [r0, #20]
   83c38:	698b      	ldr	r3, [r1, #24]
   83c3a:	6183      	str	r3, [r0, #24]
   83c3c:	69cb      	ldr	r3, [r1, #28]
   83c3e:	61c3      	str	r3, [r0, #28]
   83c40:	6a0b      	ldr	r3, [r1, #32]
   83c42:	6203      	str	r3, [r0, #32]
   83c44:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83c46:	6243      	str	r3, [r0, #36]	; 0x24
   83c48:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   83c4a:	6283      	str	r3, [r0, #40]	; 0x28
   83c4c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   83c4e:	62c3      	str	r3, [r0, #44]	; 0x2c
   83c50:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83c52:	6303      	str	r3, [r0, #48]	; 0x30
   83c54:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83c56:	6343      	str	r3, [r0, #52]	; 0x34
   83c58:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   83c5a:	6383      	str	r3, [r0, #56]	; 0x38
   83c5c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   83c5e:	63c3      	str	r3, [r0, #60]	; 0x3c
   83c60:	3040      	adds	r0, #64	; 0x40
   83c62:	3140      	adds	r1, #64	; 0x40
   83c64:	3a40      	subs	r2, #64	; 0x40
   83c66:	d2db      	bcs.n	83c20 <memcpy+0x10>
   83c68:	3230      	adds	r2, #48	; 0x30
   83c6a:	d30b      	bcc.n	83c84 <memcpy+0x74>
   83c6c:	680b      	ldr	r3, [r1, #0]
   83c6e:	6003      	str	r3, [r0, #0]
   83c70:	684b      	ldr	r3, [r1, #4]
   83c72:	6043      	str	r3, [r0, #4]
   83c74:	688b      	ldr	r3, [r1, #8]
   83c76:	6083      	str	r3, [r0, #8]
   83c78:	68cb      	ldr	r3, [r1, #12]
   83c7a:	60c3      	str	r3, [r0, #12]
   83c7c:	3010      	adds	r0, #16
   83c7e:	3110      	adds	r1, #16
   83c80:	3a10      	subs	r2, #16
   83c82:	d2f3      	bcs.n	83c6c <memcpy+0x5c>
   83c84:	320c      	adds	r2, #12
   83c86:	d305      	bcc.n	83c94 <memcpy+0x84>
   83c88:	f851 3b04 	ldr.w	r3, [r1], #4
   83c8c:	f840 3b04 	str.w	r3, [r0], #4
   83c90:	3a04      	subs	r2, #4
   83c92:	d2f9      	bcs.n	83c88 <memcpy+0x78>
   83c94:	3204      	adds	r2, #4
   83c96:	d008      	beq.n	83caa <memcpy+0x9a>
   83c98:	07d2      	lsls	r2, r2, #31
   83c9a:	bf1c      	itt	ne
   83c9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83ca0:	f800 3b01 	strbne.w	r3, [r0], #1
   83ca4:	d301      	bcc.n	83caa <memcpy+0x9a>
   83ca6:	880b      	ldrh	r3, [r1, #0]
   83ca8:	8003      	strh	r3, [r0, #0]
   83caa:	4660      	mov	r0, ip
   83cac:	4770      	bx	lr
   83cae:	bf00      	nop
   83cb0:	2a08      	cmp	r2, #8
   83cb2:	d313      	bcc.n	83cdc <memcpy+0xcc>
   83cb4:	078b      	lsls	r3, r1, #30
   83cb6:	d0b1      	beq.n	83c1c <memcpy+0xc>
   83cb8:	f010 0303 	ands.w	r3, r0, #3
   83cbc:	d0ae      	beq.n	83c1c <memcpy+0xc>
   83cbe:	f1c3 0304 	rsb	r3, r3, #4
   83cc2:	1ad2      	subs	r2, r2, r3
   83cc4:	07db      	lsls	r3, r3, #31
   83cc6:	bf1c      	itt	ne
   83cc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   83ccc:	f800 3b01 	strbne.w	r3, [r0], #1
   83cd0:	d3a4      	bcc.n	83c1c <memcpy+0xc>
   83cd2:	f831 3b02 	ldrh.w	r3, [r1], #2
   83cd6:	f820 3b02 	strh.w	r3, [r0], #2
   83cda:	e79f      	b.n	83c1c <memcpy+0xc>
   83cdc:	3a04      	subs	r2, #4
   83cde:	d3d9      	bcc.n	83c94 <memcpy+0x84>
   83ce0:	3a01      	subs	r2, #1
   83ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
   83ce6:	f800 3b01 	strb.w	r3, [r0], #1
   83cea:	d2f9      	bcs.n	83ce0 <memcpy+0xd0>
   83cec:	780b      	ldrb	r3, [r1, #0]
   83cee:	7003      	strb	r3, [r0, #0]
   83cf0:	784b      	ldrb	r3, [r1, #1]
   83cf2:	7043      	strb	r3, [r0, #1]
   83cf4:	788b      	ldrb	r3, [r1, #2]
   83cf6:	7083      	strb	r3, [r0, #2]
   83cf8:	4660      	mov	r0, ip
   83cfa:	4770      	bx	lr

00083cfc <memset>:
   83cfc:	b470      	push	{r4, r5, r6}
   83cfe:	0786      	lsls	r6, r0, #30
   83d00:	d046      	beq.n	83d90 <memset+0x94>
   83d02:	1e54      	subs	r4, r2, #1
   83d04:	2a00      	cmp	r2, #0
   83d06:	d041      	beq.n	83d8c <memset+0x90>
   83d08:	b2ca      	uxtb	r2, r1
   83d0a:	4603      	mov	r3, r0
   83d0c:	e002      	b.n	83d14 <memset+0x18>
   83d0e:	f114 34ff 	adds.w	r4, r4, #4294967295
   83d12:	d33b      	bcc.n	83d8c <memset+0x90>
   83d14:	f803 2b01 	strb.w	r2, [r3], #1
   83d18:	079d      	lsls	r5, r3, #30
   83d1a:	d1f8      	bne.n	83d0e <memset+0x12>
   83d1c:	2c03      	cmp	r4, #3
   83d1e:	d92e      	bls.n	83d7e <memset+0x82>
   83d20:	b2cd      	uxtb	r5, r1
   83d22:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83d26:	2c0f      	cmp	r4, #15
   83d28:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   83d2c:	d919      	bls.n	83d62 <memset+0x66>
   83d2e:	4626      	mov	r6, r4
   83d30:	f103 0210 	add.w	r2, r3, #16
   83d34:	3e10      	subs	r6, #16
   83d36:	2e0f      	cmp	r6, #15
   83d38:	f842 5c10 	str.w	r5, [r2, #-16]
   83d3c:	f842 5c0c 	str.w	r5, [r2, #-12]
   83d40:	f842 5c08 	str.w	r5, [r2, #-8]
   83d44:	f842 5c04 	str.w	r5, [r2, #-4]
   83d48:	f102 0210 	add.w	r2, r2, #16
   83d4c:	d8f2      	bhi.n	83d34 <memset+0x38>
   83d4e:	f1a4 0210 	sub.w	r2, r4, #16
   83d52:	f022 020f 	bic.w	r2, r2, #15
   83d56:	f004 040f 	and.w	r4, r4, #15
   83d5a:	3210      	adds	r2, #16
   83d5c:	2c03      	cmp	r4, #3
   83d5e:	4413      	add	r3, r2
   83d60:	d90d      	bls.n	83d7e <memset+0x82>
   83d62:	461e      	mov	r6, r3
   83d64:	4622      	mov	r2, r4
   83d66:	3a04      	subs	r2, #4
   83d68:	2a03      	cmp	r2, #3
   83d6a:	f846 5b04 	str.w	r5, [r6], #4
   83d6e:	d8fa      	bhi.n	83d66 <memset+0x6a>
   83d70:	1f22      	subs	r2, r4, #4
   83d72:	f022 0203 	bic.w	r2, r2, #3
   83d76:	3204      	adds	r2, #4
   83d78:	4413      	add	r3, r2
   83d7a:	f004 0403 	and.w	r4, r4, #3
   83d7e:	b12c      	cbz	r4, 83d8c <memset+0x90>
   83d80:	b2c9      	uxtb	r1, r1
   83d82:	441c      	add	r4, r3
   83d84:	f803 1b01 	strb.w	r1, [r3], #1
   83d88:	429c      	cmp	r4, r3
   83d8a:	d1fb      	bne.n	83d84 <memset+0x88>
   83d8c:	bc70      	pop	{r4, r5, r6}
   83d8e:	4770      	bx	lr
   83d90:	4614      	mov	r4, r2
   83d92:	4603      	mov	r3, r0
   83d94:	e7c2      	b.n	83d1c <memset+0x20>
   83d96:	bf00      	nop

00083d98 <setbuf>:
   83d98:	2900      	cmp	r1, #0
   83d9a:	bf0c      	ite	eq
   83d9c:	2202      	moveq	r2, #2
   83d9e:	2200      	movne	r2, #0
   83da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83da4:	f000 b800 	b.w	83da8 <setvbuf>

00083da8 <setvbuf>:
   83da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83dac:	4d61      	ldr	r5, [pc, #388]	; (83f34 <setvbuf+0x18c>)
   83dae:	b083      	sub	sp, #12
   83db0:	682d      	ldr	r5, [r5, #0]
   83db2:	4604      	mov	r4, r0
   83db4:	460f      	mov	r7, r1
   83db6:	4690      	mov	r8, r2
   83db8:	461e      	mov	r6, r3
   83dba:	b115      	cbz	r5, 83dc2 <setvbuf+0x1a>
   83dbc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83dbe:	2b00      	cmp	r3, #0
   83dc0:	d064      	beq.n	83e8c <setvbuf+0xe4>
   83dc2:	f1b8 0f02 	cmp.w	r8, #2
   83dc6:	d006      	beq.n	83dd6 <setvbuf+0x2e>
   83dc8:	f1b8 0f01 	cmp.w	r8, #1
   83dcc:	f200 809f 	bhi.w	83f0e <setvbuf+0x166>
   83dd0:	2e00      	cmp	r6, #0
   83dd2:	f2c0 809c 	blt.w	83f0e <setvbuf+0x166>
   83dd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83dd8:	07d8      	lsls	r0, r3, #31
   83dda:	d534      	bpl.n	83e46 <setvbuf+0x9e>
   83ddc:	4621      	mov	r1, r4
   83dde:	4628      	mov	r0, r5
   83de0:	f001 f8e2 	bl	84fa8 <_fflush_r>
   83de4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83de6:	b141      	cbz	r1, 83dfa <setvbuf+0x52>
   83de8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83dec:	4299      	cmp	r1, r3
   83dee:	d002      	beq.n	83df6 <setvbuf+0x4e>
   83df0:	4628      	mov	r0, r5
   83df2:	f001 fa57 	bl	852a4 <_free_r>
   83df6:	2300      	movs	r3, #0
   83df8:	6323      	str	r3, [r4, #48]	; 0x30
   83dfa:	2200      	movs	r2, #0
   83dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e00:	61a2      	str	r2, [r4, #24]
   83e02:	6062      	str	r2, [r4, #4]
   83e04:	061a      	lsls	r2, r3, #24
   83e06:	d43a      	bmi.n	83e7e <setvbuf+0xd6>
   83e08:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   83e0c:	f023 0303 	bic.w	r3, r3, #3
   83e10:	f1b8 0f02 	cmp.w	r8, #2
   83e14:	81a3      	strh	r3, [r4, #12]
   83e16:	d01d      	beq.n	83e54 <setvbuf+0xac>
   83e18:	ab01      	add	r3, sp, #4
   83e1a:	466a      	mov	r2, sp
   83e1c:	4621      	mov	r1, r4
   83e1e:	4628      	mov	r0, r5
   83e20:	f001 fcde 	bl	857e0 <__swhatbuf_r>
   83e24:	89a3      	ldrh	r3, [r4, #12]
   83e26:	4318      	orrs	r0, r3
   83e28:	81a0      	strh	r0, [r4, #12]
   83e2a:	2e00      	cmp	r6, #0
   83e2c:	d132      	bne.n	83e94 <setvbuf+0xec>
   83e2e:	9e00      	ldr	r6, [sp, #0]
   83e30:	4630      	mov	r0, r6
   83e32:	f001 fd4d 	bl	858d0 <malloc>
   83e36:	4607      	mov	r7, r0
   83e38:	2800      	cmp	r0, #0
   83e3a:	d06b      	beq.n	83f14 <setvbuf+0x16c>
   83e3c:	89a3      	ldrh	r3, [r4, #12]
   83e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83e42:	81a3      	strh	r3, [r4, #12]
   83e44:	e028      	b.n	83e98 <setvbuf+0xf0>
   83e46:	89a3      	ldrh	r3, [r4, #12]
   83e48:	0599      	lsls	r1, r3, #22
   83e4a:	d4c7      	bmi.n	83ddc <setvbuf+0x34>
   83e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e4e:	f001 fcc3 	bl	857d8 <__retarget_lock_acquire_recursive>
   83e52:	e7c3      	b.n	83ddc <setvbuf+0x34>
   83e54:	2500      	movs	r5, #0
   83e56:	2600      	movs	r6, #0
   83e58:	2001      	movs	r0, #1
   83e5a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83e5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83e60:	f043 0302 	orr.w	r3, r3, #2
   83e64:	60a6      	str	r6, [r4, #8]
   83e66:	07ce      	lsls	r6, r1, #31
   83e68:	81a3      	strh	r3, [r4, #12]
   83e6a:	6160      	str	r0, [r4, #20]
   83e6c:	6022      	str	r2, [r4, #0]
   83e6e:	6122      	str	r2, [r4, #16]
   83e70:	d401      	bmi.n	83e76 <setvbuf+0xce>
   83e72:	0598      	lsls	r0, r3, #22
   83e74:	d53e      	bpl.n	83ef4 <setvbuf+0x14c>
   83e76:	4628      	mov	r0, r5
   83e78:	b003      	add	sp, #12
   83e7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83e7e:	6921      	ldr	r1, [r4, #16]
   83e80:	4628      	mov	r0, r5
   83e82:	f001 fa0f 	bl	852a4 <_free_r>
   83e86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e8a:	e7bd      	b.n	83e08 <setvbuf+0x60>
   83e8c:	4628      	mov	r0, r5
   83e8e:	f001 f8e3 	bl	85058 <__sinit>
   83e92:	e796      	b.n	83dc2 <setvbuf+0x1a>
   83e94:	2f00      	cmp	r7, #0
   83e96:	d0cb      	beq.n	83e30 <setvbuf+0x88>
   83e98:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83e9a:	2b00      	cmp	r3, #0
   83e9c:	d033      	beq.n	83f06 <setvbuf+0x15e>
   83e9e:	9b00      	ldr	r3, [sp, #0]
   83ea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83ea4:	429e      	cmp	r6, r3
   83ea6:	bf1c      	itt	ne
   83ea8:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   83eac:	81a2      	strhne	r2, [r4, #12]
   83eae:	f1b8 0f01 	cmp.w	r8, #1
   83eb2:	bf04      	itt	eq
   83eb4:	f042 0201 	orreq.w	r2, r2, #1
   83eb8:	81a2      	strheq	r2, [r4, #12]
   83eba:	b292      	uxth	r2, r2
   83ebc:	f012 0308 	ands.w	r3, r2, #8
   83ec0:	6027      	str	r7, [r4, #0]
   83ec2:	6127      	str	r7, [r4, #16]
   83ec4:	6166      	str	r6, [r4, #20]
   83ec6:	d00e      	beq.n	83ee6 <setvbuf+0x13e>
   83ec8:	07d1      	lsls	r1, r2, #31
   83eca:	d51a      	bpl.n	83f02 <setvbuf+0x15a>
   83ecc:	2300      	movs	r3, #0
   83ece:	6e65      	ldr	r5, [r4, #100]	; 0x64
   83ed0:	4276      	negs	r6, r6
   83ed2:	f015 0501 	ands.w	r5, r5, #1
   83ed6:	61a6      	str	r6, [r4, #24]
   83ed8:	60a3      	str	r3, [r4, #8]
   83eda:	d009      	beq.n	83ef0 <setvbuf+0x148>
   83edc:	2500      	movs	r5, #0
   83ede:	4628      	mov	r0, r5
   83ee0:	b003      	add	sp, #12
   83ee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83ee6:	60a3      	str	r3, [r4, #8]
   83ee8:	6e65      	ldr	r5, [r4, #100]	; 0x64
   83eea:	f015 0501 	ands.w	r5, r5, #1
   83eee:	d1f5      	bne.n	83edc <setvbuf+0x134>
   83ef0:	0593      	lsls	r3, r2, #22
   83ef2:	d4c0      	bmi.n	83e76 <setvbuf+0xce>
   83ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83ef6:	f001 fc71 	bl	857dc <__retarget_lock_release_recursive>
   83efa:	4628      	mov	r0, r5
   83efc:	b003      	add	sp, #12
   83efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83f02:	60a6      	str	r6, [r4, #8]
   83f04:	e7f0      	b.n	83ee8 <setvbuf+0x140>
   83f06:	4628      	mov	r0, r5
   83f08:	f001 f8a6 	bl	85058 <__sinit>
   83f0c:	e7c7      	b.n	83e9e <setvbuf+0xf6>
   83f0e:	f04f 35ff 	mov.w	r5, #4294967295
   83f12:	e7b0      	b.n	83e76 <setvbuf+0xce>
   83f14:	f8dd 9000 	ldr.w	r9, [sp]
   83f18:	45b1      	cmp	r9, r6
   83f1a:	d004      	beq.n	83f26 <setvbuf+0x17e>
   83f1c:	4648      	mov	r0, r9
   83f1e:	f001 fcd7 	bl	858d0 <malloc>
   83f22:	4607      	mov	r7, r0
   83f24:	b920      	cbnz	r0, 83f30 <setvbuf+0x188>
   83f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83f2a:	f04f 35ff 	mov.w	r5, #4294967295
   83f2e:	e792      	b.n	83e56 <setvbuf+0xae>
   83f30:	464e      	mov	r6, r9
   83f32:	e783      	b.n	83e3c <setvbuf+0x94>
   83f34:	20070188 	.word	0x20070188

00083f38 <strlen>:
   83f38:	f020 0103 	bic.w	r1, r0, #3
   83f3c:	f010 0003 	ands.w	r0, r0, #3
   83f40:	f1c0 0000 	rsb	r0, r0, #0
   83f44:	f851 3b04 	ldr.w	r3, [r1], #4
   83f48:	f100 0c04 	add.w	ip, r0, #4
   83f4c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83f50:	f06f 0200 	mvn.w	r2, #0
   83f54:	bf1c      	itt	ne
   83f56:	fa22 f20c 	lsrne.w	r2, r2, ip
   83f5a:	4313      	orrne	r3, r2
   83f5c:	f04f 0c01 	mov.w	ip, #1
   83f60:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83f64:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83f68:	eba3 020c 	sub.w	r2, r3, ip
   83f6c:	ea22 0203 	bic.w	r2, r2, r3
   83f70:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83f74:	bf04      	itt	eq
   83f76:	f851 3b04 	ldreq.w	r3, [r1], #4
   83f7a:	3004      	addeq	r0, #4
   83f7c:	d0f4      	beq.n	83f68 <strlen+0x30>
   83f7e:	f1c2 0100 	rsb	r1, r2, #0
   83f82:	ea02 0201 	and.w	r2, r2, r1
   83f86:	fab2 f282 	clz	r2, r2
   83f8a:	f1c2 021f 	rsb	r2, r2, #31
   83f8e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83f92:	4770      	bx	lr

00083f94 <strncpy>:
   83f94:	ea40 0301 	orr.w	r3, r0, r1
   83f98:	f013 0f03 	tst.w	r3, #3
   83f9c:	b470      	push	{r4, r5, r6}
   83f9e:	4603      	mov	r3, r0
   83fa0:	d024      	beq.n	83fec <strncpy+0x58>
   83fa2:	b1a2      	cbz	r2, 83fce <strncpy+0x3a>
   83fa4:	780c      	ldrb	r4, [r1, #0]
   83fa6:	3a01      	subs	r2, #1
   83fa8:	701c      	strb	r4, [r3, #0]
   83faa:	3101      	adds	r1, #1
   83fac:	3301      	adds	r3, #1
   83fae:	b13c      	cbz	r4, 83fc0 <strncpy+0x2c>
   83fb0:	b16a      	cbz	r2, 83fce <strncpy+0x3a>
   83fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
   83fb6:	3a01      	subs	r2, #1
   83fb8:	f803 4b01 	strb.w	r4, [r3], #1
   83fbc:	2c00      	cmp	r4, #0
   83fbe:	d1f7      	bne.n	83fb0 <strncpy+0x1c>
   83fc0:	b12a      	cbz	r2, 83fce <strncpy+0x3a>
   83fc2:	2100      	movs	r1, #0
   83fc4:	441a      	add	r2, r3
   83fc6:	f803 1b01 	strb.w	r1, [r3], #1
   83fca:	429a      	cmp	r2, r3
   83fcc:	d1fb      	bne.n	83fc6 <strncpy+0x32>
   83fce:	bc70      	pop	{r4, r5, r6}
   83fd0:	4770      	bx	lr
   83fd2:	460e      	mov	r6, r1
   83fd4:	f851 5b04 	ldr.w	r5, [r1], #4
   83fd8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   83fdc:	ea24 0405 	bic.w	r4, r4, r5
   83fe0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   83fe4:	d105      	bne.n	83ff2 <strncpy+0x5e>
   83fe6:	3a04      	subs	r2, #4
   83fe8:	f843 5b04 	str.w	r5, [r3], #4
   83fec:	2a03      	cmp	r2, #3
   83fee:	d8f0      	bhi.n	83fd2 <strncpy+0x3e>
   83ff0:	e7d7      	b.n	83fa2 <strncpy+0xe>
   83ff2:	4631      	mov	r1, r6
   83ff4:	e7d6      	b.n	83fa4 <strncpy+0x10>
   83ff6:	bf00      	nop

00083ff8 <__sprint_r.part.0>:
   83ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83ffc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83ffe:	4693      	mov	fp, r2
   84000:	049c      	lsls	r4, r3, #18
   84002:	d52f      	bpl.n	84064 <__sprint_r.part.0+0x6c>
   84004:	6893      	ldr	r3, [r2, #8]
   84006:	6812      	ldr	r2, [r2, #0]
   84008:	b353      	cbz	r3, 84060 <__sprint_r.part.0+0x68>
   8400a:	460e      	mov	r6, r1
   8400c:	4607      	mov	r7, r0
   8400e:	f102 0908 	add.w	r9, r2, #8
   84012:	e919 0420 	ldmdb	r9, {r5, sl}
   84016:	ea5f 089a 	movs.w	r8, sl, lsr #2
   8401a:	d017      	beq.n	8404c <__sprint_r.part.0+0x54>
   8401c:	2400      	movs	r4, #0
   8401e:	3d04      	subs	r5, #4
   84020:	e001      	b.n	84026 <__sprint_r.part.0+0x2e>
   84022:	45a0      	cmp	r8, r4
   84024:	d010      	beq.n	84048 <__sprint_r.part.0+0x50>
   84026:	4632      	mov	r2, r6
   84028:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8402c:	4638      	mov	r0, r7
   8402e:	f001 f8b5 	bl	8519c <_fputwc_r>
   84032:	1c43      	adds	r3, r0, #1
   84034:	f104 0401 	add.w	r4, r4, #1
   84038:	d1f3      	bne.n	84022 <__sprint_r.part.0+0x2a>
   8403a:	2300      	movs	r3, #0
   8403c:	f8cb 3008 	str.w	r3, [fp, #8]
   84040:	f8cb 3004 	str.w	r3, [fp, #4]
   84044:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84048:	f8db 3008 	ldr.w	r3, [fp, #8]
   8404c:	f02a 0a03 	bic.w	sl, sl, #3
   84050:	eba3 030a 	sub.w	r3, r3, sl
   84054:	f8cb 3008 	str.w	r3, [fp, #8]
   84058:	f109 0908 	add.w	r9, r9, #8
   8405c:	2b00      	cmp	r3, #0
   8405e:	d1d8      	bne.n	84012 <__sprint_r.part.0+0x1a>
   84060:	2000      	movs	r0, #0
   84062:	e7ea      	b.n	8403a <__sprint_r.part.0+0x42>
   84064:	f001 fa04 	bl	85470 <__sfvwrite_r>
   84068:	2300      	movs	r3, #0
   8406a:	f8cb 3008 	str.w	r3, [fp, #8]
   8406e:	f8cb 3004 	str.w	r3, [fp, #4]
   84072:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84076:	bf00      	nop

00084078 <_vfiprintf_r>:
   84078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8407c:	b0ad      	sub	sp, #180	; 0xb4
   8407e:	461d      	mov	r5, r3
   84080:	468b      	mov	fp, r1
   84082:	4690      	mov	r8, r2
   84084:	9307      	str	r3, [sp, #28]
   84086:	9006      	str	r0, [sp, #24]
   84088:	b118      	cbz	r0, 84092 <_vfiprintf_r+0x1a>
   8408a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8408c:	2b00      	cmp	r3, #0
   8408e:	f000 80f3 	beq.w	84278 <_vfiprintf_r+0x200>
   84092:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   84096:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8409a:	07df      	lsls	r7, r3, #31
   8409c:	b281      	uxth	r1, r0
   8409e:	d402      	bmi.n	840a6 <_vfiprintf_r+0x2e>
   840a0:	058e      	lsls	r6, r1, #22
   840a2:	f140 80fc 	bpl.w	8429e <_vfiprintf_r+0x226>
   840a6:	048c      	lsls	r4, r1, #18
   840a8:	d40a      	bmi.n	840c0 <_vfiprintf_r+0x48>
   840aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   840ae:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   840b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   840b6:	f8ab 100c 	strh.w	r1, [fp, #12]
   840ba:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   840be:	b289      	uxth	r1, r1
   840c0:	0708      	lsls	r0, r1, #28
   840c2:	f140 80b3 	bpl.w	8422c <_vfiprintf_r+0x1b4>
   840c6:	f8db 3010 	ldr.w	r3, [fp, #16]
   840ca:	2b00      	cmp	r3, #0
   840cc:	f000 80ae 	beq.w	8422c <_vfiprintf_r+0x1b4>
   840d0:	f001 031a 	and.w	r3, r1, #26
   840d4:	2b0a      	cmp	r3, #10
   840d6:	f000 80b5 	beq.w	84244 <_vfiprintf_r+0x1cc>
   840da:	2300      	movs	r3, #0
   840dc:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   840e0:	46d1      	mov	r9, sl
   840e2:	930b      	str	r3, [sp, #44]	; 0x2c
   840e4:	9303      	str	r3, [sp, #12]
   840e6:	9311      	str	r3, [sp, #68]	; 0x44
   840e8:	9310      	str	r3, [sp, #64]	; 0x40
   840ea:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   840ee:	f8cd b010 	str.w	fp, [sp, #16]
   840f2:	f898 3000 	ldrb.w	r3, [r8]
   840f6:	4644      	mov	r4, r8
   840f8:	b1fb      	cbz	r3, 8413a <_vfiprintf_r+0xc2>
   840fa:	2b25      	cmp	r3, #37	; 0x25
   840fc:	d102      	bne.n	84104 <_vfiprintf_r+0x8c>
   840fe:	e01c      	b.n	8413a <_vfiprintf_r+0xc2>
   84100:	2b25      	cmp	r3, #37	; 0x25
   84102:	d003      	beq.n	8410c <_vfiprintf_r+0x94>
   84104:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   84108:	2b00      	cmp	r3, #0
   8410a:	d1f9      	bne.n	84100 <_vfiprintf_r+0x88>
   8410c:	eba4 0508 	sub.w	r5, r4, r8
   84110:	b19d      	cbz	r5, 8413a <_vfiprintf_r+0xc2>
   84112:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84114:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84116:	3301      	adds	r3, #1
   84118:	442a      	add	r2, r5
   8411a:	2b07      	cmp	r3, #7
   8411c:	f8c9 8000 	str.w	r8, [r9]
   84120:	f8c9 5004 	str.w	r5, [r9, #4]
   84124:	9211      	str	r2, [sp, #68]	; 0x44
   84126:	9310      	str	r3, [sp, #64]	; 0x40
   84128:	dd7a      	ble.n	84220 <_vfiprintf_r+0x1a8>
   8412a:	2a00      	cmp	r2, #0
   8412c:	f040 84b5 	bne.w	84a9a <_vfiprintf_r+0xa22>
   84130:	46d1      	mov	r9, sl
   84132:	9b03      	ldr	r3, [sp, #12]
   84134:	9210      	str	r2, [sp, #64]	; 0x40
   84136:	442b      	add	r3, r5
   84138:	9303      	str	r3, [sp, #12]
   8413a:	7823      	ldrb	r3, [r4, #0]
   8413c:	2b00      	cmp	r3, #0
   8413e:	f000 83e5 	beq.w	8490c <_vfiprintf_r+0x894>
   84142:	2000      	movs	r0, #0
   84144:	f04f 0300 	mov.w	r3, #0
   84148:	f104 0801 	add.w	r8, r4, #1
   8414c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   84150:	7862      	ldrb	r2, [r4, #1]
   84152:	4606      	mov	r6, r0
   84154:	4605      	mov	r5, r0
   84156:	4603      	mov	r3, r0
   84158:	f04f 34ff 	mov.w	r4, #4294967295
   8415c:	f108 0801 	add.w	r8, r8, #1
   84160:	f1a2 0120 	sub.w	r1, r2, #32
   84164:	2958      	cmp	r1, #88	; 0x58
   84166:	f200 82d9 	bhi.w	8471c <_vfiprintf_r+0x6a4>
   8416a:	e8df f011 	tbh	[pc, r1, lsl #1]
   8416e:	0228      	.short	0x0228
   84170:	02d702d7 	.word	0x02d702d7
   84174:	02d70230 	.word	0x02d70230
   84178:	02d702d7 	.word	0x02d702d7
   8417c:	02d702d7 	.word	0x02d702d7
   84180:	00a002d7 	.word	0x00a002d7
   84184:	02d70288 	.word	0x02d70288
   84188:	02b800a8 	.word	0x02b800a8
   8418c:	01a602d7 	.word	0x01a602d7
   84190:	01ab01ab 	.word	0x01ab01ab
   84194:	01ab01ab 	.word	0x01ab01ab
   84198:	01ab01ab 	.word	0x01ab01ab
   8419c:	01ab01ab 	.word	0x01ab01ab
   841a0:	02d701ab 	.word	0x02d701ab
   841a4:	02d702d7 	.word	0x02d702d7
   841a8:	02d702d7 	.word	0x02d702d7
   841ac:	02d702d7 	.word	0x02d702d7
   841b0:	02d702d7 	.word	0x02d702d7
   841b4:	01b902d7 	.word	0x01b902d7
   841b8:	02d702d7 	.word	0x02d702d7
   841bc:	02d702d7 	.word	0x02d702d7
   841c0:	02d702d7 	.word	0x02d702d7
   841c4:	02d702d7 	.word	0x02d702d7
   841c8:	02d702d7 	.word	0x02d702d7
   841cc:	02d7019e 	.word	0x02d7019e
   841d0:	02d702d7 	.word	0x02d702d7
   841d4:	02d702d7 	.word	0x02d702d7
   841d8:	02d701a2 	.word	0x02d701a2
   841dc:	025a02d7 	.word	0x025a02d7
   841e0:	02d702d7 	.word	0x02d702d7
   841e4:	02d702d7 	.word	0x02d702d7
   841e8:	02d702d7 	.word	0x02d702d7
   841ec:	02d702d7 	.word	0x02d702d7
   841f0:	02d702d7 	.word	0x02d702d7
   841f4:	02220261 	.word	0x02220261
   841f8:	02d702d7 	.word	0x02d702d7
   841fc:	027602d7 	.word	0x027602d7
   84200:	02d70222 	.word	0x02d70222
   84204:	027b02d7 	.word	0x027b02d7
   84208:	01fc02d7 	.word	0x01fc02d7
   8420c:	02100189 	.word	0x02100189
   84210:	02d702d2 	.word	0x02d702d2
   84214:	02d70295 	.word	0x02d70295
   84218:	02d700ad 	.word	0x02d700ad
   8421c:	023502d7 	.word	0x023502d7
   84220:	f109 0908 	add.w	r9, r9, #8
   84224:	9b03      	ldr	r3, [sp, #12]
   84226:	442b      	add	r3, r5
   84228:	9303      	str	r3, [sp, #12]
   8422a:	e786      	b.n	8413a <_vfiprintf_r+0xc2>
   8422c:	4659      	mov	r1, fp
   8422e:	9806      	ldr	r0, [sp, #24]
   84230:	f000 fdaa 	bl	84d88 <__swsetup_r>
   84234:	bb18      	cbnz	r0, 8427e <_vfiprintf_r+0x206>
   84236:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   8423a:	f001 031a 	and.w	r3, r1, #26
   8423e:	2b0a      	cmp	r3, #10
   84240:	f47f af4b 	bne.w	840da <_vfiprintf_r+0x62>
   84244:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   84248:	2b00      	cmp	r3, #0
   8424a:	f6ff af46 	blt.w	840da <_vfiprintf_r+0x62>
   8424e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   84252:	07db      	lsls	r3, r3, #31
   84254:	d405      	bmi.n	84262 <_vfiprintf_r+0x1ea>
   84256:	058f      	lsls	r7, r1, #22
   84258:	d403      	bmi.n	84262 <_vfiprintf_r+0x1ea>
   8425a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8425e:	f001 fabd 	bl	857dc <__retarget_lock_release_recursive>
   84262:	462b      	mov	r3, r5
   84264:	4642      	mov	r2, r8
   84266:	4659      	mov	r1, fp
   84268:	9806      	ldr	r0, [sp, #24]
   8426a:	f000 fd49 	bl	84d00 <__sbprintf>
   8426e:	9003      	str	r0, [sp, #12]
   84270:	9803      	ldr	r0, [sp, #12]
   84272:	b02d      	add	sp, #180	; 0xb4
   84274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84278:	f000 feee 	bl	85058 <__sinit>
   8427c:	e709      	b.n	84092 <_vfiprintf_r+0x1a>
   8427e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   84282:	07d9      	lsls	r1, r3, #31
   84284:	d404      	bmi.n	84290 <_vfiprintf_r+0x218>
   84286:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8428a:	059a      	lsls	r2, r3, #22
   8428c:	f140 84ae 	bpl.w	84bec <_vfiprintf_r+0xb74>
   84290:	f04f 33ff 	mov.w	r3, #4294967295
   84294:	9303      	str	r3, [sp, #12]
   84296:	9803      	ldr	r0, [sp, #12]
   84298:	b02d      	add	sp, #180	; 0xb4
   8429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8429e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   842a2:	f001 fa99 	bl	857d8 <__retarget_lock_acquire_recursive>
   842a6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   842aa:	b281      	uxth	r1, r0
   842ac:	e6fb      	b.n	840a6 <_vfiprintf_r+0x2e>
   842ae:	9907      	ldr	r1, [sp, #28]
   842b0:	460a      	mov	r2, r1
   842b2:	680d      	ldr	r5, [r1, #0]
   842b4:	3204      	adds	r2, #4
   842b6:	2d00      	cmp	r5, #0
   842b8:	9207      	str	r2, [sp, #28]
   842ba:	da02      	bge.n	842c2 <_vfiprintf_r+0x24a>
   842bc:	426d      	negs	r5, r5
   842be:	f043 0304 	orr.w	r3, r3, #4
   842c2:	f898 2000 	ldrb.w	r2, [r8]
   842c6:	e749      	b.n	8415c <_vfiprintf_r+0xe4>
   842c8:	9508      	str	r5, [sp, #32]
   842ca:	069e      	lsls	r6, r3, #26
   842cc:	f100 845a 	bmi.w	84b84 <_vfiprintf_r+0xb0c>
   842d0:	9907      	ldr	r1, [sp, #28]
   842d2:	06dd      	lsls	r5, r3, #27
   842d4:	460a      	mov	r2, r1
   842d6:	f100 83ef 	bmi.w	84ab8 <_vfiprintf_r+0xa40>
   842da:	0658      	lsls	r0, r3, #25
   842dc:	f140 83ec 	bpl.w	84ab8 <_vfiprintf_r+0xa40>
   842e0:	2700      	movs	r7, #0
   842e2:	2201      	movs	r2, #1
   842e4:	880e      	ldrh	r6, [r1, #0]
   842e6:	3104      	adds	r1, #4
   842e8:	9107      	str	r1, [sp, #28]
   842ea:	f04f 0100 	mov.w	r1, #0
   842ee:	2500      	movs	r5, #0
   842f0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   842f4:	1c61      	adds	r1, r4, #1
   842f6:	f000 8117 	beq.w	84528 <_vfiprintf_r+0x4b0>
   842fa:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   842fe:	9102      	str	r1, [sp, #8]
   84300:	ea56 0107 	orrs.w	r1, r6, r7
   84304:	f040 8115 	bne.w	84532 <_vfiprintf_r+0x4ba>
   84308:	2c00      	cmp	r4, #0
   8430a:	f040 835b 	bne.w	849c4 <_vfiprintf_r+0x94c>
   8430e:	2a00      	cmp	r2, #0
   84310:	f040 83b6 	bne.w	84a80 <_vfiprintf_r+0xa08>
   84314:	f013 0301 	ands.w	r3, r3, #1
   84318:	9305      	str	r3, [sp, #20]
   8431a:	f000 8455 	beq.w	84bc8 <_vfiprintf_r+0xb50>
   8431e:	2330      	movs	r3, #48	; 0x30
   84320:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   84324:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   84328:	9b05      	ldr	r3, [sp, #20]
   8432a:	42a3      	cmp	r3, r4
   8432c:	bfb8      	it	lt
   8432e:	4623      	movlt	r3, r4
   84330:	9301      	str	r3, [sp, #4]
   84332:	b10d      	cbz	r5, 84338 <_vfiprintf_r+0x2c0>
   84334:	3301      	adds	r3, #1
   84336:	9301      	str	r3, [sp, #4]
   84338:	9b02      	ldr	r3, [sp, #8]
   8433a:	f013 0302 	ands.w	r3, r3, #2
   8433e:	9309      	str	r3, [sp, #36]	; 0x24
   84340:	d002      	beq.n	84348 <_vfiprintf_r+0x2d0>
   84342:	9b01      	ldr	r3, [sp, #4]
   84344:	3302      	adds	r3, #2
   84346:	9301      	str	r3, [sp, #4]
   84348:	9b02      	ldr	r3, [sp, #8]
   8434a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8434e:	930a      	str	r3, [sp, #40]	; 0x28
   84350:	f040 8215 	bne.w	8477e <_vfiprintf_r+0x706>
   84354:	9b08      	ldr	r3, [sp, #32]
   84356:	9a01      	ldr	r2, [sp, #4]
   84358:	1a9d      	subs	r5, r3, r2
   8435a:	2d00      	cmp	r5, #0
   8435c:	f340 820f 	ble.w	8477e <_vfiprintf_r+0x706>
   84360:	2d10      	cmp	r5, #16
   84362:	f340 8484 	ble.w	84c6e <_vfiprintf_r+0xbf6>
   84366:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84368:	46ce      	mov	lr, r9
   8436a:	2710      	movs	r7, #16
   8436c:	46a1      	mov	r9, r4
   8436e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84370:	4ec5      	ldr	r6, [pc, #788]	; (84688 <_vfiprintf_r+0x610>)
   84372:	4619      	mov	r1, r3
   84374:	9c06      	ldr	r4, [sp, #24]
   84376:	e007      	b.n	84388 <_vfiprintf_r+0x310>
   84378:	f101 0c02 	add.w	ip, r1, #2
   8437c:	4601      	mov	r1, r0
   8437e:	f10e 0e08 	add.w	lr, lr, #8
   84382:	3d10      	subs	r5, #16
   84384:	2d10      	cmp	r5, #16
   84386:	dd11      	ble.n	843ac <_vfiprintf_r+0x334>
   84388:	1c48      	adds	r0, r1, #1
   8438a:	3210      	adds	r2, #16
   8438c:	2807      	cmp	r0, #7
   8438e:	9211      	str	r2, [sp, #68]	; 0x44
   84390:	e88e 00c0 	stmia.w	lr, {r6, r7}
   84394:	9010      	str	r0, [sp, #64]	; 0x40
   84396:	ddef      	ble.n	84378 <_vfiprintf_r+0x300>
   84398:	2a00      	cmp	r2, #0
   8439a:	f040 81d9 	bne.w	84750 <_vfiprintf_r+0x6d8>
   8439e:	3d10      	subs	r5, #16
   843a0:	2d10      	cmp	r5, #16
   843a2:	4611      	mov	r1, r2
   843a4:	f04f 0c01 	mov.w	ip, #1
   843a8:	46d6      	mov	lr, sl
   843aa:	dced      	bgt.n	84388 <_vfiprintf_r+0x310>
   843ac:	464c      	mov	r4, r9
   843ae:	4661      	mov	r1, ip
   843b0:	46f1      	mov	r9, lr
   843b2:	442a      	add	r2, r5
   843b4:	2907      	cmp	r1, #7
   843b6:	9211      	str	r2, [sp, #68]	; 0x44
   843b8:	f8c9 6000 	str.w	r6, [r9]
   843bc:	f8c9 5004 	str.w	r5, [r9, #4]
   843c0:	9110      	str	r1, [sp, #64]	; 0x40
   843c2:	f300 82eb 	bgt.w	8499c <_vfiprintf_r+0x924>
   843c6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   843ca:	f109 0908 	add.w	r9, r9, #8
   843ce:	1c48      	adds	r0, r1, #1
   843d0:	2d00      	cmp	r5, #0
   843d2:	f040 81dc 	bne.w	8478e <_vfiprintf_r+0x716>
   843d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   843d8:	2b00      	cmp	r3, #0
   843da:	f000 81f6 	beq.w	847ca <_vfiprintf_r+0x752>
   843de:	2102      	movs	r1, #2
   843e0:	ab0e      	add	r3, sp, #56	; 0x38
   843e2:	440a      	add	r2, r1
   843e4:	2807      	cmp	r0, #7
   843e6:	9211      	str	r2, [sp, #68]	; 0x44
   843e8:	9010      	str	r0, [sp, #64]	; 0x40
   843ea:	f8c9 1004 	str.w	r1, [r9, #4]
   843ee:	f8c9 3000 	str.w	r3, [r9]
   843f2:	f340 81e6 	ble.w	847c2 <_vfiprintf_r+0x74a>
   843f6:	2a00      	cmp	r2, #0
   843f8:	f040 8395 	bne.w	84b26 <_vfiprintf_r+0xaae>
   843fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   843fe:	2001      	movs	r0, #1
   84400:	2b80      	cmp	r3, #128	; 0x80
   84402:	4611      	mov	r1, r2
   84404:	46d1      	mov	r9, sl
   84406:	f040 81e4 	bne.w	847d2 <_vfiprintf_r+0x75a>
   8440a:	9b08      	ldr	r3, [sp, #32]
   8440c:	9d01      	ldr	r5, [sp, #4]
   8440e:	1b5e      	subs	r6, r3, r5
   84410:	2e00      	cmp	r6, #0
   84412:	f340 81de 	ble.w	847d2 <_vfiprintf_r+0x75a>
   84416:	2e10      	cmp	r6, #16
   84418:	f340 843c 	ble.w	84c94 <_vfiprintf_r+0xc1c>
   8441c:	46cc      	mov	ip, r9
   8441e:	2710      	movs	r7, #16
   84420:	46a1      	mov	r9, r4
   84422:	4d9a      	ldr	r5, [pc, #616]	; (8468c <_vfiprintf_r+0x614>)
   84424:	9c06      	ldr	r4, [sp, #24]
   84426:	e007      	b.n	84438 <_vfiprintf_r+0x3c0>
   84428:	f101 0e02 	add.w	lr, r1, #2
   8442c:	4601      	mov	r1, r0
   8442e:	f10c 0c08 	add.w	ip, ip, #8
   84432:	3e10      	subs	r6, #16
   84434:	2e10      	cmp	r6, #16
   84436:	dd11      	ble.n	8445c <_vfiprintf_r+0x3e4>
   84438:	1c48      	adds	r0, r1, #1
   8443a:	3210      	adds	r2, #16
   8443c:	2807      	cmp	r0, #7
   8443e:	9211      	str	r2, [sp, #68]	; 0x44
   84440:	e88c 00a0 	stmia.w	ip, {r5, r7}
   84444:	9010      	str	r0, [sp, #64]	; 0x40
   84446:	ddef      	ble.n	84428 <_vfiprintf_r+0x3b0>
   84448:	2a00      	cmp	r2, #0
   8444a:	f040 829b 	bne.w	84984 <_vfiprintf_r+0x90c>
   8444e:	3e10      	subs	r6, #16
   84450:	2e10      	cmp	r6, #16
   84452:	f04f 0e01 	mov.w	lr, #1
   84456:	4611      	mov	r1, r2
   84458:	46d4      	mov	ip, sl
   8445a:	dced      	bgt.n	84438 <_vfiprintf_r+0x3c0>
   8445c:	464c      	mov	r4, r9
   8445e:	46e1      	mov	r9, ip
   84460:	4432      	add	r2, r6
   84462:	f1be 0f07 	cmp.w	lr, #7
   84466:	9211      	str	r2, [sp, #68]	; 0x44
   84468:	e889 0060 	stmia.w	r9, {r5, r6}
   8446c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   84470:	f300 8366 	bgt.w	84b40 <_vfiprintf_r+0xac8>
   84474:	f109 0908 	add.w	r9, r9, #8
   84478:	f10e 0001 	add.w	r0, lr, #1
   8447c:	4671      	mov	r1, lr
   8447e:	e1a8      	b.n	847d2 <_vfiprintf_r+0x75a>
   84480:	9508      	str	r5, [sp, #32]
   84482:	f013 0220 	ands.w	r2, r3, #32
   84486:	f040 8389 	bne.w	84b9c <_vfiprintf_r+0xb24>
   8448a:	f013 0110 	ands.w	r1, r3, #16
   8448e:	f040 8319 	bne.w	84ac4 <_vfiprintf_r+0xa4c>
   84492:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   84496:	f000 8315 	beq.w	84ac4 <_vfiprintf_r+0xa4c>
   8449a:	9807      	ldr	r0, [sp, #28]
   8449c:	460a      	mov	r2, r1
   8449e:	4601      	mov	r1, r0
   844a0:	3104      	adds	r1, #4
   844a2:	8806      	ldrh	r6, [r0, #0]
   844a4:	2700      	movs	r7, #0
   844a6:	9107      	str	r1, [sp, #28]
   844a8:	e71f      	b.n	842ea <_vfiprintf_r+0x272>
   844aa:	9508      	str	r5, [sp, #32]
   844ac:	f043 0310 	orr.w	r3, r3, #16
   844b0:	e7e7      	b.n	84482 <_vfiprintf_r+0x40a>
   844b2:	9508      	str	r5, [sp, #32]
   844b4:	f043 0310 	orr.w	r3, r3, #16
   844b8:	e707      	b.n	842ca <_vfiprintf_r+0x252>
   844ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   844be:	f898 2000 	ldrb.w	r2, [r8]
   844c2:	e64b      	b.n	8415c <_vfiprintf_r+0xe4>
   844c4:	2500      	movs	r5, #0
   844c6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   844ca:	f818 2b01 	ldrb.w	r2, [r8], #1
   844ce:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   844d2:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   844d6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   844da:	2909      	cmp	r1, #9
   844dc:	d9f5      	bls.n	844ca <_vfiprintf_r+0x452>
   844de:	e63f      	b.n	84160 <_vfiprintf_r+0xe8>
   844e0:	9508      	str	r5, [sp, #32]
   844e2:	2800      	cmp	r0, #0
   844e4:	f040 8402 	bne.w	84cec <_vfiprintf_r+0xc74>
   844e8:	f043 0310 	orr.w	r3, r3, #16
   844ec:	069e      	lsls	r6, r3, #26
   844ee:	f100 833d 	bmi.w	84b6c <_vfiprintf_r+0xaf4>
   844f2:	9907      	ldr	r1, [sp, #28]
   844f4:	06dd      	lsls	r5, r3, #27
   844f6:	460a      	mov	r2, r1
   844f8:	f100 82f0 	bmi.w	84adc <_vfiprintf_r+0xa64>
   844fc:	0658      	lsls	r0, r3, #25
   844fe:	f140 82ed 	bpl.w	84adc <_vfiprintf_r+0xa64>
   84502:	f9b1 6000 	ldrsh.w	r6, [r1]
   84506:	3204      	adds	r2, #4
   84508:	17f7      	asrs	r7, r6, #31
   8450a:	4630      	mov	r0, r6
   8450c:	4639      	mov	r1, r7
   8450e:	9207      	str	r2, [sp, #28]
   84510:	2800      	cmp	r0, #0
   84512:	f171 0200 	sbcs.w	r2, r1, #0
   84516:	f2c0 835a 	blt.w	84bce <_vfiprintf_r+0xb56>
   8451a:	1c61      	adds	r1, r4, #1
   8451c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84520:	f04f 0201 	mov.w	r2, #1
   84524:	f47f aee9 	bne.w	842fa <_vfiprintf_r+0x282>
   84528:	ea56 0107 	orrs.w	r1, r6, r7
   8452c:	f000 824b 	beq.w	849c6 <_vfiprintf_r+0x94e>
   84530:	9302      	str	r3, [sp, #8]
   84532:	2a01      	cmp	r2, #1
   84534:	f000 828a 	beq.w	84a4c <_vfiprintf_r+0x9d4>
   84538:	2a02      	cmp	r2, #2
   8453a:	f040 825a 	bne.w	849f2 <_vfiprintf_r+0x97a>
   8453e:	46d3      	mov	fp, sl
   84540:	980b      	ldr	r0, [sp, #44]	; 0x2c
   84542:	0933      	lsrs	r3, r6, #4
   84544:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   84548:	0939      	lsrs	r1, r7, #4
   8454a:	f006 020f 	and.w	r2, r6, #15
   8454e:	460f      	mov	r7, r1
   84550:	461e      	mov	r6, r3
   84552:	5c83      	ldrb	r3, [r0, r2]
   84554:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   84558:	ea56 0307 	orrs.w	r3, r6, r7
   8455c:	d1f1      	bne.n	84542 <_vfiprintf_r+0x4ca>
   8455e:	ebaa 030b 	sub.w	r3, sl, fp
   84562:	9305      	str	r3, [sp, #20]
   84564:	e6e0      	b.n	84328 <_vfiprintf_r+0x2b0>
   84566:	2800      	cmp	r0, #0
   84568:	f040 83bd 	bne.w	84ce6 <_vfiprintf_r+0xc6e>
   8456c:	0699      	lsls	r1, r3, #26
   8456e:	f100 8359 	bmi.w	84c24 <_vfiprintf_r+0xbac>
   84572:	06da      	lsls	r2, r3, #27
   84574:	f100 80e5 	bmi.w	84742 <_vfiprintf_r+0x6ca>
   84578:	065b      	lsls	r3, r3, #25
   8457a:	f140 80e2 	bpl.w	84742 <_vfiprintf_r+0x6ca>
   8457e:	9a07      	ldr	r2, [sp, #28]
   84580:	6813      	ldr	r3, [r2, #0]
   84582:	3204      	adds	r2, #4
   84584:	9207      	str	r2, [sp, #28]
   84586:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   8458a:	801a      	strh	r2, [r3, #0]
   8458c:	e5b1      	b.n	840f2 <_vfiprintf_r+0x7a>
   8458e:	2278      	movs	r2, #120	; 0x78
   84590:	2130      	movs	r1, #48	; 0x30
   84592:	9508      	str	r5, [sp, #32]
   84594:	9d07      	ldr	r5, [sp, #28]
   84596:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8459a:	1d2a      	adds	r2, r5, #4
   8459c:	9207      	str	r2, [sp, #28]
   8459e:	4a3c      	ldr	r2, [pc, #240]	; (84690 <_vfiprintf_r+0x618>)
   845a0:	682e      	ldr	r6, [r5, #0]
   845a2:	920b      	str	r2, [sp, #44]	; 0x2c
   845a4:	f043 0302 	orr.w	r3, r3, #2
   845a8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   845ac:	2700      	movs	r7, #0
   845ae:	2202      	movs	r2, #2
   845b0:	e69b      	b.n	842ea <_vfiprintf_r+0x272>
   845b2:	9508      	str	r5, [sp, #32]
   845b4:	2800      	cmp	r0, #0
   845b6:	d099      	beq.n	844ec <_vfiprintf_r+0x474>
   845b8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   845bc:	e796      	b.n	844ec <_vfiprintf_r+0x474>
   845be:	f898 2000 	ldrb.w	r2, [r8]
   845c2:	2e00      	cmp	r6, #0
   845c4:	f47f adca 	bne.w	8415c <_vfiprintf_r+0xe4>
   845c8:	2001      	movs	r0, #1
   845ca:	2620      	movs	r6, #32
   845cc:	e5c6      	b.n	8415c <_vfiprintf_r+0xe4>
   845ce:	f043 0301 	orr.w	r3, r3, #1
   845d2:	f898 2000 	ldrb.w	r2, [r8]
   845d6:	e5c1      	b.n	8415c <_vfiprintf_r+0xe4>
   845d8:	9508      	str	r5, [sp, #32]
   845da:	2800      	cmp	r0, #0
   845dc:	f040 8380 	bne.w	84ce0 <_vfiprintf_r+0xc68>
   845e0:	492b      	ldr	r1, [pc, #172]	; (84690 <_vfiprintf_r+0x618>)
   845e2:	910b      	str	r1, [sp, #44]	; 0x2c
   845e4:	069f      	lsls	r7, r3, #26
   845e6:	f100 82e5 	bmi.w	84bb4 <_vfiprintf_r+0xb3c>
   845ea:	9807      	ldr	r0, [sp, #28]
   845ec:	06de      	lsls	r6, r3, #27
   845ee:	4601      	mov	r1, r0
   845f0:	f100 826f 	bmi.w	84ad2 <_vfiprintf_r+0xa5a>
   845f4:	065d      	lsls	r5, r3, #25
   845f6:	f140 826c 	bpl.w	84ad2 <_vfiprintf_r+0xa5a>
   845fa:	2700      	movs	r7, #0
   845fc:	3104      	adds	r1, #4
   845fe:	8806      	ldrh	r6, [r0, #0]
   84600:	9107      	str	r1, [sp, #28]
   84602:	07d8      	lsls	r0, r3, #31
   84604:	f140 8220 	bpl.w	84a48 <_vfiprintf_r+0x9d0>
   84608:	ea56 0107 	orrs.w	r1, r6, r7
   8460c:	f000 821c 	beq.w	84a48 <_vfiprintf_r+0x9d0>
   84610:	2130      	movs	r1, #48	; 0x30
   84612:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   84616:	f043 0302 	orr.w	r3, r3, #2
   8461a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8461e:	2202      	movs	r2, #2
   84620:	e663      	b.n	842ea <_vfiprintf_r+0x272>
   84622:	9508      	str	r5, [sp, #32]
   84624:	2800      	cmp	r0, #0
   84626:	f040 8355 	bne.w	84cd4 <_vfiprintf_r+0xc5c>
   8462a:	491a      	ldr	r1, [pc, #104]	; (84694 <_vfiprintf_r+0x61c>)
   8462c:	910b      	str	r1, [sp, #44]	; 0x2c
   8462e:	e7d9      	b.n	845e4 <_vfiprintf_r+0x56c>
   84630:	2201      	movs	r2, #1
   84632:	9807      	ldr	r0, [sp, #28]
   84634:	4611      	mov	r1, r2
   84636:	9201      	str	r2, [sp, #4]
   84638:	6802      	ldr	r2, [r0, #0]
   8463a:	f04f 0400 	mov.w	r4, #0
   8463e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   84642:	4602      	mov	r2, r0
   84644:	3204      	adds	r2, #4
   84646:	9508      	str	r5, [sp, #32]
   84648:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   8464c:	9105      	str	r1, [sp, #20]
   8464e:	9207      	str	r2, [sp, #28]
   84650:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   84654:	9302      	str	r3, [sp, #8]
   84656:	2400      	movs	r4, #0
   84658:	e66e      	b.n	84338 <_vfiprintf_r+0x2c0>
   8465a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8465e:	f898 2000 	ldrb.w	r2, [r8]
   84662:	e57b      	b.n	8415c <_vfiprintf_r+0xe4>
   84664:	f898 2000 	ldrb.w	r2, [r8]
   84668:	2a6c      	cmp	r2, #108	; 0x6c
   8466a:	bf03      	ittte	eq
   8466c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   84670:	f043 0320 	orreq.w	r3, r3, #32
   84674:	f108 0801 	addeq.w	r8, r8, #1
   84678:	f043 0310 	orrne.w	r3, r3, #16
   8467c:	e56e      	b.n	8415c <_vfiprintf_r+0xe4>
   8467e:	f898 2000 	ldrb.w	r2, [r8]
   84682:	2001      	movs	r0, #1
   84684:	262b      	movs	r6, #43	; 0x2b
   84686:	e569      	b.n	8415c <_vfiprintf_r+0xe4>
   84688:	00086bb4 	.word	0x00086bb4
   8468c:	00086bc4 	.word	0x00086bc4
   84690:	00086b98 	.word	0x00086b98
   84694:	00086b84 	.word	0x00086b84
   84698:	f04f 0200 	mov.w	r2, #0
   8469c:	9907      	ldr	r1, [sp, #28]
   8469e:	9508      	str	r5, [sp, #32]
   846a0:	f8d1 b000 	ldr.w	fp, [r1]
   846a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   846a8:	1d0d      	adds	r5, r1, #4
   846aa:	f1bb 0f00 	cmp.w	fp, #0
   846ae:	f000 82e4 	beq.w	84c7a <_vfiprintf_r+0xc02>
   846b2:	1c67      	adds	r7, r4, #1
   846b4:	f000 82c3 	beq.w	84c3e <_vfiprintf_r+0xbc6>
   846b8:	4622      	mov	r2, r4
   846ba:	2100      	movs	r1, #0
   846bc:	4658      	mov	r0, fp
   846be:	9301      	str	r3, [sp, #4]
   846c0:	f001 fbc6 	bl	85e50 <memchr>
   846c4:	9b01      	ldr	r3, [sp, #4]
   846c6:	2800      	cmp	r0, #0
   846c8:	f000 82e8 	beq.w	84c9c <_vfiprintf_r+0xc24>
   846cc:	eba0 020b 	sub.w	r2, r0, fp
   846d0:	9507      	str	r5, [sp, #28]
   846d2:	9205      	str	r2, [sp, #20]
   846d4:	9302      	str	r3, [sp, #8]
   846d6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   846da:	2400      	movs	r4, #0
   846dc:	e624      	b.n	84328 <_vfiprintf_r+0x2b0>
   846de:	f898 2000 	ldrb.w	r2, [r8]
   846e2:	f108 0701 	add.w	r7, r8, #1
   846e6:	2a2a      	cmp	r2, #42	; 0x2a
   846e8:	f000 82e9 	beq.w	84cbe <_vfiprintf_r+0xc46>
   846ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   846f0:	2909      	cmp	r1, #9
   846f2:	46b8      	mov	r8, r7
   846f4:	f04f 0400 	mov.w	r4, #0
   846f8:	f63f ad32 	bhi.w	84160 <_vfiprintf_r+0xe8>
   846fc:	f818 2b01 	ldrb.w	r2, [r8], #1
   84700:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84704:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   84708:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8470c:	2909      	cmp	r1, #9
   8470e:	d9f5      	bls.n	846fc <_vfiprintf_r+0x684>
   84710:	e526      	b.n	84160 <_vfiprintf_r+0xe8>
   84712:	f043 0320 	orr.w	r3, r3, #32
   84716:	f898 2000 	ldrb.w	r2, [r8]
   8471a:	e51f      	b.n	8415c <_vfiprintf_r+0xe4>
   8471c:	9508      	str	r5, [sp, #32]
   8471e:	2800      	cmp	r0, #0
   84720:	f040 82db 	bne.w	84cda <_vfiprintf_r+0xc62>
   84724:	2a00      	cmp	r2, #0
   84726:	f000 80f1 	beq.w	8490c <_vfiprintf_r+0x894>
   8472a:	2101      	movs	r1, #1
   8472c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   84730:	f04f 0200 	mov.w	r2, #0
   84734:	9101      	str	r1, [sp, #4]
   84736:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8473a:	9105      	str	r1, [sp, #20]
   8473c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   84740:	e788      	b.n	84654 <_vfiprintf_r+0x5dc>
   84742:	9a07      	ldr	r2, [sp, #28]
   84744:	6813      	ldr	r3, [r2, #0]
   84746:	3204      	adds	r2, #4
   84748:	9207      	str	r2, [sp, #28]
   8474a:	9a03      	ldr	r2, [sp, #12]
   8474c:	601a      	str	r2, [r3, #0]
   8474e:	e4d0      	b.n	840f2 <_vfiprintf_r+0x7a>
   84750:	aa0f      	add	r2, sp, #60	; 0x3c
   84752:	9904      	ldr	r1, [sp, #16]
   84754:	4620      	mov	r0, r4
   84756:	f7ff fc4f 	bl	83ff8 <__sprint_r.part.0>
   8475a:	2800      	cmp	r0, #0
   8475c:	f040 8143 	bne.w	849e6 <_vfiprintf_r+0x96e>
   84760:	9910      	ldr	r1, [sp, #64]	; 0x40
   84762:	46d6      	mov	lr, sl
   84764:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84766:	f101 0c01 	add.w	ip, r1, #1
   8476a:	e60a      	b.n	84382 <_vfiprintf_r+0x30a>
   8476c:	aa0f      	add	r2, sp, #60	; 0x3c
   8476e:	9904      	ldr	r1, [sp, #16]
   84770:	9806      	ldr	r0, [sp, #24]
   84772:	f7ff fc41 	bl	83ff8 <__sprint_r.part.0>
   84776:	2800      	cmp	r0, #0
   84778:	f040 8135 	bne.w	849e6 <_vfiprintf_r+0x96e>
   8477c:	46d1      	mov	r9, sl
   8477e:	9910      	ldr	r1, [sp, #64]	; 0x40
   84780:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84784:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84786:	1c48      	adds	r0, r1, #1
   84788:	2d00      	cmp	r5, #0
   8478a:	f43f ae24 	beq.w	843d6 <_vfiprintf_r+0x35e>
   8478e:	2101      	movs	r1, #1
   84790:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   84794:	440a      	add	r2, r1
   84796:	2807      	cmp	r0, #7
   84798:	9211      	str	r2, [sp, #68]	; 0x44
   8479a:	9010      	str	r0, [sp, #64]	; 0x40
   8479c:	f8c9 1004 	str.w	r1, [r9, #4]
   847a0:	f8c9 5000 	str.w	r5, [r9]
   847a4:	f340 8109 	ble.w	849ba <_vfiprintf_r+0x942>
   847a8:	2a00      	cmp	r2, #0
   847aa:	f040 81af 	bne.w	84b0c <_vfiprintf_r+0xa94>
   847ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   847b0:	2b00      	cmp	r3, #0
   847b2:	f43f ae23 	beq.w	843fc <_vfiprintf_r+0x384>
   847b6:	2202      	movs	r2, #2
   847b8:	4608      	mov	r0, r1
   847ba:	46d1      	mov	r9, sl
   847bc:	ab0e      	add	r3, sp, #56	; 0x38
   847be:	921d      	str	r2, [sp, #116]	; 0x74
   847c0:	931c      	str	r3, [sp, #112]	; 0x70
   847c2:	4601      	mov	r1, r0
   847c4:	f109 0908 	add.w	r9, r9, #8
   847c8:	3001      	adds	r0, #1
   847ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   847cc:	2b80      	cmp	r3, #128	; 0x80
   847ce:	f43f ae1c 	beq.w	8440a <_vfiprintf_r+0x392>
   847d2:	9b05      	ldr	r3, [sp, #20]
   847d4:	1ae4      	subs	r4, r4, r3
   847d6:	2c00      	cmp	r4, #0
   847d8:	dd2f      	ble.n	8483a <_vfiprintf_r+0x7c2>
   847da:	2c10      	cmp	r4, #16
   847dc:	f340 8220 	ble.w	84c20 <_vfiprintf_r+0xba8>
   847e0:	46ce      	mov	lr, r9
   847e2:	2610      	movs	r6, #16
   847e4:	4db2      	ldr	r5, [pc, #712]	; (84ab0 <_vfiprintf_r+0xa38>)
   847e6:	9f06      	ldr	r7, [sp, #24]
   847e8:	f8dd 9010 	ldr.w	r9, [sp, #16]
   847ec:	e006      	b.n	847fc <_vfiprintf_r+0x784>
   847ee:	1c88      	adds	r0, r1, #2
   847f0:	4619      	mov	r1, r3
   847f2:	f10e 0e08 	add.w	lr, lr, #8
   847f6:	3c10      	subs	r4, #16
   847f8:	2c10      	cmp	r4, #16
   847fa:	dd10      	ble.n	8481e <_vfiprintf_r+0x7a6>
   847fc:	1c4b      	adds	r3, r1, #1
   847fe:	3210      	adds	r2, #16
   84800:	2b07      	cmp	r3, #7
   84802:	9211      	str	r2, [sp, #68]	; 0x44
   84804:	e88e 0060 	stmia.w	lr, {r5, r6}
   84808:	9310      	str	r3, [sp, #64]	; 0x40
   8480a:	ddf0      	ble.n	847ee <_vfiprintf_r+0x776>
   8480c:	2a00      	cmp	r2, #0
   8480e:	d165      	bne.n	848dc <_vfiprintf_r+0x864>
   84810:	3c10      	subs	r4, #16
   84812:	2c10      	cmp	r4, #16
   84814:	f04f 0001 	mov.w	r0, #1
   84818:	4611      	mov	r1, r2
   8481a:	46d6      	mov	lr, sl
   8481c:	dcee      	bgt.n	847fc <_vfiprintf_r+0x784>
   8481e:	46f1      	mov	r9, lr
   84820:	4422      	add	r2, r4
   84822:	2807      	cmp	r0, #7
   84824:	9211      	str	r2, [sp, #68]	; 0x44
   84826:	f8c9 5000 	str.w	r5, [r9]
   8482a:	f8c9 4004 	str.w	r4, [r9, #4]
   8482e:	9010      	str	r0, [sp, #64]	; 0x40
   84830:	f300 8085 	bgt.w	8493e <_vfiprintf_r+0x8c6>
   84834:	f109 0908 	add.w	r9, r9, #8
   84838:	3001      	adds	r0, #1
   8483a:	9905      	ldr	r1, [sp, #20]
   8483c:	2807      	cmp	r0, #7
   8483e:	440a      	add	r2, r1
   84840:	9211      	str	r2, [sp, #68]	; 0x44
   84842:	f8c9 b000 	str.w	fp, [r9]
   84846:	f8c9 1004 	str.w	r1, [r9, #4]
   8484a:	9010      	str	r0, [sp, #64]	; 0x40
   8484c:	f340 8082 	ble.w	84954 <_vfiprintf_r+0x8dc>
   84850:	2a00      	cmp	r2, #0
   84852:	f040 8118 	bne.w	84a86 <_vfiprintf_r+0xa0e>
   84856:	9b02      	ldr	r3, [sp, #8]
   84858:	9210      	str	r2, [sp, #64]	; 0x40
   8485a:	0758      	lsls	r0, r3, #29
   8485c:	d535      	bpl.n	848ca <_vfiprintf_r+0x852>
   8485e:	9b08      	ldr	r3, [sp, #32]
   84860:	9901      	ldr	r1, [sp, #4]
   84862:	1a5c      	subs	r4, r3, r1
   84864:	2c00      	cmp	r4, #0
   84866:	f340 80e7 	ble.w	84a38 <_vfiprintf_r+0x9c0>
   8486a:	46d1      	mov	r9, sl
   8486c:	2c10      	cmp	r4, #16
   8486e:	f340 820d 	ble.w	84c8c <_vfiprintf_r+0xc14>
   84872:	2510      	movs	r5, #16
   84874:	9910      	ldr	r1, [sp, #64]	; 0x40
   84876:	4e8f      	ldr	r6, [pc, #572]	; (84ab4 <_vfiprintf_r+0xa3c>)
   84878:	9f06      	ldr	r7, [sp, #24]
   8487a:	f8dd b010 	ldr.w	fp, [sp, #16]
   8487e:	e006      	b.n	8488e <_vfiprintf_r+0x816>
   84880:	1c88      	adds	r0, r1, #2
   84882:	4619      	mov	r1, r3
   84884:	f109 0908 	add.w	r9, r9, #8
   84888:	3c10      	subs	r4, #16
   8488a:	2c10      	cmp	r4, #16
   8488c:	dd11      	ble.n	848b2 <_vfiprintf_r+0x83a>
   8488e:	1c4b      	adds	r3, r1, #1
   84890:	3210      	adds	r2, #16
   84892:	2b07      	cmp	r3, #7
   84894:	9211      	str	r2, [sp, #68]	; 0x44
   84896:	f8c9 6000 	str.w	r6, [r9]
   8489a:	f8c9 5004 	str.w	r5, [r9, #4]
   8489e:	9310      	str	r3, [sp, #64]	; 0x40
   848a0:	ddee      	ble.n	84880 <_vfiprintf_r+0x808>
   848a2:	bb42      	cbnz	r2, 848f6 <_vfiprintf_r+0x87e>
   848a4:	3c10      	subs	r4, #16
   848a6:	2c10      	cmp	r4, #16
   848a8:	f04f 0001 	mov.w	r0, #1
   848ac:	4611      	mov	r1, r2
   848ae:	46d1      	mov	r9, sl
   848b0:	dced      	bgt.n	8488e <_vfiprintf_r+0x816>
   848b2:	4422      	add	r2, r4
   848b4:	2807      	cmp	r0, #7
   848b6:	9211      	str	r2, [sp, #68]	; 0x44
   848b8:	f8c9 6000 	str.w	r6, [r9]
   848bc:	f8c9 4004 	str.w	r4, [r9, #4]
   848c0:	9010      	str	r0, [sp, #64]	; 0x40
   848c2:	dd51      	ble.n	84968 <_vfiprintf_r+0x8f0>
   848c4:	2a00      	cmp	r2, #0
   848c6:	f040 819a 	bne.w	84bfe <_vfiprintf_r+0xb86>
   848ca:	9b03      	ldr	r3, [sp, #12]
   848cc:	9a08      	ldr	r2, [sp, #32]
   848ce:	9901      	ldr	r1, [sp, #4]
   848d0:	428a      	cmp	r2, r1
   848d2:	bfac      	ite	ge
   848d4:	189b      	addge	r3, r3, r2
   848d6:	185b      	addlt	r3, r3, r1
   848d8:	9303      	str	r3, [sp, #12]
   848da:	e04e      	b.n	8497a <_vfiprintf_r+0x902>
   848dc:	aa0f      	add	r2, sp, #60	; 0x3c
   848de:	4649      	mov	r1, r9
   848e0:	4638      	mov	r0, r7
   848e2:	f7ff fb89 	bl	83ff8 <__sprint_r.part.0>
   848e6:	2800      	cmp	r0, #0
   848e8:	f040 813e 	bne.w	84b68 <_vfiprintf_r+0xaf0>
   848ec:	9910      	ldr	r1, [sp, #64]	; 0x40
   848ee:	46d6      	mov	lr, sl
   848f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   848f2:	1c48      	adds	r0, r1, #1
   848f4:	e77f      	b.n	847f6 <_vfiprintf_r+0x77e>
   848f6:	aa0f      	add	r2, sp, #60	; 0x3c
   848f8:	4659      	mov	r1, fp
   848fa:	4638      	mov	r0, r7
   848fc:	f7ff fb7c 	bl	83ff8 <__sprint_r.part.0>
   84900:	b960      	cbnz	r0, 8491c <_vfiprintf_r+0x8a4>
   84902:	9910      	ldr	r1, [sp, #64]	; 0x40
   84904:	46d1      	mov	r9, sl
   84906:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84908:	1c48      	adds	r0, r1, #1
   8490a:	e7bd      	b.n	84888 <_vfiprintf_r+0x810>
   8490c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8490e:	f8dd b010 	ldr.w	fp, [sp, #16]
   84912:	2b00      	cmp	r3, #0
   84914:	f040 81ca 	bne.w	84cac <_vfiprintf_r+0xc34>
   84918:	2300      	movs	r3, #0
   8491a:	9310      	str	r3, [sp, #64]	; 0x40
   8491c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   84920:	f013 0f01 	tst.w	r3, #1
   84924:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   84928:	d102      	bne.n	84930 <_vfiprintf_r+0x8b8>
   8492a:	059a      	lsls	r2, r3, #22
   8492c:	f140 80dd 	bpl.w	84aea <_vfiprintf_r+0xa72>
   84930:	065b      	lsls	r3, r3, #25
   84932:	f53f acad 	bmi.w	84290 <_vfiprintf_r+0x218>
   84936:	9803      	ldr	r0, [sp, #12]
   84938:	b02d      	add	sp, #180	; 0xb4
   8493a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8493e:	2a00      	cmp	r2, #0
   84940:	f040 8105 	bne.w	84b4e <_vfiprintf_r+0xad6>
   84944:	2301      	movs	r3, #1
   84946:	46d1      	mov	r9, sl
   84948:	9a05      	ldr	r2, [sp, #20]
   8494a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8494e:	921d      	str	r2, [sp, #116]	; 0x74
   84950:	9211      	str	r2, [sp, #68]	; 0x44
   84952:	9310      	str	r3, [sp, #64]	; 0x40
   84954:	f109 0908 	add.w	r9, r9, #8
   84958:	9b02      	ldr	r3, [sp, #8]
   8495a:	0759      	lsls	r1, r3, #29
   8495c:	d504      	bpl.n	84968 <_vfiprintf_r+0x8f0>
   8495e:	9b08      	ldr	r3, [sp, #32]
   84960:	9901      	ldr	r1, [sp, #4]
   84962:	1a5c      	subs	r4, r3, r1
   84964:	2c00      	cmp	r4, #0
   84966:	dc81      	bgt.n	8486c <_vfiprintf_r+0x7f4>
   84968:	9b03      	ldr	r3, [sp, #12]
   8496a:	9908      	ldr	r1, [sp, #32]
   8496c:	9801      	ldr	r0, [sp, #4]
   8496e:	4281      	cmp	r1, r0
   84970:	bfac      	ite	ge
   84972:	185b      	addge	r3, r3, r1
   84974:	181b      	addlt	r3, r3, r0
   84976:	9303      	str	r3, [sp, #12]
   84978:	bb72      	cbnz	r2, 849d8 <_vfiprintf_r+0x960>
   8497a:	2300      	movs	r3, #0
   8497c:	46d1      	mov	r9, sl
   8497e:	9310      	str	r3, [sp, #64]	; 0x40
   84980:	f7ff bbb7 	b.w	840f2 <_vfiprintf_r+0x7a>
   84984:	aa0f      	add	r2, sp, #60	; 0x3c
   84986:	9904      	ldr	r1, [sp, #16]
   84988:	4620      	mov	r0, r4
   8498a:	f7ff fb35 	bl	83ff8 <__sprint_r.part.0>
   8498e:	bb50      	cbnz	r0, 849e6 <_vfiprintf_r+0x96e>
   84990:	9910      	ldr	r1, [sp, #64]	; 0x40
   84992:	46d4      	mov	ip, sl
   84994:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84996:	f101 0e01 	add.w	lr, r1, #1
   8499a:	e54a      	b.n	84432 <_vfiprintf_r+0x3ba>
   8499c:	2a00      	cmp	r2, #0
   8499e:	f47f aee5 	bne.w	8476c <_vfiprintf_r+0x6f4>
   849a2:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   849a6:	2900      	cmp	r1, #0
   849a8:	f000 811a 	beq.w	84be0 <_vfiprintf_r+0xb68>
   849ac:	2201      	movs	r2, #1
   849ae:	46d1      	mov	r9, sl
   849b0:	4610      	mov	r0, r2
   849b2:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   849b6:	921d      	str	r2, [sp, #116]	; 0x74
   849b8:	911c      	str	r1, [sp, #112]	; 0x70
   849ba:	4601      	mov	r1, r0
   849bc:	f109 0908 	add.w	r9, r9, #8
   849c0:	3001      	adds	r0, #1
   849c2:	e508      	b.n	843d6 <_vfiprintf_r+0x35e>
   849c4:	9b02      	ldr	r3, [sp, #8]
   849c6:	2a01      	cmp	r2, #1
   849c8:	f000 8097 	beq.w	84afa <_vfiprintf_r+0xa82>
   849cc:	2a02      	cmp	r2, #2
   849ce:	d10d      	bne.n	849ec <_vfiprintf_r+0x974>
   849d0:	9302      	str	r3, [sp, #8]
   849d2:	2600      	movs	r6, #0
   849d4:	2700      	movs	r7, #0
   849d6:	e5b2      	b.n	8453e <_vfiprintf_r+0x4c6>
   849d8:	aa0f      	add	r2, sp, #60	; 0x3c
   849da:	9904      	ldr	r1, [sp, #16]
   849dc:	9806      	ldr	r0, [sp, #24]
   849de:	f7ff fb0b 	bl	83ff8 <__sprint_r.part.0>
   849e2:	2800      	cmp	r0, #0
   849e4:	d0c9      	beq.n	8497a <_vfiprintf_r+0x902>
   849e6:	f8dd b010 	ldr.w	fp, [sp, #16]
   849ea:	e797      	b.n	8491c <_vfiprintf_r+0x8a4>
   849ec:	2600      	movs	r6, #0
   849ee:	2700      	movs	r7, #0
   849f0:	9302      	str	r3, [sp, #8]
   849f2:	4651      	mov	r1, sl
   849f4:	e000      	b.n	849f8 <_vfiprintf_r+0x980>
   849f6:	4659      	mov	r1, fp
   849f8:	08f2      	lsrs	r2, r6, #3
   849fa:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   849fe:	08f8      	lsrs	r0, r7, #3
   84a00:	f006 0307 	and.w	r3, r6, #7
   84a04:	4607      	mov	r7, r0
   84a06:	4616      	mov	r6, r2
   84a08:	3330      	adds	r3, #48	; 0x30
   84a0a:	ea56 0207 	orrs.w	r2, r6, r7
   84a0e:	f801 3c01 	strb.w	r3, [r1, #-1]
   84a12:	f101 3bff 	add.w	fp, r1, #4294967295
   84a16:	d1ee      	bne.n	849f6 <_vfiprintf_r+0x97e>
   84a18:	9a02      	ldr	r2, [sp, #8]
   84a1a:	07d6      	lsls	r6, r2, #31
   84a1c:	f57f ad9f 	bpl.w	8455e <_vfiprintf_r+0x4e6>
   84a20:	2b30      	cmp	r3, #48	; 0x30
   84a22:	f43f ad9c 	beq.w	8455e <_vfiprintf_r+0x4e6>
   84a26:	2330      	movs	r3, #48	; 0x30
   84a28:	3902      	subs	r1, #2
   84a2a:	f80b 3c01 	strb.w	r3, [fp, #-1]
   84a2e:	ebaa 0301 	sub.w	r3, sl, r1
   84a32:	9305      	str	r3, [sp, #20]
   84a34:	468b      	mov	fp, r1
   84a36:	e477      	b.n	84328 <_vfiprintf_r+0x2b0>
   84a38:	9b03      	ldr	r3, [sp, #12]
   84a3a:	9a08      	ldr	r2, [sp, #32]
   84a3c:	428a      	cmp	r2, r1
   84a3e:	bfac      	ite	ge
   84a40:	189b      	addge	r3, r3, r2
   84a42:	185b      	addlt	r3, r3, r1
   84a44:	9303      	str	r3, [sp, #12]
   84a46:	e798      	b.n	8497a <_vfiprintf_r+0x902>
   84a48:	2202      	movs	r2, #2
   84a4a:	e44e      	b.n	842ea <_vfiprintf_r+0x272>
   84a4c:	2f00      	cmp	r7, #0
   84a4e:	bf08      	it	eq
   84a50:	2e0a      	cmpeq	r6, #10
   84a52:	d351      	bcc.n	84af8 <_vfiprintf_r+0xa80>
   84a54:	46d3      	mov	fp, sl
   84a56:	4630      	mov	r0, r6
   84a58:	4639      	mov	r1, r7
   84a5a:	220a      	movs	r2, #10
   84a5c:	2300      	movs	r3, #0
   84a5e:	f001 fe85 	bl	8676c <__aeabi_uldivmod>
   84a62:	3230      	adds	r2, #48	; 0x30
   84a64:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   84a68:	4630      	mov	r0, r6
   84a6a:	4639      	mov	r1, r7
   84a6c:	2300      	movs	r3, #0
   84a6e:	220a      	movs	r2, #10
   84a70:	f001 fe7c 	bl	8676c <__aeabi_uldivmod>
   84a74:	4606      	mov	r6, r0
   84a76:	460f      	mov	r7, r1
   84a78:	ea56 0307 	orrs.w	r3, r6, r7
   84a7c:	d1eb      	bne.n	84a56 <_vfiprintf_r+0x9de>
   84a7e:	e56e      	b.n	8455e <_vfiprintf_r+0x4e6>
   84a80:	9405      	str	r4, [sp, #20]
   84a82:	46d3      	mov	fp, sl
   84a84:	e450      	b.n	84328 <_vfiprintf_r+0x2b0>
   84a86:	aa0f      	add	r2, sp, #60	; 0x3c
   84a88:	9904      	ldr	r1, [sp, #16]
   84a8a:	9806      	ldr	r0, [sp, #24]
   84a8c:	f7ff fab4 	bl	83ff8 <__sprint_r.part.0>
   84a90:	2800      	cmp	r0, #0
   84a92:	d1a8      	bne.n	849e6 <_vfiprintf_r+0x96e>
   84a94:	46d1      	mov	r9, sl
   84a96:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84a98:	e75e      	b.n	84958 <_vfiprintf_r+0x8e0>
   84a9a:	aa0f      	add	r2, sp, #60	; 0x3c
   84a9c:	9904      	ldr	r1, [sp, #16]
   84a9e:	9806      	ldr	r0, [sp, #24]
   84aa0:	f7ff faaa 	bl	83ff8 <__sprint_r.part.0>
   84aa4:	2800      	cmp	r0, #0
   84aa6:	d19e      	bne.n	849e6 <_vfiprintf_r+0x96e>
   84aa8:	46d1      	mov	r9, sl
   84aaa:	f7ff bbbb 	b.w	84224 <_vfiprintf_r+0x1ac>
   84aae:	bf00      	nop
   84ab0:	00086bc4 	.word	0x00086bc4
   84ab4:	00086bb4 	.word	0x00086bb4
   84ab8:	3104      	adds	r1, #4
   84aba:	6816      	ldr	r6, [r2, #0]
   84abc:	2700      	movs	r7, #0
   84abe:	2201      	movs	r2, #1
   84ac0:	9107      	str	r1, [sp, #28]
   84ac2:	e412      	b.n	842ea <_vfiprintf_r+0x272>
   84ac4:	9807      	ldr	r0, [sp, #28]
   84ac6:	2700      	movs	r7, #0
   84ac8:	4601      	mov	r1, r0
   84aca:	3104      	adds	r1, #4
   84acc:	6806      	ldr	r6, [r0, #0]
   84ace:	9107      	str	r1, [sp, #28]
   84ad0:	e40b      	b.n	842ea <_vfiprintf_r+0x272>
   84ad2:	680e      	ldr	r6, [r1, #0]
   84ad4:	3104      	adds	r1, #4
   84ad6:	9107      	str	r1, [sp, #28]
   84ad8:	2700      	movs	r7, #0
   84ada:	e592      	b.n	84602 <_vfiprintf_r+0x58a>
   84adc:	6816      	ldr	r6, [r2, #0]
   84ade:	3204      	adds	r2, #4
   84ae0:	17f7      	asrs	r7, r6, #31
   84ae2:	9207      	str	r2, [sp, #28]
   84ae4:	4630      	mov	r0, r6
   84ae6:	4639      	mov	r1, r7
   84ae8:	e512      	b.n	84510 <_vfiprintf_r+0x498>
   84aea:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   84aee:	f000 fe75 	bl	857dc <__retarget_lock_release_recursive>
   84af2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   84af6:	e71b      	b.n	84930 <_vfiprintf_r+0x8b8>
   84af8:	9b02      	ldr	r3, [sp, #8]
   84afa:	9302      	str	r3, [sp, #8]
   84afc:	2301      	movs	r3, #1
   84afe:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   84b02:	3630      	adds	r6, #48	; 0x30
   84b04:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   84b08:	9305      	str	r3, [sp, #20]
   84b0a:	e40d      	b.n	84328 <_vfiprintf_r+0x2b0>
   84b0c:	aa0f      	add	r2, sp, #60	; 0x3c
   84b0e:	9904      	ldr	r1, [sp, #16]
   84b10:	9806      	ldr	r0, [sp, #24]
   84b12:	f7ff fa71 	bl	83ff8 <__sprint_r.part.0>
   84b16:	2800      	cmp	r0, #0
   84b18:	f47f af65 	bne.w	849e6 <_vfiprintf_r+0x96e>
   84b1c:	9910      	ldr	r1, [sp, #64]	; 0x40
   84b1e:	46d1      	mov	r9, sl
   84b20:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84b22:	1c48      	adds	r0, r1, #1
   84b24:	e457      	b.n	843d6 <_vfiprintf_r+0x35e>
   84b26:	aa0f      	add	r2, sp, #60	; 0x3c
   84b28:	9904      	ldr	r1, [sp, #16]
   84b2a:	9806      	ldr	r0, [sp, #24]
   84b2c:	f7ff fa64 	bl	83ff8 <__sprint_r.part.0>
   84b30:	2800      	cmp	r0, #0
   84b32:	f47f af58 	bne.w	849e6 <_vfiprintf_r+0x96e>
   84b36:	9910      	ldr	r1, [sp, #64]	; 0x40
   84b38:	46d1      	mov	r9, sl
   84b3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84b3c:	1c48      	adds	r0, r1, #1
   84b3e:	e644      	b.n	847ca <_vfiprintf_r+0x752>
   84b40:	2a00      	cmp	r2, #0
   84b42:	f040 8087 	bne.w	84c54 <_vfiprintf_r+0xbdc>
   84b46:	2001      	movs	r0, #1
   84b48:	4611      	mov	r1, r2
   84b4a:	46d1      	mov	r9, sl
   84b4c:	e641      	b.n	847d2 <_vfiprintf_r+0x75a>
   84b4e:	aa0f      	add	r2, sp, #60	; 0x3c
   84b50:	9904      	ldr	r1, [sp, #16]
   84b52:	9806      	ldr	r0, [sp, #24]
   84b54:	f7ff fa50 	bl	83ff8 <__sprint_r.part.0>
   84b58:	2800      	cmp	r0, #0
   84b5a:	f47f af44 	bne.w	849e6 <_vfiprintf_r+0x96e>
   84b5e:	9810      	ldr	r0, [sp, #64]	; 0x40
   84b60:	46d1      	mov	r9, sl
   84b62:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84b64:	3001      	adds	r0, #1
   84b66:	e668      	b.n	8483a <_vfiprintf_r+0x7c2>
   84b68:	46cb      	mov	fp, r9
   84b6a:	e6d7      	b.n	8491c <_vfiprintf_r+0x8a4>
   84b6c:	9d07      	ldr	r5, [sp, #28]
   84b6e:	3507      	adds	r5, #7
   84b70:	f025 0507 	bic.w	r5, r5, #7
   84b74:	f105 0208 	add.w	r2, r5, #8
   84b78:	e9d5 0100 	ldrd	r0, r1, [r5]
   84b7c:	9207      	str	r2, [sp, #28]
   84b7e:	4606      	mov	r6, r0
   84b80:	460f      	mov	r7, r1
   84b82:	e4c5      	b.n	84510 <_vfiprintf_r+0x498>
   84b84:	9d07      	ldr	r5, [sp, #28]
   84b86:	3507      	adds	r5, #7
   84b88:	f025 0207 	bic.w	r2, r5, #7
   84b8c:	f102 0108 	add.w	r1, r2, #8
   84b90:	e9d2 6700 	ldrd	r6, r7, [r2]
   84b94:	9107      	str	r1, [sp, #28]
   84b96:	2201      	movs	r2, #1
   84b98:	f7ff bba7 	b.w	842ea <_vfiprintf_r+0x272>
   84b9c:	9d07      	ldr	r5, [sp, #28]
   84b9e:	3507      	adds	r5, #7
   84ba0:	f025 0207 	bic.w	r2, r5, #7
   84ba4:	f102 0108 	add.w	r1, r2, #8
   84ba8:	e9d2 6700 	ldrd	r6, r7, [r2]
   84bac:	9107      	str	r1, [sp, #28]
   84bae:	2200      	movs	r2, #0
   84bb0:	f7ff bb9b 	b.w	842ea <_vfiprintf_r+0x272>
   84bb4:	9d07      	ldr	r5, [sp, #28]
   84bb6:	3507      	adds	r5, #7
   84bb8:	f025 0107 	bic.w	r1, r5, #7
   84bbc:	f101 0008 	add.w	r0, r1, #8
   84bc0:	9007      	str	r0, [sp, #28]
   84bc2:	e9d1 6700 	ldrd	r6, r7, [r1]
   84bc6:	e51c      	b.n	84602 <_vfiprintf_r+0x58a>
   84bc8:	46d3      	mov	fp, sl
   84bca:	f7ff bbad 	b.w	84328 <_vfiprintf_r+0x2b0>
   84bce:	252d      	movs	r5, #45	; 0x2d
   84bd0:	4276      	negs	r6, r6
   84bd2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   84bd6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   84bda:	2201      	movs	r2, #1
   84bdc:	f7ff bb8a 	b.w	842f4 <_vfiprintf_r+0x27c>
   84be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84be2:	b9b3      	cbnz	r3, 84c12 <_vfiprintf_r+0xb9a>
   84be4:	4611      	mov	r1, r2
   84be6:	2001      	movs	r0, #1
   84be8:	46d1      	mov	r9, sl
   84bea:	e5f2      	b.n	847d2 <_vfiprintf_r+0x75a>
   84bec:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   84bf0:	f000 fdf4 	bl	857dc <__retarget_lock_release_recursive>
   84bf4:	f04f 33ff 	mov.w	r3, #4294967295
   84bf8:	9303      	str	r3, [sp, #12]
   84bfa:	f7ff bb4c 	b.w	84296 <_vfiprintf_r+0x21e>
   84bfe:	aa0f      	add	r2, sp, #60	; 0x3c
   84c00:	9904      	ldr	r1, [sp, #16]
   84c02:	9806      	ldr	r0, [sp, #24]
   84c04:	f7ff f9f8 	bl	83ff8 <__sprint_r.part.0>
   84c08:	2800      	cmp	r0, #0
   84c0a:	f47f aeec 	bne.w	849e6 <_vfiprintf_r+0x96e>
   84c0e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84c10:	e6aa      	b.n	84968 <_vfiprintf_r+0x8f0>
   84c12:	2202      	movs	r2, #2
   84c14:	ab0e      	add	r3, sp, #56	; 0x38
   84c16:	921d      	str	r2, [sp, #116]	; 0x74
   84c18:	931c      	str	r3, [sp, #112]	; 0x70
   84c1a:	2001      	movs	r0, #1
   84c1c:	46d1      	mov	r9, sl
   84c1e:	e5d0      	b.n	847c2 <_vfiprintf_r+0x74a>
   84c20:	4d34      	ldr	r5, [pc, #208]	; (84cf4 <_vfiprintf_r+0xc7c>)
   84c22:	e5fd      	b.n	84820 <_vfiprintf_r+0x7a8>
   84c24:	9a07      	ldr	r2, [sp, #28]
   84c26:	4613      	mov	r3, r2
   84c28:	3304      	adds	r3, #4
   84c2a:	9307      	str	r3, [sp, #28]
   84c2c:	9b03      	ldr	r3, [sp, #12]
   84c2e:	6811      	ldr	r1, [r2, #0]
   84c30:	17dd      	asrs	r5, r3, #31
   84c32:	461a      	mov	r2, r3
   84c34:	462b      	mov	r3, r5
   84c36:	e9c1 2300 	strd	r2, r3, [r1]
   84c3a:	f7ff ba5a 	b.w	840f2 <_vfiprintf_r+0x7a>
   84c3e:	4658      	mov	r0, fp
   84c40:	9507      	str	r5, [sp, #28]
   84c42:	9302      	str	r3, [sp, #8]
   84c44:	f7ff f978 	bl	83f38 <strlen>
   84c48:	2400      	movs	r4, #0
   84c4a:	9005      	str	r0, [sp, #20]
   84c4c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84c50:	f7ff bb6a 	b.w	84328 <_vfiprintf_r+0x2b0>
   84c54:	aa0f      	add	r2, sp, #60	; 0x3c
   84c56:	9904      	ldr	r1, [sp, #16]
   84c58:	9806      	ldr	r0, [sp, #24]
   84c5a:	f7ff f9cd 	bl	83ff8 <__sprint_r.part.0>
   84c5e:	2800      	cmp	r0, #0
   84c60:	f47f aec1 	bne.w	849e6 <_vfiprintf_r+0x96e>
   84c64:	9910      	ldr	r1, [sp, #64]	; 0x40
   84c66:	46d1      	mov	r9, sl
   84c68:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84c6a:	1c48      	adds	r0, r1, #1
   84c6c:	e5b1      	b.n	847d2 <_vfiprintf_r+0x75a>
   84c6e:	9910      	ldr	r1, [sp, #64]	; 0x40
   84c70:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84c72:	3101      	adds	r1, #1
   84c74:	4e20      	ldr	r6, [pc, #128]	; (84cf8 <_vfiprintf_r+0xc80>)
   84c76:	f7ff bb9c 	b.w	843b2 <_vfiprintf_r+0x33a>
   84c7a:	2c06      	cmp	r4, #6
   84c7c:	bf28      	it	cs
   84c7e:	2406      	movcs	r4, #6
   84c80:	9507      	str	r5, [sp, #28]
   84c82:	9405      	str	r4, [sp, #20]
   84c84:	9401      	str	r4, [sp, #4]
   84c86:	f8df b074 	ldr.w	fp, [pc, #116]	; 84cfc <_vfiprintf_r+0xc84>
   84c8a:	e4e3      	b.n	84654 <_vfiprintf_r+0x5dc>
   84c8c:	9810      	ldr	r0, [sp, #64]	; 0x40
   84c8e:	4e1a      	ldr	r6, [pc, #104]	; (84cf8 <_vfiprintf_r+0xc80>)
   84c90:	3001      	adds	r0, #1
   84c92:	e60e      	b.n	848b2 <_vfiprintf_r+0x83a>
   84c94:	4686      	mov	lr, r0
   84c96:	4d17      	ldr	r5, [pc, #92]	; (84cf4 <_vfiprintf_r+0xc7c>)
   84c98:	f7ff bbe2 	b.w	84460 <_vfiprintf_r+0x3e8>
   84c9c:	9405      	str	r4, [sp, #20]
   84c9e:	9507      	str	r5, [sp, #28]
   84ca0:	9302      	str	r3, [sp, #8]
   84ca2:	4604      	mov	r4, r0
   84ca4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84ca8:	f7ff bb3e 	b.w	84328 <_vfiprintf_r+0x2b0>
   84cac:	9806      	ldr	r0, [sp, #24]
   84cae:	aa0f      	add	r2, sp, #60	; 0x3c
   84cb0:	4659      	mov	r1, fp
   84cb2:	f7ff f9a1 	bl	83ff8 <__sprint_r.part.0>
   84cb6:	2800      	cmp	r0, #0
   84cb8:	f43f ae2e 	beq.w	84918 <_vfiprintf_r+0x8a0>
   84cbc:	e62e      	b.n	8491c <_vfiprintf_r+0x8a4>
   84cbe:	9907      	ldr	r1, [sp, #28]
   84cc0:	f898 2001 	ldrb.w	r2, [r8, #1]
   84cc4:	680c      	ldr	r4, [r1, #0]
   84cc6:	3104      	adds	r1, #4
   84cc8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   84ccc:	46b8      	mov	r8, r7
   84cce:	9107      	str	r1, [sp, #28]
   84cd0:	f7ff ba44 	b.w	8415c <_vfiprintf_r+0xe4>
   84cd4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   84cd8:	e4a7      	b.n	8462a <_vfiprintf_r+0x5b2>
   84cda:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   84cde:	e521      	b.n	84724 <_vfiprintf_r+0x6ac>
   84ce0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   84ce4:	e47c      	b.n	845e0 <_vfiprintf_r+0x568>
   84ce6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   84cea:	e43f      	b.n	8456c <_vfiprintf_r+0x4f4>
   84cec:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   84cf0:	f7ff bbfa 	b.w	844e8 <_vfiprintf_r+0x470>
   84cf4:	00086bc4 	.word	0x00086bc4
   84cf8:	00086bb4 	.word	0x00086bb4
   84cfc:	00086bac 	.word	0x00086bac

00084d00 <__sbprintf>:
   84d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84d04:	460c      	mov	r4, r1
   84d06:	f04f 0e00 	mov.w	lr, #0
   84d0a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84d0e:	4606      	mov	r6, r0
   84d10:	4617      	mov	r7, r2
   84d12:	4698      	mov	r8, r3
   84d14:	6e62      	ldr	r2, [r4, #100]	; 0x64
   84d16:	89e3      	ldrh	r3, [r4, #14]
   84d18:	8989      	ldrh	r1, [r1, #12]
   84d1a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   84d1e:	f021 0102 	bic.w	r1, r1, #2
   84d22:	9219      	str	r2, [sp, #100]	; 0x64
   84d24:	f8ad 300e 	strh.w	r3, [sp, #14]
   84d28:	69e2      	ldr	r2, [r4, #28]
   84d2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   84d2c:	f8ad 100c 	strh.w	r1, [sp, #12]
   84d30:	a816      	add	r0, sp, #88	; 0x58
   84d32:	a91a      	add	r1, sp, #104	; 0x68
   84d34:	f8cd e018 	str.w	lr, [sp, #24]
   84d38:	9207      	str	r2, [sp, #28]
   84d3a:	9309      	str	r3, [sp, #36]	; 0x24
   84d3c:	9100      	str	r1, [sp, #0]
   84d3e:	9104      	str	r1, [sp, #16]
   84d40:	9502      	str	r5, [sp, #8]
   84d42:	9505      	str	r5, [sp, #20]
   84d44:	f000 fd44 	bl	857d0 <__retarget_lock_init_recursive>
   84d48:	4643      	mov	r3, r8
   84d4a:	463a      	mov	r2, r7
   84d4c:	4669      	mov	r1, sp
   84d4e:	4630      	mov	r0, r6
   84d50:	f7ff f992 	bl	84078 <_vfiprintf_r>
   84d54:	1e05      	subs	r5, r0, #0
   84d56:	db07      	blt.n	84d68 <__sbprintf+0x68>
   84d58:	4630      	mov	r0, r6
   84d5a:	4669      	mov	r1, sp
   84d5c:	f000 f924 	bl	84fa8 <_fflush_r>
   84d60:	2800      	cmp	r0, #0
   84d62:	bf18      	it	ne
   84d64:	f04f 35ff 	movne.w	r5, #4294967295
   84d68:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84d6c:	065b      	lsls	r3, r3, #25
   84d6e:	d503      	bpl.n	84d78 <__sbprintf+0x78>
   84d70:	89a3      	ldrh	r3, [r4, #12]
   84d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84d76:	81a3      	strh	r3, [r4, #12]
   84d78:	9816      	ldr	r0, [sp, #88]	; 0x58
   84d7a:	f000 fd2b 	bl	857d4 <__retarget_lock_close_recursive>
   84d7e:	4628      	mov	r0, r5
   84d80:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   84d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00084d88 <__swsetup_r>:
   84d88:	b538      	push	{r3, r4, r5, lr}
   84d8a:	4b30      	ldr	r3, [pc, #192]	; (84e4c <__swsetup_r+0xc4>)
   84d8c:	4605      	mov	r5, r0
   84d8e:	6818      	ldr	r0, [r3, #0]
   84d90:	460c      	mov	r4, r1
   84d92:	b110      	cbz	r0, 84d9a <__swsetup_r+0x12>
   84d94:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84d96:	2b00      	cmp	r3, #0
   84d98:	d038      	beq.n	84e0c <__swsetup_r+0x84>
   84d9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84d9e:	b293      	uxth	r3, r2
   84da0:	0718      	lsls	r0, r3, #28
   84da2:	d50c      	bpl.n	84dbe <__swsetup_r+0x36>
   84da4:	6920      	ldr	r0, [r4, #16]
   84da6:	b1a8      	cbz	r0, 84dd4 <__swsetup_r+0x4c>
   84da8:	f013 0201 	ands.w	r2, r3, #1
   84dac:	d01e      	beq.n	84dec <__swsetup_r+0x64>
   84dae:	2200      	movs	r2, #0
   84db0:	6963      	ldr	r3, [r4, #20]
   84db2:	60a2      	str	r2, [r4, #8]
   84db4:	425b      	negs	r3, r3
   84db6:	61a3      	str	r3, [r4, #24]
   84db8:	b1f0      	cbz	r0, 84df8 <__swsetup_r+0x70>
   84dba:	2000      	movs	r0, #0
   84dbc:	bd38      	pop	{r3, r4, r5, pc}
   84dbe:	06d9      	lsls	r1, r3, #27
   84dc0:	d53b      	bpl.n	84e3a <__swsetup_r+0xb2>
   84dc2:	0758      	lsls	r0, r3, #29
   84dc4:	d425      	bmi.n	84e12 <__swsetup_r+0x8a>
   84dc6:	6920      	ldr	r0, [r4, #16]
   84dc8:	f042 0308 	orr.w	r3, r2, #8
   84dcc:	81a3      	strh	r3, [r4, #12]
   84dce:	b29b      	uxth	r3, r3
   84dd0:	2800      	cmp	r0, #0
   84dd2:	d1e9      	bne.n	84da8 <__swsetup_r+0x20>
   84dd4:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84dd8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84ddc:	d0e4      	beq.n	84da8 <__swsetup_r+0x20>
   84dde:	4628      	mov	r0, r5
   84de0:	4621      	mov	r1, r4
   84de2:	f000 fd2b 	bl	8583c <__smakebuf_r>
   84de6:	89a3      	ldrh	r3, [r4, #12]
   84de8:	6920      	ldr	r0, [r4, #16]
   84dea:	e7dd      	b.n	84da8 <__swsetup_r+0x20>
   84dec:	0799      	lsls	r1, r3, #30
   84dee:	bf58      	it	pl
   84df0:	6962      	ldrpl	r2, [r4, #20]
   84df2:	60a2      	str	r2, [r4, #8]
   84df4:	2800      	cmp	r0, #0
   84df6:	d1e0      	bne.n	84dba <__swsetup_r+0x32>
   84df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84dfc:	061a      	lsls	r2, r3, #24
   84dfe:	d5dd      	bpl.n	84dbc <__swsetup_r+0x34>
   84e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84e04:	81a3      	strh	r3, [r4, #12]
   84e06:	f04f 30ff 	mov.w	r0, #4294967295
   84e0a:	bd38      	pop	{r3, r4, r5, pc}
   84e0c:	f000 f924 	bl	85058 <__sinit>
   84e10:	e7c3      	b.n	84d9a <__swsetup_r+0x12>
   84e12:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84e14:	b151      	cbz	r1, 84e2c <__swsetup_r+0xa4>
   84e16:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84e1a:	4299      	cmp	r1, r3
   84e1c:	d004      	beq.n	84e28 <__swsetup_r+0xa0>
   84e1e:	4628      	mov	r0, r5
   84e20:	f000 fa40 	bl	852a4 <_free_r>
   84e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84e28:	2300      	movs	r3, #0
   84e2a:	6323      	str	r3, [r4, #48]	; 0x30
   84e2c:	2300      	movs	r3, #0
   84e2e:	6920      	ldr	r0, [r4, #16]
   84e30:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84e34:	e884 0009 	stmia.w	r4, {r0, r3}
   84e38:	e7c6      	b.n	84dc8 <__swsetup_r+0x40>
   84e3a:	2309      	movs	r3, #9
   84e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84e40:	602b      	str	r3, [r5, #0]
   84e42:	f04f 30ff 	mov.w	r0, #4294967295
   84e46:	81a2      	strh	r2, [r4, #12]
   84e48:	bd38      	pop	{r3, r4, r5, pc}
   84e4a:	bf00      	nop
   84e4c:	20070188 	.word	0x20070188

00084e50 <register_fini>:
   84e50:	4b02      	ldr	r3, [pc, #8]	; (84e5c <register_fini+0xc>)
   84e52:	b113      	cbz	r3, 84e5a <register_fini+0xa>
   84e54:	4802      	ldr	r0, [pc, #8]	; (84e60 <register_fini+0x10>)
   84e56:	f000 b805 	b.w	84e64 <atexit>
   84e5a:	4770      	bx	lr
   84e5c:	00000000 	.word	0x00000000
   84e60:	000850d1 	.word	0x000850d1

00084e64 <atexit>:
   84e64:	2300      	movs	r3, #0
   84e66:	4601      	mov	r1, r0
   84e68:	461a      	mov	r2, r3
   84e6a:	4618      	mov	r0, r3
   84e6c:	f001 bb56 	b.w	8651c <__register_exitproc>

00084e70 <__sflush_r>:
   84e70:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   84e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84e78:	b29a      	uxth	r2, r3
   84e7a:	460d      	mov	r5, r1
   84e7c:	0711      	lsls	r1, r2, #28
   84e7e:	4680      	mov	r8, r0
   84e80:	d43a      	bmi.n	84ef8 <__sflush_r+0x88>
   84e82:	686a      	ldr	r2, [r5, #4]
   84e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84e88:	2a00      	cmp	r2, #0
   84e8a:	81ab      	strh	r3, [r5, #12]
   84e8c:	dd70      	ble.n	84f70 <__sflush_r+0x100>
   84e8e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84e90:	2c00      	cmp	r4, #0
   84e92:	d04a      	beq.n	84f2a <__sflush_r+0xba>
   84e94:	2200      	movs	r2, #0
   84e96:	b29b      	uxth	r3, r3
   84e98:	f8d8 6000 	ldr.w	r6, [r8]
   84e9c:	f8c8 2000 	str.w	r2, [r8]
   84ea0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   84ea4:	d068      	beq.n	84f78 <__sflush_r+0x108>
   84ea6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84ea8:	075f      	lsls	r7, r3, #29
   84eaa:	d505      	bpl.n	84eb8 <__sflush_r+0x48>
   84eac:	6869      	ldr	r1, [r5, #4]
   84eae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84eb0:	1a52      	subs	r2, r2, r1
   84eb2:	b10b      	cbz	r3, 84eb8 <__sflush_r+0x48>
   84eb4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84eb6:	1ad2      	subs	r2, r2, r3
   84eb8:	2300      	movs	r3, #0
   84eba:	69e9      	ldr	r1, [r5, #28]
   84ebc:	4640      	mov	r0, r8
   84ebe:	47a0      	blx	r4
   84ec0:	1c44      	adds	r4, r0, #1
   84ec2:	d03d      	beq.n	84f40 <__sflush_r+0xd0>
   84ec4:	2100      	movs	r1, #0
   84ec6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84eca:	692a      	ldr	r2, [r5, #16]
   84ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84ed0:	81ab      	strh	r3, [r5, #12]
   84ed2:	04db      	lsls	r3, r3, #19
   84ed4:	6069      	str	r1, [r5, #4]
   84ed6:	602a      	str	r2, [r5, #0]
   84ed8:	d448      	bmi.n	84f6c <__sflush_r+0xfc>
   84eda:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84edc:	f8c8 6000 	str.w	r6, [r8]
   84ee0:	b319      	cbz	r1, 84f2a <__sflush_r+0xba>
   84ee2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84ee6:	4299      	cmp	r1, r3
   84ee8:	d002      	beq.n	84ef0 <__sflush_r+0x80>
   84eea:	4640      	mov	r0, r8
   84eec:	f000 f9da 	bl	852a4 <_free_r>
   84ef0:	2000      	movs	r0, #0
   84ef2:	6328      	str	r0, [r5, #48]	; 0x30
   84ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ef8:	692e      	ldr	r6, [r5, #16]
   84efa:	b1b6      	cbz	r6, 84f2a <__sflush_r+0xba>
   84efc:	0791      	lsls	r1, r2, #30
   84efe:	bf18      	it	ne
   84f00:	2300      	movne	r3, #0
   84f02:	682c      	ldr	r4, [r5, #0]
   84f04:	bf08      	it	eq
   84f06:	696b      	ldreq	r3, [r5, #20]
   84f08:	602e      	str	r6, [r5, #0]
   84f0a:	1ba4      	subs	r4, r4, r6
   84f0c:	60ab      	str	r3, [r5, #8]
   84f0e:	e00a      	b.n	84f26 <__sflush_r+0xb6>
   84f10:	4623      	mov	r3, r4
   84f12:	4632      	mov	r2, r6
   84f14:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84f16:	69e9      	ldr	r1, [r5, #28]
   84f18:	4640      	mov	r0, r8
   84f1a:	47b8      	blx	r7
   84f1c:	2800      	cmp	r0, #0
   84f1e:	eba4 0400 	sub.w	r4, r4, r0
   84f22:	4406      	add	r6, r0
   84f24:	dd04      	ble.n	84f30 <__sflush_r+0xc0>
   84f26:	2c00      	cmp	r4, #0
   84f28:	dcf2      	bgt.n	84f10 <__sflush_r+0xa0>
   84f2a:	2000      	movs	r0, #0
   84f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f30:	89ab      	ldrh	r3, [r5, #12]
   84f32:	f04f 30ff 	mov.w	r0, #4294967295
   84f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84f3a:	81ab      	strh	r3, [r5, #12]
   84f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84f40:	f8d8 4000 	ldr.w	r4, [r8]
   84f44:	2c1d      	cmp	r4, #29
   84f46:	d8f3      	bhi.n	84f30 <__sflush_r+0xc0>
   84f48:	4b16      	ldr	r3, [pc, #88]	; (84fa4 <__sflush_r+0x134>)
   84f4a:	40e3      	lsrs	r3, r4
   84f4c:	43db      	mvns	r3, r3
   84f4e:	f013 0301 	ands.w	r3, r3, #1
   84f52:	d1ed      	bne.n	84f30 <__sflush_r+0xc0>
   84f54:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   84f58:	6929      	ldr	r1, [r5, #16]
   84f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   84f5e:	81aa      	strh	r2, [r5, #12]
   84f60:	04d2      	lsls	r2, r2, #19
   84f62:	606b      	str	r3, [r5, #4]
   84f64:	6029      	str	r1, [r5, #0]
   84f66:	d5b8      	bpl.n	84eda <__sflush_r+0x6a>
   84f68:	2c00      	cmp	r4, #0
   84f6a:	d1b6      	bne.n	84eda <__sflush_r+0x6a>
   84f6c:	6528      	str	r0, [r5, #80]	; 0x50
   84f6e:	e7b4      	b.n	84eda <__sflush_r+0x6a>
   84f70:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84f72:	2a00      	cmp	r2, #0
   84f74:	dc8b      	bgt.n	84e8e <__sflush_r+0x1e>
   84f76:	e7d8      	b.n	84f2a <__sflush_r+0xba>
   84f78:	2301      	movs	r3, #1
   84f7a:	69e9      	ldr	r1, [r5, #28]
   84f7c:	4640      	mov	r0, r8
   84f7e:	47a0      	blx	r4
   84f80:	1c43      	adds	r3, r0, #1
   84f82:	4602      	mov	r2, r0
   84f84:	d002      	beq.n	84f8c <__sflush_r+0x11c>
   84f86:	89ab      	ldrh	r3, [r5, #12]
   84f88:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84f8a:	e78d      	b.n	84ea8 <__sflush_r+0x38>
   84f8c:	f8d8 3000 	ldr.w	r3, [r8]
   84f90:	2b00      	cmp	r3, #0
   84f92:	d0f8      	beq.n	84f86 <__sflush_r+0x116>
   84f94:	2b1d      	cmp	r3, #29
   84f96:	d001      	beq.n	84f9c <__sflush_r+0x12c>
   84f98:	2b16      	cmp	r3, #22
   84f9a:	d1c9      	bne.n	84f30 <__sflush_r+0xc0>
   84f9c:	f8c8 6000 	str.w	r6, [r8]
   84fa0:	e7c3      	b.n	84f2a <__sflush_r+0xba>
   84fa2:	bf00      	nop
   84fa4:	20400001 	.word	0x20400001

00084fa8 <_fflush_r>:
   84fa8:	b538      	push	{r3, r4, r5, lr}
   84faa:	460d      	mov	r5, r1
   84fac:	4604      	mov	r4, r0
   84fae:	b108      	cbz	r0, 84fb4 <_fflush_r+0xc>
   84fb0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84fb2:	b1bb      	cbz	r3, 84fe4 <_fflush_r+0x3c>
   84fb4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   84fb8:	b188      	cbz	r0, 84fde <_fflush_r+0x36>
   84fba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   84fbc:	07db      	lsls	r3, r3, #31
   84fbe:	d401      	bmi.n	84fc4 <_fflush_r+0x1c>
   84fc0:	0581      	lsls	r1, r0, #22
   84fc2:	d517      	bpl.n	84ff4 <_fflush_r+0x4c>
   84fc4:	4620      	mov	r0, r4
   84fc6:	4629      	mov	r1, r5
   84fc8:	f7ff ff52 	bl	84e70 <__sflush_r>
   84fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   84fce:	4604      	mov	r4, r0
   84fd0:	07da      	lsls	r2, r3, #31
   84fd2:	d402      	bmi.n	84fda <_fflush_r+0x32>
   84fd4:	89ab      	ldrh	r3, [r5, #12]
   84fd6:	059b      	lsls	r3, r3, #22
   84fd8:	d507      	bpl.n	84fea <_fflush_r+0x42>
   84fda:	4620      	mov	r0, r4
   84fdc:	bd38      	pop	{r3, r4, r5, pc}
   84fde:	4604      	mov	r4, r0
   84fe0:	4620      	mov	r0, r4
   84fe2:	bd38      	pop	{r3, r4, r5, pc}
   84fe4:	f000 f838 	bl	85058 <__sinit>
   84fe8:	e7e4      	b.n	84fb4 <_fflush_r+0xc>
   84fea:	6da8      	ldr	r0, [r5, #88]	; 0x58
   84fec:	f000 fbf6 	bl	857dc <__retarget_lock_release_recursive>
   84ff0:	4620      	mov	r0, r4
   84ff2:	bd38      	pop	{r3, r4, r5, pc}
   84ff4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   84ff6:	f000 fbef 	bl	857d8 <__retarget_lock_acquire_recursive>
   84ffa:	e7e3      	b.n	84fc4 <_fflush_r+0x1c>

00084ffc <_cleanup_r>:
   84ffc:	4901      	ldr	r1, [pc, #4]	; (85004 <_cleanup_r+0x8>)
   84ffe:	f000 bbb1 	b.w	85764 <_fwalk_reent>
   85002:	bf00      	nop
   85004:	00086605 	.word	0x00086605

00085008 <std.isra.0>:
   85008:	2300      	movs	r3, #0
   8500a:	b510      	push	{r4, lr}
   8500c:	4604      	mov	r4, r0
   8500e:	8181      	strh	r1, [r0, #12]
   85010:	81c2      	strh	r2, [r0, #14]
   85012:	6003      	str	r3, [r0, #0]
   85014:	6043      	str	r3, [r0, #4]
   85016:	6083      	str	r3, [r0, #8]
   85018:	6643      	str	r3, [r0, #100]	; 0x64
   8501a:	6103      	str	r3, [r0, #16]
   8501c:	6143      	str	r3, [r0, #20]
   8501e:	6183      	str	r3, [r0, #24]
   85020:	4619      	mov	r1, r3
   85022:	2208      	movs	r2, #8
   85024:	305c      	adds	r0, #92	; 0x5c
   85026:	f7fe fe69 	bl	83cfc <memset>
   8502a:	4807      	ldr	r0, [pc, #28]	; (85048 <std.isra.0+0x40>)
   8502c:	4907      	ldr	r1, [pc, #28]	; (8504c <std.isra.0+0x44>)
   8502e:	4a08      	ldr	r2, [pc, #32]	; (85050 <std.isra.0+0x48>)
   85030:	4b08      	ldr	r3, [pc, #32]	; (85054 <std.isra.0+0x4c>)
   85032:	6220      	str	r0, [r4, #32]
   85034:	61e4      	str	r4, [r4, #28]
   85036:	6261      	str	r1, [r4, #36]	; 0x24
   85038:	62a2      	str	r2, [r4, #40]	; 0x28
   8503a:	62e3      	str	r3, [r4, #44]	; 0x2c
   8503c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   85040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85044:	f000 bbc4 	b.w	857d0 <__retarget_lock_init_recursive>
   85048:	0008634d 	.word	0x0008634d
   8504c:	00086371 	.word	0x00086371
   85050:	000863ad 	.word	0x000863ad
   85054:	000863cd 	.word	0x000863cd

00085058 <__sinit>:
   85058:	b510      	push	{r4, lr}
   8505a:	4604      	mov	r4, r0
   8505c:	4814      	ldr	r0, [pc, #80]	; (850b0 <__sinit+0x58>)
   8505e:	f000 fbbb 	bl	857d8 <__retarget_lock_acquire_recursive>
   85062:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   85064:	b9fa      	cbnz	r2, 850a6 <__sinit+0x4e>
   85066:	2003      	movs	r0, #3
   85068:	4912      	ldr	r1, [pc, #72]	; (850b4 <__sinit+0x5c>)
   8506a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8506e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   85072:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   85076:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8507a:	63e1      	str	r1, [r4, #60]	; 0x3c
   8507c:	6860      	ldr	r0, [r4, #4]
   8507e:	2104      	movs	r1, #4
   85080:	f7ff ffc2 	bl	85008 <std.isra.0>
   85084:	68a0      	ldr	r0, [r4, #8]
   85086:	2201      	movs	r2, #1
   85088:	2109      	movs	r1, #9
   8508a:	f7ff ffbd 	bl	85008 <std.isra.0>
   8508e:	68e0      	ldr	r0, [r4, #12]
   85090:	2202      	movs	r2, #2
   85092:	2112      	movs	r1, #18
   85094:	f7ff ffb8 	bl	85008 <std.isra.0>
   85098:	2301      	movs	r3, #1
   8509a:	4805      	ldr	r0, [pc, #20]	; (850b0 <__sinit+0x58>)
   8509c:	63a3      	str	r3, [r4, #56]	; 0x38
   8509e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   850a2:	f000 bb9b 	b.w	857dc <__retarget_lock_release_recursive>
   850a6:	4802      	ldr	r0, [pc, #8]	; (850b0 <__sinit+0x58>)
   850a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   850ac:	f000 bb96 	b.w	857dc <__retarget_lock_release_recursive>
   850b0:	2007ae6c 	.word	0x2007ae6c
   850b4:	00084ffd 	.word	0x00084ffd

000850b8 <__sfp_lock_acquire>:
   850b8:	4801      	ldr	r0, [pc, #4]	; (850c0 <__sfp_lock_acquire+0x8>)
   850ba:	f000 bb8d 	b.w	857d8 <__retarget_lock_acquire_recursive>
   850be:	bf00      	nop
   850c0:	2007ae80 	.word	0x2007ae80

000850c4 <__sfp_lock_release>:
   850c4:	4801      	ldr	r0, [pc, #4]	; (850cc <__sfp_lock_release+0x8>)
   850c6:	f000 bb89 	b.w	857dc <__retarget_lock_release_recursive>
   850ca:	bf00      	nop
   850cc:	2007ae80 	.word	0x2007ae80

000850d0 <__libc_fini_array>:
   850d0:	b538      	push	{r3, r4, r5, lr}
   850d2:	4c0a      	ldr	r4, [pc, #40]	; (850fc <__libc_fini_array+0x2c>)
   850d4:	4d0a      	ldr	r5, [pc, #40]	; (85100 <__libc_fini_array+0x30>)
   850d6:	1b64      	subs	r4, r4, r5
   850d8:	10a4      	asrs	r4, r4, #2
   850da:	d00a      	beq.n	850f2 <__libc_fini_array+0x22>
   850dc:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   850e0:	3b01      	subs	r3, #1
   850e2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   850e6:	3c01      	subs	r4, #1
   850e8:	f855 3904 	ldr.w	r3, [r5], #-4
   850ec:	4798      	blx	r3
   850ee:	2c00      	cmp	r4, #0
   850f0:	d1f9      	bne.n	850e6 <__libc_fini_array+0x16>
   850f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   850f6:	f001 be01 	b.w	86cfc <_fini>
   850fa:	bf00      	nop
   850fc:	00086d0c 	.word	0x00086d0c
   85100:	00086d08 	.word	0x00086d08

00085104 <__fputwc>:
   85104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85108:	b083      	sub	sp, #12
   8510a:	4607      	mov	r7, r0
   8510c:	4688      	mov	r8, r1
   8510e:	4614      	mov	r4, r2
   85110:	f000 fb50 	bl	857b4 <__locale_mb_cur_max>
   85114:	2801      	cmp	r0, #1
   85116:	d033      	beq.n	85180 <__fputwc+0x7c>
   85118:	4642      	mov	r2, r8
   8511a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8511e:	a901      	add	r1, sp, #4
   85120:	4638      	mov	r0, r7
   85122:	f001 f9af 	bl	86484 <_wcrtomb_r>
   85126:	1c42      	adds	r2, r0, #1
   85128:	4606      	mov	r6, r0
   8512a:	d022      	beq.n	85172 <__fputwc+0x6e>
   8512c:	b390      	cbz	r0, 85194 <__fputwc+0x90>
   8512e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85132:	2500      	movs	r5, #0
   85134:	f10d 0904 	add.w	r9, sp, #4
   85138:	e008      	b.n	8514c <__fputwc+0x48>
   8513a:	6823      	ldr	r3, [r4, #0]
   8513c:	1c5a      	adds	r2, r3, #1
   8513e:	6022      	str	r2, [r4, #0]
   85140:	7019      	strb	r1, [r3, #0]
   85142:	3501      	adds	r5, #1
   85144:	42b5      	cmp	r5, r6
   85146:	d225      	bcs.n	85194 <__fputwc+0x90>
   85148:	f815 1009 	ldrb.w	r1, [r5, r9]
   8514c:	68a3      	ldr	r3, [r4, #8]
   8514e:	3b01      	subs	r3, #1
   85150:	2b00      	cmp	r3, #0
   85152:	60a3      	str	r3, [r4, #8]
   85154:	daf1      	bge.n	8513a <__fputwc+0x36>
   85156:	69a2      	ldr	r2, [r4, #24]
   85158:	4293      	cmp	r3, r2
   8515a:	db01      	blt.n	85160 <__fputwc+0x5c>
   8515c:	290a      	cmp	r1, #10
   8515e:	d1ec      	bne.n	8513a <__fputwc+0x36>
   85160:	4622      	mov	r2, r4
   85162:	4638      	mov	r0, r7
   85164:	f001 f936 	bl	863d4 <__swbuf_r>
   85168:	1c43      	adds	r3, r0, #1
   8516a:	d1ea      	bne.n	85142 <__fputwc+0x3e>
   8516c:	b003      	add	sp, #12
   8516e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85172:	89a3      	ldrh	r3, [r4, #12]
   85174:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85178:	81a3      	strh	r3, [r4, #12]
   8517a:	b003      	add	sp, #12
   8517c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   85180:	f108 33ff 	add.w	r3, r8, #4294967295
   85184:	2bfe      	cmp	r3, #254	; 0xfe
   85186:	d8c7      	bhi.n	85118 <__fputwc+0x14>
   85188:	fa5f f188 	uxtb.w	r1, r8
   8518c:	4606      	mov	r6, r0
   8518e:	f88d 1004 	strb.w	r1, [sp, #4]
   85192:	e7ce      	b.n	85132 <__fputwc+0x2e>
   85194:	4640      	mov	r0, r8
   85196:	b003      	add	sp, #12
   85198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008519c <_fputwc_r>:
   8519c:	b530      	push	{r4, r5, lr}
   8519e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   851a0:	4614      	mov	r4, r2
   851a2:	f013 0f01 	tst.w	r3, #1
   851a6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   851aa:	b083      	sub	sp, #12
   851ac:	4605      	mov	r5, r0
   851ae:	b29a      	uxth	r2, r3
   851b0:	d101      	bne.n	851b6 <_fputwc_r+0x1a>
   851b2:	0590      	lsls	r0, r2, #22
   851b4:	d51c      	bpl.n	851f0 <_fputwc_r+0x54>
   851b6:	0490      	lsls	r0, r2, #18
   851b8:	d406      	bmi.n	851c8 <_fputwc_r+0x2c>
   851ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
   851bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   851c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   851c4:	81a3      	strh	r3, [r4, #12]
   851c6:	6662      	str	r2, [r4, #100]	; 0x64
   851c8:	4628      	mov	r0, r5
   851ca:	4622      	mov	r2, r4
   851cc:	f7ff ff9a 	bl	85104 <__fputwc>
   851d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   851d2:	4605      	mov	r5, r0
   851d4:	07da      	lsls	r2, r3, #31
   851d6:	d402      	bmi.n	851de <_fputwc_r+0x42>
   851d8:	89a3      	ldrh	r3, [r4, #12]
   851da:	059b      	lsls	r3, r3, #22
   851dc:	d502      	bpl.n	851e4 <_fputwc_r+0x48>
   851de:	4628      	mov	r0, r5
   851e0:	b003      	add	sp, #12
   851e2:	bd30      	pop	{r4, r5, pc}
   851e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   851e6:	f000 faf9 	bl	857dc <__retarget_lock_release_recursive>
   851ea:	4628      	mov	r0, r5
   851ec:	b003      	add	sp, #12
   851ee:	bd30      	pop	{r4, r5, pc}
   851f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   851f2:	9101      	str	r1, [sp, #4]
   851f4:	f000 faf0 	bl	857d8 <__retarget_lock_acquire_recursive>
   851f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   851fc:	9901      	ldr	r1, [sp, #4]
   851fe:	b29a      	uxth	r2, r3
   85200:	e7d9      	b.n	851b6 <_fputwc_r+0x1a>
   85202:	bf00      	nop

00085204 <_malloc_trim_r>:
   85204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85206:	460c      	mov	r4, r1
   85208:	4f23      	ldr	r7, [pc, #140]	; (85298 <_malloc_trim_r+0x94>)
   8520a:	4606      	mov	r6, r0
   8520c:	f000 feca 	bl	85fa4 <__malloc_lock>
   85210:	68bb      	ldr	r3, [r7, #8]
   85212:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   85216:	685d      	ldr	r5, [r3, #4]
   85218:	310f      	adds	r1, #15
   8521a:	f025 0503 	bic.w	r5, r5, #3
   8521e:	4429      	add	r1, r5
   85220:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85224:	f021 010f 	bic.w	r1, r1, #15
   85228:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8522c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85230:	db07      	blt.n	85242 <_malloc_trim_r+0x3e>
   85232:	2100      	movs	r1, #0
   85234:	4630      	mov	r0, r6
   85236:	f001 f877 	bl	86328 <_sbrk_r>
   8523a:	68bb      	ldr	r3, [r7, #8]
   8523c:	442b      	add	r3, r5
   8523e:	4298      	cmp	r0, r3
   85240:	d004      	beq.n	8524c <_malloc_trim_r+0x48>
   85242:	4630      	mov	r0, r6
   85244:	f000 feb4 	bl	85fb0 <__malloc_unlock>
   85248:	2000      	movs	r0, #0
   8524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8524c:	4261      	negs	r1, r4
   8524e:	4630      	mov	r0, r6
   85250:	f001 f86a 	bl	86328 <_sbrk_r>
   85254:	3001      	adds	r0, #1
   85256:	d00d      	beq.n	85274 <_malloc_trim_r+0x70>
   85258:	4b10      	ldr	r3, [pc, #64]	; (8529c <_malloc_trim_r+0x98>)
   8525a:	68ba      	ldr	r2, [r7, #8]
   8525c:	6819      	ldr	r1, [r3, #0]
   8525e:	1b2d      	subs	r5, r5, r4
   85260:	f045 0501 	orr.w	r5, r5, #1
   85264:	4630      	mov	r0, r6
   85266:	1b09      	subs	r1, r1, r4
   85268:	6055      	str	r5, [r2, #4]
   8526a:	6019      	str	r1, [r3, #0]
   8526c:	f000 fea0 	bl	85fb0 <__malloc_unlock>
   85270:	2001      	movs	r0, #1
   85272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85274:	2100      	movs	r1, #0
   85276:	4630      	mov	r0, r6
   85278:	f001 f856 	bl	86328 <_sbrk_r>
   8527c:	68ba      	ldr	r2, [r7, #8]
   8527e:	1a83      	subs	r3, r0, r2
   85280:	2b0f      	cmp	r3, #15
   85282:	ddde      	ble.n	85242 <_malloc_trim_r+0x3e>
   85284:	4c06      	ldr	r4, [pc, #24]	; (852a0 <_malloc_trim_r+0x9c>)
   85286:	4905      	ldr	r1, [pc, #20]	; (8529c <_malloc_trim_r+0x98>)
   85288:	6824      	ldr	r4, [r4, #0]
   8528a:	f043 0301 	orr.w	r3, r3, #1
   8528e:	1b00      	subs	r0, r0, r4
   85290:	6053      	str	r3, [r2, #4]
   85292:	6008      	str	r0, [r1, #0]
   85294:	e7d5      	b.n	85242 <_malloc_trim_r+0x3e>
   85296:	bf00      	nop
   85298:	20070728 	.word	0x20070728
   8529c:	2007add0 	.word	0x2007add0
   852a0:	20070b30 	.word	0x20070b30

000852a4 <_free_r>:
   852a4:	2900      	cmp	r1, #0
   852a6:	d044      	beq.n	85332 <_free_r+0x8e>
   852a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   852ac:	460d      	mov	r5, r1
   852ae:	4680      	mov	r8, r0
   852b0:	f000 fe78 	bl	85fa4 <__malloc_lock>
   852b4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   852b8:	4969      	ldr	r1, [pc, #420]	; (85460 <_free_r+0x1bc>)
   852ba:	f1a5 0408 	sub.w	r4, r5, #8
   852be:	f027 0301 	bic.w	r3, r7, #1
   852c2:	18e2      	adds	r2, r4, r3
   852c4:	688e      	ldr	r6, [r1, #8]
   852c6:	6850      	ldr	r0, [r2, #4]
   852c8:	42b2      	cmp	r2, r6
   852ca:	f020 0003 	bic.w	r0, r0, #3
   852ce:	d05e      	beq.n	8538e <_free_r+0xea>
   852d0:	07fe      	lsls	r6, r7, #31
   852d2:	6050      	str	r0, [r2, #4]
   852d4:	d40b      	bmi.n	852ee <_free_r+0x4a>
   852d6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   852da:	f101 0e08 	add.w	lr, r1, #8
   852de:	1be4      	subs	r4, r4, r7
   852e0:	68a5      	ldr	r5, [r4, #8]
   852e2:	443b      	add	r3, r7
   852e4:	4575      	cmp	r5, lr
   852e6:	d06d      	beq.n	853c4 <_free_r+0x120>
   852e8:	68e7      	ldr	r7, [r4, #12]
   852ea:	60ef      	str	r7, [r5, #12]
   852ec:	60bd      	str	r5, [r7, #8]
   852ee:	1815      	adds	r5, r2, r0
   852f0:	686d      	ldr	r5, [r5, #4]
   852f2:	07ed      	lsls	r5, r5, #31
   852f4:	d53e      	bpl.n	85374 <_free_r+0xd0>
   852f6:	f043 0201 	orr.w	r2, r3, #1
   852fa:	6062      	str	r2, [r4, #4]
   852fc:	50e3      	str	r3, [r4, r3]
   852fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85302:	d217      	bcs.n	85334 <_free_r+0x90>
   85304:	2201      	movs	r2, #1
   85306:	08db      	lsrs	r3, r3, #3
   85308:	1098      	asrs	r0, r3, #2
   8530a:	684d      	ldr	r5, [r1, #4]
   8530c:	4413      	add	r3, r2
   8530e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   85312:	4082      	lsls	r2, r0
   85314:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   85318:	432a      	orrs	r2, r5
   8531a:	3808      	subs	r0, #8
   8531c:	60e0      	str	r0, [r4, #12]
   8531e:	60a7      	str	r7, [r4, #8]
   85320:	604a      	str	r2, [r1, #4]
   85322:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85326:	60fc      	str	r4, [r7, #12]
   85328:	4640      	mov	r0, r8
   8532a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8532e:	f000 be3f 	b.w	85fb0 <__malloc_unlock>
   85332:	4770      	bx	lr
   85334:	0a5a      	lsrs	r2, r3, #9
   85336:	2a04      	cmp	r2, #4
   85338:	d852      	bhi.n	853e0 <_free_r+0x13c>
   8533a:	099a      	lsrs	r2, r3, #6
   8533c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   85340:	00ff      	lsls	r7, r7, #3
   85342:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85346:	19c8      	adds	r0, r1, r7
   85348:	59ca      	ldr	r2, [r1, r7]
   8534a:	3808      	subs	r0, #8
   8534c:	4290      	cmp	r0, r2
   8534e:	d04f      	beq.n	853f0 <_free_r+0x14c>
   85350:	6851      	ldr	r1, [r2, #4]
   85352:	f021 0103 	bic.w	r1, r1, #3
   85356:	428b      	cmp	r3, r1
   85358:	d232      	bcs.n	853c0 <_free_r+0x11c>
   8535a:	6892      	ldr	r2, [r2, #8]
   8535c:	4290      	cmp	r0, r2
   8535e:	d1f7      	bne.n	85350 <_free_r+0xac>
   85360:	68c3      	ldr	r3, [r0, #12]
   85362:	60a0      	str	r0, [r4, #8]
   85364:	60e3      	str	r3, [r4, #12]
   85366:	609c      	str	r4, [r3, #8]
   85368:	60c4      	str	r4, [r0, #12]
   8536a:	4640      	mov	r0, r8
   8536c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85370:	f000 be1e 	b.w	85fb0 <__malloc_unlock>
   85374:	6895      	ldr	r5, [r2, #8]
   85376:	4f3b      	ldr	r7, [pc, #236]	; (85464 <_free_r+0x1c0>)
   85378:	4403      	add	r3, r0
   8537a:	42bd      	cmp	r5, r7
   8537c:	d040      	beq.n	85400 <_free_r+0x15c>
   8537e:	68d0      	ldr	r0, [r2, #12]
   85380:	f043 0201 	orr.w	r2, r3, #1
   85384:	60e8      	str	r0, [r5, #12]
   85386:	6085      	str	r5, [r0, #8]
   85388:	6062      	str	r2, [r4, #4]
   8538a:	50e3      	str	r3, [r4, r3]
   8538c:	e7b7      	b.n	852fe <_free_r+0x5a>
   8538e:	07ff      	lsls	r7, r7, #31
   85390:	4403      	add	r3, r0
   85392:	d407      	bmi.n	853a4 <_free_r+0x100>
   85394:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85398:	1b64      	subs	r4, r4, r5
   8539a:	68e2      	ldr	r2, [r4, #12]
   8539c:	68a0      	ldr	r0, [r4, #8]
   8539e:	442b      	add	r3, r5
   853a0:	60c2      	str	r2, [r0, #12]
   853a2:	6090      	str	r0, [r2, #8]
   853a4:	4a30      	ldr	r2, [pc, #192]	; (85468 <_free_r+0x1c4>)
   853a6:	f043 0001 	orr.w	r0, r3, #1
   853aa:	6812      	ldr	r2, [r2, #0]
   853ac:	6060      	str	r0, [r4, #4]
   853ae:	4293      	cmp	r3, r2
   853b0:	608c      	str	r4, [r1, #8]
   853b2:	d3b9      	bcc.n	85328 <_free_r+0x84>
   853b4:	4b2d      	ldr	r3, [pc, #180]	; (8546c <_free_r+0x1c8>)
   853b6:	4640      	mov	r0, r8
   853b8:	6819      	ldr	r1, [r3, #0]
   853ba:	f7ff ff23 	bl	85204 <_malloc_trim_r>
   853be:	e7b3      	b.n	85328 <_free_r+0x84>
   853c0:	4610      	mov	r0, r2
   853c2:	e7cd      	b.n	85360 <_free_r+0xbc>
   853c4:	1811      	adds	r1, r2, r0
   853c6:	6849      	ldr	r1, [r1, #4]
   853c8:	07c9      	lsls	r1, r1, #31
   853ca:	d444      	bmi.n	85456 <_free_r+0x1b2>
   853cc:	6891      	ldr	r1, [r2, #8]
   853ce:	4403      	add	r3, r0
   853d0:	68d2      	ldr	r2, [r2, #12]
   853d2:	f043 0001 	orr.w	r0, r3, #1
   853d6:	60ca      	str	r2, [r1, #12]
   853d8:	6091      	str	r1, [r2, #8]
   853da:	6060      	str	r0, [r4, #4]
   853dc:	50e3      	str	r3, [r4, r3]
   853de:	e7a3      	b.n	85328 <_free_r+0x84>
   853e0:	2a14      	cmp	r2, #20
   853e2:	d816      	bhi.n	85412 <_free_r+0x16e>
   853e4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   853e8:	00ff      	lsls	r7, r7, #3
   853ea:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   853ee:	e7aa      	b.n	85346 <_free_r+0xa2>
   853f0:	2301      	movs	r3, #1
   853f2:	10aa      	asrs	r2, r5, #2
   853f4:	684d      	ldr	r5, [r1, #4]
   853f6:	4093      	lsls	r3, r2
   853f8:	432b      	orrs	r3, r5
   853fa:	604b      	str	r3, [r1, #4]
   853fc:	4603      	mov	r3, r0
   853fe:	e7b0      	b.n	85362 <_free_r+0xbe>
   85400:	f043 0201 	orr.w	r2, r3, #1
   85404:	614c      	str	r4, [r1, #20]
   85406:	610c      	str	r4, [r1, #16]
   85408:	60e5      	str	r5, [r4, #12]
   8540a:	60a5      	str	r5, [r4, #8]
   8540c:	6062      	str	r2, [r4, #4]
   8540e:	50e3      	str	r3, [r4, r3]
   85410:	e78a      	b.n	85328 <_free_r+0x84>
   85412:	2a54      	cmp	r2, #84	; 0x54
   85414:	d806      	bhi.n	85424 <_free_r+0x180>
   85416:	0b1a      	lsrs	r2, r3, #12
   85418:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8541c:	00ff      	lsls	r7, r7, #3
   8541e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85422:	e790      	b.n	85346 <_free_r+0xa2>
   85424:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85428:	d806      	bhi.n	85438 <_free_r+0x194>
   8542a:	0bda      	lsrs	r2, r3, #15
   8542c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85430:	00ff      	lsls	r7, r7, #3
   85432:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85436:	e786      	b.n	85346 <_free_r+0xa2>
   85438:	f240 5054 	movw	r0, #1364	; 0x554
   8543c:	4282      	cmp	r2, r0
   8543e:	d806      	bhi.n	8544e <_free_r+0x1aa>
   85440:	0c9a      	lsrs	r2, r3, #18
   85442:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85446:	00ff      	lsls	r7, r7, #3
   85448:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8544c:	e77b      	b.n	85346 <_free_r+0xa2>
   8544e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   85452:	257e      	movs	r5, #126	; 0x7e
   85454:	e777      	b.n	85346 <_free_r+0xa2>
   85456:	f043 0101 	orr.w	r1, r3, #1
   8545a:	6061      	str	r1, [r4, #4]
   8545c:	6013      	str	r3, [r2, #0]
   8545e:	e763      	b.n	85328 <_free_r+0x84>
   85460:	20070728 	.word	0x20070728
   85464:	20070730 	.word	0x20070730
   85468:	20070b34 	.word	0x20070b34
   8546c:	2007ae00 	.word	0x2007ae00

00085470 <__sfvwrite_r>:
   85470:	6893      	ldr	r3, [r2, #8]
   85472:	2b00      	cmp	r3, #0
   85474:	d071      	beq.n	8555a <__sfvwrite_r+0xea>
   85476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8547a:	898b      	ldrh	r3, [r1, #12]
   8547c:	b083      	sub	sp, #12
   8547e:	460c      	mov	r4, r1
   85480:	0719      	lsls	r1, r3, #28
   85482:	9000      	str	r0, [sp, #0]
   85484:	4616      	mov	r6, r2
   85486:	d525      	bpl.n	854d4 <__sfvwrite_r+0x64>
   85488:	6922      	ldr	r2, [r4, #16]
   8548a:	b31a      	cbz	r2, 854d4 <__sfvwrite_r+0x64>
   8548c:	f013 0002 	ands.w	r0, r3, #2
   85490:	6835      	ldr	r5, [r6, #0]
   85492:	d02b      	beq.n	854ec <__sfvwrite_r+0x7c>
   85494:	f04f 0900 	mov.w	r9, #0
   85498:	46b0      	mov	r8, r6
   8549a:	464f      	mov	r7, r9
   8549c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 85760 <__sfvwrite_r+0x2f0>
   854a0:	2f00      	cmp	r7, #0
   854a2:	d055      	beq.n	85550 <__sfvwrite_r+0xe0>
   854a4:	4557      	cmp	r7, sl
   854a6:	463b      	mov	r3, r7
   854a8:	464a      	mov	r2, r9
   854aa:	bf28      	it	cs
   854ac:	4653      	movcs	r3, sl
   854ae:	69e1      	ldr	r1, [r4, #28]
   854b0:	9800      	ldr	r0, [sp, #0]
   854b2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   854b4:	47b0      	blx	r6
   854b6:	2800      	cmp	r0, #0
   854b8:	dd56      	ble.n	85568 <__sfvwrite_r+0xf8>
   854ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
   854be:	4481      	add	r9, r0
   854c0:	1a1b      	subs	r3, r3, r0
   854c2:	1a3f      	subs	r7, r7, r0
   854c4:	f8c8 3008 	str.w	r3, [r8, #8]
   854c8:	2b00      	cmp	r3, #0
   854ca:	d1e9      	bne.n	854a0 <__sfvwrite_r+0x30>
   854cc:	2000      	movs	r0, #0
   854ce:	b003      	add	sp, #12
   854d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   854d4:	4621      	mov	r1, r4
   854d6:	9800      	ldr	r0, [sp, #0]
   854d8:	f7ff fc56 	bl	84d88 <__swsetup_r>
   854dc:	2800      	cmp	r0, #0
   854de:	f040 8135 	bne.w	8574c <__sfvwrite_r+0x2dc>
   854e2:	89a3      	ldrh	r3, [r4, #12]
   854e4:	6835      	ldr	r5, [r6, #0]
   854e6:	f013 0002 	ands.w	r0, r3, #2
   854ea:	d1d3      	bne.n	85494 <__sfvwrite_r+0x24>
   854ec:	f013 0901 	ands.w	r9, r3, #1
   854f0:	d144      	bne.n	8557c <__sfvwrite_r+0x10c>
   854f2:	464f      	mov	r7, r9
   854f4:	9601      	str	r6, [sp, #4]
   854f6:	b337      	cbz	r7, 85546 <__sfvwrite_r+0xd6>
   854f8:	059a      	lsls	r2, r3, #22
   854fa:	f8d4 8008 	ldr.w	r8, [r4, #8]
   854fe:	f140 8085 	bpl.w	8560c <__sfvwrite_r+0x19c>
   85502:	4547      	cmp	r7, r8
   85504:	46c3      	mov	fp, r8
   85506:	f0c0 80ad 	bcc.w	85664 <__sfvwrite_r+0x1f4>
   8550a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8550e:	f040 80ae 	bne.w	8566e <__sfvwrite_r+0x1fe>
   85512:	46ba      	mov	sl, r7
   85514:	6820      	ldr	r0, [r4, #0]
   85516:	465a      	mov	r2, fp
   85518:	4649      	mov	r1, r9
   8551a:	f000 fcdf 	bl	85edc <memmove>
   8551e:	68a2      	ldr	r2, [r4, #8]
   85520:	6823      	ldr	r3, [r4, #0]
   85522:	eba2 0208 	sub.w	r2, r2, r8
   85526:	445b      	add	r3, fp
   85528:	60a2      	str	r2, [r4, #8]
   8552a:	6023      	str	r3, [r4, #0]
   8552c:	9a01      	ldr	r2, [sp, #4]
   8552e:	44d1      	add	r9, sl
   85530:	6893      	ldr	r3, [r2, #8]
   85532:	eba7 070a 	sub.w	r7, r7, sl
   85536:	eba3 030a 	sub.w	r3, r3, sl
   8553a:	6093      	str	r3, [r2, #8]
   8553c:	2b00      	cmp	r3, #0
   8553e:	d0c5      	beq.n	854cc <__sfvwrite_r+0x5c>
   85540:	89a3      	ldrh	r3, [r4, #12]
   85542:	2f00      	cmp	r7, #0
   85544:	d1d8      	bne.n	854f8 <__sfvwrite_r+0x88>
   85546:	f8d5 9000 	ldr.w	r9, [r5]
   8554a:	686f      	ldr	r7, [r5, #4]
   8554c:	3508      	adds	r5, #8
   8554e:	e7d2      	b.n	854f6 <__sfvwrite_r+0x86>
   85550:	f8d5 9000 	ldr.w	r9, [r5]
   85554:	686f      	ldr	r7, [r5, #4]
   85556:	3508      	adds	r5, #8
   85558:	e7a2      	b.n	854a0 <__sfvwrite_r+0x30>
   8555a:	2000      	movs	r0, #0
   8555c:	4770      	bx	lr
   8555e:	4621      	mov	r1, r4
   85560:	9800      	ldr	r0, [sp, #0]
   85562:	f7ff fd21 	bl	84fa8 <_fflush_r>
   85566:	b378      	cbz	r0, 855c8 <__sfvwrite_r+0x158>
   85568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8556c:	f04f 30ff 	mov.w	r0, #4294967295
   85570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85574:	81a3      	strh	r3, [r4, #12]
   85576:	b003      	add	sp, #12
   85578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8557c:	4681      	mov	r9, r0
   8557e:	4633      	mov	r3, r6
   85580:	464e      	mov	r6, r9
   85582:	46a8      	mov	r8, r5
   85584:	469a      	mov	sl, r3
   85586:	464d      	mov	r5, r9
   85588:	b356      	cbz	r6, 855e0 <__sfvwrite_r+0x170>
   8558a:	2800      	cmp	r0, #0
   8558c:	d032      	beq.n	855f4 <__sfvwrite_r+0x184>
   8558e:	45b1      	cmp	r9, r6
   85590:	46cb      	mov	fp, r9
   85592:	bf28      	it	cs
   85594:	46b3      	movcs	fp, r6
   85596:	6820      	ldr	r0, [r4, #0]
   85598:	6923      	ldr	r3, [r4, #16]
   8559a:	465f      	mov	r7, fp
   8559c:	4298      	cmp	r0, r3
   8559e:	6962      	ldr	r2, [r4, #20]
   855a0:	d904      	bls.n	855ac <__sfvwrite_r+0x13c>
   855a2:	68a3      	ldr	r3, [r4, #8]
   855a4:	4413      	add	r3, r2
   855a6:	459b      	cmp	fp, r3
   855a8:	f300 80a8 	bgt.w	856fc <__sfvwrite_r+0x28c>
   855ac:	4593      	cmp	fp, r2
   855ae:	db4d      	blt.n	8564c <__sfvwrite_r+0x1dc>
   855b0:	4613      	mov	r3, r2
   855b2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   855b4:	462a      	mov	r2, r5
   855b6:	69e1      	ldr	r1, [r4, #28]
   855b8:	9800      	ldr	r0, [sp, #0]
   855ba:	47b8      	blx	r7
   855bc:	1e07      	subs	r7, r0, #0
   855be:	ddd3      	ble.n	85568 <__sfvwrite_r+0xf8>
   855c0:	ebb9 0907 	subs.w	r9, r9, r7
   855c4:	d0cb      	beq.n	8555e <__sfvwrite_r+0xee>
   855c6:	2001      	movs	r0, #1
   855c8:	f8da 3008 	ldr.w	r3, [sl, #8]
   855cc:	443d      	add	r5, r7
   855ce:	1bdb      	subs	r3, r3, r7
   855d0:	1bf6      	subs	r6, r6, r7
   855d2:	f8ca 3008 	str.w	r3, [sl, #8]
   855d6:	2b00      	cmp	r3, #0
   855d8:	f43f af78 	beq.w	854cc <__sfvwrite_r+0x5c>
   855dc:	2e00      	cmp	r6, #0
   855de:	d1d4      	bne.n	8558a <__sfvwrite_r+0x11a>
   855e0:	f108 0308 	add.w	r3, r8, #8
   855e4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   855e8:	4698      	mov	r8, r3
   855ea:	f853 5c08 	ldr.w	r5, [r3, #-8]
   855ee:	3308      	adds	r3, #8
   855f0:	2e00      	cmp	r6, #0
   855f2:	d0f7      	beq.n	855e4 <__sfvwrite_r+0x174>
   855f4:	4632      	mov	r2, r6
   855f6:	210a      	movs	r1, #10
   855f8:	4628      	mov	r0, r5
   855fa:	f000 fc29 	bl	85e50 <memchr>
   855fe:	2800      	cmp	r0, #0
   85600:	f000 80a1 	beq.w	85746 <__sfvwrite_r+0x2d6>
   85604:	3001      	adds	r0, #1
   85606:	eba0 0905 	sub.w	r9, r0, r5
   8560a:	e7c0      	b.n	8558e <__sfvwrite_r+0x11e>
   8560c:	6820      	ldr	r0, [r4, #0]
   8560e:	6923      	ldr	r3, [r4, #16]
   85610:	4298      	cmp	r0, r3
   85612:	d802      	bhi.n	8561a <__sfvwrite_r+0x1aa>
   85614:	6963      	ldr	r3, [r4, #20]
   85616:	429f      	cmp	r7, r3
   85618:	d25d      	bcs.n	856d6 <__sfvwrite_r+0x266>
   8561a:	45b8      	cmp	r8, r7
   8561c:	bf28      	it	cs
   8561e:	46b8      	movcs	r8, r7
   85620:	4649      	mov	r1, r9
   85622:	4642      	mov	r2, r8
   85624:	f000 fc5a 	bl	85edc <memmove>
   85628:	68a3      	ldr	r3, [r4, #8]
   8562a:	6822      	ldr	r2, [r4, #0]
   8562c:	eba3 0308 	sub.w	r3, r3, r8
   85630:	4442      	add	r2, r8
   85632:	60a3      	str	r3, [r4, #8]
   85634:	6022      	str	r2, [r4, #0]
   85636:	b10b      	cbz	r3, 8563c <__sfvwrite_r+0x1cc>
   85638:	46c2      	mov	sl, r8
   8563a:	e777      	b.n	8552c <__sfvwrite_r+0xbc>
   8563c:	4621      	mov	r1, r4
   8563e:	9800      	ldr	r0, [sp, #0]
   85640:	f7ff fcb2 	bl	84fa8 <_fflush_r>
   85644:	2800      	cmp	r0, #0
   85646:	d18f      	bne.n	85568 <__sfvwrite_r+0xf8>
   85648:	46c2      	mov	sl, r8
   8564a:	e76f      	b.n	8552c <__sfvwrite_r+0xbc>
   8564c:	465a      	mov	r2, fp
   8564e:	4629      	mov	r1, r5
   85650:	f000 fc44 	bl	85edc <memmove>
   85654:	68a2      	ldr	r2, [r4, #8]
   85656:	6823      	ldr	r3, [r4, #0]
   85658:	eba2 020b 	sub.w	r2, r2, fp
   8565c:	445b      	add	r3, fp
   8565e:	60a2      	str	r2, [r4, #8]
   85660:	6023      	str	r3, [r4, #0]
   85662:	e7ad      	b.n	855c0 <__sfvwrite_r+0x150>
   85664:	46b8      	mov	r8, r7
   85666:	46ba      	mov	sl, r7
   85668:	46bb      	mov	fp, r7
   8566a:	6820      	ldr	r0, [r4, #0]
   8566c:	e753      	b.n	85516 <__sfvwrite_r+0xa6>
   8566e:	6962      	ldr	r2, [r4, #20]
   85670:	6820      	ldr	r0, [r4, #0]
   85672:	6921      	ldr	r1, [r4, #16]
   85674:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   85678:	eba0 0a01 	sub.w	sl, r0, r1
   8567c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85680:	f10a 0001 	add.w	r0, sl, #1
   85684:	ea4f 0868 	mov.w	r8, r8, asr #1
   85688:	4438      	add	r0, r7
   8568a:	4540      	cmp	r0, r8
   8568c:	4642      	mov	r2, r8
   8568e:	bf84      	itt	hi
   85690:	4680      	movhi	r8, r0
   85692:	4642      	movhi	r2, r8
   85694:	055b      	lsls	r3, r3, #21
   85696:	d544      	bpl.n	85722 <__sfvwrite_r+0x2b2>
   85698:	4611      	mov	r1, r2
   8569a:	9800      	ldr	r0, [sp, #0]
   8569c:	f000 f920 	bl	858e0 <_malloc_r>
   856a0:	4683      	mov	fp, r0
   856a2:	2800      	cmp	r0, #0
   856a4:	d055      	beq.n	85752 <__sfvwrite_r+0x2e2>
   856a6:	4652      	mov	r2, sl
   856a8:	6921      	ldr	r1, [r4, #16]
   856aa:	f7fe fab1 	bl	83c10 <memcpy>
   856ae:	89a3      	ldrh	r3, [r4, #12]
   856b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   856b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   856b8:	81a3      	strh	r3, [r4, #12]
   856ba:	eb0b 000a 	add.w	r0, fp, sl
   856be:	eba8 030a 	sub.w	r3, r8, sl
   856c2:	f8c4 b010 	str.w	fp, [r4, #16]
   856c6:	f8c4 8014 	str.w	r8, [r4, #20]
   856ca:	6020      	str	r0, [r4, #0]
   856cc:	60a3      	str	r3, [r4, #8]
   856ce:	46b8      	mov	r8, r7
   856d0:	46ba      	mov	sl, r7
   856d2:	46bb      	mov	fp, r7
   856d4:	e71f      	b.n	85516 <__sfvwrite_r+0xa6>
   856d6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   856da:	42ba      	cmp	r2, r7
   856dc:	bf28      	it	cs
   856de:	463a      	movcs	r2, r7
   856e0:	fb92 f2f3 	sdiv	r2, r2, r3
   856e4:	69e1      	ldr	r1, [r4, #28]
   856e6:	fb03 f302 	mul.w	r3, r3, r2
   856ea:	9800      	ldr	r0, [sp, #0]
   856ec:	464a      	mov	r2, r9
   856ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
   856f0:	47b0      	blx	r6
   856f2:	f1b0 0a00 	subs.w	sl, r0, #0
   856f6:	f73f af19 	bgt.w	8552c <__sfvwrite_r+0xbc>
   856fa:	e735      	b.n	85568 <__sfvwrite_r+0xf8>
   856fc:	461a      	mov	r2, r3
   856fe:	4629      	mov	r1, r5
   85700:	9301      	str	r3, [sp, #4]
   85702:	f000 fbeb 	bl	85edc <memmove>
   85706:	6822      	ldr	r2, [r4, #0]
   85708:	9b01      	ldr	r3, [sp, #4]
   8570a:	4621      	mov	r1, r4
   8570c:	441a      	add	r2, r3
   8570e:	6022      	str	r2, [r4, #0]
   85710:	9800      	ldr	r0, [sp, #0]
   85712:	f7ff fc49 	bl	84fa8 <_fflush_r>
   85716:	9b01      	ldr	r3, [sp, #4]
   85718:	2800      	cmp	r0, #0
   8571a:	f47f af25 	bne.w	85568 <__sfvwrite_r+0xf8>
   8571e:	461f      	mov	r7, r3
   85720:	e74e      	b.n	855c0 <__sfvwrite_r+0x150>
   85722:	9800      	ldr	r0, [sp, #0]
   85724:	f000 fc4a 	bl	85fbc <_realloc_r>
   85728:	4683      	mov	fp, r0
   8572a:	2800      	cmp	r0, #0
   8572c:	d1c5      	bne.n	856ba <__sfvwrite_r+0x24a>
   8572e:	9d00      	ldr	r5, [sp, #0]
   85730:	6921      	ldr	r1, [r4, #16]
   85732:	4628      	mov	r0, r5
   85734:	f7ff fdb6 	bl	852a4 <_free_r>
   85738:	220c      	movs	r2, #12
   8573a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8573e:	602a      	str	r2, [r5, #0]
   85740:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85744:	e712      	b.n	8556c <__sfvwrite_r+0xfc>
   85746:	f106 0901 	add.w	r9, r6, #1
   8574a:	e720      	b.n	8558e <__sfvwrite_r+0x11e>
   8574c:	f04f 30ff 	mov.w	r0, #4294967295
   85750:	e6bd      	b.n	854ce <__sfvwrite_r+0x5e>
   85752:	220c      	movs	r2, #12
   85754:	9900      	ldr	r1, [sp, #0]
   85756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8575a:	600a      	str	r2, [r1, #0]
   8575c:	e706      	b.n	8556c <__sfvwrite_r+0xfc>
   8575e:	bf00      	nop
   85760:	7ffffc00 	.word	0x7ffffc00

00085764 <_fwalk_reent>:
   85764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85768:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8576c:	d01e      	beq.n	857ac <_fwalk_reent+0x48>
   8576e:	4688      	mov	r8, r1
   85770:	4607      	mov	r7, r0
   85772:	f04f 0900 	mov.w	r9, #0
   85776:	6875      	ldr	r5, [r6, #4]
   85778:	68b4      	ldr	r4, [r6, #8]
   8577a:	3d01      	subs	r5, #1
   8577c:	d410      	bmi.n	857a0 <_fwalk_reent+0x3c>
   8577e:	89a3      	ldrh	r3, [r4, #12]
   85780:	3d01      	subs	r5, #1
   85782:	2b01      	cmp	r3, #1
   85784:	d908      	bls.n	85798 <_fwalk_reent+0x34>
   85786:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8578a:	3301      	adds	r3, #1
   8578c:	d004      	beq.n	85798 <_fwalk_reent+0x34>
   8578e:	4621      	mov	r1, r4
   85790:	4638      	mov	r0, r7
   85792:	47c0      	blx	r8
   85794:	ea49 0900 	orr.w	r9, r9, r0
   85798:	1c6b      	adds	r3, r5, #1
   8579a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8579e:	d1ee      	bne.n	8577e <_fwalk_reent+0x1a>
   857a0:	6836      	ldr	r6, [r6, #0]
   857a2:	2e00      	cmp	r6, #0
   857a4:	d1e7      	bne.n	85776 <_fwalk_reent+0x12>
   857a6:	4648      	mov	r0, r9
   857a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   857ac:	46b1      	mov	r9, r6
   857ae:	4648      	mov	r0, r9
   857b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000857b4 <__locale_mb_cur_max>:
   857b4:	4b04      	ldr	r3, [pc, #16]	; (857c8 <__locale_mb_cur_max+0x14>)
   857b6:	4a05      	ldr	r2, [pc, #20]	; (857cc <__locale_mb_cur_max+0x18>)
   857b8:	681b      	ldr	r3, [r3, #0]
   857ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   857bc:	2b00      	cmp	r3, #0
   857be:	bf08      	it	eq
   857c0:	4613      	moveq	r3, r2
   857c2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   857c6:	4770      	bx	lr
   857c8:	20070188 	.word	0x20070188
   857cc:	200705bc 	.word	0x200705bc

000857d0 <__retarget_lock_init_recursive>:
   857d0:	4770      	bx	lr
   857d2:	bf00      	nop

000857d4 <__retarget_lock_close_recursive>:
   857d4:	4770      	bx	lr
   857d6:	bf00      	nop

000857d8 <__retarget_lock_acquire_recursive>:
   857d8:	4770      	bx	lr
   857da:	bf00      	nop

000857dc <__retarget_lock_release_recursive>:
   857dc:	4770      	bx	lr
   857de:	bf00      	nop

000857e0 <__swhatbuf_r>:
   857e0:	b570      	push	{r4, r5, r6, lr}
   857e2:	460c      	mov	r4, r1
   857e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   857e8:	b090      	sub	sp, #64	; 0x40
   857ea:	2900      	cmp	r1, #0
   857ec:	4615      	mov	r5, r2
   857ee:	461e      	mov	r6, r3
   857f0:	db14      	blt.n	8581c <__swhatbuf_r+0x3c>
   857f2:	aa01      	add	r2, sp, #4
   857f4:	f000 ff68 	bl	866c8 <_fstat_r>
   857f8:	2800      	cmp	r0, #0
   857fa:	db0f      	blt.n	8581c <__swhatbuf_r+0x3c>
   857fc:	9a02      	ldr	r2, [sp, #8]
   857fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85802:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   85806:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8580a:	fab2 f282 	clz	r2, r2
   8580e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   85812:	0952      	lsrs	r2, r2, #5
   85814:	6032      	str	r2, [r6, #0]
   85816:	602b      	str	r3, [r5, #0]
   85818:	b010      	add	sp, #64	; 0x40
   8581a:	bd70      	pop	{r4, r5, r6, pc}
   8581c:	2300      	movs	r3, #0
   8581e:	89a2      	ldrh	r2, [r4, #12]
   85820:	6033      	str	r3, [r6, #0]
   85822:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   85826:	d004      	beq.n	85832 <__swhatbuf_r+0x52>
   85828:	2240      	movs	r2, #64	; 0x40
   8582a:	4618      	mov	r0, r3
   8582c:	602a      	str	r2, [r5, #0]
   8582e:	b010      	add	sp, #64	; 0x40
   85830:	bd70      	pop	{r4, r5, r6, pc}
   85832:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85836:	602b      	str	r3, [r5, #0]
   85838:	b010      	add	sp, #64	; 0x40
   8583a:	bd70      	pop	{r4, r5, r6, pc}

0008583c <__smakebuf_r>:
   8583c:	898a      	ldrh	r2, [r1, #12]
   8583e:	460b      	mov	r3, r1
   85840:	0792      	lsls	r2, r2, #30
   85842:	d506      	bpl.n	85852 <__smakebuf_r+0x16>
   85844:	2101      	movs	r1, #1
   85846:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8584a:	6159      	str	r1, [r3, #20]
   8584c:	601a      	str	r2, [r3, #0]
   8584e:	611a      	str	r2, [r3, #16]
   85850:	4770      	bx	lr
   85852:	b5f0      	push	{r4, r5, r6, r7, lr}
   85854:	b083      	sub	sp, #12
   85856:	ab01      	add	r3, sp, #4
   85858:	466a      	mov	r2, sp
   8585a:	460c      	mov	r4, r1
   8585c:	4606      	mov	r6, r0
   8585e:	f7ff ffbf 	bl	857e0 <__swhatbuf_r>
   85862:	9900      	ldr	r1, [sp, #0]
   85864:	4605      	mov	r5, r0
   85866:	4630      	mov	r0, r6
   85868:	f000 f83a 	bl	858e0 <_malloc_r>
   8586c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85870:	b1d8      	cbz	r0, 858aa <__smakebuf_r+0x6e>
   85872:	e89d 0006 	ldmia.w	sp, {r1, r2}
   85876:	4f15      	ldr	r7, [pc, #84]	; (858cc <__smakebuf_r+0x90>)
   85878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8587c:	63f7      	str	r7, [r6, #60]	; 0x3c
   8587e:	81a3      	strh	r3, [r4, #12]
   85880:	6020      	str	r0, [r4, #0]
   85882:	6120      	str	r0, [r4, #16]
   85884:	6161      	str	r1, [r4, #20]
   85886:	b91a      	cbnz	r2, 85890 <__smakebuf_r+0x54>
   85888:	432b      	orrs	r3, r5
   8588a:	81a3      	strh	r3, [r4, #12]
   8588c:	b003      	add	sp, #12
   8588e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85890:	4630      	mov	r0, r6
   85892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85896:	f000 ff2b 	bl	866f0 <_isatty_r>
   8589a:	b1a0      	cbz	r0, 858c6 <__smakebuf_r+0x8a>
   8589c:	89a3      	ldrh	r3, [r4, #12]
   8589e:	f023 0303 	bic.w	r3, r3, #3
   858a2:	f043 0301 	orr.w	r3, r3, #1
   858a6:	b21b      	sxth	r3, r3
   858a8:	e7ee      	b.n	85888 <__smakebuf_r+0x4c>
   858aa:	059a      	lsls	r2, r3, #22
   858ac:	d4ee      	bmi.n	8588c <__smakebuf_r+0x50>
   858ae:	2101      	movs	r1, #1
   858b0:	f023 0303 	bic.w	r3, r3, #3
   858b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   858b8:	f043 0302 	orr.w	r3, r3, #2
   858bc:	81a3      	strh	r3, [r4, #12]
   858be:	6161      	str	r1, [r4, #20]
   858c0:	6022      	str	r2, [r4, #0]
   858c2:	6122      	str	r2, [r4, #16]
   858c4:	e7e2      	b.n	8588c <__smakebuf_r+0x50>
   858c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   858ca:	e7dd      	b.n	85888 <__smakebuf_r+0x4c>
   858cc:	00084ffd 	.word	0x00084ffd

000858d0 <malloc>:
   858d0:	4b02      	ldr	r3, [pc, #8]	; (858dc <malloc+0xc>)
   858d2:	4601      	mov	r1, r0
   858d4:	6818      	ldr	r0, [r3, #0]
   858d6:	f000 b803 	b.w	858e0 <_malloc_r>
   858da:	bf00      	nop
   858dc:	20070188 	.word	0x20070188

000858e0 <_malloc_r>:
   858e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   858e4:	f101 060b 	add.w	r6, r1, #11
   858e8:	2e16      	cmp	r6, #22
   858ea:	b083      	sub	sp, #12
   858ec:	4605      	mov	r5, r0
   858ee:	f240 809e 	bls.w	85a2e <_malloc_r+0x14e>
   858f2:	f036 0607 	bics.w	r6, r6, #7
   858f6:	f100 80bd 	bmi.w	85a74 <_malloc_r+0x194>
   858fa:	42b1      	cmp	r1, r6
   858fc:	f200 80ba 	bhi.w	85a74 <_malloc_r+0x194>
   85900:	f000 fb50 	bl	85fa4 <__malloc_lock>
   85904:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   85908:	f0c0 8285 	bcc.w	85e16 <_malloc_r+0x536>
   8590c:	0a73      	lsrs	r3, r6, #9
   8590e:	f000 80b8 	beq.w	85a82 <_malloc_r+0x1a2>
   85912:	2b04      	cmp	r3, #4
   85914:	f200 816c 	bhi.w	85bf0 <_malloc_r+0x310>
   85918:	09b3      	lsrs	r3, r6, #6
   8591a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8591e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   85922:	00c1      	lsls	r1, r0, #3
   85924:	4fb8      	ldr	r7, [pc, #736]	; (85c08 <_malloc_r+0x328>)
   85926:	4439      	add	r1, r7
   85928:	684c      	ldr	r4, [r1, #4]
   8592a:	3908      	subs	r1, #8
   8592c:	42a1      	cmp	r1, r4
   8592e:	d106      	bne.n	8593e <_malloc_r+0x5e>
   85930:	e00c      	b.n	8594c <_malloc_r+0x6c>
   85932:	2a00      	cmp	r2, #0
   85934:	f280 80ab 	bge.w	85a8e <_malloc_r+0x1ae>
   85938:	68e4      	ldr	r4, [r4, #12]
   8593a:	42a1      	cmp	r1, r4
   8593c:	d006      	beq.n	8594c <_malloc_r+0x6c>
   8593e:	6863      	ldr	r3, [r4, #4]
   85940:	f023 0303 	bic.w	r3, r3, #3
   85944:	1b9a      	subs	r2, r3, r6
   85946:	2a0f      	cmp	r2, #15
   85948:	ddf3      	ble.n	85932 <_malloc_r+0x52>
   8594a:	4670      	mov	r0, lr
   8594c:	693c      	ldr	r4, [r7, #16]
   8594e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 85c1c <_malloc_r+0x33c>
   85952:	4574      	cmp	r4, lr
   85954:	f000 819e 	beq.w	85c94 <_malloc_r+0x3b4>
   85958:	6863      	ldr	r3, [r4, #4]
   8595a:	f023 0303 	bic.w	r3, r3, #3
   8595e:	1b9a      	subs	r2, r3, r6
   85960:	2a0f      	cmp	r2, #15
   85962:	f300 8183 	bgt.w	85c6c <_malloc_r+0x38c>
   85966:	2a00      	cmp	r2, #0
   85968:	f8c7 e014 	str.w	lr, [r7, #20]
   8596c:	f8c7 e010 	str.w	lr, [r7, #16]
   85970:	f280 8091 	bge.w	85a96 <_malloc_r+0x1b6>
   85974:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85978:	f080 8154 	bcs.w	85c24 <_malloc_r+0x344>
   8597c:	2201      	movs	r2, #1
   8597e:	08db      	lsrs	r3, r3, #3
   85980:	6879      	ldr	r1, [r7, #4]
   85982:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   85986:	4413      	add	r3, r2
   85988:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8598c:	fa02 f20c 	lsl.w	r2, r2, ip
   85990:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   85994:	430a      	orrs	r2, r1
   85996:	f1ac 0108 	sub.w	r1, ip, #8
   8599a:	60e1      	str	r1, [r4, #12]
   8599c:	f8c4 8008 	str.w	r8, [r4, #8]
   859a0:	607a      	str	r2, [r7, #4]
   859a2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   859a6:	f8c8 400c 	str.w	r4, [r8, #12]
   859aa:	2401      	movs	r4, #1
   859ac:	1083      	asrs	r3, r0, #2
   859ae:	409c      	lsls	r4, r3
   859b0:	4294      	cmp	r4, r2
   859b2:	d87d      	bhi.n	85ab0 <_malloc_r+0x1d0>
   859b4:	4214      	tst	r4, r2
   859b6:	d106      	bne.n	859c6 <_malloc_r+0xe6>
   859b8:	f020 0003 	bic.w	r0, r0, #3
   859bc:	0064      	lsls	r4, r4, #1
   859be:	4214      	tst	r4, r2
   859c0:	f100 0004 	add.w	r0, r0, #4
   859c4:	d0fa      	beq.n	859bc <_malloc_r+0xdc>
   859c6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   859ca:	46cc      	mov	ip, r9
   859cc:	4680      	mov	r8, r0
   859ce:	f8dc 300c 	ldr.w	r3, [ip, #12]
   859d2:	459c      	cmp	ip, r3
   859d4:	d107      	bne.n	859e6 <_malloc_r+0x106>
   859d6:	e15f      	b.n	85c98 <_malloc_r+0x3b8>
   859d8:	2a00      	cmp	r2, #0
   859da:	f280 816d 	bge.w	85cb8 <_malloc_r+0x3d8>
   859de:	68db      	ldr	r3, [r3, #12]
   859e0:	459c      	cmp	ip, r3
   859e2:	f000 8159 	beq.w	85c98 <_malloc_r+0x3b8>
   859e6:	6859      	ldr	r1, [r3, #4]
   859e8:	f021 0103 	bic.w	r1, r1, #3
   859ec:	1b8a      	subs	r2, r1, r6
   859ee:	2a0f      	cmp	r2, #15
   859f0:	ddf2      	ble.n	859d8 <_malloc_r+0xf8>
   859f2:	68dc      	ldr	r4, [r3, #12]
   859f4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   859f8:	f046 0801 	orr.w	r8, r6, #1
   859fc:	4628      	mov	r0, r5
   859fe:	441e      	add	r6, r3
   85a00:	f042 0501 	orr.w	r5, r2, #1
   85a04:	f8c3 8004 	str.w	r8, [r3, #4]
   85a08:	f8cc 400c 	str.w	r4, [ip, #12]
   85a0c:	f8c4 c008 	str.w	ip, [r4, #8]
   85a10:	617e      	str	r6, [r7, #20]
   85a12:	613e      	str	r6, [r7, #16]
   85a14:	f8c6 e00c 	str.w	lr, [r6, #12]
   85a18:	f8c6 e008 	str.w	lr, [r6, #8]
   85a1c:	6075      	str	r5, [r6, #4]
   85a1e:	505a      	str	r2, [r3, r1]
   85a20:	9300      	str	r3, [sp, #0]
   85a22:	f000 fac5 	bl	85fb0 <__malloc_unlock>
   85a26:	9b00      	ldr	r3, [sp, #0]
   85a28:	f103 0408 	add.w	r4, r3, #8
   85a2c:	e01e      	b.n	85a6c <_malloc_r+0x18c>
   85a2e:	2910      	cmp	r1, #16
   85a30:	d820      	bhi.n	85a74 <_malloc_r+0x194>
   85a32:	f000 fab7 	bl	85fa4 <__malloc_lock>
   85a36:	2610      	movs	r6, #16
   85a38:	2318      	movs	r3, #24
   85a3a:	2002      	movs	r0, #2
   85a3c:	4f72      	ldr	r7, [pc, #456]	; (85c08 <_malloc_r+0x328>)
   85a3e:	443b      	add	r3, r7
   85a40:	685c      	ldr	r4, [r3, #4]
   85a42:	f1a3 0208 	sub.w	r2, r3, #8
   85a46:	4294      	cmp	r4, r2
   85a48:	f000 812f 	beq.w	85caa <_malloc_r+0x3ca>
   85a4c:	6863      	ldr	r3, [r4, #4]
   85a4e:	68e1      	ldr	r1, [r4, #12]
   85a50:	f023 0303 	bic.w	r3, r3, #3
   85a54:	4423      	add	r3, r4
   85a56:	685a      	ldr	r2, [r3, #4]
   85a58:	68a6      	ldr	r6, [r4, #8]
   85a5a:	f042 0201 	orr.w	r2, r2, #1
   85a5e:	60f1      	str	r1, [r6, #12]
   85a60:	4628      	mov	r0, r5
   85a62:	608e      	str	r6, [r1, #8]
   85a64:	605a      	str	r2, [r3, #4]
   85a66:	f000 faa3 	bl	85fb0 <__malloc_unlock>
   85a6a:	3408      	adds	r4, #8
   85a6c:	4620      	mov	r0, r4
   85a6e:	b003      	add	sp, #12
   85a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a74:	2400      	movs	r4, #0
   85a76:	230c      	movs	r3, #12
   85a78:	4620      	mov	r0, r4
   85a7a:	602b      	str	r3, [r5, #0]
   85a7c:	b003      	add	sp, #12
   85a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a82:	2040      	movs	r0, #64	; 0x40
   85a84:	f44f 7100 	mov.w	r1, #512	; 0x200
   85a88:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   85a8c:	e74a      	b.n	85924 <_malloc_r+0x44>
   85a8e:	4423      	add	r3, r4
   85a90:	685a      	ldr	r2, [r3, #4]
   85a92:	68e1      	ldr	r1, [r4, #12]
   85a94:	e7e0      	b.n	85a58 <_malloc_r+0x178>
   85a96:	4423      	add	r3, r4
   85a98:	685a      	ldr	r2, [r3, #4]
   85a9a:	4628      	mov	r0, r5
   85a9c:	f042 0201 	orr.w	r2, r2, #1
   85aa0:	605a      	str	r2, [r3, #4]
   85aa2:	3408      	adds	r4, #8
   85aa4:	f000 fa84 	bl	85fb0 <__malloc_unlock>
   85aa8:	4620      	mov	r0, r4
   85aaa:	b003      	add	sp, #12
   85aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ab0:	68bc      	ldr	r4, [r7, #8]
   85ab2:	6863      	ldr	r3, [r4, #4]
   85ab4:	f023 0803 	bic.w	r8, r3, #3
   85ab8:	45b0      	cmp	r8, r6
   85aba:	d304      	bcc.n	85ac6 <_malloc_r+0x1e6>
   85abc:	eba8 0306 	sub.w	r3, r8, r6
   85ac0:	2b0f      	cmp	r3, #15
   85ac2:	f300 8085 	bgt.w	85bd0 <_malloc_r+0x2f0>
   85ac6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 85c20 <_malloc_r+0x340>
   85aca:	4b50      	ldr	r3, [pc, #320]	; (85c0c <_malloc_r+0x32c>)
   85acc:	f8d9 2000 	ldr.w	r2, [r9]
   85ad0:	681b      	ldr	r3, [r3, #0]
   85ad2:	3201      	adds	r2, #1
   85ad4:	4433      	add	r3, r6
   85ad6:	eb04 0a08 	add.w	sl, r4, r8
   85ada:	f000 8154 	beq.w	85d86 <_malloc_r+0x4a6>
   85ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   85ae2:	330f      	adds	r3, #15
   85ae4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   85ae8:	f02b 0b0f 	bic.w	fp, fp, #15
   85aec:	4659      	mov	r1, fp
   85aee:	4628      	mov	r0, r5
   85af0:	f000 fc1a 	bl	86328 <_sbrk_r>
   85af4:	1c41      	adds	r1, r0, #1
   85af6:	4602      	mov	r2, r0
   85af8:	f000 80fb 	beq.w	85cf2 <_malloc_r+0x412>
   85afc:	4582      	cmp	sl, r0
   85afe:	f200 80f6 	bhi.w	85cee <_malloc_r+0x40e>
   85b02:	4b43      	ldr	r3, [pc, #268]	; (85c10 <_malloc_r+0x330>)
   85b04:	6819      	ldr	r1, [r3, #0]
   85b06:	4459      	add	r1, fp
   85b08:	6019      	str	r1, [r3, #0]
   85b0a:	f000 814c 	beq.w	85da6 <_malloc_r+0x4c6>
   85b0e:	f8d9 0000 	ldr.w	r0, [r9]
   85b12:	3001      	adds	r0, #1
   85b14:	bf1b      	ittet	ne
   85b16:	eba2 0a0a 	subne.w	sl, r2, sl
   85b1a:	4451      	addne	r1, sl
   85b1c:	f8c9 2000 	streq.w	r2, [r9]
   85b20:	6019      	strne	r1, [r3, #0]
   85b22:	f012 0107 	ands.w	r1, r2, #7
   85b26:	f000 8114 	beq.w	85d52 <_malloc_r+0x472>
   85b2a:	f1c1 0008 	rsb	r0, r1, #8
   85b2e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85b32:	4402      	add	r2, r0
   85b34:	3108      	adds	r1, #8
   85b36:	eb02 090b 	add.w	r9, r2, fp
   85b3a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   85b3e:	eba1 0909 	sub.w	r9, r1, r9
   85b42:	4649      	mov	r1, r9
   85b44:	4628      	mov	r0, r5
   85b46:	9301      	str	r3, [sp, #4]
   85b48:	9200      	str	r2, [sp, #0]
   85b4a:	f000 fbed 	bl	86328 <_sbrk_r>
   85b4e:	1c43      	adds	r3, r0, #1
   85b50:	e89d 000c 	ldmia.w	sp, {r2, r3}
   85b54:	f000 8142 	beq.w	85ddc <_malloc_r+0x4fc>
   85b58:	1a80      	subs	r0, r0, r2
   85b5a:	4448      	add	r0, r9
   85b5c:	f040 0001 	orr.w	r0, r0, #1
   85b60:	6819      	ldr	r1, [r3, #0]
   85b62:	42bc      	cmp	r4, r7
   85b64:	4449      	add	r1, r9
   85b66:	60ba      	str	r2, [r7, #8]
   85b68:	6019      	str	r1, [r3, #0]
   85b6a:	6050      	str	r0, [r2, #4]
   85b6c:	d017      	beq.n	85b9e <_malloc_r+0x2be>
   85b6e:	f1b8 0f0f 	cmp.w	r8, #15
   85b72:	f240 80fa 	bls.w	85d6a <_malloc_r+0x48a>
   85b76:	f04f 0c05 	mov.w	ip, #5
   85b7a:	6862      	ldr	r2, [r4, #4]
   85b7c:	f1a8 000c 	sub.w	r0, r8, #12
   85b80:	f020 0007 	bic.w	r0, r0, #7
   85b84:	f002 0201 	and.w	r2, r2, #1
   85b88:	eb04 0e00 	add.w	lr, r4, r0
   85b8c:	4302      	orrs	r2, r0
   85b8e:	280f      	cmp	r0, #15
   85b90:	6062      	str	r2, [r4, #4]
   85b92:	f8ce c004 	str.w	ip, [lr, #4]
   85b96:	f8ce c008 	str.w	ip, [lr, #8]
   85b9a:	f200 8116 	bhi.w	85dca <_malloc_r+0x4ea>
   85b9e:	4b1d      	ldr	r3, [pc, #116]	; (85c14 <_malloc_r+0x334>)
   85ba0:	68bc      	ldr	r4, [r7, #8]
   85ba2:	681a      	ldr	r2, [r3, #0]
   85ba4:	4291      	cmp	r1, r2
   85ba6:	bf88      	it	hi
   85ba8:	6019      	strhi	r1, [r3, #0]
   85baa:	4b1b      	ldr	r3, [pc, #108]	; (85c18 <_malloc_r+0x338>)
   85bac:	681a      	ldr	r2, [r3, #0]
   85bae:	4291      	cmp	r1, r2
   85bb0:	6862      	ldr	r2, [r4, #4]
   85bb2:	bf88      	it	hi
   85bb4:	6019      	strhi	r1, [r3, #0]
   85bb6:	f022 0203 	bic.w	r2, r2, #3
   85bba:	4296      	cmp	r6, r2
   85bbc:	eba2 0306 	sub.w	r3, r2, r6
   85bc0:	d801      	bhi.n	85bc6 <_malloc_r+0x2e6>
   85bc2:	2b0f      	cmp	r3, #15
   85bc4:	dc04      	bgt.n	85bd0 <_malloc_r+0x2f0>
   85bc6:	4628      	mov	r0, r5
   85bc8:	f000 f9f2 	bl	85fb0 <__malloc_unlock>
   85bcc:	2400      	movs	r4, #0
   85bce:	e74d      	b.n	85a6c <_malloc_r+0x18c>
   85bd0:	f046 0201 	orr.w	r2, r6, #1
   85bd4:	f043 0301 	orr.w	r3, r3, #1
   85bd8:	4426      	add	r6, r4
   85bda:	6062      	str	r2, [r4, #4]
   85bdc:	4628      	mov	r0, r5
   85bde:	60be      	str	r6, [r7, #8]
   85be0:	3408      	adds	r4, #8
   85be2:	6073      	str	r3, [r6, #4]
   85be4:	f000 f9e4 	bl	85fb0 <__malloc_unlock>
   85be8:	4620      	mov	r0, r4
   85bea:	b003      	add	sp, #12
   85bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85bf0:	2b14      	cmp	r3, #20
   85bf2:	d970      	bls.n	85cd6 <_malloc_r+0x3f6>
   85bf4:	2b54      	cmp	r3, #84	; 0x54
   85bf6:	f200 80a2 	bhi.w	85d3e <_malloc_r+0x45e>
   85bfa:	0b33      	lsrs	r3, r6, #12
   85bfc:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   85c00:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   85c04:	00c1      	lsls	r1, r0, #3
   85c06:	e68d      	b.n	85924 <_malloc_r+0x44>
   85c08:	20070728 	.word	0x20070728
   85c0c:	2007ae00 	.word	0x2007ae00
   85c10:	2007add0 	.word	0x2007add0
   85c14:	2007adf8 	.word	0x2007adf8
   85c18:	2007adfc 	.word	0x2007adfc
   85c1c:	20070730 	.word	0x20070730
   85c20:	20070b30 	.word	0x20070b30
   85c24:	0a5a      	lsrs	r2, r3, #9
   85c26:	2a04      	cmp	r2, #4
   85c28:	d95b      	bls.n	85ce2 <_malloc_r+0x402>
   85c2a:	2a14      	cmp	r2, #20
   85c2c:	f200 80ae 	bhi.w	85d8c <_malloc_r+0x4ac>
   85c30:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   85c34:	00c9      	lsls	r1, r1, #3
   85c36:	325b      	adds	r2, #91	; 0x5b
   85c38:	eb07 0c01 	add.w	ip, r7, r1
   85c3c:	5879      	ldr	r1, [r7, r1]
   85c3e:	f1ac 0c08 	sub.w	ip, ip, #8
   85c42:	458c      	cmp	ip, r1
   85c44:	f000 8088 	beq.w	85d58 <_malloc_r+0x478>
   85c48:	684a      	ldr	r2, [r1, #4]
   85c4a:	f022 0203 	bic.w	r2, r2, #3
   85c4e:	4293      	cmp	r3, r2
   85c50:	d273      	bcs.n	85d3a <_malloc_r+0x45a>
   85c52:	6889      	ldr	r1, [r1, #8]
   85c54:	458c      	cmp	ip, r1
   85c56:	d1f7      	bne.n	85c48 <_malloc_r+0x368>
   85c58:	f8dc 300c 	ldr.w	r3, [ip, #12]
   85c5c:	687a      	ldr	r2, [r7, #4]
   85c5e:	60e3      	str	r3, [r4, #12]
   85c60:	f8c4 c008 	str.w	ip, [r4, #8]
   85c64:	609c      	str	r4, [r3, #8]
   85c66:	f8cc 400c 	str.w	r4, [ip, #12]
   85c6a:	e69e      	b.n	859aa <_malloc_r+0xca>
   85c6c:	f046 0c01 	orr.w	ip, r6, #1
   85c70:	f042 0101 	orr.w	r1, r2, #1
   85c74:	4426      	add	r6, r4
   85c76:	f8c4 c004 	str.w	ip, [r4, #4]
   85c7a:	4628      	mov	r0, r5
   85c7c:	617e      	str	r6, [r7, #20]
   85c7e:	613e      	str	r6, [r7, #16]
   85c80:	f8c6 e00c 	str.w	lr, [r6, #12]
   85c84:	f8c6 e008 	str.w	lr, [r6, #8]
   85c88:	6071      	str	r1, [r6, #4]
   85c8a:	50e2      	str	r2, [r4, r3]
   85c8c:	f000 f990 	bl	85fb0 <__malloc_unlock>
   85c90:	3408      	adds	r4, #8
   85c92:	e6eb      	b.n	85a6c <_malloc_r+0x18c>
   85c94:	687a      	ldr	r2, [r7, #4]
   85c96:	e688      	b.n	859aa <_malloc_r+0xca>
   85c98:	f108 0801 	add.w	r8, r8, #1
   85c9c:	f018 0f03 	tst.w	r8, #3
   85ca0:	f10c 0c08 	add.w	ip, ip, #8
   85ca4:	f47f ae93 	bne.w	859ce <_malloc_r+0xee>
   85ca8:	e02d      	b.n	85d06 <_malloc_r+0x426>
   85caa:	68dc      	ldr	r4, [r3, #12]
   85cac:	42a3      	cmp	r3, r4
   85cae:	bf08      	it	eq
   85cb0:	3002      	addeq	r0, #2
   85cb2:	f43f ae4b 	beq.w	8594c <_malloc_r+0x6c>
   85cb6:	e6c9      	b.n	85a4c <_malloc_r+0x16c>
   85cb8:	461c      	mov	r4, r3
   85cba:	4419      	add	r1, r3
   85cbc:	684a      	ldr	r2, [r1, #4]
   85cbe:	68db      	ldr	r3, [r3, #12]
   85cc0:	f854 6f08 	ldr.w	r6, [r4, #8]!
   85cc4:	f042 0201 	orr.w	r2, r2, #1
   85cc8:	604a      	str	r2, [r1, #4]
   85cca:	4628      	mov	r0, r5
   85ccc:	60f3      	str	r3, [r6, #12]
   85cce:	609e      	str	r6, [r3, #8]
   85cd0:	f000 f96e 	bl	85fb0 <__malloc_unlock>
   85cd4:	e6ca      	b.n	85a6c <_malloc_r+0x18c>
   85cd6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   85cda:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   85cde:	00c1      	lsls	r1, r0, #3
   85ce0:	e620      	b.n	85924 <_malloc_r+0x44>
   85ce2:	099a      	lsrs	r2, r3, #6
   85ce4:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85ce8:	00c9      	lsls	r1, r1, #3
   85cea:	3238      	adds	r2, #56	; 0x38
   85cec:	e7a4      	b.n	85c38 <_malloc_r+0x358>
   85cee:	42bc      	cmp	r4, r7
   85cf0:	d054      	beq.n	85d9c <_malloc_r+0x4bc>
   85cf2:	68bc      	ldr	r4, [r7, #8]
   85cf4:	6862      	ldr	r2, [r4, #4]
   85cf6:	f022 0203 	bic.w	r2, r2, #3
   85cfa:	e75e      	b.n	85bba <_malloc_r+0x2da>
   85cfc:	f859 3908 	ldr.w	r3, [r9], #-8
   85d00:	4599      	cmp	r9, r3
   85d02:	f040 8086 	bne.w	85e12 <_malloc_r+0x532>
   85d06:	f010 0f03 	tst.w	r0, #3
   85d0a:	f100 30ff 	add.w	r0, r0, #4294967295
   85d0e:	d1f5      	bne.n	85cfc <_malloc_r+0x41c>
   85d10:	687b      	ldr	r3, [r7, #4]
   85d12:	ea23 0304 	bic.w	r3, r3, r4
   85d16:	607b      	str	r3, [r7, #4]
   85d18:	0064      	lsls	r4, r4, #1
   85d1a:	429c      	cmp	r4, r3
   85d1c:	f63f aec8 	bhi.w	85ab0 <_malloc_r+0x1d0>
   85d20:	2c00      	cmp	r4, #0
   85d22:	f43f aec5 	beq.w	85ab0 <_malloc_r+0x1d0>
   85d26:	421c      	tst	r4, r3
   85d28:	4640      	mov	r0, r8
   85d2a:	f47f ae4c 	bne.w	859c6 <_malloc_r+0xe6>
   85d2e:	0064      	lsls	r4, r4, #1
   85d30:	421c      	tst	r4, r3
   85d32:	f100 0004 	add.w	r0, r0, #4
   85d36:	d0fa      	beq.n	85d2e <_malloc_r+0x44e>
   85d38:	e645      	b.n	859c6 <_malloc_r+0xe6>
   85d3a:	468c      	mov	ip, r1
   85d3c:	e78c      	b.n	85c58 <_malloc_r+0x378>
   85d3e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85d42:	d815      	bhi.n	85d70 <_malloc_r+0x490>
   85d44:	0bf3      	lsrs	r3, r6, #15
   85d46:	f103 0078 	add.w	r0, r3, #120	; 0x78
   85d4a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   85d4e:	00c1      	lsls	r1, r0, #3
   85d50:	e5e8      	b.n	85924 <_malloc_r+0x44>
   85d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85d56:	e6ee      	b.n	85b36 <_malloc_r+0x256>
   85d58:	2101      	movs	r1, #1
   85d5a:	687b      	ldr	r3, [r7, #4]
   85d5c:	1092      	asrs	r2, r2, #2
   85d5e:	fa01 f202 	lsl.w	r2, r1, r2
   85d62:	431a      	orrs	r2, r3
   85d64:	607a      	str	r2, [r7, #4]
   85d66:	4663      	mov	r3, ip
   85d68:	e779      	b.n	85c5e <_malloc_r+0x37e>
   85d6a:	2301      	movs	r3, #1
   85d6c:	6053      	str	r3, [r2, #4]
   85d6e:	e72a      	b.n	85bc6 <_malloc_r+0x2e6>
   85d70:	f240 5254 	movw	r2, #1364	; 0x554
   85d74:	4293      	cmp	r3, r2
   85d76:	d822      	bhi.n	85dbe <_malloc_r+0x4de>
   85d78:	0cb3      	lsrs	r3, r6, #18
   85d7a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   85d7e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   85d82:	00c1      	lsls	r1, r0, #3
   85d84:	e5ce      	b.n	85924 <_malloc_r+0x44>
   85d86:	f103 0b10 	add.w	fp, r3, #16
   85d8a:	e6af      	b.n	85aec <_malloc_r+0x20c>
   85d8c:	2a54      	cmp	r2, #84	; 0x54
   85d8e:	d829      	bhi.n	85de4 <_malloc_r+0x504>
   85d90:	0b1a      	lsrs	r2, r3, #12
   85d92:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85d96:	00c9      	lsls	r1, r1, #3
   85d98:	326e      	adds	r2, #110	; 0x6e
   85d9a:	e74d      	b.n	85c38 <_malloc_r+0x358>
   85d9c:	4b20      	ldr	r3, [pc, #128]	; (85e20 <_malloc_r+0x540>)
   85d9e:	6819      	ldr	r1, [r3, #0]
   85da0:	4459      	add	r1, fp
   85da2:	6019      	str	r1, [r3, #0]
   85da4:	e6b3      	b.n	85b0e <_malloc_r+0x22e>
   85da6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   85daa:	2800      	cmp	r0, #0
   85dac:	f47f aeaf 	bne.w	85b0e <_malloc_r+0x22e>
   85db0:	eb08 030b 	add.w	r3, r8, fp
   85db4:	68ba      	ldr	r2, [r7, #8]
   85db6:	f043 0301 	orr.w	r3, r3, #1
   85dba:	6053      	str	r3, [r2, #4]
   85dbc:	e6ef      	b.n	85b9e <_malloc_r+0x2be>
   85dbe:	207f      	movs	r0, #127	; 0x7f
   85dc0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   85dc4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   85dc8:	e5ac      	b.n	85924 <_malloc_r+0x44>
   85dca:	f104 0108 	add.w	r1, r4, #8
   85dce:	4628      	mov	r0, r5
   85dd0:	9300      	str	r3, [sp, #0]
   85dd2:	f7ff fa67 	bl	852a4 <_free_r>
   85dd6:	9b00      	ldr	r3, [sp, #0]
   85dd8:	6819      	ldr	r1, [r3, #0]
   85dda:	e6e0      	b.n	85b9e <_malloc_r+0x2be>
   85ddc:	2001      	movs	r0, #1
   85dde:	f04f 0900 	mov.w	r9, #0
   85de2:	e6bd      	b.n	85b60 <_malloc_r+0x280>
   85de4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85de8:	d805      	bhi.n	85df6 <_malloc_r+0x516>
   85dea:	0bda      	lsrs	r2, r3, #15
   85dec:	f102 0178 	add.w	r1, r2, #120	; 0x78
   85df0:	00c9      	lsls	r1, r1, #3
   85df2:	3277      	adds	r2, #119	; 0x77
   85df4:	e720      	b.n	85c38 <_malloc_r+0x358>
   85df6:	f240 5154 	movw	r1, #1364	; 0x554
   85dfa:	428a      	cmp	r2, r1
   85dfc:	d805      	bhi.n	85e0a <_malloc_r+0x52a>
   85dfe:	0c9a      	lsrs	r2, r3, #18
   85e00:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   85e04:	00c9      	lsls	r1, r1, #3
   85e06:	327c      	adds	r2, #124	; 0x7c
   85e08:	e716      	b.n	85c38 <_malloc_r+0x358>
   85e0a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   85e0e:	227e      	movs	r2, #126	; 0x7e
   85e10:	e712      	b.n	85c38 <_malloc_r+0x358>
   85e12:	687b      	ldr	r3, [r7, #4]
   85e14:	e780      	b.n	85d18 <_malloc_r+0x438>
   85e16:	08f0      	lsrs	r0, r6, #3
   85e18:	f106 0308 	add.w	r3, r6, #8
   85e1c:	e60e      	b.n	85a3c <_malloc_r+0x15c>
   85e1e:	bf00      	nop
   85e20:	2007add0 	.word	0x2007add0

00085e24 <__ascii_mbtowc>:
   85e24:	b082      	sub	sp, #8
   85e26:	b149      	cbz	r1, 85e3c <__ascii_mbtowc+0x18>
   85e28:	b15a      	cbz	r2, 85e42 <__ascii_mbtowc+0x1e>
   85e2a:	b16b      	cbz	r3, 85e48 <__ascii_mbtowc+0x24>
   85e2c:	7813      	ldrb	r3, [r2, #0]
   85e2e:	600b      	str	r3, [r1, #0]
   85e30:	7812      	ldrb	r2, [r2, #0]
   85e32:	1c10      	adds	r0, r2, #0
   85e34:	bf18      	it	ne
   85e36:	2001      	movne	r0, #1
   85e38:	b002      	add	sp, #8
   85e3a:	4770      	bx	lr
   85e3c:	a901      	add	r1, sp, #4
   85e3e:	2a00      	cmp	r2, #0
   85e40:	d1f3      	bne.n	85e2a <__ascii_mbtowc+0x6>
   85e42:	4610      	mov	r0, r2
   85e44:	b002      	add	sp, #8
   85e46:	4770      	bx	lr
   85e48:	f06f 0001 	mvn.w	r0, #1
   85e4c:	e7f4      	b.n	85e38 <__ascii_mbtowc+0x14>
   85e4e:	bf00      	nop

00085e50 <memchr>:
   85e50:	0783      	lsls	r3, r0, #30
   85e52:	b470      	push	{r4, r5, r6}
   85e54:	b2cd      	uxtb	r5, r1
   85e56:	d03d      	beq.n	85ed4 <memchr+0x84>
   85e58:	1e54      	subs	r4, r2, #1
   85e5a:	b30a      	cbz	r2, 85ea0 <memchr+0x50>
   85e5c:	7803      	ldrb	r3, [r0, #0]
   85e5e:	42ab      	cmp	r3, r5
   85e60:	d01f      	beq.n	85ea2 <memchr+0x52>
   85e62:	1c43      	adds	r3, r0, #1
   85e64:	e005      	b.n	85e72 <memchr+0x22>
   85e66:	f114 34ff 	adds.w	r4, r4, #4294967295
   85e6a:	d319      	bcc.n	85ea0 <memchr+0x50>
   85e6c:	7802      	ldrb	r2, [r0, #0]
   85e6e:	42aa      	cmp	r2, r5
   85e70:	d017      	beq.n	85ea2 <memchr+0x52>
   85e72:	f013 0f03 	tst.w	r3, #3
   85e76:	4618      	mov	r0, r3
   85e78:	f103 0301 	add.w	r3, r3, #1
   85e7c:	d1f3      	bne.n	85e66 <memchr+0x16>
   85e7e:	2c03      	cmp	r4, #3
   85e80:	d811      	bhi.n	85ea6 <memchr+0x56>
   85e82:	b34c      	cbz	r4, 85ed8 <memchr+0x88>
   85e84:	7803      	ldrb	r3, [r0, #0]
   85e86:	42ab      	cmp	r3, r5
   85e88:	d00b      	beq.n	85ea2 <memchr+0x52>
   85e8a:	4404      	add	r4, r0
   85e8c:	1c43      	adds	r3, r0, #1
   85e8e:	e002      	b.n	85e96 <memchr+0x46>
   85e90:	7802      	ldrb	r2, [r0, #0]
   85e92:	42aa      	cmp	r2, r5
   85e94:	d005      	beq.n	85ea2 <memchr+0x52>
   85e96:	429c      	cmp	r4, r3
   85e98:	4618      	mov	r0, r3
   85e9a:	f103 0301 	add.w	r3, r3, #1
   85e9e:	d1f7      	bne.n	85e90 <memchr+0x40>
   85ea0:	2000      	movs	r0, #0
   85ea2:	bc70      	pop	{r4, r5, r6}
   85ea4:	4770      	bx	lr
   85ea6:	0209      	lsls	r1, r1, #8
   85ea8:	b289      	uxth	r1, r1
   85eaa:	4329      	orrs	r1, r5
   85eac:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   85eb0:	6803      	ldr	r3, [r0, #0]
   85eb2:	4606      	mov	r6, r0
   85eb4:	404b      	eors	r3, r1
   85eb6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   85eba:	ea22 0303 	bic.w	r3, r2, r3
   85ebe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   85ec2:	f100 0004 	add.w	r0, r0, #4
   85ec6:	d103      	bne.n	85ed0 <memchr+0x80>
   85ec8:	3c04      	subs	r4, #4
   85eca:	2c03      	cmp	r4, #3
   85ecc:	d8f0      	bhi.n	85eb0 <memchr+0x60>
   85ece:	e7d8      	b.n	85e82 <memchr+0x32>
   85ed0:	4630      	mov	r0, r6
   85ed2:	e7d7      	b.n	85e84 <memchr+0x34>
   85ed4:	4614      	mov	r4, r2
   85ed6:	e7d2      	b.n	85e7e <memchr+0x2e>
   85ed8:	4620      	mov	r0, r4
   85eda:	e7e2      	b.n	85ea2 <memchr+0x52>

00085edc <memmove>:
   85edc:	4288      	cmp	r0, r1
   85ede:	b5f0      	push	{r4, r5, r6, r7, lr}
   85ee0:	d90d      	bls.n	85efe <memmove+0x22>
   85ee2:	188b      	adds	r3, r1, r2
   85ee4:	4298      	cmp	r0, r3
   85ee6:	d20a      	bcs.n	85efe <memmove+0x22>
   85ee8:	1884      	adds	r4, r0, r2
   85eea:	2a00      	cmp	r2, #0
   85eec:	d051      	beq.n	85f92 <memmove+0xb6>
   85eee:	4622      	mov	r2, r4
   85ef0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85ef4:	4299      	cmp	r1, r3
   85ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   85efa:	d1f9      	bne.n	85ef0 <memmove+0x14>
   85efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85efe:	2a0f      	cmp	r2, #15
   85f00:	d948      	bls.n	85f94 <memmove+0xb8>
   85f02:	ea41 0300 	orr.w	r3, r1, r0
   85f06:	079b      	lsls	r3, r3, #30
   85f08:	d146      	bne.n	85f98 <memmove+0xbc>
   85f0a:	4615      	mov	r5, r2
   85f0c:	f100 0410 	add.w	r4, r0, #16
   85f10:	f101 0310 	add.w	r3, r1, #16
   85f14:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85f18:	3d10      	subs	r5, #16
   85f1a:	f844 6c10 	str.w	r6, [r4, #-16]
   85f1e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85f22:	2d0f      	cmp	r5, #15
   85f24:	f844 6c0c 	str.w	r6, [r4, #-12]
   85f28:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85f2c:	f104 0410 	add.w	r4, r4, #16
   85f30:	f844 6c18 	str.w	r6, [r4, #-24]
   85f34:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85f38:	f103 0310 	add.w	r3, r3, #16
   85f3c:	f844 6c14 	str.w	r6, [r4, #-20]
   85f40:	d8e8      	bhi.n	85f14 <memmove+0x38>
   85f42:	f1a2 0310 	sub.w	r3, r2, #16
   85f46:	f023 030f 	bic.w	r3, r3, #15
   85f4a:	f002 0e0f 	and.w	lr, r2, #15
   85f4e:	3310      	adds	r3, #16
   85f50:	f1be 0f03 	cmp.w	lr, #3
   85f54:	4419      	add	r1, r3
   85f56:	4403      	add	r3, r0
   85f58:	d921      	bls.n	85f9e <memmove+0xc2>
   85f5a:	460e      	mov	r6, r1
   85f5c:	4674      	mov	r4, lr
   85f5e:	1f1d      	subs	r5, r3, #4
   85f60:	f856 7b04 	ldr.w	r7, [r6], #4
   85f64:	3c04      	subs	r4, #4
   85f66:	2c03      	cmp	r4, #3
   85f68:	f845 7f04 	str.w	r7, [r5, #4]!
   85f6c:	d8f8      	bhi.n	85f60 <memmove+0x84>
   85f6e:	f1ae 0404 	sub.w	r4, lr, #4
   85f72:	f024 0403 	bic.w	r4, r4, #3
   85f76:	3404      	adds	r4, #4
   85f78:	4421      	add	r1, r4
   85f7a:	4423      	add	r3, r4
   85f7c:	f002 0203 	and.w	r2, r2, #3
   85f80:	b162      	cbz	r2, 85f9c <memmove+0xc0>
   85f82:	3b01      	subs	r3, #1
   85f84:	440a      	add	r2, r1
   85f86:	f811 4b01 	ldrb.w	r4, [r1], #1
   85f8a:	428a      	cmp	r2, r1
   85f8c:	f803 4f01 	strb.w	r4, [r3, #1]!
   85f90:	d1f9      	bne.n	85f86 <memmove+0xaa>
   85f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85f94:	4603      	mov	r3, r0
   85f96:	e7f3      	b.n	85f80 <memmove+0xa4>
   85f98:	4603      	mov	r3, r0
   85f9a:	e7f2      	b.n	85f82 <memmove+0xa6>
   85f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85f9e:	4672      	mov	r2, lr
   85fa0:	e7ee      	b.n	85f80 <memmove+0xa4>
   85fa2:	bf00      	nop

00085fa4 <__malloc_lock>:
   85fa4:	4801      	ldr	r0, [pc, #4]	; (85fac <__malloc_lock+0x8>)
   85fa6:	f7ff bc17 	b.w	857d8 <__retarget_lock_acquire_recursive>
   85faa:	bf00      	nop
   85fac:	2007ae70 	.word	0x2007ae70

00085fb0 <__malloc_unlock>:
   85fb0:	4801      	ldr	r0, [pc, #4]	; (85fb8 <__malloc_unlock+0x8>)
   85fb2:	f7ff bc13 	b.w	857dc <__retarget_lock_release_recursive>
   85fb6:	bf00      	nop
   85fb8:	2007ae70 	.word	0x2007ae70

00085fbc <_realloc_r>:
   85fbc:	2900      	cmp	r1, #0
   85fbe:	f000 8094 	beq.w	860ea <_realloc_r+0x12e>
   85fc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85fc6:	460c      	mov	r4, r1
   85fc8:	4615      	mov	r5, r2
   85fca:	b083      	sub	sp, #12
   85fcc:	4680      	mov	r8, r0
   85fce:	f105 060b 	add.w	r6, r5, #11
   85fd2:	f7ff ffe7 	bl	85fa4 <__malloc_lock>
   85fd6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   85fda:	2e16      	cmp	r6, #22
   85fdc:	f02e 0703 	bic.w	r7, lr, #3
   85fe0:	f1a4 0908 	sub.w	r9, r4, #8
   85fe4:	d83c      	bhi.n	86060 <_realloc_r+0xa4>
   85fe6:	2210      	movs	r2, #16
   85fe8:	4616      	mov	r6, r2
   85fea:	42b5      	cmp	r5, r6
   85fec:	d83d      	bhi.n	8606a <_realloc_r+0xae>
   85fee:	4297      	cmp	r7, r2
   85ff0:	da43      	bge.n	8607a <_realloc_r+0xbe>
   85ff2:	4bc6      	ldr	r3, [pc, #792]	; (8630c <_realloc_r+0x350>)
   85ff4:	eb09 0007 	add.w	r0, r9, r7
   85ff8:	6899      	ldr	r1, [r3, #8]
   85ffa:	4288      	cmp	r0, r1
   85ffc:	f000 80c3 	beq.w	86186 <_realloc_r+0x1ca>
   86000:	6843      	ldr	r3, [r0, #4]
   86002:	f023 0101 	bic.w	r1, r3, #1
   86006:	4401      	add	r1, r0
   86008:	6849      	ldr	r1, [r1, #4]
   8600a:	07c9      	lsls	r1, r1, #31
   8600c:	d54d      	bpl.n	860aa <_realloc_r+0xee>
   8600e:	f01e 0f01 	tst.w	lr, #1
   86012:	f000 809b 	beq.w	8614c <_realloc_r+0x190>
   86016:	4629      	mov	r1, r5
   86018:	4640      	mov	r0, r8
   8601a:	f7ff fc61 	bl	858e0 <_malloc_r>
   8601e:	4605      	mov	r5, r0
   86020:	2800      	cmp	r0, #0
   86022:	d03b      	beq.n	8609c <_realloc_r+0xe0>
   86024:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86028:	f1a0 0208 	sub.w	r2, r0, #8
   8602c:	f023 0301 	bic.w	r3, r3, #1
   86030:	444b      	add	r3, r9
   86032:	429a      	cmp	r2, r3
   86034:	f000 812b 	beq.w	8628e <_realloc_r+0x2d2>
   86038:	1f3a      	subs	r2, r7, #4
   8603a:	2a24      	cmp	r2, #36	; 0x24
   8603c:	f200 8118 	bhi.w	86270 <_realloc_r+0x2b4>
   86040:	2a13      	cmp	r2, #19
   86042:	f200 80eb 	bhi.w	8621c <_realloc_r+0x260>
   86046:	4603      	mov	r3, r0
   86048:	4622      	mov	r2, r4
   8604a:	6811      	ldr	r1, [r2, #0]
   8604c:	6019      	str	r1, [r3, #0]
   8604e:	6851      	ldr	r1, [r2, #4]
   86050:	6059      	str	r1, [r3, #4]
   86052:	6892      	ldr	r2, [r2, #8]
   86054:	609a      	str	r2, [r3, #8]
   86056:	4621      	mov	r1, r4
   86058:	4640      	mov	r0, r8
   8605a:	f7ff f923 	bl	852a4 <_free_r>
   8605e:	e01d      	b.n	8609c <_realloc_r+0xe0>
   86060:	f026 0607 	bic.w	r6, r6, #7
   86064:	2e00      	cmp	r6, #0
   86066:	4632      	mov	r2, r6
   86068:	dabf      	bge.n	85fea <_realloc_r+0x2e>
   8606a:	2500      	movs	r5, #0
   8606c:	230c      	movs	r3, #12
   8606e:	4628      	mov	r0, r5
   86070:	f8c8 3000 	str.w	r3, [r8]
   86074:	b003      	add	sp, #12
   86076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8607a:	4625      	mov	r5, r4
   8607c:	1bbb      	subs	r3, r7, r6
   8607e:	2b0f      	cmp	r3, #15
   86080:	f8d9 2004 	ldr.w	r2, [r9, #4]
   86084:	d81d      	bhi.n	860c2 <_realloc_r+0x106>
   86086:	f002 0201 	and.w	r2, r2, #1
   8608a:	433a      	orrs	r2, r7
   8608c:	eb09 0107 	add.w	r1, r9, r7
   86090:	f8c9 2004 	str.w	r2, [r9, #4]
   86094:	684b      	ldr	r3, [r1, #4]
   86096:	f043 0301 	orr.w	r3, r3, #1
   8609a:	604b      	str	r3, [r1, #4]
   8609c:	4640      	mov	r0, r8
   8609e:	f7ff ff87 	bl	85fb0 <__malloc_unlock>
   860a2:	4628      	mov	r0, r5
   860a4:	b003      	add	sp, #12
   860a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   860aa:	f023 0303 	bic.w	r3, r3, #3
   860ae:	18f9      	adds	r1, r7, r3
   860b0:	4291      	cmp	r1, r2
   860b2:	db1d      	blt.n	860f0 <_realloc_r+0x134>
   860b4:	68c3      	ldr	r3, [r0, #12]
   860b6:	6882      	ldr	r2, [r0, #8]
   860b8:	4625      	mov	r5, r4
   860ba:	60d3      	str	r3, [r2, #12]
   860bc:	460f      	mov	r7, r1
   860be:	609a      	str	r2, [r3, #8]
   860c0:	e7dc      	b.n	8607c <_realloc_r+0xc0>
   860c2:	f002 0201 	and.w	r2, r2, #1
   860c6:	eb09 0106 	add.w	r1, r9, r6
   860ca:	f043 0301 	orr.w	r3, r3, #1
   860ce:	4332      	orrs	r2, r6
   860d0:	f8c9 2004 	str.w	r2, [r9, #4]
   860d4:	444f      	add	r7, r9
   860d6:	604b      	str	r3, [r1, #4]
   860d8:	687b      	ldr	r3, [r7, #4]
   860da:	3108      	adds	r1, #8
   860dc:	f043 0301 	orr.w	r3, r3, #1
   860e0:	607b      	str	r3, [r7, #4]
   860e2:	4640      	mov	r0, r8
   860e4:	f7ff f8de 	bl	852a4 <_free_r>
   860e8:	e7d8      	b.n	8609c <_realloc_r+0xe0>
   860ea:	4611      	mov	r1, r2
   860ec:	f7ff bbf8 	b.w	858e0 <_malloc_r>
   860f0:	f01e 0f01 	tst.w	lr, #1
   860f4:	d18f      	bne.n	86016 <_realloc_r+0x5a>
   860f6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   860fa:	eba9 0a01 	sub.w	sl, r9, r1
   860fe:	f8da 1004 	ldr.w	r1, [sl, #4]
   86102:	f021 0103 	bic.w	r1, r1, #3
   86106:	440b      	add	r3, r1
   86108:	443b      	add	r3, r7
   8610a:	4293      	cmp	r3, r2
   8610c:	db26      	blt.n	8615c <_realloc_r+0x1a0>
   8610e:	4655      	mov	r5, sl
   86110:	68c1      	ldr	r1, [r0, #12]
   86112:	6880      	ldr	r0, [r0, #8]
   86114:	1f3a      	subs	r2, r7, #4
   86116:	60c1      	str	r1, [r0, #12]
   86118:	6088      	str	r0, [r1, #8]
   8611a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8611e:	f8da 100c 	ldr.w	r1, [sl, #12]
   86122:	2a24      	cmp	r2, #36	; 0x24
   86124:	60c1      	str	r1, [r0, #12]
   86126:	6088      	str	r0, [r1, #8]
   86128:	d826      	bhi.n	86178 <_realloc_r+0x1bc>
   8612a:	2a13      	cmp	r2, #19
   8612c:	f240 8081 	bls.w	86232 <_realloc_r+0x276>
   86130:	6821      	ldr	r1, [r4, #0]
   86132:	2a1b      	cmp	r2, #27
   86134:	f8ca 1008 	str.w	r1, [sl, #8]
   86138:	6861      	ldr	r1, [r4, #4]
   8613a:	f8ca 100c 	str.w	r1, [sl, #12]
   8613e:	f200 80ad 	bhi.w	8629c <_realloc_r+0x2e0>
   86142:	f104 0008 	add.w	r0, r4, #8
   86146:	f10a 0210 	add.w	r2, sl, #16
   8614a:	e074      	b.n	86236 <_realloc_r+0x27a>
   8614c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   86150:	eba9 0a03 	sub.w	sl, r9, r3
   86154:	f8da 1004 	ldr.w	r1, [sl, #4]
   86158:	f021 0103 	bic.w	r1, r1, #3
   8615c:	187b      	adds	r3, r7, r1
   8615e:	4293      	cmp	r3, r2
   86160:	f6ff af59 	blt.w	86016 <_realloc_r+0x5a>
   86164:	4655      	mov	r5, sl
   86166:	f8da 100c 	ldr.w	r1, [sl, #12]
   8616a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8616e:	1f3a      	subs	r2, r7, #4
   86170:	2a24      	cmp	r2, #36	; 0x24
   86172:	60c1      	str	r1, [r0, #12]
   86174:	6088      	str	r0, [r1, #8]
   86176:	d9d8      	bls.n	8612a <_realloc_r+0x16e>
   86178:	4621      	mov	r1, r4
   8617a:	4628      	mov	r0, r5
   8617c:	461f      	mov	r7, r3
   8617e:	46d1      	mov	r9, sl
   86180:	f7ff feac 	bl	85edc <memmove>
   86184:	e77a      	b.n	8607c <_realloc_r+0xc0>
   86186:	6841      	ldr	r1, [r0, #4]
   86188:	f106 0010 	add.w	r0, r6, #16
   8618c:	f021 0b03 	bic.w	fp, r1, #3
   86190:	44bb      	add	fp, r7
   86192:	4583      	cmp	fp, r0
   86194:	da58      	bge.n	86248 <_realloc_r+0x28c>
   86196:	f01e 0f01 	tst.w	lr, #1
   8619a:	f47f af3c 	bne.w	86016 <_realloc_r+0x5a>
   8619e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   861a2:	eba9 0a01 	sub.w	sl, r9, r1
   861a6:	f8da 1004 	ldr.w	r1, [sl, #4]
   861aa:	f021 0103 	bic.w	r1, r1, #3
   861ae:	448b      	add	fp, r1
   861b0:	4558      	cmp	r0, fp
   861b2:	dcd3      	bgt.n	8615c <_realloc_r+0x1a0>
   861b4:	4655      	mov	r5, sl
   861b6:	f8da 100c 	ldr.w	r1, [sl, #12]
   861ba:	f855 0f08 	ldr.w	r0, [r5, #8]!
   861be:	1f3a      	subs	r2, r7, #4
   861c0:	2a24      	cmp	r2, #36	; 0x24
   861c2:	60c1      	str	r1, [r0, #12]
   861c4:	6088      	str	r0, [r1, #8]
   861c6:	f200 808d 	bhi.w	862e4 <_realloc_r+0x328>
   861ca:	2a13      	cmp	r2, #19
   861cc:	f240 8087 	bls.w	862de <_realloc_r+0x322>
   861d0:	6821      	ldr	r1, [r4, #0]
   861d2:	2a1b      	cmp	r2, #27
   861d4:	f8ca 1008 	str.w	r1, [sl, #8]
   861d8:	6861      	ldr	r1, [r4, #4]
   861da:	f8ca 100c 	str.w	r1, [sl, #12]
   861de:	f200 8088 	bhi.w	862f2 <_realloc_r+0x336>
   861e2:	f104 0108 	add.w	r1, r4, #8
   861e6:	f10a 0210 	add.w	r2, sl, #16
   861ea:	6808      	ldr	r0, [r1, #0]
   861ec:	6010      	str	r0, [r2, #0]
   861ee:	6848      	ldr	r0, [r1, #4]
   861f0:	6050      	str	r0, [r2, #4]
   861f2:	6889      	ldr	r1, [r1, #8]
   861f4:	6091      	str	r1, [r2, #8]
   861f6:	ebab 0206 	sub.w	r2, fp, r6
   861fa:	eb0a 0106 	add.w	r1, sl, r6
   861fe:	f042 0201 	orr.w	r2, r2, #1
   86202:	6099      	str	r1, [r3, #8]
   86204:	604a      	str	r2, [r1, #4]
   86206:	f8da 3004 	ldr.w	r3, [sl, #4]
   8620a:	4640      	mov	r0, r8
   8620c:	f003 0301 	and.w	r3, r3, #1
   86210:	431e      	orrs	r6, r3
   86212:	f8ca 6004 	str.w	r6, [sl, #4]
   86216:	f7ff fecb 	bl	85fb0 <__malloc_unlock>
   8621a:	e742      	b.n	860a2 <_realloc_r+0xe6>
   8621c:	6823      	ldr	r3, [r4, #0]
   8621e:	2a1b      	cmp	r2, #27
   86220:	6003      	str	r3, [r0, #0]
   86222:	6863      	ldr	r3, [r4, #4]
   86224:	6043      	str	r3, [r0, #4]
   86226:	d827      	bhi.n	86278 <_realloc_r+0x2bc>
   86228:	f100 0308 	add.w	r3, r0, #8
   8622c:	f104 0208 	add.w	r2, r4, #8
   86230:	e70b      	b.n	8604a <_realloc_r+0x8e>
   86232:	4620      	mov	r0, r4
   86234:	462a      	mov	r2, r5
   86236:	6801      	ldr	r1, [r0, #0]
   86238:	461f      	mov	r7, r3
   8623a:	6011      	str	r1, [r2, #0]
   8623c:	6841      	ldr	r1, [r0, #4]
   8623e:	46d1      	mov	r9, sl
   86240:	6051      	str	r1, [r2, #4]
   86242:	6883      	ldr	r3, [r0, #8]
   86244:	6093      	str	r3, [r2, #8]
   86246:	e719      	b.n	8607c <_realloc_r+0xc0>
   86248:	ebab 0b06 	sub.w	fp, fp, r6
   8624c:	eb09 0106 	add.w	r1, r9, r6
   86250:	f04b 0201 	orr.w	r2, fp, #1
   86254:	6099      	str	r1, [r3, #8]
   86256:	604a      	str	r2, [r1, #4]
   86258:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8625c:	4640      	mov	r0, r8
   8625e:	f003 0301 	and.w	r3, r3, #1
   86262:	431e      	orrs	r6, r3
   86264:	f844 6c04 	str.w	r6, [r4, #-4]
   86268:	f7ff fea2 	bl	85fb0 <__malloc_unlock>
   8626c:	4625      	mov	r5, r4
   8626e:	e718      	b.n	860a2 <_realloc_r+0xe6>
   86270:	4621      	mov	r1, r4
   86272:	f7ff fe33 	bl	85edc <memmove>
   86276:	e6ee      	b.n	86056 <_realloc_r+0x9a>
   86278:	68a3      	ldr	r3, [r4, #8]
   8627a:	2a24      	cmp	r2, #36	; 0x24
   8627c:	6083      	str	r3, [r0, #8]
   8627e:	68e3      	ldr	r3, [r4, #12]
   86280:	60c3      	str	r3, [r0, #12]
   86282:	d018      	beq.n	862b6 <_realloc_r+0x2fa>
   86284:	f100 0310 	add.w	r3, r0, #16
   86288:	f104 0210 	add.w	r2, r4, #16
   8628c:	e6dd      	b.n	8604a <_realloc_r+0x8e>
   8628e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   86292:	4625      	mov	r5, r4
   86294:	f023 0303 	bic.w	r3, r3, #3
   86298:	441f      	add	r7, r3
   8629a:	e6ef      	b.n	8607c <_realloc_r+0xc0>
   8629c:	68a1      	ldr	r1, [r4, #8]
   8629e:	2a24      	cmp	r2, #36	; 0x24
   862a0:	f8ca 1010 	str.w	r1, [sl, #16]
   862a4:	68e1      	ldr	r1, [r4, #12]
   862a6:	f8ca 1014 	str.w	r1, [sl, #20]
   862aa:	d00d      	beq.n	862c8 <_realloc_r+0x30c>
   862ac:	f104 0010 	add.w	r0, r4, #16
   862b0:	f10a 0218 	add.w	r2, sl, #24
   862b4:	e7bf      	b.n	86236 <_realloc_r+0x27a>
   862b6:	6922      	ldr	r2, [r4, #16]
   862b8:	f100 0318 	add.w	r3, r0, #24
   862bc:	6102      	str	r2, [r0, #16]
   862be:	6961      	ldr	r1, [r4, #20]
   862c0:	f104 0218 	add.w	r2, r4, #24
   862c4:	6141      	str	r1, [r0, #20]
   862c6:	e6c0      	b.n	8604a <_realloc_r+0x8e>
   862c8:	6922      	ldr	r2, [r4, #16]
   862ca:	f104 0018 	add.w	r0, r4, #24
   862ce:	f8ca 2018 	str.w	r2, [sl, #24]
   862d2:	6961      	ldr	r1, [r4, #20]
   862d4:	f10a 0220 	add.w	r2, sl, #32
   862d8:	f8ca 101c 	str.w	r1, [sl, #28]
   862dc:	e7ab      	b.n	86236 <_realloc_r+0x27a>
   862de:	4621      	mov	r1, r4
   862e0:	462a      	mov	r2, r5
   862e2:	e782      	b.n	861ea <_realloc_r+0x22e>
   862e4:	4621      	mov	r1, r4
   862e6:	4628      	mov	r0, r5
   862e8:	9301      	str	r3, [sp, #4]
   862ea:	f7ff fdf7 	bl	85edc <memmove>
   862ee:	9b01      	ldr	r3, [sp, #4]
   862f0:	e781      	b.n	861f6 <_realloc_r+0x23a>
   862f2:	68a1      	ldr	r1, [r4, #8]
   862f4:	2a24      	cmp	r2, #36	; 0x24
   862f6:	f8ca 1010 	str.w	r1, [sl, #16]
   862fa:	68e1      	ldr	r1, [r4, #12]
   862fc:	f8ca 1014 	str.w	r1, [sl, #20]
   86300:	d006      	beq.n	86310 <_realloc_r+0x354>
   86302:	f104 0110 	add.w	r1, r4, #16
   86306:	f10a 0218 	add.w	r2, sl, #24
   8630a:	e76e      	b.n	861ea <_realloc_r+0x22e>
   8630c:	20070728 	.word	0x20070728
   86310:	6922      	ldr	r2, [r4, #16]
   86312:	f104 0118 	add.w	r1, r4, #24
   86316:	f8ca 2018 	str.w	r2, [sl, #24]
   8631a:	6960      	ldr	r0, [r4, #20]
   8631c:	f10a 0220 	add.w	r2, sl, #32
   86320:	f8ca 001c 	str.w	r0, [sl, #28]
   86324:	e761      	b.n	861ea <_realloc_r+0x22e>
   86326:	bf00      	nop

00086328 <_sbrk_r>:
   86328:	b538      	push	{r3, r4, r5, lr}
   8632a:	2300      	movs	r3, #0
   8632c:	4c06      	ldr	r4, [pc, #24]	; (86348 <_sbrk_r+0x20>)
   8632e:	4605      	mov	r5, r0
   86330:	4608      	mov	r0, r1
   86332:	6023      	str	r3, [r4, #0]
   86334:	f7fc fc20 	bl	82b78 <_sbrk>
   86338:	1c43      	adds	r3, r0, #1
   8633a:	d000      	beq.n	8633e <_sbrk_r+0x16>
   8633c:	bd38      	pop	{r3, r4, r5, pc}
   8633e:	6823      	ldr	r3, [r4, #0]
   86340:	2b00      	cmp	r3, #0
   86342:	d0fb      	beq.n	8633c <_sbrk_r+0x14>
   86344:	602b      	str	r3, [r5, #0]
   86346:	bd38      	pop	{r3, r4, r5, pc}
   86348:	2007ae84 	.word	0x2007ae84

0008634c <__sread>:
   8634c:	b510      	push	{r4, lr}
   8634e:	460c      	mov	r4, r1
   86350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86354:	f000 f9f4 	bl	86740 <_read_r>
   86358:	2800      	cmp	r0, #0
   8635a:	db03      	blt.n	86364 <__sread+0x18>
   8635c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8635e:	4403      	add	r3, r0
   86360:	6523      	str	r3, [r4, #80]	; 0x50
   86362:	bd10      	pop	{r4, pc}
   86364:	89a3      	ldrh	r3, [r4, #12]
   86366:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8636a:	81a3      	strh	r3, [r4, #12]
   8636c:	bd10      	pop	{r4, pc}
   8636e:	bf00      	nop

00086370 <__swrite>:
   86370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86374:	460c      	mov	r4, r1
   86376:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8637a:	461f      	mov	r7, r3
   8637c:	05cb      	lsls	r3, r1, #23
   8637e:	4616      	mov	r6, r2
   86380:	4605      	mov	r5, r0
   86382:	d507      	bpl.n	86394 <__swrite+0x24>
   86384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86388:	2302      	movs	r3, #2
   8638a:	2200      	movs	r2, #0
   8638c:	f000 f9c2 	bl	86714 <_lseek_r>
   86390:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   86394:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86398:	81a1      	strh	r1, [r4, #12]
   8639a:	463b      	mov	r3, r7
   8639c:	4632      	mov	r2, r6
   8639e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   863a2:	4628      	mov	r0, r5
   863a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   863a8:	f000 b8a2 	b.w	864f0 <_write_r>

000863ac <__sseek>:
   863ac:	b510      	push	{r4, lr}
   863ae:	460c      	mov	r4, r1
   863b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   863b4:	f000 f9ae 	bl	86714 <_lseek_r>
   863b8:	89a3      	ldrh	r3, [r4, #12]
   863ba:	1c42      	adds	r2, r0, #1
   863bc:	bf0e      	itee	eq
   863be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   863c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   863c6:	6520      	strne	r0, [r4, #80]	; 0x50
   863c8:	81a3      	strh	r3, [r4, #12]
   863ca:	bd10      	pop	{r4, pc}

000863cc <__sclose>:
   863cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   863d0:	f000 b906 	b.w	865e0 <_close_r>

000863d4 <__swbuf_r>:
   863d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   863d6:	460d      	mov	r5, r1
   863d8:	4614      	mov	r4, r2
   863da:	4606      	mov	r6, r0
   863dc:	b110      	cbz	r0, 863e4 <__swbuf_r+0x10>
   863de:	6b83      	ldr	r3, [r0, #56]	; 0x38
   863e0:	2b00      	cmp	r3, #0
   863e2:	d04b      	beq.n	8647c <__swbuf_r+0xa8>
   863e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   863e8:	69a3      	ldr	r3, [r4, #24]
   863ea:	b291      	uxth	r1, r2
   863ec:	0708      	lsls	r0, r1, #28
   863ee:	60a3      	str	r3, [r4, #8]
   863f0:	d539      	bpl.n	86466 <__swbuf_r+0x92>
   863f2:	6923      	ldr	r3, [r4, #16]
   863f4:	2b00      	cmp	r3, #0
   863f6:	d036      	beq.n	86466 <__swbuf_r+0x92>
   863f8:	b2ed      	uxtb	r5, r5
   863fa:	0489      	lsls	r1, r1, #18
   863fc:	462f      	mov	r7, r5
   863fe:	d515      	bpl.n	8642c <__swbuf_r+0x58>
   86400:	6822      	ldr	r2, [r4, #0]
   86402:	6961      	ldr	r1, [r4, #20]
   86404:	1ad3      	subs	r3, r2, r3
   86406:	428b      	cmp	r3, r1
   86408:	da1c      	bge.n	86444 <__swbuf_r+0x70>
   8640a:	3301      	adds	r3, #1
   8640c:	68a1      	ldr	r1, [r4, #8]
   8640e:	1c50      	adds	r0, r2, #1
   86410:	3901      	subs	r1, #1
   86412:	60a1      	str	r1, [r4, #8]
   86414:	6020      	str	r0, [r4, #0]
   86416:	7015      	strb	r5, [r2, #0]
   86418:	6962      	ldr	r2, [r4, #20]
   8641a:	429a      	cmp	r2, r3
   8641c:	d01a      	beq.n	86454 <__swbuf_r+0x80>
   8641e:	89a3      	ldrh	r3, [r4, #12]
   86420:	07db      	lsls	r3, r3, #31
   86422:	d501      	bpl.n	86428 <__swbuf_r+0x54>
   86424:	2d0a      	cmp	r5, #10
   86426:	d015      	beq.n	86454 <__swbuf_r+0x80>
   86428:	4638      	mov	r0, r7
   8642a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8642c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8642e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   86432:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   86436:	81a2      	strh	r2, [r4, #12]
   86438:	6822      	ldr	r2, [r4, #0]
   8643a:	6661      	str	r1, [r4, #100]	; 0x64
   8643c:	6961      	ldr	r1, [r4, #20]
   8643e:	1ad3      	subs	r3, r2, r3
   86440:	428b      	cmp	r3, r1
   86442:	dbe2      	blt.n	8640a <__swbuf_r+0x36>
   86444:	4621      	mov	r1, r4
   86446:	4630      	mov	r0, r6
   86448:	f7fe fdae 	bl	84fa8 <_fflush_r>
   8644c:	b940      	cbnz	r0, 86460 <__swbuf_r+0x8c>
   8644e:	2301      	movs	r3, #1
   86450:	6822      	ldr	r2, [r4, #0]
   86452:	e7db      	b.n	8640c <__swbuf_r+0x38>
   86454:	4621      	mov	r1, r4
   86456:	4630      	mov	r0, r6
   86458:	f7fe fda6 	bl	84fa8 <_fflush_r>
   8645c:	2800      	cmp	r0, #0
   8645e:	d0e3      	beq.n	86428 <__swbuf_r+0x54>
   86460:	f04f 37ff 	mov.w	r7, #4294967295
   86464:	e7e0      	b.n	86428 <__swbuf_r+0x54>
   86466:	4621      	mov	r1, r4
   86468:	4630      	mov	r0, r6
   8646a:	f7fe fc8d 	bl	84d88 <__swsetup_r>
   8646e:	2800      	cmp	r0, #0
   86470:	d1f6      	bne.n	86460 <__swbuf_r+0x8c>
   86472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86476:	6923      	ldr	r3, [r4, #16]
   86478:	b291      	uxth	r1, r2
   8647a:	e7bd      	b.n	863f8 <__swbuf_r+0x24>
   8647c:	f7fe fdec 	bl	85058 <__sinit>
   86480:	e7b0      	b.n	863e4 <__swbuf_r+0x10>
   86482:	bf00      	nop

00086484 <_wcrtomb_r>:
   86484:	b5f0      	push	{r4, r5, r6, r7, lr}
   86486:	4606      	mov	r6, r0
   86488:	b085      	sub	sp, #20
   8648a:	461f      	mov	r7, r3
   8648c:	b189      	cbz	r1, 864b2 <_wcrtomb_r+0x2e>
   8648e:	4c10      	ldr	r4, [pc, #64]	; (864d0 <_wcrtomb_r+0x4c>)
   86490:	4d10      	ldr	r5, [pc, #64]	; (864d4 <_wcrtomb_r+0x50>)
   86492:	6824      	ldr	r4, [r4, #0]
   86494:	6b64      	ldr	r4, [r4, #52]	; 0x34
   86496:	2c00      	cmp	r4, #0
   86498:	bf08      	it	eq
   8649a:	462c      	moveq	r4, r5
   8649c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   864a0:	47a0      	blx	r4
   864a2:	1c43      	adds	r3, r0, #1
   864a4:	d103      	bne.n	864ae <_wcrtomb_r+0x2a>
   864a6:	2200      	movs	r2, #0
   864a8:	238a      	movs	r3, #138	; 0x8a
   864aa:	603a      	str	r2, [r7, #0]
   864ac:	6033      	str	r3, [r6, #0]
   864ae:	b005      	add	sp, #20
   864b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   864b2:	460c      	mov	r4, r1
   864b4:	4a06      	ldr	r2, [pc, #24]	; (864d0 <_wcrtomb_r+0x4c>)
   864b6:	4d07      	ldr	r5, [pc, #28]	; (864d4 <_wcrtomb_r+0x50>)
   864b8:	6811      	ldr	r1, [r2, #0]
   864ba:	4622      	mov	r2, r4
   864bc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   864be:	a901      	add	r1, sp, #4
   864c0:	2c00      	cmp	r4, #0
   864c2:	bf08      	it	eq
   864c4:	462c      	moveq	r4, r5
   864c6:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   864ca:	47a0      	blx	r4
   864cc:	e7e9      	b.n	864a2 <_wcrtomb_r+0x1e>
   864ce:	bf00      	nop
   864d0:	20070188 	.word	0x20070188
   864d4:	200705bc 	.word	0x200705bc

000864d8 <__ascii_wctomb>:
   864d8:	b119      	cbz	r1, 864e2 <__ascii_wctomb+0xa>
   864da:	2aff      	cmp	r2, #255	; 0xff
   864dc:	d803      	bhi.n	864e6 <__ascii_wctomb+0xe>
   864de:	700a      	strb	r2, [r1, #0]
   864e0:	2101      	movs	r1, #1
   864e2:	4608      	mov	r0, r1
   864e4:	4770      	bx	lr
   864e6:	238a      	movs	r3, #138	; 0x8a
   864e8:	f04f 31ff 	mov.w	r1, #4294967295
   864ec:	6003      	str	r3, [r0, #0]
   864ee:	e7f8      	b.n	864e2 <__ascii_wctomb+0xa>

000864f0 <_write_r>:
   864f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   864f2:	460e      	mov	r6, r1
   864f4:	2500      	movs	r5, #0
   864f6:	4c08      	ldr	r4, [pc, #32]	; (86518 <_write_r+0x28>)
   864f8:	4611      	mov	r1, r2
   864fa:	4607      	mov	r7, r0
   864fc:	461a      	mov	r2, r3
   864fe:	4630      	mov	r0, r6
   86500:	6025      	str	r5, [r4, #0]
   86502:	f7fb fef1 	bl	822e8 <_write>
   86506:	1c43      	adds	r3, r0, #1
   86508:	d000      	beq.n	8650c <_write_r+0x1c>
   8650a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8650c:	6823      	ldr	r3, [r4, #0]
   8650e:	2b00      	cmp	r3, #0
   86510:	d0fb      	beq.n	8650a <_write_r+0x1a>
   86512:	603b      	str	r3, [r7, #0]
   86514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86516:	bf00      	nop
   86518:	2007ae84 	.word	0x2007ae84

0008651c <__register_exitproc>:
   8651c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86520:	4d2c      	ldr	r5, [pc, #176]	; (865d4 <__register_exitproc+0xb8>)
   86522:	4606      	mov	r6, r0
   86524:	6828      	ldr	r0, [r5, #0]
   86526:	4698      	mov	r8, r3
   86528:	460f      	mov	r7, r1
   8652a:	4691      	mov	r9, r2
   8652c:	f7ff f954 	bl	857d8 <__retarget_lock_acquire_recursive>
   86530:	4b29      	ldr	r3, [pc, #164]	; (865d8 <__register_exitproc+0xbc>)
   86532:	681c      	ldr	r4, [r3, #0]
   86534:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   86538:	2b00      	cmp	r3, #0
   8653a:	d03e      	beq.n	865ba <__register_exitproc+0x9e>
   8653c:	685a      	ldr	r2, [r3, #4]
   8653e:	2a1f      	cmp	r2, #31
   86540:	dc1c      	bgt.n	8657c <__register_exitproc+0x60>
   86542:	f102 0e01 	add.w	lr, r2, #1
   86546:	b176      	cbz	r6, 86566 <__register_exitproc+0x4a>
   86548:	2101      	movs	r1, #1
   8654a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8654e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   86552:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   86556:	4091      	lsls	r1, r2
   86558:	4308      	orrs	r0, r1
   8655a:	2e02      	cmp	r6, #2
   8655c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   86560:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   86564:	d023      	beq.n	865ae <__register_exitproc+0x92>
   86566:	3202      	adds	r2, #2
   86568:	f8c3 e004 	str.w	lr, [r3, #4]
   8656c:	6828      	ldr	r0, [r5, #0]
   8656e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   86572:	f7ff f933 	bl	857dc <__retarget_lock_release_recursive>
   86576:	2000      	movs	r0, #0
   86578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8657c:	4b17      	ldr	r3, [pc, #92]	; (865dc <__register_exitproc+0xc0>)
   8657e:	b30b      	cbz	r3, 865c4 <__register_exitproc+0xa8>
   86580:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86584:	f7ff f9a4 	bl	858d0 <malloc>
   86588:	4603      	mov	r3, r0
   8658a:	b1d8      	cbz	r0, 865c4 <__register_exitproc+0xa8>
   8658c:	2000      	movs	r0, #0
   8658e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   86592:	f04f 0e01 	mov.w	lr, #1
   86596:	6058      	str	r0, [r3, #4]
   86598:	6019      	str	r1, [r3, #0]
   8659a:	4602      	mov	r2, r0
   8659c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   865a0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   865a4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   865a8:	2e00      	cmp	r6, #0
   865aa:	d0dc      	beq.n	86566 <__register_exitproc+0x4a>
   865ac:	e7cc      	b.n	86548 <__register_exitproc+0x2c>
   865ae:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   865b2:	4301      	orrs	r1, r0
   865b4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   865b8:	e7d5      	b.n	86566 <__register_exitproc+0x4a>
   865ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   865be:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   865c2:	e7bb      	b.n	8653c <__register_exitproc+0x20>
   865c4:	6828      	ldr	r0, [r5, #0]
   865c6:	f7ff f909 	bl	857dc <__retarget_lock_release_recursive>
   865ca:	f04f 30ff 	mov.w	r0, #4294967295
   865ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   865d2:	bf00      	nop
   865d4:	200705b8 	.word	0x200705b8
   865d8:	00086b80 	.word	0x00086b80
   865dc:	000858d1 	.word	0x000858d1

000865e0 <_close_r>:
   865e0:	b538      	push	{r3, r4, r5, lr}
   865e2:	2300      	movs	r3, #0
   865e4:	4c06      	ldr	r4, [pc, #24]	; (86600 <_close_r+0x20>)
   865e6:	4605      	mov	r5, r0
   865e8:	4608      	mov	r0, r1
   865ea:	6023      	str	r3, [r4, #0]
   865ec:	f7fc fae0 	bl	82bb0 <_close>
   865f0:	1c43      	adds	r3, r0, #1
   865f2:	d000      	beq.n	865f6 <_close_r+0x16>
   865f4:	bd38      	pop	{r3, r4, r5, pc}
   865f6:	6823      	ldr	r3, [r4, #0]
   865f8:	2b00      	cmp	r3, #0
   865fa:	d0fb      	beq.n	865f4 <_close_r+0x14>
   865fc:	602b      	str	r3, [r5, #0]
   865fe:	bd38      	pop	{r3, r4, r5, pc}
   86600:	2007ae84 	.word	0x2007ae84

00086604 <_fclose_r>:
   86604:	b570      	push	{r4, r5, r6, lr}
   86606:	b159      	cbz	r1, 86620 <_fclose_r+0x1c>
   86608:	4605      	mov	r5, r0
   8660a:	460c      	mov	r4, r1
   8660c:	b110      	cbz	r0, 86614 <_fclose_r+0x10>
   8660e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86610:	2b00      	cmp	r3, #0
   86612:	d03c      	beq.n	8668e <_fclose_r+0x8a>
   86614:	6e63      	ldr	r3, [r4, #100]	; 0x64
   86616:	07d8      	lsls	r0, r3, #31
   86618:	d505      	bpl.n	86626 <_fclose_r+0x22>
   8661a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8661e:	b92b      	cbnz	r3, 8662c <_fclose_r+0x28>
   86620:	2600      	movs	r6, #0
   86622:	4630      	mov	r0, r6
   86624:	bd70      	pop	{r4, r5, r6, pc}
   86626:	89a3      	ldrh	r3, [r4, #12]
   86628:	0599      	lsls	r1, r3, #22
   8662a:	d53c      	bpl.n	866a6 <_fclose_r+0xa2>
   8662c:	4621      	mov	r1, r4
   8662e:	4628      	mov	r0, r5
   86630:	f7fe fc1e 	bl	84e70 <__sflush_r>
   86634:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86636:	4606      	mov	r6, r0
   86638:	b133      	cbz	r3, 86648 <_fclose_r+0x44>
   8663a:	69e1      	ldr	r1, [r4, #28]
   8663c:	4628      	mov	r0, r5
   8663e:	4798      	blx	r3
   86640:	2800      	cmp	r0, #0
   86642:	bfb8      	it	lt
   86644:	f04f 36ff 	movlt.w	r6, #4294967295
   86648:	89a3      	ldrh	r3, [r4, #12]
   8664a:	061a      	lsls	r2, r3, #24
   8664c:	d422      	bmi.n	86694 <_fclose_r+0x90>
   8664e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86650:	b141      	cbz	r1, 86664 <_fclose_r+0x60>
   86652:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86656:	4299      	cmp	r1, r3
   86658:	d002      	beq.n	86660 <_fclose_r+0x5c>
   8665a:	4628      	mov	r0, r5
   8665c:	f7fe fe22 	bl	852a4 <_free_r>
   86660:	2300      	movs	r3, #0
   86662:	6323      	str	r3, [r4, #48]	; 0x30
   86664:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86666:	b121      	cbz	r1, 86672 <_fclose_r+0x6e>
   86668:	4628      	mov	r0, r5
   8666a:	f7fe fe1b 	bl	852a4 <_free_r>
   8666e:	2300      	movs	r3, #0
   86670:	6463      	str	r3, [r4, #68]	; 0x44
   86672:	f7fe fd21 	bl	850b8 <__sfp_lock_acquire>
   86676:	2200      	movs	r2, #0
   86678:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8667a:	81a2      	strh	r2, [r4, #12]
   8667c:	07db      	lsls	r3, r3, #31
   8667e:	d50e      	bpl.n	8669e <_fclose_r+0x9a>
   86680:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86682:	f7ff f8a7 	bl	857d4 <__retarget_lock_close_recursive>
   86686:	f7fe fd1d 	bl	850c4 <__sfp_lock_release>
   8668a:	4630      	mov	r0, r6
   8668c:	bd70      	pop	{r4, r5, r6, pc}
   8668e:	f7fe fce3 	bl	85058 <__sinit>
   86692:	e7bf      	b.n	86614 <_fclose_r+0x10>
   86694:	6921      	ldr	r1, [r4, #16]
   86696:	4628      	mov	r0, r5
   86698:	f7fe fe04 	bl	852a4 <_free_r>
   8669c:	e7d7      	b.n	8664e <_fclose_r+0x4a>
   8669e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   866a0:	f7ff f89c 	bl	857dc <__retarget_lock_release_recursive>
   866a4:	e7ec      	b.n	86680 <_fclose_r+0x7c>
   866a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   866a8:	f7ff f896 	bl	857d8 <__retarget_lock_acquire_recursive>
   866ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   866b0:	2b00      	cmp	r3, #0
   866b2:	d1bb      	bne.n	8662c <_fclose_r+0x28>
   866b4:	6e66      	ldr	r6, [r4, #100]	; 0x64
   866b6:	f016 0601 	ands.w	r6, r6, #1
   866ba:	d1b1      	bne.n	86620 <_fclose_r+0x1c>
   866bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   866be:	f7ff f88d 	bl	857dc <__retarget_lock_release_recursive>
   866c2:	4630      	mov	r0, r6
   866c4:	bd70      	pop	{r4, r5, r6, pc}
   866c6:	bf00      	nop

000866c8 <_fstat_r>:
   866c8:	b570      	push	{r4, r5, r6, lr}
   866ca:	460d      	mov	r5, r1
   866cc:	2300      	movs	r3, #0
   866ce:	4c07      	ldr	r4, [pc, #28]	; (866ec <_fstat_r+0x24>)
   866d0:	4606      	mov	r6, r0
   866d2:	4611      	mov	r1, r2
   866d4:	4628      	mov	r0, r5
   866d6:	6023      	str	r3, [r4, #0]
   866d8:	f7fc fa6d 	bl	82bb6 <_fstat>
   866dc:	1c43      	adds	r3, r0, #1
   866de:	d000      	beq.n	866e2 <_fstat_r+0x1a>
   866e0:	bd70      	pop	{r4, r5, r6, pc}
   866e2:	6823      	ldr	r3, [r4, #0]
   866e4:	2b00      	cmp	r3, #0
   866e6:	d0fb      	beq.n	866e0 <_fstat_r+0x18>
   866e8:	6033      	str	r3, [r6, #0]
   866ea:	bd70      	pop	{r4, r5, r6, pc}
   866ec:	2007ae84 	.word	0x2007ae84

000866f0 <_isatty_r>:
   866f0:	b538      	push	{r3, r4, r5, lr}
   866f2:	2300      	movs	r3, #0
   866f4:	4c06      	ldr	r4, [pc, #24]	; (86710 <_isatty_r+0x20>)
   866f6:	4605      	mov	r5, r0
   866f8:	4608      	mov	r0, r1
   866fa:	6023      	str	r3, [r4, #0]
   866fc:	f7fc fa60 	bl	82bc0 <_isatty>
   86700:	1c43      	adds	r3, r0, #1
   86702:	d000      	beq.n	86706 <_isatty_r+0x16>
   86704:	bd38      	pop	{r3, r4, r5, pc}
   86706:	6823      	ldr	r3, [r4, #0]
   86708:	2b00      	cmp	r3, #0
   8670a:	d0fb      	beq.n	86704 <_isatty_r+0x14>
   8670c:	602b      	str	r3, [r5, #0]
   8670e:	bd38      	pop	{r3, r4, r5, pc}
   86710:	2007ae84 	.word	0x2007ae84

00086714 <_lseek_r>:
   86714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86716:	460e      	mov	r6, r1
   86718:	2500      	movs	r5, #0
   8671a:	4c08      	ldr	r4, [pc, #32]	; (8673c <_lseek_r+0x28>)
   8671c:	4611      	mov	r1, r2
   8671e:	4607      	mov	r7, r0
   86720:	461a      	mov	r2, r3
   86722:	4630      	mov	r0, r6
   86724:	6025      	str	r5, [r4, #0]
   86726:	f7fc fa4d 	bl	82bc4 <_lseek>
   8672a:	1c43      	adds	r3, r0, #1
   8672c:	d000      	beq.n	86730 <_lseek_r+0x1c>
   8672e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86730:	6823      	ldr	r3, [r4, #0]
   86732:	2b00      	cmp	r3, #0
   86734:	d0fb      	beq.n	8672e <_lseek_r+0x1a>
   86736:	603b      	str	r3, [r7, #0]
   86738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8673a:	bf00      	nop
   8673c:	2007ae84 	.word	0x2007ae84

00086740 <_read_r>:
   86740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86742:	460e      	mov	r6, r1
   86744:	2500      	movs	r5, #0
   86746:	4c08      	ldr	r4, [pc, #32]	; (86768 <_read_r+0x28>)
   86748:	4611      	mov	r1, r2
   8674a:	4607      	mov	r7, r0
   8674c:	461a      	mov	r2, r3
   8674e:	4630      	mov	r0, r6
   86750:	6025      	str	r5, [r4, #0]
   86752:	f7f9 fd39 	bl	801c8 <_read>
   86756:	1c43      	adds	r3, r0, #1
   86758:	d000      	beq.n	8675c <_read_r+0x1c>
   8675a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8675c:	6823      	ldr	r3, [r4, #0]
   8675e:	2b00      	cmp	r3, #0
   86760:	d0fb      	beq.n	8675a <_read_r+0x1a>
   86762:	603b      	str	r3, [r7, #0]
   86764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86766:	bf00      	nop
   86768:	2007ae84 	.word	0x2007ae84

0008676c <__aeabi_uldivmod>:
   8676c:	b953      	cbnz	r3, 86784 <__aeabi_uldivmod+0x18>
   8676e:	b94a      	cbnz	r2, 86784 <__aeabi_uldivmod+0x18>
   86770:	2900      	cmp	r1, #0
   86772:	bf08      	it	eq
   86774:	2800      	cmpeq	r0, #0
   86776:	bf1c      	itt	ne
   86778:	f04f 31ff 	movne.w	r1, #4294967295
   8677c:	f04f 30ff 	movne.w	r0, #4294967295
   86780:	f000 b97a 	b.w	86a78 <__aeabi_idiv0>
   86784:	f1ad 0c08 	sub.w	ip, sp, #8
   86788:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8678c:	f000 f806 	bl	8679c <__udivmoddi4>
   86790:	f8dd e004 	ldr.w	lr, [sp, #4]
   86794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86798:	b004      	add	sp, #16
   8679a:	4770      	bx	lr

0008679c <__udivmoddi4>:
   8679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   867a0:	468c      	mov	ip, r1
   867a2:	460e      	mov	r6, r1
   867a4:	4604      	mov	r4, r0
   867a6:	9d08      	ldr	r5, [sp, #32]
   867a8:	2b00      	cmp	r3, #0
   867aa:	d150      	bne.n	8684e <__udivmoddi4+0xb2>
   867ac:	428a      	cmp	r2, r1
   867ae:	4617      	mov	r7, r2
   867b0:	d96c      	bls.n	8688c <__udivmoddi4+0xf0>
   867b2:	fab2 fe82 	clz	lr, r2
   867b6:	f1be 0f00 	cmp.w	lr, #0
   867ba:	d00b      	beq.n	867d4 <__udivmoddi4+0x38>
   867bc:	f1ce 0c20 	rsb	ip, lr, #32
   867c0:	fa01 f60e 	lsl.w	r6, r1, lr
   867c4:	fa20 fc0c 	lsr.w	ip, r0, ip
   867c8:	fa02 f70e 	lsl.w	r7, r2, lr
   867cc:	ea4c 0c06 	orr.w	ip, ip, r6
   867d0:	fa00 f40e 	lsl.w	r4, r0, lr
   867d4:	0c3a      	lsrs	r2, r7, #16
   867d6:	fbbc f9f2 	udiv	r9, ip, r2
   867da:	b2bb      	uxth	r3, r7
   867dc:	fb02 cc19 	mls	ip, r2, r9, ip
   867e0:	fb09 fa03 	mul.w	sl, r9, r3
   867e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   867e8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   867ec:	45b2      	cmp	sl, r6
   867ee:	d90a      	bls.n	86806 <__udivmoddi4+0x6a>
   867f0:	19f6      	adds	r6, r6, r7
   867f2:	f109 31ff 	add.w	r1, r9, #4294967295
   867f6:	f080 8125 	bcs.w	86a44 <__udivmoddi4+0x2a8>
   867fa:	45b2      	cmp	sl, r6
   867fc:	f240 8122 	bls.w	86a44 <__udivmoddi4+0x2a8>
   86800:	f1a9 0902 	sub.w	r9, r9, #2
   86804:	443e      	add	r6, r7
   86806:	eba6 060a 	sub.w	r6, r6, sl
   8680a:	fbb6 f0f2 	udiv	r0, r6, r2
   8680e:	fb02 6610 	mls	r6, r2, r0, r6
   86812:	fb00 f303 	mul.w	r3, r0, r3
   86816:	b2a4      	uxth	r4, r4
   86818:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8681c:	42a3      	cmp	r3, r4
   8681e:	d909      	bls.n	86834 <__udivmoddi4+0x98>
   86820:	19e4      	adds	r4, r4, r7
   86822:	f100 32ff 	add.w	r2, r0, #4294967295
   86826:	f080 810b 	bcs.w	86a40 <__udivmoddi4+0x2a4>
   8682a:	42a3      	cmp	r3, r4
   8682c:	f240 8108 	bls.w	86a40 <__udivmoddi4+0x2a4>
   86830:	3802      	subs	r0, #2
   86832:	443c      	add	r4, r7
   86834:	2100      	movs	r1, #0
   86836:	1ae4      	subs	r4, r4, r3
   86838:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8683c:	2d00      	cmp	r5, #0
   8683e:	d062      	beq.n	86906 <__udivmoddi4+0x16a>
   86840:	2300      	movs	r3, #0
   86842:	fa24 f40e 	lsr.w	r4, r4, lr
   86846:	602c      	str	r4, [r5, #0]
   86848:	606b      	str	r3, [r5, #4]
   8684a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8684e:	428b      	cmp	r3, r1
   86850:	d907      	bls.n	86862 <__udivmoddi4+0xc6>
   86852:	2d00      	cmp	r5, #0
   86854:	d055      	beq.n	86902 <__udivmoddi4+0x166>
   86856:	2100      	movs	r1, #0
   86858:	e885 0041 	stmia.w	r5, {r0, r6}
   8685c:	4608      	mov	r0, r1
   8685e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86862:	fab3 f183 	clz	r1, r3
   86866:	2900      	cmp	r1, #0
   86868:	f040 808f 	bne.w	8698a <__udivmoddi4+0x1ee>
   8686c:	42b3      	cmp	r3, r6
   8686e:	d302      	bcc.n	86876 <__udivmoddi4+0xda>
   86870:	4282      	cmp	r2, r0
   86872:	f200 80fc 	bhi.w	86a6e <__udivmoddi4+0x2d2>
   86876:	1a84      	subs	r4, r0, r2
   86878:	eb66 0603 	sbc.w	r6, r6, r3
   8687c:	2001      	movs	r0, #1
   8687e:	46b4      	mov	ip, r6
   86880:	2d00      	cmp	r5, #0
   86882:	d040      	beq.n	86906 <__udivmoddi4+0x16a>
   86884:	e885 1010 	stmia.w	r5, {r4, ip}
   86888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8688c:	b912      	cbnz	r2, 86894 <__udivmoddi4+0xf8>
   8688e:	2701      	movs	r7, #1
   86890:	fbb7 f7f2 	udiv	r7, r7, r2
   86894:	fab7 fe87 	clz	lr, r7
   86898:	f1be 0f00 	cmp.w	lr, #0
   8689c:	d135      	bne.n	8690a <__udivmoddi4+0x16e>
   8689e:	2101      	movs	r1, #1
   868a0:	1bf6      	subs	r6, r6, r7
   868a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   868a6:	fa1f f887 	uxth.w	r8, r7
   868aa:	fbb6 f2fc 	udiv	r2, r6, ip
   868ae:	fb0c 6612 	mls	r6, ip, r2, r6
   868b2:	fb08 f002 	mul.w	r0, r8, r2
   868b6:	0c23      	lsrs	r3, r4, #16
   868b8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   868bc:	42b0      	cmp	r0, r6
   868be:	d907      	bls.n	868d0 <__udivmoddi4+0x134>
   868c0:	19f6      	adds	r6, r6, r7
   868c2:	f102 33ff 	add.w	r3, r2, #4294967295
   868c6:	d202      	bcs.n	868ce <__udivmoddi4+0x132>
   868c8:	42b0      	cmp	r0, r6
   868ca:	f200 80d2 	bhi.w	86a72 <__udivmoddi4+0x2d6>
   868ce:	461a      	mov	r2, r3
   868d0:	1a36      	subs	r6, r6, r0
   868d2:	fbb6 f0fc 	udiv	r0, r6, ip
   868d6:	fb0c 6610 	mls	r6, ip, r0, r6
   868da:	fb08 f800 	mul.w	r8, r8, r0
   868de:	b2a3      	uxth	r3, r4
   868e0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   868e4:	45a0      	cmp	r8, r4
   868e6:	d907      	bls.n	868f8 <__udivmoddi4+0x15c>
   868e8:	19e4      	adds	r4, r4, r7
   868ea:	f100 33ff 	add.w	r3, r0, #4294967295
   868ee:	d202      	bcs.n	868f6 <__udivmoddi4+0x15a>
   868f0:	45a0      	cmp	r8, r4
   868f2:	f200 80b9 	bhi.w	86a68 <__udivmoddi4+0x2cc>
   868f6:	4618      	mov	r0, r3
   868f8:	eba4 0408 	sub.w	r4, r4, r8
   868fc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86900:	e79c      	b.n	8683c <__udivmoddi4+0xa0>
   86902:	4629      	mov	r1, r5
   86904:	4628      	mov	r0, r5
   86906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8690a:	fa07 f70e 	lsl.w	r7, r7, lr
   8690e:	f1ce 0320 	rsb	r3, lr, #32
   86912:	fa26 f203 	lsr.w	r2, r6, r3
   86916:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8691a:	fbb2 f1fc 	udiv	r1, r2, ip
   8691e:	fa1f f887 	uxth.w	r8, r7
   86922:	fb0c 2211 	mls	r2, ip, r1, r2
   86926:	fa06 f60e 	lsl.w	r6, r6, lr
   8692a:	fa20 f303 	lsr.w	r3, r0, r3
   8692e:	fb01 f908 	mul.w	r9, r1, r8
   86932:	4333      	orrs	r3, r6
   86934:	0c1e      	lsrs	r6, r3, #16
   86936:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8693a:	45b1      	cmp	r9, r6
   8693c:	fa00 f40e 	lsl.w	r4, r0, lr
   86940:	d909      	bls.n	86956 <__udivmoddi4+0x1ba>
   86942:	19f6      	adds	r6, r6, r7
   86944:	f101 32ff 	add.w	r2, r1, #4294967295
   86948:	f080 808c 	bcs.w	86a64 <__udivmoddi4+0x2c8>
   8694c:	45b1      	cmp	r9, r6
   8694e:	f240 8089 	bls.w	86a64 <__udivmoddi4+0x2c8>
   86952:	3902      	subs	r1, #2
   86954:	443e      	add	r6, r7
   86956:	eba6 0609 	sub.w	r6, r6, r9
   8695a:	fbb6 f0fc 	udiv	r0, r6, ip
   8695e:	fb0c 6210 	mls	r2, ip, r0, r6
   86962:	fb00 f908 	mul.w	r9, r0, r8
   86966:	b29e      	uxth	r6, r3
   86968:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8696c:	45b1      	cmp	r9, r6
   8696e:	d907      	bls.n	86980 <__udivmoddi4+0x1e4>
   86970:	19f6      	adds	r6, r6, r7
   86972:	f100 33ff 	add.w	r3, r0, #4294967295
   86976:	d271      	bcs.n	86a5c <__udivmoddi4+0x2c0>
   86978:	45b1      	cmp	r9, r6
   8697a:	d96f      	bls.n	86a5c <__udivmoddi4+0x2c0>
   8697c:	3802      	subs	r0, #2
   8697e:	443e      	add	r6, r7
   86980:	eba6 0609 	sub.w	r6, r6, r9
   86984:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   86988:	e78f      	b.n	868aa <__udivmoddi4+0x10e>
   8698a:	f1c1 0720 	rsb	r7, r1, #32
   8698e:	fa22 f807 	lsr.w	r8, r2, r7
   86992:	408b      	lsls	r3, r1
   86994:	ea48 0303 	orr.w	r3, r8, r3
   86998:	fa26 f407 	lsr.w	r4, r6, r7
   8699c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   869a0:	fbb4 f9fe 	udiv	r9, r4, lr
   869a4:	fa1f fc83 	uxth.w	ip, r3
   869a8:	fb0e 4419 	mls	r4, lr, r9, r4
   869ac:	408e      	lsls	r6, r1
   869ae:	fa20 f807 	lsr.w	r8, r0, r7
   869b2:	fb09 fa0c 	mul.w	sl, r9, ip
   869b6:	ea48 0806 	orr.w	r8, r8, r6
   869ba:	ea4f 4618 	mov.w	r6, r8, lsr #16
   869be:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   869c2:	45a2      	cmp	sl, r4
   869c4:	fa02 f201 	lsl.w	r2, r2, r1
   869c8:	fa00 f601 	lsl.w	r6, r0, r1
   869cc:	d908      	bls.n	869e0 <__udivmoddi4+0x244>
   869ce:	18e4      	adds	r4, r4, r3
   869d0:	f109 30ff 	add.w	r0, r9, #4294967295
   869d4:	d244      	bcs.n	86a60 <__udivmoddi4+0x2c4>
   869d6:	45a2      	cmp	sl, r4
   869d8:	d942      	bls.n	86a60 <__udivmoddi4+0x2c4>
   869da:	f1a9 0902 	sub.w	r9, r9, #2
   869de:	441c      	add	r4, r3
   869e0:	eba4 040a 	sub.w	r4, r4, sl
   869e4:	fbb4 f0fe 	udiv	r0, r4, lr
   869e8:	fb0e 4410 	mls	r4, lr, r0, r4
   869ec:	fb00 fc0c 	mul.w	ip, r0, ip
   869f0:	fa1f f888 	uxth.w	r8, r8
   869f4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   869f8:	45a4      	cmp	ip, r4
   869fa:	d907      	bls.n	86a0c <__udivmoddi4+0x270>
   869fc:	18e4      	adds	r4, r4, r3
   869fe:	f100 3eff 	add.w	lr, r0, #4294967295
   86a02:	d229      	bcs.n	86a58 <__udivmoddi4+0x2bc>
   86a04:	45a4      	cmp	ip, r4
   86a06:	d927      	bls.n	86a58 <__udivmoddi4+0x2bc>
   86a08:	3802      	subs	r0, #2
   86a0a:	441c      	add	r4, r3
   86a0c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86a10:	fba0 8902 	umull	r8, r9, r0, r2
   86a14:	eba4 0c0c 	sub.w	ip, r4, ip
   86a18:	45cc      	cmp	ip, r9
   86a1a:	46c2      	mov	sl, r8
   86a1c:	46ce      	mov	lr, r9
   86a1e:	d315      	bcc.n	86a4c <__udivmoddi4+0x2b0>
   86a20:	d012      	beq.n	86a48 <__udivmoddi4+0x2ac>
   86a22:	b155      	cbz	r5, 86a3a <__udivmoddi4+0x29e>
   86a24:	ebb6 030a 	subs.w	r3, r6, sl
   86a28:	eb6c 060e 	sbc.w	r6, ip, lr
   86a2c:	fa06 f707 	lsl.w	r7, r6, r7
   86a30:	40cb      	lsrs	r3, r1
   86a32:	431f      	orrs	r7, r3
   86a34:	40ce      	lsrs	r6, r1
   86a36:	602f      	str	r7, [r5, #0]
   86a38:	606e      	str	r6, [r5, #4]
   86a3a:	2100      	movs	r1, #0
   86a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86a40:	4610      	mov	r0, r2
   86a42:	e6f7      	b.n	86834 <__udivmoddi4+0x98>
   86a44:	4689      	mov	r9, r1
   86a46:	e6de      	b.n	86806 <__udivmoddi4+0x6a>
   86a48:	4546      	cmp	r6, r8
   86a4a:	d2ea      	bcs.n	86a22 <__udivmoddi4+0x286>
   86a4c:	ebb8 0a02 	subs.w	sl, r8, r2
   86a50:	eb69 0e03 	sbc.w	lr, r9, r3
   86a54:	3801      	subs	r0, #1
   86a56:	e7e4      	b.n	86a22 <__udivmoddi4+0x286>
   86a58:	4670      	mov	r0, lr
   86a5a:	e7d7      	b.n	86a0c <__udivmoddi4+0x270>
   86a5c:	4618      	mov	r0, r3
   86a5e:	e78f      	b.n	86980 <__udivmoddi4+0x1e4>
   86a60:	4681      	mov	r9, r0
   86a62:	e7bd      	b.n	869e0 <__udivmoddi4+0x244>
   86a64:	4611      	mov	r1, r2
   86a66:	e776      	b.n	86956 <__udivmoddi4+0x1ba>
   86a68:	3802      	subs	r0, #2
   86a6a:	443c      	add	r4, r7
   86a6c:	e744      	b.n	868f8 <__udivmoddi4+0x15c>
   86a6e:	4608      	mov	r0, r1
   86a70:	e706      	b.n	86880 <__udivmoddi4+0xe4>
   86a72:	3a02      	subs	r2, #2
   86a74:	443e      	add	r6, r7
   86a76:	e72b      	b.n	868d0 <__udivmoddi4+0x134>

00086a78 <__aeabi_idiv0>:
   86a78:	4770      	bx	lr
   86a7a:	bf00      	nop
   86a7c:	00000001 	.word	0x00000001
   86a80:	00000002 	.word	0x00000002
   86a84:	00000004 	.word	0x00000004
   86a88:	00000008 	.word	0x00000008
   86a8c:	00000010 	.word	0x00000010
   86a90:	00000020 	.word	0x00000020
   86a94:	00000040 	.word	0x00000040
   86a98:	00000080 	.word	0x00000080
   86a9c:	00000100 	.word	0x00000100
   86aa0:	00000200 	.word	0x00000200
   86aa4:	00000400 	.word	0x00000400
   86aa8:	454c4449 	.word	0x454c4449
   86aac:	00000000 	.word	0x00000000
   86ab0:	20726d54 	.word	0x20726d54
   86ab4:	00637653 	.word	0x00637653
   86ab8:	61766e49 	.word	0x61766e49
   86abc:	2064696c 	.word	0x2064696c
   86ac0:	75706e69 	.word	0x75706e69
   86ac4:	61762074 	.word	0x61762074
   86ac8:	7365756c 	.word	0x7365756c
   86acc:	00000a21 	.word	0x00000a21
   86ad0:	203d2065 	.word	0x203d2065
   86ad4:	000a6425 	.word	0x000a6425
   86ad8:	00000031 	.word	0x00000031
   86adc:	6157454e 	.word	0x6157454e
   86ae0:	6c65676e 	.word	0x6c65676e
   86ae4:	6425203a 	.word	0x6425203a
   86ae8:	0000000a 	.word	0x0000000a
   86aec:	61444c4f 	.word	0x61444c4f
   86af0:	6c65676e 	.word	0x6c65676e
   86af4:	6425203a 	.word	0x6425203a
   86af8:	0000000a 	.word	0x0000000a
   86afc:	00000032 	.word	0x00000032
   86b00:	736e6f43 	.word	0x736e6f43
   86b04:	20656c6f 	.word	0x20656c6f
   86b08:	64616572 	.word	0x64616572
   86b0c:	00000a79 	.word	0x00000a79
   86b10:	3d3d3d3d 	.word	0x3d3d3d3d
   86b14:	3d3d3d3d 	.word	0x3d3d3d3d
   86b18:	3d3d3d3d 	.word	0x3d3d3d3d
   86b1c:	00000a3d 	.word	0x00000a3d
   86b20:	6f746f6d 	.word	0x6f746f6d
   86b24:	61745f72 	.word	0x61745f72
   86b28:	00006b73 	.word	0x00006b73
   86b2c:	6e69616d 	.word	0x6e69616d
   86b30:	7361745f 	.word	0x7361745f
   86b34:	0000006b 	.word	0x0000006b

00086b38 <atanhi>:
   86b38:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   86b48:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00086b58 <atanlo>:
   86b58:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   86b68:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<
   86b78:	74727173 00000000                       sqrt....

00086b80 <_global_impure_ptr>:
   86b80:	20070190 33323130 37363534 42413938     ... 0123456789AB
   86b90:	46454443 00000000 33323130 37363534     CDEF....01234567
   86ba0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   86bb0:	0000296c                                l)..

00086bb4 <blanks.7217>:
   86bb4:	20202020 20202020 20202020 20202020                     

00086bc4 <zeroes.7218>:
   86bc4:	30303030 30303030 30303030 30303030     0000000000000000
   86bd4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00086be4 <_ctype_>:
   86be4:	20202000 20202020 28282020 20282828     .         ((((( 
   86bf4:	20202020 20202020 20202020 20202020                     
   86c04:	10108820 10101010 10101010 10101010      ...............
   86c14:	04040410 04040404 10040404 10101010     ................
   86c24:	41411010 41414141 01010101 01010101     ..AAAAAA........
   86c34:	01010101 01010101 01010101 10101010     ................
   86c44:	42421010 42424242 02020202 02020202     ..BBBBBB........
   86c54:	02020202 02020202 02020202 10101010     ................
   86c64:	00000020 00000000 00000000 00000000      ...............
	...

00086ce8 <_init>:
   86ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86cea:	bf00      	nop
   86cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86cee:	bc08      	pop	{r3}
   86cf0:	469e      	mov	lr, r3
   86cf2:	4770      	bx	lr

00086cf4 <__init_array_start>:
   86cf4:	00084e51 	.word	0x00084e51

00086cf8 <__frame_dummy_init_array_entry>:
   86cf8:	00080119                                ....

00086cfc <_fini>:
   86cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86cfe:	bf00      	nop
   86d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86d02:	bc08      	pop	{r3}
   86d04:	469e      	mov	lr, r3
   86d06:	4770      	bx	lr

00086d08 <__fini_array_start>:
   86d08:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070180 	.word	0x20070180

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <k>:
20070138:	00000004                                ....

2007013c <pin_table>:
2007013c:	5c390908 5758591d 675d5556 00003b68     ..9\.YXWVU]gh;..
2007014c:	00000000 0e3a0000 6261600f 07696663     ......:..`abcfi.
2007015c:	4342416a 47464544 14134948 50515253     jABCDEFGHI..SRQP
2007016c:	4c4d4e4f 18102e35 04061617 32310203     ONML5.........12
2007017c:	00013433                                         34

2007017e <g_interrupt_enabled>:
2007017e:	09000001                                         ..

20070180 <SystemCoreClock>:
20070180:	003d0900                                ..=.

20070184 <__fdlib_version>:
20070184:	00000001                                ....

20070188 <_impure_ptr>:
20070188:	20070190 00000000                       ... ....

20070190 <impure_data>:
20070190:	00000000 2007047c 200704e4 2007054c     ....|.. ... L.. 
	...
20070238:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070248:	0005deec 0000000b 00000000 00000000     ................
	...

200705b8 <__atexit_recursive_mutex>:
200705b8:	2007ae60                                `.. 

200705bc <__global_locale>:
200705bc:	00000043 00000000 00000000 00000000     C...............
	...
200705dc:	00000043 00000000 00000000 00000000     C...............
	...
200705fc:	00000043 00000000 00000000 00000000     C...............
	...
2007061c:	00000043 00000000 00000000 00000000     C...............
	...
2007063c:	00000043 00000000 00000000 00000000     C...............
	...
2007065c:	00000043 00000000 00000000 00000000     C...............
	...
2007067c:	00000043 00000000 00000000 00000000     C...............
	...
2007069c:	000864d9 00085e25 00000000 00086be4     .d..%^.......k..
200706ac:	00086be0 00086aac 00086aac 00086aac     .k...j...j...j..
200706bc:	00086aac 00086aac 00086aac 00086aac     .j...j...j...j..
200706cc:	00086aac 00086aac ffffffff ffffffff     .j...j..........
200706dc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070704:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070728 <__malloc_av_>:
	...
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 
20070ae0:	20070ad8 20070ad8 20070ae0 20070ae0     ... ... ... ... 
20070af0:	20070ae8 20070ae8 20070af0 20070af0     ... ... ... ... 
20070b00:	20070af8 20070af8 20070b00 20070b00     ... ... ... ... 
20070b10:	20070b08 20070b08 20070b10 20070b10     ... ... ... ... 
20070b20:	20070b18 20070b18 20070b20 20070b20     ... ...  ..  .. 

20070b30 <__malloc_sbrk_base>:
20070b30:	ffffffff                                ....

20070b34 <__malloc_trim_threshold>:
20070b34:	00020000                                ....
