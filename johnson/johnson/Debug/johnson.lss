
johnson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000718c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008718c  0008718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b58  20070000  00087194  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a370  20070b58  00087cf0  00020b58  2**3
                  ALLOC
  4 .stack        00002000  2007aec8  00092060  00020b58  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b58  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b81  2**0
                  CONTENTS, READONLY
  7 .debug_info   00027201  00000000  00000000  00020bda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00005cab  00000000  00000000  00047ddb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00009230  00000000  00000000  0004da86  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00001058  00000000  00000000  00056cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000fd0  00000000  00000000  00057d0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001f20a  00000000  00000000  00058cde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b9e7  00000000  00000000  00077ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006b9ec  00000000  00000000  000938cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000359c  00000000  00000000  000ff2bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c8 ce 07 20 49 2d 08 00 45 2d 08 00 45 2d 08 00     ... I-..E-..E-..
   80010:	45 2d 08 00 45 2d 08 00 45 2d 08 00 00 00 00 00     E-..E-..E-......
	...
   8002c:	c5 05 08 00 45 2d 08 00 00 00 00 00 45 06 08 00     ....E-......E...
   8003c:	81 06 08 00 45 2d 08 00 45 2d 08 00 45 2d 08 00     ....E-..E-..E-..
   8004c:	45 2d 08 00 45 2d 08 00 45 2d 08 00 45 2d 08 00     E-..E-..E-..E-..
   8005c:	45 2d 08 00 45 2d 08 00 45 2d 08 00 00 00 00 00     E-..E-..E-......
   8006c:	b9 2b 08 00 cd 2b 08 00 e1 2b 08 00 f5 2b 08 00     .+...+...+...+..
	...
   80084:	2d 24 08 00 45 2d 08 00 45 2d 08 00 45 2d 08 00     -$..E-..E-..E-..
   80094:	45 2d 08 00 45 2d 08 00 45 2d 08 00 45 2d 08 00     E-..E-..E-..E-..
   800a4:	00 00 00 00 45 2d 08 00 45 2d 08 00 45 2d 08 00     ....E-..E-..E-..
   800b4:	45 2d 08 00 45 2d 08 00 45 2d 08 00 45 2d 08 00     E-..E-..E-..E-..
   800c4:	45 2d 08 00 45 2d 08 00 45 2d 08 00 45 2d 08 00     E-..E-..E-..E-..
   800d4:	45 2d 08 00 45 2d 08 00 45 2d 08 00 45 2d 08 00     E-..E-..E-..E-..
   800e4:	45 2d 08 00 45 2d 08 00 45 2d 08 00 45 2d 08 00     E-..E-..E-..E-..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b58 	.word	0x20070b58
   80110:	00000000 	.word	0x00000000
   80114:	00087194 	.word	0x00087194

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00087194 	.word	0x00087194
   80154:	20070b5c 	.word	0x20070b5c
   80158:	00087194 	.word	0x00087194
   8015c:	00000000 	.word	0x00000000

00080160 <Twi_master_init>:
/* this function initiates the master Due
* TWI1 are used for the master
* enables TWI pios
*/
	 
void Twi_master_init(Twi* pTWI){
   80160:	b510      	push	{r4, lr}
   80162:	4604      	mov	r4, r0
	pmc_enable_periph_clk(ID_TWI1); /* power the clock for the TWI with pmc */
   80164:	2017      	movs	r0, #23
   80166:	4b14      	ldr	r3, [pc, #80]	; (801b8 <Twi_master_init+0x58>)
   80168:	4798      	blx	r3
	PIOB->PIO_PDR|= (PIO_PB12)|(PIO_PB13);	/* Enable TWI pios */
   8016a:	4a14      	ldr	r2, [pc, #80]	; (801bc <Twi_master_init+0x5c>)
   8016c:	6853      	ldr	r3, [r2, #4]
   8016e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   80172:	6053      	str	r3, [r2, #4]
	//PIOA->PIO_PDR|= (PIO_PA18)|(PIO_PA17);	/* Enable TWI pios */
	pTWI->TWI_CR = (0x1u << 7);				// TWIn software reset
   80174:	2380      	movs	r3, #128	; 0x80
   80176:	6023      	str	r3, [r4, #0]
	pTWI->TWI_RHR;							// Flush reception buffer
   80178:	6b23      	ldr	r3, [r4, #48]	; 0x30
	/* Set Master Disable bit and Slave Disable bit */
	pTWI->TWI_CR = TWI_CR_MSDIS;
   8017a:	2308      	movs	r3, #8
   8017c:	6023      	str	r3, [r4, #0]
	pTWI->TWI_CR = TWI_CR_SVDIS;
   8017e:	2320      	movs	r3, #32
   80180:	6023      	str	r3, [r4, #0]
	pTWI->TWI_CR |= (0x1u << 2);			/* Set Master Enable bit */
   80182:	6823      	ldr	r3, [r4, #0]
   80184:	f043 0304 	orr.w	r3, r3, #4
   80188:	6023      	str	r3, [r4, #0]
	pTWI->TWI_MMR |= TWI_MMR_DADR(unoAddress);//device address
   8018a:	6863      	ldr	r3, [r4, #4]
   8018c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   80190:	6063      	str	r3, [r4, #4]
	pTWI->TWI_PTCR |= (0x1u << 0)|(0x1u << 8);//Receiver/transmitter Transfer Enable
   80192:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   80196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8019a:	f043 0301 	orr.w	r3, r3, #1
   8019e:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
	pTWI->TWI_IDR = ~0UL;					/* Disable TWI interrupts */
   801a2:	f04f 33ff 	mov.w	r3, #4294967295
   801a6:	62a3      	str	r3, [r4, #40]	; 0x28
	pTWI->TWI_CWGR |= I2C_SPEED;
   801a8:	6923      	ldr	r3, [r4, #16]
   801aa:	f443 33c3 	orr.w	r3, r3, #99840	; 0x18600
   801ae:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
   801b2:	6123      	str	r3, [r4, #16]
   801b4:	bd10      	pop	{r4, pc}
   801b6:	bf00      	nop
   801b8:	00082cf1 	.word	0x00082cf1
   801bc:	400e1000 	.word	0x400e1000

000801c0 <I2C_mk_addr>:
 */
 uint32_t I2C_mk_addr(const uint8_t *addr, int len)
 {
	uint32_t val;

	if (len == 0)
   801c0:	460a      	mov	r2, r1
   801c2:	b159      	cbz	r1, 801dc <I2C_mk_addr+0x1c>
	return 0;

	val = addr[0];
   801c4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
   801c6:	2901      	cmp	r1, #1
		val <<= 8;
		val |= addr[1];
   801c8:	bfc4      	itt	gt
   801ca:	7841      	ldrbgt	r1, [r0, #1]
   801cc:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	}
	if (len > 2) {
   801d0:	2a02      	cmp	r2, #2
   801d2:	dd04      	ble.n	801de <I2C_mk_addr+0x1e>
		val <<= 8;
		val |= addr[2];
   801d4:	7882      	ldrb	r2, [r0, #2]
   801d6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   801da:	e000      	b.n	801de <I2C_mk_addr+0x1e>
	return 0;
   801dc:	2300      	movs	r3, #0
	}
	return val;
 }
   801de:	4618      	mov	r0, r3
   801e0:	4770      	bx	lr
	...

000801e4 <I2C_master_read>:
{
   801e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   801e6:	4605      	mov	r5, r0
   801e8:	460f      	mov	r7, r1
	printf("welcome\n");
   801ea:	482e      	ldr	r0, [pc, #184]	; (802a4 <I2C_master_read+0xc0>)
   801ec:	4b2e      	ldr	r3, [pc, #184]	; (802a8 <I2C_master_read+0xc4>)
   801ee:	4798      	blx	r3
	uint32_t cnt = p_packet->length;
   801f0:	68fc      	ldr	r4, [r7, #12]
	if (cnt == 0) {
   801f2:	2c00      	cmp	r4, #0
   801f4:	d04d      	beq.n	80292 <I2C_master_read+0xae>
	uint8_t *buffer = p_packet->buffer;
   801f6:	68be      	ldr	r6, [r7, #8]
	p_twi->TWI_MMR = 0;
   801f8:	2100      	movs	r1, #0
   801fa:	6069      	str	r1, [r5, #4]
	((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   801fc:	687b      	ldr	r3, [r7, #4]
   801fe:	021b      	lsls	r3, r3, #8
   80200:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   80204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   80208:	7c3a      	ldrb	r2, [r7, #16]
   8020a:	0412      	lsls	r2, r2, #16
   8020c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
   80210:	4313      	orrs	r3, r2
   80212:	606b      	str	r3, [r5, #4]
	p_twi->TWI_IADR = 0;
   80214:	60e9      	str	r1, [r5, #12]
	p_twi->TWI_IADR = I2C_mk_addr(p_packet->addr, p_packet->addr_length);
   80216:	6879      	ldr	r1, [r7, #4]
   80218:	4638      	mov	r0, r7
   8021a:	4b24      	ldr	r3, [pc, #144]	; (802ac <I2C_master_read+0xc8>)
   8021c:	4798      	blx	r3
   8021e:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
   80220:	2c01      	cmp	r4, #1
   80222:	d00f      	beq.n	80244 <I2C_master_read+0x60>
		p_twi->TWI_CR = TWI_CR_START;
   80224:	2301      	movs	r3, #1
   80226:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
   80228:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
   8022a:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   8022c:	f413 7f80 	tst.w	r3, #256	; 0x100
   80230:	d136      	bne.n	802a0 <I2C_master_read+0xbc>
   80232:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
   80236:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
   8023a:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
   8023e:	f04f 0c02 	mov.w	ip, #2
   80242:	e019      	b.n	80278 <I2C_master_read+0x94>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   80244:	2303      	movs	r3, #3
   80246:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
   80248:	2001      	movs	r0, #1
   8024a:	e7ee      	b.n	8022a <I2C_master_read+0x46>
		if (!(status & TWI_SR_RXRDY)) {
   8024c:	460a      	mov	r2, r1
   8024e:	4670      	mov	r0, lr
   80250:	e00c      	b.n	8026c <I2C_master_read+0x88>
		if (cnt == 1  && !stop_sent) {
   80252:	b908      	cbnz	r0, 80258 <I2C_master_read+0x74>
			p_twi->TWI_CR = TWI_CR_STOP;
   80254:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
   80258:	f013 0f02 	tst.w	r3, #2
   8025c:	d0f6      	beq.n	8024c <I2C_master_read+0x68>
   8025e:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
   80260:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   80262:	7033      	strb	r3, [r6, #0]
		cnt--;
   80264:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
   80266:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
   80268:	463a      	mov	r2, r7
	while (cnt > 0) {
   8026a:	b164      	cbz	r4, 80286 <I2C_master_read+0xa2>
		status = p_twi->TWI_SR;
   8026c:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   8026e:	f413 7f80 	tst.w	r3, #256	; 0x100
   80272:	d111      	bne.n	80298 <I2C_master_read+0xb4>
		if (!timeout--) {
   80274:	1e51      	subs	r1, r2, #1
   80276:	b18a      	cbz	r2, 8029c <I2C_master_read+0xb8>
		if (cnt == 1  && !stop_sent) {
   80278:	2c01      	cmp	r4, #1
   8027a:	d0ea      	beq.n	80252 <I2C_master_read+0x6e>
		if (!(status & TWI_SR_RXRDY)) {
   8027c:	f013 0f02 	tst.w	r3, #2
   80280:	d1ee      	bne.n	80260 <I2C_master_read+0x7c>
   80282:	460a      	mov	r2, r1
   80284:	e7f1      	b.n	8026a <I2C_master_read+0x86>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80286:	6a2b      	ldr	r3, [r5, #32]
   80288:	f013 0f01 	tst.w	r3, #1
   8028c:	d0fb      	beq.n	80286 <I2C_master_read+0xa2>
	p_twi->TWI_SR;
   8028e:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
   80290:	e000      	b.n	80294 <I2C_master_read+0xb0>
		return TWI_INVALID_ARGUMENT;
   80292:	2401      	movs	r4, #1
}
   80294:	4620      	mov	r0, r4
   80296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
   80298:	2405      	movs	r4, #5
   8029a:	e7fb      	b.n	80294 <I2C_master_read+0xb0>
			return TWI_ERROR_TIMEOUT;
   8029c:	2409      	movs	r4, #9
   8029e:	e7f9      	b.n	80294 <I2C_master_read+0xb0>
			return TWI_RECEIVE_NACK;
   802a0:	2405      	movs	r4, #5
   802a2:	e7f7      	b.n	80294 <I2C_master_read+0xb0>
   802a4:	00086eac 	.word	0x00086eac
   802a8:	00084019 	.word	0x00084019
   802ac:	000801c1 	.word	0x000801c1

000802b0 <get_pos>:
	.chip = unoAddress,		// Adress to Mega kort
	.buffer = array, // where to save packet
	.length =10,	//packet length
};

struct point get_pos(void){
   802b0:	b082      	sub	sp, #8
	coordinates.y = array[9]*2;
	/* Mock, replace later */
	coordinates.x = 0;
	coordinates.y = 0;
	return coordinates;
};
   802b2:	2000      	movs	r0, #0
   802b4:	b002      	add	sp, #8
   802b6:	4770      	bx	lr

000802b8 <get_box>:

struct point get_box(void){
   802b8:	b082      	sub	sp, #8
	coordinates.y = array[1]*2;
	/* Mock, replace later */
	coordinates.x = 50;
	coordinates.y = 50;
	return coordinates;
};
   802ba:	f04f 1032 	mov.w	r0, #3276850	; 0x320032
   802be:	b002      	add	sp, #8
   802c0:	4770      	bx	lr
	...

000802c4 <get_ball>:

struct point get_ball(void){
   802c4:	b082      	sub	sp, #8
	coordinates.y = array[5]*2;
	/* Mock, replace later */
	coordinates.x = 300;
	coordinates.y = 300;
	return coordinates;
};
   802c6:	4801      	ldr	r0, [pc, #4]	; (802cc <get_ball+0x8>)
   802c8:	b002      	add	sp, #8
   802ca:	4770      	bx	lr
   802cc:	012c012c 	.word	0x012c012c

000802d0 <get_cube>:

struct point get_cube(void){
   802d0:	b082      	sub	sp, #8
	coordinates.y = array[3]*2;
	/* Mock, replace later */
	coordinates.x = 300;
	coordinates.y = 300;
	return coordinates;
};
   802d2:	4801      	ldr	r0, [pc, #4]	; (802d8 <get_cube+0x8>)
   802d4:	b002      	add	sp, #8
   802d6:	4770      	bx	lr
   802d8:	012c012c 	.word	0x012c012c

000802dc <update_positions>:

void update_positions(void){
   802dc:	b508      	push	{r3, lr}
	I2C_master_read(TWI1, &packet_pos);
   802de:	4902      	ldr	r1, [pc, #8]	; (802e8 <update_positions+0xc>)
   802e0:	4802      	ldr	r0, [pc, #8]	; (802ec <update_positions+0x10>)
   802e2:	4b03      	ldr	r3, [pc, #12]	; (802f0 <update_positions+0x14>)
   802e4:	4798      	blx	r3
   802e6:	bd08      	pop	{r3, pc}
   802e8:	2007012c 	.word	0x2007012c
   802ec:	40090000 	.word	0x40090000
   802f0:	000801e5 	.word	0x000801e5

000802f4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   802f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   802f8:	b980      	cbnz	r0, 8031c <_read+0x28>
   802fa:	460c      	mov	r4, r1
   802fc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   802fe:	2a00      	cmp	r2, #0
   80300:	dd0f      	ble.n	80322 <_read+0x2e>
   80302:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80304:	4e08      	ldr	r6, [pc, #32]	; (80328 <_read+0x34>)
   80306:	4d09      	ldr	r5, [pc, #36]	; (8032c <_read+0x38>)
   80308:	6830      	ldr	r0, [r6, #0]
   8030a:	4621      	mov	r1, r4
   8030c:	682b      	ldr	r3, [r5, #0]
   8030e:	4798      	blx	r3
		ptr++;
   80310:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   80312:	42bc      	cmp	r4, r7
   80314:	d1f8      	bne.n	80308 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80316:	4640      	mov	r0, r8
   80318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8031c:	f04f 38ff 	mov.w	r8, #4294967295
   80320:	e7f9      	b.n	80316 <_read+0x22>
	for (; len > 0; --len) {
   80322:	4680      	mov	r8, r0
   80324:	e7f7      	b.n	80316 <_read+0x22>
   80326:	bf00      	nop
   80328:	2007ae9c 	.word	0x2007ae9c
   8032c:	2007ae40 	.word	0x2007ae40

00080330 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80330:	b4f0      	push	{r4, r5, r6, r7}
   80332:	b08c      	sub	sp, #48	; 0x30
   80334:	4607      	mov	r7, r0
   80336:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80338:	ac01      	add	r4, sp, #4
   8033a:	4d11      	ldr	r5, [pc, #68]	; (80380 <pwm_clocks_generate+0x50>)
   8033c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8033e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80344:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   8034c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8034e:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80350:	f852 0b04 	ldr.w	r0, [r2], #4
   80354:	fbb6 f0f0 	udiv	r0, r6, r0
   80358:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   8035c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   80360:	d907      	bls.n	80372 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
   80362:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80364:	2b0b      	cmp	r3, #11
   80366:	d1f3      	bne.n	80350 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80368:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8036c:	b00c      	add	sp, #48	; 0x30
   8036e:	bcf0      	pop	{r4, r5, r6, r7}
   80370:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   80372:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
   80374:	bf94      	ite	ls
   80376:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
   8037a:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
   8037e:	e7f5      	b.n	8036c <pwm_clocks_generate+0x3c>
   80380:	00086eb8 	.word	0x00086eb8

00080384 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   80384:	b570      	push	{r4, r5, r6, lr}
   80386:	4606      	mov	r6, r0
   80388:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   8038a:	680c      	ldr	r4, [r1, #0]
   8038c:	b144      	cbz	r4, 803a0 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   8038e:	6889      	ldr	r1, [r1, #8]
   80390:	4620      	mov	r0, r4
   80392:	4b0c      	ldr	r3, [pc, #48]	; (803c4 <pwm_init+0x40>)
   80394:	4798      	blx	r3
   80396:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
   80398:	f64f 73ff 	movw	r3, #65535	; 0xffff
   8039c:	4298      	cmp	r0, r3
   8039e:	d00c      	beq.n	803ba <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   803a0:	6868      	ldr	r0, [r5, #4]
   803a2:	b140      	cbz	r0, 803b6 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   803a4:	68a9      	ldr	r1, [r5, #8]
   803a6:	4b07      	ldr	r3, [pc, #28]	; (803c4 <pwm_init+0x40>)
   803a8:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   803aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   803ae:	4298      	cmp	r0, r3
   803b0:	d005      	beq.n	803be <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   803b2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   803b6:	6034      	str	r4, [r6, #0]
#endif
	return 0;
   803b8:	2400      	movs	r4, #0
}
   803ba:	4620      	mov	r0, r4
   803bc:	bd70      	pop	{r4, r5, r6, pc}
			return result;
   803be:	4604      	mov	r4, r0
   803c0:	e7fb      	b.n	803ba <pwm_init+0x36>
   803c2:	bf00      	nop
   803c4:	00080331 	.word	0x00080331

000803c8 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   803c8:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   803ca:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803cc:	684b      	ldr	r3, [r1, #4]
   803ce:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   803d2:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803d4:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
   803d6:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803d8:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
   803da:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803dc:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   803e0:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   803e6:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803e8:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   803ec:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   803ee:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   803f2:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   803f6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   803fa:	68cb      	ldr	r3, [r1, #12]
   803fc:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80400:	690b      	ldr	r3, [r1, #16]
   80402:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80406:	7d8b      	ldrb	r3, [r1, #22]
   80408:	b13b      	cbz	r3, 8041a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8040a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8040c:	8b4b      	ldrh	r3, [r1, #26]
   8040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80412:	eb00 1442 	add.w	r4, r0, r2, lsl #5
   80416:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8041a:	6c85      	ldr	r5, [r0, #72]	; 0x48
   8041c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   80420:	4093      	lsls	r3, r2
   80422:	43db      	mvns	r3, r3
   80424:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80426:	7fcc      	ldrb	r4, [r1, #31]
   80428:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8042c:	7f8c      	ldrb	r4, [r1, #30]
   8042e:	4094      	lsls	r4, r2
   80430:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80434:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80436:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80438:	6c44      	ldr	r4, [r0, #68]	; 0x44
   8043a:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   8043c:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   80440:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80444:	f891 4020 	ldrb.w	r4, [r1, #32]
   80448:	4094      	lsls	r4, r2
   8044a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8044e:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80450:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80452:	2301      	movs	r3, #1
   80454:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
   80456:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8045a:	b334      	cbz	r4, 804aa <pwm_channel_init+0xe2>
		p_pwm->PWM_SCM |= channel;
   8045c:	6a04      	ldr	r4, [r0, #32]
   8045e:	431c      	orrs	r4, r3
   80460:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80462:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80466:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80468:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8046a:	bf0c      	ite	eq
   8046c:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8046e:	439c      	bicne	r4, r3
   80470:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   80472:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   80476:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   80478:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8047a:	bf0c      	ite	eq
   8047c:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   80480:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
   80484:	6683      	str	r3, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   80486:	2a03      	cmp	r2, #3
   80488:	d914      	bls.n	804b4 <pwm_channel_init+0xec>
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
   8048a:	3a04      	subs	r2, #4
		ch_num *= 8;
   8048c:	00d2      	lsls	r2, r2, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
   8048e:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
   80490:	23ff      	movs	r3, #255	; 0xff
   80492:	4093      	lsls	r3, r2
   80494:	ea24 0403 	bic.w	r4, r4, r3
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   80498:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   8049c:	fa03 f202 	lsl.w	r2, r3, r2
   804a0:	4322      	orrs	r2, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   804a2:	6702      	str	r2, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   804a4:	2000      	movs	r0, #0
   804a6:	bc70      	pop	{r4, r5, r6}
   804a8:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   804aa:	6a04      	ldr	r4, [r0, #32]
   804ac:	ea24 0403 	bic.w	r4, r4, r3
   804b0:	6204      	str	r4, [r0, #32]
   804b2:	e7d6      	b.n	80462 <pwm_channel_init+0x9a>
		ch_num *= 8;
   804b4:	00d5      	lsls	r5, r2, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
   804b6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
		fault_enable_reg &= ~(0xFF << ch_num);
   804b8:	24ff      	movs	r4, #255	; 0xff
   804ba:	40ac      	lsls	r4, r5
   804bc:	ea23 0304 	bic.w	r3, r3, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   804c0:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   804c4:	40aa      	lsls	r2, r5
   804c6:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   804c8:	66c2      	str	r2, [r0, #108]	; 0x6c
   804ca:	e7eb      	b.n	804a4 <pwm_channel_init+0xdc>

000804cc <pwm_channel_update_duty>:
		uint32_t ul_duty)
{
	uint32_t ch_num = p_channel->channel;

		/** Check parameter */
	if (p_channel->ul_period < ul_duty) {
   804cc:	690b      	ldr	r3, [r1, #16]
   804ce:	4293      	cmp	r3, r2
   804d0:	d202      	bcs.n	804d8 <pwm_channel_update_duty+0xc>
		return PWM_INVALID_ARGUMENT;
   804d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
#endif
	}

	return 0;
}
   804d6:	4770      	bx	lr
	uint32_t ch_num = p_channel->channel;
   804d8:	680b      	ldr	r3, [r1, #0]
		p_channel->ul_duty = ul_duty;
   804da:	60ca      	str	r2, [r1, #12]
		p_pwm->PWM_CH_NUM[ch_num].PWM_CDTYUPD = ul_duty;
   804dc:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   804e0:	f8c0 2208 	str.w	r2, [r0, #520]	; 0x208
	return 0;
   804e4:	2000      	movs	r0, #0
   804e6:	4770      	bx	lr

000804e8 <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   804e8:	2301      	movs	r3, #1
   804ea:	fa03 f101 	lsl.w	r1, r3, r1
   804ee:	6041      	str	r1, [r0, #4]
   804f0:	4770      	bx	lr

000804f2 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   804f2:	2301      	movs	r3, #1
   804f4:	fa03 f101 	lsl.w	r1, r3, r1
   804f8:	6081      	str	r1, [r0, #8]
   804fa:	4770      	bx	lr

000804fc <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   804fc:	f100 0308 	add.w	r3, r0, #8
   80500:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80502:	f04f 32ff 	mov.w	r2, #4294967295
   80506:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80508:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8050a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   8050c:	2300      	movs	r3, #0
   8050e:	6003      	str	r3, [r0, #0]
   80510:	4770      	bx	lr

00080512 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80512:	2300      	movs	r3, #0
   80514:	6103      	str	r3, [r0, #16]
   80516:	4770      	bx	lr

00080518 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80518:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8051a:	685a      	ldr	r2, [r3, #4]
   8051c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8051e:	6842      	ldr	r2, [r0, #4]
   80520:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80522:	685a      	ldr	r2, [r3, #4]
   80524:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80526:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80528:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8052a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8052c:	6803      	ldr	r3, [r0, #0]
   8052e:	3301      	adds	r3, #1
   80530:	6003      	str	r3, [r0, #0]
   80532:	4770      	bx	lr

00080534 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80534:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80536:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80538:	f1b4 3fff 	cmp.w	r4, #4294967295
   8053c:	d015      	beq.n	8056a <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8053e:	f100 0308 	add.w	r3, r0, #8
   80542:	68c2      	ldr	r2, [r0, #12]
   80544:	6812      	ldr	r2, [r2, #0]
   80546:	4294      	cmp	r4, r2
   80548:	d304      	bcc.n	80554 <vListInsert+0x20>
   8054a:	685b      	ldr	r3, [r3, #4]
   8054c:	685a      	ldr	r2, [r3, #4]
   8054e:	6812      	ldr	r2, [r2, #0]
   80550:	4294      	cmp	r4, r2
   80552:	d2fa      	bcs.n	8054a <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80554:	685a      	ldr	r2, [r3, #4]
   80556:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80558:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8055a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8055c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8055e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80560:	6803      	ldr	r3, [r0, #0]
   80562:	3301      	adds	r3, #1
   80564:	6003      	str	r3, [r0, #0]
}
   80566:	bc10      	pop	{r4}
   80568:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   8056a:	6903      	ldr	r3, [r0, #16]
   8056c:	e7f2      	b.n	80554 <vListInsert+0x20>

0008056e <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8056e:	6843      	ldr	r3, [r0, #4]
   80570:	6882      	ldr	r2, [r0, #8]
   80572:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80574:	6883      	ldr	r3, [r0, #8]
   80576:	6842      	ldr	r2, [r0, #4]
   80578:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8057a:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8057c:	685a      	ldr	r2, [r3, #4]
   8057e:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80580:	bf04      	itt	eq
   80582:	6882      	ldreq	r2, [r0, #8]
   80584:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80586:	2200      	movs	r2, #0
   80588:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8058a:	681a      	ldr	r2, [r3, #0]
   8058c:	3a01      	subs	r2, #1
   8058e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80590:	6818      	ldr	r0, [r3, #0]
}
   80592:	4770      	bx	lr

00080594 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80594:	4803      	ldr	r0, [pc, #12]	; (805a4 <prvPortStartFirstTask+0x10>)
   80596:	6800      	ldr	r0, [r0, #0]
   80598:	6800      	ldr	r0, [r0, #0]
   8059a:	f380 8808 	msr	MSP, r0
   8059e:	b662      	cpsie	i
   805a0:	df00      	svc	0
   805a2:	bf00      	nop
   805a4:	e000ed08 	.word	0xe000ed08

000805a8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   805a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   805ac:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   805b0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;	/* LR */
   805b4:	2300      	movs	r3, #0
   805b6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   805ba:	f840 2c20 	str.w	r2, [r0, #-32]
}
   805be:	3840      	subs	r0, #64	; 0x40
   805c0:	4770      	bx	lr
	...

000805c4 <SVC_Handler>:
	__asm volatile (
   805c4:	4b06      	ldr	r3, [pc, #24]	; (805e0 <pxCurrentTCBConst2>)
   805c6:	6819      	ldr	r1, [r3, #0]
   805c8:	6808      	ldr	r0, [r1, #0]
   805ca:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   805ce:	f380 8809 	msr	PSP, r0
   805d2:	f04f 0000 	mov.w	r0, #0
   805d6:	f380 8811 	msr	BASEPRI, r0
   805da:	f04e 0e0d 	orr.w	lr, lr, #13
   805de:	4770      	bx	lr

000805e0 <pxCurrentTCBConst2>:
   805e0:	2007ab90 	.word	0x2007ab90

000805e4 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   805e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   805e8:	4b01      	ldr	r3, [pc, #4]	; (805f0 <vPortYieldFromISR+0xc>)
   805ea:	601a      	str	r2, [r3, #0]
   805ec:	4770      	bx	lr
   805ee:	bf00      	nop
   805f0:	e000ed04 	.word	0xe000ed04

000805f4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   805f4:	f3ef 8011 	mrs	r0, BASEPRI
   805f8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   805fc:	f381 8811 	msr	BASEPRI, r1
   80600:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80602:	2000      	movs	r0, #0

00080604 <vPortEnterCritical>:
{
   80604:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80606:	4b03      	ldr	r3, [pc, #12]	; (80614 <vPortEnterCritical+0x10>)
   80608:	4798      	blx	r3
	uxCriticalNesting++;
   8060a:	4a03      	ldr	r2, [pc, #12]	; (80618 <vPortEnterCritical+0x14>)
   8060c:	6813      	ldr	r3, [r2, #0]
   8060e:	3301      	adds	r3, #1
   80610:	6013      	str	r3, [r2, #0]
   80612:	bd08      	pop	{r3, pc}
   80614:	000805f5 	.word	0x000805f5
   80618:	20070140 	.word	0x20070140

0008061c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   8061c:	f380 8811 	msr	BASEPRI, r0
   80620:	4770      	bx	lr
	...

00080624 <vPortExitCritical>:
{
   80624:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80626:	4a05      	ldr	r2, [pc, #20]	; (8063c <vPortExitCritical+0x18>)
   80628:	6813      	ldr	r3, [r2, #0]
   8062a:	3b01      	subs	r3, #1
   8062c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8062e:	b103      	cbz	r3, 80632 <vPortExitCritical+0xe>
   80630:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
   80632:	2000      	movs	r0, #0
   80634:	4b02      	ldr	r3, [pc, #8]	; (80640 <vPortExitCritical+0x1c>)
   80636:	4798      	blx	r3
}
   80638:	e7fa      	b.n	80630 <vPortExitCritical+0xc>
   8063a:	bf00      	nop
   8063c:	20070140 	.word	0x20070140
   80640:	0008061d 	.word	0x0008061d

00080644 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80644:	f3ef 8009 	mrs	r0, PSP
   80648:	4b0c      	ldr	r3, [pc, #48]	; (8067c <pxCurrentTCBConst>)
   8064a:	681a      	ldr	r2, [r3, #0]
   8064c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80650:	6010      	str	r0, [r2, #0]
   80652:	e92d 4008 	stmdb	sp!, {r3, lr}
   80656:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8065a:	f380 8811 	msr	BASEPRI, r0
   8065e:	f000 fec7 	bl	813f0 <vTaskSwitchContext>
   80662:	f04f 0000 	mov.w	r0, #0
   80666:	f380 8811 	msr	BASEPRI, r0
   8066a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8066e:	6819      	ldr	r1, [r3, #0]
   80670:	6808      	ldr	r0, [r1, #0]
   80672:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80676:	f380 8809 	msr	PSP, r0
   8067a:	4770      	bx	lr

0008067c <pxCurrentTCBConst>:
   8067c:	2007ab90 	.word	0x2007ab90

00080680 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80680:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80686:	4b05      	ldr	r3, [pc, #20]	; (8069c <SysTick_Handler+0x1c>)
   80688:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8068a:	4b05      	ldr	r3, [pc, #20]	; (806a0 <SysTick_Handler+0x20>)
   8068c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   8068e:	4b05      	ldr	r3, [pc, #20]	; (806a4 <SysTick_Handler+0x24>)
   80690:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80692:	2000      	movs	r0, #0
   80694:	4b04      	ldr	r3, [pc, #16]	; (806a8 <SysTick_Handler+0x28>)
   80696:	4798      	blx	r3
   80698:	bd08      	pop	{r3, pc}
   8069a:	bf00      	nop
   8069c:	e000ed04 	.word	0xe000ed04
   806a0:	000805f5 	.word	0x000805f5
   806a4:	000810b5 	.word	0x000810b5
   806a8:	0008061d 	.word	0x0008061d

000806ac <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   806ac:	4a03      	ldr	r2, [pc, #12]	; (806bc <vPortSetupTimerInterrupt+0x10>)
   806ae:	4b04      	ldr	r3, [pc, #16]	; (806c0 <vPortSetupTimerInterrupt+0x14>)
   806b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   806b2:	2207      	movs	r2, #7
   806b4:	3b04      	subs	r3, #4
   806b6:	601a      	str	r2, [r3, #0]
   806b8:	4770      	bx	lr
   806ba:	bf00      	nop
   806bc:	0001481f 	.word	0x0001481f
   806c0:	e000e014 	.word	0xe000e014

000806c4 <xPortStartScheduler>:
{
   806c4:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   806c6:	4b09      	ldr	r3, [pc, #36]	; (806ec <xPortStartScheduler+0x28>)
   806c8:	681a      	ldr	r2, [r3, #0]
   806ca:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   806ce:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   806d0:	681a      	ldr	r2, [r3, #0]
   806d2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   806d6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   806d8:	4b05      	ldr	r3, [pc, #20]	; (806f0 <xPortStartScheduler+0x2c>)
   806da:	4798      	blx	r3
	uxCriticalNesting = 0;
   806dc:	2400      	movs	r4, #0
   806de:	4b05      	ldr	r3, [pc, #20]	; (806f4 <xPortStartScheduler+0x30>)
   806e0:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   806e2:	4b05      	ldr	r3, [pc, #20]	; (806f8 <xPortStartScheduler+0x34>)
   806e4:	4798      	blx	r3
}
   806e6:	4620      	mov	r0, r4
   806e8:	bd10      	pop	{r4, pc}
   806ea:	bf00      	nop
   806ec:	e000ed20 	.word	0xe000ed20
   806f0:	000806ad 	.word	0x000806ad
   806f4:	20070140 	.word	0x20070140
   806f8:	00080595 	.word	0x00080595

000806fc <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   806fc:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   806fe:	4a13      	ldr	r2, [pc, #76]	; (8074c <prvInsertBlockIntoFreeList+0x50>)
   80700:	e000      	b.n	80704 <prvInsertBlockIntoFreeList+0x8>
   80702:	461a      	mov	r2, r3
   80704:	6813      	ldr	r3, [r2, #0]
   80706:	4283      	cmp	r3, r0
   80708:	d3fb      	bcc.n	80702 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8070a:	6851      	ldr	r1, [r2, #4]
   8070c:	1854      	adds	r4, r2, r1
   8070e:	42a0      	cmp	r0, r4
   80710:	d009      	beq.n	80726 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80712:	6841      	ldr	r1, [r0, #4]
   80714:	1844      	adds	r4, r0, r1
   80716:	42a3      	cmp	r3, r4
   80718:	d00a      	beq.n	80730 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   8071a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   8071c:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8071e:	bf18      	it	ne
   80720:	6010      	strne	r0, [r2, #0]
	}
}
   80722:	bc10      	pop	{r4}
   80724:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80726:	6840      	ldr	r0, [r0, #4]
   80728:	4401      	add	r1, r0
   8072a:	6051      	str	r1, [r2, #4]
   8072c:	4610      	mov	r0, r2
   8072e:	e7f0      	b.n	80712 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80730:	4c07      	ldr	r4, [pc, #28]	; (80750 <prvInsertBlockIntoFreeList+0x54>)
   80732:	6824      	ldr	r4, [r4, #0]
   80734:	42a3      	cmp	r3, r4
   80736:	d006      	beq.n	80746 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80738:	685b      	ldr	r3, [r3, #4]
   8073a:	4419      	add	r1, r3
   8073c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8073e:	6813      	ldr	r3, [r2, #0]
   80740:	681b      	ldr	r3, [r3, #0]
   80742:	6003      	str	r3, [r0, #0]
   80744:	e7ea      	b.n	8071c <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80746:	6003      	str	r3, [r0, #0]
   80748:	e7e8      	b.n	8071c <prvInsertBlockIntoFreeList+0x20>
   8074a:	bf00      	nop
   8074c:	2007ab88 	.word	0x2007ab88
   80750:	20070b80 	.word	0x20070b80

00080754 <pvPortMalloc>:
{
   80754:	b538      	push	{r3, r4, r5, lr}
   80756:	4604      	mov	r4, r0
	vTaskSuspendAll();
   80758:	4b2a      	ldr	r3, [pc, #168]	; (80804 <pvPortMalloc+0xb0>)
   8075a:	4798      	blx	r3
		if( pxEnd == NULL )
   8075c:	4b2a      	ldr	r3, [pc, #168]	; (80808 <pvPortMalloc+0xb4>)
   8075e:	681b      	ldr	r3, [r3, #0]
   80760:	b18b      	cbz	r3, 80786 <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
   80762:	2c00      	cmp	r4, #0
   80764:	d047      	beq.n	807f6 <pvPortMalloc+0xa2>
			xWantedSize += heapSTRUCT_SIZE;
   80766:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8076a:	f012 0f07 	tst.w	r2, #7
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8076e:	bf1c      	itt	ne
   80770:	f022 0207 	bicne.w	r2, r2, #7
   80774:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80776:	1e51      	subs	r1, r2, #1
   80778:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   8077c:	4299      	cmp	r1, r3
   8077e:	d83c      	bhi.n	807fa <pvPortMalloc+0xa6>
			pxBlock = xStart.pxNextFreeBlock;
   80780:	4922      	ldr	r1, [pc, #136]	; (8080c <pvPortMalloc+0xb8>)
   80782:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80784:	e016      	b.n	807b4 <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80786:	4a21      	ldr	r2, [pc, #132]	; (8080c <pvPortMalloc+0xb8>)
   80788:	4b21      	ldr	r3, [pc, #132]	; (80810 <pvPortMalloc+0xbc>)
   8078a:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   8078c:	2100      	movs	r1, #0
   8078e:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
   80790:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80794:	1898      	adds	r0, r3, r2
   80796:	4d1c      	ldr	r5, [pc, #112]	; (80808 <pvPortMalloc+0xb4>)
   80798:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
   8079a:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   8079e:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   807a0:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   807a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   807a4:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   807a6:	4a1b      	ldr	r2, [pc, #108]	; (80814 <pvPortMalloc+0xc0>)
   807a8:	6813      	ldr	r3, [r2, #0]
   807aa:	3b10      	subs	r3, #16
   807ac:	6013      	str	r3, [r2, #0]
   807ae:	e7d8      	b.n	80762 <pvPortMalloc+0xe>
   807b0:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
   807b2:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   807b4:	6863      	ldr	r3, [r4, #4]
   807b6:	429a      	cmp	r2, r3
   807b8:	d902      	bls.n	807c0 <pvPortMalloc+0x6c>
   807ba:	6823      	ldr	r3, [r4, #0]
   807bc:	2b00      	cmp	r3, #0
   807be:	d1f7      	bne.n	807b0 <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
   807c0:	4b11      	ldr	r3, [pc, #68]	; (80808 <pvPortMalloc+0xb4>)
   807c2:	681b      	ldr	r3, [r3, #0]
   807c4:	429c      	cmp	r4, r3
   807c6:	d01a      	beq.n	807fe <pvPortMalloc+0xaa>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   807c8:	680d      	ldr	r5, [r1, #0]
   807ca:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   807cc:	6823      	ldr	r3, [r4, #0]
   807ce:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   807d0:	6863      	ldr	r3, [r4, #4]
   807d2:	1a9b      	subs	r3, r3, r2
   807d4:	2b20      	cmp	r3, #32
   807d6:	d808      	bhi.n	807ea <pvPortMalloc+0x96>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   807d8:	4a0e      	ldr	r2, [pc, #56]	; (80814 <pvPortMalloc+0xc0>)
   807da:	6813      	ldr	r3, [r2, #0]
   807dc:	6861      	ldr	r1, [r4, #4]
   807de:	1a5b      	subs	r3, r3, r1
   807e0:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
   807e2:	4b0d      	ldr	r3, [pc, #52]	; (80818 <pvPortMalloc+0xc4>)
   807e4:	4798      	blx	r3
}
   807e6:	4628      	mov	r0, r5
   807e8:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   807ea:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   807ec:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   807ee:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   807f0:	4b0a      	ldr	r3, [pc, #40]	; (8081c <pvPortMalloc+0xc8>)
   807f2:	4798      	blx	r3
   807f4:	e7f0      	b.n	807d8 <pvPortMalloc+0x84>
void *pvReturn = NULL;
   807f6:	2500      	movs	r5, #0
   807f8:	e7f3      	b.n	807e2 <pvPortMalloc+0x8e>
   807fa:	2500      	movs	r5, #0
   807fc:	e7f1      	b.n	807e2 <pvPortMalloc+0x8e>
   807fe:	2500      	movs	r5, #0
   80800:	e7ef      	b.n	807e2 <pvPortMalloc+0x8e>
   80802:	bf00      	nop
   80804:	00081085 	.word	0x00081085
   80808:	20070b80 	.word	0x20070b80
   8080c:	2007ab88 	.word	0x2007ab88
   80810:	20070b88 	.word	0x20070b88
   80814:	20070144 	.word	0x20070144
   80818:	000811dd 	.word	0x000811dd
   8081c:	000806fd 	.word	0x000806fd

00080820 <vPortFree>:
	if( pv != NULL )
   80820:	b180      	cbz	r0, 80844 <vPortFree+0x24>
{
   80822:	b510      	push	{r4, lr}
   80824:	4604      	mov	r4, r0
		vTaskSuspendAll();
   80826:	4b08      	ldr	r3, [pc, #32]	; (80848 <vPortFree+0x28>)
   80828:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
   8082a:	4a08      	ldr	r2, [pc, #32]	; (8084c <vPortFree+0x2c>)
   8082c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80830:	6811      	ldr	r1, [r2, #0]
   80832:	440b      	add	r3, r1
   80834:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80836:	f1a4 0010 	sub.w	r0, r4, #16
   8083a:	4b05      	ldr	r3, [pc, #20]	; (80850 <vPortFree+0x30>)
   8083c:	4798      	blx	r3
		xTaskResumeAll();
   8083e:	4b05      	ldr	r3, [pc, #20]	; (80854 <vPortFree+0x34>)
   80840:	4798      	blx	r3
   80842:	bd10      	pop	{r4, pc}
   80844:	4770      	bx	lr
   80846:	bf00      	nop
   80848:	00081085 	.word	0x00081085
   8084c:	20070144 	.word	0x20070144
   80850:	000806fd 	.word	0x000806fd
   80854:	000811dd 	.word	0x000811dd

00080858 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80858:	b510      	push	{r4, lr}
   8085a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   8085c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   8085e:	b95b      	cbnz	r3, 80878 <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80860:	6803      	ldr	r3, [r0, #0]
   80862:	b11b      	cbz	r3, 8086c <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80866:	3301      	adds	r3, #1
   80868:	63a3      	str	r3, [r4, #56]	; 0x38
   8086a:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   8086c:	6840      	ldr	r0, [r0, #4]
   8086e:	4b12      	ldr	r3, [pc, #72]	; (808b8 <prvCopyDataToQueue+0x60>)
   80870:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80872:	2300      	movs	r3, #0
   80874:	6063      	str	r3, [r4, #4]
   80876:	e7f5      	b.n	80864 <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   80878:	b96a      	cbnz	r2, 80896 <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8087a:	461a      	mov	r2, r3
   8087c:	6880      	ldr	r0, [r0, #8]
   8087e:	4b0f      	ldr	r3, [pc, #60]	; (808bc <prvCopyDataToQueue+0x64>)
   80880:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80882:	68a3      	ldr	r3, [r4, #8]
   80884:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80886:	4413      	add	r3, r2
   80888:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   8088a:	6862      	ldr	r2, [r4, #4]
   8088c:	4293      	cmp	r3, r2
   8088e:	d3e9      	bcc.n	80864 <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80890:	6823      	ldr	r3, [r4, #0]
   80892:	60a3      	str	r3, [r4, #8]
   80894:	e7e6      	b.n	80864 <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80896:	461a      	mov	r2, r3
   80898:	68c0      	ldr	r0, [r0, #12]
   8089a:	4b08      	ldr	r3, [pc, #32]	; (808bc <prvCopyDataToQueue+0x64>)
   8089c:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8089e:	6c22      	ldr	r2, [r4, #64]	; 0x40
   808a0:	4252      	negs	r2, r2
   808a2:	68e3      	ldr	r3, [r4, #12]
   808a4:	4413      	add	r3, r2
   808a6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   808a8:	6821      	ldr	r1, [r4, #0]
   808aa:	428b      	cmp	r3, r1
   808ac:	d2da      	bcs.n	80864 <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   808ae:	6863      	ldr	r3, [r4, #4]
   808b0:	441a      	add	r2, r3
   808b2:	60e2      	str	r2, [r4, #12]
   808b4:	e7d6      	b.n	80864 <prvCopyDataToQueue+0xc>
   808b6:	bf00      	nop
   808b8:	0008171d 	.word	0x0008171d
   808bc:	00084041 	.word	0x00084041

000808c0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   808c0:	b538      	push	{r3, r4, r5, lr}
   808c2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   808c4:	6800      	ldr	r0, [r0, #0]
   808c6:	b158      	cbz	r0, 808e0 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   808c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   808ca:	68dc      	ldr	r4, [r3, #12]
   808cc:	4414      	add	r4, r2
   808ce:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   808d0:	685d      	ldr	r5, [r3, #4]
   808d2:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   808d4:	bf28      	it	cs
   808d6:	60d8      	strcs	r0, [r3, #12]
   808d8:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   808da:	68d9      	ldr	r1, [r3, #12]
   808dc:	4b01      	ldr	r3, [pc, #4]	; (808e4 <prvCopyDataFromQueue+0x24>)
   808de:	4798      	blx	r3
   808e0:	bd38      	pop	{r3, r4, r5, pc}
   808e2:	bf00      	nop
   808e4:	00084041 	.word	0x00084041

000808e8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   808e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   808ea:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   808ec:	4b1f      	ldr	r3, [pc, #124]	; (8096c <prvUnlockQueue+0x84>)
   808ee:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   808f0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   808f2:	2b00      	cmp	r3, #0
   808f4:	dd14      	ble.n	80920 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   808f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   808f8:	b193      	cbz	r3, 80920 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   808fa:	f104 0624 	add.w	r6, r4, #36	; 0x24
   808fe:	4d1c      	ldr	r5, [pc, #112]	; (80970 <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80900:	4f1c      	ldr	r7, [pc, #112]	; (80974 <prvUnlockQueue+0x8c>)
   80902:	e007      	b.n	80914 <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
   80904:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80906:	3b01      	subs	r3, #1
   80908:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8090a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8090c:	2b00      	cmp	r3, #0
   8090e:	dd07      	ble.n	80920 <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80910:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80912:	b12b      	cbz	r3, 80920 <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80914:	4630      	mov	r0, r6
   80916:	47a8      	blx	r5
   80918:	2800      	cmp	r0, #0
   8091a:	d0f3      	beq.n	80904 <prvUnlockQueue+0x1c>
					vTaskMissedYield();
   8091c:	47b8      	blx	r7
   8091e:	e7f1      	b.n	80904 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80920:	f04f 33ff 	mov.w	r3, #4294967295
   80924:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80926:	4b14      	ldr	r3, [pc, #80]	; (80978 <prvUnlockQueue+0x90>)
   80928:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   8092a:	4b10      	ldr	r3, [pc, #64]	; (8096c <prvUnlockQueue+0x84>)
   8092c:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8092e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80930:	2b00      	cmp	r3, #0
   80932:	dd14      	ble.n	8095e <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80934:	6923      	ldr	r3, [r4, #16]
   80936:	b193      	cbz	r3, 8095e <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80938:	f104 0610 	add.w	r6, r4, #16
   8093c:	4d0c      	ldr	r5, [pc, #48]	; (80970 <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
   8093e:	4f0d      	ldr	r7, [pc, #52]	; (80974 <prvUnlockQueue+0x8c>)
   80940:	e007      	b.n	80952 <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
   80942:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80944:	3b01      	subs	r3, #1
   80946:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80948:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8094a:	2b00      	cmp	r3, #0
   8094c:	dd07      	ble.n	8095e <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8094e:	6923      	ldr	r3, [r4, #16]
   80950:	b12b      	cbz	r3, 8095e <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80952:	4630      	mov	r0, r6
   80954:	47a8      	blx	r5
   80956:	2800      	cmp	r0, #0
   80958:	d0f3      	beq.n	80942 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
   8095a:	47b8      	blx	r7
   8095c:	e7f1      	b.n	80942 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   8095e:	f04f 33ff 	mov.w	r3, #4294967295
   80962:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80964:	4b04      	ldr	r3, [pc, #16]	; (80978 <prvUnlockQueue+0x90>)
   80966:	4798      	blx	r3
   80968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8096a:	bf00      	nop
   8096c:	00080605 	.word	0x00080605
   80970:	00081535 	.word	0x00081535
   80974:	00081665 	.word	0x00081665
   80978:	00080625 	.word	0x00080625

0008097c <xQueueGenericReset>:
{
   8097c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   8097e:	b308      	cbz	r0, 809c4 <xQueueGenericReset+0x48>
   80980:	460d      	mov	r5, r1
   80982:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   80984:	4b17      	ldr	r3, [pc, #92]	; (809e4 <xQueueGenericReset+0x68>)
   80986:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80988:	6822      	ldr	r2, [r4, #0]
   8098a:	6c21      	ldr	r1, [r4, #64]	; 0x40
   8098c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8098e:	fb03 f301 	mul.w	r3, r3, r1
   80992:	18d0      	adds	r0, r2, r3
   80994:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80996:	2000      	movs	r0, #0
   80998:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8099a:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   8099c:	1a5b      	subs	r3, r3, r1
   8099e:	4413      	add	r3, r2
   809a0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   809a2:	f04f 33ff 	mov.w	r3, #4294967295
   809a6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   809a8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
   809aa:	b995      	cbnz	r5, 809d2 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   809ac:	6923      	ldr	r3, [r4, #16]
   809ae:	b12b      	cbz	r3, 809bc <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   809b0:	f104 0010 	add.w	r0, r4, #16
   809b4:	4b0c      	ldr	r3, [pc, #48]	; (809e8 <xQueueGenericReset+0x6c>)
   809b6:	4798      	blx	r3
   809b8:	2801      	cmp	r0, #1
   809ba:	d007      	beq.n	809cc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
   809bc:	4b0b      	ldr	r3, [pc, #44]	; (809ec <xQueueGenericReset+0x70>)
   809be:	4798      	blx	r3
}
   809c0:	2001      	movs	r0, #1
   809c2:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   809c4:	4b0a      	ldr	r3, [pc, #40]	; (809f0 <xQueueGenericReset+0x74>)
   809c6:	4798      	blx	r3
   809c8:	bf00      	nop
   809ca:	e7fd      	b.n	809c8 <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
   809cc:	4b09      	ldr	r3, [pc, #36]	; (809f4 <xQueueGenericReset+0x78>)
   809ce:	4798      	blx	r3
   809d0:	e7f4      	b.n	809bc <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   809d2:	f104 0010 	add.w	r0, r4, #16
   809d6:	4d08      	ldr	r5, [pc, #32]	; (809f8 <xQueueGenericReset+0x7c>)
   809d8:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   809da:	f104 0024 	add.w	r0, r4, #36	; 0x24
   809de:	47a8      	blx	r5
   809e0:	e7ec      	b.n	809bc <xQueueGenericReset+0x40>
   809e2:	bf00      	nop
   809e4:	00080605 	.word	0x00080605
   809e8:	00081535 	.word	0x00081535
   809ec:	00080625 	.word	0x00080625
   809f0:	000805f5 	.word	0x000805f5
   809f4:	000805e5 	.word	0x000805e5
   809f8:	000804fd 	.word	0x000804fd

000809fc <xQueueGenericCreate>:
{
   809fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   809fe:	b1d8      	cbz	r0, 80a38 <xQueueGenericCreate+0x3c>
   80a00:	460d      	mov	r5, r1
   80a02:	4617      	mov	r7, r2
   80a04:	4606      	mov	r6, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80a06:	2050      	movs	r0, #80	; 0x50
   80a08:	4b0d      	ldr	r3, [pc, #52]	; (80a40 <xQueueGenericCreate+0x44>)
   80a0a:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80a0c:	4604      	mov	r4, r0
   80a0e:	b198      	cbz	r0, 80a38 <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80a10:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80a14:	3001      	adds	r0, #1
   80a16:	4b0a      	ldr	r3, [pc, #40]	; (80a40 <xQueueGenericCreate+0x44>)
   80a18:	4798      	blx	r3
   80a1a:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80a1c:	b148      	cbz	r0, 80a32 <xQueueGenericCreate+0x36>
				pxNewQueue->uxLength = uxQueueLength;
   80a1e:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80a20:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80a22:	2101      	movs	r1, #1
   80a24:	4620      	mov	r0, r4
   80a26:	4b07      	ldr	r3, [pc, #28]	; (80a44 <xQueueGenericCreate+0x48>)
   80a28:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
   80a2a:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
}
   80a2e:	4620      	mov	r0, r4
   80a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vPortFree( pxNewQueue );
   80a32:	4620      	mov	r0, r4
   80a34:	4b04      	ldr	r3, [pc, #16]	; (80a48 <xQueueGenericCreate+0x4c>)
   80a36:	4798      	blx	r3
	configASSERT( xReturn );
   80a38:	4b04      	ldr	r3, [pc, #16]	; (80a4c <xQueueGenericCreate+0x50>)
   80a3a:	4798      	blx	r3
   80a3c:	bf00      	nop
   80a3e:	e7fd      	b.n	80a3c <xQueueGenericCreate+0x40>
   80a40:	00080755 	.word	0x00080755
   80a44:	0008097d 	.word	0x0008097d
   80a48:	00080821 	.word	0x00080821
   80a4c:	000805f5 	.word	0x000805f5

00080a50 <xQueueGenericSend>:
{
   80a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80a54:	b085      	sub	sp, #20
   80a56:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80a58:	b148      	cbz	r0, 80a6e <xQueueGenericSend+0x1e>
   80a5a:	4688      	mov	r8, r1
   80a5c:	4699      	mov	r9, r3
   80a5e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a60:	b149      	cbz	r1, 80a76 <xQueueGenericSend+0x26>
   80a62:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80a64:	4e38      	ldr	r6, [pc, #224]	; (80b48 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
   80a66:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80b74 <xQueueGenericSend+0x124>
		taskEXIT_CRITICAL();
   80a6a:	4d38      	ldr	r5, [pc, #224]	; (80b4c <xQueueGenericSend+0xfc>)
   80a6c:	e02e      	b.n	80acc <xQueueGenericSend+0x7c>
	configASSERT( pxQueue );
   80a6e:	4b38      	ldr	r3, [pc, #224]	; (80b50 <xQueueGenericSend+0x100>)
   80a70:	4798      	blx	r3
   80a72:	bf00      	nop
   80a74:	e7fd      	b.n	80a72 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a76:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a78:	b11b      	cbz	r3, 80a82 <xQueueGenericSend+0x32>
   80a7a:	4b35      	ldr	r3, [pc, #212]	; (80b50 <xQueueGenericSend+0x100>)
   80a7c:	4798      	blx	r3
   80a7e:	bf00      	nop
   80a80:	e7fd      	b.n	80a7e <xQueueGenericSend+0x2e>
   80a82:	2700      	movs	r7, #0
   80a84:	e7ee      	b.n	80a64 <xQueueGenericSend+0x14>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80a86:	464a      	mov	r2, r9
   80a88:	4641      	mov	r1, r8
   80a8a:	4620      	mov	r0, r4
   80a8c:	4b31      	ldr	r3, [pc, #196]	; (80b54 <xQueueGenericSend+0x104>)
   80a8e:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80a90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80a92:	b92b      	cbnz	r3, 80aa0 <xQueueGenericSend+0x50>
				taskEXIT_CRITICAL();
   80a94:	4b2d      	ldr	r3, [pc, #180]	; (80b4c <xQueueGenericSend+0xfc>)
   80a96:	4798      	blx	r3
				return pdPASS;
   80a98:	2001      	movs	r0, #1
}
   80a9a:	b005      	add	sp, #20
   80a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80aa0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80aa4:	4b2c      	ldr	r3, [pc, #176]	; (80b58 <xQueueGenericSend+0x108>)
   80aa6:	4798      	blx	r3
   80aa8:	2801      	cmp	r0, #1
   80aaa:	d1f3      	bne.n	80a94 <xQueueGenericSend+0x44>
						portYIELD_WITHIN_API();
   80aac:	4b2b      	ldr	r3, [pc, #172]	; (80b5c <xQueueGenericSend+0x10c>)
   80aae:	4798      	blx	r3
   80ab0:	e7f0      	b.n	80a94 <xQueueGenericSend+0x44>
					taskEXIT_CRITICAL();
   80ab2:	4b26      	ldr	r3, [pc, #152]	; (80b4c <xQueueGenericSend+0xfc>)
   80ab4:	4798      	blx	r3
					return errQUEUE_FULL;
   80ab6:	2000      	movs	r0, #0
   80ab8:	e7ef      	b.n	80a9a <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
   80aba:	a802      	add	r0, sp, #8
   80abc:	47d0      	blx	sl
   80abe:	e00f      	b.n	80ae0 <xQueueGenericSend+0x90>
				prvUnlockQueue( pxQueue );
   80ac0:	4620      	mov	r0, r4
   80ac2:	4b27      	ldr	r3, [pc, #156]	; (80b60 <xQueueGenericSend+0x110>)
   80ac4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80ac6:	4b27      	ldr	r3, [pc, #156]	; (80b64 <xQueueGenericSend+0x114>)
   80ac8:	4798      	blx	r3
   80aca:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80acc:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80ace:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80ad0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80ad2:	429a      	cmp	r2, r3
   80ad4:	d3d7      	bcc.n	80a86 <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   80ad6:	9b01      	ldr	r3, [sp, #4]
   80ad8:	2b00      	cmp	r3, #0
   80ada:	d0ea      	beq.n	80ab2 <xQueueGenericSend+0x62>
				else if( xEntryTimeSet == pdFALSE )
   80adc:	2f00      	cmp	r7, #0
   80ade:	d0ec      	beq.n	80aba <xQueueGenericSend+0x6a>
		taskEXIT_CRITICAL();
   80ae0:	47a8      	blx	r5
		vTaskSuspendAll();
   80ae2:	4b21      	ldr	r3, [pc, #132]	; (80b68 <xQueueGenericSend+0x118>)
   80ae4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80ae6:	47b0      	blx	r6
   80ae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80aea:	f1b3 3fff 	cmp.w	r3, #4294967295
   80aee:	bf04      	itt	eq
   80af0:	2300      	moveq	r3, #0
   80af2:	6463      	streq	r3, [r4, #68]	; 0x44
   80af4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80af6:	f1b3 3fff 	cmp.w	r3, #4294967295
   80afa:	bf04      	itt	eq
   80afc:	2300      	moveq	r3, #0
   80afe:	64a3      	streq	r3, [r4, #72]	; 0x48
   80b00:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80b02:	a901      	add	r1, sp, #4
   80b04:	a802      	add	r0, sp, #8
   80b06:	4b19      	ldr	r3, [pc, #100]	; (80b6c <xQueueGenericSend+0x11c>)
   80b08:	4798      	blx	r3
   80b0a:	b9a8      	cbnz	r0, 80b38 <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80b0c:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80b0e:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   80b12:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80b14:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80b16:	45bb      	cmp	fp, r7
   80b18:	d1d2      	bne.n	80ac0 <xQueueGenericSend+0x70>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80b1a:	9901      	ldr	r1, [sp, #4]
   80b1c:	f104 0010 	add.w	r0, r4, #16
   80b20:	4b13      	ldr	r3, [pc, #76]	; (80b70 <xQueueGenericSend+0x120>)
   80b22:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80b24:	4620      	mov	r0, r4
   80b26:	4b0e      	ldr	r3, [pc, #56]	; (80b60 <xQueueGenericSend+0x110>)
   80b28:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80b2a:	4b0e      	ldr	r3, [pc, #56]	; (80b64 <xQueueGenericSend+0x114>)
   80b2c:	4798      	blx	r3
   80b2e:	2800      	cmp	r0, #0
   80b30:	d1cb      	bne.n	80aca <xQueueGenericSend+0x7a>
					portYIELD_WITHIN_API();
   80b32:	4b0a      	ldr	r3, [pc, #40]	; (80b5c <xQueueGenericSend+0x10c>)
   80b34:	4798      	blx	r3
   80b36:	e7c8      	b.n	80aca <xQueueGenericSend+0x7a>
			prvUnlockQueue( pxQueue );
   80b38:	4620      	mov	r0, r4
   80b3a:	4b09      	ldr	r3, [pc, #36]	; (80b60 <xQueueGenericSend+0x110>)
   80b3c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80b3e:	4b09      	ldr	r3, [pc, #36]	; (80b64 <xQueueGenericSend+0x114>)
   80b40:	4798      	blx	r3
			return errQUEUE_FULL;
   80b42:	2000      	movs	r0, #0
   80b44:	e7a9      	b.n	80a9a <xQueueGenericSend+0x4a>
   80b46:	bf00      	nop
   80b48:	00080605 	.word	0x00080605
   80b4c:	00080625 	.word	0x00080625
   80b50:	000805f5 	.word	0x000805f5
   80b54:	00080859 	.word	0x00080859
   80b58:	00081535 	.word	0x00081535
   80b5c:	000805e5 	.word	0x000805e5
   80b60:	000808e9 	.word	0x000808e9
   80b64:	000811dd 	.word	0x000811dd
   80b68:	00081085 	.word	0x00081085
   80b6c:	000815e1 	.word	0x000815e1
   80b70:	00081491 	.word	0x00081491
   80b74:	000815b9 	.word	0x000815b9

00080b78 <xQueueGenericSendFromISR>:
{
   80b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
   80b7c:	b190      	cbz	r0, 80ba4 <xQueueGenericSendFromISR+0x2c>
   80b7e:	460e      	mov	r6, r1
   80b80:	4615      	mov	r5, r2
   80b82:	4698      	mov	r8, r3
   80b84:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80b86:	b189      	cbz	r1, 80bac <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80b88:	4b1b      	ldr	r3, [pc, #108]	; (80bf8 <xQueueGenericSendFromISR+0x80>)
   80b8a:	4798      	blx	r3
   80b8c:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80b8e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80b90:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80b92:	429a      	cmp	r2, r3
   80b94:	d311      	bcc.n	80bba <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
   80b96:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80b98:	4638      	mov	r0, r7
   80b9a:	4b18      	ldr	r3, [pc, #96]	; (80bfc <xQueueGenericSendFromISR+0x84>)
   80b9c:	4798      	blx	r3
}
   80b9e:	4620      	mov	r0, r4
   80ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
   80ba4:	4b14      	ldr	r3, [pc, #80]	; (80bf8 <xQueueGenericSendFromISR+0x80>)
   80ba6:	4798      	blx	r3
   80ba8:	bf00      	nop
   80baa:	e7fd      	b.n	80ba8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80bac:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80bae:	2b00      	cmp	r3, #0
   80bb0:	d0ea      	beq.n	80b88 <xQueueGenericSendFromISR+0x10>
   80bb2:	4b11      	ldr	r3, [pc, #68]	; (80bf8 <xQueueGenericSendFromISR+0x80>)
   80bb4:	4798      	blx	r3
   80bb6:	bf00      	nop
   80bb8:	e7fd      	b.n	80bb6 <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80bba:	4642      	mov	r2, r8
   80bbc:	4631      	mov	r1, r6
   80bbe:	4620      	mov	r0, r4
   80bc0:	4b0f      	ldr	r3, [pc, #60]	; (80c00 <xQueueGenericSendFromISR+0x88>)
   80bc2:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   80bc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
   80bca:	d10a      	bne.n	80be2 <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80bcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80bce:	b16b      	cbz	r3, 80bec <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80bd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80bd4:	4b0b      	ldr	r3, [pc, #44]	; (80c04 <xQueueGenericSendFromISR+0x8c>)
   80bd6:	4798      	blx	r3
   80bd8:	b150      	cbz	r0, 80bf0 <xQueueGenericSendFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
   80bda:	b15d      	cbz	r5, 80bf4 <xQueueGenericSendFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
   80bdc:	2401      	movs	r4, #1
   80bde:	602c      	str	r4, [r5, #0]
   80be0:	e7da      	b.n	80b98 <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
   80be2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80be4:	3301      	adds	r3, #1
   80be6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   80be8:	2401      	movs	r4, #1
   80bea:	e7d5      	b.n	80b98 <xQueueGenericSendFromISR+0x20>
   80bec:	2401      	movs	r4, #1
   80bee:	e7d3      	b.n	80b98 <xQueueGenericSendFromISR+0x20>
   80bf0:	2401      	movs	r4, #1
   80bf2:	e7d1      	b.n	80b98 <xQueueGenericSendFromISR+0x20>
   80bf4:	2401      	movs	r4, #1
   80bf6:	e7cf      	b.n	80b98 <xQueueGenericSendFromISR+0x20>
   80bf8:	000805f5 	.word	0x000805f5
   80bfc:	0008061d 	.word	0x0008061d
   80c00:	00080859 	.word	0x00080859
   80c04:	00081535 	.word	0x00081535

00080c08 <xQueueGenericReceive>:
{
   80c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80c0c:	b084      	sub	sp, #16
   80c0e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80c10:	b148      	cbz	r0, 80c26 <xQueueGenericReceive+0x1e>
   80c12:	4688      	mov	r8, r1
   80c14:	4699      	mov	r9, r3
   80c16:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80c18:	b149      	cbz	r1, 80c2e <xQueueGenericReceive+0x26>
   80c1a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80c1c:	4e46      	ldr	r6, [pc, #280]	; (80d38 <xQueueGenericReceive+0x130>)
					vTaskSetTimeOutState( &xTimeOut );
   80c1e:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80d6c <xQueueGenericReceive+0x164>
		taskEXIT_CRITICAL();
   80c22:	4d46      	ldr	r5, [pc, #280]	; (80d3c <xQueueGenericReceive+0x134>)
   80c24:	e04b      	b.n	80cbe <xQueueGenericReceive+0xb6>
	configASSERT( pxQueue );
   80c26:	4b46      	ldr	r3, [pc, #280]	; (80d40 <xQueueGenericReceive+0x138>)
   80c28:	4798      	blx	r3
   80c2a:	bf00      	nop
   80c2c:	e7fd      	b.n	80c2a <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80c2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80c30:	b11b      	cbz	r3, 80c3a <xQueueGenericReceive+0x32>
   80c32:	4b43      	ldr	r3, [pc, #268]	; (80d40 <xQueueGenericReceive+0x138>)
   80c34:	4798      	blx	r3
   80c36:	bf00      	nop
   80c38:	e7fd      	b.n	80c36 <xQueueGenericReceive+0x2e>
   80c3a:	2700      	movs	r7, #0
   80c3c:	e7ee      	b.n	80c1c <xQueueGenericReceive+0x14>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80c3e:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80c40:	4641      	mov	r1, r8
   80c42:	4620      	mov	r0, r4
   80c44:	4b3f      	ldr	r3, [pc, #252]	; (80d44 <xQueueGenericReceive+0x13c>)
   80c46:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
   80c48:	f1b9 0f00 	cmp.w	r9, #0
   80c4c:	d117      	bne.n	80c7e <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
   80c4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80c50:	3b01      	subs	r3, #1
   80c52:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80c54:	6823      	ldr	r3, [r4, #0]
   80c56:	b913      	cbnz	r3, 80c5e <xQueueGenericReceive+0x56>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80c58:	4b3b      	ldr	r3, [pc, #236]	; (80d48 <xQueueGenericReceive+0x140>)
   80c5a:	4798      	blx	r3
   80c5c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80c5e:	6923      	ldr	r3, [r4, #16]
   80c60:	b13b      	cbz	r3, 80c72 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80c62:	f104 0010 	add.w	r0, r4, #16
   80c66:	4b39      	ldr	r3, [pc, #228]	; (80d4c <xQueueGenericReceive+0x144>)
   80c68:	4798      	blx	r3
   80c6a:	2801      	cmp	r0, #1
   80c6c:	d101      	bne.n	80c72 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80c6e:	4b38      	ldr	r3, [pc, #224]	; (80d50 <xQueueGenericReceive+0x148>)
   80c70:	4798      	blx	r3
				taskEXIT_CRITICAL();
   80c72:	4b32      	ldr	r3, [pc, #200]	; (80d3c <xQueueGenericReceive+0x134>)
   80c74:	4798      	blx	r3
				return pdPASS;
   80c76:	2001      	movs	r0, #1
}
   80c78:	b004      	add	sp, #16
   80c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80c7e:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80c82:	2b00      	cmp	r3, #0
   80c84:	d0f5      	beq.n	80c72 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c86:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c8a:	4b30      	ldr	r3, [pc, #192]	; (80d4c <xQueueGenericReceive+0x144>)
   80c8c:	4798      	blx	r3
   80c8e:	2800      	cmp	r0, #0
   80c90:	d0ef      	beq.n	80c72 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80c92:	4b2f      	ldr	r3, [pc, #188]	; (80d50 <xQueueGenericReceive+0x148>)
   80c94:	4798      	blx	r3
   80c96:	e7ec      	b.n	80c72 <xQueueGenericReceive+0x6a>
					taskEXIT_CRITICAL();
   80c98:	4b28      	ldr	r3, [pc, #160]	; (80d3c <xQueueGenericReceive+0x134>)
   80c9a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80c9c:	2000      	movs	r0, #0
   80c9e:	e7eb      	b.n	80c78 <xQueueGenericReceive+0x70>
					vTaskSetTimeOutState( &xTimeOut );
   80ca0:	a802      	add	r0, sp, #8
   80ca2:	47d0      	blx	sl
   80ca4:	e014      	b.n	80cd0 <xQueueGenericReceive+0xc8>
						portENTER_CRITICAL();
   80ca6:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80ca8:	6860      	ldr	r0, [r4, #4]
   80caa:	4b2a      	ldr	r3, [pc, #168]	; (80d54 <xQueueGenericReceive+0x14c>)
   80cac:	4798      	blx	r3
						portEXIT_CRITICAL();
   80cae:	47a8      	blx	r5
   80cb0:	e02c      	b.n	80d0c <xQueueGenericReceive+0x104>
				prvUnlockQueue( pxQueue );
   80cb2:	4620      	mov	r0, r4
   80cb4:	4b28      	ldr	r3, [pc, #160]	; (80d58 <xQueueGenericReceive+0x150>)
   80cb6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80cb8:	4b28      	ldr	r3, [pc, #160]	; (80d5c <xQueueGenericReceive+0x154>)
   80cba:	4798      	blx	r3
   80cbc:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80cbe:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80cc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80cc2:	2b00      	cmp	r3, #0
   80cc4:	d1bb      	bne.n	80c3e <xQueueGenericReceive+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   80cc6:	9b01      	ldr	r3, [sp, #4]
   80cc8:	2b00      	cmp	r3, #0
   80cca:	d0e5      	beq.n	80c98 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
   80ccc:	2f00      	cmp	r7, #0
   80cce:	d0e7      	beq.n	80ca0 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
   80cd0:	47a8      	blx	r5
		vTaskSuspendAll();
   80cd2:	4b23      	ldr	r3, [pc, #140]	; (80d60 <xQueueGenericReceive+0x158>)
   80cd4:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80cd6:	47b0      	blx	r6
   80cd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80cda:	f1b3 3fff 	cmp.w	r3, #4294967295
   80cde:	bf04      	itt	eq
   80ce0:	2300      	moveq	r3, #0
   80ce2:	6463      	streq	r3, [r4, #68]	; 0x44
   80ce4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
   80cea:	bf04      	itt	eq
   80cec:	2300      	moveq	r3, #0
   80cee:	64a3      	streq	r3, [r4, #72]	; 0x48
   80cf0:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80cf2:	a901      	add	r1, sp, #4
   80cf4:	a802      	add	r0, sp, #8
   80cf6:	4b1b      	ldr	r3, [pc, #108]	; (80d64 <xQueueGenericReceive+0x15c>)
   80cf8:	4798      	blx	r3
   80cfa:	b9b0      	cbnz	r0, 80d2a <xQueueGenericReceive+0x122>
	taskENTER_CRITICAL();
   80cfc:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80cfe:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80d00:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80d02:	2f00      	cmp	r7, #0
   80d04:	d1d5      	bne.n	80cb2 <xQueueGenericReceive+0xaa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80d06:	6823      	ldr	r3, [r4, #0]
   80d08:	2b00      	cmp	r3, #0
   80d0a:	d0cc      	beq.n	80ca6 <xQueueGenericReceive+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80d0c:	9901      	ldr	r1, [sp, #4]
   80d0e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d12:	4b15      	ldr	r3, [pc, #84]	; (80d68 <xQueueGenericReceive+0x160>)
   80d14:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80d16:	4620      	mov	r0, r4
   80d18:	4b0f      	ldr	r3, [pc, #60]	; (80d58 <xQueueGenericReceive+0x150>)
   80d1a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80d1c:	4b0f      	ldr	r3, [pc, #60]	; (80d5c <xQueueGenericReceive+0x154>)
   80d1e:	4798      	blx	r3
   80d20:	2800      	cmp	r0, #0
   80d22:	d1cb      	bne.n	80cbc <xQueueGenericReceive+0xb4>
					portYIELD_WITHIN_API();
   80d24:	4b0a      	ldr	r3, [pc, #40]	; (80d50 <xQueueGenericReceive+0x148>)
   80d26:	4798      	blx	r3
   80d28:	e7c8      	b.n	80cbc <xQueueGenericReceive+0xb4>
			prvUnlockQueue( pxQueue );
   80d2a:	4620      	mov	r0, r4
   80d2c:	4b0a      	ldr	r3, [pc, #40]	; (80d58 <xQueueGenericReceive+0x150>)
   80d2e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80d30:	4b0a      	ldr	r3, [pc, #40]	; (80d5c <xQueueGenericReceive+0x154>)
   80d32:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80d34:	2000      	movs	r0, #0
   80d36:	e79f      	b.n	80c78 <xQueueGenericReceive+0x70>
   80d38:	00080605 	.word	0x00080605
   80d3c:	00080625 	.word	0x00080625
   80d40:	000805f5 	.word	0x000805f5
   80d44:	000808c1 	.word	0x000808c1
   80d48:	00081671 	.word	0x00081671
   80d4c:	00081535 	.word	0x00081535
   80d50:	000805e5 	.word	0x000805e5
   80d54:	0008169d 	.word	0x0008169d
   80d58:	000808e9 	.word	0x000808e9
   80d5c:	000811dd 	.word	0x000811dd
   80d60:	00081085 	.word	0x00081085
   80d64:	000815e1 	.word	0x000815e1
   80d68:	00081491 	.word	0x00081491
   80d6c:	000815b9 	.word	0x000815b9

00080d70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80d70:	b538      	push	{r3, r4, r5, lr}
   80d72:	4604      	mov	r4, r0
   80d74:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80d76:	4b0e      	ldr	r3, [pc, #56]	; (80db0 <vQueueWaitForMessageRestricted+0x40>)
   80d78:	4798      	blx	r3
   80d7a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d80:	bf04      	itt	eq
   80d82:	2300      	moveq	r3, #0
   80d84:	6463      	streq	r3, [r4, #68]	; 0x44
   80d86:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d88:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d8c:	bf04      	itt	eq
   80d8e:	2300      	moveq	r3, #0
   80d90:	64a3      	streq	r3, [r4, #72]	; 0x48
   80d92:	4b08      	ldr	r3, [pc, #32]	; (80db4 <vQueueWaitForMessageRestricted+0x44>)
   80d94:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80d96:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80d98:	b11b      	cbz	r3, 80da2 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
   80d9a:	4620      	mov	r0, r4
   80d9c:	4b06      	ldr	r3, [pc, #24]	; (80db8 <vQueueWaitForMessageRestricted+0x48>)
   80d9e:	4798      	blx	r3
   80da0:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80da2:	4629      	mov	r1, r5
   80da4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80da8:	4b04      	ldr	r3, [pc, #16]	; (80dbc <vQueueWaitForMessageRestricted+0x4c>)
   80daa:	4798      	blx	r3
   80dac:	e7f5      	b.n	80d9a <vQueueWaitForMessageRestricted+0x2a>
   80dae:	bf00      	nop
   80db0:	00080605 	.word	0x00080605
   80db4:	00080625 	.word	0x00080625
   80db8:	000808e9 	.word	0x000808e9
   80dbc:	000814f1 	.word	0x000814f1

00080dc0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80dc0:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80dc2:	4b0f      	ldr	r3, [pc, #60]	; (80e00 <prvAddCurrentTaskToDelayedList+0x40>)
   80dc4:	681b      	ldr	r3, [r3, #0]
   80dc6:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80dc8:	4b0e      	ldr	r3, [pc, #56]	; (80e04 <prvAddCurrentTaskToDelayedList+0x44>)
   80dca:	681b      	ldr	r3, [r3, #0]
   80dcc:	4298      	cmp	r0, r3
   80dce:	d30e      	bcc.n	80dee <prvAddCurrentTaskToDelayedList+0x2e>
   80dd0:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80dd2:	4b0d      	ldr	r3, [pc, #52]	; (80e08 <prvAddCurrentTaskToDelayedList+0x48>)
   80dd4:	6818      	ldr	r0, [r3, #0]
   80dd6:	4b0a      	ldr	r3, [pc, #40]	; (80e00 <prvAddCurrentTaskToDelayedList+0x40>)
   80dd8:	6819      	ldr	r1, [r3, #0]
   80dda:	3104      	adds	r1, #4
   80ddc:	4b0b      	ldr	r3, [pc, #44]	; (80e0c <prvAddCurrentTaskToDelayedList+0x4c>)
   80dde:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80de0:	4b0b      	ldr	r3, [pc, #44]	; (80e10 <prvAddCurrentTaskToDelayedList+0x50>)
   80de2:	681b      	ldr	r3, [r3, #0]
   80de4:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80de6:	bf3c      	itt	cc
   80de8:	4b09      	ldrcc	r3, [pc, #36]	; (80e10 <prvAddCurrentTaskToDelayedList+0x50>)
   80dea:	601c      	strcc	r4, [r3, #0]
   80dec:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80dee:	4b09      	ldr	r3, [pc, #36]	; (80e14 <prvAddCurrentTaskToDelayedList+0x54>)
   80df0:	6818      	ldr	r0, [r3, #0]
   80df2:	4b03      	ldr	r3, [pc, #12]	; (80e00 <prvAddCurrentTaskToDelayedList+0x40>)
   80df4:	6819      	ldr	r1, [r3, #0]
   80df6:	3104      	adds	r1, #4
   80df8:	4b04      	ldr	r3, [pc, #16]	; (80e0c <prvAddCurrentTaskToDelayedList+0x4c>)
   80dfa:	4798      	blx	r3
   80dfc:	bd10      	pop	{r4, pc}
   80dfe:	bf00      	nop
   80e00:	2007ab90 	.word	0x2007ab90
   80e04:	2007ac8c 	.word	0x2007ac8c
   80e08:	2007ab94 	.word	0x2007ab94
   80e0c:	00080535 	.word	0x00080535
   80e10:	20070148 	.word	0x20070148
   80e14:	2007ab98 	.word	0x2007ab98

00080e18 <xTaskGenericCreate>:
{
   80e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80e1c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   80e1e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   80e22:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
   80e24:	b148      	cbz	r0, 80e3a <xTaskGenericCreate+0x22>
   80e26:	4688      	mov	r8, r1
   80e28:	4615      	mov	r5, r2
   80e2a:	469b      	mov	fp, r3
   80e2c:	4682      	mov	sl, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80e2e:	2f04      	cmp	r7, #4
   80e30:	d907      	bls.n	80e42 <xTaskGenericCreate+0x2a>
   80e32:	4b60      	ldr	r3, [pc, #384]	; (80fb4 <xTaskGenericCreate+0x19c>)
   80e34:	4798      	blx	r3
   80e36:	bf00      	nop
   80e38:	e7fd      	b.n	80e36 <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
   80e3a:	4b5e      	ldr	r3, [pc, #376]	; (80fb4 <xTaskGenericCreate+0x19c>)
   80e3c:	4798      	blx	r3
   80e3e:	bf00      	nop
   80e40:	e7fd      	b.n	80e3e <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80e42:	204c      	movs	r0, #76	; 0x4c
   80e44:	4b5c      	ldr	r3, [pc, #368]	; (80fb8 <xTaskGenericCreate+0x1a0>)
   80e46:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80e48:	4604      	mov	r4, r0
   80e4a:	2800      	cmp	r0, #0
   80e4c:	d054      	beq.n	80ef8 <xTaskGenericCreate+0xe0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80e4e:	2e00      	cmp	r6, #0
   80e50:	d048      	beq.n	80ee4 <xTaskGenericCreate+0xcc>
   80e52:	6306      	str	r6, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80e54:	00aa      	lsls	r2, r5, #2
   80e56:	21a5      	movs	r1, #165	; 0xa5
   80e58:	4630      	mov	r0, r6
   80e5a:	4b58      	ldr	r3, [pc, #352]	; (80fbc <xTaskGenericCreate+0x1a4>)
   80e5c:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80e5e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80e62:	3d01      	subs	r5, #1
   80e64:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80e66:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80e6a:	f023 0507 	bic.w	r5, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80e6e:	220a      	movs	r2, #10
   80e70:	4641      	mov	r1, r8
   80e72:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80e76:	4b52      	ldr	r3, [pc, #328]	; (80fc0 <xTaskGenericCreate+0x1a8>)
   80e78:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80e7a:	2300      	movs	r3, #0
   80e7c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
   80e80:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
   80e82:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80e84:	f104 0804 	add.w	r8, r4, #4
   80e88:	4640      	mov	r0, r8
   80e8a:	4e4e      	ldr	r6, [pc, #312]	; (80fc4 <xTaskGenericCreate+0x1ac>)
   80e8c:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80e8e:	f104 0018 	add.w	r0, r4, #24
   80e92:	47b0      	blx	r6
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80e94:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80e96:	f1c7 0305 	rsb	r3, r7, #5
   80e9a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80e9c:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80e9e:	465a      	mov	r2, fp
   80ea0:	4651      	mov	r1, sl
   80ea2:	4628      	mov	r0, r5
   80ea4:	4b48      	ldr	r3, [pc, #288]	; (80fc8 <xTaskGenericCreate+0x1b0>)
   80ea6:	4798      	blx	r3
   80ea8:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80eaa:	f010 0f07 	tst.w	r0, #7
   80eae:	d127      	bne.n	80f00 <xTaskGenericCreate+0xe8>
		if( ( void * ) pxCreatedTask != NULL )
   80eb0:	f1b9 0f00 	cmp.w	r9, #0
   80eb4:	d001      	beq.n	80eba <xTaskGenericCreate+0xa2>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80eb6:	f8c9 4000 	str.w	r4, [r9]
		taskENTER_CRITICAL();
   80eba:	4b44      	ldr	r3, [pc, #272]	; (80fcc <xTaskGenericCreate+0x1b4>)
   80ebc:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
   80ebe:	4a44      	ldr	r2, [pc, #272]	; (80fd0 <xTaskGenericCreate+0x1b8>)
   80ec0:	6813      	ldr	r3, [r2, #0]
   80ec2:	3301      	adds	r3, #1
   80ec4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80ec6:	4b43      	ldr	r3, [pc, #268]	; (80fd4 <xTaskGenericCreate+0x1bc>)
   80ec8:	681b      	ldr	r3, [r3, #0]
   80eca:	b1eb      	cbz	r3, 80f08 <xTaskGenericCreate+0xf0>
				if( xSchedulerRunning == pdFALSE )
   80ecc:	4b42      	ldr	r3, [pc, #264]	; (80fd8 <xTaskGenericCreate+0x1c0>)
   80ece:	681b      	ldr	r3, [r3, #0]
   80ed0:	2b00      	cmp	r3, #0
   80ed2:	d140      	bne.n	80f56 <xTaskGenericCreate+0x13e>
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80ed4:	4b3f      	ldr	r3, [pc, #252]	; (80fd4 <xTaskGenericCreate+0x1bc>)
   80ed6:	681b      	ldr	r3, [r3, #0]
   80ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80eda:	429f      	cmp	r7, r3
						pxCurrentTCB = pxNewTCB;
   80edc:	bf24      	itt	cs
   80ede:	4b3d      	ldrcs	r3, [pc, #244]	; (80fd4 <xTaskGenericCreate+0x1bc>)
   80ee0:	601c      	strcs	r4, [r3, #0]
   80ee2:	e038      	b.n	80f56 <xTaskGenericCreate+0x13e>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80ee4:	00a8      	lsls	r0, r5, #2
   80ee6:	4b34      	ldr	r3, [pc, #208]	; (80fb8 <xTaskGenericCreate+0x1a0>)
   80ee8:	4798      	blx	r3
   80eea:	4606      	mov	r6, r0
   80eec:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
   80eee:	2800      	cmp	r0, #0
   80ef0:	d1b0      	bne.n	80e54 <xTaskGenericCreate+0x3c>
			vPortFree( pxNewTCB );
   80ef2:	4620      	mov	r0, r4
   80ef4:	4b39      	ldr	r3, [pc, #228]	; (80fdc <xTaskGenericCreate+0x1c4>)
   80ef6:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80ef8:	f04f 30ff 	mov.w	r0, #4294967295
}
   80efc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80f00:	4b2c      	ldr	r3, [pc, #176]	; (80fb4 <xTaskGenericCreate+0x19c>)
   80f02:	4798      	blx	r3
   80f04:	bf00      	nop
   80f06:	e7fd      	b.n	80f04 <xTaskGenericCreate+0xec>
				pxCurrentTCB =  pxNewTCB;
   80f08:	4b32      	ldr	r3, [pc, #200]	; (80fd4 <xTaskGenericCreate+0x1bc>)
   80f0a:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80f0c:	6813      	ldr	r3, [r2, #0]
   80f0e:	2b01      	cmp	r3, #1
   80f10:	d121      	bne.n	80f56 <xTaskGenericCreate+0x13e>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80f12:	4e33      	ldr	r6, [pc, #204]	; (80fe0 <xTaskGenericCreate+0x1c8>)
   80f14:	4630      	mov	r0, r6
   80f16:	4d33      	ldr	r5, [pc, #204]	; (80fe4 <xTaskGenericCreate+0x1cc>)
   80f18:	47a8      	blx	r5
   80f1a:	f106 0014 	add.w	r0, r6, #20
   80f1e:	47a8      	blx	r5
   80f20:	f106 0028 	add.w	r0, r6, #40	; 0x28
   80f24:	47a8      	blx	r5
   80f26:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   80f2a:	47a8      	blx	r5
   80f2c:	f106 0050 	add.w	r0, r6, #80	; 0x50
   80f30:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80f32:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 81018 <xTaskGenericCreate+0x200>
   80f36:	4648      	mov	r0, r9
   80f38:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80f3a:	4e2b      	ldr	r6, [pc, #172]	; (80fe8 <xTaskGenericCreate+0x1d0>)
   80f3c:	4630      	mov	r0, r6
   80f3e:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80f40:	482a      	ldr	r0, [pc, #168]	; (80fec <xTaskGenericCreate+0x1d4>)
   80f42:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80f44:	482a      	ldr	r0, [pc, #168]	; (80ff0 <xTaskGenericCreate+0x1d8>)
   80f46:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80f48:	482a      	ldr	r0, [pc, #168]	; (80ff4 <xTaskGenericCreate+0x1dc>)
   80f4a:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   80f4c:	4b2a      	ldr	r3, [pc, #168]	; (80ff8 <xTaskGenericCreate+0x1e0>)
   80f4e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80f52:	4b2a      	ldr	r3, [pc, #168]	; (80ffc <xTaskGenericCreate+0x1e4>)
   80f54:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80f56:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80f58:	4b29      	ldr	r3, [pc, #164]	; (81000 <xTaskGenericCreate+0x1e8>)
   80f5a:	681b      	ldr	r3, [r3, #0]
   80f5c:	4298      	cmp	r0, r3
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80f5e:	bf84      	itt	hi
   80f60:	4b27      	ldrhi	r3, [pc, #156]	; (81000 <xTaskGenericCreate+0x1e8>)
   80f62:	6018      	strhi	r0, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80f64:	4a27      	ldr	r2, [pc, #156]	; (81004 <xTaskGenericCreate+0x1ec>)
   80f66:	6813      	ldr	r3, [r2, #0]
   80f68:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
   80f6a:	3301      	adds	r3, #1
   80f6c:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
   80f6e:	4b26      	ldr	r3, [pc, #152]	; (81008 <xTaskGenericCreate+0x1f0>)
   80f70:	681b      	ldr	r3, [r3, #0]
   80f72:	4298      	cmp	r0, r3
   80f74:	bf84      	itt	hi
   80f76:	4b24      	ldrhi	r3, [pc, #144]	; (81008 <xTaskGenericCreate+0x1f0>)
   80f78:	6018      	strhi	r0, [r3, #0]
   80f7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80f7e:	4641      	mov	r1, r8
   80f80:	4b17      	ldr	r3, [pc, #92]	; (80fe0 <xTaskGenericCreate+0x1c8>)
   80f82:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80f86:	4b21      	ldr	r3, [pc, #132]	; (8100c <xTaskGenericCreate+0x1f4>)
   80f88:	4798      	blx	r3
		taskEXIT_CRITICAL();
   80f8a:	4b21      	ldr	r3, [pc, #132]	; (81010 <xTaskGenericCreate+0x1f8>)
   80f8c:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   80f8e:	4b12      	ldr	r3, [pc, #72]	; (80fd8 <xTaskGenericCreate+0x1c0>)
   80f90:	681b      	ldr	r3, [r3, #0]
   80f92:	b14b      	cbz	r3, 80fa8 <xTaskGenericCreate+0x190>
			if( pxCurrentTCB->uxPriority < uxPriority )
   80f94:	4b0f      	ldr	r3, [pc, #60]	; (80fd4 <xTaskGenericCreate+0x1bc>)
   80f96:	681b      	ldr	r3, [r3, #0]
   80f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80f9a:	429f      	cmp	r7, r3
   80f9c:	d907      	bls.n	80fae <xTaskGenericCreate+0x196>
				portYIELD_WITHIN_API();
   80f9e:	4b1d      	ldr	r3, [pc, #116]	; (81014 <xTaskGenericCreate+0x1fc>)
   80fa0:	4798      	blx	r3
   80fa2:	2001      	movs	r0, #1
   80fa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fa8:	2001      	movs	r0, #1
   80faa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fae:	2001      	movs	r0, #1
	return xReturn;
   80fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80fb4:	000805f5 	.word	0x000805f5
   80fb8:	00080755 	.word	0x00080755
   80fbc:	0008412d 	.word	0x0008412d
   80fc0:	000843c5 	.word	0x000843c5
   80fc4:	00080513 	.word	0x00080513
   80fc8:	000805a9 	.word	0x000805a9
   80fcc:	00080605 	.word	0x00080605
   80fd0:	2007ac00 	.word	0x2007ac00
   80fd4:	2007ab90 	.word	0x2007ab90
   80fd8:	2007ac60 	.word	0x2007ac60
   80fdc:	00080821 	.word	0x00080821
   80fe0:	2007ab9c 	.word	0x2007ab9c
   80fe4:	000804fd 	.word	0x000804fd
   80fe8:	2007ac30 	.word	0x2007ac30
   80fec:	2007ac4c 	.word	0x2007ac4c
   80ff0:	2007ac78 	.word	0x2007ac78
   80ff4:	2007ac64 	.word	0x2007ac64
   80ff8:	2007ab94 	.word	0x2007ab94
   80ffc:	2007ab98 	.word	0x2007ab98
   81000:	2007ac18 	.word	0x2007ac18
   81004:	2007ac0c 	.word	0x2007ac0c
   81008:	2007ac14 	.word	0x2007ac14
   8100c:	00080519 	.word	0x00080519
   81010:	00080625 	.word	0x00080625
   81014:	000805e5 	.word	0x000805e5
   81018:	2007ac1c 	.word	0x2007ac1c

0008101c <vTaskStartScheduler>:
{
   8101c:	b510      	push	{r4, lr}
   8101e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81020:	2300      	movs	r3, #0
   81022:	9303      	str	r3, [sp, #12]
   81024:	9302      	str	r3, [sp, #8]
   81026:	9301      	str	r3, [sp, #4]
   81028:	9300      	str	r3, [sp, #0]
   8102a:	2282      	movs	r2, #130	; 0x82
   8102c:	490d      	ldr	r1, [pc, #52]	; (81064 <vTaskStartScheduler+0x48>)
   8102e:	480e      	ldr	r0, [pc, #56]	; (81068 <vTaskStartScheduler+0x4c>)
   81030:	4c0e      	ldr	r4, [pc, #56]	; (8106c <vTaskStartScheduler+0x50>)
   81032:	47a0      	blx	r4
		if( xReturn == pdPASS )
   81034:	2801      	cmp	r0, #1
   81036:	d002      	beq.n	8103e <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
   81038:	b180      	cbz	r0, 8105c <vTaskStartScheduler+0x40>
}
   8103a:	b004      	add	sp, #16
   8103c:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   8103e:	4b0c      	ldr	r3, [pc, #48]	; (81070 <vTaskStartScheduler+0x54>)
   81040:	4798      	blx	r3
	if( xReturn == pdPASS )
   81042:	2801      	cmp	r0, #1
   81044:	d1f8      	bne.n	81038 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   81046:	4b0b      	ldr	r3, [pc, #44]	; (81074 <vTaskStartScheduler+0x58>)
   81048:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
   8104a:	2201      	movs	r2, #1
   8104c:	4b0a      	ldr	r3, [pc, #40]	; (81078 <vTaskStartScheduler+0x5c>)
   8104e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81050:	2200      	movs	r2, #0
   81052:	4b0a      	ldr	r3, [pc, #40]	; (8107c <vTaskStartScheduler+0x60>)
   81054:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   81056:	4b0a      	ldr	r3, [pc, #40]	; (81080 <vTaskStartScheduler+0x64>)
   81058:	4798      	blx	r3
   8105a:	e7ee      	b.n	8103a <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
   8105c:	4b05      	ldr	r3, [pc, #20]	; (81074 <vTaskStartScheduler+0x58>)
   8105e:	4798      	blx	r3
   81060:	bf00      	nop
   81062:	e7fd      	b.n	81060 <vTaskStartScheduler+0x44>
   81064:	00086ee4 	.word	0x00086ee4
   81068:	00081369 	.word	0x00081369
   8106c:	00080e19 	.word	0x00080e19
   81070:	00081815 	.word	0x00081815
   81074:	000805f5 	.word	0x000805f5
   81078:	2007ac60 	.word	0x2007ac60
   8107c:	2007ac8c 	.word	0x2007ac8c
   81080:	000806c5 	.word	0x000806c5

00081084 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   81084:	4a02      	ldr	r2, [pc, #8]	; (81090 <vTaskSuspendAll+0xc>)
   81086:	6813      	ldr	r3, [r2, #0]
   81088:	3301      	adds	r3, #1
   8108a:	6013      	str	r3, [r2, #0]
   8108c:	4770      	bx	lr
   8108e:	bf00      	nop
   81090:	2007ac08 	.word	0x2007ac08

00081094 <xTaskGetTickCount>:
{
   81094:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
   81096:	4b04      	ldr	r3, [pc, #16]	; (810a8 <xTaskGetTickCount+0x14>)
   81098:	4798      	blx	r3
		xTicks = xTickCount;
   8109a:	4b04      	ldr	r3, [pc, #16]	; (810ac <xTaskGetTickCount+0x18>)
   8109c:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
   8109e:	4b04      	ldr	r3, [pc, #16]	; (810b0 <xTaskGetTickCount+0x1c>)
   810a0:	4798      	blx	r3
}
   810a2:	4620      	mov	r0, r4
   810a4:	bd10      	pop	{r4, pc}
   810a6:	bf00      	nop
   810a8:	00080605 	.word	0x00080605
   810ac:	2007ac8c 	.word	0x2007ac8c
   810b0:	00080625 	.word	0x00080625

000810b4 <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   810b4:	4b3d      	ldr	r3, [pc, #244]	; (811ac <vTaskIncrementTick+0xf8>)
   810b6:	681b      	ldr	r3, [r3, #0]
   810b8:	2b00      	cmp	r3, #0
   810ba:	d16f      	bne.n	8119c <vTaskIncrementTick+0xe8>
{
   810bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		++xTickCount;
   810c0:	4b3b      	ldr	r3, [pc, #236]	; (811b0 <vTaskIncrementTick+0xfc>)
   810c2:	681a      	ldr	r2, [r3, #0]
   810c4:	3201      	adds	r2, #1
   810c6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   810c8:	681b      	ldr	r3, [r3, #0]
   810ca:	b9ab      	cbnz	r3, 810f8 <vTaskIncrementTick+0x44>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   810cc:	4b39      	ldr	r3, [pc, #228]	; (811b4 <vTaskIncrementTick+0x100>)
   810ce:	681b      	ldr	r3, [r3, #0]
   810d0:	681b      	ldr	r3, [r3, #0]
   810d2:	2b00      	cmp	r3, #0
   810d4:	d128      	bne.n	81128 <vTaskIncrementTick+0x74>
			pxTemp = pxDelayedTaskList;
   810d6:	4b37      	ldr	r3, [pc, #220]	; (811b4 <vTaskIncrementTick+0x100>)
   810d8:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   810da:	4a37      	ldr	r2, [pc, #220]	; (811b8 <vTaskIncrementTick+0x104>)
   810dc:	6810      	ldr	r0, [r2, #0]
   810de:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   810e0:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   810e2:	4936      	ldr	r1, [pc, #216]	; (811bc <vTaskIncrementTick+0x108>)
   810e4:	680a      	ldr	r2, [r1, #0]
   810e6:	3201      	adds	r2, #1
   810e8:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   810ea:	681b      	ldr	r3, [r3, #0]
   810ec:	681b      	ldr	r3, [r3, #0]
   810ee:	b9fb      	cbnz	r3, 81130 <vTaskIncrementTick+0x7c>
				xNextTaskUnblockTime = portMAX_DELAY;
   810f0:	f04f 32ff 	mov.w	r2, #4294967295
   810f4:	4b32      	ldr	r3, [pc, #200]	; (811c0 <vTaskIncrementTick+0x10c>)
   810f6:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
   810f8:	4b2d      	ldr	r3, [pc, #180]	; (811b0 <vTaskIncrementTick+0xfc>)
   810fa:	681a      	ldr	r2, [r3, #0]
   810fc:	4b30      	ldr	r3, [pc, #192]	; (811c0 <vTaskIncrementTick+0x10c>)
   810fe:	681b      	ldr	r3, [r3, #0]
   81100:	429a      	cmp	r2, r3
   81102:	d350      	bcc.n	811a6 <vTaskIncrementTick+0xf2>
   81104:	4b2b      	ldr	r3, [pc, #172]	; (811b4 <vTaskIncrementTick+0x100>)
   81106:	681b      	ldr	r3, [r3, #0]
   81108:	681b      	ldr	r3, [r3, #0]
   8110a:	b1cb      	cbz	r3, 81140 <vTaskIncrementTick+0x8c>
   8110c:	4b29      	ldr	r3, [pc, #164]	; (811b4 <vTaskIncrementTick+0x100>)
   8110e:	681b      	ldr	r3, [r3, #0]
   81110:	68db      	ldr	r3, [r3, #12]
   81112:	68dc      	ldr	r4, [r3, #12]
   81114:	6863      	ldr	r3, [r4, #4]
   81116:	4a26      	ldr	r2, [pc, #152]	; (811b0 <vTaskIncrementTick+0xfc>)
   81118:	6812      	ldr	r2, [r2, #0]
   8111a:	4293      	cmp	r3, r2
   8111c:	d816      	bhi.n	8114c <vTaskIncrementTick+0x98>
   8111e:	4e29      	ldr	r6, [pc, #164]	; (811c4 <vTaskIncrementTick+0x110>)
   81120:	4f29      	ldr	r7, [pc, #164]	; (811c8 <vTaskIncrementTick+0x114>)
   81122:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 811d8 <vTaskIncrementTick+0x124>
   81126:	e02f      	b.n	81188 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81128:	4b28      	ldr	r3, [pc, #160]	; (811cc <vTaskIncrementTick+0x118>)
   8112a:	4798      	blx	r3
   8112c:	bf00      	nop
   8112e:	e7fd      	b.n	8112c <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81130:	4b20      	ldr	r3, [pc, #128]	; (811b4 <vTaskIncrementTick+0x100>)
   81132:	681b      	ldr	r3, [r3, #0]
   81134:	68db      	ldr	r3, [r3, #12]
   81136:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81138:	685a      	ldr	r2, [r3, #4]
   8113a:	4b21      	ldr	r3, [pc, #132]	; (811c0 <vTaskIncrementTick+0x10c>)
   8113c:	601a      	str	r2, [r3, #0]
   8113e:	e7db      	b.n	810f8 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   81140:	f04f 32ff 	mov.w	r2, #4294967295
   81144:	4b1e      	ldr	r3, [pc, #120]	; (811c0 <vTaskIncrementTick+0x10c>)
   81146:	601a      	str	r2, [r3, #0]
   81148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8114c:	4a1c      	ldr	r2, [pc, #112]	; (811c0 <vTaskIncrementTick+0x10c>)
   8114e:	6013      	str	r3, [r2, #0]
   81150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81154:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81156:	683b      	ldr	r3, [r7, #0]
   81158:	4298      	cmp	r0, r3
   8115a:	bf88      	it	hi
   8115c:	6038      	strhi	r0, [r7, #0]
   8115e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81162:	4629      	mov	r1, r5
   81164:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81168:	4b19      	ldr	r3, [pc, #100]	; (811d0 <vTaskIncrementTick+0x11c>)
   8116a:	4798      	blx	r3
   8116c:	4b11      	ldr	r3, [pc, #68]	; (811b4 <vTaskIncrementTick+0x100>)
   8116e:	681b      	ldr	r3, [r3, #0]
   81170:	681b      	ldr	r3, [r3, #0]
   81172:	2b00      	cmp	r3, #0
   81174:	d0e4      	beq.n	81140 <vTaskIncrementTick+0x8c>
   81176:	4b0f      	ldr	r3, [pc, #60]	; (811b4 <vTaskIncrementTick+0x100>)
   81178:	681b      	ldr	r3, [r3, #0]
   8117a:	68db      	ldr	r3, [r3, #12]
   8117c:	68dc      	ldr	r4, [r3, #12]
   8117e:	6863      	ldr	r3, [r4, #4]
   81180:	4a0b      	ldr	r2, [pc, #44]	; (811b0 <vTaskIncrementTick+0xfc>)
   81182:	6812      	ldr	r2, [r2, #0]
   81184:	4293      	cmp	r3, r2
   81186:	d8e1      	bhi.n	8114c <vTaskIncrementTick+0x98>
   81188:	1d25      	adds	r5, r4, #4
   8118a:	4628      	mov	r0, r5
   8118c:	47b0      	blx	r6
   8118e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81190:	2b00      	cmp	r3, #0
   81192:	d0df      	beq.n	81154 <vTaskIncrementTick+0xa0>
   81194:	f104 0018 	add.w	r0, r4, #24
   81198:	47b0      	blx	r6
   8119a:	e7db      	b.n	81154 <vTaskIncrementTick+0xa0>
		++uxMissedTicks;
   8119c:	4a0d      	ldr	r2, [pc, #52]	; (811d4 <vTaskIncrementTick+0x120>)
   8119e:	6813      	ldr	r3, [r2, #0]
   811a0:	3301      	adds	r3, #1
   811a2:	6013      	str	r3, [r2, #0]
}
   811a4:	4770      	bx	lr
   811a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811aa:	bf00      	nop
   811ac:	2007ac08 	.word	0x2007ac08
   811b0:	2007ac8c 	.word	0x2007ac8c
   811b4:	2007ab94 	.word	0x2007ab94
   811b8:	2007ab98 	.word	0x2007ab98
   811bc:	2007ac48 	.word	0x2007ac48
   811c0:	20070148 	.word	0x20070148
   811c4:	0008056f 	.word	0x0008056f
   811c8:	2007ac14 	.word	0x2007ac14
   811cc:	000805f5 	.word	0x000805f5
   811d0:	00080519 	.word	0x00080519
   811d4:	2007ac04 	.word	0x2007ac04
   811d8:	2007ab9c 	.word	0x2007ab9c

000811dc <xTaskResumeAll>:
{
   811dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
   811e0:	4b2f      	ldr	r3, [pc, #188]	; (812a0 <xTaskResumeAll+0xc4>)
   811e2:	681b      	ldr	r3, [r3, #0]
   811e4:	b91b      	cbnz	r3, 811ee <xTaskResumeAll+0x12>
   811e6:	4b2f      	ldr	r3, [pc, #188]	; (812a4 <xTaskResumeAll+0xc8>)
   811e8:	4798      	blx	r3
   811ea:	bf00      	nop
   811ec:	e7fd      	b.n	811ea <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
   811ee:	4b2e      	ldr	r3, [pc, #184]	; (812a8 <xTaskResumeAll+0xcc>)
   811f0:	4798      	blx	r3
		--uxSchedulerSuspended;
   811f2:	4b2b      	ldr	r3, [pc, #172]	; (812a0 <xTaskResumeAll+0xc4>)
   811f4:	681a      	ldr	r2, [r3, #0]
   811f6:	3a01      	subs	r2, #1
   811f8:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   811fa:	681b      	ldr	r3, [r3, #0]
   811fc:	2b00      	cmp	r3, #0
   811fe:	d14d      	bne.n	8129c <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81200:	4b2a      	ldr	r3, [pc, #168]	; (812ac <xTaskResumeAll+0xd0>)
   81202:	681b      	ldr	r3, [r3, #0]
   81204:	b12b      	cbz	r3, 81212 <xTaskResumeAll+0x36>
   81206:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81208:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 812d8 <xTaskResumeAll+0xfc>
					uxListRemove( &( pxTCB->xEventListItem ) );
   8120c:	4f28      	ldr	r7, [pc, #160]	; (812b0 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyQueue( pxTCB );
   8120e:	4e29      	ldr	r6, [pc, #164]	; (812b4 <xTaskResumeAll+0xd8>)
   81210:	e023      	b.n	8125a <xTaskResumeAll+0x7e>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81212:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   81214:	4b28      	ldr	r3, [pc, #160]	; (812b8 <xTaskResumeAll+0xdc>)
   81216:	4798      	blx	r3
}
   81218:	4620      	mov	r0, r4
   8121a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   8121e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81222:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81224:	f105 0018 	add.w	r0, r5, #24
   81228:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8122a:	f105 0904 	add.w	r9, r5, #4
   8122e:	4648      	mov	r0, r9
   81230:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81232:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   81234:	6833      	ldr	r3, [r6, #0]
   81236:	4298      	cmp	r0, r3
   81238:	bf88      	it	hi
   8123a:	6030      	strhi	r0, [r6, #0]
   8123c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81240:	4649      	mov	r1, r9
   81242:	4b1e      	ldr	r3, [pc, #120]	; (812bc <xTaskResumeAll+0xe0>)
   81244:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81248:	4b1d      	ldr	r3, [pc, #116]	; (812c0 <xTaskResumeAll+0xe4>)
   8124a:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8124c:	4b1d      	ldr	r3, [pc, #116]	; (812c4 <xTaskResumeAll+0xe8>)
   8124e:	681b      	ldr	r3, [r3, #0]
   81250:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   81252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
   81254:	429a      	cmp	r2, r3
   81256:	bf28      	it	cs
   81258:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8125a:	f8d8 3000 	ldr.w	r3, [r8]
   8125e:	2b00      	cmp	r3, #0
   81260:	d1dd      	bne.n	8121e <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81262:	4b19      	ldr	r3, [pc, #100]	; (812c8 <xTaskResumeAll+0xec>)
   81264:	681b      	ldr	r3, [r3, #0]
   81266:	b193      	cbz	r3, 8128e <xTaskResumeAll+0xb2>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81268:	4b17      	ldr	r3, [pc, #92]	; (812c8 <xTaskResumeAll+0xec>)
   8126a:	681b      	ldr	r3, [r3, #0]
   8126c:	b143      	cbz	r3, 81280 <xTaskResumeAll+0xa4>
						vTaskIncrementTick();
   8126e:	4d17      	ldr	r5, [pc, #92]	; (812cc <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81270:	4c15      	ldr	r4, [pc, #84]	; (812c8 <xTaskResumeAll+0xec>)
						vTaskIncrementTick();
   81272:	47a8      	blx	r5
						--uxMissedTicks;
   81274:	6823      	ldr	r3, [r4, #0]
   81276:	3b01      	subs	r3, #1
   81278:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8127a:	6823      	ldr	r3, [r4, #0]
   8127c:	2b00      	cmp	r3, #0
   8127e:	d1f8      	bne.n	81272 <xTaskResumeAll+0x96>
					xMissedYield = pdFALSE;
   81280:	2200      	movs	r2, #0
   81282:	4b13      	ldr	r3, [pc, #76]	; (812d0 <xTaskResumeAll+0xf4>)
   81284:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81286:	4b13      	ldr	r3, [pc, #76]	; (812d4 <xTaskResumeAll+0xf8>)
   81288:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
   8128a:	2401      	movs	r4, #1
   8128c:	e7c2      	b.n	81214 <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   8128e:	2c01      	cmp	r4, #1
   81290:	d0f6      	beq.n	81280 <xTaskResumeAll+0xa4>
   81292:	4b0f      	ldr	r3, [pc, #60]	; (812d0 <xTaskResumeAll+0xf4>)
   81294:	681b      	ldr	r3, [r3, #0]
   81296:	2b01      	cmp	r3, #1
   81298:	d1bc      	bne.n	81214 <xTaskResumeAll+0x38>
   8129a:	e7f1      	b.n	81280 <xTaskResumeAll+0xa4>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   8129c:	2400      	movs	r4, #0
   8129e:	e7b9      	b.n	81214 <xTaskResumeAll+0x38>
   812a0:	2007ac08 	.word	0x2007ac08
   812a4:	000805f5 	.word	0x000805f5
   812a8:	00080605 	.word	0x00080605
   812ac:	2007ac00 	.word	0x2007ac00
   812b0:	0008056f 	.word	0x0008056f
   812b4:	2007ac14 	.word	0x2007ac14
   812b8:	00080625 	.word	0x00080625
   812bc:	2007ab9c 	.word	0x2007ab9c
   812c0:	00080519 	.word	0x00080519
   812c4:	2007ab90 	.word	0x2007ab90
   812c8:	2007ac04 	.word	0x2007ac04
   812cc:	000810b5 	.word	0x000810b5
   812d0:	2007ac44 	.word	0x2007ac44
   812d4:	000805e5 	.word	0x000805e5
   812d8:	2007ac4c 	.word	0x2007ac4c

000812dc <vTaskDelayUntil>:
	{
   812dc:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   812de:	b130      	cbz	r0, 812ee <vTaskDelayUntil+0x12>
   812e0:	460c      	mov	r4, r1
   812e2:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   812e4:	b939      	cbnz	r1, 812f6 <vTaskDelayUntil+0x1a>
   812e6:	4b18      	ldr	r3, [pc, #96]	; (81348 <vTaskDelayUntil+0x6c>)
   812e8:	4798      	blx	r3
   812ea:	bf00      	nop
   812ec:	e7fd      	b.n	812ea <vTaskDelayUntil+0xe>
		configASSERT( pxPreviousWakeTime );
   812ee:	4b16      	ldr	r3, [pc, #88]	; (81348 <vTaskDelayUntil+0x6c>)
   812f0:	4798      	blx	r3
   812f2:	bf00      	nop
   812f4:	e7fd      	b.n	812f2 <vTaskDelayUntil+0x16>
		vTaskSuspendAll();
   812f6:	4b15      	ldr	r3, [pc, #84]	; (8134c <vTaskDelayUntil+0x70>)
   812f8:	4798      	blx	r3
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   812fa:	682b      	ldr	r3, [r5, #0]
   812fc:	441c      	add	r4, r3
			if( xTickCount < *pxPreviousWakeTime )
   812fe:	4a14      	ldr	r2, [pc, #80]	; (81350 <vTaskDelayUntil+0x74>)
   81300:	6812      	ldr	r2, [r2, #0]
   81302:	4293      	cmp	r3, r2
   81304:	d90a      	bls.n	8131c <vTaskDelayUntil+0x40>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81306:	42a3      	cmp	r3, r4
   81308:	d90e      	bls.n	81328 <vTaskDelayUntil+0x4c>
   8130a:	4b11      	ldr	r3, [pc, #68]	; (81350 <vTaskDelayUntil+0x74>)
   8130c:	681b      	ldr	r3, [r3, #0]
			*pxPreviousWakeTime = xTimeToWake;
   8130e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   81310:	429c      	cmp	r4, r3
   81312:	d80f      	bhi.n	81334 <vTaskDelayUntil+0x58>
		xAlreadyYielded = xTaskResumeAll();
   81314:	4b0f      	ldr	r3, [pc, #60]	; (81354 <vTaskDelayUntil+0x78>)
   81316:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   81318:	b140      	cbz	r0, 8132c <vTaskDelayUntil+0x50>
   8131a:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   8131c:	42a3      	cmp	r3, r4
   8131e:	d808      	bhi.n	81332 <vTaskDelayUntil+0x56>
   81320:	4b0b      	ldr	r3, [pc, #44]	; (81350 <vTaskDelayUntil+0x74>)
   81322:	681b      	ldr	r3, [r3, #0]
   81324:	429c      	cmp	r4, r3
   81326:	d804      	bhi.n	81332 <vTaskDelayUntil+0x56>
			*pxPreviousWakeTime = xTimeToWake;
   81328:	602c      	str	r4, [r5, #0]
   8132a:	e7f3      	b.n	81314 <vTaskDelayUntil+0x38>
			portYIELD_WITHIN_API();
   8132c:	4b0a      	ldr	r3, [pc, #40]	; (81358 <vTaskDelayUntil+0x7c>)
   8132e:	4798      	blx	r3
	}
   81330:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
   81332:	602c      	str	r4, [r5, #0]
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81334:	4b09      	ldr	r3, [pc, #36]	; (8135c <vTaskDelayUntil+0x80>)
   81336:	6818      	ldr	r0, [r3, #0]
   81338:	3004      	adds	r0, #4
   8133a:	4b09      	ldr	r3, [pc, #36]	; (81360 <vTaskDelayUntil+0x84>)
   8133c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8133e:	4620      	mov	r0, r4
   81340:	4b08      	ldr	r3, [pc, #32]	; (81364 <vTaskDelayUntil+0x88>)
   81342:	4798      	blx	r3
   81344:	e7e6      	b.n	81314 <vTaskDelayUntil+0x38>
   81346:	bf00      	nop
   81348:	000805f5 	.word	0x000805f5
   8134c:	00081085 	.word	0x00081085
   81350:	2007ac8c 	.word	0x2007ac8c
   81354:	000811dd 	.word	0x000811dd
   81358:	000805e5 	.word	0x000805e5
   8135c:	2007ab90 	.word	0x2007ab90
   81360:	0008056f 	.word	0x0008056f
   81364:	00080dc1 	.word	0x00080dc1

00081368 <prvIdleTask>:
{
   81368:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8136a:	4d16      	ldr	r5, [pc, #88]	; (813c4 <prvIdleTask+0x5c>)
			vTaskSuspendAll();
   8136c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 813e8 <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81370:	4e15      	ldr	r6, [pc, #84]	; (813c8 <prvIdleTask+0x60>)
   81372:	e024      	b.n	813be <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81374:	4b15      	ldr	r3, [pc, #84]	; (813cc <prvIdleTask+0x64>)
   81376:	681b      	ldr	r3, [r3, #0]
   81378:	2b01      	cmp	r3, #1
   8137a:	d81e      	bhi.n	813ba <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8137c:	682b      	ldr	r3, [r5, #0]
   8137e:	2b00      	cmp	r3, #0
   81380:	d0f8      	beq.n	81374 <prvIdleTask+0xc>
			vTaskSuspendAll();
   81382:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81384:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   81386:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
   81388:	2c00      	cmp	r4, #0
   8138a:	d0f7      	beq.n	8137c <prvIdleTask+0x14>
				taskENTER_CRITICAL();
   8138c:	4b10      	ldr	r3, [pc, #64]	; (813d0 <prvIdleTask+0x68>)
   8138e:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81390:	68f3      	ldr	r3, [r6, #12]
   81392:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81394:	1d20      	adds	r0, r4, #4
   81396:	4b0f      	ldr	r3, [pc, #60]	; (813d4 <prvIdleTask+0x6c>)
   81398:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   8139a:	4a0f      	ldr	r2, [pc, #60]	; (813d8 <prvIdleTask+0x70>)
   8139c:	6813      	ldr	r3, [r2, #0]
   8139e:	3b01      	subs	r3, #1
   813a0:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   813a2:	682b      	ldr	r3, [r5, #0]
   813a4:	3b01      	subs	r3, #1
   813a6:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
   813a8:	4b0c      	ldr	r3, [pc, #48]	; (813dc <prvIdleTask+0x74>)
   813aa:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   813ac:	6b20      	ldr	r0, [r4, #48]	; 0x30
   813ae:	f8df 903c 	ldr.w	r9, [pc, #60]	; 813ec <prvIdleTask+0x84>
   813b2:	47c8      	blx	r9
		vPortFree( pxTCB );
   813b4:	4620      	mov	r0, r4
   813b6:	47c8      	blx	r9
   813b8:	e7e0      	b.n	8137c <prvIdleTask+0x14>
				taskYIELD();
   813ba:	4b09      	ldr	r3, [pc, #36]	; (813e0 <prvIdleTask+0x78>)
   813bc:	4798      	blx	r3
			xTaskResumeAll();
   813be:	4f09      	ldr	r7, [pc, #36]	; (813e4 <prvIdleTask+0x7c>)
   813c0:	e7dc      	b.n	8137c <prvIdleTask+0x14>
   813c2:	bf00      	nop
   813c4:	2007ac10 	.word	0x2007ac10
   813c8:	2007ac78 	.word	0x2007ac78
   813cc:	2007ab9c 	.word	0x2007ab9c
   813d0:	00080605 	.word	0x00080605
   813d4:	0008056f 	.word	0x0008056f
   813d8:	2007ac00 	.word	0x2007ac00
   813dc:	00080625 	.word	0x00080625
   813e0:	000805e5 	.word	0x000805e5
   813e4:	000811dd 	.word	0x000811dd
   813e8:	00081085 	.word	0x00081085
   813ec:	00080821 	.word	0x00080821

000813f0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   813f0:	4b21      	ldr	r3, [pc, #132]	; (81478 <vTaskSwitchContext+0x88>)
   813f2:	681b      	ldr	r3, [r3, #0]
   813f4:	b9eb      	cbnz	r3, 81432 <vTaskSwitchContext+0x42>
{
   813f6:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   813f8:	4b20      	ldr	r3, [pc, #128]	; (8147c <vTaskSwitchContext+0x8c>)
   813fa:	681b      	ldr	r3, [r3, #0]
   813fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81400:	009b      	lsls	r3, r3, #2
   81402:	4a1f      	ldr	r2, [pc, #124]	; (81480 <vTaskSwitchContext+0x90>)
   81404:	58d3      	ldr	r3, [r2, r3]
   81406:	b9c3      	cbnz	r3, 8143a <vTaskSwitchContext+0x4a>
   81408:	4b1c      	ldr	r3, [pc, #112]	; (8147c <vTaskSwitchContext+0x8c>)
   8140a:	681b      	ldr	r3, [r3, #0]
   8140c:	b16b      	cbz	r3, 8142a <vTaskSwitchContext+0x3a>
   8140e:	4a1b      	ldr	r2, [pc, #108]	; (8147c <vTaskSwitchContext+0x8c>)
   81410:	491b      	ldr	r1, [pc, #108]	; (81480 <vTaskSwitchContext+0x90>)
   81412:	6813      	ldr	r3, [r2, #0]
   81414:	3b01      	subs	r3, #1
   81416:	6013      	str	r3, [r2, #0]
   81418:	6813      	ldr	r3, [r2, #0]
   8141a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8141e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81422:	b953      	cbnz	r3, 8143a <vTaskSwitchContext+0x4a>
   81424:	6813      	ldr	r3, [r2, #0]
   81426:	2b00      	cmp	r3, #0
   81428:	d1f3      	bne.n	81412 <vTaskSwitchContext+0x22>
   8142a:	4b16      	ldr	r3, [pc, #88]	; (81484 <vTaskSwitchContext+0x94>)
   8142c:	4798      	blx	r3
   8142e:	bf00      	nop
   81430:	e7fd      	b.n	8142e <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   81432:	2201      	movs	r2, #1
   81434:	4b14      	ldr	r3, [pc, #80]	; (81488 <vTaskSwitchContext+0x98>)
   81436:	601a      	str	r2, [r3, #0]
   81438:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8143a:	4b10      	ldr	r3, [pc, #64]	; (8147c <vTaskSwitchContext+0x8c>)
   8143c:	681b      	ldr	r3, [r3, #0]
   8143e:	4a10      	ldr	r2, [pc, #64]	; (81480 <vTaskSwitchContext+0x90>)
   81440:	0099      	lsls	r1, r3, #2
   81442:	18c8      	adds	r0, r1, r3
   81444:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81448:	6844      	ldr	r4, [r0, #4]
   8144a:	6864      	ldr	r4, [r4, #4]
   8144c:	6044      	str	r4, [r0, #4]
   8144e:	4419      	add	r1, r3
   81450:	4602      	mov	r2, r0
   81452:	3208      	adds	r2, #8
   81454:	4294      	cmp	r4, r2
   81456:	d009      	beq.n	8146c <vTaskSwitchContext+0x7c>
   81458:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8145c:	4a08      	ldr	r2, [pc, #32]	; (81480 <vTaskSwitchContext+0x90>)
   8145e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81462:	685b      	ldr	r3, [r3, #4]
   81464:	68da      	ldr	r2, [r3, #12]
   81466:	4b09      	ldr	r3, [pc, #36]	; (8148c <vTaskSwitchContext+0x9c>)
   81468:	601a      	str	r2, [r3, #0]
   8146a:	bd10      	pop	{r4, pc}
   8146c:	6860      	ldr	r0, [r4, #4]
   8146e:	4a04      	ldr	r2, [pc, #16]	; (81480 <vTaskSwitchContext+0x90>)
   81470:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81474:	6050      	str	r0, [r2, #4]
   81476:	e7ef      	b.n	81458 <vTaskSwitchContext+0x68>
   81478:	2007ac08 	.word	0x2007ac08
   8147c:	2007ac14 	.word	0x2007ac14
   81480:	2007ab9c 	.word	0x2007ab9c
   81484:	000805f5 	.word	0x000805f5
   81488:	2007ac44 	.word	0x2007ac44
   8148c:	2007ab90 	.word	0x2007ab90

00081490 <vTaskPlaceOnEventList>:
{
   81490:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
   81492:	b190      	cbz	r0, 814ba <vTaskPlaceOnEventList+0x2a>
   81494:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81496:	4d0e      	ldr	r5, [pc, #56]	; (814d0 <vTaskPlaceOnEventList+0x40>)
   81498:	6829      	ldr	r1, [r5, #0]
   8149a:	3118      	adds	r1, #24
   8149c:	4b0d      	ldr	r3, [pc, #52]	; (814d4 <vTaskPlaceOnEventList+0x44>)
   8149e:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   814a0:	6828      	ldr	r0, [r5, #0]
   814a2:	3004      	adds	r0, #4
   814a4:	4b0c      	ldr	r3, [pc, #48]	; (814d8 <vTaskPlaceOnEventList+0x48>)
   814a6:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
   814a8:	f1b4 3fff 	cmp.w	r4, #4294967295
   814ac:	d009      	beq.n	814c2 <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
   814ae:	4b0b      	ldr	r3, [pc, #44]	; (814dc <vTaskPlaceOnEventList+0x4c>)
   814b0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   814b2:	4420      	add	r0, r4
   814b4:	4b0a      	ldr	r3, [pc, #40]	; (814e0 <vTaskPlaceOnEventList+0x50>)
   814b6:	4798      	blx	r3
   814b8:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   814ba:	4b0a      	ldr	r3, [pc, #40]	; (814e4 <vTaskPlaceOnEventList+0x54>)
   814bc:	4798      	blx	r3
   814be:	bf00      	nop
   814c0:	e7fd      	b.n	814be <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   814c2:	6829      	ldr	r1, [r5, #0]
   814c4:	3104      	adds	r1, #4
   814c6:	4808      	ldr	r0, [pc, #32]	; (814e8 <vTaskPlaceOnEventList+0x58>)
   814c8:	4b08      	ldr	r3, [pc, #32]	; (814ec <vTaskPlaceOnEventList+0x5c>)
   814ca:	4798      	blx	r3
   814cc:	bd38      	pop	{r3, r4, r5, pc}
   814ce:	bf00      	nop
   814d0:	2007ab90 	.word	0x2007ab90
   814d4:	00080535 	.word	0x00080535
   814d8:	0008056f 	.word	0x0008056f
   814dc:	2007ac8c 	.word	0x2007ac8c
   814e0:	00080dc1 	.word	0x00080dc1
   814e4:	000805f5 	.word	0x000805f5
   814e8:	2007ac64 	.word	0x2007ac64
   814ec:	00080519 	.word	0x00080519

000814f0 <vTaskPlaceOnEventListRestricted>:
	{
   814f0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   814f2:	b178      	cbz	r0, 81514 <vTaskPlaceOnEventListRestricted+0x24>
   814f4:	460d      	mov	r5, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   814f6:	4c09      	ldr	r4, [pc, #36]	; (8151c <vTaskPlaceOnEventListRestricted+0x2c>)
   814f8:	6821      	ldr	r1, [r4, #0]
   814fa:	3118      	adds	r1, #24
   814fc:	4b08      	ldr	r3, [pc, #32]	; (81520 <vTaskPlaceOnEventListRestricted+0x30>)
   814fe:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81500:	6820      	ldr	r0, [r4, #0]
   81502:	3004      	adds	r0, #4
   81504:	4b07      	ldr	r3, [pc, #28]	; (81524 <vTaskPlaceOnEventListRestricted+0x34>)
   81506:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
   81508:	4b07      	ldr	r3, [pc, #28]	; (81528 <vTaskPlaceOnEventListRestricted+0x38>)
   8150a:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   8150c:	4428      	add	r0, r5
   8150e:	4b07      	ldr	r3, [pc, #28]	; (8152c <vTaskPlaceOnEventListRestricted+0x3c>)
   81510:	4798      	blx	r3
   81512:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
   81514:	4b06      	ldr	r3, [pc, #24]	; (81530 <vTaskPlaceOnEventListRestricted+0x40>)
   81516:	4798      	blx	r3
   81518:	bf00      	nop
   8151a:	e7fd      	b.n	81518 <vTaskPlaceOnEventListRestricted+0x28>
   8151c:	2007ab90 	.word	0x2007ab90
   81520:	00080519 	.word	0x00080519
   81524:	0008056f 	.word	0x0008056f
   81528:	2007ac8c 	.word	0x2007ac8c
   8152c:	00080dc1 	.word	0x00080dc1
   81530:	000805f5 	.word	0x000805f5

00081534 <xTaskRemoveFromEventList>:
{
   81534:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81536:	68c3      	ldr	r3, [r0, #12]
   81538:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8153a:	b31c      	cbz	r4, 81584 <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8153c:	f104 0518 	add.w	r5, r4, #24
   81540:	4628      	mov	r0, r5
   81542:	4b15      	ldr	r3, [pc, #84]	; (81598 <xTaskRemoveFromEventList+0x64>)
   81544:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81546:	4b15      	ldr	r3, [pc, #84]	; (8159c <xTaskRemoveFromEventList+0x68>)
   81548:	681b      	ldr	r3, [r3, #0]
   8154a:	b9fb      	cbnz	r3, 8158c <xTaskRemoveFromEventList+0x58>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8154c:	1d25      	adds	r5, r4, #4
   8154e:	4628      	mov	r0, r5
   81550:	4b11      	ldr	r3, [pc, #68]	; (81598 <xTaskRemoveFromEventList+0x64>)
   81552:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81554:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81556:	4b12      	ldr	r3, [pc, #72]	; (815a0 <xTaskRemoveFromEventList+0x6c>)
   81558:	681b      	ldr	r3, [r3, #0]
   8155a:	4298      	cmp	r0, r3
   8155c:	bf84      	itt	hi
   8155e:	4b10      	ldrhi	r3, [pc, #64]	; (815a0 <xTaskRemoveFromEventList+0x6c>)
   81560:	6018      	strhi	r0, [r3, #0]
   81562:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81566:	4629      	mov	r1, r5
   81568:	4b0e      	ldr	r3, [pc, #56]	; (815a4 <xTaskRemoveFromEventList+0x70>)
   8156a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8156e:	4b0e      	ldr	r3, [pc, #56]	; (815a8 <xTaskRemoveFromEventList+0x74>)
   81570:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81572:	4b0e      	ldr	r3, [pc, #56]	; (815ac <xTaskRemoveFromEventList+0x78>)
   81574:	681b      	ldr	r3, [r3, #0]
   81576:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8157a:	4298      	cmp	r0, r3
   8157c:	bf34      	ite	cc
   8157e:	2000      	movcc	r0, #0
   81580:	2001      	movcs	r0, #1
   81582:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   81584:	4b0a      	ldr	r3, [pc, #40]	; (815b0 <xTaskRemoveFromEventList+0x7c>)
   81586:	4798      	blx	r3
   81588:	bf00      	nop
   8158a:	e7fd      	b.n	81588 <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   8158c:	4629      	mov	r1, r5
   8158e:	4809      	ldr	r0, [pc, #36]	; (815b4 <xTaskRemoveFromEventList+0x80>)
   81590:	4b05      	ldr	r3, [pc, #20]	; (815a8 <xTaskRemoveFromEventList+0x74>)
   81592:	4798      	blx	r3
   81594:	e7ed      	b.n	81572 <xTaskRemoveFromEventList+0x3e>
   81596:	bf00      	nop
   81598:	0008056f 	.word	0x0008056f
   8159c:	2007ac08 	.word	0x2007ac08
   815a0:	2007ac14 	.word	0x2007ac14
   815a4:	2007ab9c 	.word	0x2007ab9c
   815a8:	00080519 	.word	0x00080519
   815ac:	2007ab90 	.word	0x2007ab90
   815b0:	000805f5 	.word	0x000805f5
   815b4:	2007ac4c 	.word	0x2007ac4c

000815b8 <vTaskSetTimeOutState>:
{
   815b8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   815ba:	b130      	cbz	r0, 815ca <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   815bc:	4a05      	ldr	r2, [pc, #20]	; (815d4 <vTaskSetTimeOutState+0x1c>)
   815be:	6812      	ldr	r2, [r2, #0]
   815c0:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   815c2:	4a05      	ldr	r2, [pc, #20]	; (815d8 <vTaskSetTimeOutState+0x20>)
   815c4:	6812      	ldr	r2, [r2, #0]
   815c6:	6042      	str	r2, [r0, #4]
   815c8:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
   815ca:	4b04      	ldr	r3, [pc, #16]	; (815dc <vTaskSetTimeOutState+0x24>)
   815cc:	4798      	blx	r3
   815ce:	bf00      	nop
   815d0:	e7fd      	b.n	815ce <vTaskSetTimeOutState+0x16>
   815d2:	bf00      	nop
   815d4:	2007ac48 	.word	0x2007ac48
   815d8:	2007ac8c 	.word	0x2007ac8c
   815dc:	000805f5 	.word	0x000805f5

000815e0 <xTaskCheckForTimeOut>:
{
   815e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
   815e2:	b1e8      	cbz	r0, 81620 <xTaskCheckForTimeOut+0x40>
   815e4:	460d      	mov	r5, r1
   815e6:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   815e8:	b1f1      	cbz	r1, 81628 <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
   815ea:	4b18      	ldr	r3, [pc, #96]	; (8164c <xTaskCheckForTimeOut+0x6c>)
   815ec:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
   815ee:	682b      	ldr	r3, [r5, #0]
   815f0:	f1b3 3fff 	cmp.w	r3, #4294967295
   815f4:	d026      	beq.n	81644 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   815f6:	4a16      	ldr	r2, [pc, #88]	; (81650 <xTaskCheckForTimeOut+0x70>)
   815f8:	6812      	ldr	r2, [r2, #0]
   815fa:	6821      	ldr	r1, [r4, #0]
   815fc:	4291      	cmp	r1, r2
   815fe:	d004      	beq.n	8160a <xTaskCheckForTimeOut+0x2a>
   81600:	4a14      	ldr	r2, [pc, #80]	; (81654 <xTaskCheckForTimeOut+0x74>)
   81602:	6812      	ldr	r2, [r2, #0]
   81604:	6861      	ldr	r1, [r4, #4]
   81606:	4291      	cmp	r1, r2
   81608:	d91e      	bls.n	81648 <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8160a:	4a12      	ldr	r2, [pc, #72]	; (81654 <xTaskCheckForTimeOut+0x74>)
   8160c:	6812      	ldr	r2, [r2, #0]
   8160e:	6861      	ldr	r1, [r4, #4]
   81610:	1a52      	subs	r2, r2, r1
   81612:	4293      	cmp	r3, r2
   81614:	d80c      	bhi.n	81630 <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
   81616:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81618:	4b0f      	ldr	r3, [pc, #60]	; (81658 <xTaskCheckForTimeOut+0x78>)
   8161a:	4798      	blx	r3
}
   8161c:	4620      	mov	r0, r4
   8161e:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
   81620:	4b0e      	ldr	r3, [pc, #56]	; (8165c <xTaskCheckForTimeOut+0x7c>)
   81622:	4798      	blx	r3
   81624:	bf00      	nop
   81626:	e7fd      	b.n	81624 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   81628:	4b0c      	ldr	r3, [pc, #48]	; (8165c <xTaskCheckForTimeOut+0x7c>)
   8162a:	4798      	blx	r3
   8162c:	bf00      	nop
   8162e:	e7fd      	b.n	8162c <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81630:	4a08      	ldr	r2, [pc, #32]	; (81654 <xTaskCheckForTimeOut+0x74>)
   81632:	6812      	ldr	r2, [r2, #0]
   81634:	1a52      	subs	r2, r2, r1
   81636:	1a9b      	subs	r3, r3, r2
   81638:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8163a:	4620      	mov	r0, r4
   8163c:	4b08      	ldr	r3, [pc, #32]	; (81660 <xTaskCheckForTimeOut+0x80>)
   8163e:	4798      	blx	r3
			xReturn = pdFALSE;
   81640:	2400      	movs	r4, #0
   81642:	e7e9      	b.n	81618 <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
   81644:	2400      	movs	r4, #0
   81646:	e7e7      	b.n	81618 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   81648:	2401      	movs	r4, #1
   8164a:	e7e5      	b.n	81618 <xTaskCheckForTimeOut+0x38>
   8164c:	00080605 	.word	0x00080605
   81650:	2007ac48 	.word	0x2007ac48
   81654:	2007ac8c 	.word	0x2007ac8c
   81658:	00080625 	.word	0x00080625
   8165c:	000805f5 	.word	0x000805f5
   81660:	000815b9 	.word	0x000815b9

00081664 <vTaskMissedYield>:
	xMissedYield = pdTRUE;
   81664:	2201      	movs	r2, #1
   81666:	4b01      	ldr	r3, [pc, #4]	; (8166c <vTaskMissedYield+0x8>)
   81668:	601a      	str	r2, [r3, #0]
   8166a:	4770      	bx	lr
   8166c:	2007ac44 	.word	0x2007ac44

00081670 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81670:	4b01      	ldr	r3, [pc, #4]	; (81678 <xTaskGetCurrentTaskHandle+0x8>)
   81672:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81674:	4770      	bx	lr
   81676:	bf00      	nop
   81678:	2007ab90 	.word	0x2007ab90

0008167c <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   8167c:	4b05      	ldr	r3, [pc, #20]	; (81694 <xTaskGetSchedulerState+0x18>)
   8167e:	681b      	ldr	r3, [r3, #0]
   81680:	b133      	cbz	r3, 81690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81682:	4b05      	ldr	r3, [pc, #20]	; (81698 <xTaskGetSchedulerState+0x1c>)
   81684:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81686:	2b00      	cmp	r3, #0
   81688:	bf0c      	ite	eq
   8168a:	2001      	moveq	r0, #1
   8168c:	2002      	movne	r0, #2
   8168e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81690:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
   81692:	4770      	bx	lr
   81694:	2007ac60 	.word	0x2007ac60
   81698:	2007ac08 	.word	0x2007ac08

0008169c <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   8169c:	2800      	cmp	r0, #0
   8169e:	d031      	beq.n	81704 <vTaskPriorityInherit+0x68>
	{
   816a0:	b538      	push	{r3, r4, r5, lr}
   816a2:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   816a4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   816a6:	4918      	ldr	r1, [pc, #96]	; (81708 <vTaskPriorityInherit+0x6c>)
   816a8:	6809      	ldr	r1, [r1, #0]
   816aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   816ac:	428b      	cmp	r3, r1
   816ae:	d211      	bcs.n	816d4 <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   816b0:	4915      	ldr	r1, [pc, #84]	; (81708 <vTaskPriorityInherit+0x6c>)
   816b2:	6809      	ldr	r1, [r1, #0]
   816b4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   816b6:	f1c1 0105 	rsb	r1, r1, #5
   816ba:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   816bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816c0:	4912      	ldr	r1, [pc, #72]	; (8170c <vTaskPriorityInherit+0x70>)
   816c2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   816c6:	6941      	ldr	r1, [r0, #20]
   816c8:	4299      	cmp	r1, r3
   816ca:	d004      	beq.n	816d6 <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   816cc:	4b0e      	ldr	r3, [pc, #56]	; (81708 <vTaskPriorityInherit+0x6c>)
   816ce:	681b      	ldr	r3, [r3, #0]
   816d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   816d2:	62c3      	str	r3, [r0, #44]	; 0x2c
   816d4:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   816d6:	1d04      	adds	r4, r0, #4
   816d8:	4620      	mov	r0, r4
   816da:	4b0d      	ldr	r3, [pc, #52]	; (81710 <vTaskPriorityInherit+0x74>)
   816dc:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   816de:	4b0a      	ldr	r3, [pc, #40]	; (81708 <vTaskPriorityInherit+0x6c>)
   816e0:	681b      	ldr	r3, [r3, #0]
   816e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   816e4:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   816e6:	4b0b      	ldr	r3, [pc, #44]	; (81714 <vTaskPriorityInherit+0x78>)
   816e8:	681b      	ldr	r3, [r3, #0]
   816ea:	4298      	cmp	r0, r3
   816ec:	bf84      	itt	hi
   816ee:	4b09      	ldrhi	r3, [pc, #36]	; (81714 <vTaskPriorityInherit+0x78>)
   816f0:	6018      	strhi	r0, [r3, #0]
   816f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   816f6:	4621      	mov	r1, r4
   816f8:	4b04      	ldr	r3, [pc, #16]	; (8170c <vTaskPriorityInherit+0x70>)
   816fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   816fe:	4b06      	ldr	r3, [pc, #24]	; (81718 <vTaskPriorityInherit+0x7c>)
   81700:	4798      	blx	r3
   81702:	bd38      	pop	{r3, r4, r5, pc}
   81704:	4770      	bx	lr
   81706:	bf00      	nop
   81708:	2007ab90 	.word	0x2007ab90
   8170c:	2007ab9c 	.word	0x2007ab9c
   81710:	0008056f 	.word	0x0008056f
   81714:	2007ac14 	.word	0x2007ac14
   81718:	00080519 	.word	0x00080519

0008171c <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   8171c:	b1e8      	cbz	r0, 8175a <vTaskPriorityDisinherit+0x3e>
	{
   8171e:	b538      	push	{r3, r4, r5, lr}
   81720:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81722:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81724:	6c82      	ldr	r2, [r0, #72]	; 0x48
   81726:	4291      	cmp	r1, r2
   81728:	d016      	beq.n	81758 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8172a:	1d05      	adds	r5, r0, #4
   8172c:	4628      	mov	r0, r5
   8172e:	4b0b      	ldr	r3, [pc, #44]	; (8175c <vTaskPriorityDisinherit+0x40>)
   81730:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81732:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81734:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81736:	f1c0 0305 	rsb	r3, r0, #5
   8173a:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   8173c:	4b08      	ldr	r3, [pc, #32]	; (81760 <vTaskPriorityDisinherit+0x44>)
   8173e:	681b      	ldr	r3, [r3, #0]
   81740:	4298      	cmp	r0, r3
   81742:	bf84      	itt	hi
   81744:	4b06      	ldrhi	r3, [pc, #24]	; (81760 <vTaskPriorityDisinherit+0x44>)
   81746:	6018      	strhi	r0, [r3, #0]
   81748:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8174c:	4629      	mov	r1, r5
   8174e:	4b05      	ldr	r3, [pc, #20]	; (81764 <vTaskPriorityDisinherit+0x48>)
   81750:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81754:	4b04      	ldr	r3, [pc, #16]	; (81768 <vTaskPriorityDisinherit+0x4c>)
   81756:	4798      	blx	r3
   81758:	bd38      	pop	{r3, r4, r5, pc}
   8175a:	4770      	bx	lr
   8175c:	0008056f 	.word	0x0008056f
   81760:	2007ac14 	.word	0x2007ac14
   81764:	2007ab9c 	.word	0x2007ab9c
   81768:	00080519 	.word	0x00080519

0008176c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   8176c:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8176e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81770:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81772:	4291      	cmp	r1, r2
   81774:	d80c      	bhi.n	81790 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81776:	1ad2      	subs	r2, r2, r3
   81778:	6983      	ldr	r3, [r0, #24]
   8177a:	429a      	cmp	r2, r3
   8177c:	d301      	bcc.n	81782 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   8177e:	2001      	movs	r0, #1
   81780:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81782:	1d01      	adds	r1, r0, #4
   81784:	4b09      	ldr	r3, [pc, #36]	; (817ac <prvInsertTimerInActiveList+0x40>)
   81786:	6818      	ldr	r0, [r3, #0]
   81788:	4b09      	ldr	r3, [pc, #36]	; (817b0 <prvInsertTimerInActiveList+0x44>)
   8178a:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8178c:	2000      	movs	r0, #0
   8178e:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81790:	429a      	cmp	r2, r3
   81792:	d201      	bcs.n	81798 <prvInsertTimerInActiveList+0x2c>
   81794:	4299      	cmp	r1, r3
   81796:	d206      	bcs.n	817a6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81798:	1d01      	adds	r1, r0, #4
   8179a:	4b06      	ldr	r3, [pc, #24]	; (817b4 <prvInsertTimerInActiveList+0x48>)
   8179c:	6818      	ldr	r0, [r3, #0]
   8179e:	4b04      	ldr	r3, [pc, #16]	; (817b0 <prvInsertTimerInActiveList+0x44>)
   817a0:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   817a2:	2000      	movs	r0, #0
   817a4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   817a6:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   817a8:	bd08      	pop	{r3, pc}
   817aa:	bf00      	nop
   817ac:	2007ac94 	.word	0x2007ac94
   817b0:	00080535 	.word	0x00080535
   817b4:	2007ac90 	.word	0x2007ac90

000817b8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   817b8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   817ba:	4b0d      	ldr	r3, [pc, #52]	; (817f0 <prvCheckForValidListAndQueue+0x38>)
   817bc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   817be:	4b0d      	ldr	r3, [pc, #52]	; (817f4 <prvCheckForValidListAndQueue+0x3c>)
   817c0:	681b      	ldr	r3, [r3, #0]
   817c2:	b113      	cbz	r3, 817ca <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
   817c4:	4b0c      	ldr	r3, [pc, #48]	; (817f8 <prvCheckForValidListAndQueue+0x40>)
   817c6:	4798      	blx	r3
   817c8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   817ca:	4d0c      	ldr	r5, [pc, #48]	; (817fc <prvCheckForValidListAndQueue+0x44>)
   817cc:	4628      	mov	r0, r5
   817ce:	4e0c      	ldr	r6, [pc, #48]	; (81800 <prvCheckForValidListAndQueue+0x48>)
   817d0:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   817d2:	4c0c      	ldr	r4, [pc, #48]	; (81804 <prvCheckForValidListAndQueue+0x4c>)
   817d4:	4620      	mov	r0, r4
   817d6:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   817d8:	4b0b      	ldr	r3, [pc, #44]	; (81808 <prvCheckForValidListAndQueue+0x50>)
   817da:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   817dc:	4b0b      	ldr	r3, [pc, #44]	; (8180c <prvCheckForValidListAndQueue+0x54>)
   817de:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   817e0:	2200      	movs	r2, #0
   817e2:	210c      	movs	r1, #12
   817e4:	2005      	movs	r0, #5
   817e6:	4b0a      	ldr	r3, [pc, #40]	; (81810 <prvCheckForValidListAndQueue+0x58>)
   817e8:	4798      	blx	r3
   817ea:	4b02      	ldr	r3, [pc, #8]	; (817f4 <prvCheckForValidListAndQueue+0x3c>)
   817ec:	6018      	str	r0, [r3, #0]
   817ee:	e7e9      	b.n	817c4 <prvCheckForValidListAndQueue+0xc>
   817f0:	00080605 	.word	0x00080605
   817f4:	2007acc4 	.word	0x2007acc4
   817f8:	00080625 	.word	0x00080625
   817fc:	2007ac98 	.word	0x2007ac98
   81800:	000804fd 	.word	0x000804fd
   81804:	2007acac 	.word	0x2007acac
   81808:	2007ac90 	.word	0x2007ac90
   8180c:	2007ac94 	.word	0x2007ac94
   81810:	000809fd 	.word	0x000809fd

00081814 <xTimerCreateTimerTask>:
{
   81814:	b510      	push	{r4, lr}
   81816:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
   81818:	4b0b      	ldr	r3, [pc, #44]	; (81848 <xTimerCreateTimerTask+0x34>)
   8181a:	4798      	blx	r3
	if( xTimerQueue != NULL )
   8181c:	4b0b      	ldr	r3, [pc, #44]	; (8184c <xTimerCreateTimerTask+0x38>)
   8181e:	681b      	ldr	r3, [r3, #0]
   81820:	b173      	cbz	r3, 81840 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81822:	2300      	movs	r3, #0
   81824:	9303      	str	r3, [sp, #12]
   81826:	9302      	str	r3, [sp, #8]
   81828:	9301      	str	r3, [sp, #4]
   8182a:	2204      	movs	r2, #4
   8182c:	9200      	str	r2, [sp, #0]
   8182e:	f44f 7282 	mov.w	r2, #260	; 0x104
   81832:	4907      	ldr	r1, [pc, #28]	; (81850 <xTimerCreateTimerTask+0x3c>)
   81834:	4807      	ldr	r0, [pc, #28]	; (81854 <xTimerCreateTimerTask+0x40>)
   81836:	4c08      	ldr	r4, [pc, #32]	; (81858 <xTimerCreateTimerTask+0x44>)
   81838:	47a0      	blx	r4
	configASSERT( xReturn );
   8183a:	b108      	cbz	r0, 81840 <xTimerCreateTimerTask+0x2c>
}
   8183c:	b004      	add	sp, #16
   8183e:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   81840:	4b06      	ldr	r3, [pc, #24]	; (8185c <xTimerCreateTimerTask+0x48>)
   81842:	4798      	blx	r3
   81844:	bf00      	nop
   81846:	e7fd      	b.n	81844 <xTimerCreateTimerTask+0x30>
   81848:	000817b9 	.word	0x000817b9
   8184c:	2007acc4 	.word	0x2007acc4
   81850:	00086eec 	.word	0x00086eec
   81854:	00081965 	.word	0x00081965
   81858:	00080e19 	.word	0x00080e19
   8185c:	000805f5 	.word	0x000805f5

00081860 <xTimerGenericCommand>:
{
   81860:	b530      	push	{r4, r5, lr}
   81862:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   81864:	4c0f      	ldr	r4, [pc, #60]	; (818a4 <xTimerGenericCommand+0x44>)
   81866:	6825      	ldr	r5, [r4, #0]
   81868:	b1d5      	cbz	r5, 818a0 <xTimerGenericCommand+0x40>
   8186a:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
   8186c:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   8186e:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81870:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
   81872:	b13b      	cbz	r3, 81884 <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81874:	2300      	movs	r3, #0
   81876:	4622      	mov	r2, r4
   81878:	a901      	add	r1, sp, #4
   8187a:	4628      	mov	r0, r5
   8187c:	4c0a      	ldr	r4, [pc, #40]	; (818a8 <xTimerGenericCommand+0x48>)
   8187e:	47a0      	blx	r4
}
   81880:	b005      	add	sp, #20
   81882:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81884:	4b09      	ldr	r3, [pc, #36]	; (818ac <xTimerGenericCommand+0x4c>)
   81886:	4798      	blx	r3
   81888:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   8188a:	f04f 0300 	mov.w	r3, #0
   8188e:	bf0c      	ite	eq
   81890:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81892:	461a      	movne	r2, r3
   81894:	a901      	add	r1, sp, #4
   81896:	4803      	ldr	r0, [pc, #12]	; (818a4 <xTimerGenericCommand+0x44>)
   81898:	6800      	ldr	r0, [r0, #0]
   8189a:	4c05      	ldr	r4, [pc, #20]	; (818b0 <xTimerGenericCommand+0x50>)
   8189c:	47a0      	blx	r4
   8189e:	e7ef      	b.n	81880 <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
   818a0:	2000      	movs	r0, #0
	return xReturn;
   818a2:	e7ed      	b.n	81880 <xTimerGenericCommand+0x20>
   818a4:	2007acc4 	.word	0x2007acc4
   818a8:	00080b79 	.word	0x00080b79
   818ac:	0008167d 	.word	0x0008167d
   818b0:	00080a51 	.word	0x00080a51

000818b4 <prvSampleTimeNow>:
{
   818b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   818b8:	b082      	sub	sp, #8
   818ba:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
   818bc:	4b21      	ldr	r3, [pc, #132]	; (81944 <prvSampleTimeNow+0x90>)
   818be:	4798      	blx	r3
   818c0:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   818c2:	4b21      	ldr	r3, [pc, #132]	; (81948 <prvSampleTimeNow+0x94>)
   818c4:	681b      	ldr	r3, [r3, #0]
   818c6:	4298      	cmp	r0, r3
   818c8:	d315      	bcc.n	818f6 <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
   818ca:	2300      	movs	r3, #0
   818cc:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
   818d0:	4b1d      	ldr	r3, [pc, #116]	; (81948 <prvSampleTimeNow+0x94>)
   818d2:	f8c3 8000 	str.w	r8, [r3]
}
   818d6:	4640      	mov	r0, r8
   818d8:	b002      	add	sp, #8
   818da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   818de:	2100      	movs	r1, #0
   818e0:	9100      	str	r1, [sp, #0]
   818e2:	460b      	mov	r3, r1
   818e4:	4652      	mov	r2, sl
   818e6:	4620      	mov	r0, r4
   818e8:	4c18      	ldr	r4, [pc, #96]	; (8194c <prvSampleTimeNow+0x98>)
   818ea:	47a0      	blx	r4
				configASSERT( xResult );
   818ec:	b928      	cbnz	r0, 818fa <prvSampleTimeNow+0x46>
   818ee:	4b18      	ldr	r3, [pc, #96]	; (81950 <prvSampleTimeNow+0x9c>)
   818f0:	4798      	blx	r3
   818f2:	bf00      	nop
   818f4:	e7fd      	b.n	818f2 <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   818f6:	4e17      	ldr	r6, [pc, #92]	; (81954 <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
   818f8:	4f17      	ldr	r7, [pc, #92]	; (81958 <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   818fa:	6833      	ldr	r3, [r6, #0]
   818fc:	681a      	ldr	r2, [r3, #0]
   818fe:	b1c2      	cbz	r2, 81932 <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81900:	68da      	ldr	r2, [r3, #12]
   81902:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81906:	68db      	ldr	r3, [r3, #12]
   81908:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8190a:	1d25      	adds	r5, r4, #4
   8190c:	4628      	mov	r0, r5
   8190e:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81910:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81912:	4620      	mov	r0, r4
   81914:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81916:	69e3      	ldr	r3, [r4, #28]
   81918:	2b01      	cmp	r3, #1
   8191a:	d1ee      	bne.n	818fa <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   8191c:	69a3      	ldr	r3, [r4, #24]
   8191e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81920:	459a      	cmp	sl, r3
   81922:	d2dc      	bcs.n	818de <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81924:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81926:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81928:	4629      	mov	r1, r5
   8192a:	6830      	ldr	r0, [r6, #0]
   8192c:	4b0b      	ldr	r3, [pc, #44]	; (8195c <prvSampleTimeNow+0xa8>)
   8192e:	4798      	blx	r3
   81930:	e7e3      	b.n	818fa <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
   81932:	4a0b      	ldr	r2, [pc, #44]	; (81960 <prvSampleTimeNow+0xac>)
   81934:	6810      	ldr	r0, [r2, #0]
   81936:	4907      	ldr	r1, [pc, #28]	; (81954 <prvSampleTimeNow+0xa0>)
   81938:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   8193a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   8193c:	2301      	movs	r3, #1
   8193e:	f8c9 3000 	str.w	r3, [r9]
   81942:	e7c5      	b.n	818d0 <prvSampleTimeNow+0x1c>
   81944:	00081095 	.word	0x00081095
   81948:	2007acc0 	.word	0x2007acc0
   8194c:	00081861 	.word	0x00081861
   81950:	000805f5 	.word	0x000805f5
   81954:	2007ac90 	.word	0x2007ac90
   81958:	0008056f 	.word	0x0008056f
   8195c:	00080535 	.word	0x00080535
   81960:	2007ac94 	.word	0x2007ac94

00081964 <prvTimerTask>:
{
   81964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81968:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
   8196a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 81ad4 <prvTimerTask+0x170>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   8196e:	4b4d      	ldr	r3, [pc, #308]	; (81aa4 <prvTimerTask+0x140>)
   81970:	681b      	ldr	r3, [r3, #0]
   81972:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81974:	2a00      	cmp	r2, #0
   81976:	f000 8089 	beq.w	81a8c <prvTimerTask+0x128>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8197a:	68db      	ldr	r3, [r3, #12]
   8197c:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
   8197e:	4b4a      	ldr	r3, [pc, #296]	; (81aa8 <prvTimerTask+0x144>)
   81980:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81982:	a803      	add	r0, sp, #12
   81984:	4b49      	ldr	r3, [pc, #292]	; (81aac <prvTimerTask+0x148>)
   81986:	4798      	blx	r3
   81988:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8198a:	9b03      	ldr	r3, [sp, #12]
   8198c:	2b00      	cmp	r3, #0
   8198e:	f040 8086 	bne.w	81a9e <prvTimerTask+0x13a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81992:	42a8      	cmp	r0, r5
   81994:	d20f      	bcs.n	819b6 <prvTimerTask+0x52>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81996:	1ba9      	subs	r1, r5, r6
   81998:	4b45      	ldr	r3, [pc, #276]	; (81ab0 <prvTimerTask+0x14c>)
   8199a:	6818      	ldr	r0, [r3, #0]
   8199c:	4b45      	ldr	r3, [pc, #276]	; (81ab4 <prvTimerTask+0x150>)
   8199e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   819a0:	4b45      	ldr	r3, [pc, #276]	; (81ab8 <prvTimerTask+0x154>)
   819a2:	4798      	blx	r3
   819a4:	b908      	cbnz	r0, 819aa <prvTimerTask+0x46>
					portYIELD_WITHIN_API();
   819a6:	4b45      	ldr	r3, [pc, #276]	; (81abc <prvTimerTask+0x158>)
   819a8:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   819aa:	a802      	add	r0, sp, #8
   819ac:	4b3f      	ldr	r3, [pc, #252]	; (81aac <prvTimerTask+0x148>)
   819ae:	4798      	blx	r3
   819b0:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   819b2:	4e3f      	ldr	r6, [pc, #252]	; (81ab0 <prvTimerTask+0x14c>)
   819b4:	e036      	b.n	81a24 <prvTimerTask+0xc0>
				xTaskResumeAll();
   819b6:	4b40      	ldr	r3, [pc, #256]	; (81ab8 <prvTimerTask+0x154>)
   819b8:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   819ba:	4b3a      	ldr	r3, [pc, #232]	; (81aa4 <prvTimerTask+0x140>)
   819bc:	681b      	ldr	r3, [r3, #0]
   819be:	68db      	ldr	r3, [r3, #12]
   819c0:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   819c2:	1d20      	adds	r0, r4, #4
   819c4:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   819c6:	69e3      	ldr	r3, [r4, #28]
   819c8:	2b01      	cmp	r3, #1
   819ca:	d114      	bne.n	819f6 <prvTimerTask+0x92>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   819cc:	69a1      	ldr	r1, [r4, #24]
   819ce:	462b      	mov	r3, r5
   819d0:	4632      	mov	r2, r6
   819d2:	4429      	add	r1, r5
   819d4:	4620      	mov	r0, r4
   819d6:	4e3a      	ldr	r6, [pc, #232]	; (81ac0 <prvTimerTask+0x15c>)
   819d8:	47b0      	blx	r6
   819da:	2801      	cmp	r0, #1
   819dc:	d10b      	bne.n	819f6 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   819de:	2100      	movs	r1, #0
   819e0:	9100      	str	r1, [sp, #0]
   819e2:	460b      	mov	r3, r1
   819e4:	462a      	mov	r2, r5
   819e6:	4620      	mov	r0, r4
   819e8:	4d36      	ldr	r5, [pc, #216]	; (81ac4 <prvTimerTask+0x160>)
   819ea:	47a8      	blx	r5
			configASSERT( xResult );
   819ec:	b918      	cbnz	r0, 819f6 <prvTimerTask+0x92>
   819ee:	4b36      	ldr	r3, [pc, #216]	; (81ac8 <prvTimerTask+0x164>)
   819f0:	4798      	blx	r3
   819f2:	bf00      	nop
   819f4:	e7fd      	b.n	819f2 <prvTimerTask+0x8e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   819f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   819f8:	4620      	mov	r0, r4
   819fa:	4798      	blx	r3
   819fc:	e7d5      	b.n	819aa <prvTimerTask+0x46>
		xNextExpireTime = ( portTickType ) 0U;
   819fe:	2500      	movs	r5, #0
   81a00:	e7c9      	b.n	81996 <prvTimerTask+0x32>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81a02:	9904      	ldr	r1, [sp, #16]
   81a04:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81a06:	b131      	cbz	r1, 81a16 <prvTimerTask+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81a08:	463b      	mov	r3, r7
   81a0a:	463a      	mov	r2, r7
   81a0c:	4439      	add	r1, r7
   81a0e:	4620      	mov	r0, r4
   81a10:	4c2b      	ldr	r4, [pc, #172]	; (81ac0 <prvTimerTask+0x15c>)
   81a12:	47a0      	blx	r4
   81a14:	e006      	b.n	81a24 <prvTimerTask+0xc0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81a16:	4b2c      	ldr	r3, [pc, #176]	; (81ac8 <prvTimerTask+0x164>)
   81a18:	4798      	blx	r3
   81a1a:	bf00      	nop
   81a1c:	e7fd      	b.n	81a1a <prvTimerTask+0xb6>
				vPortFree( pxTimer );
   81a1e:	4620      	mov	r0, r4
   81a20:	4b2a      	ldr	r3, [pc, #168]	; (81acc <prvTimerTask+0x168>)
   81a22:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81a24:	4d2a      	ldr	r5, [pc, #168]	; (81ad0 <prvTimerTask+0x16c>)
   81a26:	2300      	movs	r3, #0
   81a28:	461a      	mov	r2, r3
   81a2a:	a903      	add	r1, sp, #12
   81a2c:	6830      	ldr	r0, [r6, #0]
   81a2e:	47a8      	blx	r5
   81a30:	2800      	cmp	r0, #0
   81a32:	d09c      	beq.n	8196e <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
   81a34:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
   81a36:	b11c      	cbz	r4, 81a40 <prvTimerTask+0xdc>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81a38:	6963      	ldr	r3, [r4, #20]
   81a3a:	b10b      	cbz	r3, 81a40 <prvTimerTask+0xdc>
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81a3c:	1d20      	adds	r0, r4, #4
   81a3e:	47c0      	blx	r8
		switch( xMessage.xMessageID )
   81a40:	9b03      	ldr	r3, [sp, #12]
   81a42:	2b02      	cmp	r3, #2
   81a44:	d0dd      	beq.n	81a02 <prvTimerTask+0x9e>
   81a46:	2b03      	cmp	r3, #3
   81a48:	d0e9      	beq.n	81a1e <prvTimerTask+0xba>
   81a4a:	2b00      	cmp	r3, #0
   81a4c:	d1eb      	bne.n	81a26 <prvTimerTask+0xc2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81a4e:	9904      	ldr	r1, [sp, #16]
   81a50:	69a0      	ldr	r0, [r4, #24]
   81a52:	460b      	mov	r3, r1
   81a54:	463a      	mov	r2, r7
   81a56:	4401      	add	r1, r0
   81a58:	4620      	mov	r0, r4
   81a5a:	4d19      	ldr	r5, [pc, #100]	; (81ac0 <prvTimerTask+0x15c>)
   81a5c:	47a8      	blx	r5
   81a5e:	2801      	cmp	r0, #1
   81a60:	d1e0      	bne.n	81a24 <prvTimerTask+0xc0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81a62:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81a64:	4620      	mov	r0, r4
   81a66:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81a68:	69e3      	ldr	r3, [r4, #28]
   81a6a:	2b01      	cmp	r3, #1
   81a6c:	d1da      	bne.n	81a24 <prvTimerTask+0xc0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81a6e:	69a2      	ldr	r2, [r4, #24]
   81a70:	2100      	movs	r1, #0
   81a72:	9100      	str	r1, [sp, #0]
   81a74:	460b      	mov	r3, r1
   81a76:	9804      	ldr	r0, [sp, #16]
   81a78:	4402      	add	r2, r0
   81a7a:	4620      	mov	r0, r4
   81a7c:	4c11      	ldr	r4, [pc, #68]	; (81ac4 <prvTimerTask+0x160>)
   81a7e:	47a0      	blx	r4
						configASSERT( xResult );
   81a80:	2800      	cmp	r0, #0
   81a82:	d1cf      	bne.n	81a24 <prvTimerTask+0xc0>
   81a84:	4b10      	ldr	r3, [pc, #64]	; (81ac8 <prvTimerTask+0x164>)
   81a86:	4798      	blx	r3
   81a88:	bf00      	nop
   81a8a:	e7fd      	b.n	81a88 <prvTimerTask+0x124>
	vTaskSuspendAll();
   81a8c:	4b06      	ldr	r3, [pc, #24]	; (81aa8 <prvTimerTask+0x144>)
   81a8e:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81a90:	a803      	add	r0, sp, #12
   81a92:	4b06      	ldr	r3, [pc, #24]	; (81aac <prvTimerTask+0x148>)
   81a94:	4798      	blx	r3
   81a96:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81a98:	9b03      	ldr	r3, [sp, #12]
   81a9a:	2b00      	cmp	r3, #0
   81a9c:	d0af      	beq.n	819fe <prvTimerTask+0x9a>
			xTaskResumeAll();
   81a9e:	4b06      	ldr	r3, [pc, #24]	; (81ab8 <prvTimerTask+0x154>)
   81aa0:	4798      	blx	r3
   81aa2:	e782      	b.n	819aa <prvTimerTask+0x46>
   81aa4:	2007ac90 	.word	0x2007ac90
   81aa8:	00081085 	.word	0x00081085
   81aac:	000818b5 	.word	0x000818b5
   81ab0:	2007acc4 	.word	0x2007acc4
   81ab4:	00080d71 	.word	0x00080d71
   81ab8:	000811dd 	.word	0x000811dd
   81abc:	000805e5 	.word	0x000805e5
   81ac0:	0008176d 	.word	0x0008176d
   81ac4:	00081861 	.word	0x00081861
   81ac8:	000805f5 	.word	0x000805f5
   81acc:	00080821 	.word	0x00080821
   81ad0:	00080c09 	.word	0x00080c09
   81ad4:	0008056f 	.word	0x0008056f

00081ad8 <initPin6>:
	   initPin6();
	   initPin7();

   }
   
   void initPin6 (void){
   81ad8:	b538      	push	{r3, r4, r5, lr}
	   pio_configure_pin(PIN_24, PIO_TYPE_PIO_PERIPH_B);
   81ada:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81ade:	2058      	movs	r0, #88	; 0x58
   81ae0:	4b0b      	ldr	r3, [pc, #44]	; (81b10 <initPin6+0x38>)
   81ae2:	4798      	blx	r3
	   PWM_pin_6.channel = PWM_CHANNEL_7;
   81ae4:	490b      	ldr	r1, [pc, #44]	; (81b14 <initPin6+0x3c>)
   81ae6:	2507      	movs	r5, #7
   81ae8:	600d      	str	r5, [r1, #0]
	   PWM_pin_6.alignment = PWM_ALIGN_LEFT;
   81aea:	2300      	movs	r3, #0
   81aec:	810b      	strh	r3, [r1, #8]
	   PWM_pin_6.polarity = PWM_LOW;
   81aee:	728b      	strb	r3, [r1, #10]
	   PWM_pin_6.ul_prescaler = PWM_CMR_CPRE_CLKA;
   81af0:	220b      	movs	r2, #11
   81af2:	604a      	str	r2, [r1, #4]
	   PWM_pin_6.ul_period = 7500;
   81af4:	f641 524c 	movw	r2, #7500	; 0x1d4c
   81af8:	610a      	str	r2, [r1, #16]
	   PWM_pin_6.ul_duty = 0;	   
   81afa:	60cb      	str	r3, [r1, #12]
	   pwm_channel_init(PWM, &PWM_pin_6);
   81afc:	4c06      	ldr	r4, [pc, #24]	; (81b18 <initPin6+0x40>)
   81afe:	4620      	mov	r0, r4
   81b00:	4b06      	ldr	r3, [pc, #24]	; (81b1c <initPin6+0x44>)
   81b02:	4798      	blx	r3
	   pwm_channel_enable(PWM, PWM_CHANNEL_7);
   81b04:	4629      	mov	r1, r5
   81b06:	4620      	mov	r0, r4
   81b08:	4b05      	ldr	r3, [pc, #20]	; (81b20 <initPin6+0x48>)
   81b0a:	4798      	blx	r3
   81b0c:	bd38      	pop	{r3, r4, r5, pc}
   81b0e:	bf00      	nop
   81b10:	0008298d 	.word	0x0008298d
   81b14:	2007ae6c 	.word	0x2007ae6c
   81b18:	40094000 	.word	0x40094000
   81b1c:	000803c9 	.word	0x000803c9
   81b20:	000804e9 	.word	0x000804e9

00081b24 <initPin7>:

   }
   void initPin7 (void){
   81b24:	b538      	push	{r3, r4, r5, lr}
	   pio_configure_pin(PIN_23, PIO_TYPE_PIO_PERIPH_B);
   81b26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81b2a:	2057      	movs	r0, #87	; 0x57
   81b2c:	4b0b      	ldr	r3, [pc, #44]	; (81b5c <initPin7+0x38>)
   81b2e:	4798      	blx	r3
	   PWM_pin_7.alignment = PWM_ALIGN_LEFT;
   81b30:	490b      	ldr	r1, [pc, #44]	; (81b60 <initPin7+0x3c>)
   81b32:	2300      	movs	r3, #0
   81b34:	810b      	strh	r3, [r1, #8]
	   PWM_pin_7.polarity = PWM_LOW;
   81b36:	728b      	strb	r3, [r1, #10]
	   PWM_pin_7.ul_prescaler = PWM_CMR_CPRE_CLKA;
   81b38:	220b      	movs	r2, #11
   81b3a:	604a      	str	r2, [r1, #4]
	   PWM_pin_7.ul_period = 7500;
   81b3c:	f641 524c 	movw	r2, #7500	; 0x1d4c
   81b40:	610a      	str	r2, [r1, #16]
	   PWM_pin_7.ul_duty = 0;
   81b42:	60cb      	str	r3, [r1, #12]
	   PWM_pin_7.channel = PWM_CHANNEL_6 ;
   81b44:	2506      	movs	r5, #6
   81b46:	600d      	str	r5, [r1, #0]
	   pwm_channel_init(PWM, &PWM_pin_7);
   81b48:	4c06      	ldr	r4, [pc, #24]	; (81b64 <initPin7+0x40>)
   81b4a:	4620      	mov	r0, r4
   81b4c:	4b06      	ldr	r3, [pc, #24]	; (81b68 <initPin7+0x44>)
   81b4e:	4798      	blx	r3
	   pwm_channel_enable(PWM, PWM_CHANNEL_6);
   81b50:	4629      	mov	r1, r5
   81b52:	4620      	mov	r0, r4
   81b54:	4b05      	ldr	r3, [pc, #20]	; (81b6c <initPin7+0x48>)
   81b56:	4798      	blx	r3
   81b58:	bd38      	pop	{r3, r4, r5, pc}
   81b5a:	bf00      	nop
   81b5c:	0008298d 	.word	0x0008298d
   81b60:	2007ae44 	.word	0x2007ae44
   81b64:	40094000 	.word	0x40094000
   81b68:	000803c9 	.word	0x000803c9
   81b6c:	000804e9 	.word	0x000804e9

00081b70 <PWM_init>:
   void PWM_init(void){
   81b70:	b530      	push	{r4, r5, lr}
   81b72:	b085      	sub	sp, #20
	   pmc_enable_periph_clk(ID_PWM);
   81b74:	2024      	movs	r0, #36	; 0x24
   81b76:	4b0d      	ldr	r3, [pc, #52]	; (81bac <PWM_init+0x3c>)
   81b78:	4798      	blx	r3
	   pwm_channel_disable(PWM,PWM_CHANNEL_7);
   81b7a:	4c0d      	ldr	r4, [pc, #52]	; (81bb0 <PWM_init+0x40>)
   81b7c:	2107      	movs	r1, #7
   81b7e:	4620      	mov	r0, r4
   81b80:	4d0c      	ldr	r5, [pc, #48]	; (81bb4 <PWM_init+0x44>)
   81b82:	47a8      	blx	r5
	   pwm_channel_disable(PWM,PWM_CHANNEL_6);
   81b84:	2106      	movs	r1, #6
   81b86:	4620      	mov	r0, r4
   81b88:	47a8      	blx	r5
	   pwm_clock_t PWMDAC_clock_config = {
   81b8a:	4b0b      	ldr	r3, [pc, #44]	; (81bb8 <PWM_init+0x48>)
   81b8c:	9301      	str	r3, [sp, #4]
   81b8e:	2300      	movs	r3, #0
   81b90:	9302      	str	r3, [sp, #8]
   81b92:	4b0a      	ldr	r3, [pc, #40]	; (81bbc <PWM_init+0x4c>)
   81b94:	9303      	str	r3, [sp, #12]
	   pwm_init(PWM, &PWMDAC_clock_config);
   81b96:	a901      	add	r1, sp, #4
   81b98:	4620      	mov	r0, r4
   81b9a:	4b09      	ldr	r3, [pc, #36]	; (81bc0 <PWM_init+0x50>)
   81b9c:	4798      	blx	r3
	   initPin6();
   81b9e:	4b09      	ldr	r3, [pc, #36]	; (81bc4 <PWM_init+0x54>)
   81ba0:	4798      	blx	r3
	   initPin7();
   81ba2:	4b09      	ldr	r3, [pc, #36]	; (81bc8 <PWM_init+0x58>)
   81ba4:	4798      	blx	r3
   }
   81ba6:	b005      	add	sp, #20
   81ba8:	bd30      	pop	{r4, r5, pc}
   81baa:	bf00      	nop
   81bac:	00082cf1 	.word	0x00082cf1
   81bb0:	40094000 	.word	0x40094000
   81bb4:	000804f3 	.word	0x000804f3
   81bb8:	000f4240 	.word	0x000f4240
   81bbc:	0501bd00 	.word	0x0501bd00
   81bc0:	00080385 	.word	0x00080385
   81bc4:	00081ad9 	.word	0x00081ad9
   81bc8:	00081b25 	.word	0x00081b25

00081bcc <pwm_pin_6>:
   }
   
   
   void pwm_pin_6(uint32_t speed1){
   81bcc:	b508      	push	{r3, lr}
   81bce:	f640 0298 	movw	r2, #2200	; 0x898
   81bd2:	4282      	cmp	r2, r0
   81bd4:	bf28      	it	cs
   81bd6:	4602      	movcs	r2, r0
		    speed1=800;
	    }
	    else if(speed1>2200){
		    speed1=2200;
	    }
     pwm_channel_update_duty(PWM, &PWM_pin_6, speed1); 
   81bd8:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
   81bdc:	bf38      	it	cc
   81bde:	f44f 7248 	movcc.w	r2, #800	; 0x320
   81be2:	4902      	ldr	r1, [pc, #8]	; (81bec <pwm_pin_6+0x20>)
   81be4:	4802      	ldr	r0, [pc, #8]	; (81bf0 <pwm_pin_6+0x24>)
   81be6:	4b03      	ldr	r3, [pc, #12]	; (81bf4 <pwm_pin_6+0x28>)
   81be8:	4798      	blx	r3
   81bea:	bd08      	pop	{r3, pc}
   81bec:	2007ae6c 	.word	0x2007ae6c
   81bf0:	40094000 	.word	0x40094000
   81bf4:	000804cd 	.word	0x000804cd

00081bf8 <pwm_pin_7>:
}

  void pwm_pin_7(uint32_t speed2){
   81bf8:	b508      	push	{r3, lr}
   81bfa:	f640 0298 	movw	r2, #2200	; 0x898
   81bfe:	4282      	cmp	r2, r0
   81c00:	bf28      	it	cs
   81c02:	4602      	movcs	r2, r0
		speed2=800;
	}
	else if(speed2>2200){
		speed2=2200;
	}
	pwm_channel_update_duty(PWM, & PWM_pin_7, speed2 );
   81c04:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
   81c08:	bf38      	it	cc
   81c0a:	f44f 7248 	movcc.w	r2, #800	; 0x320
   81c0e:	4902      	ldr	r1, [pc, #8]	; (81c18 <pwm_pin_7+0x20>)
   81c10:	4802      	ldr	r0, [pc, #8]	; (81c1c <pwm_pin_7+0x24>)
   81c12:	4b03      	ldr	r3, [pc, #12]	; (81c20 <pwm_pin_7+0x28>)
   81c14:	4798      	blx	r3
   81c16:	bd08      	pop	{r3, pc}
   81c18:	2007ae44 	.word	0x2007ae44
   81c1c:	40094000 	.word	0x40094000
   81c20:	000804cd 	.word	0x000804cd

00081c24 <pio_interruptA>:
	counterB = 0;
}

void pio_interruptA(void) {
	// Save all triggered interrupts
	uint32_t status1 = PIOA->PIO_ISR;
   81c24:	4b03      	ldr	r3, [pc, #12]	; (81c34 <pio_interruptA+0x10>)
   81c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	counterA++;
   81c28:	4a03      	ldr	r2, [pc, #12]	; (81c38 <pio_interruptA+0x14>)
   81c2a:	6813      	ldr	r3, [r2, #0]
   81c2c:	3301      	adds	r3, #1
   81c2e:	6013      	str	r3, [r2, #0]
   81c30:	4770      	bx	lr
   81c32:	bf00      	nop
   81c34:	400e0e00 	.word	0x400e0e00
   81c38:	2007acc8 	.word	0x2007acc8

00081c3c <pio_interruptB>:
}

void pio_interruptB(void) {
	// Save all triggered interrupts
	uint32_t status2 = PIOD->PIO_ISR;
   81c3c:	4b03      	ldr	r3, [pc, #12]	; (81c4c <pio_interruptB+0x10>)
   81c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	counterB++;
   81c40:	4a03      	ldr	r2, [pc, #12]	; (81c50 <pio_interruptB+0x14>)
   81c42:	6813      	ldr	r3, [r2, #0]
   81c44:	3301      	adds	r3, #1
   81c46:	6013      	str	r3, [r2, #0]
   81c48:	4770      	bx	lr
   81c4a:	bf00      	nop
   81c4c:	400e1400 	.word	0x400e1400
   81c50:	2007accc 	.word	0x2007accc

00081c54 <get_counterA>:
	return counterA;
   81c54:	4b01      	ldr	r3, [pc, #4]	; (81c5c <get_counterA+0x8>)
   81c56:	6818      	ldr	r0, [r3, #0]
}
   81c58:	4770      	bx	lr
   81c5a:	bf00      	nop
   81c5c:	2007acc8 	.word	0x2007acc8

00081c60 <get_counterB>:
	return counterB;
   81c60:	4b01      	ldr	r3, [pc, #4]	; (81c68 <get_counterB+0x8>)
   81c62:	6818      	ldr	r0, [r3, #0]
}
   81c64:	4770      	bx	lr
   81c66:	bf00      	nop
   81c68:	2007accc 	.word	0x2007accc

00081c6c <resetCounterA>:
	counterA = 0;
   81c6c:	2200      	movs	r2, #0
   81c6e:	4b01      	ldr	r3, [pc, #4]	; (81c74 <resetCounterA+0x8>)
   81c70:	601a      	str	r2, [r3, #0]
   81c72:	4770      	bx	lr
   81c74:	2007acc8 	.word	0x2007acc8

00081c78 <resetCounterB>:
	counterB = 0;
   81c78:	2200      	movs	r2, #0
   81c7a:	4b01      	ldr	r3, [pc, #4]	; (81c80 <resetCounterB+0x8>)
   81c7c:	601a      	str	r2, [r3, #0]
   81c7e:	4770      	bx	lr
   81c80:	2007accc 	.word	0x2007accc

00081c84 <encoder_init>:
}

void encoder_init(void) {
   81c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81c88:	b082      	sub	sp, #8
	// Enable Clock for PIOB - needed for sampling falling edge
	pmc_enable_periph_clk(ID_PIOA);
   81c8a:	200b      	movs	r0, #11
   81c8c:	4c1c      	ldr	r4, [pc, #112]	; (81d00 <encoder_init+0x7c>)
   81c8e:	47a0      	blx	r4
	pmc_enable_periph_clk(ID_PIOD);
   81c90:	200e      	movs	r0, #14
   81c92:	47a0      	blx	r4
	
	pio_set_input(PIOA, PIO_PA15, PIO_PULLUP); 
   81c94:	4d1b      	ldr	r5, [pc, #108]	; (81d04 <encoder_init+0x80>)
   81c96:	2201      	movs	r2, #1
   81c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   81c9c:	4628      	mov	r0, r5
   81c9e:	4e1a      	ldr	r6, [pc, #104]	; (81d08 <encoder_init+0x84>)
   81ca0:	47b0      	blx	r6
	pio_set_input(PIOD, PIO_PD0, PIO_PULLUP);
   81ca2:	4c1a      	ldr	r4, [pc, #104]	; (81d0c <encoder_init+0x88>)
   81ca4:	2201      	movs	r2, #1
   81ca6:	4611      	mov	r1, r2
   81ca8:	4620      	mov	r0, r4
   81caa:	47b0      	blx	r6
	
	// Enable Glitch/Debouncing filter
	PIOA->PIO_IFER = PIO_PA15;
   81cac:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   81cb0:	622f      	str	r7, [r5, #32]
	PIOD->PIO_IFER = PIO_PD0;
   81cb2:	2601      	movs	r6, #1
   81cb4:	6226      	str	r6, [r4, #32]
	
	// Select Debouncing filter
	PIOA->PIO_DIFSR = PIO_PA15;
   81cb6:	f8c5 7084 	str.w	r7, [r5, #132]	; 0x84
	PIOD->PIO_DIFSR = PIO_PD0;
   81cba:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
	
// 	if(getVenster() < 1500){
// 		pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_FALL_EDGE, pio_interruptA);
// 	}
// 	else{
		pio_handler_set(PIOA, ID_PIOA, PIO_PA15, PIO_IT_RISE_EDGE, pio_interruptA);
   81cbe:	4b14      	ldr	r3, [pc, #80]	; (81d10 <encoder_init+0x8c>)
   81cc0:	9300      	str	r3, [sp, #0]
   81cc2:	2370      	movs	r3, #112	; 0x70
   81cc4:	463a      	mov	r2, r7
   81cc6:	210b      	movs	r1, #11
   81cc8:	4628      	mov	r0, r5
   81cca:	f8df 8054 	ldr.w	r8, [pc, #84]	; 81d20 <encoder_init+0x9c>
   81cce:	47c0      	blx	r8
//	}
	pio_enable_interrupt(PIOA, PIO_PA15);
   81cd0:	4639      	mov	r1, r7
   81cd2:	4628      	mov	r0, r5
   81cd4:	4d0f      	ldr	r5, [pc, #60]	; (81d14 <encoder_init+0x90>)
   81cd6:	47a8      	blx	r5

// 	if(getHoger() < 1500){
// 		pio_handler_set(PIOD, ID_PIOD, PIO_PD0, PIO_IT_FALL_EDGE, pio_interruptB);
// 	}
// 	else{
		pio_handler_set(PIOD, ID_PIOD, PIO_PD0, PIO_IT_RISE_EDGE, pio_interruptB);
   81cd8:	4b0f      	ldr	r3, [pc, #60]	; (81d18 <encoder_init+0x94>)
   81cda:	9300      	str	r3, [sp, #0]
   81cdc:	2370      	movs	r3, #112	; 0x70
   81cde:	4632      	mov	r2, r6
   81ce0:	210e      	movs	r1, #14
   81ce2:	4620      	mov	r0, r4
   81ce4:	47c0      	blx	r8
//	}
	
	pio_enable_interrupt(PIOD, PIO_PD0);
   81ce6:	4631      	mov	r1, r6
   81ce8:	4620      	mov	r0, r4
   81cea:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   81cec:	4b0b      	ldr	r3, [pc, #44]	; (81d1c <encoder_init+0x98>)
   81cee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81cf2:	601a      	str	r2, [r3, #0]
   81cf4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   81cf8:	601a      	str	r2, [r3, #0]
	
	// Enable Interrupt Handling in NVIC
	NVIC_EnableIRQ(PIOA_IRQn);
	NVIC_EnableIRQ(PIOD_IRQn);
}
   81cfa:	b002      	add	sp, #8
   81cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d00:	00082cf1 	.word	0x00082cf1
   81d04:	400e0e00 	.word	0x400e0e00
   81d08:	000828fb 	.word	0x000828fb
   81d0c:	400e1400 	.word	0x400e1400
   81d10:	00081c25 	.word	0x00081c25
   81d14:	00082981 	.word	0x00082981
   81d18:	00081c3d 	.word	0x00081c3d
   81d1c:	e000e100 	.word	0xe000e100
   81d20:	00082b49 	.word	0x00082b49
   81d24:	00000000 	.word	0x00000000

00081d28 <math_get_angle_deg>:
#define PI 3.141592653589

double X = 0;
double Y = 0;
/* Takes an angle in radians and converts to degrees (from 0 to 360) */
double math_get_angle_deg(double rad){
   81d28:	b510      	push	{r4, lr}
	return (rad * (180/PI));
   81d2a:	a303      	add	r3, pc, #12	; (adr r3, 81d38 <math_get_angle_deg+0x10>)
   81d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
   81d30:	4c03      	ldr	r4, [pc, #12]	; (81d40 <math_get_angle_deg+0x18>)
   81d32:	47a0      	blx	r4
}
   81d34:	bd10      	pop	{r4, pc}
   81d36:	bf00      	nop
   81d38:	1a63c9ec 	.word	0x1a63c9ec
   81d3c:	404ca5dc 	.word	0x404ca5dc
   81d40:	000839cd 	.word	0x000839cd

00081d44 <get_euclid_distance>:
double math_get_angle_rad(double deg){
	return (deg * (PI/180));
}

/* Get euclidean distance between two points (see Pythagorean theorem) */
uint16_t get_euclid_distance(uint16_t x, uint16_t y, uint16_t x1, uint16_t y1) {
   81d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d48:	4688      	mov	r8, r1
   81d4a:	461d      	mov	r5, r3
	X = x - x1;
   81d4c:	4c15      	ldr	r4, [pc, #84]	; (81da4 <get_euclid_distance+0x60>)
   81d4e:	1a80      	subs	r0, r0, r2
   81d50:	47a0      	blx	r4
   81d52:	4606      	mov	r6, r0
   81d54:	460f      	mov	r7, r1
   81d56:	4b14      	ldr	r3, [pc, #80]	; (81da8 <get_euclid_distance+0x64>)
   81d58:	e9c3 6700 	strd	r6, r7, [r3]
	Y = y - y1;
   81d5c:	eba8 0005 	sub.w	r0, r8, r5
   81d60:	47a0      	blx	r4
   81d62:	4604      	mov	r4, r0
   81d64:	460d      	mov	r5, r1
   81d66:	4b11      	ldr	r3, [pc, #68]	; (81dac <get_euclid_distance+0x68>)
   81d68:	e9c3 4500 	strd	r4, r5, [r3]
	return sqrt((X*X) + (Y*Y));
   81d6c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81dbc <get_euclid_distance+0x78>
   81d70:	4632      	mov	r2, r6
   81d72:	463b      	mov	r3, r7
   81d74:	4630      	mov	r0, r6
   81d76:	4639      	mov	r1, r7
   81d78:	47c0      	blx	r8
   81d7a:	4606      	mov	r6, r0
   81d7c:	460f      	mov	r7, r1
   81d7e:	4622      	mov	r2, r4
   81d80:	462b      	mov	r3, r5
   81d82:	4620      	mov	r0, r4
   81d84:	4629      	mov	r1, r5
   81d86:	47c0      	blx	r8
   81d88:	4602      	mov	r2, r0
   81d8a:	460b      	mov	r3, r1
   81d8c:	4630      	mov	r0, r6
   81d8e:	4639      	mov	r1, r7
   81d90:	4c07      	ldr	r4, [pc, #28]	; (81db0 <get_euclid_distance+0x6c>)
   81d92:	47a0      	blx	r4
   81d94:	4b07      	ldr	r3, [pc, #28]	; (81db4 <get_euclid_distance+0x70>)
   81d96:	4798      	blx	r3
   81d98:	4b07      	ldr	r3, [pc, #28]	; (81db8 <get_euclid_distance+0x74>)
   81d9a:	4798      	blx	r3
}
   81d9c:	b280      	uxth	r0, r0
   81d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81da2:	bf00      	nop
   81da4:	00083901 	.word	0x00083901
   81da8:	2007acd0 	.word	0x2007acd0
   81dac:	2007acd8 	.word	0x2007acd8
   81db0:	00083669 	.word	0x00083669
   81db4:	00083425 	.word	0x00083425
   81db8:	00083f7d 	.word	0x00083f7d
   81dbc:	000839cd 	.word	0x000839cd

00081dc0 <math_atan2>:

/* Return the angle in radians, see atan2 Wikipedia for reference */
double math_atan2(double x, double y, double x1, double y1) {
   81dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   81dc4:	4690      	mov	r8, r2
   81dc6:	4699      	mov	r9, r3
	X = x - x1;
   81dc8:	4e53      	ldr	r6, [pc, #332]	; (81f18 <math_atan2+0x158>)
   81dca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   81dce:	47b0      	blx	r6
   81dd0:	4604      	mov	r4, r0
   81dd2:	460d      	mov	r5, r1
   81dd4:	4b51      	ldr	r3, [pc, #324]	; (81f1c <math_atan2+0x15c>)
   81dd6:	e9c3 4500 	strd	r4, r5, [r3]
	Y = y - y1;
   81dda:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   81dde:	4640      	mov	r0, r8
   81de0:	4649      	mov	r1, r9
   81de2:	47b0      	blx	r6
   81de4:	4606      	mov	r6, r0
   81de6:	460f      	mov	r7, r1
   81de8:	4b4d      	ldr	r3, [pc, #308]	; (81f20 <math_atan2+0x160>)
   81dea:	e9c3 6700 	strd	r6, r7, [r3]
	if (X == 0 && Y == 0){
   81dee:	2200      	movs	r2, #0
   81df0:	2300      	movs	r3, #0
   81df2:	4620      	mov	r0, r4
   81df4:	4629      	mov	r1, r5
   81df6:	f8df 8134 	ldr.w	r8, [pc, #308]	; 81f2c <math_atan2+0x16c>
   81dfa:	47c0      	blx	r8
   81dfc:	b130      	cbz	r0, 81e0c <math_atan2+0x4c>
   81dfe:	2200      	movs	r2, #0
   81e00:	2300      	movs	r3, #0
   81e02:	4630      	mov	r0, r6
   81e04:	4639      	mov	r1, r7
   81e06:	47c0      	blx	r8
   81e08:	2800      	cmp	r0, #0
   81e0a:	d169      	bne.n	81ee0 <math_atan2+0x120>
		return 0;
	}

	if (X > 0)
   81e0c:	2200      	movs	r2, #0
   81e0e:	2300      	movs	r3, #0
   81e10:	4620      	mov	r0, r4
   81e12:	4629      	mov	r1, r5
   81e14:	f8df 8118 	ldr.w	r8, [pc, #280]	; 81f30 <math_atan2+0x170>
   81e18:	47c0      	blx	r8
   81e1a:	b148      	cbz	r0, 81e30 <math_atan2+0x70>
		return atan(Y/X);
   81e1c:	4622      	mov	r2, r4
   81e1e:	462b      	mov	r3, r5
   81e20:	4630      	mov	r0, r6
   81e22:	4639      	mov	r1, r7
   81e24:	4c3f      	ldr	r4, [pc, #252]	; (81f24 <math_atan2+0x164>)
   81e26:	47a0      	blx	r4
   81e28:	4b3f      	ldr	r3, [pc, #252]	; (81f28 <math_atan2+0x168>)
   81e2a:	4798      	blx	r3
   81e2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if (X < 0 && Y >= 0)
   81e30:	2200      	movs	r2, #0
   81e32:	2300      	movs	r3, #0
   81e34:	4620      	mov	r0, r4
   81e36:	4629      	mov	r1, r5
   81e38:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 81f38 <math_atan2+0x178>
   81e3c:	47c0      	blx	r8
   81e3e:	b9e0      	cbnz	r0, 81e7a <math_atan2+0xba>
		return (atan(Y/X) + PI);
	else if(X < 0 && Y < 0)
   81e40:	2200      	movs	r2, #0
   81e42:	2300      	movs	r3, #0
   81e44:	4620      	mov	r0, r4
   81e46:	4629      	mov	r1, r5
   81e48:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 81f38 <math_atan2+0x178>
   81e4c:	47c0      	blx	r8
   81e4e:	bb58      	cbnz	r0, 81ea8 <math_atan2+0xe8>
		return (atan(Y/X) - PI);
	else if(X == 0 && Y > 0)
   81e50:	2200      	movs	r2, #0
   81e52:	2300      	movs	r3, #0
   81e54:	4620      	mov	r0, r4
   81e56:	4629      	mov	r1, r5
   81e58:	4c34      	ldr	r4, [pc, #208]	; (81f2c <math_atan2+0x16c>)
   81e5a:	47a0      	blx	r4
   81e5c:	2800      	cmp	r0, #0
   81e5e:	d043      	beq.n	81ee8 <math_atan2+0x128>
   81e60:	2200      	movs	r2, #0
   81e62:	2300      	movs	r3, #0
   81e64:	4630      	mov	r0, r6
   81e66:	4639      	mov	r1, r7
   81e68:	4c31      	ldr	r4, [pc, #196]	; (81f30 <math_atan2+0x170>)
   81e6a:	47a0      	blx	r4
   81e6c:	2800      	cmp	r0, #0
   81e6e:	d040      	beq.n	81ef2 <math_atan2+0x132>
		return (PI/2);
   81e70:	a123      	add	r1, pc, #140	; (adr r1, 81f00 <math_atan2+0x140>)
   81e72:	e9d1 0100 	ldrd	r0, r1, [r1]
   81e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if (X < 0 && Y >= 0)
   81e7a:	2200      	movs	r2, #0
   81e7c:	2300      	movs	r3, #0
   81e7e:	4630      	mov	r0, r6
   81e80:	4639      	mov	r1, r7
   81e82:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 81f3c <math_atan2+0x17c>
   81e86:	47c0      	blx	r8
   81e88:	b170      	cbz	r0, 81ea8 <math_atan2+0xe8>
		return (atan(Y/X) + PI);
   81e8a:	4622      	mov	r2, r4
   81e8c:	462b      	mov	r3, r5
   81e8e:	4630      	mov	r0, r6
   81e90:	4639      	mov	r1, r7
   81e92:	4c24      	ldr	r4, [pc, #144]	; (81f24 <math_atan2+0x164>)
   81e94:	47a0      	blx	r4
   81e96:	4b24      	ldr	r3, [pc, #144]	; (81f28 <math_atan2+0x168>)
   81e98:	4798      	blx	r3
   81e9a:	a31b      	add	r3, pc, #108	; (adr r3, 81f08 <math_atan2+0x148>)
   81e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   81ea0:	4c24      	ldr	r4, [pc, #144]	; (81f34 <math_atan2+0x174>)
   81ea2:	47a0      	blx	r4
   81ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else if(X < 0 && Y < 0)
   81ea8:	2200      	movs	r2, #0
   81eaa:	2300      	movs	r3, #0
   81eac:	4630      	mov	r0, r6
   81eae:	4639      	mov	r1, r7
   81eb0:	f8df 8084 	ldr.w	r8, [pc, #132]	; 81f38 <math_atan2+0x178>
   81eb4:	47c0      	blx	r8
   81eb6:	b920      	cbnz	r0, 81ec2 <math_atan2+0x102>
	else
		return (-PI/2);
   81eb8:	a115      	add	r1, pc, #84	; (adr r1, 81f10 <math_atan2+0x150>)
   81eba:	e9d1 0100 	ldrd	r0, r1, [r1]
   81ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return (atan(Y/X) - PI);
   81ec2:	4622      	mov	r2, r4
   81ec4:	462b      	mov	r3, r5
   81ec6:	4630      	mov	r0, r6
   81ec8:	4639      	mov	r1, r7
   81eca:	4c16      	ldr	r4, [pc, #88]	; (81f24 <math_atan2+0x164>)
   81ecc:	47a0      	blx	r4
   81ece:	4b16      	ldr	r3, [pc, #88]	; (81f28 <math_atan2+0x168>)
   81ed0:	4798      	blx	r3
   81ed2:	a30d      	add	r3, pc, #52	; (adr r3, 81f08 <math_atan2+0x148>)
   81ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
   81ed8:	4c0f      	ldr	r4, [pc, #60]	; (81f18 <math_atan2+0x158>)
   81eda:	47a0      	blx	r4
   81edc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   81ee0:	2000      	movs	r0, #0
   81ee2:	2100      	movs	r1, #0
   81ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return (-PI/2);
   81ee8:	a109      	add	r1, pc, #36	; (adr r1, 81f10 <math_atan2+0x150>)
   81eea:	e9d1 0100 	ldrd	r0, r1, [r1]
   81eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81ef2:	a107      	add	r1, pc, #28	; (adr r1, 81f10 <math_atan2+0x150>)
   81ef4:	e9d1 0100 	ldrd	r0, r1, [r1]
}
   81ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   81efc:	f3af 8000 	nop.w
   81f00:	5444261e 	.word	0x5444261e
   81f04:	3ff921fb 	.word	0x3ff921fb
   81f08:	5444261e 	.word	0x5444261e
   81f0c:	400921fb 	.word	0x400921fb
   81f10:	5444261e 	.word	0x5444261e
   81f14:	bff921fb 	.word	0xbff921fb
   81f18:	00083665 	.word	0x00083665
   81f1c:	2007acd0 	.word	0x2007acd0
   81f20:	2007acd8 	.word	0x2007acd8
   81f24:	00083c21 	.word	0x00083c21
   81f28:	000830d9 	.word	0x000830d9
   81f2c:	00083e9d 	.word	0x00083e9d
   81f30:	00083eed 	.word	0x00083eed
   81f34:	00083669 	.word	0x00083669
   81f38:	00083eb1 	.word	0x00083eb1
   81f3c:	00083ed9 	.word	0x00083ed9

00081f40 <convertDistance>:
	 pwm_pin_6(speed2);
 }
 /************************************************************************/
 /* This function converts a specific distance to pulses for the motor                                                                  */
 /************************************************************************/
 uint16_t convertDistance(uint16_t cm){
   81f40:	b510      	push	{r4, lr}
	return cm/1.396;
   81f42:	4b07      	ldr	r3, [pc, #28]	; (81f60 <convertDistance+0x20>)
   81f44:	4798      	blx	r3
   81f46:	a304      	add	r3, pc, #16	; (adr r3, 81f58 <convertDistance+0x18>)
   81f48:	e9d3 2300 	ldrd	r2, r3, [r3]
   81f4c:	4c05      	ldr	r4, [pc, #20]	; (81f64 <convertDistance+0x24>)
   81f4e:	47a0      	blx	r4
   81f50:	4b05      	ldr	r3, [pc, #20]	; (81f68 <convertDistance+0x28>)
   81f52:	4798      	blx	r3
 }
   81f54:	b280      	uxth	r0, r0
   81f56:	bd10      	pop	{r4, pc}
   81f58:	189374bc 	.word	0x189374bc
   81f5c:	3ff65604 	.word	0x3ff65604
   81f60:	00083901 	.word	0x00083901
   81f64:	00083c21 	.word	0x00083c21
   81f68:	00083f7d 	.word	0x00083f7d

00081f6c <drive>:
 
 /************************************************************************/
 /* This function gives power to both of the motors and keeps them
 /* moving at he same speed
 /************************************************************************/
 void drive(uint16_t U0v, uint16_t U0h){
   81f6c:	b570      	push	{r4, r5, r6, lr}
   81f6e:	4604      	mov	r4, r0
   81f70:	460d      	mov	r5, r1
	 e = (get_counterA() - get_counterB());
   81f72:	4b0e      	ldr	r3, [pc, #56]	; (81fac <drive+0x40>)
   81f74:	4798      	blx	r3
   81f76:	4606      	mov	r6, r0
   81f78:	4b0d      	ldr	r3, [pc, #52]	; (81fb0 <drive+0x44>)
   81f7a:	4798      	blx	r3
   81f7c:	1a30      	subs	r0, r6, r0
   81f7e:	b280      	uxth	r0, r0
   81f80:	4b0c      	ldr	r3, [pc, #48]	; (81fb4 <drive+0x48>)
   81f82:	8018      	strh	r0, [r3, #0]
	 u = (k*e);
   81f84:	4b0c      	ldr	r3, [pc, #48]	; (81fb8 <drive+0x4c>)
   81f86:	7819      	ldrb	r1, [r3, #0]
   81f88:	fb01 f100 	mul.w	r1, r1, r0
   81f8c:	b289      	uxth	r1, r1
   81f8e:	4b0b      	ldr	r3, [pc, #44]	; (81fbc <drive+0x50>)
   81f90:	8019      	strh	r1, [r3, #0]
	 
	 Uv = U0v - u;
   81f92:	1a60      	subs	r0, r4, r1
   81f94:	b280      	uxth	r0, r0
   81f96:	4b0a      	ldr	r3, [pc, #40]	; (81fc0 <drive+0x54>)
   81f98:	8018      	strh	r0, [r3, #0]
	 Uh = u + U0h;
   81f9a:	4c0a      	ldr	r4, [pc, #40]	; (81fc4 <drive+0x58>)
   81f9c:	4429      	add	r1, r5
   81f9e:	8021      	strh	r1, [r4, #0]
	 pwm_pin_7(speed1);
   81fa0:	4b09      	ldr	r3, [pc, #36]	; (81fc8 <drive+0x5c>)
   81fa2:	4798      	blx	r3
	 pwm_pin_6(speed2);
   81fa4:	8820      	ldrh	r0, [r4, #0]
   81fa6:	4b09      	ldr	r3, [pc, #36]	; (81fcc <drive+0x60>)
   81fa8:	4798      	blx	r3
   81faa:	bd70      	pop	{r4, r5, r6, pc}
   81fac:	00081c55 	.word	0x00081c55
   81fb0:	00081c61 	.word	0x00081c61
   81fb4:	2007ace4 	.word	0x2007ace4
   81fb8:	2007014c 	.word	0x2007014c
   81fbc:	2007ace6 	.word	0x2007ace6
   81fc0:	2007ace2 	.word	0x2007ace2
   81fc4:	2007ace0 	.word	0x2007ace0
   81fc8:	00081bf9 	.word	0x00081bf9
   81fcc:	00081bcd 	.word	0x00081bcd

00081fd0 <driveVinkel>:
 
 /************************************************************************/
 /* This function rotates the robot and keeps it in its place, one motor */
 /* rotates forward the other motor rotates backwards                    */
 /************************************************************************/
 void driveVinkel(int riktning){
   81fd0:	b508      	push	{r3, lr}
	 if(riktning == 1){
   81fd2:	2801      	cmp	r0, #1
   81fd4:	d00c      	beq.n	81ff0 <driveVinkel+0x20>
		 drive(1400, 1575);
	 }else if (riktning == -1){
   81fd6:	f1b0 3fff 	cmp.w	r0, #4294967295
		 drive(1575, 1400);
   81fda:	bf07      	ittee	eq
   81fdc:	f44f 61af 	moveq.w	r1, #1400	; 0x578
   81fe0:	f240 6027 	movweq	r0, #1575	; 0x627
	 }else{
		 drive(1500, 1500);
   81fe4:	f240 51dc 	movwne	r1, #1500	; 0x5dc
   81fe8:	4608      	movne	r0, r1
   81fea:	4b05      	ldr	r3, [pc, #20]	; (82000 <driveVinkel+0x30>)
   81fec:	4798      	blx	r3
   81fee:	bd08      	pop	{r3, pc}
		 drive(1400, 1575);
   81ff0:	f240 6127 	movw	r1, #1575	; 0x627
   81ff4:	f44f 60af 	mov.w	r0, #1400	; 0x578
   81ff8:	4b01      	ldr	r3, [pc, #4]	; (82000 <driveVinkel+0x30>)
   81ffa:	4798      	blx	r3
   81ffc:	bd08      	pop	{r3, pc}
   81ffe:	bf00      	nop
   82000:	00081f6d 	.word	0x00081f6d

00082004 <forDelay>:
#include "drivers/TWI.h"
#include "main_task.h"

#define MOTOR_TASK_PERIODICITY 4 /* The number on the macro will decide the periodicity of the task */

static void forDelay(){
   82004:	b570      	push	{r4, r5, r6, lr}
   82006:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	for(int i = 0;i < 1000;i++){
		drive(1500,1500);
   8200a:	f240 56dc 	movw	r6, #1500	; 0x5dc
   8200e:	4d03      	ldr	r5, [pc, #12]	; (8201c <forDelay+0x18>)
   82010:	4631      	mov	r1, r6
   82012:	4630      	mov	r0, r6
   82014:	47a8      	blx	r5
	for(int i = 0;i < 1000;i++){
   82016:	3c01      	subs	r4, #1
   82018:	d1fa      	bne.n	82010 <forDelay+0xc>
	}
}
   8201a:	bd70      	pop	{r4, r5, r6, pc}
   8201c:	00081f6d 	.word	0x00081f6d

00082020 <motor_task>:

void motor_task(void *pvParameters) {
   82020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82024:	b086      	sub	sp, #24
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = MOTOR_TASK_PERIODICITY;
 	int16_t angle = 0;
 	uint16_t distance = 0;
	uint8_t flagg = 0;
	uint8_t flaggu = 0;
   82026:	f04f 0800 	mov.w	r8, #0
	
	struct motor_task_instruction current_instruction;
	
	while(1){
		/* Get current tick count */
		xLastWakeTime = xTaskGetTickCount();
   8202a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 82150 <motor_task+0x130>
		
		while(!xQueuePeek(motor_task_instruction_handle, &current_instruction, 10));
   8202e:	4c3a      	ldr	r4, [pc, #232]	; (82118 <motor_task+0xf8>)
   82030:	e021      	b.n	82076 <motor_task+0x56>
		}
		if(get_counterA() < angle + distance && get_counterB() < angle + distance){
			
			
			if(get_counterA() < (angle) && get_counterB() < (angle) && flagg == 0){
				driveVinkel(1);
   82032:	2001      	movs	r0, #1
   82034:	4b39      	ldr	r3, [pc, #228]	; (8211c <motor_task+0xfc>)
   82036:	4798      	blx	r3
   82038:	e019      	b.n	8206e <motor_task+0x4e>
			}else if(get_counterA() < (angle) && get_counterB() < (angle) && flagg == 3){
   8203a:	4b39      	ldr	r3, [pc, #228]	; (82120 <motor_task+0x100>)
   8203c:	4798      	blx	r3
   8203e:	4287      	cmp	r7, r0
   82040:	dd57      	ble.n	820f2 <motor_task+0xd2>
   82042:	f1ba 0f03 	cmp.w	sl, #3
   82046:	d154      	bne.n	820f2 <motor_task+0xd2>
				driveVinkel(-1);
   82048:	f04f 30ff 	mov.w	r0, #4294967295
   8204c:	4b33      	ldr	r3, [pc, #204]	; (8211c <motor_task+0xfc>)
   8204e:	4798      	blx	r3
   82050:	e00d      	b.n	8206e <motor_task+0x4e>
				}
				drive(1793,1793);
			}
		}
		else{
			forDelay();
   82052:	4b34      	ldr	r3, [pc, #208]	; (82124 <motor_task+0x104>)
   82054:	4798      	blx	r3
			flagg = 1;
			flaggu = 0;
				
			/* Finished driving the distance, empty queue for new instruction */
			xQueueReceive(motor_task_instruction_handle, &current_instruction, 10);
   82056:	2300      	movs	r3, #0
   82058:	220a      	movs	r2, #10
   8205a:	4669      	mov	r1, sp
   8205c:	6820      	ldr	r0, [r4, #0]
   8205e:	4d32      	ldr	r5, [pc, #200]	; (82128 <motor_task+0x108>)
   82060:	47a8      	blx	r5
			resetCounterA();
   82062:	4b32      	ldr	r3, [pc, #200]	; (8212c <motor_task+0x10c>)
   82064:	4798      	blx	r3
			resetCounterB();
   82066:	4b32      	ldr	r3, [pc, #200]	; (82130 <motor_task+0x110>)
   82068:	4798      	blx	r3
			flaggu = 0;
   8206a:	f04f 0800 	mov.w	r8, #0
		}
	
		/* The task is now done, go to sleep until it's time again */
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   8206e:	2104      	movs	r1, #4
   82070:	a805      	add	r0, sp, #20
   82072:	4b30      	ldr	r3, [pc, #192]	; (82134 <motor_task+0x114>)
   82074:	4798      	blx	r3
		xLastWakeTime = xTaskGetTickCount();
   82076:	47c8      	blx	r9
   82078:	9005      	str	r0, [sp, #20]
		while(!xQueuePeek(motor_task_instruction_handle, &current_instruction, 10));
   8207a:	4d2b      	ldr	r5, [pc, #172]	; (82128 <motor_task+0x108>)
   8207c:	2301      	movs	r3, #1
   8207e:	220a      	movs	r2, #10
   82080:	4669      	mov	r1, sp
   82082:	6820      	ldr	r0, [r4, #0]
   82084:	47a8      	blx	r5
   82086:	2800      	cmp	r0, #0
   82088:	d0f8      	beq.n	8207c <motor_task+0x5c>
		angle = (int16_t)current_instruction.angle/3.809;
   8208a:	4d2b      	ldr	r5, [pc, #172]	; (82138 <motor_task+0x118>)
   8208c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   82090:	47a8      	blx	r5
   82092:	b200      	sxth	r0, r0
   82094:	4b29      	ldr	r3, [pc, #164]	; (8213c <motor_task+0x11c>)
   82096:	4798      	blx	r3
   82098:	a31d      	add	r3, pc, #116	; (adr r3, 82110 <motor_task+0xf0>)
   8209a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8209e:	4e28      	ldr	r6, [pc, #160]	; (82140 <motor_task+0x120>)
   820a0:	47b0      	blx	r6
   820a2:	47a8      	blx	r5
   820a4:	b205      	sxth	r5, r0
		distance = convertDistance(current_instruction.distance);
   820a6:	f8bd 0000 	ldrh.w	r0, [sp]
   820aa:	4b26      	ldr	r3, [pc, #152]	; (82144 <motor_task+0x124>)
   820ac:	4798      	blx	r3
   820ae:	4606      	mov	r6, r0
		if(angle<0){
   820b0:	2d00      	cmp	r5, #0
			angle = angle * -1;
   820b2:	bfbd      	ittte	lt
   820b4:	426d      	neglt	r5, r5
   820b6:	b22d      	sxthlt	r5, r5
			flagg = 3;
   820b8:	f04f 0a03 	movlt.w	sl, #3
			flagg = 0;
   820bc:	f04f 0a00 	movge.w	sl, #0
		if(get_counterA() < angle + distance && get_counterB() < angle + distance){
   820c0:	4b21      	ldr	r3, [pc, #132]	; (82148 <motor_task+0x128>)
   820c2:	4798      	blx	r3
   820c4:	462f      	mov	r7, r5
   820c6:	4435      	add	r5, r6
   820c8:	42a8      	cmp	r0, r5
   820ca:	dac2      	bge.n	82052 <motor_task+0x32>
   820cc:	4b14      	ldr	r3, [pc, #80]	; (82120 <motor_task+0x100>)
   820ce:	4798      	blx	r3
   820d0:	4285      	cmp	r5, r0
   820d2:	ddbe      	ble.n	82052 <motor_task+0x32>
			if(get_counterA() < (angle) && get_counterB() < (angle) && flagg == 0){
   820d4:	4b1c      	ldr	r3, [pc, #112]	; (82148 <motor_task+0x128>)
   820d6:	4798      	blx	r3
   820d8:	4287      	cmp	r7, r0
   820da:	dd06      	ble.n	820ea <motor_task+0xca>
   820dc:	4b10      	ldr	r3, [pc, #64]	; (82120 <motor_task+0x100>)
   820de:	4798      	blx	r3
   820e0:	4287      	cmp	r7, r0
   820e2:	dd02      	ble.n	820ea <motor_task+0xca>
   820e4:	f1ba 0f00 	cmp.w	sl, #0
   820e8:	d0a3      	beq.n	82032 <motor_task+0x12>
			}else if(get_counterA() < (angle) && get_counterB() < (angle) && flagg == 3){
   820ea:	4b17      	ldr	r3, [pc, #92]	; (82148 <motor_task+0x128>)
   820ec:	4798      	blx	r3
   820ee:	4287      	cmp	r7, r0
   820f0:	dca3      	bgt.n	8203a <motor_task+0x1a>
				if(flaggu != 1){
   820f2:	f1b8 0f00 	cmp.w	r8, #0
   820f6:	d101      	bne.n	820fc <motor_task+0xdc>
					forDelay();
   820f8:	4b0a      	ldr	r3, [pc, #40]	; (82124 <motor_task+0x104>)
   820fa:	4798      	blx	r3
				drive(1793,1793);
   820fc:	f240 7101 	movw	r1, #1793	; 0x701
   82100:	4608      	mov	r0, r1
   82102:	4b12      	ldr	r3, [pc, #72]	; (8214c <motor_task+0x12c>)
   82104:	4798      	blx	r3
   82106:	f04f 0801 	mov.w	r8, #1
   8210a:	e7b0      	b.n	8206e <motor_task+0x4e>
   8210c:	f3af 8000 	nop.w
   82110:	fdf3b646 	.word	0xfdf3b646
   82114:	400e78d4 	.word	0x400e78d4
   82118:	2007ae94 	.word	0x2007ae94
   8211c:	00081fd1 	.word	0x00081fd1
   82120:	00081c61 	.word	0x00081c61
   82124:	00082005 	.word	0x00082005
   82128:	00080c09 	.word	0x00080c09
   8212c:	00081c6d 	.word	0x00081c6d
   82130:	00081c79 	.word	0x00081c79
   82134:	000812dd 	.word	0x000812dd
   82138:	00083f2d 	.word	0x00083f2d
   8213c:	00083901 	.word	0x00083901
   82140:	00083c21 	.word	0x00083c21
   82144:	00081f41 	.word	0x00081f41
   82148:	00081c55 	.word	0x00081c55
   8214c:	00081f6d 	.word	0x00081f6d
   82150:	00081095 	.word	0x00081095

00082154 <main_task>:
	{ 120, 50 },
	{ 140, 150 },
	{ 280, 260 },
};

void main_task(void *pvParameters) {
   82154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82158:	b08f      	sub	sp, #60	; 0x3c
	uint16_t distance, minimum_distance_to_object; /* In cm */
	double alpha, beta, correction_angle, minimum_angle = 1; /* In degrees */
	uint8_t mock_pos_index = 0;
	
	/* Read first time package and set static coordinates */
	update_positions();
   8215a:	4b88      	ldr	r3, [pc, #544]	; (8237c <main_task+0x228>)
   8215c:	4798      	blx	r3
	current_pos = get_pos();
   8215e:	4b88      	ldr	r3, [pc, #544]	; (82380 <main_task+0x22c>)
   82160:	4798      	blx	r3
   82162:	4b88      	ldr	r3, [pc, #544]	; (82384 <main_task+0x230>)
   82164:	6018      	str	r0, [r3, #0]
	box = get_box();
   82166:	4b88      	ldr	r3, [pc, #544]	; (82388 <main_task+0x234>)
   82168:	4798      	blx	r3
	
	if (ioport_get_pin_level(pin_mapper(SWITCH_CURIE_NOETHER_PIN))) {
   8216a:	2005      	movs	r0, #5
   8216c:	4b87      	ldr	r3, [pc, #540]	; (8238c <main_task+0x238>)
   8216e:	4798      	blx	r3
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   82170:	0943      	lsrs	r3, r0, #5
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82172:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82176:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8217a:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8217c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
   8217e:	f000 001f 	and.w	r0, r0, #31
   82182:	2301      	movs	r3, #1
   82184:	fa03 f000 	lsl.w	r0, r3, r0
   82188:	4210      	tst	r0, r2
   8218a:	d050      	beq.n	8222e <main_task+0xda>
		/* Marie Curie */
		object = get_cube();
   8218c:	4b80      	ldr	r3, [pc, #512]	; (82390 <main_task+0x23c>)
   8218e:	4798      	blx	r3
   82190:	4b80      	ldr	r3, [pc, #512]	; (82394 <main_task+0x240>)
   82192:	6018      	str	r0, [r3, #0]
		minimum_distance_to_object = 30;
		printf("Curie");
   82194:	4880      	ldr	r0, [pc, #512]	; (82398 <main_task+0x244>)
   82196:	4b81      	ldr	r3, [pc, #516]	; (8239c <main_task+0x248>)
   82198:	4798      	blx	r3
		object = get_ball();
		minimum_distance_to_object = 30;
		printf("Noether");
	}
		
	update_positions();
   8219a:	4b78      	ldr	r3, [pc, #480]	; (8237c <main_task+0x228>)
   8219c:	4798      	blx	r3
	current_pos = get_pos();
   8219e:	4b78      	ldr	r3, [pc, #480]	; (82380 <main_task+0x22c>)
   821a0:	4798      	blx	r3
   821a2:	4c78      	ldr	r4, [pc, #480]	; (82384 <main_task+0x230>)
   821a4:	6020      	str	r0, [r4, #0]

	/* Drive only half the distance */
	distance = get_euclid_distance(object.x, object.y, current_pos.x, current_pos.y) / 2;
   821a6:	4e7b      	ldr	r6, [pc, #492]	; (82394 <main_task+0x240>)
   821a8:	0c03      	lsrs	r3, r0, #16
   821aa:	b282      	uxth	r2, r0
   821ac:	8871      	ldrh	r1, [r6, #2]
   821ae:	8830      	ldrh	r0, [r6, #0]
   821b0:	4d7b      	ldr	r5, [pc, #492]	; (823a0 <main_task+0x24c>)
   821b2:	47a8      	blx	r5
   821b4:	f3c0 0a4f 	ubfx	sl, r0, #1, #16
	alpha = math_get_angle_deg(math_atan2(object.x, object.y, current_pos.x, current_pos.y));
   821b8:	4d7a      	ldr	r5, [pc, #488]	; (823a4 <main_task+0x250>)
   821ba:	8870      	ldrh	r0, [r6, #2]
   821bc:	47a8      	blx	r5
   821be:	4680      	mov	r8, r0
   821c0:	4689      	mov	r9, r1
   821c2:	8830      	ldrh	r0, [r6, #0]
   821c4:	47a8      	blx	r5
   821c6:	4606      	mov	r6, r0
   821c8:	460f      	mov	r7, r1
   821ca:	8860      	ldrh	r0, [r4, #2]
   821cc:	47a8      	blx	r5
   821ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
   821d2:	8820      	ldrh	r0, [r4, #0]
   821d4:	47a8      	blx	r5
   821d6:	e9cd 0100 	strd	r0, r1, [sp]
   821da:	4642      	mov	r2, r8
   821dc:	464b      	mov	r3, r9
   821de:	4630      	mov	r0, r6
   821e0:	4639      	mov	r1, r7
   821e2:	4d71      	ldr	r5, [pc, #452]	; (823a8 <main_task+0x254>)
   821e4:	47a8      	blx	r5
   821e6:	4b71      	ldr	r3, [pc, #452]	; (823ac <main_task+0x258>)
   821e8:	4798      	blx	r3
   821ea:	4606      	mov	r6, r0
   821ec:	460f      	mov	r7, r1
		
	struct motor_task_instruction inst = {
   821ee:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
   821f2:	e9cd 670c 	strd	r6, r7, [sp, #48]	; 0x30
		.distance = distance,
		.angle = alpha
	};
		
	xQueueSend(motor_task_instruction_handle, &inst, 10);
   821f6:	2300      	movs	r3, #0
   821f8:	220a      	movs	r2, #10
   821fa:	a90a      	add	r1, sp, #40	; 0x28
   821fc:	486c      	ldr	r0, [pc, #432]	; (823b0 <main_task+0x25c>)
   821fe:	6800      	ldr	r0, [r0, #0]
   82200:	4d6c      	ldr	r5, [pc, #432]	; (823b4 <main_task+0x260>)
   82202:	47a8      	blx	r5
	earlier_pos = current_pos;
   82204:	6822      	ldr	r2, [r4, #0]
   82206:	4b6c      	ldr	r3, [pc, #432]	; (823b8 <main_task+0x264>)
   82208:	601a      	str	r2, [r3, #0]
	
	printf("First run, angle: %d, d: %d", (int16_t)alpha, distance);
   8220a:	4630      	mov	r0, r6
   8220c:	4639      	mov	r1, r7
   8220e:	4b6b      	ldr	r3, [pc, #428]	; (823bc <main_task+0x268>)
   82210:	4798      	blx	r3
   82212:	4652      	mov	r2, sl
   82214:	b201      	sxth	r1, r0
   82216:	486a      	ldr	r0, [pc, #424]	; (823c0 <main_task+0x26c>)
   82218:	4b60      	ldr	r3, [pc, #384]	; (8239c <main_task+0x248>)
   8221a:	4798      	blx	r3

	while(distance > minimum_distance_to_object) {
   8221c:	f1ba 0f1e 	cmp.w	sl, #30
   82220:	f240 80aa 	bls.w	82378 <main_task+0x224>
   82224:	f04f 0800 	mov.w	r8, #0
		/* Wait for motor task to complete */
		while(xQueuePeek(motor_task_instruction_handle, &inst, 2));
   82228:	f8df a184 	ldr.w	sl, [pc, #388]	; 823b0 <main_task+0x25c>
   8222c:	e010      	b.n	82250 <main_task+0xfc>
		object = get_ball();
   8222e:	4b65      	ldr	r3, [pc, #404]	; (823c4 <main_task+0x270>)
   82230:	4798      	blx	r3
   82232:	4b58      	ldr	r3, [pc, #352]	; (82394 <main_task+0x240>)
   82234:	6018      	str	r0, [r3, #0]
		printf("Noether");
   82236:	4864      	ldr	r0, [pc, #400]	; (823c8 <main_task+0x274>)
   82238:	4b58      	ldr	r3, [pc, #352]	; (8239c <main_task+0x248>)
   8223a:	4798      	blx	r3
   8223c:	e7ad      	b.n	8219a <main_task+0x46>
		
		printf("correction: %d, d: %d\n", (int16_t)correction_angle, distance);
		printf("Object: (%d, %d)\n", object.x, object.y);

		if (abs(correction_angle) < minimum_angle){
			correction_angle = 0;
   8223e:	2300      	movs	r3, #0
   82240:	2400      	movs	r4, #0
   82242:	e9cd 3404 	strd	r3, r4, [sp, #16]
   82246:	e07e      	b.n	82346 <main_task+0x1f2>
	while(distance > minimum_distance_to_object) {
   82248:	f1bb 0f1e 	cmp.w	fp, #30
   8224c:	f240 8094 	bls.w	82378 <main_task+0x224>
		while(xQueuePeek(motor_task_instruction_handle, &inst, 2));
   82250:	4c5e      	ldr	r4, [pc, #376]	; (823cc <main_task+0x278>)
   82252:	2301      	movs	r3, #1
   82254:	2202      	movs	r2, #2
   82256:	a90a      	add	r1, sp, #40	; 0x28
   82258:	f8da 0000 	ldr.w	r0, [sl]
   8225c:	47a0      	blx	r4
   8225e:	2800      	cmp	r0, #0
   82260:	d1f7      	bne.n	82252 <main_task+0xfe>
		current_pos = mock_positions[mock_pos_index];
   82262:	4d48      	ldr	r5, [pc, #288]	; (82384 <main_task+0x230>)
   82264:	4b5a      	ldr	r3, [pc, #360]	; (823d0 <main_task+0x27c>)
   82266:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
   8226a:	6029      	str	r1, [r5, #0]
		printf("Current pos: (%d, %d)\n", current_pos.x, current_pos.y);
   8226c:	0c0a      	lsrs	r2, r1, #16
   8226e:	b289      	uxth	r1, r1
   82270:	4858      	ldr	r0, [pc, #352]	; (823d4 <main_task+0x280>)
   82272:	4b4a      	ldr	r3, [pc, #296]	; (8239c <main_task+0x248>)
   82274:	4798      	blx	r3
		printf("Earlier pos: (%d, %d)\n", earlier_pos.x, earlier_pos.y);
   82276:	f8df 9140 	ldr.w	r9, [pc, #320]	; 823b8 <main_task+0x264>
   8227a:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   8227e:	f8b9 1000 	ldrh.w	r1, [r9]
   82282:	4855      	ldr	r0, [pc, #340]	; (823d8 <main_task+0x284>)
   82284:	4b45      	ldr	r3, [pc, #276]	; (8239c <main_task+0x248>)
   82286:	4798      	blx	r3
		distance = get_euclid_distance(object.x, object.y, current_pos.x, current_pos.y) / 2;
   82288:	4e42      	ldr	r6, [pc, #264]	; (82394 <main_task+0x240>)
   8228a:	886b      	ldrh	r3, [r5, #2]
   8228c:	882a      	ldrh	r2, [r5, #0]
   8228e:	8871      	ldrh	r1, [r6, #2]
   82290:	8830      	ldrh	r0, [r6, #0]
   82292:	4c43      	ldr	r4, [pc, #268]	; (823a0 <main_task+0x24c>)
   82294:	47a0      	blx	r4
   82296:	f3c0 0b4f 	ubfx	fp, r0, #1, #16
		beta = math_get_angle_deg(math_atan2(current_pos.x, current_pos.y, earlier_pos.x, earlier_pos.y));
   8229a:	4c42      	ldr	r4, [pc, #264]	; (823a4 <main_task+0x250>)
   8229c:	8868      	ldrh	r0, [r5, #2]
   8229e:	47a0      	blx	r4
   822a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
   822a4:	8828      	ldrh	r0, [r5, #0]
   822a6:	47a0      	blx	r4
   822a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   822ac:	f8b9 0002 	ldrh.w	r0, [r9, #2]
   822b0:	47a0      	blx	r4
   822b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   822b6:	f8b9 0000 	ldrh.w	r0, [r9]
   822ba:	47a0      	blx	r4
   822bc:	e9cd 0100 	strd	r0, r1, [sp]
   822c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   822c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
   822c8:	4f37      	ldr	r7, [pc, #220]	; (823a8 <main_task+0x254>)
   822ca:	47b8      	blx	r7
   822cc:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 823ac <main_task+0x258>
   822d0:	47c8      	blx	r9
   822d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
		alpha = math_get_angle_deg(math_atan2(object.x, object.y, current_pos.x, current_pos.y));
   822d6:	8870      	ldrh	r0, [r6, #2]
   822d8:	47a0      	blx	r4
   822da:	e9cd 0106 	strd	r0, r1, [sp, #24]
   822de:	8830      	ldrh	r0, [r6, #0]
   822e0:	47a0      	blx	r4
   822e2:	e9cd 0108 	strd	r0, r1, [sp, #32]
   822e6:	8868      	ldrh	r0, [r5, #2]
   822e8:	47a0      	blx	r4
   822ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
   822ee:	8828      	ldrh	r0, [r5, #0]
   822f0:	47a0      	blx	r4
   822f2:	e9cd 0100 	strd	r0, r1, [sp]
   822f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   822fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   822fe:	47b8      	blx	r7
   82300:	47c8      	blx	r9
		correction_angle = beta - alpha;
   82302:	4602      	mov	r2, r0
   82304:	460b      	mov	r3, r1
   82306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   8230a:	4c34      	ldr	r4, [pc, #208]	; (823dc <main_task+0x288>)
   8230c:	47a0      	blx	r4
   8230e:	e9cd 0104 	strd	r0, r1, [sp, #16]
		printf("correction: %d, d: %d\n", (int16_t)correction_angle, distance);
   82312:	4d2a      	ldr	r5, [pc, #168]	; (823bc <main_task+0x268>)
   82314:	47a8      	blx	r5
   82316:	4604      	mov	r4, r0
   82318:	465a      	mov	r2, fp
   8231a:	b201      	sxth	r1, r0
   8231c:	4830      	ldr	r0, [pc, #192]	; (823e0 <main_task+0x28c>)
   8231e:	4b1f      	ldr	r3, [pc, #124]	; (8239c <main_task+0x248>)
   82320:	4798      	blx	r3
		printf("Object: (%d, %d)\n", object.x, object.y);
   82322:	8872      	ldrh	r2, [r6, #2]
   82324:	8831      	ldrh	r1, [r6, #0]
   82326:	482f      	ldr	r0, [pc, #188]	; (823e4 <main_task+0x290>)
   82328:	4b1c      	ldr	r3, [pc, #112]	; (8239c <main_task+0x248>)
   8232a:	4798      	blx	r3
		if (abs(correction_angle) < minimum_angle){
   8232c:	ea84 70e4 	eor.w	r0, r4, r4, asr #31
   82330:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
   82334:	4b2c      	ldr	r3, [pc, #176]	; (823e8 <main_task+0x294>)
   82336:	4798      	blx	r3
   82338:	2200      	movs	r2, #0
   8233a:	4b2c      	ldr	r3, [pc, #176]	; (823ec <main_task+0x298>)
   8233c:	4c2c      	ldr	r4, [pc, #176]	; (823f0 <main_task+0x29c>)
   8233e:	47a0      	blx	r4
   82340:	2800      	cmp	r0, #0
   82342:	f47f af7c 	bne.w	8223e <main_task+0xea>
		}
			
		inst.distance = distance;
   82346:	f8ad b028 	strh.w	fp, [sp, #40]	; 0x28
		inst.angle = correction_angle;
   8234a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
   8234e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30

		if (xQueueSend(motor_task_instruction_handle, &inst, 5)) {
   82352:	2300      	movs	r3, #0
   82354:	2205      	movs	r2, #5
   82356:	a90a      	add	r1, sp, #40	; 0x28
   82358:	f8da 0000 	ldr.w	r0, [sl]
   8235c:	4c15      	ldr	r4, [pc, #84]	; (823b4 <main_task+0x260>)
   8235e:	47a0      	blx	r4
   82360:	2800      	cmp	r0, #0
   82362:	f43f af71 	beq.w	82248 <main_task+0xf4>
			/* Instruction successfully sent to motor task */
			earlier_pos = current_pos;
   82366:	4b07      	ldr	r3, [pc, #28]	; (82384 <main_task+0x230>)
   82368:	681a      	ldr	r2, [r3, #0]
   8236a:	4b13      	ldr	r3, [pc, #76]	; (823b8 <main_task+0x264>)
   8236c:	601a      	str	r2, [r3, #0]
			mock_pos_index++;
   8236e:	f108 0801 	add.w	r8, r8, #1
   82372:	fa5f f888 	uxtb.w	r8, r8
   82376:	e767      	b.n	82248 <main_task+0xf4>
   82378:	e7fe      	b.n	82378 <main_task+0x224>
   8237a:	bf00      	nop
   8237c:	000802dd 	.word	0x000802dd
   82380:	000802b1 	.word	0x000802b1
   82384:	2007ace8 	.word	0x2007ace8
   82388:	000802b9 	.word	0x000802b9
   8238c:	000823f5 	.word	0x000823f5
   82390:	000802d1 	.word	0x000802d1
   82394:	2007acf0 	.word	0x2007acf0
   82398:	00086ef4 	.word	0x00086ef4
   8239c:	00084019 	.word	0x00084019
   823a0:	00081d45 	.word	0x00081d45
   823a4:	000838e1 	.word	0x000838e1
   823a8:	00081dc1 	.word	0x00081dc1
   823ac:	00081d29 	.word	0x00081d29
   823b0:	2007ae94 	.word	0x2007ae94
   823b4:	00080a51 	.word	0x00080a51
   823b8:	2007acec 	.word	0x2007acec
   823bc:	00083f2d 	.word	0x00083f2d
   823c0:	00086f04 	.word	0x00086f04
   823c4:	000802c5 	.word	0x000802c5
   823c8:	00086efc 	.word	0x00086efc
   823cc:	00080c09 	.word	0x00080c09
   823d0:	20070150 	.word	0x20070150
   823d4:	00086f20 	.word	0x00086f20
   823d8:	00086f38 	.word	0x00086f38
   823dc:	00083665 	.word	0x00083665
   823e0:	00086f50 	.word	0x00086f50
   823e4:	00086f68 	.word	0x00086f68
   823e8:	00083901 	.word	0x00083901
   823ec:	3ff00000 	.word	0x3ff00000
   823f0:	00083eb1 	.word	0x00083eb1

000823f4 <pin_mapper>:
					PIO_PA22_IDX,PIO_PA6_IDX,PIO_PA4_IDX,PIO_PA3_IDX,PIO_PA2_IDX,PIO_PB17_IDX,
					PIO_PB18_IDX,PIO_PB19_IDX,PIO_PB20_IDX};
					
uint8_t pin_mapper(uint8_t pin){
	return pin_table[pin];
}
   823f4:	4b01      	ldr	r3, [pc, #4]	; (823fc <pin_mapper+0x8>)
   823f6:	5c18      	ldrb	r0, [r3, r0]
   823f8:	4770      	bx	lr
   823fa:	bf00      	nop
   823fc:	20070160 	.word	0x20070160

00082400 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82400:	6943      	ldr	r3, [r0, #20]
   82402:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82406:	bf1d      	ittte	ne
   82408:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8240c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8240e:	2000      	movne	r0, #0
		return 1;
   82410:	2001      	moveq	r0, #1
}
   82412:	4770      	bx	lr

00082414 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   82414:	6943      	ldr	r3, [r0, #20]
   82416:	f013 0f01 	tst.w	r3, #1
   8241a:	d005      	beq.n	82428 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8241c:	6983      	ldr	r3, [r0, #24]
   8241e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   82422:	600b      	str	r3, [r1, #0]

	return 0;
   82424:	2000      	movs	r0, #0
   82426:	4770      	bx	lr
		return 1;
   82428:	2001      	movs	r0, #1
}
   8242a:	4770      	bx	lr

0008242c <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   8242c:	b500      	push	{lr}
   8242e:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   82430:	2201      	movs	r2, #1
   82432:	f10d 0107 	add.w	r1, sp, #7
   82436:	4810      	ldr	r0, [pc, #64]	; (82478 <USART0_Handler+0x4c>)
   82438:	4b10      	ldr	r3, [pc, #64]	; (8247c <USART0_Handler+0x50>)
   8243a:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   8243c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8243e:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   82442:	2200      	movs	r2, #0
   82444:	4b0e      	ldr	r3, [pc, #56]	; (82480 <USART0_Handler+0x54>)
   82446:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   82448:	4b0e      	ldr	r3, [pc, #56]	; (82484 <USART0_Handler+0x58>)
   8244a:	781b      	ldrb	r3, [r3, #0]
   8244c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   82450:	4a0d      	ldr	r2, [pc, #52]	; (82488 <USART0_Handler+0x5c>)
   82452:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   82454:	2b9b      	cmp	r3, #155	; 0x9b
   82456:	d00b      	beq.n	82470 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   82458:	3301      	adds	r3, #1
   8245a:	4a0a      	ldr	r2, [pc, #40]	; (82484 <USART0_Handler+0x58>)
   8245c:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8245e:	2201      	movs	r2, #1
   82460:	4b07      	ldr	r3, [pc, #28]	; (82480 <USART0_Handler+0x54>)
   82462:	701a      	strb	r2, [r3, #0]
   82464:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   82468:	b662      	cpsie	i
}
   8246a:	b003      	add	sp, #12
   8246c:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   82470:	2200      	movs	r2, #0
   82472:	4b04      	ldr	r3, [pc, #16]	; (82484 <USART0_Handler+0x58>)
   82474:	701a      	strb	r2, [r3, #0]
   82476:	e7f2      	b.n	8245e <USART0_Handler+0x32>
   82478:	40098000 	.word	0x40098000
   8247c:	000826b9 	.word	0x000826b9
   82480:	200701a2 	.word	0x200701a2
   82484:	2007ad90 	.word	0x2007ad90
   82488:	2007acf4 	.word	0x2007acf4

0008248c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8248c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8248e:	b083      	sub	sp, #12
   82490:	4604      	mov	r4, r0
   82492:	460d      	mov	r5, r1
	uint32_t val = 0;
   82494:	2300      	movs	r3, #0
   82496:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82498:	4b20      	ldr	r3, [pc, #128]	; (8251c <usart_serial_getchar+0x90>)
   8249a:	4298      	cmp	r0, r3
   8249c:	d00d      	beq.n	824ba <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8249e:	4b20      	ldr	r3, [pc, #128]	; (82520 <usart_serial_getchar+0x94>)
   824a0:	4298      	cmp	r0, r3
   824a2:	d012      	beq.n	824ca <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   824a4:	4b1f      	ldr	r3, [pc, #124]	; (82524 <usart_serial_getchar+0x98>)
   824a6:	4298      	cmp	r0, r3
   824a8:	d019      	beq.n	824de <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   824aa:	4b1f      	ldr	r3, [pc, #124]	; (82528 <usart_serial_getchar+0x9c>)
   824ac:	429c      	cmp	r4, r3
   824ae:	d020      	beq.n	824f2 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   824b0:	4b1e      	ldr	r3, [pc, #120]	; (8252c <usart_serial_getchar+0xa0>)
   824b2:	429c      	cmp	r4, r3
   824b4:	d027      	beq.n	82506 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   824b6:	b003      	add	sp, #12
   824b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   824ba:	461f      	mov	r7, r3
   824bc:	4e1c      	ldr	r6, [pc, #112]	; (82530 <usart_serial_getchar+0xa4>)
   824be:	4629      	mov	r1, r5
   824c0:	4638      	mov	r0, r7
   824c2:	47b0      	blx	r6
   824c4:	2800      	cmp	r0, #0
   824c6:	d1fa      	bne.n	824be <usart_serial_getchar+0x32>
   824c8:	e7ef      	b.n	824aa <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   824ca:	461f      	mov	r7, r3
   824cc:	4e19      	ldr	r6, [pc, #100]	; (82534 <usart_serial_getchar+0xa8>)
   824ce:	a901      	add	r1, sp, #4
   824d0:	4638      	mov	r0, r7
   824d2:	47b0      	blx	r6
   824d4:	2800      	cmp	r0, #0
   824d6:	d1fa      	bne.n	824ce <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   824d8:	9b01      	ldr	r3, [sp, #4]
   824da:	702b      	strb	r3, [r5, #0]
   824dc:	e7e8      	b.n	824b0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   824de:	461e      	mov	r6, r3
   824e0:	4c14      	ldr	r4, [pc, #80]	; (82534 <usart_serial_getchar+0xa8>)
   824e2:	a901      	add	r1, sp, #4
   824e4:	4630      	mov	r0, r6
   824e6:	47a0      	blx	r4
   824e8:	2800      	cmp	r0, #0
   824ea:	d1fa      	bne.n	824e2 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   824ec:	9b01      	ldr	r3, [sp, #4]
   824ee:	702b      	strb	r3, [r5, #0]
   824f0:	e7e1      	b.n	824b6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   824f2:	461e      	mov	r6, r3
   824f4:	4c0f      	ldr	r4, [pc, #60]	; (82534 <usart_serial_getchar+0xa8>)
   824f6:	a901      	add	r1, sp, #4
   824f8:	4630      	mov	r0, r6
   824fa:	47a0      	blx	r4
   824fc:	2800      	cmp	r0, #0
   824fe:	d1fa      	bne.n	824f6 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   82500:	9b01      	ldr	r3, [sp, #4]
   82502:	702b      	strb	r3, [r5, #0]
   82504:	e7d7      	b.n	824b6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   82506:	461e      	mov	r6, r3
   82508:	4c0a      	ldr	r4, [pc, #40]	; (82534 <usart_serial_getchar+0xa8>)
   8250a:	a901      	add	r1, sp, #4
   8250c:	4630      	mov	r0, r6
   8250e:	47a0      	blx	r4
   82510:	2800      	cmp	r0, #0
   82512:	d1fa      	bne.n	8250a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   82514:	9b01      	ldr	r3, [sp, #4]
   82516:	702b      	strb	r3, [r5, #0]
}
   82518:	e7cd      	b.n	824b6 <usart_serial_getchar+0x2a>
   8251a:	bf00      	nop
   8251c:	400e0800 	.word	0x400e0800
   82520:	40098000 	.word	0x40098000
   82524:	4009c000 	.word	0x4009c000
   82528:	400a0000 	.word	0x400a0000
   8252c:	400a4000 	.word	0x400a4000
   82530:	000827c7 	.word	0x000827c7
   82534:	00082415 	.word	0x00082415

00082538 <usart_serial_putchar>:
{
   82538:	b570      	push	{r4, r5, r6, lr}
   8253a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   8253c:	4b1e      	ldr	r3, [pc, #120]	; (825b8 <usart_serial_putchar+0x80>)
   8253e:	4298      	cmp	r0, r3
   82540:	d00d      	beq.n	8255e <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   82542:	4b1e      	ldr	r3, [pc, #120]	; (825bc <usart_serial_putchar+0x84>)
   82544:	4298      	cmp	r0, r3
   82546:	d013      	beq.n	82570 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   82548:	4b1d      	ldr	r3, [pc, #116]	; (825c0 <usart_serial_putchar+0x88>)
   8254a:	4298      	cmp	r0, r3
   8254c:	d019      	beq.n	82582 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   8254e:	4b1d      	ldr	r3, [pc, #116]	; (825c4 <usart_serial_putchar+0x8c>)
   82550:	4298      	cmp	r0, r3
   82552:	d01f      	beq.n	82594 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   82554:	4b1c      	ldr	r3, [pc, #112]	; (825c8 <usart_serial_putchar+0x90>)
   82556:	4298      	cmp	r0, r3
   82558:	d025      	beq.n	825a6 <usart_serial_putchar+0x6e>
	return 0;
   8255a:	2000      	movs	r0, #0
}
   8255c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8255e:	461e      	mov	r6, r3
   82560:	4d1a      	ldr	r5, [pc, #104]	; (825cc <usart_serial_putchar+0x94>)
   82562:	4621      	mov	r1, r4
   82564:	4630      	mov	r0, r6
   82566:	47a8      	blx	r5
   82568:	2800      	cmp	r0, #0
   8256a:	d1fa      	bne.n	82562 <usart_serial_putchar+0x2a>
		return 1;
   8256c:	2001      	movs	r0, #1
   8256e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82570:	461e      	mov	r6, r3
   82572:	4d17      	ldr	r5, [pc, #92]	; (825d0 <usart_serial_putchar+0x98>)
   82574:	4621      	mov	r1, r4
   82576:	4630      	mov	r0, r6
   82578:	47a8      	blx	r5
   8257a:	2800      	cmp	r0, #0
   8257c:	d1fa      	bne.n	82574 <usart_serial_putchar+0x3c>
		return 1;
   8257e:	2001      	movs	r0, #1
   82580:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82582:	461e      	mov	r6, r3
   82584:	4d12      	ldr	r5, [pc, #72]	; (825d0 <usart_serial_putchar+0x98>)
   82586:	4621      	mov	r1, r4
   82588:	4630      	mov	r0, r6
   8258a:	47a8      	blx	r5
   8258c:	2800      	cmp	r0, #0
   8258e:	d1fa      	bne.n	82586 <usart_serial_putchar+0x4e>
		return 1;
   82590:	2001      	movs	r0, #1
   82592:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   82594:	461e      	mov	r6, r3
   82596:	4d0e      	ldr	r5, [pc, #56]	; (825d0 <usart_serial_putchar+0x98>)
   82598:	4621      	mov	r1, r4
   8259a:	4630      	mov	r0, r6
   8259c:	47a8      	blx	r5
   8259e:	2800      	cmp	r0, #0
   825a0:	d1fa      	bne.n	82598 <usart_serial_putchar+0x60>
		return 1;
   825a2:	2001      	movs	r0, #1
   825a4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   825a6:	461e      	mov	r6, r3
   825a8:	4d09      	ldr	r5, [pc, #36]	; (825d0 <usart_serial_putchar+0x98>)
   825aa:	4621      	mov	r1, r4
   825ac:	4630      	mov	r0, r6
   825ae:	47a8      	blx	r5
   825b0:	2800      	cmp	r0, #0
   825b2:	d1fa      	bne.n	825aa <usart_serial_putchar+0x72>
		return 1;
   825b4:	2001      	movs	r0, #1
   825b6:	bd70      	pop	{r4, r5, r6, pc}
   825b8:	400e0800 	.word	0x400e0800
   825bc:	40098000 	.word	0x40098000
   825c0:	4009c000 	.word	0x4009c000
   825c4:	400a0000 	.word	0x400a0000
   825c8:	400a4000 	.word	0x400a4000
   825cc:	000827b7 	.word	0x000827b7
   825d0:	00082401 	.word	0x00082401

000825d4 <console_init>:
#include "console_driver.h"

void console_init(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   825d4:	b530      	push	{r4, r5, lr}
   825d6:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   825d8:	2008      	movs	r0, #8
   825da:	4d15      	ldr	r5, [pc, #84]	; (82630 <console_init+0x5c>)
   825dc:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   825de:	4c15      	ldr	r4, [pc, #84]	; (82634 <console_init+0x60>)
   825e0:	4b15      	ldr	r3, [pc, #84]	; (82638 <console_init+0x64>)
   825e2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   825e4:	4a15      	ldr	r2, [pc, #84]	; (8263c <console_init+0x68>)
   825e6:	4b16      	ldr	r3, [pc, #88]	; (82640 <console_init+0x6c>)
   825e8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   825ea:	4a16      	ldr	r2, [pc, #88]	; (82644 <console_init+0x70>)
   825ec:	4b16      	ldr	r3, [pc, #88]	; (82648 <console_init+0x74>)
   825ee:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   825f0:	4b16      	ldr	r3, [pc, #88]	; (8264c <console_init+0x78>)
   825f2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   825f4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   825f8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   825fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
   825fe:	9303      	str	r3, [sp, #12]
   82600:	2008      	movs	r0, #8
   82602:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   82604:	a901      	add	r1, sp, #4
   82606:	4620      	mov	r0, r4
   82608:	4b11      	ldr	r3, [pc, #68]	; (82650 <console_init+0x7c>)
   8260a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8260c:	4d11      	ldr	r5, [pc, #68]	; (82654 <console_init+0x80>)
   8260e:	682b      	ldr	r3, [r5, #0]
   82610:	2100      	movs	r1, #0
   82612:	6898      	ldr	r0, [r3, #8]
   82614:	4c10      	ldr	r4, [pc, #64]	; (82658 <console_init+0x84>)
   82616:	47a0      	blx	r4
	setbuf(stdin, NULL);
   82618:	682b      	ldr	r3, [r5, #0]
   8261a:	2100      	movs	r1, #0
   8261c:	6858      	ldr	r0, [r3, #4]
   8261e:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   82620:	480e      	ldr	r0, [pc, #56]	; (8265c <console_init+0x88>)
   82622:	4c0f      	ldr	r4, [pc, #60]	; (82660 <console_init+0x8c>)
   82624:	47a0      	blx	r4
	printf("=============\n");
   82626:	480f      	ldr	r0, [pc, #60]	; (82664 <console_init+0x90>)
   82628:	47a0      	blx	r4
   8262a:	b005      	add	sp, #20
   8262c:	bd30      	pop	{r4, r5, pc}
   8262e:	bf00      	nop
   82630:	00082cf1 	.word	0x00082cf1
   82634:	400e0800 	.word	0x400e0800
   82638:	2007ae9c 	.word	0x2007ae9c
   8263c:	00082539 	.word	0x00082539
   82640:	2007ae98 	.word	0x2007ae98
   82644:	0008248d 	.word	0x0008248d
   82648:	2007ae40 	.word	0x2007ae40
   8264c:	0501bd00 	.word	0x0501bd00
   82650:	00082781 	.word	0x00082781
   82654:	200701ac 	.word	0x200701ac
   82658:	000841c9 	.word	0x000841c9
   8265c:	00086f7c 	.word	0x00086f7c
   82660:	00084019 	.word	0x00084019
   82664:	00086f8c 	.word	0x00086f8c

00082668 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   82668:	3801      	subs	r0, #1
   8266a:	2802      	cmp	r0, #2
   8266c:	d815      	bhi.n	8269a <_write+0x32>
{
   8266e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82672:	460e      	mov	r6, r1
   82674:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   82676:	b19a      	cbz	r2, 826a0 <_write+0x38>
   82678:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8267a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 826b4 <_write+0x4c>
   8267e:	4f0c      	ldr	r7, [pc, #48]	; (826b0 <_write+0x48>)
   82680:	f8d8 0000 	ldr.w	r0, [r8]
   82684:	f815 1b01 	ldrb.w	r1, [r5], #1
   82688:	683b      	ldr	r3, [r7, #0]
   8268a:	4798      	blx	r3
   8268c:	2800      	cmp	r0, #0
   8268e:	db0a      	blt.n	826a6 <_write+0x3e>
   82690:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   82692:	3c01      	subs	r4, #1
   82694:	d1f4      	bne.n	82680 <_write+0x18>
   82696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8269a:	f04f 30ff 	mov.w	r0, #4294967295
   8269e:	4770      	bx	lr
	for (; len != 0; --len) {
   826a0:	4610      	mov	r0, r2
   826a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   826a6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   826aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826ae:	bf00      	nop
   826b0:	2007ae98 	.word	0x2007ae98
   826b4:	2007ae9c 	.word	0x2007ae9c

000826b8 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   826b8:	2a00      	cmp	r2, #0
   826ba:	d051      	beq.n	82760 <usart_serial_read_packet+0xa8>
{
   826bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826c0:	b083      	sub	sp, #12
   826c2:	4605      	mov	r5, r0
   826c4:	460c      	mov	r4, r1
   826c6:	4692      	mov	sl, r2
   826c8:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   826ca:	4f26      	ldr	r7, [pc, #152]	; (82764 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   826cc:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 82778 <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   826d0:	4e25      	ldr	r6, [pc, #148]	; (82768 <usart_serial_read_packet+0xb0>)
   826d2:	e01d      	b.n	82710 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   826d4:	4621      	mov	r1, r4
   826d6:	4638      	mov	r0, r7
   826d8:	47c8      	blx	r9
   826da:	2800      	cmp	r0, #0
   826dc:	d1fa      	bne.n	826d4 <usart_serial_read_packet+0x1c>
   826de:	e021      	b.n	82724 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   826e0:	469b      	mov	fp, r3
   826e2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8277c <usart_serial_read_packet+0xc4>
   826e6:	a901      	add	r1, sp, #4
   826e8:	4658      	mov	r0, fp
   826ea:	47c0      	blx	r8
   826ec:	2800      	cmp	r0, #0
   826ee:	d1fa      	bne.n	826e6 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   826f0:	9b01      	ldr	r3, [sp, #4]
   826f2:	7023      	strb	r3, [r4, #0]
   826f4:	e019      	b.n	8272a <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   826f6:	469b      	mov	fp, r3
   826f8:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8277c <usart_serial_read_packet+0xc4>
   826fc:	a901      	add	r1, sp, #4
   826fe:	4658      	mov	r0, fp
   82700:	47c0      	blx	r8
   82702:	2800      	cmp	r0, #0
   82704:	d1fa      	bne.n	826fc <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   82706:	9b01      	ldr	r3, [sp, #4]
   82708:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   8270a:	3401      	adds	r4, #1
	while (len) {
   8270c:	4554      	cmp	r4, sl
   8270e:	d023      	beq.n	82758 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   82710:	2300      	movs	r3, #0
   82712:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   82714:	42bd      	cmp	r5, r7
   82716:	d0dd      	beq.n	826d4 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   82718:	4b14      	ldr	r3, [pc, #80]	; (8276c <usart_serial_read_packet+0xb4>)
   8271a:	429d      	cmp	r5, r3
   8271c:	d0e0      	beq.n	826e0 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   8271e:	4b14      	ldr	r3, [pc, #80]	; (82770 <usart_serial_read_packet+0xb8>)
   82720:	429d      	cmp	r5, r3
   82722:	d0e8      	beq.n	826f6 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   82724:	4b13      	ldr	r3, [pc, #76]	; (82774 <usart_serial_read_packet+0xbc>)
   82726:	429d      	cmp	r5, r3
   82728:	d00b      	beq.n	82742 <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   8272a:	42b5      	cmp	r5, r6
   8272c:	d1ed      	bne.n	8270a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   8272e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8277c <usart_serial_read_packet+0xc4>
   82732:	a901      	add	r1, sp, #4
   82734:	4630      	mov	r0, r6
   82736:	47c0      	blx	r8
   82738:	2800      	cmp	r0, #0
   8273a:	d1fa      	bne.n	82732 <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   8273c:	9b01      	ldr	r3, [sp, #4]
   8273e:	7023      	strb	r3, [r4, #0]
   82740:	e7e3      	b.n	8270a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   82742:	469b      	mov	fp, r3
   82744:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8277c <usart_serial_read_packet+0xc4>
   82748:	a901      	add	r1, sp, #4
   8274a:	4658      	mov	r0, fp
   8274c:	47c0      	blx	r8
   8274e:	2800      	cmp	r0, #0
   82750:	d1fa      	bne.n	82748 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   82752:	9b01      	ldr	r3, [sp, #4]
   82754:	7023      	strb	r3, [r4, #0]
   82756:	e7d8      	b.n	8270a <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   82758:	2000      	movs	r0, #0
   8275a:	b003      	add	sp, #12
   8275c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82760:	2000      	movs	r0, #0
   82762:	4770      	bx	lr
   82764:	400e0800 	.word	0x400e0800
   82768:	400a4000 	.word	0x400a4000
   8276c:	40098000 	.word	0x40098000
   82770:	4009c000 	.word	0x4009c000
   82774:	400a0000 	.word	0x400a0000
   82778:	000827c7 	.word	0x000827c7
   8277c:	00082415 	.word	0x00082415

00082780 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   82780:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   82782:	23ac      	movs	r3, #172	; 0xac
   82784:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   82786:	680b      	ldr	r3, [r1, #0]
   82788:	684a      	ldr	r2, [r1, #4]
   8278a:	fbb3 f3f2 	udiv	r3, r3, r2
   8278e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   82790:	1e5c      	subs	r4, r3, #1
   82792:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   82796:	4294      	cmp	r4, r2
   82798:	d80b      	bhi.n	827b2 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8279a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8279c:	688b      	ldr	r3, [r1, #8]
   8279e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   827a0:	f240 2302 	movw	r3, #514	; 0x202
   827a4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   827a8:	2350      	movs	r3, #80	; 0x50
   827aa:	6003      	str	r3, [r0, #0]

	return 0;
   827ac:	2000      	movs	r0, #0
}
   827ae:	bc10      	pop	{r4}
   827b0:	4770      	bx	lr
		return 1;
   827b2:	2001      	movs	r0, #1
   827b4:	e7fb      	b.n	827ae <uart_init+0x2e>

000827b6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   827b6:	6943      	ldr	r3, [r0, #20]
   827b8:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   827bc:	bf1a      	itte	ne
   827be:	61c1      	strne	r1, [r0, #28]
	return 0;
   827c0:	2000      	movne	r0, #0
		return 1;
   827c2:	2001      	moveq	r0, #1
}
   827c4:	4770      	bx	lr

000827c6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   827c6:	6943      	ldr	r3, [r0, #20]
   827c8:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   827cc:	bf1d      	ittte	ne
   827ce:	6983      	ldrne	r3, [r0, #24]
   827d0:	700b      	strbne	r3, [r1, #0]
	return 0;
   827d2:	2000      	movne	r0, #0
		return 1;
   827d4:	2001      	moveq	r0, #1
}
   827d6:	4770      	bx	lr

000827d8 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   827d8:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   827da:	480e      	ldr	r0, [pc, #56]	; (82814 <sysclk_init+0x3c>)
   827dc:	4b0e      	ldr	r3, [pc, #56]	; (82818 <sysclk_init+0x40>)
   827de:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   827e0:	213e      	movs	r1, #62	; 0x3e
   827e2:	2000      	movs	r0, #0
   827e4:	4b0d      	ldr	r3, [pc, #52]	; (8281c <sysclk_init+0x44>)
   827e6:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   827e8:	4c0d      	ldr	r4, [pc, #52]	; (82820 <sysclk_init+0x48>)
   827ea:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   827ec:	2800      	cmp	r0, #0
   827ee:	d0fc      	beq.n	827ea <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   827f0:	4b0c      	ldr	r3, [pc, #48]	; (82824 <sysclk_init+0x4c>)
   827f2:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   827f4:	4a0c      	ldr	r2, [pc, #48]	; (82828 <sysclk_init+0x50>)
   827f6:	4b0d      	ldr	r3, [pc, #52]	; (8282c <sysclk_init+0x54>)
   827f8:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   827fa:	4c0d      	ldr	r4, [pc, #52]	; (82830 <sysclk_init+0x58>)
   827fc:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   827fe:	2800      	cmp	r0, #0
   82800:	d0fc      	beq.n	827fc <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   82802:	2010      	movs	r0, #16
   82804:	4b0b      	ldr	r3, [pc, #44]	; (82834 <sysclk_init+0x5c>)
   82806:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82808:	4b0b      	ldr	r3, [pc, #44]	; (82838 <sysclk_init+0x60>)
   8280a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8280c:	4801      	ldr	r0, [pc, #4]	; (82814 <sysclk_init+0x3c>)
   8280e:	4b02      	ldr	r3, [pc, #8]	; (82818 <sysclk_init+0x40>)
   82810:	4798      	blx	r3
   82812:	bd10      	pop	{r4, pc}
   82814:	0501bd00 	.word	0x0501bd00
   82818:	200700a5 	.word	0x200700a5
   8281c:	00082c6d 	.word	0x00082c6d
   82820:	00082cc1 	.word	0x00082cc1
   82824:	00082cd1 	.word	0x00082cd1
   82828:	200d3f01 	.word	0x200d3f01
   8282c:	400e0600 	.word	0x400e0600
   82830:	00082ce1 	.word	0x00082ce1
   82834:	00082c09 	.word	0x00082c09
   82838:	00082de1 	.word	0x00082de1

0008283c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8283c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   8283e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   82842:	4b16      	ldr	r3, [pc, #88]	; (8289c <board_init+0x60>)
   82844:	605a      	str	r2, [r3, #4]
   82846:	200b      	movs	r0, #11
   82848:	4c15      	ldr	r4, [pc, #84]	; (828a0 <board_init+0x64>)
   8284a:	47a0      	blx	r4
   8284c:	200c      	movs	r0, #12
   8284e:	47a0      	blx	r4
   82850:	200d      	movs	r0, #13
   82852:	47a0      	blx	r4
   82854:	200e      	movs	r0, #14
   82856:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82858:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8285c:	203b      	movs	r0, #59	; 0x3b
   8285e:	4c11      	ldr	r4, [pc, #68]	; (828a4 <board_init+0x68>)
   82860:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   82862:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82866:	2055      	movs	r0, #85	; 0x55
   82868:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8286a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8286e:	2056      	movs	r0, #86	; 0x56
   82870:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   82872:	490d      	ldr	r1, [pc, #52]	; (828a8 <board_init+0x6c>)
   82874:	2068      	movs	r0, #104	; 0x68
   82876:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82878:	490c      	ldr	r1, [pc, #48]	; (828ac <board_init+0x70>)
   8287a:	205c      	movs	r0, #92	; 0x5c
   8287c:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8287e:	4a0c      	ldr	r2, [pc, #48]	; (828b0 <board_init+0x74>)
   82880:	f44f 7140 	mov.w	r1, #768	; 0x300
   82884:	480b      	ldr	r0, [pc, #44]	; (828b4 <board_init+0x78>)
   82886:	4b0c      	ldr	r3, [pc, #48]	; (828b8 <board_init+0x7c>)
   82888:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8288a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8288e:	202b      	movs	r0, #43	; 0x2b
   82890:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82892:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82896:	202a      	movs	r0, #42	; 0x2a
   82898:	47a0      	blx	r4
   8289a:	bd10      	pop	{r4, pc}
   8289c:	400e1a50 	.word	0x400e1a50
   828a0:	00082cf1 	.word	0x00082cf1
   828a4:	0008298d 	.word	0x0008298d
   828a8:	28000079 	.word	0x28000079
   828ac:	28000001 	.word	0x28000001
   828b0:	08000001 	.word	0x08000001
   828b4:	400e0e00 	.word	0x400e0e00
   828b8:	00082a5d 	.word	0x00082a5d

000828bc <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   828bc:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   828be:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   828c2:	d016      	beq.n	828f2 <pio_set_peripheral+0x36>
   828c4:	d80b      	bhi.n	828de <pio_set_peripheral+0x22>
   828c6:	b149      	cbz	r1, 828dc <pio_set_peripheral+0x20>
   828c8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   828cc:	d105      	bne.n	828da <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   828ce:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   828d0:	6f01      	ldr	r1, [r0, #112]	; 0x70
   828d2:	400b      	ands	r3, r1
   828d4:	ea23 0302 	bic.w	r3, r3, r2
   828d8:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   828da:	6042      	str	r2, [r0, #4]
   828dc:	4770      	bx	lr
	switch (ul_type) {
   828de:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   828e2:	d0fb      	beq.n	828dc <pio_set_peripheral+0x20>
   828e4:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   828e8:	d0f8      	beq.n	828dc <pio_set_peripheral+0x20>
   828ea:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   828ee:	d1f4      	bne.n	828da <pio_set_peripheral+0x1e>
   828f0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   828f2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   828f4:	4313      	orrs	r3, r2
   828f6:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   828f8:	e7ef      	b.n	828da <pio_set_peripheral+0x1e>

000828fa <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   828fa:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   828fc:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   82900:	bf14      	ite	ne
   82902:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82904:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82906:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8290a:	bf14      	ite	ne
   8290c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   8290e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   82910:	f012 0f02 	tst.w	r2, #2
   82914:	d107      	bne.n	82926 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   82916:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8291a:	bf18      	it	ne
   8291c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   82920:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   82922:	6001      	str	r1, [r0, #0]
   82924:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   82926:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8292a:	e7f9      	b.n	82920 <pio_set_input+0x26>

0008292c <pio_set_output>:
{
   8292c:	b410      	push	{r4}
   8292e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   82930:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   82932:	b944      	cbnz	r4, 82946 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   82934:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   82936:	b143      	cbz	r3, 8294a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   82938:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8293a:	b942      	cbnz	r2, 8294e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   8293c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8293e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82940:	6001      	str	r1, [r0, #0]
}
   82942:	bc10      	pop	{r4}
   82944:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   82946:	6641      	str	r1, [r0, #100]	; 0x64
   82948:	e7f5      	b.n	82936 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8294a:	6541      	str	r1, [r0, #84]	; 0x54
   8294c:	e7f5      	b.n	8293a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   8294e:	6301      	str	r1, [r0, #48]	; 0x30
   82950:	e7f5      	b.n	8293e <pio_set_output+0x12>

00082952 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   82952:	f012 0f10 	tst.w	r2, #16
   82956:	d010      	beq.n	8297a <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   82958:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   8295c:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   82960:	bf14      	ite	ne
   82962:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   82966:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   8296a:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   8296e:	bf14      	ite	ne
   82970:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   82974:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   82978:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   8297a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   8297e:	4770      	bx	lr

00082980 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   82980:	6401      	str	r1, [r0, #64]	; 0x40
   82982:	4770      	bx	lr

00082984 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   82984:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   82986:	4770      	bx	lr

00082988 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82988:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8298a:	4770      	bx	lr

0008298c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8298c:	b570      	push	{r4, r5, r6, lr}
   8298e:	b082      	sub	sp, #8
   82990:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82992:	0943      	lsrs	r3, r0, #5
   82994:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82998:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8299c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8299e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   829a2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   829a6:	d031      	beq.n	82a0c <pio_configure_pin+0x80>
   829a8:	d816      	bhi.n	829d8 <pio_configure_pin+0x4c>
   829aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   829ae:	d01b      	beq.n	829e8 <pio_configure_pin+0x5c>
   829b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   829b4:	d116      	bne.n	829e4 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   829b6:	f000 001f 	and.w	r0, r0, #31
   829ba:	2601      	movs	r6, #1
   829bc:	4086      	lsls	r6, r0
   829be:	4632      	mov	r2, r6
   829c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   829c4:	4620      	mov	r0, r4
   829c6:	4b22      	ldr	r3, [pc, #136]	; (82a50 <pio_configure_pin+0xc4>)
   829c8:	4798      	blx	r3
	if (ul_pull_up_enable) {
   829ca:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   829ce:	bf14      	ite	ne
   829d0:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   829d2:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   829d4:	2001      	movs	r0, #1
   829d6:	e017      	b.n	82a08 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   829d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   829dc:	d021      	beq.n	82a22 <pio_configure_pin+0x96>
   829de:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   829e2:	d01e      	beq.n	82a22 <pio_configure_pin+0x96>
		return 0;
   829e4:	2000      	movs	r0, #0
   829e6:	e00f      	b.n	82a08 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   829e8:	f000 001f 	and.w	r0, r0, #31
   829ec:	2601      	movs	r6, #1
   829ee:	4086      	lsls	r6, r0
   829f0:	4632      	mov	r2, r6
   829f2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   829f6:	4620      	mov	r0, r4
   829f8:	4b15      	ldr	r3, [pc, #84]	; (82a50 <pio_configure_pin+0xc4>)
   829fa:	4798      	blx	r3
	if (ul_pull_up_enable) {
   829fc:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82a00:	bf14      	ite	ne
   82a02:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82a04:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   82a06:	2001      	movs	r0, #1
}
   82a08:	b002      	add	sp, #8
   82a0a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82a0c:	f000 011f 	and.w	r1, r0, #31
   82a10:	2601      	movs	r6, #1
   82a12:	462a      	mov	r2, r5
   82a14:	fa06 f101 	lsl.w	r1, r6, r1
   82a18:	4620      	mov	r0, r4
   82a1a:	4b0e      	ldr	r3, [pc, #56]	; (82a54 <pio_configure_pin+0xc8>)
   82a1c:	4798      	blx	r3
	return 1;
   82a1e:	4630      	mov	r0, r6
		break;
   82a20:	e7f2      	b.n	82a08 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82a22:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82a26:	f000 011f 	and.w	r1, r0, #31
   82a2a:	2601      	movs	r6, #1
   82a2c:	ea05 0306 	and.w	r3, r5, r6
   82a30:	9300      	str	r3, [sp, #0]
   82a32:	f3c5 0380 	ubfx	r3, r5, #2, #1
   82a36:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82a3a:	bf14      	ite	ne
   82a3c:	2200      	movne	r2, #0
   82a3e:	2201      	moveq	r2, #1
   82a40:	fa06 f101 	lsl.w	r1, r6, r1
   82a44:	4620      	mov	r0, r4
   82a46:	4c04      	ldr	r4, [pc, #16]	; (82a58 <pio_configure_pin+0xcc>)
   82a48:	47a0      	blx	r4
	return 1;
   82a4a:	4630      	mov	r0, r6
		break;
   82a4c:	e7dc      	b.n	82a08 <pio_configure_pin+0x7c>
   82a4e:	bf00      	nop
   82a50:	000828bd 	.word	0x000828bd
   82a54:	000828fb 	.word	0x000828fb
   82a58:	0008292d 	.word	0x0008292d

00082a5c <pio_configure_pin_group>:
{
   82a5c:	b570      	push	{r4, r5, r6, lr}
   82a5e:	b082      	sub	sp, #8
   82a60:	4605      	mov	r5, r0
   82a62:	460e      	mov	r6, r1
   82a64:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   82a66:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82a6a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82a6e:	d027      	beq.n	82ac0 <pio_configure_pin_group+0x64>
   82a70:	d811      	bhi.n	82a96 <pio_configure_pin_group+0x3a>
   82a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82a76:	d016      	beq.n	82aa6 <pio_configure_pin_group+0x4a>
   82a78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82a7c:	d111      	bne.n	82aa2 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82a7e:	460a      	mov	r2, r1
   82a80:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82a84:	4b19      	ldr	r3, [pc, #100]	; (82aec <pio_configure_pin_group+0x90>)
   82a86:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82a88:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82a8c:	bf14      	ite	ne
   82a8e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82a90:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82a92:	2001      	movs	r0, #1
   82a94:	e012      	b.n	82abc <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   82a96:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82a9a:	d015      	beq.n	82ac8 <pio_configure_pin_group+0x6c>
   82a9c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82aa0:	d012      	beq.n	82ac8 <pio_configure_pin_group+0x6c>
		return 0;
   82aa2:	2000      	movs	r0, #0
   82aa4:	e00a      	b.n	82abc <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82aa6:	460a      	mov	r2, r1
   82aa8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82aac:	4b0f      	ldr	r3, [pc, #60]	; (82aec <pio_configure_pin_group+0x90>)
   82aae:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82ab0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82ab4:	bf14      	ite	ne
   82ab6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82ab8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82aba:	2001      	movs	r0, #1
}
   82abc:	b002      	add	sp, #8
   82abe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82ac0:	4b0b      	ldr	r3, [pc, #44]	; (82af0 <pio_configure_pin_group+0x94>)
   82ac2:	4798      	blx	r3
	return 1;
   82ac4:	2001      	movs	r0, #1
		break;
   82ac6:	e7f9      	b.n	82abc <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82ac8:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82acc:	f004 0301 	and.w	r3, r4, #1
   82ad0:	9300      	str	r3, [sp, #0]
   82ad2:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82ad6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82ada:	bf14      	ite	ne
   82adc:	2200      	movne	r2, #0
   82ade:	2201      	moveq	r2, #1
   82ae0:	4631      	mov	r1, r6
   82ae2:	4628      	mov	r0, r5
   82ae4:	4c03      	ldr	r4, [pc, #12]	; (82af4 <pio_configure_pin_group+0x98>)
   82ae6:	47a0      	blx	r4
	return 1;
   82ae8:	2001      	movs	r0, #1
		break;
   82aea:	e7e7      	b.n	82abc <pio_configure_pin_group+0x60>
   82aec:	000828bd 	.word	0x000828bd
   82af0:	000828fb 	.word	0x000828fb
   82af4:	0008292d 	.word	0x0008292d

00082af8 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82afc:	4604      	mov	r4, r0
   82afe:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82b00:	4b0e      	ldr	r3, [pc, #56]	; (82b3c <pio_handler_process+0x44>)
   82b02:	4798      	blx	r3
   82b04:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82b06:	4620      	mov	r0, r4
   82b08:	4b0d      	ldr	r3, [pc, #52]	; (82b40 <pio_handler_process+0x48>)
   82b0a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82b0c:	4005      	ands	r5, r0
   82b0e:	d013      	beq.n	82b38 <pio_handler_process+0x40>
   82b10:	4c0c      	ldr	r4, [pc, #48]	; (82b44 <pio_handler_process+0x4c>)
   82b12:	f104 0660 	add.w	r6, r4, #96	; 0x60
   82b16:	e003      	b.n	82b20 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82b18:	42b4      	cmp	r4, r6
   82b1a:	d00d      	beq.n	82b38 <pio_handler_process+0x40>
   82b1c:	3410      	adds	r4, #16
		while (status != 0) {
   82b1e:	b15d      	cbz	r5, 82b38 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82b20:	6820      	ldr	r0, [r4, #0]
   82b22:	4540      	cmp	r0, r8
   82b24:	d1f8      	bne.n	82b18 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82b26:	6861      	ldr	r1, [r4, #4]
   82b28:	4229      	tst	r1, r5
   82b2a:	d0f5      	beq.n	82b18 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82b2c:	68e3      	ldr	r3, [r4, #12]
   82b2e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82b30:	6863      	ldr	r3, [r4, #4]
   82b32:	ea25 0503 	bic.w	r5, r5, r3
   82b36:	e7ef      	b.n	82b18 <pio_handler_process+0x20>
   82b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82b3c:	00082985 	.word	0x00082985
   82b40:	00082989 	.word	0x00082989
   82b44:	2007ad94 	.word	0x2007ad94

00082b48 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   82b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   82b4a:	4c18      	ldr	r4, [pc, #96]	; (82bac <pio_handler_set+0x64>)
   82b4c:	6826      	ldr	r6, [r4, #0]
   82b4e:	2e06      	cmp	r6, #6
   82b50:	d829      	bhi.n	82ba6 <pio_handler_set+0x5e>
   82b52:	f04f 0c00 	mov.w	ip, #0
   82b56:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   82b58:	4f15      	ldr	r7, [pc, #84]	; (82bb0 <pio_handler_set+0x68>)
   82b5a:	e004      	b.n	82b66 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   82b5c:	3401      	adds	r4, #1
   82b5e:	b2e4      	uxtb	r4, r4
   82b60:	46a4      	mov	ip, r4
   82b62:	42a6      	cmp	r6, r4
   82b64:	d309      	bcc.n	82b7a <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   82b66:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   82b68:	0125      	lsls	r5, r4, #4
   82b6a:	597d      	ldr	r5, [r7, r5]
   82b6c:	428d      	cmp	r5, r1
   82b6e:	d1f5      	bne.n	82b5c <pio_handler_set+0x14>
   82b70:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   82b74:	686d      	ldr	r5, [r5, #4]
   82b76:	4295      	cmp	r5, r2
   82b78:	d1f0      	bne.n	82b5c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   82b7a:	4d0d      	ldr	r5, [pc, #52]	; (82bb0 <pio_handler_set+0x68>)
   82b7c:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   82b80:	eb05 040e 	add.w	r4, r5, lr
   82b84:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   82b88:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   82b8a:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   82b8c:	9906      	ldr	r1, [sp, #24]
   82b8e:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   82b90:	3601      	adds	r6, #1
   82b92:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   82b94:	bf04      	itt	eq
   82b96:	4905      	ldreq	r1, [pc, #20]	; (82bac <pio_handler_set+0x64>)
   82b98:	600e      	streq	r6, [r1, #0]
   82b9a:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   82b9c:	461a      	mov	r2, r3
   82b9e:	4b05      	ldr	r3, [pc, #20]	; (82bb4 <pio_handler_set+0x6c>)
   82ba0:	4798      	blx	r3

	return 0;
   82ba2:	2000      	movs	r0, #0
   82ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   82ba6:	2001      	movs	r0, #1
}
   82ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82baa:	bf00      	nop
   82bac:	2007ae04 	.word	0x2007ae04
   82bb0:	2007ad94 	.word	0x2007ad94
   82bb4:	00082953 	.word	0x00082953

00082bb8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82bb8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   82bba:	210b      	movs	r1, #11
   82bbc:	4801      	ldr	r0, [pc, #4]	; (82bc4 <PIOA_Handler+0xc>)
   82bbe:	4b02      	ldr	r3, [pc, #8]	; (82bc8 <PIOA_Handler+0x10>)
   82bc0:	4798      	blx	r3
   82bc2:	bd08      	pop	{r3, pc}
   82bc4:	400e0e00 	.word	0x400e0e00
   82bc8:	00082af9 	.word	0x00082af9

00082bcc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82bcc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   82bce:	210c      	movs	r1, #12
   82bd0:	4801      	ldr	r0, [pc, #4]	; (82bd8 <PIOB_Handler+0xc>)
   82bd2:	4b02      	ldr	r3, [pc, #8]	; (82bdc <PIOB_Handler+0x10>)
   82bd4:	4798      	blx	r3
   82bd6:	bd08      	pop	{r3, pc}
   82bd8:	400e1000 	.word	0x400e1000
   82bdc:	00082af9 	.word	0x00082af9

00082be0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82be0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82be2:	210d      	movs	r1, #13
   82be4:	4801      	ldr	r0, [pc, #4]	; (82bec <PIOC_Handler+0xc>)
   82be6:	4b02      	ldr	r3, [pc, #8]	; (82bf0 <PIOC_Handler+0x10>)
   82be8:	4798      	blx	r3
   82bea:	bd08      	pop	{r3, pc}
   82bec:	400e1200 	.word	0x400e1200
   82bf0:	00082af9 	.word	0x00082af9

00082bf4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82bf4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82bf6:	210e      	movs	r1, #14
   82bf8:	4801      	ldr	r0, [pc, #4]	; (82c00 <PIOD_Handler+0xc>)
   82bfa:	4b02      	ldr	r3, [pc, #8]	; (82c04 <PIOD_Handler+0x10>)
   82bfc:	4798      	blx	r3
   82bfe:	bd08      	pop	{r3, pc}
   82c00:	400e1400 	.word	0x400e1400
   82c04:	00082af9 	.word	0x00082af9

00082c08 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82c08:	4a17      	ldr	r2, [pc, #92]	; (82c68 <pmc_switch_mck_to_pllack+0x60>)
   82c0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82c0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82c10:	4318      	orrs	r0, r3
   82c12:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82c14:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82c16:	f013 0f08 	tst.w	r3, #8
   82c1a:	d10a      	bne.n	82c32 <pmc_switch_mck_to_pllack+0x2a>
   82c1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82c20:	4911      	ldr	r1, [pc, #68]	; (82c68 <pmc_switch_mck_to_pllack+0x60>)
   82c22:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82c24:	f012 0f08 	tst.w	r2, #8
   82c28:	d103      	bne.n	82c32 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82c2a:	3b01      	subs	r3, #1
   82c2c:	d1f9      	bne.n	82c22 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   82c2e:	2001      	movs	r0, #1
   82c30:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82c32:	4a0d      	ldr	r2, [pc, #52]	; (82c68 <pmc_switch_mck_to_pllack+0x60>)
   82c34:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82c36:	f023 0303 	bic.w	r3, r3, #3
   82c3a:	f043 0302 	orr.w	r3, r3, #2
   82c3e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82c40:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82c42:	f013 0f08 	tst.w	r3, #8
   82c46:	d10a      	bne.n	82c5e <pmc_switch_mck_to_pllack+0x56>
   82c48:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82c4c:	4906      	ldr	r1, [pc, #24]	; (82c68 <pmc_switch_mck_to_pllack+0x60>)
   82c4e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82c50:	f012 0f08 	tst.w	r2, #8
   82c54:	d105      	bne.n	82c62 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82c56:	3b01      	subs	r3, #1
   82c58:	d1f9      	bne.n	82c4e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   82c5a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82c5c:	4770      	bx	lr
	return 0;
   82c5e:	2000      	movs	r0, #0
   82c60:	4770      	bx	lr
   82c62:	2000      	movs	r0, #0
   82c64:	4770      	bx	lr
   82c66:	bf00      	nop
   82c68:	400e0600 	.word	0x400e0600

00082c6c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82c6c:	b9c8      	cbnz	r0, 82ca2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82c6e:	4a11      	ldr	r2, [pc, #68]	; (82cb4 <pmc_switch_mainck_to_xtal+0x48>)
   82c70:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82c72:	0209      	lsls	r1, r1, #8
   82c74:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   82c76:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82c7a:	f023 0303 	bic.w	r3, r3, #3
   82c7e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82c82:	f043 0301 	orr.w	r3, r3, #1
   82c86:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82c88:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82c8a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82c8c:	f013 0f01 	tst.w	r3, #1
   82c90:	d0fb      	beq.n	82c8a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   82c92:	4a08      	ldr	r2, [pc, #32]	; (82cb4 <pmc_switch_mainck_to_xtal+0x48>)
   82c94:	6a13      	ldr	r3, [r2, #32]
   82c96:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82c9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82c9e:	6213      	str	r3, [r2, #32]
   82ca0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82ca2:	4904      	ldr	r1, [pc, #16]	; (82cb4 <pmc_switch_mainck_to_xtal+0x48>)
   82ca4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   82ca6:	4a04      	ldr	r2, [pc, #16]	; (82cb8 <pmc_switch_mainck_to_xtal+0x4c>)
   82ca8:	401a      	ands	r2, r3
   82caa:	4b04      	ldr	r3, [pc, #16]	; (82cbc <pmc_switch_mainck_to_xtal+0x50>)
   82cac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82cae:	620b      	str	r3, [r1, #32]
   82cb0:	4770      	bx	lr
   82cb2:	bf00      	nop
   82cb4:	400e0600 	.word	0x400e0600
   82cb8:	fec8fffc 	.word	0xfec8fffc
   82cbc:	01370002 	.word	0x01370002

00082cc0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82cc0:	4b02      	ldr	r3, [pc, #8]	; (82ccc <pmc_osc_is_ready_mainck+0xc>)
   82cc2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82cc4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   82cc8:	4770      	bx	lr
   82cca:	bf00      	nop
   82ccc:	400e0600 	.word	0x400e0600

00082cd0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82cd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82cd4:	4b01      	ldr	r3, [pc, #4]	; (82cdc <pmc_disable_pllack+0xc>)
   82cd6:	629a      	str	r2, [r3, #40]	; 0x28
   82cd8:	4770      	bx	lr
   82cda:	bf00      	nop
   82cdc:	400e0600 	.word	0x400e0600

00082ce0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82ce0:	4b02      	ldr	r3, [pc, #8]	; (82cec <pmc_is_locked_pllack+0xc>)
   82ce2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82ce4:	f000 0002 	and.w	r0, r0, #2
   82ce8:	4770      	bx	lr
   82cea:	bf00      	nop
   82cec:	400e0600 	.word	0x400e0600

00082cf0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82cf0:	282c      	cmp	r0, #44	; 0x2c
   82cf2:	d81e      	bhi.n	82d32 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82cf4:	281f      	cmp	r0, #31
   82cf6:	d80c      	bhi.n	82d12 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82cf8:	4b11      	ldr	r3, [pc, #68]	; (82d40 <pmc_enable_periph_clk+0x50>)
   82cfa:	699a      	ldr	r2, [r3, #24]
   82cfc:	2301      	movs	r3, #1
   82cfe:	4083      	lsls	r3, r0
   82d00:	4393      	bics	r3, r2
   82d02:	d018      	beq.n	82d36 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   82d04:	2301      	movs	r3, #1
   82d06:	fa03 f000 	lsl.w	r0, r3, r0
   82d0a:	4b0d      	ldr	r3, [pc, #52]	; (82d40 <pmc_enable_periph_clk+0x50>)
   82d0c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82d0e:	2000      	movs	r0, #0
   82d10:	4770      	bx	lr
		ul_id -= 32;
   82d12:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82d14:	4b0a      	ldr	r3, [pc, #40]	; (82d40 <pmc_enable_periph_clk+0x50>)
   82d16:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82d1a:	2301      	movs	r3, #1
   82d1c:	4083      	lsls	r3, r0
   82d1e:	4393      	bics	r3, r2
   82d20:	d00b      	beq.n	82d3a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   82d22:	2301      	movs	r3, #1
   82d24:	fa03 f000 	lsl.w	r0, r3, r0
   82d28:	4b05      	ldr	r3, [pc, #20]	; (82d40 <pmc_enable_periph_clk+0x50>)
   82d2a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   82d2e:	2000      	movs	r0, #0
   82d30:	4770      	bx	lr
		return 1;
   82d32:	2001      	movs	r0, #1
   82d34:	4770      	bx	lr
	return 0;
   82d36:	2000      	movs	r0, #0
   82d38:	4770      	bx	lr
   82d3a:	2000      	movs	r0, #0
}
   82d3c:	4770      	bx	lr
   82d3e:	bf00      	nop
   82d40:	400e0600 	.word	0x400e0600

00082d44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82d44:	e7fe      	b.n	82d44 <Dummy_Handler>
	...

00082d48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82d48:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82d4a:	4b1c      	ldr	r3, [pc, #112]	; (82dbc <Reset_Handler+0x74>)
   82d4c:	4a1c      	ldr	r2, [pc, #112]	; (82dc0 <Reset_Handler+0x78>)
   82d4e:	429a      	cmp	r2, r3
   82d50:	d010      	beq.n	82d74 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   82d52:	4b1c      	ldr	r3, [pc, #112]	; (82dc4 <Reset_Handler+0x7c>)
   82d54:	4a19      	ldr	r2, [pc, #100]	; (82dbc <Reset_Handler+0x74>)
   82d56:	429a      	cmp	r2, r3
   82d58:	d20c      	bcs.n	82d74 <Reset_Handler+0x2c>
   82d5a:	3b01      	subs	r3, #1
   82d5c:	1a9b      	subs	r3, r3, r2
   82d5e:	f023 0303 	bic.w	r3, r3, #3
   82d62:	3304      	adds	r3, #4
   82d64:	4413      	add	r3, r2
   82d66:	4916      	ldr	r1, [pc, #88]	; (82dc0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82d68:	f851 0b04 	ldr.w	r0, [r1], #4
   82d6c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   82d70:	429a      	cmp	r2, r3
   82d72:	d1f9      	bne.n	82d68 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   82d74:	4b14      	ldr	r3, [pc, #80]	; (82dc8 <Reset_Handler+0x80>)
   82d76:	4a15      	ldr	r2, [pc, #84]	; (82dcc <Reset_Handler+0x84>)
   82d78:	429a      	cmp	r2, r3
   82d7a:	d20a      	bcs.n	82d92 <Reset_Handler+0x4a>
   82d7c:	3b01      	subs	r3, #1
   82d7e:	1a9b      	subs	r3, r3, r2
   82d80:	f023 0303 	bic.w	r3, r3, #3
   82d84:	3304      	adds	r3, #4
   82d86:	4413      	add	r3, r2
		*pDest++ = 0;
   82d88:	2100      	movs	r1, #0
   82d8a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   82d8e:	4293      	cmp	r3, r2
   82d90:	d1fb      	bne.n	82d8a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   82d92:	4b0f      	ldr	r3, [pc, #60]	; (82dd0 <Reset_Handler+0x88>)
   82d94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82d98:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82d9c:	490d      	ldr	r1, [pc, #52]	; (82dd4 <Reset_Handler+0x8c>)
   82d9e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82da0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   82da4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82da8:	d203      	bcs.n	82db2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82daa:	688b      	ldr	r3, [r1, #8]
   82dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82db0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   82db2:	4b09      	ldr	r3, [pc, #36]	; (82dd8 <Reset_Handler+0x90>)
   82db4:	4798      	blx	r3

	/* Branch to main function */
	main();
   82db6:	4b09      	ldr	r3, [pc, #36]	; (82ddc <Reset_Handler+0x94>)
   82db8:	4798      	blx	r3
   82dba:	e7fe      	b.n	82dba <Reset_Handler+0x72>
   82dbc:	20070000 	.word	0x20070000
   82dc0:	00087194 	.word	0x00087194
   82dc4:	20070b58 	.word	0x20070b58
   82dc8:	2007aec8 	.word	0x2007aec8
   82dcc:	20070b58 	.word	0x20070b58
   82dd0:	00080000 	.word	0x00080000
   82dd4:	e000ed00 	.word	0xe000ed00
   82dd8:	00083fc9 	.word	0x00083fc9
   82ddc:	00082f49 	.word	0x00082f49

00082de0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82de0:	4b3d      	ldr	r3, [pc, #244]	; (82ed8 <SystemCoreClockUpdate+0xf8>)
   82de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82de4:	f003 0303 	and.w	r3, r3, #3
   82de8:	2b03      	cmp	r3, #3
   82dea:	d80e      	bhi.n	82e0a <SystemCoreClockUpdate+0x2a>
   82dec:	e8df f003 	tbb	[pc, r3]
   82df0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82df4:	4b39      	ldr	r3, [pc, #228]	; (82edc <SystemCoreClockUpdate+0xfc>)
   82df6:	695b      	ldr	r3, [r3, #20]
   82df8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82dfc:	bf14      	ite	ne
   82dfe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82e02:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82e06:	4b36      	ldr	r3, [pc, #216]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e08:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82e0a:	4b33      	ldr	r3, [pc, #204]	; (82ed8 <SystemCoreClockUpdate+0xf8>)
   82e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e12:	2b70      	cmp	r3, #112	; 0x70
   82e14:	d057      	beq.n	82ec6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82e16:	4b30      	ldr	r3, [pc, #192]	; (82ed8 <SystemCoreClockUpdate+0xf8>)
   82e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82e1a:	4931      	ldr	r1, [pc, #196]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e1c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82e20:	680b      	ldr	r3, [r1, #0]
   82e22:	40d3      	lsrs	r3, r2
   82e24:	600b      	str	r3, [r1, #0]
   82e26:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82e28:	4b2b      	ldr	r3, [pc, #172]	; (82ed8 <SystemCoreClockUpdate+0xf8>)
   82e2a:	6a1b      	ldr	r3, [r3, #32]
   82e2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82e30:	d003      	beq.n	82e3a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82e32:	4a2c      	ldr	r2, [pc, #176]	; (82ee4 <SystemCoreClockUpdate+0x104>)
   82e34:	4b2a      	ldr	r3, [pc, #168]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e36:	601a      	str	r2, [r3, #0]
   82e38:	e7e7      	b.n	82e0a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82e3a:	4a2b      	ldr	r2, [pc, #172]	; (82ee8 <SystemCoreClockUpdate+0x108>)
   82e3c:	4b28      	ldr	r3, [pc, #160]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e3e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82e40:	4b25      	ldr	r3, [pc, #148]	; (82ed8 <SystemCoreClockUpdate+0xf8>)
   82e42:	6a1b      	ldr	r3, [r3, #32]
   82e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e48:	2b10      	cmp	r3, #16
   82e4a:	d005      	beq.n	82e58 <SystemCoreClockUpdate+0x78>
   82e4c:	2b20      	cmp	r3, #32
   82e4e:	d1dc      	bne.n	82e0a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82e50:	4a24      	ldr	r2, [pc, #144]	; (82ee4 <SystemCoreClockUpdate+0x104>)
   82e52:	4b23      	ldr	r3, [pc, #140]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e54:	601a      	str	r2, [r3, #0]
				break;
   82e56:	e7d8      	b.n	82e0a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82e58:	4a24      	ldr	r2, [pc, #144]	; (82eec <SystemCoreClockUpdate+0x10c>)
   82e5a:	4b21      	ldr	r3, [pc, #132]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e5c:	601a      	str	r2, [r3, #0]
				break;
   82e5e:	e7d4      	b.n	82e0a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82e60:	4b1d      	ldr	r3, [pc, #116]	; (82ed8 <SystemCoreClockUpdate+0xf8>)
   82e62:	6a1b      	ldr	r3, [r3, #32]
   82e64:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82e68:	d00c      	beq.n	82e84 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82e6a:	4a1e      	ldr	r2, [pc, #120]	; (82ee4 <SystemCoreClockUpdate+0x104>)
   82e6c:	4b1c      	ldr	r3, [pc, #112]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e6e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82e70:	4b19      	ldr	r3, [pc, #100]	; (82ed8 <SystemCoreClockUpdate+0xf8>)
   82e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82e74:	f003 0303 	and.w	r3, r3, #3
   82e78:	2b02      	cmp	r3, #2
   82e7a:	d016      	beq.n	82eaa <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82e7c:	4a1c      	ldr	r2, [pc, #112]	; (82ef0 <SystemCoreClockUpdate+0x110>)
   82e7e:	4b18      	ldr	r3, [pc, #96]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e80:	601a      	str	r2, [r3, #0]
   82e82:	e7c2      	b.n	82e0a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82e84:	4a18      	ldr	r2, [pc, #96]	; (82ee8 <SystemCoreClockUpdate+0x108>)
   82e86:	4b16      	ldr	r3, [pc, #88]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e88:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82e8a:	4b13      	ldr	r3, [pc, #76]	; (82ed8 <SystemCoreClockUpdate+0xf8>)
   82e8c:	6a1b      	ldr	r3, [r3, #32]
   82e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82e92:	2b10      	cmp	r3, #16
   82e94:	d005      	beq.n	82ea2 <SystemCoreClockUpdate+0xc2>
   82e96:	2b20      	cmp	r3, #32
   82e98:	d1ea      	bne.n	82e70 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   82e9a:	4a12      	ldr	r2, [pc, #72]	; (82ee4 <SystemCoreClockUpdate+0x104>)
   82e9c:	4b10      	ldr	r3, [pc, #64]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82e9e:	601a      	str	r2, [r3, #0]
				break;
   82ea0:	e7e6      	b.n	82e70 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   82ea2:	4a12      	ldr	r2, [pc, #72]	; (82eec <SystemCoreClockUpdate+0x10c>)
   82ea4:	4b0e      	ldr	r3, [pc, #56]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82ea6:	601a      	str	r2, [r3, #0]
				break;
   82ea8:	e7e2      	b.n	82e70 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82eaa:	4a0b      	ldr	r2, [pc, #44]	; (82ed8 <SystemCoreClockUpdate+0xf8>)
   82eac:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82eae:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82eb0:	480b      	ldr	r0, [pc, #44]	; (82ee0 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82eb2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   82eb6:	6803      	ldr	r3, [r0, #0]
   82eb8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82ebc:	b2d2      	uxtb	r2, r2
   82ebe:	fbb3 f3f2 	udiv	r3, r3, r2
   82ec2:	6003      	str	r3, [r0, #0]
   82ec4:	e7a1      	b.n	82e0a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   82ec6:	4a06      	ldr	r2, [pc, #24]	; (82ee0 <SystemCoreClockUpdate+0x100>)
   82ec8:	6813      	ldr	r3, [r2, #0]
   82eca:	490a      	ldr	r1, [pc, #40]	; (82ef4 <SystemCoreClockUpdate+0x114>)
   82ecc:	fba1 1303 	umull	r1, r3, r1, r3
   82ed0:	085b      	lsrs	r3, r3, #1
   82ed2:	6013      	str	r3, [r2, #0]
   82ed4:	4770      	bx	lr
   82ed6:	bf00      	nop
   82ed8:	400e0600 	.word	0x400e0600
   82edc:	400e1a10 	.word	0x400e1a10
   82ee0:	200701a4 	.word	0x200701a4
   82ee4:	00b71b00 	.word	0x00b71b00
   82ee8:	003d0900 	.word	0x003d0900
   82eec:	007a1200 	.word	0x007a1200
   82ef0:	0e4e1c00 	.word	0x0e4e1c00
   82ef4:	aaaaaaab 	.word	0xaaaaaaab

00082ef8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82ef8:	4b0a      	ldr	r3, [pc, #40]	; (82f24 <_sbrk+0x2c>)
   82efa:	681b      	ldr	r3, [r3, #0]
   82efc:	b153      	cbz	r3, 82f14 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   82efe:	4b09      	ldr	r3, [pc, #36]	; (82f24 <_sbrk+0x2c>)
   82f00:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82f02:	181a      	adds	r2, r3, r0
   82f04:	4908      	ldr	r1, [pc, #32]	; (82f28 <_sbrk+0x30>)
   82f06:	4291      	cmp	r1, r2
   82f08:	db08      	blt.n	82f1c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   82f0a:	4610      	mov	r0, r2
   82f0c:	4a05      	ldr	r2, [pc, #20]	; (82f24 <_sbrk+0x2c>)
   82f0e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82f10:	4618      	mov	r0, r3
   82f12:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82f14:	4a05      	ldr	r2, [pc, #20]	; (82f2c <_sbrk+0x34>)
   82f16:	4b03      	ldr	r3, [pc, #12]	; (82f24 <_sbrk+0x2c>)
   82f18:	601a      	str	r2, [r3, #0]
   82f1a:	e7f0      	b.n	82efe <_sbrk+0x6>
		return (caddr_t) -1;	
   82f1c:	f04f 30ff 	mov.w	r0, #4294967295
}
   82f20:	4770      	bx	lr
   82f22:	bf00      	nop
   82f24:	2007ae08 	.word	0x2007ae08
   82f28:	20087ffc 	.word	0x20087ffc
   82f2c:	2007cec8 	.word	0x2007cec8

00082f30 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82f30:	f04f 30ff 	mov.w	r0, #4294967295
   82f34:	4770      	bx	lr

00082f36 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82f3a:	604b      	str	r3, [r1, #4]

	return 0;
}
   82f3c:	2000      	movs	r0, #0
   82f3e:	4770      	bx	lr

00082f40 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82f40:	2001      	movs	r0, #1
   82f42:	4770      	bx	lr

00082f44 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82f44:	2000      	movs	r0, #0
   82f46:	4770      	bx	lr

00082f48 <main>:
// 		.buffer = array,
// 		.length =10,
// 	};

int main (void)
{
   82f48:	b570      	push	{r4, r5, r6, lr}
   82f4a:	b084      	sub	sp, #16
	sysclk_init();
   82f4c:	4b50      	ldr	r3, [pc, #320]	; (83090 <main+0x148>)
   82f4e:	4798      	blx	r3
	board_init();
   82f50:	4b50      	ldr	r3, [pc, #320]	; (83094 <main+0x14c>)
   82f52:	4798      	blx	r3
   82f54:	200b      	movs	r0, #11
   82f56:	4c50      	ldr	r4, [pc, #320]	; (83098 <main+0x150>)
   82f58:	47a0      	blx	r4
   82f5a:	200c      	movs	r0, #12
   82f5c:	47a0      	blx	r4
   82f5e:	200d      	movs	r0, #13
   82f60:	47a0      	blx	r4
   82f62:	200e      	movs	r0, #14
   82f64:	47a0      	blx	r4
	ioport_init();
	console_init();
   82f66:	4b4d      	ldr	r3, [pc, #308]	; (8309c <main+0x154>)
   82f68:	4798      	blx	r3
	encoder_init();
   82f6a:	4b4d      	ldr	r3, [pc, #308]	; (830a0 <main+0x158>)
   82f6c:	4798      	blx	r3
	PWM_init();
   82f6e:	4b4d      	ldr	r3, [pc, #308]	; (830a4 <main+0x15c>)
   82f70:	4798      	blx	r3
	Twi_master_init(TWI1);
   82f72:	484d      	ldr	r0, [pc, #308]	; (830a8 <main+0x160>)
   82f74:	4b4d      	ldr	r3, [pc, #308]	; (830ac <main+0x164>)
   82f76:	4798      	blx	r3
	
	ioport_enable_pin(pin_mapper(TASK_DEBUG_MOTOR_PIN));
   82f78:	2035      	movs	r0, #53	; 0x35
   82f7a:	4d4d      	ldr	r5, [pc, #308]	; (830b0 <main+0x168>)
   82f7c:	47a8      	blx	r5
   82f7e:	f000 031f 	and.w	r3, r0, #31
   82f82:	2401      	movs	r4, #1
   82f84:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   82f88:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82f8a:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   82f8e:	f200 7007 	addw	r0, r0, #1799	; 0x707
   82f92:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   82f94:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(TASK_DEBUG_MAIN_PIN));
   82f96:	2034      	movs	r0, #52	; 0x34
   82f98:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   82f9a:	f000 031f 	and.w	r3, r0, #31
   82f9e:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   82fa2:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82fa4:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   82fa8:	f200 7007 	addw	r0, r0, #1799	; 0x707
   82fac:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   82fae:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(30));
   82fb0:	201e      	movs	r0, #30
   82fb2:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   82fb4:	f000 031f 	and.w	r3, r0, #31
   82fb8:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   82fbc:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82fbe:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   82fc2:	f200 7007 	addw	r0, r0, #1799	; 0x707
   82fc6:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   82fc8:	6003      	str	r3, [r0, #0]
	ioport_enable_pin(pin_mapper(SWITCH_CURIE_NOETHER_PIN)); /* Switch for switching platforms */
   82fca:	2005      	movs	r0, #5
   82fcc:	47a8      	blx	r5
	return 1U << (pin & 0x1F);
   82fce:	f000 031f 	and.w	r3, r0, #31
   82fd2:	fa04 f303 	lsl.w	r3, r4, r3
	return pin >> 5;
   82fd6:	0940      	lsrs	r0, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82fd8:	f500 1000 	add.w	r0, r0, #2097152	; 0x200000
   82fdc:	f200 7007 	addw	r0, r0, #1799	; 0x707
   82fe0:	0240      	lsls	r0, r0, #9
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   82fe2:	6003      	str	r3, [r0, #0]

	ioport_set_pin_dir(pin_mapper(TASK_DEBUG_MOTOR_PIN), IOPORT_DIR_OUTPUT);
   82fe4:	2035      	movs	r0, #53	; 0x35
   82fe6:	47a8      	blx	r5
	return pin >> 5;
   82fe8:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   82fea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82fee:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82ff2:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   82ff4:	f000 001f 	and.w	r0, r0, #31
   82ff8:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   82ffc:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   82ffe:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(TASK_DEBUG_MAIN_PIN), IOPORT_DIR_OUTPUT);
   83002:	2034      	movs	r0, #52	; 0x34
   83004:	47a8      	blx	r5
	return pin >> 5;
   83006:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83008:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8300c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83010:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   83012:	f000 001f 	and.w	r0, r0, #31
   83016:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8301a:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8301c:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	ioport_set_pin_dir(pin_mapper(SWITCH_CURIE_NOETHER_PIN), IOPORT_DIR_INPUT);
   83020:	2005      	movs	r0, #5
   83022:	47a8      	blx	r5
	return pin >> 5;
   83024:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   83026:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8302a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8302e:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   83030:	f000 001f 	and.w	r0, r0, #31
   83034:	fa04 f000 	lsl.w	r0, r4, r0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   83038:	6158      	str	r0, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8303a:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	/* Enable pullup for switch as well */
	PIOC->PIO_PUER |= PIO_PC25;
   8303e:	4a1d      	ldr	r2, [pc, #116]	; (830b4 <main+0x16c>)
   83040:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83042:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
   83046:	6653      	str	r3, [r2, #100]	; 0x64

	/* Create queue-handle for the motor task */
	motor_task_instruction_handle = xQueueCreate(1, sizeof(struct motor_task_instruction));
   83048:	2200      	movs	r2, #0
   8304a:	2110      	movs	r1, #16
   8304c:	4620      	mov	r0, r4
   8304e:	4b1a      	ldr	r3, [pc, #104]	; (830b8 <main+0x170>)
   83050:	4798      	blx	r3
   83052:	4b1a      	ldr	r3, [pc, #104]	; (830bc <main+0x174>)
   83054:	6018      	str	r0, [r3, #0]
 
	/* Create our tasks for the program */
	xTaskCreate(motor_task, (const signed char * const) "motor_task", TASK_MOTOR_STACK_SIZE, NULL, TASK_MOTOR_PRIORITY, NULL);
   83056:	2400      	movs	r4, #0
   83058:	9403      	str	r4, [sp, #12]
   8305a:	9402      	str	r4, [sp, #8]
   8305c:	9401      	str	r4, [sp, #4]
   8305e:	2602      	movs	r6, #2
   83060:	9600      	str	r6, [sp, #0]
   83062:	4623      	mov	r3, r4
   83064:	f44f 7200 	mov.w	r2, #512	; 0x200
   83068:	4915      	ldr	r1, [pc, #84]	; (830c0 <main+0x178>)
   8306a:	4816      	ldr	r0, [pc, #88]	; (830c4 <main+0x17c>)
   8306c:	4d16      	ldr	r5, [pc, #88]	; (830c8 <main+0x180>)
   8306e:	47a8      	blx	r5
	xTaskCreate(main_task, (const signed char * const) "main_task", TASK_MAIN_STACK_SIZE, NULL, TASK_MAIN_PRIORITY, NULL);
   83070:	9403      	str	r4, [sp, #12]
   83072:	9402      	str	r4, [sp, #8]
   83074:	9401      	str	r4, [sp, #4]
   83076:	9600      	str	r6, [sp, #0]
   83078:	4623      	mov	r3, r4
   8307a:	f44f 7200 	mov.w	r2, #512	; 0x200
   8307e:	4913      	ldr	r1, [pc, #76]	; (830cc <main+0x184>)
   83080:	4813      	ldr	r0, [pc, #76]	; (830d0 <main+0x188>)
   83082:	47a8      	blx	r5

	vTaskStartScheduler();
   83084:	4b13      	ldr	r3, [pc, #76]	; (830d4 <main+0x18c>)
   83086:	4798      	blx	r3

	return 0;
}
   83088:	4620      	mov	r0, r4
   8308a:	b004      	add	sp, #16
   8308c:	bd70      	pop	{r4, r5, r6, pc}
   8308e:	bf00      	nop
   83090:	000827d9 	.word	0x000827d9
   83094:	0008283d 	.word	0x0008283d
   83098:	00082cf1 	.word	0x00082cf1
   8309c:	000825d5 	.word	0x000825d5
   830a0:	00081c85 	.word	0x00081c85
   830a4:	00081b71 	.word	0x00081b71
   830a8:	40090000 	.word	0x40090000
   830ac:	00080161 	.word	0x00080161
   830b0:	000823f5 	.word	0x000823f5
   830b4:	400e1200 	.word	0x400e1200
   830b8:	000809fd 	.word	0x000809fd
   830bc:	2007ae94 	.word	0x2007ae94
   830c0:	00086f9c 	.word	0x00086f9c
   830c4:	00082021 	.word	0x00082021
   830c8:	00080e19 	.word	0x00080e19
   830cc:	00086fa8 	.word	0x00086fa8
   830d0:	00082155 	.word	0x00082155
   830d4:	0008101d 	.word	0x0008101d

000830d8 <atan>:
   830d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   830dc:	4bc2      	ldr	r3, [pc, #776]	; (833e8 <atan+0x310>)
   830de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
   830e2:	429e      	cmp	r6, r3
   830e4:	460d      	mov	r5, r1
   830e6:	468a      	mov	sl, r1
   830e8:	4604      	mov	r4, r0
   830ea:	dd10      	ble.n	8310e <atan+0x36>
   830ec:	4bbf      	ldr	r3, [pc, #764]	; (833ec <atan+0x314>)
   830ee:	429e      	cmp	r6, r3
   830f0:	f300 80b5 	bgt.w	8325e <atan+0x186>
   830f4:	f000 80b0 	beq.w	83258 <atan+0x180>
   830f8:	4bbd      	ldr	r3, [pc, #756]	; (833f0 <atan+0x318>)
   830fa:	49be      	ldr	r1, [pc, #760]	; (833f4 <atan+0x31c>)
   830fc:	4cbe      	ldr	r4, [pc, #760]	; (833f8 <atan+0x320>)
   830fe:	f1ba 0f00 	cmp.w	sl, #0
   83102:	bfd8      	it	le
   83104:	460b      	movle	r3, r1
   83106:	4620      	mov	r0, r4
   83108:	4619      	mov	r1, r3
   8310a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8310e:	4bbb      	ldr	r3, [pc, #748]	; (833fc <atan+0x324>)
   83110:	429e      	cmp	r6, r3
   83112:	f300 80c1 	bgt.w	83298 <atan+0x1c0>
   83116:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
   8311a:	429e      	cmp	r6, r3
   8311c:	f340 80ab 	ble.w	83276 <atan+0x19e>
   83120:	f04f 3bff 	mov.w	fp, #4294967295
   83124:	4622      	mov	r2, r4
   83126:	462b      	mov	r3, r5
   83128:	4620      	mov	r0, r4
   8312a:	4629      	mov	r1, r5
   8312c:	f000 fc4e 	bl	839cc <__aeabi_dmul>
   83130:	4602      	mov	r2, r0
   83132:	460b      	mov	r3, r1
   83134:	4680      	mov	r8, r0
   83136:	4689      	mov	r9, r1
   83138:	f000 fc48 	bl	839cc <__aeabi_dmul>
   8313c:	a392      	add	r3, pc, #584	; (adr r3, 83388 <atan+0x2b0>)
   8313e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83142:	4606      	mov	r6, r0
   83144:	460f      	mov	r7, r1
   83146:	f000 fc41 	bl	839cc <__aeabi_dmul>
   8314a:	a391      	add	r3, pc, #580	; (adr r3, 83390 <atan+0x2b8>)
   8314c:	e9d3 2300 	ldrd	r2, r3, [r3]
   83150:	f000 fa8a 	bl	83668 <__adddf3>
   83154:	4632      	mov	r2, r6
   83156:	463b      	mov	r3, r7
   83158:	f000 fc38 	bl	839cc <__aeabi_dmul>
   8315c:	a38e      	add	r3, pc, #568	; (adr r3, 83398 <atan+0x2c0>)
   8315e:	e9d3 2300 	ldrd	r2, r3, [r3]
   83162:	f000 fa81 	bl	83668 <__adddf3>
   83166:	4632      	mov	r2, r6
   83168:	463b      	mov	r3, r7
   8316a:	f000 fc2f 	bl	839cc <__aeabi_dmul>
   8316e:	a38c      	add	r3, pc, #560	; (adr r3, 833a0 <atan+0x2c8>)
   83170:	e9d3 2300 	ldrd	r2, r3, [r3]
   83174:	f000 fa78 	bl	83668 <__adddf3>
   83178:	4632      	mov	r2, r6
   8317a:	463b      	mov	r3, r7
   8317c:	f000 fc26 	bl	839cc <__aeabi_dmul>
   83180:	a389      	add	r3, pc, #548	; (adr r3, 833a8 <atan+0x2d0>)
   83182:	e9d3 2300 	ldrd	r2, r3, [r3]
   83186:	f000 fa6f 	bl	83668 <__adddf3>
   8318a:	4632      	mov	r2, r6
   8318c:	463b      	mov	r3, r7
   8318e:	f000 fc1d 	bl	839cc <__aeabi_dmul>
   83192:	a387      	add	r3, pc, #540	; (adr r3, 833b0 <atan+0x2d8>)
   83194:	e9d3 2300 	ldrd	r2, r3, [r3]
   83198:	f000 fa66 	bl	83668 <__adddf3>
   8319c:	4642      	mov	r2, r8
   8319e:	464b      	mov	r3, r9
   831a0:	f000 fc14 	bl	839cc <__aeabi_dmul>
   831a4:	a384      	add	r3, pc, #528	; (adr r3, 833b8 <atan+0x2e0>)
   831a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   831aa:	4680      	mov	r8, r0
   831ac:	4689      	mov	r9, r1
   831ae:	4630      	mov	r0, r6
   831b0:	4639      	mov	r1, r7
   831b2:	f000 fc0b 	bl	839cc <__aeabi_dmul>
   831b6:	a382      	add	r3, pc, #520	; (adr r3, 833c0 <atan+0x2e8>)
   831b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   831bc:	f000 fa52 	bl	83664 <__aeabi_dsub>
   831c0:	4632      	mov	r2, r6
   831c2:	463b      	mov	r3, r7
   831c4:	f000 fc02 	bl	839cc <__aeabi_dmul>
   831c8:	a37f      	add	r3, pc, #508	; (adr r3, 833c8 <atan+0x2f0>)
   831ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   831ce:	f000 fa49 	bl	83664 <__aeabi_dsub>
   831d2:	4632      	mov	r2, r6
   831d4:	463b      	mov	r3, r7
   831d6:	f000 fbf9 	bl	839cc <__aeabi_dmul>
   831da:	a37d      	add	r3, pc, #500	; (adr r3, 833d0 <atan+0x2f8>)
   831dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   831e0:	f000 fa40 	bl	83664 <__aeabi_dsub>
   831e4:	4632      	mov	r2, r6
   831e6:	463b      	mov	r3, r7
   831e8:	f000 fbf0 	bl	839cc <__aeabi_dmul>
   831ec:	a37a      	add	r3, pc, #488	; (adr r3, 833d8 <atan+0x300>)
   831ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   831f2:	f000 fa37 	bl	83664 <__aeabi_dsub>
   831f6:	4632      	mov	r2, r6
   831f8:	463b      	mov	r3, r7
   831fa:	f000 fbe7 	bl	839cc <__aeabi_dmul>
   831fe:	f1bb 3fff 	cmp.w	fp, #4294967295
   83202:	4602      	mov	r2, r0
   83204:	460b      	mov	r3, r1
   83206:	d06e      	beq.n	832e6 <atan+0x20e>
   83208:	4640      	mov	r0, r8
   8320a:	4649      	mov	r1, r9
   8320c:	f000 fa2c 	bl	83668 <__adddf3>
   83210:	4622      	mov	r2, r4
   83212:	462b      	mov	r3, r5
   83214:	f000 fbda 	bl	839cc <__aeabi_dmul>
   83218:	4e79      	ldr	r6, [pc, #484]	; (83400 <atan+0x328>)
   8321a:	4b7a      	ldr	r3, [pc, #488]	; (83404 <atan+0x32c>)
   8321c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   83220:	445e      	add	r6, fp
   83222:	449b      	add	fp, r3
   83224:	e9db 2300 	ldrd	r2, r3, [fp]
   83228:	f000 fa1c 	bl	83664 <__aeabi_dsub>
   8322c:	4622      	mov	r2, r4
   8322e:	462b      	mov	r3, r5
   83230:	f000 fa18 	bl	83664 <__aeabi_dsub>
   83234:	460b      	mov	r3, r1
   83236:	4602      	mov	r2, r0
   83238:	e9d6 0100 	ldrd	r0, r1, [r6]
   8323c:	f000 fa12 	bl	83664 <__aeabi_dsub>
   83240:	f1ba 0f00 	cmp.w	sl, #0
   83244:	4604      	mov	r4, r0
   83246:	460b      	mov	r3, r1
   83248:	f6bf af5d 	bge.w	83106 <atan+0x2e>
   8324c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   83250:	4620      	mov	r0, r4
   83252:	4619      	mov	r1, r3
   83254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83258:	2800      	cmp	r0, #0
   8325a:	f43f af4d 	beq.w	830f8 <atan+0x20>
   8325e:	4622      	mov	r2, r4
   83260:	462b      	mov	r3, r5
   83262:	4620      	mov	r0, r4
   83264:	4629      	mov	r1, r5
   83266:	f000 f9ff 	bl	83668 <__adddf3>
   8326a:	4604      	mov	r4, r0
   8326c:	460b      	mov	r3, r1
   8326e:	4620      	mov	r0, r4
   83270:	4619      	mov	r1, r3
   83272:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83276:	a35a      	add	r3, pc, #360	; (adr r3, 833e0 <atan+0x308>)
   83278:	e9d3 2300 	ldrd	r2, r3, [r3]
   8327c:	f000 f9f4 	bl	83668 <__adddf3>
   83280:	2200      	movs	r2, #0
   83282:	4b61      	ldr	r3, [pc, #388]	; (83408 <atan+0x330>)
   83284:	f000 fe32 	bl	83eec <__aeabi_dcmpgt>
   83288:	2800      	cmp	r0, #0
   8328a:	f43f af49 	beq.w	83120 <atan+0x48>
   8328e:	462b      	mov	r3, r5
   83290:	4620      	mov	r0, r4
   83292:	4619      	mov	r1, r3
   83294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83298:	f000 f8c0 	bl	8341c <fabs>
   8329c:	4b5b      	ldr	r3, [pc, #364]	; (8340c <atan+0x334>)
   8329e:	4604      	mov	r4, r0
   832a0:	429e      	cmp	r6, r3
   832a2:	460d      	mov	r5, r1
   832a4:	dc30      	bgt.n	83308 <atan+0x230>
   832a6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
   832aa:	429e      	cmp	r6, r3
   832ac:	dc55      	bgt.n	8335a <atan+0x282>
   832ae:	4602      	mov	r2, r0
   832b0:	460b      	mov	r3, r1
   832b2:	f000 f9d9 	bl	83668 <__adddf3>
   832b6:	2200      	movs	r2, #0
   832b8:	4b53      	ldr	r3, [pc, #332]	; (83408 <atan+0x330>)
   832ba:	f000 f9d3 	bl	83664 <__aeabi_dsub>
   832be:	2200      	movs	r2, #0
   832c0:	4606      	mov	r6, r0
   832c2:	460f      	mov	r7, r1
   832c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   832c8:	4620      	mov	r0, r4
   832ca:	4629      	mov	r1, r5
   832cc:	f000 f9cc 	bl	83668 <__adddf3>
   832d0:	4602      	mov	r2, r0
   832d2:	460b      	mov	r3, r1
   832d4:	4630      	mov	r0, r6
   832d6:	4639      	mov	r1, r7
   832d8:	f000 fca2 	bl	83c20 <__aeabi_ddiv>
   832dc:	f04f 0b00 	mov.w	fp, #0
   832e0:	4604      	mov	r4, r0
   832e2:	460d      	mov	r5, r1
   832e4:	e71e      	b.n	83124 <atan+0x4c>
   832e6:	4640      	mov	r0, r8
   832e8:	4649      	mov	r1, r9
   832ea:	f000 f9bd 	bl	83668 <__adddf3>
   832ee:	4622      	mov	r2, r4
   832f0:	462b      	mov	r3, r5
   832f2:	f000 fb6b 	bl	839cc <__aeabi_dmul>
   832f6:	460b      	mov	r3, r1
   832f8:	4602      	mov	r2, r0
   832fa:	4629      	mov	r1, r5
   832fc:	4620      	mov	r0, r4
   832fe:	f000 f9b1 	bl	83664 <__aeabi_dsub>
   83302:	4604      	mov	r4, r0
   83304:	460b      	mov	r3, r1
   83306:	e6fe      	b.n	83106 <atan+0x2e>
   83308:	4b41      	ldr	r3, [pc, #260]	; (83410 <atan+0x338>)
   8330a:	429e      	cmp	r6, r3
   8330c:	dc1a      	bgt.n	83344 <atan+0x26c>
   8330e:	2200      	movs	r2, #0
   83310:	4b40      	ldr	r3, [pc, #256]	; (83414 <atan+0x33c>)
   83312:	f000 f9a7 	bl	83664 <__aeabi_dsub>
   83316:	2200      	movs	r2, #0
   83318:	4606      	mov	r6, r0
   8331a:	460f      	mov	r7, r1
   8331c:	4b3d      	ldr	r3, [pc, #244]	; (83414 <atan+0x33c>)
   8331e:	4620      	mov	r0, r4
   83320:	4629      	mov	r1, r5
   83322:	f000 fb53 	bl	839cc <__aeabi_dmul>
   83326:	2200      	movs	r2, #0
   83328:	4b37      	ldr	r3, [pc, #220]	; (83408 <atan+0x330>)
   8332a:	f000 f99d 	bl	83668 <__adddf3>
   8332e:	4602      	mov	r2, r0
   83330:	460b      	mov	r3, r1
   83332:	4630      	mov	r0, r6
   83334:	4639      	mov	r1, r7
   83336:	f000 fc73 	bl	83c20 <__aeabi_ddiv>
   8333a:	f04f 0b02 	mov.w	fp, #2
   8333e:	4604      	mov	r4, r0
   83340:	460d      	mov	r5, r1
   83342:	e6ef      	b.n	83124 <atan+0x4c>
   83344:	4602      	mov	r2, r0
   83346:	460b      	mov	r3, r1
   83348:	2000      	movs	r0, #0
   8334a:	4933      	ldr	r1, [pc, #204]	; (83418 <atan+0x340>)
   8334c:	f000 fc68 	bl	83c20 <__aeabi_ddiv>
   83350:	f04f 0b03 	mov.w	fp, #3
   83354:	4604      	mov	r4, r0
   83356:	460d      	mov	r5, r1
   83358:	e6e4      	b.n	83124 <atan+0x4c>
   8335a:	2200      	movs	r2, #0
   8335c:	4b2a      	ldr	r3, [pc, #168]	; (83408 <atan+0x330>)
   8335e:	f000 f981 	bl	83664 <__aeabi_dsub>
   83362:	2200      	movs	r2, #0
   83364:	4606      	mov	r6, r0
   83366:	460f      	mov	r7, r1
   83368:	4b27      	ldr	r3, [pc, #156]	; (83408 <atan+0x330>)
   8336a:	4620      	mov	r0, r4
   8336c:	4629      	mov	r1, r5
   8336e:	f000 f97b 	bl	83668 <__adddf3>
   83372:	4602      	mov	r2, r0
   83374:	460b      	mov	r3, r1
   83376:	4630      	mov	r0, r6
   83378:	4639      	mov	r1, r7
   8337a:	f000 fc51 	bl	83c20 <__aeabi_ddiv>
   8337e:	f04f 0b01 	mov.w	fp, #1
   83382:	4604      	mov	r4, r0
   83384:	460d      	mov	r5, r1
   83386:	e6cd      	b.n	83124 <atan+0x4c>
   83388:	e322da11 	.word	0xe322da11
   8338c:	3f90ad3a 	.word	0x3f90ad3a
   83390:	24760deb 	.word	0x24760deb
   83394:	3fa97b4b 	.word	0x3fa97b4b
   83398:	a0d03d51 	.word	0xa0d03d51
   8339c:	3fb10d66 	.word	0x3fb10d66
   833a0:	c54c206e 	.word	0xc54c206e
   833a4:	3fb745cd 	.word	0x3fb745cd
   833a8:	920083ff 	.word	0x920083ff
   833ac:	3fc24924 	.word	0x3fc24924
   833b0:	5555550d 	.word	0x5555550d
   833b4:	3fd55555 	.word	0x3fd55555
   833b8:	2c6a6c2f 	.word	0x2c6a6c2f
   833bc:	bfa2b444 	.word	0xbfa2b444
   833c0:	52defd9a 	.word	0x52defd9a
   833c4:	3fadde2d 	.word	0x3fadde2d
   833c8:	af749a6d 	.word	0xaf749a6d
   833cc:	3fb3b0f2 	.word	0x3fb3b0f2
   833d0:	fe231671 	.word	0xfe231671
   833d4:	3fbc71c6 	.word	0x3fbc71c6
   833d8:	9998ebc4 	.word	0x9998ebc4
   833dc:	3fc99999 	.word	0x3fc99999
   833e0:	8800759c 	.word	0x8800759c
   833e4:	7e37e43c 	.word	0x7e37e43c
   833e8:	440fffff 	.word	0x440fffff
   833ec:	7ff00000 	.word	0x7ff00000
   833f0:	3ff921fb 	.word	0x3ff921fb
   833f4:	bff921fb 	.word	0xbff921fb
   833f8:	54442d18 	.word	0x54442d18
   833fc:	3fdbffff 	.word	0x3fdbffff
   83400:	00086fb8 	.word	0x00086fb8
   83404:	00086fd8 	.word	0x00086fd8
   83408:	3ff00000 	.word	0x3ff00000
   8340c:	3ff2ffff 	.word	0x3ff2ffff
   83410:	40037fff 	.word	0x40037fff
   83414:	3ff80000 	.word	0x3ff80000
   83418:	bff00000 	.word	0xbff00000

0008341c <fabs>:
   8341c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83420:	4770      	bx	lr
   83422:	bf00      	nop

00083424 <sqrt>:
   83424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83428:	b08b      	sub	sp, #44	; 0x2c
   8342a:	4604      	mov	r4, r0
   8342c:	460d      	mov	r5, r1
   8342e:	f000 f857 	bl	834e0 <__ieee754_sqrt>
   83432:	4b29      	ldr	r3, [pc, #164]	; (834d8 <sqrt+0xb4>)
   83434:	4606      	mov	r6, r0
   83436:	f993 a000 	ldrsb.w	sl, [r3]
   8343a:	460f      	mov	r7, r1
   8343c:	f1ba 3fff 	cmp.w	sl, #4294967295
   83440:	d012      	beq.n	83468 <sqrt+0x44>
   83442:	4622      	mov	r2, r4
   83444:	462b      	mov	r3, r5
   83446:	4620      	mov	r0, r4
   83448:	4629      	mov	r1, r5
   8344a:	f000 fd59 	bl	83f00 <__aeabi_dcmpun>
   8344e:	4683      	mov	fp, r0
   83450:	b950      	cbnz	r0, 83468 <sqrt+0x44>
   83452:	f04f 0800 	mov.w	r8, #0
   83456:	f04f 0900 	mov.w	r9, #0
   8345a:	4620      	mov	r0, r4
   8345c:	4629      	mov	r1, r5
   8345e:	4642      	mov	r2, r8
   83460:	464b      	mov	r3, r9
   83462:	f000 fd25 	bl	83eb0 <__aeabi_dcmplt>
   83466:	b920      	cbnz	r0, 83472 <sqrt+0x4e>
   83468:	4630      	mov	r0, r6
   8346a:	4639      	mov	r1, r7
   8346c:	b00b      	add	sp, #44	; 0x2c
   8346e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83472:	2201      	movs	r2, #1
   83474:	4b19      	ldr	r3, [pc, #100]	; (834dc <sqrt+0xb8>)
   83476:	f8cd b020 	str.w	fp, [sp, #32]
   8347a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   8347e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   83482:	e88d 000c 	stmia.w	sp, {r2, r3}
   83486:	f1ba 0f00 	cmp.w	sl, #0
   8348a:	d017      	beq.n	834bc <sqrt+0x98>
   8348c:	4642      	mov	r2, r8
   8348e:	464b      	mov	r3, r9
   83490:	4640      	mov	r0, r8
   83492:	4649      	mov	r1, r9
   83494:	f000 fbc4 	bl	83c20 <__aeabi_ddiv>
   83498:	f1ba 0f02 	cmp.w	sl, #2
   8349c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   834a0:	d10e      	bne.n	834c0 <sqrt+0x9c>
   834a2:	f000 fd8b 	bl	83fbc <__errno>
   834a6:	2321      	movs	r3, #33	; 0x21
   834a8:	6003      	str	r3, [r0, #0]
   834aa:	9b08      	ldr	r3, [sp, #32]
   834ac:	b973      	cbnz	r3, 834cc <sqrt+0xa8>
   834ae:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   834b2:	4630      	mov	r0, r6
   834b4:	4639      	mov	r1, r7
   834b6:	b00b      	add	sp, #44	; 0x2c
   834b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   834bc:	e9cd 8906 	strd	r8, r9, [sp, #24]
   834c0:	4668      	mov	r0, sp
   834c2:	f000 f8c9 	bl	83658 <matherr>
   834c6:	2800      	cmp	r0, #0
   834c8:	d1ef      	bne.n	834aa <sqrt+0x86>
   834ca:	e7ea      	b.n	834a2 <sqrt+0x7e>
   834cc:	f000 fd76 	bl	83fbc <__errno>
   834d0:	9b08      	ldr	r3, [sp, #32]
   834d2:	6003      	str	r3, [r0, #0]
   834d4:	e7eb      	b.n	834ae <sqrt+0x8a>
   834d6:	bf00      	nop
   834d8:	200701a8 	.word	0x200701a8
   834dc:	00086ff8 	.word	0x00086ff8

000834e0 <__ieee754_sqrt>:
   834e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   834e4:	4f5b      	ldr	r7, [pc, #364]	; (83654 <__ieee754_sqrt+0x174>)
   834e6:	4605      	mov	r5, r0
   834e8:	438f      	bics	r7, r1
   834ea:	460c      	mov	r4, r1
   834ec:	f000 8092 	beq.w	83614 <__ieee754_sqrt+0x134>
   834f0:	2900      	cmp	r1, #0
   834f2:	460b      	mov	r3, r1
   834f4:	4602      	mov	r2, r0
   834f6:	dd6f      	ble.n	835d8 <__ieee754_sqrt+0xf8>
   834f8:	150f      	asrs	r7, r1, #20
   834fa:	d07b      	beq.n	835f4 <__ieee754_sqrt+0x114>
   834fc:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   83500:	f3c3 0313 	ubfx	r3, r3, #0, #20
   83504:	07f8      	lsls	r0, r7, #31
   83506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8350a:	d45c      	bmi.n	835c6 <__ieee754_sqrt+0xe6>
   8350c:	2600      	movs	r6, #0
   8350e:	2016      	movs	r0, #22
   83510:	46b6      	mov	lr, r6
   83512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   83516:	eb03 74d2 	add.w	r4, r3, r2, lsr #31
   8351a:	107f      	asrs	r7, r7, #1
   8351c:	4423      	add	r3, r4
   8351e:	0052      	lsls	r2, r2, #1
   83520:	eb0e 0401 	add.w	r4, lr, r1
   83524:	429c      	cmp	r4, r3
   83526:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   8352a:	ea4f 0242 	mov.w	r2, r2, lsl #1
   8352e:	dc03      	bgt.n	83538 <__ieee754_sqrt+0x58>
   83530:	1b1b      	subs	r3, r3, r4
   83532:	eb04 0e01 	add.w	lr, r4, r1
   83536:	440e      	add	r6, r1
   83538:	3801      	subs	r0, #1
   8353a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   8353e:	ea4f 0151 	mov.w	r1, r1, lsr #1
   83542:	d1ed      	bne.n	83520 <__ieee754_sqrt+0x40>
   83544:	2420      	movs	r4, #32
   83546:	4684      	mov	ip, r0
   83548:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   8354c:	e009      	b.n	83562 <__ieee754_sqrt+0x82>
   8354e:	d020      	beq.n	83592 <__ieee754_sqrt+0xb2>
   83550:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   83554:	3c01      	subs	r4, #1
   83556:	ea4f 0151 	mov.w	r1, r1, lsr #1
   8355a:	442b      	add	r3, r5
   8355c:	ea4f 0242 	mov.w	r2, r2, lsl #1
   83560:	d020      	beq.n	835a4 <__ieee754_sqrt+0xc4>
   83562:	4573      	cmp	r3, lr
   83564:	eb01 050c 	add.w	r5, r1, ip
   83568:	ddf1      	ble.n	8354e <__ieee754_sqrt+0x6e>
   8356a:	2d00      	cmp	r5, #0
   8356c:	eb05 0c01 	add.w	ip, r5, r1
   83570:	db09      	blt.n	83586 <__ieee754_sqrt+0xa6>
   83572:	46f0      	mov	r8, lr
   83574:	4295      	cmp	r5, r2
   83576:	eba3 030e 	sub.w	r3, r3, lr
   8357a:	d900      	bls.n	8357e <__ieee754_sqrt+0x9e>
   8357c:	3b01      	subs	r3, #1
   8357e:	46c6      	mov	lr, r8
   83580:	1b52      	subs	r2, r2, r5
   83582:	4408      	add	r0, r1
   83584:	e7e4      	b.n	83550 <__ieee754_sqrt+0x70>
   83586:	f1bc 0f00 	cmp.w	ip, #0
   8358a:	dbf2      	blt.n	83572 <__ieee754_sqrt+0x92>
   8358c:	f10e 0801 	add.w	r8, lr, #1
   83590:	e7f0      	b.n	83574 <__ieee754_sqrt+0x94>
   83592:	4295      	cmp	r5, r2
   83594:	d8dc      	bhi.n	83550 <__ieee754_sqrt+0x70>
   83596:	2d00      	cmp	r5, #0
   83598:	eb05 0c01 	add.w	ip, r5, r1
   8359c:	db44      	blt.n	83628 <__ieee754_sqrt+0x148>
   8359e:	4698      	mov	r8, r3
   835a0:	2300      	movs	r3, #0
   835a2:	e7ec      	b.n	8357e <__ieee754_sqrt+0x9e>
   835a4:	4313      	orrs	r3, r2
   835a6:	d113      	bne.n	835d0 <__ieee754_sqrt+0xf0>
   835a8:	0840      	lsrs	r0, r0, #1
   835aa:	1073      	asrs	r3, r6, #1
   835ac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
   835b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   835b4:	eb03 5907 	add.w	r9, r3, r7, lsl #20
   835b8:	4649      	mov	r1, r9
   835ba:	07f2      	lsls	r2, r6, #31
   835bc:	bf48      	it	mi
   835be:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   835c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   835c6:	005b      	lsls	r3, r3, #1
   835c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   835cc:	0052      	lsls	r2, r2, #1
   835ce:	e79d      	b.n	8350c <__ieee754_sqrt+0x2c>
   835d0:	1c41      	adds	r1, r0, #1
   835d2:	d02d      	beq.n	83630 <__ieee754_sqrt+0x150>
   835d4:	3001      	adds	r0, #1
   835d6:	e7e7      	b.n	835a8 <__ieee754_sqrt+0xc8>
   835d8:	4606      	mov	r6, r0
   835da:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
   835de:	433e      	orrs	r6, r7
   835e0:	d0ef      	beq.n	835c2 <__ieee754_sqrt+0xe2>
   835e2:	bb69      	cbnz	r1, 83640 <__ieee754_sqrt+0x160>
   835e4:	460f      	mov	r7, r1
   835e6:	0ad3      	lsrs	r3, r2, #11
   835e8:	3f15      	subs	r7, #21
   835ea:	0552      	lsls	r2, r2, #21
   835ec:	2b00      	cmp	r3, #0
   835ee:	d0fa      	beq.n	835e6 <__ieee754_sqrt+0x106>
   835f0:	02de      	lsls	r6, r3, #11
   835f2:	d420      	bmi.n	83636 <__ieee754_sqrt+0x156>
   835f4:	2400      	movs	r4, #0
   835f6:	e000      	b.n	835fa <__ieee754_sqrt+0x11a>
   835f8:	4604      	mov	r4, r0
   835fa:	005b      	lsls	r3, r3, #1
   835fc:	02dd      	lsls	r5, r3, #11
   835fe:	f104 0001 	add.w	r0, r4, #1
   83602:	d5f9      	bpl.n	835f8 <__ieee754_sqrt+0x118>
   83604:	f1c0 0120 	rsb	r1, r0, #32
   83608:	fa22 f101 	lsr.w	r1, r2, r1
   8360c:	430b      	orrs	r3, r1
   8360e:	1b3f      	subs	r7, r7, r4
   83610:	4082      	lsls	r2, r0
   83612:	e773      	b.n	834fc <__ieee754_sqrt+0x1c>
   83614:	4602      	mov	r2, r0
   83616:	460b      	mov	r3, r1
   83618:	f000 f9d8 	bl	839cc <__aeabi_dmul>
   8361c:	462a      	mov	r2, r5
   8361e:	4623      	mov	r3, r4
   83620:	f000 f822 	bl	83668 <__adddf3>
   83624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83628:	f1bc 0f00 	cmp.w	ip, #0
   8362c:	daae      	bge.n	8358c <__ieee754_sqrt+0xac>
   8362e:	e7b6      	b.n	8359e <__ieee754_sqrt+0xbe>
   83630:	3601      	adds	r6, #1
   83632:	4620      	mov	r0, r4
   83634:	e7b9      	b.n	835aa <__ieee754_sqrt+0xca>
   83636:	2000      	movs	r0, #0
   83638:	2120      	movs	r1, #32
   8363a:	f04f 34ff 	mov.w	r4, #4294967295
   8363e:	e7e3      	b.n	83608 <__ieee754_sqrt+0x128>
   83640:	4602      	mov	r2, r0
   83642:	460b      	mov	r3, r1
   83644:	f000 f80e 	bl	83664 <__aeabi_dsub>
   83648:	4602      	mov	r2, r0
   8364a:	460b      	mov	r3, r1
   8364c:	f000 fae8 	bl	83c20 <__aeabi_ddiv>
   83650:	e7b7      	b.n	835c2 <__ieee754_sqrt+0xe2>
   83652:	bf00      	nop
   83654:	7ff00000 	.word	0x7ff00000

00083658 <matherr>:
   83658:	2000      	movs	r0, #0
   8365a:	4770      	bx	lr

0008365c <__aeabi_drsub>:
   8365c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83660:	e002      	b.n	83668 <__adddf3>
   83662:	bf00      	nop

00083664 <__aeabi_dsub>:
   83664:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083668 <__adddf3>:
   83668:	b530      	push	{r4, r5, lr}
   8366a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8366e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   83672:	ea94 0f05 	teq	r4, r5
   83676:	bf08      	it	eq
   83678:	ea90 0f02 	teqeq	r0, r2
   8367c:	bf1f      	itttt	ne
   8367e:	ea54 0c00 	orrsne.w	ip, r4, r0
   83682:	ea55 0c02 	orrsne.w	ip, r5, r2
   83686:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8368a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8368e:	f000 80e2 	beq.w	83856 <__adddf3+0x1ee>
   83692:	ea4f 5454 	mov.w	r4, r4, lsr #21
   83696:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8369a:	bfb8      	it	lt
   8369c:	426d      	neglt	r5, r5
   8369e:	dd0c      	ble.n	836ba <__adddf3+0x52>
   836a0:	442c      	add	r4, r5
   836a2:	ea80 0202 	eor.w	r2, r0, r2
   836a6:	ea81 0303 	eor.w	r3, r1, r3
   836aa:	ea82 0000 	eor.w	r0, r2, r0
   836ae:	ea83 0101 	eor.w	r1, r3, r1
   836b2:	ea80 0202 	eor.w	r2, r0, r2
   836b6:	ea81 0303 	eor.w	r3, r1, r3
   836ba:	2d36      	cmp	r5, #54	; 0x36
   836bc:	bf88      	it	hi
   836be:	bd30      	pophi	{r4, r5, pc}
   836c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   836c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   836c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   836cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   836d0:	d002      	beq.n	836d8 <__adddf3+0x70>
   836d2:	4240      	negs	r0, r0
   836d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   836d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   836dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
   836e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   836e4:	d002      	beq.n	836ec <__adddf3+0x84>
   836e6:	4252      	negs	r2, r2
   836e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   836ec:	ea94 0f05 	teq	r4, r5
   836f0:	f000 80a7 	beq.w	83842 <__adddf3+0x1da>
   836f4:	f1a4 0401 	sub.w	r4, r4, #1
   836f8:	f1d5 0e20 	rsbs	lr, r5, #32
   836fc:	db0d      	blt.n	8371a <__adddf3+0xb2>
   836fe:	fa02 fc0e 	lsl.w	ip, r2, lr
   83702:	fa22 f205 	lsr.w	r2, r2, r5
   83706:	1880      	adds	r0, r0, r2
   83708:	f141 0100 	adc.w	r1, r1, #0
   8370c:	fa03 f20e 	lsl.w	r2, r3, lr
   83710:	1880      	adds	r0, r0, r2
   83712:	fa43 f305 	asr.w	r3, r3, r5
   83716:	4159      	adcs	r1, r3
   83718:	e00e      	b.n	83738 <__adddf3+0xd0>
   8371a:	f1a5 0520 	sub.w	r5, r5, #32
   8371e:	f10e 0e20 	add.w	lr, lr, #32
   83722:	2a01      	cmp	r2, #1
   83724:	fa03 fc0e 	lsl.w	ip, r3, lr
   83728:	bf28      	it	cs
   8372a:	f04c 0c02 	orrcs.w	ip, ip, #2
   8372e:	fa43 f305 	asr.w	r3, r3, r5
   83732:	18c0      	adds	r0, r0, r3
   83734:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   83738:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8373c:	d507      	bpl.n	8374e <__adddf3+0xe6>
   8373e:	f04f 0e00 	mov.w	lr, #0
   83742:	f1dc 0c00 	rsbs	ip, ip, #0
   83746:	eb7e 0000 	sbcs.w	r0, lr, r0
   8374a:	eb6e 0101 	sbc.w	r1, lr, r1
   8374e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   83752:	d31b      	bcc.n	8378c <__adddf3+0x124>
   83754:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83758:	d30c      	bcc.n	83774 <__adddf3+0x10c>
   8375a:	0849      	lsrs	r1, r1, #1
   8375c:	ea5f 0030 	movs.w	r0, r0, rrx
   83760:	ea4f 0c3c 	mov.w	ip, ip, rrx
   83764:	f104 0401 	add.w	r4, r4, #1
   83768:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8376c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83770:	f080 809a 	bcs.w	838a8 <__adddf3+0x240>
   83774:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83778:	bf08      	it	eq
   8377a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8377e:	f150 0000 	adcs.w	r0, r0, #0
   83782:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83786:	ea41 0105 	orr.w	r1, r1, r5
   8378a:	bd30      	pop	{r4, r5, pc}
   8378c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83790:	4140      	adcs	r0, r0
   83792:	eb41 0101 	adc.w	r1, r1, r1
   83796:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8379a:	f1a4 0401 	sub.w	r4, r4, #1
   8379e:	d1e9      	bne.n	83774 <__adddf3+0x10c>
   837a0:	f091 0f00 	teq	r1, #0
   837a4:	bf04      	itt	eq
   837a6:	4601      	moveq	r1, r0
   837a8:	2000      	moveq	r0, #0
   837aa:	fab1 f381 	clz	r3, r1
   837ae:	bf08      	it	eq
   837b0:	3320      	addeq	r3, #32
   837b2:	f1a3 030b 	sub.w	r3, r3, #11
   837b6:	f1b3 0220 	subs.w	r2, r3, #32
   837ba:	da0c      	bge.n	837d6 <__adddf3+0x16e>
   837bc:	320c      	adds	r2, #12
   837be:	dd08      	ble.n	837d2 <__adddf3+0x16a>
   837c0:	f102 0c14 	add.w	ip, r2, #20
   837c4:	f1c2 020c 	rsb	r2, r2, #12
   837c8:	fa01 f00c 	lsl.w	r0, r1, ip
   837cc:	fa21 f102 	lsr.w	r1, r1, r2
   837d0:	e00c      	b.n	837ec <__adddf3+0x184>
   837d2:	f102 0214 	add.w	r2, r2, #20
   837d6:	bfd8      	it	le
   837d8:	f1c2 0c20 	rsble	ip, r2, #32
   837dc:	fa01 f102 	lsl.w	r1, r1, r2
   837e0:	fa20 fc0c 	lsr.w	ip, r0, ip
   837e4:	bfdc      	itt	le
   837e6:	ea41 010c 	orrle.w	r1, r1, ip
   837ea:	4090      	lslle	r0, r2
   837ec:	1ae4      	subs	r4, r4, r3
   837ee:	bfa2      	ittt	ge
   837f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   837f4:	4329      	orrge	r1, r5
   837f6:	bd30      	popge	{r4, r5, pc}
   837f8:	ea6f 0404 	mvn.w	r4, r4
   837fc:	3c1f      	subs	r4, #31
   837fe:	da1c      	bge.n	8383a <__adddf3+0x1d2>
   83800:	340c      	adds	r4, #12
   83802:	dc0e      	bgt.n	83822 <__adddf3+0x1ba>
   83804:	f104 0414 	add.w	r4, r4, #20
   83808:	f1c4 0220 	rsb	r2, r4, #32
   8380c:	fa20 f004 	lsr.w	r0, r0, r4
   83810:	fa01 f302 	lsl.w	r3, r1, r2
   83814:	ea40 0003 	orr.w	r0, r0, r3
   83818:	fa21 f304 	lsr.w	r3, r1, r4
   8381c:	ea45 0103 	orr.w	r1, r5, r3
   83820:	bd30      	pop	{r4, r5, pc}
   83822:	f1c4 040c 	rsb	r4, r4, #12
   83826:	f1c4 0220 	rsb	r2, r4, #32
   8382a:	fa20 f002 	lsr.w	r0, r0, r2
   8382e:	fa01 f304 	lsl.w	r3, r1, r4
   83832:	ea40 0003 	orr.w	r0, r0, r3
   83836:	4629      	mov	r1, r5
   83838:	bd30      	pop	{r4, r5, pc}
   8383a:	fa21 f004 	lsr.w	r0, r1, r4
   8383e:	4629      	mov	r1, r5
   83840:	bd30      	pop	{r4, r5, pc}
   83842:	f094 0f00 	teq	r4, #0
   83846:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8384a:	bf06      	itte	eq
   8384c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83850:	3401      	addeq	r4, #1
   83852:	3d01      	subne	r5, #1
   83854:	e74e      	b.n	836f4 <__adddf3+0x8c>
   83856:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8385a:	bf18      	it	ne
   8385c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83860:	d029      	beq.n	838b6 <__adddf3+0x24e>
   83862:	ea94 0f05 	teq	r4, r5
   83866:	bf08      	it	eq
   83868:	ea90 0f02 	teqeq	r0, r2
   8386c:	d005      	beq.n	8387a <__adddf3+0x212>
   8386e:	ea54 0c00 	orrs.w	ip, r4, r0
   83872:	bf04      	itt	eq
   83874:	4619      	moveq	r1, r3
   83876:	4610      	moveq	r0, r2
   83878:	bd30      	pop	{r4, r5, pc}
   8387a:	ea91 0f03 	teq	r1, r3
   8387e:	bf1e      	ittt	ne
   83880:	2100      	movne	r1, #0
   83882:	2000      	movne	r0, #0
   83884:	bd30      	popne	{r4, r5, pc}
   83886:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8388a:	d105      	bne.n	83898 <__adddf3+0x230>
   8388c:	0040      	lsls	r0, r0, #1
   8388e:	4149      	adcs	r1, r1
   83890:	bf28      	it	cs
   83892:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   83896:	bd30      	pop	{r4, r5, pc}
   83898:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8389c:	bf3c      	itt	cc
   8389e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   838a2:	bd30      	popcc	{r4, r5, pc}
   838a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   838a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   838ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   838b0:	f04f 0000 	mov.w	r0, #0
   838b4:	bd30      	pop	{r4, r5, pc}
   838b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   838ba:	bf1a      	itte	ne
   838bc:	4619      	movne	r1, r3
   838be:	4610      	movne	r0, r2
   838c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   838c4:	bf1c      	itt	ne
   838c6:	460b      	movne	r3, r1
   838c8:	4602      	movne	r2, r0
   838ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   838ce:	bf06      	itte	eq
   838d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   838d4:	ea91 0f03 	teqeq	r1, r3
   838d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   838dc:	bd30      	pop	{r4, r5, pc}
   838de:	bf00      	nop

000838e0 <__aeabi_ui2d>:
   838e0:	f090 0f00 	teq	r0, #0
   838e4:	bf04      	itt	eq
   838e6:	2100      	moveq	r1, #0
   838e8:	4770      	bxeq	lr
   838ea:	b530      	push	{r4, r5, lr}
   838ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
   838f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   838f4:	f04f 0500 	mov.w	r5, #0
   838f8:	f04f 0100 	mov.w	r1, #0
   838fc:	e750      	b.n	837a0 <__adddf3+0x138>
   838fe:	bf00      	nop

00083900 <__aeabi_i2d>:
   83900:	f090 0f00 	teq	r0, #0
   83904:	bf04      	itt	eq
   83906:	2100      	moveq	r1, #0
   83908:	4770      	bxeq	lr
   8390a:	b530      	push	{r4, r5, lr}
   8390c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83910:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83914:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   83918:	bf48      	it	mi
   8391a:	4240      	negmi	r0, r0
   8391c:	f04f 0100 	mov.w	r1, #0
   83920:	e73e      	b.n	837a0 <__adddf3+0x138>
   83922:	bf00      	nop

00083924 <__aeabi_f2d>:
   83924:	0042      	lsls	r2, r0, #1
   83926:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8392a:	ea4f 0131 	mov.w	r1, r1, rrx
   8392e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   83932:	bf1f      	itttt	ne
   83934:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   83938:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8393c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   83940:	4770      	bxne	lr
   83942:	f092 0f00 	teq	r2, #0
   83946:	bf14      	ite	ne
   83948:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8394c:	4770      	bxeq	lr
   8394e:	b530      	push	{r4, r5, lr}
   83950:	f44f 7460 	mov.w	r4, #896	; 0x380
   83954:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83958:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8395c:	e720      	b.n	837a0 <__adddf3+0x138>
   8395e:	bf00      	nop

00083960 <__aeabi_ul2d>:
   83960:	ea50 0201 	orrs.w	r2, r0, r1
   83964:	bf08      	it	eq
   83966:	4770      	bxeq	lr
   83968:	b530      	push	{r4, r5, lr}
   8396a:	f04f 0500 	mov.w	r5, #0
   8396e:	e00a      	b.n	83986 <__aeabi_l2d+0x16>

00083970 <__aeabi_l2d>:
   83970:	ea50 0201 	orrs.w	r2, r0, r1
   83974:	bf08      	it	eq
   83976:	4770      	bxeq	lr
   83978:	b530      	push	{r4, r5, lr}
   8397a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8397e:	d502      	bpl.n	83986 <__aeabi_l2d+0x16>
   83980:	4240      	negs	r0, r0
   83982:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83986:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8398a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8398e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   83992:	f43f aedc 	beq.w	8374e <__adddf3+0xe6>
   83996:	f04f 0203 	mov.w	r2, #3
   8399a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8399e:	bf18      	it	ne
   839a0:	3203      	addne	r2, #3
   839a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   839a6:	bf18      	it	ne
   839a8:	3203      	addne	r2, #3
   839aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   839ae:	f1c2 0320 	rsb	r3, r2, #32
   839b2:	fa00 fc03 	lsl.w	ip, r0, r3
   839b6:	fa20 f002 	lsr.w	r0, r0, r2
   839ba:	fa01 fe03 	lsl.w	lr, r1, r3
   839be:	ea40 000e 	orr.w	r0, r0, lr
   839c2:	fa21 f102 	lsr.w	r1, r1, r2
   839c6:	4414      	add	r4, r2
   839c8:	e6c1      	b.n	8374e <__adddf3+0xe6>
   839ca:	bf00      	nop

000839cc <__aeabi_dmul>:
   839cc:	b570      	push	{r4, r5, r6, lr}
   839ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   839d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   839d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   839da:	bf1d      	ittte	ne
   839dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   839e0:	ea94 0f0c 	teqne	r4, ip
   839e4:	ea95 0f0c 	teqne	r5, ip
   839e8:	f000 f8de 	bleq	83ba8 <__aeabi_dmul+0x1dc>
   839ec:	442c      	add	r4, r5
   839ee:	ea81 0603 	eor.w	r6, r1, r3
   839f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   839f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   839fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   839fe:	bf18      	it	ne
   83a00:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   83a04:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83a0c:	d038      	beq.n	83a80 <__aeabi_dmul+0xb4>
   83a0e:	fba0 ce02 	umull	ip, lr, r0, r2
   83a12:	f04f 0500 	mov.w	r5, #0
   83a16:	fbe1 e502 	umlal	lr, r5, r1, r2
   83a1a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   83a1e:	fbe0 e503 	umlal	lr, r5, r0, r3
   83a22:	f04f 0600 	mov.w	r6, #0
   83a26:	fbe1 5603 	umlal	r5, r6, r1, r3
   83a2a:	f09c 0f00 	teq	ip, #0
   83a2e:	bf18      	it	ne
   83a30:	f04e 0e01 	orrne.w	lr, lr, #1
   83a34:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   83a38:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   83a3c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   83a40:	d204      	bcs.n	83a4c <__aeabi_dmul+0x80>
   83a42:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   83a46:	416d      	adcs	r5, r5
   83a48:	eb46 0606 	adc.w	r6, r6, r6
   83a4c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   83a50:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   83a54:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   83a58:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   83a5c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   83a60:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83a64:	bf88      	it	hi
   83a66:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83a6a:	d81e      	bhi.n	83aaa <__aeabi_dmul+0xde>
   83a6c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   83a70:	bf08      	it	eq
   83a72:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   83a76:	f150 0000 	adcs.w	r0, r0, #0
   83a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83a7e:	bd70      	pop	{r4, r5, r6, pc}
   83a80:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   83a84:	ea46 0101 	orr.w	r1, r6, r1
   83a88:	ea40 0002 	orr.w	r0, r0, r2
   83a8c:	ea81 0103 	eor.w	r1, r1, r3
   83a90:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   83a94:	bfc2      	ittt	gt
   83a96:	ebd4 050c 	rsbsgt	r5, r4, ip
   83a9a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83a9e:	bd70      	popgt	{r4, r5, r6, pc}
   83aa0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83aa4:	f04f 0e00 	mov.w	lr, #0
   83aa8:	3c01      	subs	r4, #1
   83aaa:	f300 80ab 	bgt.w	83c04 <__aeabi_dmul+0x238>
   83aae:	f114 0f36 	cmn.w	r4, #54	; 0x36
   83ab2:	bfde      	ittt	le
   83ab4:	2000      	movle	r0, #0
   83ab6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   83aba:	bd70      	pople	{r4, r5, r6, pc}
   83abc:	f1c4 0400 	rsb	r4, r4, #0
   83ac0:	3c20      	subs	r4, #32
   83ac2:	da35      	bge.n	83b30 <__aeabi_dmul+0x164>
   83ac4:	340c      	adds	r4, #12
   83ac6:	dc1b      	bgt.n	83b00 <__aeabi_dmul+0x134>
   83ac8:	f104 0414 	add.w	r4, r4, #20
   83acc:	f1c4 0520 	rsb	r5, r4, #32
   83ad0:	fa00 f305 	lsl.w	r3, r0, r5
   83ad4:	fa20 f004 	lsr.w	r0, r0, r4
   83ad8:	fa01 f205 	lsl.w	r2, r1, r5
   83adc:	ea40 0002 	orr.w	r0, r0, r2
   83ae0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   83ae4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83ae8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83aec:	fa21 f604 	lsr.w	r6, r1, r4
   83af0:	eb42 0106 	adc.w	r1, r2, r6
   83af4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83af8:	bf08      	it	eq
   83afa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83afe:	bd70      	pop	{r4, r5, r6, pc}
   83b00:	f1c4 040c 	rsb	r4, r4, #12
   83b04:	f1c4 0520 	rsb	r5, r4, #32
   83b08:	fa00 f304 	lsl.w	r3, r0, r4
   83b0c:	fa20 f005 	lsr.w	r0, r0, r5
   83b10:	fa01 f204 	lsl.w	r2, r1, r4
   83b14:	ea40 0002 	orr.w	r0, r0, r2
   83b18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83b1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   83b20:	f141 0100 	adc.w	r1, r1, #0
   83b24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83b28:	bf08      	it	eq
   83b2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83b2e:	bd70      	pop	{r4, r5, r6, pc}
   83b30:	f1c4 0520 	rsb	r5, r4, #32
   83b34:	fa00 f205 	lsl.w	r2, r0, r5
   83b38:	ea4e 0e02 	orr.w	lr, lr, r2
   83b3c:	fa20 f304 	lsr.w	r3, r0, r4
   83b40:	fa01 f205 	lsl.w	r2, r1, r5
   83b44:	ea43 0302 	orr.w	r3, r3, r2
   83b48:	fa21 f004 	lsr.w	r0, r1, r4
   83b4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83b50:	fa21 f204 	lsr.w	r2, r1, r4
   83b54:	ea20 0002 	bic.w	r0, r0, r2
   83b58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   83b5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   83b60:	bf08      	it	eq
   83b62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   83b66:	bd70      	pop	{r4, r5, r6, pc}
   83b68:	f094 0f00 	teq	r4, #0
   83b6c:	d10f      	bne.n	83b8e <__aeabi_dmul+0x1c2>
   83b6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   83b72:	0040      	lsls	r0, r0, #1
   83b74:	eb41 0101 	adc.w	r1, r1, r1
   83b78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83b7c:	bf08      	it	eq
   83b7e:	3c01      	subeq	r4, #1
   83b80:	d0f7      	beq.n	83b72 <__aeabi_dmul+0x1a6>
   83b82:	ea41 0106 	orr.w	r1, r1, r6
   83b86:	f095 0f00 	teq	r5, #0
   83b8a:	bf18      	it	ne
   83b8c:	4770      	bxne	lr
   83b8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   83b92:	0052      	lsls	r2, r2, #1
   83b94:	eb43 0303 	adc.w	r3, r3, r3
   83b98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   83b9c:	bf08      	it	eq
   83b9e:	3d01      	subeq	r5, #1
   83ba0:	d0f7      	beq.n	83b92 <__aeabi_dmul+0x1c6>
   83ba2:	ea43 0306 	orr.w	r3, r3, r6
   83ba6:	4770      	bx	lr
   83ba8:	ea94 0f0c 	teq	r4, ip
   83bac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83bb0:	bf18      	it	ne
   83bb2:	ea95 0f0c 	teqne	r5, ip
   83bb6:	d00c      	beq.n	83bd2 <__aeabi_dmul+0x206>
   83bb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83bbc:	bf18      	it	ne
   83bbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83bc2:	d1d1      	bne.n	83b68 <__aeabi_dmul+0x19c>
   83bc4:	ea81 0103 	eor.w	r1, r1, r3
   83bc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83bcc:	f04f 0000 	mov.w	r0, #0
   83bd0:	bd70      	pop	{r4, r5, r6, pc}
   83bd2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83bd6:	bf06      	itte	eq
   83bd8:	4610      	moveq	r0, r2
   83bda:	4619      	moveq	r1, r3
   83bdc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83be0:	d019      	beq.n	83c16 <__aeabi_dmul+0x24a>
   83be2:	ea94 0f0c 	teq	r4, ip
   83be6:	d102      	bne.n	83bee <__aeabi_dmul+0x222>
   83be8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   83bec:	d113      	bne.n	83c16 <__aeabi_dmul+0x24a>
   83bee:	ea95 0f0c 	teq	r5, ip
   83bf2:	d105      	bne.n	83c00 <__aeabi_dmul+0x234>
   83bf4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   83bf8:	bf1c      	itt	ne
   83bfa:	4610      	movne	r0, r2
   83bfc:	4619      	movne	r1, r3
   83bfe:	d10a      	bne.n	83c16 <__aeabi_dmul+0x24a>
   83c00:	ea81 0103 	eor.w	r1, r1, r3
   83c04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   83c08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83c0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83c10:	f04f 0000 	mov.w	r0, #0
   83c14:	bd70      	pop	{r4, r5, r6, pc}
   83c16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   83c1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   83c1e:	bd70      	pop	{r4, r5, r6, pc}

00083c20 <__aeabi_ddiv>:
   83c20:	b570      	push	{r4, r5, r6, lr}
   83c22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   83c26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   83c2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   83c2e:	bf1d      	ittte	ne
   83c30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   83c34:	ea94 0f0c 	teqne	r4, ip
   83c38:	ea95 0f0c 	teqne	r5, ip
   83c3c:	f000 f8a7 	bleq	83d8e <__aeabi_ddiv+0x16e>
   83c40:	eba4 0405 	sub.w	r4, r4, r5
   83c44:	ea81 0e03 	eor.w	lr, r1, r3
   83c48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83c4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83c50:	f000 8088 	beq.w	83d64 <__aeabi_ddiv+0x144>
   83c54:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83c58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   83c5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   83c60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   83c64:	ea4f 2202 	mov.w	r2, r2, lsl #8
   83c68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   83c6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   83c70:	ea4f 2600 	mov.w	r6, r0, lsl #8
   83c74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   83c78:	429d      	cmp	r5, r3
   83c7a:	bf08      	it	eq
   83c7c:	4296      	cmpeq	r6, r2
   83c7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   83c82:	f504 7440 	add.w	r4, r4, #768	; 0x300
   83c86:	d202      	bcs.n	83c8e <__aeabi_ddiv+0x6e>
   83c88:	085b      	lsrs	r3, r3, #1
   83c8a:	ea4f 0232 	mov.w	r2, r2, rrx
   83c8e:	1ab6      	subs	r6, r6, r2
   83c90:	eb65 0503 	sbc.w	r5, r5, r3
   83c94:	085b      	lsrs	r3, r3, #1
   83c96:	ea4f 0232 	mov.w	r2, r2, rrx
   83c9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   83c9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   83ca2:	ebb6 0e02 	subs.w	lr, r6, r2
   83ca6:	eb75 0e03 	sbcs.w	lr, r5, r3
   83caa:	bf22      	ittt	cs
   83cac:	1ab6      	subcs	r6, r6, r2
   83cae:	4675      	movcs	r5, lr
   83cb0:	ea40 000c 	orrcs.w	r0, r0, ip
   83cb4:	085b      	lsrs	r3, r3, #1
   83cb6:	ea4f 0232 	mov.w	r2, r2, rrx
   83cba:	ebb6 0e02 	subs.w	lr, r6, r2
   83cbe:	eb75 0e03 	sbcs.w	lr, r5, r3
   83cc2:	bf22      	ittt	cs
   83cc4:	1ab6      	subcs	r6, r6, r2
   83cc6:	4675      	movcs	r5, lr
   83cc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   83ccc:	085b      	lsrs	r3, r3, #1
   83cce:	ea4f 0232 	mov.w	r2, r2, rrx
   83cd2:	ebb6 0e02 	subs.w	lr, r6, r2
   83cd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   83cda:	bf22      	ittt	cs
   83cdc:	1ab6      	subcs	r6, r6, r2
   83cde:	4675      	movcs	r5, lr
   83ce0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   83ce4:	085b      	lsrs	r3, r3, #1
   83ce6:	ea4f 0232 	mov.w	r2, r2, rrx
   83cea:	ebb6 0e02 	subs.w	lr, r6, r2
   83cee:	eb75 0e03 	sbcs.w	lr, r5, r3
   83cf2:	bf22      	ittt	cs
   83cf4:	1ab6      	subcs	r6, r6, r2
   83cf6:	4675      	movcs	r5, lr
   83cf8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   83cfc:	ea55 0e06 	orrs.w	lr, r5, r6
   83d00:	d018      	beq.n	83d34 <__aeabi_ddiv+0x114>
   83d02:	ea4f 1505 	mov.w	r5, r5, lsl #4
   83d06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   83d0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   83d0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   83d12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   83d16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   83d1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   83d1e:	d1c0      	bne.n	83ca2 <__aeabi_ddiv+0x82>
   83d20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83d24:	d10b      	bne.n	83d3e <__aeabi_ddiv+0x11e>
   83d26:	ea41 0100 	orr.w	r1, r1, r0
   83d2a:	f04f 0000 	mov.w	r0, #0
   83d2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   83d32:	e7b6      	b.n	83ca2 <__aeabi_ddiv+0x82>
   83d34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83d38:	bf04      	itt	eq
   83d3a:	4301      	orreq	r1, r0
   83d3c:	2000      	moveq	r0, #0
   83d3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   83d42:	bf88      	it	hi
   83d44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   83d48:	f63f aeaf 	bhi.w	83aaa <__aeabi_dmul+0xde>
   83d4c:	ebb5 0c03 	subs.w	ip, r5, r3
   83d50:	bf04      	itt	eq
   83d52:	ebb6 0c02 	subseq.w	ip, r6, r2
   83d56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83d5a:	f150 0000 	adcs.w	r0, r0, #0
   83d5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   83d62:	bd70      	pop	{r4, r5, r6, pc}
   83d64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   83d68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   83d6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   83d70:	bfc2      	ittt	gt
   83d72:	ebd4 050c 	rsbsgt	r5, r4, ip
   83d76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   83d7a:	bd70      	popgt	{r4, r5, r6, pc}
   83d7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   83d80:	f04f 0e00 	mov.w	lr, #0
   83d84:	3c01      	subs	r4, #1
   83d86:	e690      	b.n	83aaa <__aeabi_dmul+0xde>
   83d88:	ea45 0e06 	orr.w	lr, r5, r6
   83d8c:	e68d      	b.n	83aaa <__aeabi_dmul+0xde>
   83d8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   83d92:	ea94 0f0c 	teq	r4, ip
   83d96:	bf08      	it	eq
   83d98:	ea95 0f0c 	teqeq	r5, ip
   83d9c:	f43f af3b 	beq.w	83c16 <__aeabi_dmul+0x24a>
   83da0:	ea94 0f0c 	teq	r4, ip
   83da4:	d10a      	bne.n	83dbc <__aeabi_ddiv+0x19c>
   83da6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83daa:	f47f af34 	bne.w	83c16 <__aeabi_dmul+0x24a>
   83dae:	ea95 0f0c 	teq	r5, ip
   83db2:	f47f af25 	bne.w	83c00 <__aeabi_dmul+0x234>
   83db6:	4610      	mov	r0, r2
   83db8:	4619      	mov	r1, r3
   83dba:	e72c      	b.n	83c16 <__aeabi_dmul+0x24a>
   83dbc:	ea95 0f0c 	teq	r5, ip
   83dc0:	d106      	bne.n	83dd0 <__aeabi_ddiv+0x1b0>
   83dc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   83dc6:	f43f aefd 	beq.w	83bc4 <__aeabi_dmul+0x1f8>
   83dca:	4610      	mov	r0, r2
   83dcc:	4619      	mov	r1, r3
   83dce:	e722      	b.n	83c16 <__aeabi_dmul+0x24a>
   83dd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   83dd4:	bf18      	it	ne
   83dd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   83dda:	f47f aec5 	bne.w	83b68 <__aeabi_dmul+0x19c>
   83dde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   83de2:	f47f af0d 	bne.w	83c00 <__aeabi_dmul+0x234>
   83de6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   83dea:	f47f aeeb 	bne.w	83bc4 <__aeabi_dmul+0x1f8>
   83dee:	e712      	b.n	83c16 <__aeabi_dmul+0x24a>

00083df0 <__gedf2>:
   83df0:	f04f 3cff 	mov.w	ip, #4294967295
   83df4:	e006      	b.n	83e04 <__cmpdf2+0x4>
   83df6:	bf00      	nop

00083df8 <__ledf2>:
   83df8:	f04f 0c01 	mov.w	ip, #1
   83dfc:	e002      	b.n	83e04 <__cmpdf2+0x4>
   83dfe:	bf00      	nop

00083e00 <__cmpdf2>:
   83e00:	f04f 0c01 	mov.w	ip, #1
   83e04:	f84d cd04 	str.w	ip, [sp, #-4]!
   83e08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83e0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83e10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83e14:	bf18      	it	ne
   83e16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   83e1a:	d01b      	beq.n	83e54 <__cmpdf2+0x54>
   83e1c:	b001      	add	sp, #4
   83e1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   83e22:	bf0c      	ite	eq
   83e24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   83e28:	ea91 0f03 	teqne	r1, r3
   83e2c:	bf02      	ittt	eq
   83e2e:	ea90 0f02 	teqeq	r0, r2
   83e32:	2000      	moveq	r0, #0
   83e34:	4770      	bxeq	lr
   83e36:	f110 0f00 	cmn.w	r0, #0
   83e3a:	ea91 0f03 	teq	r1, r3
   83e3e:	bf58      	it	pl
   83e40:	4299      	cmppl	r1, r3
   83e42:	bf08      	it	eq
   83e44:	4290      	cmpeq	r0, r2
   83e46:	bf2c      	ite	cs
   83e48:	17d8      	asrcs	r0, r3, #31
   83e4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   83e4e:	f040 0001 	orr.w	r0, r0, #1
   83e52:	4770      	bx	lr
   83e54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83e58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83e5c:	d102      	bne.n	83e64 <__cmpdf2+0x64>
   83e5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   83e62:	d107      	bne.n	83e74 <__cmpdf2+0x74>
   83e64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83e68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83e6c:	d1d6      	bne.n	83e1c <__cmpdf2+0x1c>
   83e6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   83e72:	d0d3      	beq.n	83e1c <__cmpdf2+0x1c>
   83e74:	f85d 0b04 	ldr.w	r0, [sp], #4
   83e78:	4770      	bx	lr
   83e7a:	bf00      	nop

00083e7c <__aeabi_cdrcmple>:
   83e7c:	4684      	mov	ip, r0
   83e7e:	4610      	mov	r0, r2
   83e80:	4662      	mov	r2, ip
   83e82:	468c      	mov	ip, r1
   83e84:	4619      	mov	r1, r3
   83e86:	4663      	mov	r3, ip
   83e88:	e000      	b.n	83e8c <__aeabi_cdcmpeq>
   83e8a:	bf00      	nop

00083e8c <__aeabi_cdcmpeq>:
   83e8c:	b501      	push	{r0, lr}
   83e8e:	f7ff ffb7 	bl	83e00 <__cmpdf2>
   83e92:	2800      	cmp	r0, #0
   83e94:	bf48      	it	mi
   83e96:	f110 0f00 	cmnmi.w	r0, #0
   83e9a:	bd01      	pop	{r0, pc}

00083e9c <__aeabi_dcmpeq>:
   83e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   83ea0:	f7ff fff4 	bl	83e8c <__aeabi_cdcmpeq>
   83ea4:	bf0c      	ite	eq
   83ea6:	2001      	moveq	r0, #1
   83ea8:	2000      	movne	r0, #0
   83eaa:	f85d fb08 	ldr.w	pc, [sp], #8
   83eae:	bf00      	nop

00083eb0 <__aeabi_dcmplt>:
   83eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   83eb4:	f7ff ffea 	bl	83e8c <__aeabi_cdcmpeq>
   83eb8:	bf34      	ite	cc
   83eba:	2001      	movcc	r0, #1
   83ebc:	2000      	movcs	r0, #0
   83ebe:	f85d fb08 	ldr.w	pc, [sp], #8
   83ec2:	bf00      	nop

00083ec4 <__aeabi_dcmple>:
   83ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
   83ec8:	f7ff ffe0 	bl	83e8c <__aeabi_cdcmpeq>
   83ecc:	bf94      	ite	ls
   83ece:	2001      	movls	r0, #1
   83ed0:	2000      	movhi	r0, #0
   83ed2:	f85d fb08 	ldr.w	pc, [sp], #8
   83ed6:	bf00      	nop

00083ed8 <__aeabi_dcmpge>:
   83ed8:	f84d ed08 	str.w	lr, [sp, #-8]!
   83edc:	f7ff ffce 	bl	83e7c <__aeabi_cdrcmple>
   83ee0:	bf94      	ite	ls
   83ee2:	2001      	movls	r0, #1
   83ee4:	2000      	movhi	r0, #0
   83ee6:	f85d fb08 	ldr.w	pc, [sp], #8
   83eea:	bf00      	nop

00083eec <__aeabi_dcmpgt>:
   83eec:	f84d ed08 	str.w	lr, [sp, #-8]!
   83ef0:	f7ff ffc4 	bl	83e7c <__aeabi_cdrcmple>
   83ef4:	bf34      	ite	cc
   83ef6:	2001      	movcc	r0, #1
   83ef8:	2000      	movcs	r0, #0
   83efa:	f85d fb08 	ldr.w	pc, [sp], #8
   83efe:	bf00      	nop

00083f00 <__aeabi_dcmpun>:
   83f00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   83f04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83f08:	d102      	bne.n	83f10 <__aeabi_dcmpun+0x10>
   83f0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   83f0e:	d10a      	bne.n	83f26 <__aeabi_dcmpun+0x26>
   83f10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   83f14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   83f18:	d102      	bne.n	83f20 <__aeabi_dcmpun+0x20>
   83f1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   83f1e:	d102      	bne.n	83f26 <__aeabi_dcmpun+0x26>
   83f20:	f04f 0000 	mov.w	r0, #0
   83f24:	4770      	bx	lr
   83f26:	f04f 0001 	mov.w	r0, #1
   83f2a:	4770      	bx	lr

00083f2c <__aeabi_d2iz>:
   83f2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   83f30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83f34:	d215      	bcs.n	83f62 <__aeabi_d2iz+0x36>
   83f36:	d511      	bpl.n	83f5c <__aeabi_d2iz+0x30>
   83f38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83f3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83f40:	d912      	bls.n	83f68 <__aeabi_d2iz+0x3c>
   83f42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83f4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83f4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   83f52:	fa23 f002 	lsr.w	r0, r3, r2
   83f56:	bf18      	it	ne
   83f58:	4240      	negne	r0, r0
   83f5a:	4770      	bx	lr
   83f5c:	f04f 0000 	mov.w	r0, #0
   83f60:	4770      	bx	lr
   83f62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83f66:	d105      	bne.n	83f74 <__aeabi_d2iz+0x48>
   83f68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   83f6c:	bf08      	it	eq
   83f6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   83f72:	4770      	bx	lr
   83f74:	f04f 0000 	mov.w	r0, #0
   83f78:	4770      	bx	lr
   83f7a:	bf00      	nop

00083f7c <__aeabi_d2uiz>:
   83f7c:	004a      	lsls	r2, r1, #1
   83f7e:	d211      	bcs.n	83fa4 <__aeabi_d2uiz+0x28>
   83f80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   83f84:	d211      	bcs.n	83faa <__aeabi_d2uiz+0x2e>
   83f86:	d50d      	bpl.n	83fa4 <__aeabi_d2uiz+0x28>
   83f88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83f8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83f90:	d40e      	bmi.n	83fb0 <__aeabi_d2uiz+0x34>
   83f92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   83f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   83f9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   83f9e:	fa23 f002 	lsr.w	r0, r3, r2
   83fa2:	4770      	bx	lr
   83fa4:	f04f 0000 	mov.w	r0, #0
   83fa8:	4770      	bx	lr
   83faa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   83fae:	d102      	bne.n	83fb6 <__aeabi_d2uiz+0x3a>
   83fb0:	f04f 30ff 	mov.w	r0, #4294967295
   83fb4:	4770      	bx	lr
   83fb6:	f04f 0000 	mov.w	r0, #0
   83fba:	4770      	bx	lr

00083fbc <__errno>:
   83fbc:	4b01      	ldr	r3, [pc, #4]	; (83fc4 <__errno+0x8>)
   83fbe:	6818      	ldr	r0, [r3, #0]
   83fc0:	4770      	bx	lr
   83fc2:	bf00      	nop
   83fc4:	200701ac 	.word	0x200701ac

00083fc8 <__libc_init_array>:
   83fc8:	b570      	push	{r4, r5, r6, lr}
   83fca:	4e0f      	ldr	r6, [pc, #60]	; (84008 <__libc_init_array+0x40>)
   83fcc:	4d0f      	ldr	r5, [pc, #60]	; (8400c <__libc_init_array+0x44>)
   83fce:	1b76      	subs	r6, r6, r5
   83fd0:	10b6      	asrs	r6, r6, #2
   83fd2:	bf18      	it	ne
   83fd4:	2400      	movne	r4, #0
   83fd6:	d005      	beq.n	83fe4 <__libc_init_array+0x1c>
   83fd8:	3401      	adds	r4, #1
   83fda:	f855 3b04 	ldr.w	r3, [r5], #4
   83fde:	4798      	blx	r3
   83fe0:	42a6      	cmp	r6, r4
   83fe2:	d1f9      	bne.n	83fd8 <__libc_init_array+0x10>
   83fe4:	4e0a      	ldr	r6, [pc, #40]	; (84010 <__libc_init_array+0x48>)
   83fe6:	4d0b      	ldr	r5, [pc, #44]	; (84014 <__libc_init_array+0x4c>)
   83fe8:	f003 f8be 	bl	87168 <_init>
   83fec:	1b76      	subs	r6, r6, r5
   83fee:	10b6      	asrs	r6, r6, #2
   83ff0:	bf18      	it	ne
   83ff2:	2400      	movne	r4, #0
   83ff4:	d006      	beq.n	84004 <__libc_init_array+0x3c>
   83ff6:	3401      	adds	r4, #1
   83ff8:	f855 3b04 	ldr.w	r3, [r5], #4
   83ffc:	4798      	blx	r3
   83ffe:	42a6      	cmp	r6, r4
   84000:	d1f9      	bne.n	83ff6 <__libc_init_array+0x2e>
   84002:	bd70      	pop	{r4, r5, r6, pc}
   84004:	bd70      	pop	{r4, r5, r6, pc}
   84006:	bf00      	nop
   84008:	00087174 	.word	0x00087174
   8400c:	00087174 	.word	0x00087174
   84010:	0008717c 	.word	0x0008717c
   84014:	00087174 	.word	0x00087174

00084018 <iprintf>:
   84018:	b40f      	push	{r0, r1, r2, r3}
   8401a:	b510      	push	{r4, lr}
   8401c:	4b07      	ldr	r3, [pc, #28]	; (8403c <iprintf+0x24>)
   8401e:	b082      	sub	sp, #8
   84020:	ac04      	add	r4, sp, #16
   84022:	f854 2b04 	ldr.w	r2, [r4], #4
   84026:	6818      	ldr	r0, [r3, #0]
   84028:	4623      	mov	r3, r4
   8402a:	6881      	ldr	r1, [r0, #8]
   8402c:	9401      	str	r4, [sp, #4]
   8402e:	f000 fa3b 	bl	844a8 <_vfiprintf_r>
   84032:	b002      	add	sp, #8
   84034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84038:	b004      	add	sp, #16
   8403a:	4770      	bx	lr
   8403c:	200701ac 	.word	0x200701ac

00084040 <memcpy>:
   84040:	4684      	mov	ip, r0
   84042:	ea41 0300 	orr.w	r3, r1, r0
   84046:	f013 0303 	ands.w	r3, r3, #3
   8404a:	d149      	bne.n	840e0 <memcpy+0xa0>
   8404c:	3a40      	subs	r2, #64	; 0x40
   8404e:	d323      	bcc.n	84098 <memcpy+0x58>
   84050:	680b      	ldr	r3, [r1, #0]
   84052:	6003      	str	r3, [r0, #0]
   84054:	684b      	ldr	r3, [r1, #4]
   84056:	6043      	str	r3, [r0, #4]
   84058:	688b      	ldr	r3, [r1, #8]
   8405a:	6083      	str	r3, [r0, #8]
   8405c:	68cb      	ldr	r3, [r1, #12]
   8405e:	60c3      	str	r3, [r0, #12]
   84060:	690b      	ldr	r3, [r1, #16]
   84062:	6103      	str	r3, [r0, #16]
   84064:	694b      	ldr	r3, [r1, #20]
   84066:	6143      	str	r3, [r0, #20]
   84068:	698b      	ldr	r3, [r1, #24]
   8406a:	6183      	str	r3, [r0, #24]
   8406c:	69cb      	ldr	r3, [r1, #28]
   8406e:	61c3      	str	r3, [r0, #28]
   84070:	6a0b      	ldr	r3, [r1, #32]
   84072:	6203      	str	r3, [r0, #32]
   84074:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   84076:	6243      	str	r3, [r0, #36]	; 0x24
   84078:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8407a:	6283      	str	r3, [r0, #40]	; 0x28
   8407c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8407e:	62c3      	str	r3, [r0, #44]	; 0x2c
   84080:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84082:	6303      	str	r3, [r0, #48]	; 0x30
   84084:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   84086:	6343      	str	r3, [r0, #52]	; 0x34
   84088:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8408a:	6383      	str	r3, [r0, #56]	; 0x38
   8408c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8408e:	63c3      	str	r3, [r0, #60]	; 0x3c
   84090:	3040      	adds	r0, #64	; 0x40
   84092:	3140      	adds	r1, #64	; 0x40
   84094:	3a40      	subs	r2, #64	; 0x40
   84096:	d2db      	bcs.n	84050 <memcpy+0x10>
   84098:	3230      	adds	r2, #48	; 0x30
   8409a:	d30b      	bcc.n	840b4 <memcpy+0x74>
   8409c:	680b      	ldr	r3, [r1, #0]
   8409e:	6003      	str	r3, [r0, #0]
   840a0:	684b      	ldr	r3, [r1, #4]
   840a2:	6043      	str	r3, [r0, #4]
   840a4:	688b      	ldr	r3, [r1, #8]
   840a6:	6083      	str	r3, [r0, #8]
   840a8:	68cb      	ldr	r3, [r1, #12]
   840aa:	60c3      	str	r3, [r0, #12]
   840ac:	3010      	adds	r0, #16
   840ae:	3110      	adds	r1, #16
   840b0:	3a10      	subs	r2, #16
   840b2:	d2f3      	bcs.n	8409c <memcpy+0x5c>
   840b4:	320c      	adds	r2, #12
   840b6:	d305      	bcc.n	840c4 <memcpy+0x84>
   840b8:	f851 3b04 	ldr.w	r3, [r1], #4
   840bc:	f840 3b04 	str.w	r3, [r0], #4
   840c0:	3a04      	subs	r2, #4
   840c2:	d2f9      	bcs.n	840b8 <memcpy+0x78>
   840c4:	3204      	adds	r2, #4
   840c6:	d008      	beq.n	840da <memcpy+0x9a>
   840c8:	07d2      	lsls	r2, r2, #31
   840ca:	bf1c      	itt	ne
   840cc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   840d0:	f800 3b01 	strbne.w	r3, [r0], #1
   840d4:	d301      	bcc.n	840da <memcpy+0x9a>
   840d6:	880b      	ldrh	r3, [r1, #0]
   840d8:	8003      	strh	r3, [r0, #0]
   840da:	4660      	mov	r0, ip
   840dc:	4770      	bx	lr
   840de:	bf00      	nop
   840e0:	2a08      	cmp	r2, #8
   840e2:	d313      	bcc.n	8410c <memcpy+0xcc>
   840e4:	078b      	lsls	r3, r1, #30
   840e6:	d0b1      	beq.n	8404c <memcpy+0xc>
   840e8:	f010 0303 	ands.w	r3, r0, #3
   840ec:	d0ae      	beq.n	8404c <memcpy+0xc>
   840ee:	f1c3 0304 	rsb	r3, r3, #4
   840f2:	1ad2      	subs	r2, r2, r3
   840f4:	07db      	lsls	r3, r3, #31
   840f6:	bf1c      	itt	ne
   840f8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   840fc:	f800 3b01 	strbne.w	r3, [r0], #1
   84100:	d3a4      	bcc.n	8404c <memcpy+0xc>
   84102:	f831 3b02 	ldrh.w	r3, [r1], #2
   84106:	f820 3b02 	strh.w	r3, [r0], #2
   8410a:	e79f      	b.n	8404c <memcpy+0xc>
   8410c:	3a04      	subs	r2, #4
   8410e:	d3d9      	bcc.n	840c4 <memcpy+0x84>
   84110:	3a01      	subs	r2, #1
   84112:	f811 3b01 	ldrb.w	r3, [r1], #1
   84116:	f800 3b01 	strb.w	r3, [r0], #1
   8411a:	d2f9      	bcs.n	84110 <memcpy+0xd0>
   8411c:	780b      	ldrb	r3, [r1, #0]
   8411e:	7003      	strb	r3, [r0, #0]
   84120:	784b      	ldrb	r3, [r1, #1]
   84122:	7043      	strb	r3, [r0, #1]
   84124:	788b      	ldrb	r3, [r1, #2]
   84126:	7083      	strb	r3, [r0, #2]
   84128:	4660      	mov	r0, ip
   8412a:	4770      	bx	lr

0008412c <memset>:
   8412c:	b470      	push	{r4, r5, r6}
   8412e:	0786      	lsls	r6, r0, #30
   84130:	d046      	beq.n	841c0 <memset+0x94>
   84132:	1e54      	subs	r4, r2, #1
   84134:	2a00      	cmp	r2, #0
   84136:	d041      	beq.n	841bc <memset+0x90>
   84138:	b2ca      	uxtb	r2, r1
   8413a:	4603      	mov	r3, r0
   8413c:	e002      	b.n	84144 <memset+0x18>
   8413e:	f114 34ff 	adds.w	r4, r4, #4294967295
   84142:	d33b      	bcc.n	841bc <memset+0x90>
   84144:	f803 2b01 	strb.w	r2, [r3], #1
   84148:	079d      	lsls	r5, r3, #30
   8414a:	d1f8      	bne.n	8413e <memset+0x12>
   8414c:	2c03      	cmp	r4, #3
   8414e:	d92e      	bls.n	841ae <memset+0x82>
   84150:	b2cd      	uxtb	r5, r1
   84152:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84156:	2c0f      	cmp	r4, #15
   84158:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8415c:	d919      	bls.n	84192 <memset+0x66>
   8415e:	4626      	mov	r6, r4
   84160:	f103 0210 	add.w	r2, r3, #16
   84164:	3e10      	subs	r6, #16
   84166:	2e0f      	cmp	r6, #15
   84168:	f842 5c10 	str.w	r5, [r2, #-16]
   8416c:	f842 5c0c 	str.w	r5, [r2, #-12]
   84170:	f842 5c08 	str.w	r5, [r2, #-8]
   84174:	f842 5c04 	str.w	r5, [r2, #-4]
   84178:	f102 0210 	add.w	r2, r2, #16
   8417c:	d8f2      	bhi.n	84164 <memset+0x38>
   8417e:	f1a4 0210 	sub.w	r2, r4, #16
   84182:	f022 020f 	bic.w	r2, r2, #15
   84186:	f004 040f 	and.w	r4, r4, #15
   8418a:	3210      	adds	r2, #16
   8418c:	2c03      	cmp	r4, #3
   8418e:	4413      	add	r3, r2
   84190:	d90d      	bls.n	841ae <memset+0x82>
   84192:	461e      	mov	r6, r3
   84194:	4622      	mov	r2, r4
   84196:	3a04      	subs	r2, #4
   84198:	2a03      	cmp	r2, #3
   8419a:	f846 5b04 	str.w	r5, [r6], #4
   8419e:	d8fa      	bhi.n	84196 <memset+0x6a>
   841a0:	1f22      	subs	r2, r4, #4
   841a2:	f022 0203 	bic.w	r2, r2, #3
   841a6:	3204      	adds	r2, #4
   841a8:	4413      	add	r3, r2
   841aa:	f004 0403 	and.w	r4, r4, #3
   841ae:	b12c      	cbz	r4, 841bc <memset+0x90>
   841b0:	b2c9      	uxtb	r1, r1
   841b2:	441c      	add	r4, r3
   841b4:	f803 1b01 	strb.w	r1, [r3], #1
   841b8:	429c      	cmp	r4, r3
   841ba:	d1fb      	bne.n	841b4 <memset+0x88>
   841bc:	bc70      	pop	{r4, r5, r6}
   841be:	4770      	bx	lr
   841c0:	4614      	mov	r4, r2
   841c2:	4603      	mov	r3, r0
   841c4:	e7c2      	b.n	8414c <memset+0x20>
   841c6:	bf00      	nop

000841c8 <setbuf>:
   841c8:	2900      	cmp	r1, #0
   841ca:	bf0c      	ite	eq
   841cc:	2202      	moveq	r2, #2
   841ce:	2200      	movne	r2, #0
   841d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   841d4:	f000 b800 	b.w	841d8 <setvbuf>

000841d8 <setvbuf>:
   841d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   841dc:	4d61      	ldr	r5, [pc, #388]	; (84364 <setvbuf+0x18c>)
   841de:	b083      	sub	sp, #12
   841e0:	682d      	ldr	r5, [r5, #0]
   841e2:	4604      	mov	r4, r0
   841e4:	460f      	mov	r7, r1
   841e6:	4690      	mov	r8, r2
   841e8:	461e      	mov	r6, r3
   841ea:	b115      	cbz	r5, 841f2 <setvbuf+0x1a>
   841ec:	6bab      	ldr	r3, [r5, #56]	; 0x38
   841ee:	2b00      	cmp	r3, #0
   841f0:	d064      	beq.n	842bc <setvbuf+0xe4>
   841f2:	f1b8 0f02 	cmp.w	r8, #2
   841f6:	d006      	beq.n	84206 <setvbuf+0x2e>
   841f8:	f1b8 0f01 	cmp.w	r8, #1
   841fc:	f200 809f 	bhi.w	8433e <setvbuf+0x166>
   84200:	2e00      	cmp	r6, #0
   84202:	f2c0 809c 	blt.w	8433e <setvbuf+0x166>
   84206:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84208:	07d8      	lsls	r0, r3, #31
   8420a:	d534      	bpl.n	84276 <setvbuf+0x9e>
   8420c:	4621      	mov	r1, r4
   8420e:	4628      	mov	r0, r5
   84210:	f001 f8e2 	bl	853d8 <_fflush_r>
   84214:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84216:	b141      	cbz	r1, 8422a <setvbuf+0x52>
   84218:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8421c:	4299      	cmp	r1, r3
   8421e:	d002      	beq.n	84226 <setvbuf+0x4e>
   84220:	4628      	mov	r0, r5
   84222:	f001 fa57 	bl	856d4 <_free_r>
   84226:	2300      	movs	r3, #0
   84228:	6323      	str	r3, [r4, #48]	; 0x30
   8422a:	2200      	movs	r2, #0
   8422c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84230:	61a2      	str	r2, [r4, #24]
   84232:	6062      	str	r2, [r4, #4]
   84234:	061a      	lsls	r2, r3, #24
   84236:	d43a      	bmi.n	842ae <setvbuf+0xd6>
   84238:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   8423c:	f023 0303 	bic.w	r3, r3, #3
   84240:	f1b8 0f02 	cmp.w	r8, #2
   84244:	81a3      	strh	r3, [r4, #12]
   84246:	d01d      	beq.n	84284 <setvbuf+0xac>
   84248:	ab01      	add	r3, sp, #4
   8424a:	466a      	mov	r2, sp
   8424c:	4621      	mov	r1, r4
   8424e:	4628      	mov	r0, r5
   84250:	f001 fcde 	bl	85c10 <__swhatbuf_r>
   84254:	89a3      	ldrh	r3, [r4, #12]
   84256:	4318      	orrs	r0, r3
   84258:	81a0      	strh	r0, [r4, #12]
   8425a:	2e00      	cmp	r6, #0
   8425c:	d132      	bne.n	842c4 <setvbuf+0xec>
   8425e:	9e00      	ldr	r6, [sp, #0]
   84260:	4630      	mov	r0, r6
   84262:	f001 fd4d 	bl	85d00 <malloc>
   84266:	4607      	mov	r7, r0
   84268:	2800      	cmp	r0, #0
   8426a:	d06b      	beq.n	84344 <setvbuf+0x16c>
   8426c:	89a3      	ldrh	r3, [r4, #12]
   8426e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84272:	81a3      	strh	r3, [r4, #12]
   84274:	e028      	b.n	842c8 <setvbuf+0xf0>
   84276:	89a3      	ldrh	r3, [r4, #12]
   84278:	0599      	lsls	r1, r3, #22
   8427a:	d4c7      	bmi.n	8420c <setvbuf+0x34>
   8427c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8427e:	f001 fcc3 	bl	85c08 <__retarget_lock_acquire_recursive>
   84282:	e7c3      	b.n	8420c <setvbuf+0x34>
   84284:	2500      	movs	r5, #0
   84286:	2600      	movs	r6, #0
   84288:	2001      	movs	r0, #1
   8428a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8428c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84290:	f043 0302 	orr.w	r3, r3, #2
   84294:	60a6      	str	r6, [r4, #8]
   84296:	07ce      	lsls	r6, r1, #31
   84298:	81a3      	strh	r3, [r4, #12]
   8429a:	6160      	str	r0, [r4, #20]
   8429c:	6022      	str	r2, [r4, #0]
   8429e:	6122      	str	r2, [r4, #16]
   842a0:	d401      	bmi.n	842a6 <setvbuf+0xce>
   842a2:	0598      	lsls	r0, r3, #22
   842a4:	d53e      	bpl.n	84324 <setvbuf+0x14c>
   842a6:	4628      	mov	r0, r5
   842a8:	b003      	add	sp, #12
   842aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   842ae:	6921      	ldr	r1, [r4, #16]
   842b0:	4628      	mov	r0, r5
   842b2:	f001 fa0f 	bl	856d4 <_free_r>
   842b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   842ba:	e7bd      	b.n	84238 <setvbuf+0x60>
   842bc:	4628      	mov	r0, r5
   842be:	f001 f8e3 	bl	85488 <__sinit>
   842c2:	e796      	b.n	841f2 <setvbuf+0x1a>
   842c4:	2f00      	cmp	r7, #0
   842c6:	d0cb      	beq.n	84260 <setvbuf+0x88>
   842c8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   842ca:	2b00      	cmp	r3, #0
   842cc:	d033      	beq.n	84336 <setvbuf+0x15e>
   842ce:	9b00      	ldr	r3, [sp, #0]
   842d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   842d4:	429e      	cmp	r6, r3
   842d6:	bf1c      	itt	ne
   842d8:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   842dc:	81a2      	strhne	r2, [r4, #12]
   842de:	f1b8 0f01 	cmp.w	r8, #1
   842e2:	bf04      	itt	eq
   842e4:	f042 0201 	orreq.w	r2, r2, #1
   842e8:	81a2      	strheq	r2, [r4, #12]
   842ea:	b292      	uxth	r2, r2
   842ec:	f012 0308 	ands.w	r3, r2, #8
   842f0:	6027      	str	r7, [r4, #0]
   842f2:	6127      	str	r7, [r4, #16]
   842f4:	6166      	str	r6, [r4, #20]
   842f6:	d00e      	beq.n	84316 <setvbuf+0x13e>
   842f8:	07d1      	lsls	r1, r2, #31
   842fa:	d51a      	bpl.n	84332 <setvbuf+0x15a>
   842fc:	2300      	movs	r3, #0
   842fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
   84300:	4276      	negs	r6, r6
   84302:	f015 0501 	ands.w	r5, r5, #1
   84306:	61a6      	str	r6, [r4, #24]
   84308:	60a3      	str	r3, [r4, #8]
   8430a:	d009      	beq.n	84320 <setvbuf+0x148>
   8430c:	2500      	movs	r5, #0
   8430e:	4628      	mov	r0, r5
   84310:	b003      	add	sp, #12
   84312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84316:	60a3      	str	r3, [r4, #8]
   84318:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8431a:	f015 0501 	ands.w	r5, r5, #1
   8431e:	d1f5      	bne.n	8430c <setvbuf+0x134>
   84320:	0593      	lsls	r3, r2, #22
   84322:	d4c0      	bmi.n	842a6 <setvbuf+0xce>
   84324:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84326:	f001 fc71 	bl	85c0c <__retarget_lock_release_recursive>
   8432a:	4628      	mov	r0, r5
   8432c:	b003      	add	sp, #12
   8432e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84332:	60a6      	str	r6, [r4, #8]
   84334:	e7f0      	b.n	84318 <setvbuf+0x140>
   84336:	4628      	mov	r0, r5
   84338:	f001 f8a6 	bl	85488 <__sinit>
   8433c:	e7c7      	b.n	842ce <setvbuf+0xf6>
   8433e:	f04f 35ff 	mov.w	r5, #4294967295
   84342:	e7b0      	b.n	842a6 <setvbuf+0xce>
   84344:	f8dd 9000 	ldr.w	r9, [sp]
   84348:	45b1      	cmp	r9, r6
   8434a:	d004      	beq.n	84356 <setvbuf+0x17e>
   8434c:	4648      	mov	r0, r9
   8434e:	f001 fcd7 	bl	85d00 <malloc>
   84352:	4607      	mov	r7, r0
   84354:	b920      	cbnz	r0, 84360 <setvbuf+0x188>
   84356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8435a:	f04f 35ff 	mov.w	r5, #4294967295
   8435e:	e792      	b.n	84286 <setvbuf+0xae>
   84360:	464e      	mov	r6, r9
   84362:	e783      	b.n	8426c <setvbuf+0x94>
   84364:	200701ac 	.word	0x200701ac

00084368 <strlen>:
   84368:	f020 0103 	bic.w	r1, r0, #3
   8436c:	f010 0003 	ands.w	r0, r0, #3
   84370:	f1c0 0000 	rsb	r0, r0, #0
   84374:	f851 3b04 	ldr.w	r3, [r1], #4
   84378:	f100 0c04 	add.w	ip, r0, #4
   8437c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84380:	f06f 0200 	mvn.w	r2, #0
   84384:	bf1c      	itt	ne
   84386:	fa22 f20c 	lsrne.w	r2, r2, ip
   8438a:	4313      	orrne	r3, r2
   8438c:	f04f 0c01 	mov.w	ip, #1
   84390:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84394:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84398:	eba3 020c 	sub.w	r2, r3, ip
   8439c:	ea22 0203 	bic.w	r2, r2, r3
   843a0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   843a4:	bf04      	itt	eq
   843a6:	f851 3b04 	ldreq.w	r3, [r1], #4
   843aa:	3004      	addeq	r0, #4
   843ac:	d0f4      	beq.n	84398 <strlen+0x30>
   843ae:	f1c2 0100 	rsb	r1, r2, #0
   843b2:	ea02 0201 	and.w	r2, r2, r1
   843b6:	fab2 f282 	clz	r2, r2
   843ba:	f1c2 021f 	rsb	r2, r2, #31
   843be:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   843c2:	4770      	bx	lr

000843c4 <strncpy>:
   843c4:	ea40 0301 	orr.w	r3, r0, r1
   843c8:	f013 0f03 	tst.w	r3, #3
   843cc:	b470      	push	{r4, r5, r6}
   843ce:	4603      	mov	r3, r0
   843d0:	d024      	beq.n	8441c <strncpy+0x58>
   843d2:	b1a2      	cbz	r2, 843fe <strncpy+0x3a>
   843d4:	780c      	ldrb	r4, [r1, #0]
   843d6:	3a01      	subs	r2, #1
   843d8:	701c      	strb	r4, [r3, #0]
   843da:	3101      	adds	r1, #1
   843dc:	3301      	adds	r3, #1
   843de:	b13c      	cbz	r4, 843f0 <strncpy+0x2c>
   843e0:	b16a      	cbz	r2, 843fe <strncpy+0x3a>
   843e2:	f811 4b01 	ldrb.w	r4, [r1], #1
   843e6:	3a01      	subs	r2, #1
   843e8:	f803 4b01 	strb.w	r4, [r3], #1
   843ec:	2c00      	cmp	r4, #0
   843ee:	d1f7      	bne.n	843e0 <strncpy+0x1c>
   843f0:	b12a      	cbz	r2, 843fe <strncpy+0x3a>
   843f2:	2100      	movs	r1, #0
   843f4:	441a      	add	r2, r3
   843f6:	f803 1b01 	strb.w	r1, [r3], #1
   843fa:	429a      	cmp	r2, r3
   843fc:	d1fb      	bne.n	843f6 <strncpy+0x32>
   843fe:	bc70      	pop	{r4, r5, r6}
   84400:	4770      	bx	lr
   84402:	460e      	mov	r6, r1
   84404:	f851 5b04 	ldr.w	r5, [r1], #4
   84408:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   8440c:	ea24 0405 	bic.w	r4, r4, r5
   84410:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   84414:	d105      	bne.n	84422 <strncpy+0x5e>
   84416:	3a04      	subs	r2, #4
   84418:	f843 5b04 	str.w	r5, [r3], #4
   8441c:	2a03      	cmp	r2, #3
   8441e:	d8f0      	bhi.n	84402 <strncpy+0x3e>
   84420:	e7d7      	b.n	843d2 <strncpy+0xe>
   84422:	4631      	mov	r1, r6
   84424:	e7d6      	b.n	843d4 <strncpy+0x10>
   84426:	bf00      	nop

00084428 <__sprint_r.part.0>:
   84428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8442c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8442e:	4693      	mov	fp, r2
   84430:	049c      	lsls	r4, r3, #18
   84432:	d52f      	bpl.n	84494 <__sprint_r.part.0+0x6c>
   84434:	6893      	ldr	r3, [r2, #8]
   84436:	6812      	ldr	r2, [r2, #0]
   84438:	b353      	cbz	r3, 84490 <__sprint_r.part.0+0x68>
   8443a:	460e      	mov	r6, r1
   8443c:	4607      	mov	r7, r0
   8443e:	f102 0908 	add.w	r9, r2, #8
   84442:	e919 0420 	ldmdb	r9, {r5, sl}
   84446:	ea5f 089a 	movs.w	r8, sl, lsr #2
   8444a:	d017      	beq.n	8447c <__sprint_r.part.0+0x54>
   8444c:	2400      	movs	r4, #0
   8444e:	3d04      	subs	r5, #4
   84450:	e001      	b.n	84456 <__sprint_r.part.0+0x2e>
   84452:	45a0      	cmp	r8, r4
   84454:	d010      	beq.n	84478 <__sprint_r.part.0+0x50>
   84456:	4632      	mov	r2, r6
   84458:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8445c:	4638      	mov	r0, r7
   8445e:	f001 f8b5 	bl	855cc <_fputwc_r>
   84462:	1c43      	adds	r3, r0, #1
   84464:	f104 0401 	add.w	r4, r4, #1
   84468:	d1f3      	bne.n	84452 <__sprint_r.part.0+0x2a>
   8446a:	2300      	movs	r3, #0
   8446c:	f8cb 3008 	str.w	r3, [fp, #8]
   84470:	f8cb 3004 	str.w	r3, [fp, #4]
   84474:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84478:	f8db 3008 	ldr.w	r3, [fp, #8]
   8447c:	f02a 0a03 	bic.w	sl, sl, #3
   84480:	eba3 030a 	sub.w	r3, r3, sl
   84484:	f8cb 3008 	str.w	r3, [fp, #8]
   84488:	f109 0908 	add.w	r9, r9, #8
   8448c:	2b00      	cmp	r3, #0
   8448e:	d1d8      	bne.n	84442 <__sprint_r.part.0+0x1a>
   84490:	2000      	movs	r0, #0
   84492:	e7ea      	b.n	8446a <__sprint_r.part.0+0x42>
   84494:	f001 fa04 	bl	858a0 <__sfvwrite_r>
   84498:	2300      	movs	r3, #0
   8449a:	f8cb 3008 	str.w	r3, [fp, #8]
   8449e:	f8cb 3004 	str.w	r3, [fp, #4]
   844a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844a6:	bf00      	nop

000844a8 <_vfiprintf_r>:
   844a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   844ac:	b0ad      	sub	sp, #180	; 0xb4
   844ae:	461d      	mov	r5, r3
   844b0:	468b      	mov	fp, r1
   844b2:	4690      	mov	r8, r2
   844b4:	9307      	str	r3, [sp, #28]
   844b6:	9006      	str	r0, [sp, #24]
   844b8:	b118      	cbz	r0, 844c2 <_vfiprintf_r+0x1a>
   844ba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   844bc:	2b00      	cmp	r3, #0
   844be:	f000 80f3 	beq.w	846a8 <_vfiprintf_r+0x200>
   844c2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   844c6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   844ca:	07df      	lsls	r7, r3, #31
   844cc:	b281      	uxth	r1, r0
   844ce:	d402      	bmi.n	844d6 <_vfiprintf_r+0x2e>
   844d0:	058e      	lsls	r6, r1, #22
   844d2:	f140 80fc 	bpl.w	846ce <_vfiprintf_r+0x226>
   844d6:	048c      	lsls	r4, r1, #18
   844d8:	d40a      	bmi.n	844f0 <_vfiprintf_r+0x48>
   844da:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   844de:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   844e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   844e6:	f8ab 100c 	strh.w	r1, [fp, #12]
   844ea:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   844ee:	b289      	uxth	r1, r1
   844f0:	0708      	lsls	r0, r1, #28
   844f2:	f140 80b3 	bpl.w	8465c <_vfiprintf_r+0x1b4>
   844f6:	f8db 3010 	ldr.w	r3, [fp, #16]
   844fa:	2b00      	cmp	r3, #0
   844fc:	f000 80ae 	beq.w	8465c <_vfiprintf_r+0x1b4>
   84500:	f001 031a 	and.w	r3, r1, #26
   84504:	2b0a      	cmp	r3, #10
   84506:	f000 80b5 	beq.w	84674 <_vfiprintf_r+0x1cc>
   8450a:	2300      	movs	r3, #0
   8450c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   84510:	46d1      	mov	r9, sl
   84512:	930b      	str	r3, [sp, #44]	; 0x2c
   84514:	9303      	str	r3, [sp, #12]
   84516:	9311      	str	r3, [sp, #68]	; 0x44
   84518:	9310      	str	r3, [sp, #64]	; 0x40
   8451a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8451e:	f8cd b010 	str.w	fp, [sp, #16]
   84522:	f898 3000 	ldrb.w	r3, [r8]
   84526:	4644      	mov	r4, r8
   84528:	b1fb      	cbz	r3, 8456a <_vfiprintf_r+0xc2>
   8452a:	2b25      	cmp	r3, #37	; 0x25
   8452c:	d102      	bne.n	84534 <_vfiprintf_r+0x8c>
   8452e:	e01c      	b.n	8456a <_vfiprintf_r+0xc2>
   84530:	2b25      	cmp	r3, #37	; 0x25
   84532:	d003      	beq.n	8453c <_vfiprintf_r+0x94>
   84534:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   84538:	2b00      	cmp	r3, #0
   8453a:	d1f9      	bne.n	84530 <_vfiprintf_r+0x88>
   8453c:	eba4 0508 	sub.w	r5, r4, r8
   84540:	b19d      	cbz	r5, 8456a <_vfiprintf_r+0xc2>
   84542:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84544:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84546:	3301      	adds	r3, #1
   84548:	442a      	add	r2, r5
   8454a:	2b07      	cmp	r3, #7
   8454c:	f8c9 8000 	str.w	r8, [r9]
   84550:	f8c9 5004 	str.w	r5, [r9, #4]
   84554:	9211      	str	r2, [sp, #68]	; 0x44
   84556:	9310      	str	r3, [sp, #64]	; 0x40
   84558:	dd7a      	ble.n	84650 <_vfiprintf_r+0x1a8>
   8455a:	2a00      	cmp	r2, #0
   8455c:	f040 84b5 	bne.w	84eca <_vfiprintf_r+0xa22>
   84560:	46d1      	mov	r9, sl
   84562:	9b03      	ldr	r3, [sp, #12]
   84564:	9210      	str	r2, [sp, #64]	; 0x40
   84566:	442b      	add	r3, r5
   84568:	9303      	str	r3, [sp, #12]
   8456a:	7823      	ldrb	r3, [r4, #0]
   8456c:	2b00      	cmp	r3, #0
   8456e:	f000 83e5 	beq.w	84d3c <_vfiprintf_r+0x894>
   84572:	2000      	movs	r0, #0
   84574:	f04f 0300 	mov.w	r3, #0
   84578:	f104 0801 	add.w	r8, r4, #1
   8457c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   84580:	7862      	ldrb	r2, [r4, #1]
   84582:	4606      	mov	r6, r0
   84584:	4605      	mov	r5, r0
   84586:	4603      	mov	r3, r0
   84588:	f04f 34ff 	mov.w	r4, #4294967295
   8458c:	f108 0801 	add.w	r8, r8, #1
   84590:	f1a2 0120 	sub.w	r1, r2, #32
   84594:	2958      	cmp	r1, #88	; 0x58
   84596:	f200 82d9 	bhi.w	84b4c <_vfiprintf_r+0x6a4>
   8459a:	e8df f011 	tbh	[pc, r1, lsl #1]
   8459e:	0228      	.short	0x0228
   845a0:	02d702d7 	.word	0x02d702d7
   845a4:	02d70230 	.word	0x02d70230
   845a8:	02d702d7 	.word	0x02d702d7
   845ac:	02d702d7 	.word	0x02d702d7
   845b0:	00a002d7 	.word	0x00a002d7
   845b4:	02d70288 	.word	0x02d70288
   845b8:	02b800a8 	.word	0x02b800a8
   845bc:	01a602d7 	.word	0x01a602d7
   845c0:	01ab01ab 	.word	0x01ab01ab
   845c4:	01ab01ab 	.word	0x01ab01ab
   845c8:	01ab01ab 	.word	0x01ab01ab
   845cc:	01ab01ab 	.word	0x01ab01ab
   845d0:	02d701ab 	.word	0x02d701ab
   845d4:	02d702d7 	.word	0x02d702d7
   845d8:	02d702d7 	.word	0x02d702d7
   845dc:	02d702d7 	.word	0x02d702d7
   845e0:	02d702d7 	.word	0x02d702d7
   845e4:	01b902d7 	.word	0x01b902d7
   845e8:	02d702d7 	.word	0x02d702d7
   845ec:	02d702d7 	.word	0x02d702d7
   845f0:	02d702d7 	.word	0x02d702d7
   845f4:	02d702d7 	.word	0x02d702d7
   845f8:	02d702d7 	.word	0x02d702d7
   845fc:	02d7019e 	.word	0x02d7019e
   84600:	02d702d7 	.word	0x02d702d7
   84604:	02d702d7 	.word	0x02d702d7
   84608:	02d701a2 	.word	0x02d701a2
   8460c:	025a02d7 	.word	0x025a02d7
   84610:	02d702d7 	.word	0x02d702d7
   84614:	02d702d7 	.word	0x02d702d7
   84618:	02d702d7 	.word	0x02d702d7
   8461c:	02d702d7 	.word	0x02d702d7
   84620:	02d702d7 	.word	0x02d702d7
   84624:	02220261 	.word	0x02220261
   84628:	02d702d7 	.word	0x02d702d7
   8462c:	027602d7 	.word	0x027602d7
   84630:	02d70222 	.word	0x02d70222
   84634:	027b02d7 	.word	0x027b02d7
   84638:	01fc02d7 	.word	0x01fc02d7
   8463c:	02100189 	.word	0x02100189
   84640:	02d702d2 	.word	0x02d702d2
   84644:	02d70295 	.word	0x02d70295
   84648:	02d700ad 	.word	0x02d700ad
   8464c:	023502d7 	.word	0x023502d7
   84650:	f109 0908 	add.w	r9, r9, #8
   84654:	9b03      	ldr	r3, [sp, #12]
   84656:	442b      	add	r3, r5
   84658:	9303      	str	r3, [sp, #12]
   8465a:	e786      	b.n	8456a <_vfiprintf_r+0xc2>
   8465c:	4659      	mov	r1, fp
   8465e:	9806      	ldr	r0, [sp, #24]
   84660:	f000 fdaa 	bl	851b8 <__swsetup_r>
   84664:	bb18      	cbnz	r0, 846ae <_vfiprintf_r+0x206>
   84666:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   8466a:	f001 031a 	and.w	r3, r1, #26
   8466e:	2b0a      	cmp	r3, #10
   84670:	f47f af4b 	bne.w	8450a <_vfiprintf_r+0x62>
   84674:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   84678:	2b00      	cmp	r3, #0
   8467a:	f6ff af46 	blt.w	8450a <_vfiprintf_r+0x62>
   8467e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   84682:	07db      	lsls	r3, r3, #31
   84684:	d405      	bmi.n	84692 <_vfiprintf_r+0x1ea>
   84686:	058f      	lsls	r7, r1, #22
   84688:	d403      	bmi.n	84692 <_vfiprintf_r+0x1ea>
   8468a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8468e:	f001 fabd 	bl	85c0c <__retarget_lock_release_recursive>
   84692:	462b      	mov	r3, r5
   84694:	4642      	mov	r2, r8
   84696:	4659      	mov	r1, fp
   84698:	9806      	ldr	r0, [sp, #24]
   8469a:	f000 fd49 	bl	85130 <__sbprintf>
   8469e:	9003      	str	r0, [sp, #12]
   846a0:	9803      	ldr	r0, [sp, #12]
   846a2:	b02d      	add	sp, #180	; 0xb4
   846a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846a8:	f000 feee 	bl	85488 <__sinit>
   846ac:	e709      	b.n	844c2 <_vfiprintf_r+0x1a>
   846ae:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   846b2:	07d9      	lsls	r1, r3, #31
   846b4:	d404      	bmi.n	846c0 <_vfiprintf_r+0x218>
   846b6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   846ba:	059a      	lsls	r2, r3, #22
   846bc:	f140 84ae 	bpl.w	8501c <_vfiprintf_r+0xb74>
   846c0:	f04f 33ff 	mov.w	r3, #4294967295
   846c4:	9303      	str	r3, [sp, #12]
   846c6:	9803      	ldr	r0, [sp, #12]
   846c8:	b02d      	add	sp, #180	; 0xb4
   846ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846ce:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   846d2:	f001 fa99 	bl	85c08 <__retarget_lock_acquire_recursive>
   846d6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   846da:	b281      	uxth	r1, r0
   846dc:	e6fb      	b.n	844d6 <_vfiprintf_r+0x2e>
   846de:	9907      	ldr	r1, [sp, #28]
   846e0:	460a      	mov	r2, r1
   846e2:	680d      	ldr	r5, [r1, #0]
   846e4:	3204      	adds	r2, #4
   846e6:	2d00      	cmp	r5, #0
   846e8:	9207      	str	r2, [sp, #28]
   846ea:	da02      	bge.n	846f2 <_vfiprintf_r+0x24a>
   846ec:	426d      	negs	r5, r5
   846ee:	f043 0304 	orr.w	r3, r3, #4
   846f2:	f898 2000 	ldrb.w	r2, [r8]
   846f6:	e749      	b.n	8458c <_vfiprintf_r+0xe4>
   846f8:	9508      	str	r5, [sp, #32]
   846fa:	069e      	lsls	r6, r3, #26
   846fc:	f100 845a 	bmi.w	84fb4 <_vfiprintf_r+0xb0c>
   84700:	9907      	ldr	r1, [sp, #28]
   84702:	06dd      	lsls	r5, r3, #27
   84704:	460a      	mov	r2, r1
   84706:	f100 83ef 	bmi.w	84ee8 <_vfiprintf_r+0xa40>
   8470a:	0658      	lsls	r0, r3, #25
   8470c:	f140 83ec 	bpl.w	84ee8 <_vfiprintf_r+0xa40>
   84710:	2700      	movs	r7, #0
   84712:	2201      	movs	r2, #1
   84714:	880e      	ldrh	r6, [r1, #0]
   84716:	3104      	adds	r1, #4
   84718:	9107      	str	r1, [sp, #28]
   8471a:	f04f 0100 	mov.w	r1, #0
   8471e:	2500      	movs	r5, #0
   84720:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   84724:	1c61      	adds	r1, r4, #1
   84726:	f000 8117 	beq.w	84958 <_vfiprintf_r+0x4b0>
   8472a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   8472e:	9102      	str	r1, [sp, #8]
   84730:	ea56 0107 	orrs.w	r1, r6, r7
   84734:	f040 8115 	bne.w	84962 <_vfiprintf_r+0x4ba>
   84738:	2c00      	cmp	r4, #0
   8473a:	f040 835b 	bne.w	84df4 <_vfiprintf_r+0x94c>
   8473e:	2a00      	cmp	r2, #0
   84740:	f040 83b6 	bne.w	84eb0 <_vfiprintf_r+0xa08>
   84744:	f013 0301 	ands.w	r3, r3, #1
   84748:	9305      	str	r3, [sp, #20]
   8474a:	f000 8455 	beq.w	84ff8 <_vfiprintf_r+0xb50>
   8474e:	2330      	movs	r3, #48	; 0x30
   84750:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   84754:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   84758:	9b05      	ldr	r3, [sp, #20]
   8475a:	42a3      	cmp	r3, r4
   8475c:	bfb8      	it	lt
   8475e:	4623      	movlt	r3, r4
   84760:	9301      	str	r3, [sp, #4]
   84762:	b10d      	cbz	r5, 84768 <_vfiprintf_r+0x2c0>
   84764:	3301      	adds	r3, #1
   84766:	9301      	str	r3, [sp, #4]
   84768:	9b02      	ldr	r3, [sp, #8]
   8476a:	f013 0302 	ands.w	r3, r3, #2
   8476e:	9309      	str	r3, [sp, #36]	; 0x24
   84770:	d002      	beq.n	84778 <_vfiprintf_r+0x2d0>
   84772:	9b01      	ldr	r3, [sp, #4]
   84774:	3302      	adds	r3, #2
   84776:	9301      	str	r3, [sp, #4]
   84778:	9b02      	ldr	r3, [sp, #8]
   8477a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8477e:	930a      	str	r3, [sp, #40]	; 0x28
   84780:	f040 8215 	bne.w	84bae <_vfiprintf_r+0x706>
   84784:	9b08      	ldr	r3, [sp, #32]
   84786:	9a01      	ldr	r2, [sp, #4]
   84788:	1a9d      	subs	r5, r3, r2
   8478a:	2d00      	cmp	r5, #0
   8478c:	f340 820f 	ble.w	84bae <_vfiprintf_r+0x706>
   84790:	2d10      	cmp	r5, #16
   84792:	f340 8484 	ble.w	8509e <_vfiprintf_r+0xbf6>
   84796:	9b10      	ldr	r3, [sp, #64]	; 0x40
   84798:	46ce      	mov	lr, r9
   8479a:	2710      	movs	r7, #16
   8479c:	46a1      	mov	r9, r4
   8479e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   847a0:	4ec5      	ldr	r6, [pc, #788]	; (84ab8 <_vfiprintf_r+0x610>)
   847a2:	4619      	mov	r1, r3
   847a4:	9c06      	ldr	r4, [sp, #24]
   847a6:	e007      	b.n	847b8 <_vfiprintf_r+0x310>
   847a8:	f101 0c02 	add.w	ip, r1, #2
   847ac:	4601      	mov	r1, r0
   847ae:	f10e 0e08 	add.w	lr, lr, #8
   847b2:	3d10      	subs	r5, #16
   847b4:	2d10      	cmp	r5, #16
   847b6:	dd11      	ble.n	847dc <_vfiprintf_r+0x334>
   847b8:	1c48      	adds	r0, r1, #1
   847ba:	3210      	adds	r2, #16
   847bc:	2807      	cmp	r0, #7
   847be:	9211      	str	r2, [sp, #68]	; 0x44
   847c0:	e88e 00c0 	stmia.w	lr, {r6, r7}
   847c4:	9010      	str	r0, [sp, #64]	; 0x40
   847c6:	ddef      	ble.n	847a8 <_vfiprintf_r+0x300>
   847c8:	2a00      	cmp	r2, #0
   847ca:	f040 81d9 	bne.w	84b80 <_vfiprintf_r+0x6d8>
   847ce:	3d10      	subs	r5, #16
   847d0:	2d10      	cmp	r5, #16
   847d2:	4611      	mov	r1, r2
   847d4:	f04f 0c01 	mov.w	ip, #1
   847d8:	46d6      	mov	lr, sl
   847da:	dced      	bgt.n	847b8 <_vfiprintf_r+0x310>
   847dc:	464c      	mov	r4, r9
   847de:	4661      	mov	r1, ip
   847e0:	46f1      	mov	r9, lr
   847e2:	442a      	add	r2, r5
   847e4:	2907      	cmp	r1, #7
   847e6:	9211      	str	r2, [sp, #68]	; 0x44
   847e8:	f8c9 6000 	str.w	r6, [r9]
   847ec:	f8c9 5004 	str.w	r5, [r9, #4]
   847f0:	9110      	str	r1, [sp, #64]	; 0x40
   847f2:	f300 82eb 	bgt.w	84dcc <_vfiprintf_r+0x924>
   847f6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   847fa:	f109 0908 	add.w	r9, r9, #8
   847fe:	1c48      	adds	r0, r1, #1
   84800:	2d00      	cmp	r5, #0
   84802:	f040 81dc 	bne.w	84bbe <_vfiprintf_r+0x716>
   84806:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84808:	2b00      	cmp	r3, #0
   8480a:	f000 81f6 	beq.w	84bfa <_vfiprintf_r+0x752>
   8480e:	2102      	movs	r1, #2
   84810:	ab0e      	add	r3, sp, #56	; 0x38
   84812:	440a      	add	r2, r1
   84814:	2807      	cmp	r0, #7
   84816:	9211      	str	r2, [sp, #68]	; 0x44
   84818:	9010      	str	r0, [sp, #64]	; 0x40
   8481a:	f8c9 1004 	str.w	r1, [r9, #4]
   8481e:	f8c9 3000 	str.w	r3, [r9]
   84822:	f340 81e6 	ble.w	84bf2 <_vfiprintf_r+0x74a>
   84826:	2a00      	cmp	r2, #0
   84828:	f040 8395 	bne.w	84f56 <_vfiprintf_r+0xaae>
   8482c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8482e:	2001      	movs	r0, #1
   84830:	2b80      	cmp	r3, #128	; 0x80
   84832:	4611      	mov	r1, r2
   84834:	46d1      	mov	r9, sl
   84836:	f040 81e4 	bne.w	84c02 <_vfiprintf_r+0x75a>
   8483a:	9b08      	ldr	r3, [sp, #32]
   8483c:	9d01      	ldr	r5, [sp, #4]
   8483e:	1b5e      	subs	r6, r3, r5
   84840:	2e00      	cmp	r6, #0
   84842:	f340 81de 	ble.w	84c02 <_vfiprintf_r+0x75a>
   84846:	2e10      	cmp	r6, #16
   84848:	f340 843c 	ble.w	850c4 <_vfiprintf_r+0xc1c>
   8484c:	46cc      	mov	ip, r9
   8484e:	2710      	movs	r7, #16
   84850:	46a1      	mov	r9, r4
   84852:	4d9a      	ldr	r5, [pc, #616]	; (84abc <_vfiprintf_r+0x614>)
   84854:	9c06      	ldr	r4, [sp, #24]
   84856:	e007      	b.n	84868 <_vfiprintf_r+0x3c0>
   84858:	f101 0e02 	add.w	lr, r1, #2
   8485c:	4601      	mov	r1, r0
   8485e:	f10c 0c08 	add.w	ip, ip, #8
   84862:	3e10      	subs	r6, #16
   84864:	2e10      	cmp	r6, #16
   84866:	dd11      	ble.n	8488c <_vfiprintf_r+0x3e4>
   84868:	1c48      	adds	r0, r1, #1
   8486a:	3210      	adds	r2, #16
   8486c:	2807      	cmp	r0, #7
   8486e:	9211      	str	r2, [sp, #68]	; 0x44
   84870:	e88c 00a0 	stmia.w	ip, {r5, r7}
   84874:	9010      	str	r0, [sp, #64]	; 0x40
   84876:	ddef      	ble.n	84858 <_vfiprintf_r+0x3b0>
   84878:	2a00      	cmp	r2, #0
   8487a:	f040 829b 	bne.w	84db4 <_vfiprintf_r+0x90c>
   8487e:	3e10      	subs	r6, #16
   84880:	2e10      	cmp	r6, #16
   84882:	f04f 0e01 	mov.w	lr, #1
   84886:	4611      	mov	r1, r2
   84888:	46d4      	mov	ip, sl
   8488a:	dced      	bgt.n	84868 <_vfiprintf_r+0x3c0>
   8488c:	464c      	mov	r4, r9
   8488e:	46e1      	mov	r9, ip
   84890:	4432      	add	r2, r6
   84892:	f1be 0f07 	cmp.w	lr, #7
   84896:	9211      	str	r2, [sp, #68]	; 0x44
   84898:	e889 0060 	stmia.w	r9, {r5, r6}
   8489c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   848a0:	f300 8366 	bgt.w	84f70 <_vfiprintf_r+0xac8>
   848a4:	f109 0908 	add.w	r9, r9, #8
   848a8:	f10e 0001 	add.w	r0, lr, #1
   848ac:	4671      	mov	r1, lr
   848ae:	e1a8      	b.n	84c02 <_vfiprintf_r+0x75a>
   848b0:	9508      	str	r5, [sp, #32]
   848b2:	f013 0220 	ands.w	r2, r3, #32
   848b6:	f040 8389 	bne.w	84fcc <_vfiprintf_r+0xb24>
   848ba:	f013 0110 	ands.w	r1, r3, #16
   848be:	f040 8319 	bne.w	84ef4 <_vfiprintf_r+0xa4c>
   848c2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   848c6:	f000 8315 	beq.w	84ef4 <_vfiprintf_r+0xa4c>
   848ca:	9807      	ldr	r0, [sp, #28]
   848cc:	460a      	mov	r2, r1
   848ce:	4601      	mov	r1, r0
   848d0:	3104      	adds	r1, #4
   848d2:	8806      	ldrh	r6, [r0, #0]
   848d4:	2700      	movs	r7, #0
   848d6:	9107      	str	r1, [sp, #28]
   848d8:	e71f      	b.n	8471a <_vfiprintf_r+0x272>
   848da:	9508      	str	r5, [sp, #32]
   848dc:	f043 0310 	orr.w	r3, r3, #16
   848e0:	e7e7      	b.n	848b2 <_vfiprintf_r+0x40a>
   848e2:	9508      	str	r5, [sp, #32]
   848e4:	f043 0310 	orr.w	r3, r3, #16
   848e8:	e707      	b.n	846fa <_vfiprintf_r+0x252>
   848ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   848ee:	f898 2000 	ldrb.w	r2, [r8]
   848f2:	e64b      	b.n	8458c <_vfiprintf_r+0xe4>
   848f4:	2500      	movs	r5, #0
   848f6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   848fa:	f818 2b01 	ldrb.w	r2, [r8], #1
   848fe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84902:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   84906:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8490a:	2909      	cmp	r1, #9
   8490c:	d9f5      	bls.n	848fa <_vfiprintf_r+0x452>
   8490e:	e63f      	b.n	84590 <_vfiprintf_r+0xe8>
   84910:	9508      	str	r5, [sp, #32]
   84912:	2800      	cmp	r0, #0
   84914:	f040 8402 	bne.w	8511c <_vfiprintf_r+0xc74>
   84918:	f043 0310 	orr.w	r3, r3, #16
   8491c:	069e      	lsls	r6, r3, #26
   8491e:	f100 833d 	bmi.w	84f9c <_vfiprintf_r+0xaf4>
   84922:	9907      	ldr	r1, [sp, #28]
   84924:	06dd      	lsls	r5, r3, #27
   84926:	460a      	mov	r2, r1
   84928:	f100 82f0 	bmi.w	84f0c <_vfiprintf_r+0xa64>
   8492c:	0658      	lsls	r0, r3, #25
   8492e:	f140 82ed 	bpl.w	84f0c <_vfiprintf_r+0xa64>
   84932:	f9b1 6000 	ldrsh.w	r6, [r1]
   84936:	3204      	adds	r2, #4
   84938:	17f7      	asrs	r7, r6, #31
   8493a:	4630      	mov	r0, r6
   8493c:	4639      	mov	r1, r7
   8493e:	9207      	str	r2, [sp, #28]
   84940:	2800      	cmp	r0, #0
   84942:	f171 0200 	sbcs.w	r2, r1, #0
   84946:	f2c0 835a 	blt.w	84ffe <_vfiprintf_r+0xb56>
   8494a:	1c61      	adds	r1, r4, #1
   8494c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84950:	f04f 0201 	mov.w	r2, #1
   84954:	f47f aee9 	bne.w	8472a <_vfiprintf_r+0x282>
   84958:	ea56 0107 	orrs.w	r1, r6, r7
   8495c:	f000 824b 	beq.w	84df6 <_vfiprintf_r+0x94e>
   84960:	9302      	str	r3, [sp, #8]
   84962:	2a01      	cmp	r2, #1
   84964:	f000 828a 	beq.w	84e7c <_vfiprintf_r+0x9d4>
   84968:	2a02      	cmp	r2, #2
   8496a:	f040 825a 	bne.w	84e22 <_vfiprintf_r+0x97a>
   8496e:	46d3      	mov	fp, sl
   84970:	980b      	ldr	r0, [sp, #44]	; 0x2c
   84972:	0933      	lsrs	r3, r6, #4
   84974:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   84978:	0939      	lsrs	r1, r7, #4
   8497a:	f006 020f 	and.w	r2, r6, #15
   8497e:	460f      	mov	r7, r1
   84980:	461e      	mov	r6, r3
   84982:	5c83      	ldrb	r3, [r0, r2]
   84984:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   84988:	ea56 0307 	orrs.w	r3, r6, r7
   8498c:	d1f1      	bne.n	84972 <_vfiprintf_r+0x4ca>
   8498e:	ebaa 030b 	sub.w	r3, sl, fp
   84992:	9305      	str	r3, [sp, #20]
   84994:	e6e0      	b.n	84758 <_vfiprintf_r+0x2b0>
   84996:	2800      	cmp	r0, #0
   84998:	f040 83bd 	bne.w	85116 <_vfiprintf_r+0xc6e>
   8499c:	0699      	lsls	r1, r3, #26
   8499e:	f100 8359 	bmi.w	85054 <_vfiprintf_r+0xbac>
   849a2:	06da      	lsls	r2, r3, #27
   849a4:	f100 80e5 	bmi.w	84b72 <_vfiprintf_r+0x6ca>
   849a8:	065b      	lsls	r3, r3, #25
   849aa:	f140 80e2 	bpl.w	84b72 <_vfiprintf_r+0x6ca>
   849ae:	9a07      	ldr	r2, [sp, #28]
   849b0:	6813      	ldr	r3, [r2, #0]
   849b2:	3204      	adds	r2, #4
   849b4:	9207      	str	r2, [sp, #28]
   849b6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   849ba:	801a      	strh	r2, [r3, #0]
   849bc:	e5b1      	b.n	84522 <_vfiprintf_r+0x7a>
   849be:	2278      	movs	r2, #120	; 0x78
   849c0:	2130      	movs	r1, #48	; 0x30
   849c2:	9508      	str	r5, [sp, #32]
   849c4:	9d07      	ldr	r5, [sp, #28]
   849c6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   849ca:	1d2a      	adds	r2, r5, #4
   849cc:	9207      	str	r2, [sp, #28]
   849ce:	4a3c      	ldr	r2, [pc, #240]	; (84ac0 <_vfiprintf_r+0x618>)
   849d0:	682e      	ldr	r6, [r5, #0]
   849d2:	920b      	str	r2, [sp, #44]	; 0x2c
   849d4:	f043 0302 	orr.w	r3, r3, #2
   849d8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   849dc:	2700      	movs	r7, #0
   849de:	2202      	movs	r2, #2
   849e0:	e69b      	b.n	8471a <_vfiprintf_r+0x272>
   849e2:	9508      	str	r5, [sp, #32]
   849e4:	2800      	cmp	r0, #0
   849e6:	d099      	beq.n	8491c <_vfiprintf_r+0x474>
   849e8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   849ec:	e796      	b.n	8491c <_vfiprintf_r+0x474>
   849ee:	f898 2000 	ldrb.w	r2, [r8]
   849f2:	2e00      	cmp	r6, #0
   849f4:	f47f adca 	bne.w	8458c <_vfiprintf_r+0xe4>
   849f8:	2001      	movs	r0, #1
   849fa:	2620      	movs	r6, #32
   849fc:	e5c6      	b.n	8458c <_vfiprintf_r+0xe4>
   849fe:	f043 0301 	orr.w	r3, r3, #1
   84a02:	f898 2000 	ldrb.w	r2, [r8]
   84a06:	e5c1      	b.n	8458c <_vfiprintf_r+0xe4>
   84a08:	9508      	str	r5, [sp, #32]
   84a0a:	2800      	cmp	r0, #0
   84a0c:	f040 8380 	bne.w	85110 <_vfiprintf_r+0xc68>
   84a10:	492b      	ldr	r1, [pc, #172]	; (84ac0 <_vfiprintf_r+0x618>)
   84a12:	910b      	str	r1, [sp, #44]	; 0x2c
   84a14:	069f      	lsls	r7, r3, #26
   84a16:	f100 82e5 	bmi.w	84fe4 <_vfiprintf_r+0xb3c>
   84a1a:	9807      	ldr	r0, [sp, #28]
   84a1c:	06de      	lsls	r6, r3, #27
   84a1e:	4601      	mov	r1, r0
   84a20:	f100 826f 	bmi.w	84f02 <_vfiprintf_r+0xa5a>
   84a24:	065d      	lsls	r5, r3, #25
   84a26:	f140 826c 	bpl.w	84f02 <_vfiprintf_r+0xa5a>
   84a2a:	2700      	movs	r7, #0
   84a2c:	3104      	adds	r1, #4
   84a2e:	8806      	ldrh	r6, [r0, #0]
   84a30:	9107      	str	r1, [sp, #28]
   84a32:	07d8      	lsls	r0, r3, #31
   84a34:	f140 8220 	bpl.w	84e78 <_vfiprintf_r+0x9d0>
   84a38:	ea56 0107 	orrs.w	r1, r6, r7
   84a3c:	f000 821c 	beq.w	84e78 <_vfiprintf_r+0x9d0>
   84a40:	2130      	movs	r1, #48	; 0x30
   84a42:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   84a46:	f043 0302 	orr.w	r3, r3, #2
   84a4a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   84a4e:	2202      	movs	r2, #2
   84a50:	e663      	b.n	8471a <_vfiprintf_r+0x272>
   84a52:	9508      	str	r5, [sp, #32]
   84a54:	2800      	cmp	r0, #0
   84a56:	f040 8355 	bne.w	85104 <_vfiprintf_r+0xc5c>
   84a5a:	491a      	ldr	r1, [pc, #104]	; (84ac4 <_vfiprintf_r+0x61c>)
   84a5c:	910b      	str	r1, [sp, #44]	; 0x2c
   84a5e:	e7d9      	b.n	84a14 <_vfiprintf_r+0x56c>
   84a60:	2201      	movs	r2, #1
   84a62:	9807      	ldr	r0, [sp, #28]
   84a64:	4611      	mov	r1, r2
   84a66:	9201      	str	r2, [sp, #4]
   84a68:	6802      	ldr	r2, [r0, #0]
   84a6a:	f04f 0400 	mov.w	r4, #0
   84a6e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   84a72:	4602      	mov	r2, r0
   84a74:	3204      	adds	r2, #4
   84a76:	9508      	str	r5, [sp, #32]
   84a78:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   84a7c:	9105      	str	r1, [sp, #20]
   84a7e:	9207      	str	r2, [sp, #28]
   84a80:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   84a84:	9302      	str	r3, [sp, #8]
   84a86:	2400      	movs	r4, #0
   84a88:	e66e      	b.n	84768 <_vfiprintf_r+0x2c0>
   84a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84a8e:	f898 2000 	ldrb.w	r2, [r8]
   84a92:	e57b      	b.n	8458c <_vfiprintf_r+0xe4>
   84a94:	f898 2000 	ldrb.w	r2, [r8]
   84a98:	2a6c      	cmp	r2, #108	; 0x6c
   84a9a:	bf03      	ittte	eq
   84a9c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   84aa0:	f043 0320 	orreq.w	r3, r3, #32
   84aa4:	f108 0801 	addeq.w	r8, r8, #1
   84aa8:	f043 0310 	orrne.w	r3, r3, #16
   84aac:	e56e      	b.n	8458c <_vfiprintf_r+0xe4>
   84aae:	f898 2000 	ldrb.w	r2, [r8]
   84ab2:	2001      	movs	r0, #1
   84ab4:	262b      	movs	r6, #43	; 0x2b
   84ab6:	e569      	b.n	8458c <_vfiprintf_r+0xe4>
   84ab8:	00087034 	.word	0x00087034
   84abc:	00087044 	.word	0x00087044
   84ac0:	00087018 	.word	0x00087018
   84ac4:	00087004 	.word	0x00087004
   84ac8:	f04f 0200 	mov.w	r2, #0
   84acc:	9907      	ldr	r1, [sp, #28]
   84ace:	9508      	str	r5, [sp, #32]
   84ad0:	f8d1 b000 	ldr.w	fp, [r1]
   84ad4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   84ad8:	1d0d      	adds	r5, r1, #4
   84ada:	f1bb 0f00 	cmp.w	fp, #0
   84ade:	f000 82e4 	beq.w	850aa <_vfiprintf_r+0xc02>
   84ae2:	1c67      	adds	r7, r4, #1
   84ae4:	f000 82c3 	beq.w	8506e <_vfiprintf_r+0xbc6>
   84ae8:	4622      	mov	r2, r4
   84aea:	2100      	movs	r1, #0
   84aec:	4658      	mov	r0, fp
   84aee:	9301      	str	r3, [sp, #4]
   84af0:	f001 fbc6 	bl	86280 <memchr>
   84af4:	9b01      	ldr	r3, [sp, #4]
   84af6:	2800      	cmp	r0, #0
   84af8:	f000 82e8 	beq.w	850cc <_vfiprintf_r+0xc24>
   84afc:	eba0 020b 	sub.w	r2, r0, fp
   84b00:	9507      	str	r5, [sp, #28]
   84b02:	9205      	str	r2, [sp, #20]
   84b04:	9302      	str	r3, [sp, #8]
   84b06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84b0a:	2400      	movs	r4, #0
   84b0c:	e624      	b.n	84758 <_vfiprintf_r+0x2b0>
   84b0e:	f898 2000 	ldrb.w	r2, [r8]
   84b12:	f108 0701 	add.w	r7, r8, #1
   84b16:	2a2a      	cmp	r2, #42	; 0x2a
   84b18:	f000 82e9 	beq.w	850ee <_vfiprintf_r+0xc46>
   84b1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   84b20:	2909      	cmp	r1, #9
   84b22:	46b8      	mov	r8, r7
   84b24:	f04f 0400 	mov.w	r4, #0
   84b28:	f63f ad32 	bhi.w	84590 <_vfiprintf_r+0xe8>
   84b2c:	f818 2b01 	ldrb.w	r2, [r8], #1
   84b30:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84b34:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   84b38:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   84b3c:	2909      	cmp	r1, #9
   84b3e:	d9f5      	bls.n	84b2c <_vfiprintf_r+0x684>
   84b40:	e526      	b.n	84590 <_vfiprintf_r+0xe8>
   84b42:	f043 0320 	orr.w	r3, r3, #32
   84b46:	f898 2000 	ldrb.w	r2, [r8]
   84b4a:	e51f      	b.n	8458c <_vfiprintf_r+0xe4>
   84b4c:	9508      	str	r5, [sp, #32]
   84b4e:	2800      	cmp	r0, #0
   84b50:	f040 82db 	bne.w	8510a <_vfiprintf_r+0xc62>
   84b54:	2a00      	cmp	r2, #0
   84b56:	f000 80f1 	beq.w	84d3c <_vfiprintf_r+0x894>
   84b5a:	2101      	movs	r1, #1
   84b5c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   84b60:	f04f 0200 	mov.w	r2, #0
   84b64:	9101      	str	r1, [sp, #4]
   84b66:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   84b6a:	9105      	str	r1, [sp, #20]
   84b6c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   84b70:	e788      	b.n	84a84 <_vfiprintf_r+0x5dc>
   84b72:	9a07      	ldr	r2, [sp, #28]
   84b74:	6813      	ldr	r3, [r2, #0]
   84b76:	3204      	adds	r2, #4
   84b78:	9207      	str	r2, [sp, #28]
   84b7a:	9a03      	ldr	r2, [sp, #12]
   84b7c:	601a      	str	r2, [r3, #0]
   84b7e:	e4d0      	b.n	84522 <_vfiprintf_r+0x7a>
   84b80:	aa0f      	add	r2, sp, #60	; 0x3c
   84b82:	9904      	ldr	r1, [sp, #16]
   84b84:	4620      	mov	r0, r4
   84b86:	f7ff fc4f 	bl	84428 <__sprint_r.part.0>
   84b8a:	2800      	cmp	r0, #0
   84b8c:	f040 8143 	bne.w	84e16 <_vfiprintf_r+0x96e>
   84b90:	9910      	ldr	r1, [sp, #64]	; 0x40
   84b92:	46d6      	mov	lr, sl
   84b94:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84b96:	f101 0c01 	add.w	ip, r1, #1
   84b9a:	e60a      	b.n	847b2 <_vfiprintf_r+0x30a>
   84b9c:	aa0f      	add	r2, sp, #60	; 0x3c
   84b9e:	9904      	ldr	r1, [sp, #16]
   84ba0:	9806      	ldr	r0, [sp, #24]
   84ba2:	f7ff fc41 	bl	84428 <__sprint_r.part.0>
   84ba6:	2800      	cmp	r0, #0
   84ba8:	f040 8135 	bne.w	84e16 <_vfiprintf_r+0x96e>
   84bac:	46d1      	mov	r9, sl
   84bae:	9910      	ldr	r1, [sp, #64]	; 0x40
   84bb0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   84bb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84bb6:	1c48      	adds	r0, r1, #1
   84bb8:	2d00      	cmp	r5, #0
   84bba:	f43f ae24 	beq.w	84806 <_vfiprintf_r+0x35e>
   84bbe:	2101      	movs	r1, #1
   84bc0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   84bc4:	440a      	add	r2, r1
   84bc6:	2807      	cmp	r0, #7
   84bc8:	9211      	str	r2, [sp, #68]	; 0x44
   84bca:	9010      	str	r0, [sp, #64]	; 0x40
   84bcc:	f8c9 1004 	str.w	r1, [r9, #4]
   84bd0:	f8c9 5000 	str.w	r5, [r9]
   84bd4:	f340 8109 	ble.w	84dea <_vfiprintf_r+0x942>
   84bd8:	2a00      	cmp	r2, #0
   84bda:	f040 81af 	bne.w	84f3c <_vfiprintf_r+0xa94>
   84bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   84be0:	2b00      	cmp	r3, #0
   84be2:	f43f ae23 	beq.w	8482c <_vfiprintf_r+0x384>
   84be6:	2202      	movs	r2, #2
   84be8:	4608      	mov	r0, r1
   84bea:	46d1      	mov	r9, sl
   84bec:	ab0e      	add	r3, sp, #56	; 0x38
   84bee:	921d      	str	r2, [sp, #116]	; 0x74
   84bf0:	931c      	str	r3, [sp, #112]	; 0x70
   84bf2:	4601      	mov	r1, r0
   84bf4:	f109 0908 	add.w	r9, r9, #8
   84bf8:	3001      	adds	r0, #1
   84bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   84bfc:	2b80      	cmp	r3, #128	; 0x80
   84bfe:	f43f ae1c 	beq.w	8483a <_vfiprintf_r+0x392>
   84c02:	9b05      	ldr	r3, [sp, #20]
   84c04:	1ae4      	subs	r4, r4, r3
   84c06:	2c00      	cmp	r4, #0
   84c08:	dd2f      	ble.n	84c6a <_vfiprintf_r+0x7c2>
   84c0a:	2c10      	cmp	r4, #16
   84c0c:	f340 8220 	ble.w	85050 <_vfiprintf_r+0xba8>
   84c10:	46ce      	mov	lr, r9
   84c12:	2610      	movs	r6, #16
   84c14:	4db2      	ldr	r5, [pc, #712]	; (84ee0 <_vfiprintf_r+0xa38>)
   84c16:	9f06      	ldr	r7, [sp, #24]
   84c18:	f8dd 9010 	ldr.w	r9, [sp, #16]
   84c1c:	e006      	b.n	84c2c <_vfiprintf_r+0x784>
   84c1e:	1c88      	adds	r0, r1, #2
   84c20:	4619      	mov	r1, r3
   84c22:	f10e 0e08 	add.w	lr, lr, #8
   84c26:	3c10      	subs	r4, #16
   84c28:	2c10      	cmp	r4, #16
   84c2a:	dd10      	ble.n	84c4e <_vfiprintf_r+0x7a6>
   84c2c:	1c4b      	adds	r3, r1, #1
   84c2e:	3210      	adds	r2, #16
   84c30:	2b07      	cmp	r3, #7
   84c32:	9211      	str	r2, [sp, #68]	; 0x44
   84c34:	e88e 0060 	stmia.w	lr, {r5, r6}
   84c38:	9310      	str	r3, [sp, #64]	; 0x40
   84c3a:	ddf0      	ble.n	84c1e <_vfiprintf_r+0x776>
   84c3c:	2a00      	cmp	r2, #0
   84c3e:	d165      	bne.n	84d0c <_vfiprintf_r+0x864>
   84c40:	3c10      	subs	r4, #16
   84c42:	2c10      	cmp	r4, #16
   84c44:	f04f 0001 	mov.w	r0, #1
   84c48:	4611      	mov	r1, r2
   84c4a:	46d6      	mov	lr, sl
   84c4c:	dcee      	bgt.n	84c2c <_vfiprintf_r+0x784>
   84c4e:	46f1      	mov	r9, lr
   84c50:	4422      	add	r2, r4
   84c52:	2807      	cmp	r0, #7
   84c54:	9211      	str	r2, [sp, #68]	; 0x44
   84c56:	f8c9 5000 	str.w	r5, [r9]
   84c5a:	f8c9 4004 	str.w	r4, [r9, #4]
   84c5e:	9010      	str	r0, [sp, #64]	; 0x40
   84c60:	f300 8085 	bgt.w	84d6e <_vfiprintf_r+0x8c6>
   84c64:	f109 0908 	add.w	r9, r9, #8
   84c68:	3001      	adds	r0, #1
   84c6a:	9905      	ldr	r1, [sp, #20]
   84c6c:	2807      	cmp	r0, #7
   84c6e:	440a      	add	r2, r1
   84c70:	9211      	str	r2, [sp, #68]	; 0x44
   84c72:	f8c9 b000 	str.w	fp, [r9]
   84c76:	f8c9 1004 	str.w	r1, [r9, #4]
   84c7a:	9010      	str	r0, [sp, #64]	; 0x40
   84c7c:	f340 8082 	ble.w	84d84 <_vfiprintf_r+0x8dc>
   84c80:	2a00      	cmp	r2, #0
   84c82:	f040 8118 	bne.w	84eb6 <_vfiprintf_r+0xa0e>
   84c86:	9b02      	ldr	r3, [sp, #8]
   84c88:	9210      	str	r2, [sp, #64]	; 0x40
   84c8a:	0758      	lsls	r0, r3, #29
   84c8c:	d535      	bpl.n	84cfa <_vfiprintf_r+0x852>
   84c8e:	9b08      	ldr	r3, [sp, #32]
   84c90:	9901      	ldr	r1, [sp, #4]
   84c92:	1a5c      	subs	r4, r3, r1
   84c94:	2c00      	cmp	r4, #0
   84c96:	f340 80e7 	ble.w	84e68 <_vfiprintf_r+0x9c0>
   84c9a:	46d1      	mov	r9, sl
   84c9c:	2c10      	cmp	r4, #16
   84c9e:	f340 820d 	ble.w	850bc <_vfiprintf_r+0xc14>
   84ca2:	2510      	movs	r5, #16
   84ca4:	9910      	ldr	r1, [sp, #64]	; 0x40
   84ca6:	4e8f      	ldr	r6, [pc, #572]	; (84ee4 <_vfiprintf_r+0xa3c>)
   84ca8:	9f06      	ldr	r7, [sp, #24]
   84caa:	f8dd b010 	ldr.w	fp, [sp, #16]
   84cae:	e006      	b.n	84cbe <_vfiprintf_r+0x816>
   84cb0:	1c88      	adds	r0, r1, #2
   84cb2:	4619      	mov	r1, r3
   84cb4:	f109 0908 	add.w	r9, r9, #8
   84cb8:	3c10      	subs	r4, #16
   84cba:	2c10      	cmp	r4, #16
   84cbc:	dd11      	ble.n	84ce2 <_vfiprintf_r+0x83a>
   84cbe:	1c4b      	adds	r3, r1, #1
   84cc0:	3210      	adds	r2, #16
   84cc2:	2b07      	cmp	r3, #7
   84cc4:	9211      	str	r2, [sp, #68]	; 0x44
   84cc6:	f8c9 6000 	str.w	r6, [r9]
   84cca:	f8c9 5004 	str.w	r5, [r9, #4]
   84cce:	9310      	str	r3, [sp, #64]	; 0x40
   84cd0:	ddee      	ble.n	84cb0 <_vfiprintf_r+0x808>
   84cd2:	bb42      	cbnz	r2, 84d26 <_vfiprintf_r+0x87e>
   84cd4:	3c10      	subs	r4, #16
   84cd6:	2c10      	cmp	r4, #16
   84cd8:	f04f 0001 	mov.w	r0, #1
   84cdc:	4611      	mov	r1, r2
   84cde:	46d1      	mov	r9, sl
   84ce0:	dced      	bgt.n	84cbe <_vfiprintf_r+0x816>
   84ce2:	4422      	add	r2, r4
   84ce4:	2807      	cmp	r0, #7
   84ce6:	9211      	str	r2, [sp, #68]	; 0x44
   84ce8:	f8c9 6000 	str.w	r6, [r9]
   84cec:	f8c9 4004 	str.w	r4, [r9, #4]
   84cf0:	9010      	str	r0, [sp, #64]	; 0x40
   84cf2:	dd51      	ble.n	84d98 <_vfiprintf_r+0x8f0>
   84cf4:	2a00      	cmp	r2, #0
   84cf6:	f040 819a 	bne.w	8502e <_vfiprintf_r+0xb86>
   84cfa:	9b03      	ldr	r3, [sp, #12]
   84cfc:	9a08      	ldr	r2, [sp, #32]
   84cfe:	9901      	ldr	r1, [sp, #4]
   84d00:	428a      	cmp	r2, r1
   84d02:	bfac      	ite	ge
   84d04:	189b      	addge	r3, r3, r2
   84d06:	185b      	addlt	r3, r3, r1
   84d08:	9303      	str	r3, [sp, #12]
   84d0a:	e04e      	b.n	84daa <_vfiprintf_r+0x902>
   84d0c:	aa0f      	add	r2, sp, #60	; 0x3c
   84d0e:	4649      	mov	r1, r9
   84d10:	4638      	mov	r0, r7
   84d12:	f7ff fb89 	bl	84428 <__sprint_r.part.0>
   84d16:	2800      	cmp	r0, #0
   84d18:	f040 813e 	bne.w	84f98 <_vfiprintf_r+0xaf0>
   84d1c:	9910      	ldr	r1, [sp, #64]	; 0x40
   84d1e:	46d6      	mov	lr, sl
   84d20:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84d22:	1c48      	adds	r0, r1, #1
   84d24:	e77f      	b.n	84c26 <_vfiprintf_r+0x77e>
   84d26:	aa0f      	add	r2, sp, #60	; 0x3c
   84d28:	4659      	mov	r1, fp
   84d2a:	4638      	mov	r0, r7
   84d2c:	f7ff fb7c 	bl	84428 <__sprint_r.part.0>
   84d30:	b960      	cbnz	r0, 84d4c <_vfiprintf_r+0x8a4>
   84d32:	9910      	ldr	r1, [sp, #64]	; 0x40
   84d34:	46d1      	mov	r9, sl
   84d36:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84d38:	1c48      	adds	r0, r1, #1
   84d3a:	e7bd      	b.n	84cb8 <_vfiprintf_r+0x810>
   84d3c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   84d3e:	f8dd b010 	ldr.w	fp, [sp, #16]
   84d42:	2b00      	cmp	r3, #0
   84d44:	f040 81ca 	bne.w	850dc <_vfiprintf_r+0xc34>
   84d48:	2300      	movs	r3, #0
   84d4a:	9310      	str	r3, [sp, #64]	; 0x40
   84d4c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   84d50:	f013 0f01 	tst.w	r3, #1
   84d54:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   84d58:	d102      	bne.n	84d60 <_vfiprintf_r+0x8b8>
   84d5a:	059a      	lsls	r2, r3, #22
   84d5c:	f140 80dd 	bpl.w	84f1a <_vfiprintf_r+0xa72>
   84d60:	065b      	lsls	r3, r3, #25
   84d62:	f53f acad 	bmi.w	846c0 <_vfiprintf_r+0x218>
   84d66:	9803      	ldr	r0, [sp, #12]
   84d68:	b02d      	add	sp, #180	; 0xb4
   84d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d6e:	2a00      	cmp	r2, #0
   84d70:	f040 8105 	bne.w	84f7e <_vfiprintf_r+0xad6>
   84d74:	2301      	movs	r3, #1
   84d76:	46d1      	mov	r9, sl
   84d78:	9a05      	ldr	r2, [sp, #20]
   84d7a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   84d7e:	921d      	str	r2, [sp, #116]	; 0x74
   84d80:	9211      	str	r2, [sp, #68]	; 0x44
   84d82:	9310      	str	r3, [sp, #64]	; 0x40
   84d84:	f109 0908 	add.w	r9, r9, #8
   84d88:	9b02      	ldr	r3, [sp, #8]
   84d8a:	0759      	lsls	r1, r3, #29
   84d8c:	d504      	bpl.n	84d98 <_vfiprintf_r+0x8f0>
   84d8e:	9b08      	ldr	r3, [sp, #32]
   84d90:	9901      	ldr	r1, [sp, #4]
   84d92:	1a5c      	subs	r4, r3, r1
   84d94:	2c00      	cmp	r4, #0
   84d96:	dc81      	bgt.n	84c9c <_vfiprintf_r+0x7f4>
   84d98:	9b03      	ldr	r3, [sp, #12]
   84d9a:	9908      	ldr	r1, [sp, #32]
   84d9c:	9801      	ldr	r0, [sp, #4]
   84d9e:	4281      	cmp	r1, r0
   84da0:	bfac      	ite	ge
   84da2:	185b      	addge	r3, r3, r1
   84da4:	181b      	addlt	r3, r3, r0
   84da6:	9303      	str	r3, [sp, #12]
   84da8:	bb72      	cbnz	r2, 84e08 <_vfiprintf_r+0x960>
   84daa:	2300      	movs	r3, #0
   84dac:	46d1      	mov	r9, sl
   84dae:	9310      	str	r3, [sp, #64]	; 0x40
   84db0:	f7ff bbb7 	b.w	84522 <_vfiprintf_r+0x7a>
   84db4:	aa0f      	add	r2, sp, #60	; 0x3c
   84db6:	9904      	ldr	r1, [sp, #16]
   84db8:	4620      	mov	r0, r4
   84dba:	f7ff fb35 	bl	84428 <__sprint_r.part.0>
   84dbe:	bb50      	cbnz	r0, 84e16 <_vfiprintf_r+0x96e>
   84dc0:	9910      	ldr	r1, [sp, #64]	; 0x40
   84dc2:	46d4      	mov	ip, sl
   84dc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84dc6:	f101 0e01 	add.w	lr, r1, #1
   84dca:	e54a      	b.n	84862 <_vfiprintf_r+0x3ba>
   84dcc:	2a00      	cmp	r2, #0
   84dce:	f47f aee5 	bne.w	84b9c <_vfiprintf_r+0x6f4>
   84dd2:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   84dd6:	2900      	cmp	r1, #0
   84dd8:	f000 811a 	beq.w	85010 <_vfiprintf_r+0xb68>
   84ddc:	2201      	movs	r2, #1
   84dde:	46d1      	mov	r9, sl
   84de0:	4610      	mov	r0, r2
   84de2:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   84de6:	921d      	str	r2, [sp, #116]	; 0x74
   84de8:	911c      	str	r1, [sp, #112]	; 0x70
   84dea:	4601      	mov	r1, r0
   84dec:	f109 0908 	add.w	r9, r9, #8
   84df0:	3001      	adds	r0, #1
   84df2:	e508      	b.n	84806 <_vfiprintf_r+0x35e>
   84df4:	9b02      	ldr	r3, [sp, #8]
   84df6:	2a01      	cmp	r2, #1
   84df8:	f000 8097 	beq.w	84f2a <_vfiprintf_r+0xa82>
   84dfc:	2a02      	cmp	r2, #2
   84dfe:	d10d      	bne.n	84e1c <_vfiprintf_r+0x974>
   84e00:	9302      	str	r3, [sp, #8]
   84e02:	2600      	movs	r6, #0
   84e04:	2700      	movs	r7, #0
   84e06:	e5b2      	b.n	8496e <_vfiprintf_r+0x4c6>
   84e08:	aa0f      	add	r2, sp, #60	; 0x3c
   84e0a:	9904      	ldr	r1, [sp, #16]
   84e0c:	9806      	ldr	r0, [sp, #24]
   84e0e:	f7ff fb0b 	bl	84428 <__sprint_r.part.0>
   84e12:	2800      	cmp	r0, #0
   84e14:	d0c9      	beq.n	84daa <_vfiprintf_r+0x902>
   84e16:	f8dd b010 	ldr.w	fp, [sp, #16]
   84e1a:	e797      	b.n	84d4c <_vfiprintf_r+0x8a4>
   84e1c:	2600      	movs	r6, #0
   84e1e:	2700      	movs	r7, #0
   84e20:	9302      	str	r3, [sp, #8]
   84e22:	4651      	mov	r1, sl
   84e24:	e000      	b.n	84e28 <_vfiprintf_r+0x980>
   84e26:	4659      	mov	r1, fp
   84e28:	08f2      	lsrs	r2, r6, #3
   84e2a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   84e2e:	08f8      	lsrs	r0, r7, #3
   84e30:	f006 0307 	and.w	r3, r6, #7
   84e34:	4607      	mov	r7, r0
   84e36:	4616      	mov	r6, r2
   84e38:	3330      	adds	r3, #48	; 0x30
   84e3a:	ea56 0207 	orrs.w	r2, r6, r7
   84e3e:	f801 3c01 	strb.w	r3, [r1, #-1]
   84e42:	f101 3bff 	add.w	fp, r1, #4294967295
   84e46:	d1ee      	bne.n	84e26 <_vfiprintf_r+0x97e>
   84e48:	9a02      	ldr	r2, [sp, #8]
   84e4a:	07d6      	lsls	r6, r2, #31
   84e4c:	f57f ad9f 	bpl.w	8498e <_vfiprintf_r+0x4e6>
   84e50:	2b30      	cmp	r3, #48	; 0x30
   84e52:	f43f ad9c 	beq.w	8498e <_vfiprintf_r+0x4e6>
   84e56:	2330      	movs	r3, #48	; 0x30
   84e58:	3902      	subs	r1, #2
   84e5a:	f80b 3c01 	strb.w	r3, [fp, #-1]
   84e5e:	ebaa 0301 	sub.w	r3, sl, r1
   84e62:	9305      	str	r3, [sp, #20]
   84e64:	468b      	mov	fp, r1
   84e66:	e477      	b.n	84758 <_vfiprintf_r+0x2b0>
   84e68:	9b03      	ldr	r3, [sp, #12]
   84e6a:	9a08      	ldr	r2, [sp, #32]
   84e6c:	428a      	cmp	r2, r1
   84e6e:	bfac      	ite	ge
   84e70:	189b      	addge	r3, r3, r2
   84e72:	185b      	addlt	r3, r3, r1
   84e74:	9303      	str	r3, [sp, #12]
   84e76:	e798      	b.n	84daa <_vfiprintf_r+0x902>
   84e78:	2202      	movs	r2, #2
   84e7a:	e44e      	b.n	8471a <_vfiprintf_r+0x272>
   84e7c:	2f00      	cmp	r7, #0
   84e7e:	bf08      	it	eq
   84e80:	2e0a      	cmpeq	r6, #10
   84e82:	d351      	bcc.n	84f28 <_vfiprintf_r+0xa80>
   84e84:	46d3      	mov	fp, sl
   84e86:	4630      	mov	r0, r6
   84e88:	4639      	mov	r1, r7
   84e8a:	220a      	movs	r2, #10
   84e8c:	2300      	movs	r3, #0
   84e8e:	f001 fe85 	bl	86b9c <__aeabi_uldivmod>
   84e92:	3230      	adds	r2, #48	; 0x30
   84e94:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   84e98:	4630      	mov	r0, r6
   84e9a:	4639      	mov	r1, r7
   84e9c:	2300      	movs	r3, #0
   84e9e:	220a      	movs	r2, #10
   84ea0:	f001 fe7c 	bl	86b9c <__aeabi_uldivmod>
   84ea4:	4606      	mov	r6, r0
   84ea6:	460f      	mov	r7, r1
   84ea8:	ea56 0307 	orrs.w	r3, r6, r7
   84eac:	d1eb      	bne.n	84e86 <_vfiprintf_r+0x9de>
   84eae:	e56e      	b.n	8498e <_vfiprintf_r+0x4e6>
   84eb0:	9405      	str	r4, [sp, #20]
   84eb2:	46d3      	mov	fp, sl
   84eb4:	e450      	b.n	84758 <_vfiprintf_r+0x2b0>
   84eb6:	aa0f      	add	r2, sp, #60	; 0x3c
   84eb8:	9904      	ldr	r1, [sp, #16]
   84eba:	9806      	ldr	r0, [sp, #24]
   84ebc:	f7ff fab4 	bl	84428 <__sprint_r.part.0>
   84ec0:	2800      	cmp	r0, #0
   84ec2:	d1a8      	bne.n	84e16 <_vfiprintf_r+0x96e>
   84ec4:	46d1      	mov	r9, sl
   84ec6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84ec8:	e75e      	b.n	84d88 <_vfiprintf_r+0x8e0>
   84eca:	aa0f      	add	r2, sp, #60	; 0x3c
   84ecc:	9904      	ldr	r1, [sp, #16]
   84ece:	9806      	ldr	r0, [sp, #24]
   84ed0:	f7ff faaa 	bl	84428 <__sprint_r.part.0>
   84ed4:	2800      	cmp	r0, #0
   84ed6:	d19e      	bne.n	84e16 <_vfiprintf_r+0x96e>
   84ed8:	46d1      	mov	r9, sl
   84eda:	f7ff bbbb 	b.w	84654 <_vfiprintf_r+0x1ac>
   84ede:	bf00      	nop
   84ee0:	00087044 	.word	0x00087044
   84ee4:	00087034 	.word	0x00087034
   84ee8:	3104      	adds	r1, #4
   84eea:	6816      	ldr	r6, [r2, #0]
   84eec:	2700      	movs	r7, #0
   84eee:	2201      	movs	r2, #1
   84ef0:	9107      	str	r1, [sp, #28]
   84ef2:	e412      	b.n	8471a <_vfiprintf_r+0x272>
   84ef4:	9807      	ldr	r0, [sp, #28]
   84ef6:	2700      	movs	r7, #0
   84ef8:	4601      	mov	r1, r0
   84efa:	3104      	adds	r1, #4
   84efc:	6806      	ldr	r6, [r0, #0]
   84efe:	9107      	str	r1, [sp, #28]
   84f00:	e40b      	b.n	8471a <_vfiprintf_r+0x272>
   84f02:	680e      	ldr	r6, [r1, #0]
   84f04:	3104      	adds	r1, #4
   84f06:	9107      	str	r1, [sp, #28]
   84f08:	2700      	movs	r7, #0
   84f0a:	e592      	b.n	84a32 <_vfiprintf_r+0x58a>
   84f0c:	6816      	ldr	r6, [r2, #0]
   84f0e:	3204      	adds	r2, #4
   84f10:	17f7      	asrs	r7, r6, #31
   84f12:	9207      	str	r2, [sp, #28]
   84f14:	4630      	mov	r0, r6
   84f16:	4639      	mov	r1, r7
   84f18:	e512      	b.n	84940 <_vfiprintf_r+0x498>
   84f1a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   84f1e:	f000 fe75 	bl	85c0c <__retarget_lock_release_recursive>
   84f22:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   84f26:	e71b      	b.n	84d60 <_vfiprintf_r+0x8b8>
   84f28:	9b02      	ldr	r3, [sp, #8]
   84f2a:	9302      	str	r3, [sp, #8]
   84f2c:	2301      	movs	r3, #1
   84f2e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   84f32:	3630      	adds	r6, #48	; 0x30
   84f34:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   84f38:	9305      	str	r3, [sp, #20]
   84f3a:	e40d      	b.n	84758 <_vfiprintf_r+0x2b0>
   84f3c:	aa0f      	add	r2, sp, #60	; 0x3c
   84f3e:	9904      	ldr	r1, [sp, #16]
   84f40:	9806      	ldr	r0, [sp, #24]
   84f42:	f7ff fa71 	bl	84428 <__sprint_r.part.0>
   84f46:	2800      	cmp	r0, #0
   84f48:	f47f af65 	bne.w	84e16 <_vfiprintf_r+0x96e>
   84f4c:	9910      	ldr	r1, [sp, #64]	; 0x40
   84f4e:	46d1      	mov	r9, sl
   84f50:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84f52:	1c48      	adds	r0, r1, #1
   84f54:	e457      	b.n	84806 <_vfiprintf_r+0x35e>
   84f56:	aa0f      	add	r2, sp, #60	; 0x3c
   84f58:	9904      	ldr	r1, [sp, #16]
   84f5a:	9806      	ldr	r0, [sp, #24]
   84f5c:	f7ff fa64 	bl	84428 <__sprint_r.part.0>
   84f60:	2800      	cmp	r0, #0
   84f62:	f47f af58 	bne.w	84e16 <_vfiprintf_r+0x96e>
   84f66:	9910      	ldr	r1, [sp, #64]	; 0x40
   84f68:	46d1      	mov	r9, sl
   84f6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84f6c:	1c48      	adds	r0, r1, #1
   84f6e:	e644      	b.n	84bfa <_vfiprintf_r+0x752>
   84f70:	2a00      	cmp	r2, #0
   84f72:	f040 8087 	bne.w	85084 <_vfiprintf_r+0xbdc>
   84f76:	2001      	movs	r0, #1
   84f78:	4611      	mov	r1, r2
   84f7a:	46d1      	mov	r9, sl
   84f7c:	e641      	b.n	84c02 <_vfiprintf_r+0x75a>
   84f7e:	aa0f      	add	r2, sp, #60	; 0x3c
   84f80:	9904      	ldr	r1, [sp, #16]
   84f82:	9806      	ldr	r0, [sp, #24]
   84f84:	f7ff fa50 	bl	84428 <__sprint_r.part.0>
   84f88:	2800      	cmp	r0, #0
   84f8a:	f47f af44 	bne.w	84e16 <_vfiprintf_r+0x96e>
   84f8e:	9810      	ldr	r0, [sp, #64]	; 0x40
   84f90:	46d1      	mov	r9, sl
   84f92:	9a11      	ldr	r2, [sp, #68]	; 0x44
   84f94:	3001      	adds	r0, #1
   84f96:	e668      	b.n	84c6a <_vfiprintf_r+0x7c2>
   84f98:	46cb      	mov	fp, r9
   84f9a:	e6d7      	b.n	84d4c <_vfiprintf_r+0x8a4>
   84f9c:	9d07      	ldr	r5, [sp, #28]
   84f9e:	3507      	adds	r5, #7
   84fa0:	f025 0507 	bic.w	r5, r5, #7
   84fa4:	f105 0208 	add.w	r2, r5, #8
   84fa8:	e9d5 0100 	ldrd	r0, r1, [r5]
   84fac:	9207      	str	r2, [sp, #28]
   84fae:	4606      	mov	r6, r0
   84fb0:	460f      	mov	r7, r1
   84fb2:	e4c5      	b.n	84940 <_vfiprintf_r+0x498>
   84fb4:	9d07      	ldr	r5, [sp, #28]
   84fb6:	3507      	adds	r5, #7
   84fb8:	f025 0207 	bic.w	r2, r5, #7
   84fbc:	f102 0108 	add.w	r1, r2, #8
   84fc0:	e9d2 6700 	ldrd	r6, r7, [r2]
   84fc4:	9107      	str	r1, [sp, #28]
   84fc6:	2201      	movs	r2, #1
   84fc8:	f7ff bba7 	b.w	8471a <_vfiprintf_r+0x272>
   84fcc:	9d07      	ldr	r5, [sp, #28]
   84fce:	3507      	adds	r5, #7
   84fd0:	f025 0207 	bic.w	r2, r5, #7
   84fd4:	f102 0108 	add.w	r1, r2, #8
   84fd8:	e9d2 6700 	ldrd	r6, r7, [r2]
   84fdc:	9107      	str	r1, [sp, #28]
   84fde:	2200      	movs	r2, #0
   84fe0:	f7ff bb9b 	b.w	8471a <_vfiprintf_r+0x272>
   84fe4:	9d07      	ldr	r5, [sp, #28]
   84fe6:	3507      	adds	r5, #7
   84fe8:	f025 0107 	bic.w	r1, r5, #7
   84fec:	f101 0008 	add.w	r0, r1, #8
   84ff0:	9007      	str	r0, [sp, #28]
   84ff2:	e9d1 6700 	ldrd	r6, r7, [r1]
   84ff6:	e51c      	b.n	84a32 <_vfiprintf_r+0x58a>
   84ff8:	46d3      	mov	fp, sl
   84ffa:	f7ff bbad 	b.w	84758 <_vfiprintf_r+0x2b0>
   84ffe:	252d      	movs	r5, #45	; 0x2d
   85000:	4276      	negs	r6, r6
   85002:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   85006:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8500a:	2201      	movs	r2, #1
   8500c:	f7ff bb8a 	b.w	84724 <_vfiprintf_r+0x27c>
   85010:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85012:	b9b3      	cbnz	r3, 85042 <_vfiprintf_r+0xb9a>
   85014:	4611      	mov	r1, r2
   85016:	2001      	movs	r0, #1
   85018:	46d1      	mov	r9, sl
   8501a:	e5f2      	b.n	84c02 <_vfiprintf_r+0x75a>
   8501c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   85020:	f000 fdf4 	bl	85c0c <__retarget_lock_release_recursive>
   85024:	f04f 33ff 	mov.w	r3, #4294967295
   85028:	9303      	str	r3, [sp, #12]
   8502a:	f7ff bb4c 	b.w	846c6 <_vfiprintf_r+0x21e>
   8502e:	aa0f      	add	r2, sp, #60	; 0x3c
   85030:	9904      	ldr	r1, [sp, #16]
   85032:	9806      	ldr	r0, [sp, #24]
   85034:	f7ff f9f8 	bl	84428 <__sprint_r.part.0>
   85038:	2800      	cmp	r0, #0
   8503a:	f47f aeec 	bne.w	84e16 <_vfiprintf_r+0x96e>
   8503e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   85040:	e6aa      	b.n	84d98 <_vfiprintf_r+0x8f0>
   85042:	2202      	movs	r2, #2
   85044:	ab0e      	add	r3, sp, #56	; 0x38
   85046:	921d      	str	r2, [sp, #116]	; 0x74
   85048:	931c      	str	r3, [sp, #112]	; 0x70
   8504a:	2001      	movs	r0, #1
   8504c:	46d1      	mov	r9, sl
   8504e:	e5d0      	b.n	84bf2 <_vfiprintf_r+0x74a>
   85050:	4d34      	ldr	r5, [pc, #208]	; (85124 <_vfiprintf_r+0xc7c>)
   85052:	e5fd      	b.n	84c50 <_vfiprintf_r+0x7a8>
   85054:	9a07      	ldr	r2, [sp, #28]
   85056:	4613      	mov	r3, r2
   85058:	3304      	adds	r3, #4
   8505a:	9307      	str	r3, [sp, #28]
   8505c:	9b03      	ldr	r3, [sp, #12]
   8505e:	6811      	ldr	r1, [r2, #0]
   85060:	17dd      	asrs	r5, r3, #31
   85062:	461a      	mov	r2, r3
   85064:	462b      	mov	r3, r5
   85066:	e9c1 2300 	strd	r2, r3, [r1]
   8506a:	f7ff ba5a 	b.w	84522 <_vfiprintf_r+0x7a>
   8506e:	4658      	mov	r0, fp
   85070:	9507      	str	r5, [sp, #28]
   85072:	9302      	str	r3, [sp, #8]
   85074:	f7ff f978 	bl	84368 <strlen>
   85078:	2400      	movs	r4, #0
   8507a:	9005      	str	r0, [sp, #20]
   8507c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   85080:	f7ff bb6a 	b.w	84758 <_vfiprintf_r+0x2b0>
   85084:	aa0f      	add	r2, sp, #60	; 0x3c
   85086:	9904      	ldr	r1, [sp, #16]
   85088:	9806      	ldr	r0, [sp, #24]
   8508a:	f7ff f9cd 	bl	84428 <__sprint_r.part.0>
   8508e:	2800      	cmp	r0, #0
   85090:	f47f aec1 	bne.w	84e16 <_vfiprintf_r+0x96e>
   85094:	9910      	ldr	r1, [sp, #64]	; 0x40
   85096:	46d1      	mov	r9, sl
   85098:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8509a:	1c48      	adds	r0, r1, #1
   8509c:	e5b1      	b.n	84c02 <_vfiprintf_r+0x75a>
   8509e:	9910      	ldr	r1, [sp, #64]	; 0x40
   850a0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   850a2:	3101      	adds	r1, #1
   850a4:	4e20      	ldr	r6, [pc, #128]	; (85128 <_vfiprintf_r+0xc80>)
   850a6:	f7ff bb9c 	b.w	847e2 <_vfiprintf_r+0x33a>
   850aa:	2c06      	cmp	r4, #6
   850ac:	bf28      	it	cs
   850ae:	2406      	movcs	r4, #6
   850b0:	9507      	str	r5, [sp, #28]
   850b2:	9405      	str	r4, [sp, #20]
   850b4:	9401      	str	r4, [sp, #4]
   850b6:	f8df b074 	ldr.w	fp, [pc, #116]	; 8512c <_vfiprintf_r+0xc84>
   850ba:	e4e3      	b.n	84a84 <_vfiprintf_r+0x5dc>
   850bc:	9810      	ldr	r0, [sp, #64]	; 0x40
   850be:	4e1a      	ldr	r6, [pc, #104]	; (85128 <_vfiprintf_r+0xc80>)
   850c0:	3001      	adds	r0, #1
   850c2:	e60e      	b.n	84ce2 <_vfiprintf_r+0x83a>
   850c4:	4686      	mov	lr, r0
   850c6:	4d17      	ldr	r5, [pc, #92]	; (85124 <_vfiprintf_r+0xc7c>)
   850c8:	f7ff bbe2 	b.w	84890 <_vfiprintf_r+0x3e8>
   850cc:	9405      	str	r4, [sp, #20]
   850ce:	9507      	str	r5, [sp, #28]
   850d0:	9302      	str	r3, [sp, #8]
   850d2:	4604      	mov	r4, r0
   850d4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   850d8:	f7ff bb3e 	b.w	84758 <_vfiprintf_r+0x2b0>
   850dc:	9806      	ldr	r0, [sp, #24]
   850de:	aa0f      	add	r2, sp, #60	; 0x3c
   850e0:	4659      	mov	r1, fp
   850e2:	f7ff f9a1 	bl	84428 <__sprint_r.part.0>
   850e6:	2800      	cmp	r0, #0
   850e8:	f43f ae2e 	beq.w	84d48 <_vfiprintf_r+0x8a0>
   850ec:	e62e      	b.n	84d4c <_vfiprintf_r+0x8a4>
   850ee:	9907      	ldr	r1, [sp, #28]
   850f0:	f898 2001 	ldrb.w	r2, [r8, #1]
   850f4:	680c      	ldr	r4, [r1, #0]
   850f6:	3104      	adds	r1, #4
   850f8:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   850fc:	46b8      	mov	r8, r7
   850fe:	9107      	str	r1, [sp, #28]
   85100:	f7ff ba44 	b.w	8458c <_vfiprintf_r+0xe4>
   85104:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   85108:	e4a7      	b.n	84a5a <_vfiprintf_r+0x5b2>
   8510a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8510e:	e521      	b.n	84b54 <_vfiprintf_r+0x6ac>
   85110:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   85114:	e47c      	b.n	84a10 <_vfiprintf_r+0x568>
   85116:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8511a:	e43f      	b.n	8499c <_vfiprintf_r+0x4f4>
   8511c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   85120:	f7ff bbfa 	b.w	84918 <_vfiprintf_r+0x470>
   85124:	00087044 	.word	0x00087044
   85128:	00087034 	.word	0x00087034
   8512c:	0008702c 	.word	0x0008702c

00085130 <__sbprintf>:
   85130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85134:	460c      	mov	r4, r1
   85136:	f04f 0e00 	mov.w	lr, #0
   8513a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8513e:	4606      	mov	r6, r0
   85140:	4617      	mov	r7, r2
   85142:	4698      	mov	r8, r3
   85144:	6e62      	ldr	r2, [r4, #100]	; 0x64
   85146:	89e3      	ldrh	r3, [r4, #14]
   85148:	8989      	ldrh	r1, [r1, #12]
   8514a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8514e:	f021 0102 	bic.w	r1, r1, #2
   85152:	9219      	str	r2, [sp, #100]	; 0x64
   85154:	f8ad 300e 	strh.w	r3, [sp, #14]
   85158:	69e2      	ldr	r2, [r4, #28]
   8515a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8515c:	f8ad 100c 	strh.w	r1, [sp, #12]
   85160:	a816      	add	r0, sp, #88	; 0x58
   85162:	a91a      	add	r1, sp, #104	; 0x68
   85164:	f8cd e018 	str.w	lr, [sp, #24]
   85168:	9207      	str	r2, [sp, #28]
   8516a:	9309      	str	r3, [sp, #36]	; 0x24
   8516c:	9100      	str	r1, [sp, #0]
   8516e:	9104      	str	r1, [sp, #16]
   85170:	9502      	str	r5, [sp, #8]
   85172:	9505      	str	r5, [sp, #20]
   85174:	f000 fd44 	bl	85c00 <__retarget_lock_init_recursive>
   85178:	4643      	mov	r3, r8
   8517a:	463a      	mov	r2, r7
   8517c:	4669      	mov	r1, sp
   8517e:	4630      	mov	r0, r6
   85180:	f7ff f992 	bl	844a8 <_vfiprintf_r>
   85184:	1e05      	subs	r5, r0, #0
   85186:	db07      	blt.n	85198 <__sbprintf+0x68>
   85188:	4630      	mov	r0, r6
   8518a:	4669      	mov	r1, sp
   8518c:	f000 f924 	bl	853d8 <_fflush_r>
   85190:	2800      	cmp	r0, #0
   85192:	bf18      	it	ne
   85194:	f04f 35ff 	movne.w	r5, #4294967295
   85198:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8519c:	065b      	lsls	r3, r3, #25
   8519e:	d503      	bpl.n	851a8 <__sbprintf+0x78>
   851a0:	89a3      	ldrh	r3, [r4, #12]
   851a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   851a6:	81a3      	strh	r3, [r4, #12]
   851a8:	9816      	ldr	r0, [sp, #88]	; 0x58
   851aa:	f000 fd2b 	bl	85c04 <__retarget_lock_close_recursive>
   851ae:	4628      	mov	r0, r5
   851b0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   851b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000851b8 <__swsetup_r>:
   851b8:	b538      	push	{r3, r4, r5, lr}
   851ba:	4b30      	ldr	r3, [pc, #192]	; (8527c <__swsetup_r+0xc4>)
   851bc:	4605      	mov	r5, r0
   851be:	6818      	ldr	r0, [r3, #0]
   851c0:	460c      	mov	r4, r1
   851c2:	b110      	cbz	r0, 851ca <__swsetup_r+0x12>
   851c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   851c6:	2b00      	cmp	r3, #0
   851c8:	d038      	beq.n	8523c <__swsetup_r+0x84>
   851ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   851ce:	b293      	uxth	r3, r2
   851d0:	0718      	lsls	r0, r3, #28
   851d2:	d50c      	bpl.n	851ee <__swsetup_r+0x36>
   851d4:	6920      	ldr	r0, [r4, #16]
   851d6:	b1a8      	cbz	r0, 85204 <__swsetup_r+0x4c>
   851d8:	f013 0201 	ands.w	r2, r3, #1
   851dc:	d01e      	beq.n	8521c <__swsetup_r+0x64>
   851de:	2200      	movs	r2, #0
   851e0:	6963      	ldr	r3, [r4, #20]
   851e2:	60a2      	str	r2, [r4, #8]
   851e4:	425b      	negs	r3, r3
   851e6:	61a3      	str	r3, [r4, #24]
   851e8:	b1f0      	cbz	r0, 85228 <__swsetup_r+0x70>
   851ea:	2000      	movs	r0, #0
   851ec:	bd38      	pop	{r3, r4, r5, pc}
   851ee:	06d9      	lsls	r1, r3, #27
   851f0:	d53b      	bpl.n	8526a <__swsetup_r+0xb2>
   851f2:	0758      	lsls	r0, r3, #29
   851f4:	d425      	bmi.n	85242 <__swsetup_r+0x8a>
   851f6:	6920      	ldr	r0, [r4, #16]
   851f8:	f042 0308 	orr.w	r3, r2, #8
   851fc:	81a3      	strh	r3, [r4, #12]
   851fe:	b29b      	uxth	r3, r3
   85200:	2800      	cmp	r0, #0
   85202:	d1e9      	bne.n	851d8 <__swsetup_r+0x20>
   85204:	f403 7220 	and.w	r2, r3, #640	; 0x280
   85208:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8520c:	d0e4      	beq.n	851d8 <__swsetup_r+0x20>
   8520e:	4628      	mov	r0, r5
   85210:	4621      	mov	r1, r4
   85212:	f000 fd2b 	bl	85c6c <__smakebuf_r>
   85216:	89a3      	ldrh	r3, [r4, #12]
   85218:	6920      	ldr	r0, [r4, #16]
   8521a:	e7dd      	b.n	851d8 <__swsetup_r+0x20>
   8521c:	0799      	lsls	r1, r3, #30
   8521e:	bf58      	it	pl
   85220:	6962      	ldrpl	r2, [r4, #20]
   85222:	60a2      	str	r2, [r4, #8]
   85224:	2800      	cmp	r0, #0
   85226:	d1e0      	bne.n	851ea <__swsetup_r+0x32>
   85228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8522c:	061a      	lsls	r2, r3, #24
   8522e:	d5dd      	bpl.n	851ec <__swsetup_r+0x34>
   85230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85234:	81a3      	strh	r3, [r4, #12]
   85236:	f04f 30ff 	mov.w	r0, #4294967295
   8523a:	bd38      	pop	{r3, r4, r5, pc}
   8523c:	f000 f924 	bl	85488 <__sinit>
   85240:	e7c3      	b.n	851ca <__swsetup_r+0x12>
   85242:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85244:	b151      	cbz	r1, 8525c <__swsetup_r+0xa4>
   85246:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8524a:	4299      	cmp	r1, r3
   8524c:	d004      	beq.n	85258 <__swsetup_r+0xa0>
   8524e:	4628      	mov	r0, r5
   85250:	f000 fa40 	bl	856d4 <_free_r>
   85254:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85258:	2300      	movs	r3, #0
   8525a:	6323      	str	r3, [r4, #48]	; 0x30
   8525c:	2300      	movs	r3, #0
   8525e:	6920      	ldr	r0, [r4, #16]
   85260:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   85264:	e884 0009 	stmia.w	r4, {r0, r3}
   85268:	e7c6      	b.n	851f8 <__swsetup_r+0x40>
   8526a:	2309      	movs	r3, #9
   8526c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   85270:	602b      	str	r3, [r5, #0]
   85272:	f04f 30ff 	mov.w	r0, #4294967295
   85276:	81a2      	strh	r2, [r4, #12]
   85278:	bd38      	pop	{r3, r4, r5, pc}
   8527a:	bf00      	nop
   8527c:	200701ac 	.word	0x200701ac

00085280 <register_fini>:
   85280:	4b02      	ldr	r3, [pc, #8]	; (8528c <register_fini+0xc>)
   85282:	b113      	cbz	r3, 8528a <register_fini+0xa>
   85284:	4802      	ldr	r0, [pc, #8]	; (85290 <register_fini+0x10>)
   85286:	f000 b805 	b.w	85294 <atexit>
   8528a:	4770      	bx	lr
   8528c:	00000000 	.word	0x00000000
   85290:	00085501 	.word	0x00085501

00085294 <atexit>:
   85294:	2300      	movs	r3, #0
   85296:	4601      	mov	r1, r0
   85298:	461a      	mov	r2, r3
   8529a:	4618      	mov	r0, r3
   8529c:	f001 bb56 	b.w	8694c <__register_exitproc>

000852a0 <__sflush_r>:
   852a0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   852a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   852a8:	b29a      	uxth	r2, r3
   852aa:	460d      	mov	r5, r1
   852ac:	0711      	lsls	r1, r2, #28
   852ae:	4680      	mov	r8, r0
   852b0:	d43a      	bmi.n	85328 <__sflush_r+0x88>
   852b2:	686a      	ldr	r2, [r5, #4]
   852b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   852b8:	2a00      	cmp	r2, #0
   852ba:	81ab      	strh	r3, [r5, #12]
   852bc:	dd70      	ble.n	853a0 <__sflush_r+0x100>
   852be:	6aac      	ldr	r4, [r5, #40]	; 0x28
   852c0:	2c00      	cmp	r4, #0
   852c2:	d04a      	beq.n	8535a <__sflush_r+0xba>
   852c4:	2200      	movs	r2, #0
   852c6:	b29b      	uxth	r3, r3
   852c8:	f8d8 6000 	ldr.w	r6, [r8]
   852cc:	f8c8 2000 	str.w	r2, [r8]
   852d0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   852d4:	d068      	beq.n	853a8 <__sflush_r+0x108>
   852d6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   852d8:	075f      	lsls	r7, r3, #29
   852da:	d505      	bpl.n	852e8 <__sflush_r+0x48>
   852dc:	6869      	ldr	r1, [r5, #4]
   852de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   852e0:	1a52      	subs	r2, r2, r1
   852e2:	b10b      	cbz	r3, 852e8 <__sflush_r+0x48>
   852e4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   852e6:	1ad2      	subs	r2, r2, r3
   852e8:	2300      	movs	r3, #0
   852ea:	69e9      	ldr	r1, [r5, #28]
   852ec:	4640      	mov	r0, r8
   852ee:	47a0      	blx	r4
   852f0:	1c44      	adds	r4, r0, #1
   852f2:	d03d      	beq.n	85370 <__sflush_r+0xd0>
   852f4:	2100      	movs	r1, #0
   852f6:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   852fa:	692a      	ldr	r2, [r5, #16]
   852fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85300:	81ab      	strh	r3, [r5, #12]
   85302:	04db      	lsls	r3, r3, #19
   85304:	6069      	str	r1, [r5, #4]
   85306:	602a      	str	r2, [r5, #0]
   85308:	d448      	bmi.n	8539c <__sflush_r+0xfc>
   8530a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8530c:	f8c8 6000 	str.w	r6, [r8]
   85310:	b319      	cbz	r1, 8535a <__sflush_r+0xba>
   85312:	f105 0340 	add.w	r3, r5, #64	; 0x40
   85316:	4299      	cmp	r1, r3
   85318:	d002      	beq.n	85320 <__sflush_r+0x80>
   8531a:	4640      	mov	r0, r8
   8531c:	f000 f9da 	bl	856d4 <_free_r>
   85320:	2000      	movs	r0, #0
   85322:	6328      	str	r0, [r5, #48]	; 0x30
   85324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85328:	692e      	ldr	r6, [r5, #16]
   8532a:	b1b6      	cbz	r6, 8535a <__sflush_r+0xba>
   8532c:	0791      	lsls	r1, r2, #30
   8532e:	bf18      	it	ne
   85330:	2300      	movne	r3, #0
   85332:	682c      	ldr	r4, [r5, #0]
   85334:	bf08      	it	eq
   85336:	696b      	ldreq	r3, [r5, #20]
   85338:	602e      	str	r6, [r5, #0]
   8533a:	1ba4      	subs	r4, r4, r6
   8533c:	60ab      	str	r3, [r5, #8]
   8533e:	e00a      	b.n	85356 <__sflush_r+0xb6>
   85340:	4623      	mov	r3, r4
   85342:	4632      	mov	r2, r6
   85344:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85346:	69e9      	ldr	r1, [r5, #28]
   85348:	4640      	mov	r0, r8
   8534a:	47b8      	blx	r7
   8534c:	2800      	cmp	r0, #0
   8534e:	eba4 0400 	sub.w	r4, r4, r0
   85352:	4406      	add	r6, r0
   85354:	dd04      	ble.n	85360 <__sflush_r+0xc0>
   85356:	2c00      	cmp	r4, #0
   85358:	dcf2      	bgt.n	85340 <__sflush_r+0xa0>
   8535a:	2000      	movs	r0, #0
   8535c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85360:	89ab      	ldrh	r3, [r5, #12]
   85362:	f04f 30ff 	mov.w	r0, #4294967295
   85366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8536a:	81ab      	strh	r3, [r5, #12]
   8536c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85370:	f8d8 4000 	ldr.w	r4, [r8]
   85374:	2c1d      	cmp	r4, #29
   85376:	d8f3      	bhi.n	85360 <__sflush_r+0xc0>
   85378:	4b16      	ldr	r3, [pc, #88]	; (853d4 <__sflush_r+0x134>)
   8537a:	40e3      	lsrs	r3, r4
   8537c:	43db      	mvns	r3, r3
   8537e:	f013 0301 	ands.w	r3, r3, #1
   85382:	d1ed      	bne.n	85360 <__sflush_r+0xc0>
   85384:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   85388:	6929      	ldr	r1, [r5, #16]
   8538a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8538e:	81aa      	strh	r2, [r5, #12]
   85390:	04d2      	lsls	r2, r2, #19
   85392:	606b      	str	r3, [r5, #4]
   85394:	6029      	str	r1, [r5, #0]
   85396:	d5b8      	bpl.n	8530a <__sflush_r+0x6a>
   85398:	2c00      	cmp	r4, #0
   8539a:	d1b6      	bne.n	8530a <__sflush_r+0x6a>
   8539c:	6528      	str	r0, [r5, #80]	; 0x50
   8539e:	e7b4      	b.n	8530a <__sflush_r+0x6a>
   853a0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   853a2:	2a00      	cmp	r2, #0
   853a4:	dc8b      	bgt.n	852be <__sflush_r+0x1e>
   853a6:	e7d8      	b.n	8535a <__sflush_r+0xba>
   853a8:	2301      	movs	r3, #1
   853aa:	69e9      	ldr	r1, [r5, #28]
   853ac:	4640      	mov	r0, r8
   853ae:	47a0      	blx	r4
   853b0:	1c43      	adds	r3, r0, #1
   853b2:	4602      	mov	r2, r0
   853b4:	d002      	beq.n	853bc <__sflush_r+0x11c>
   853b6:	89ab      	ldrh	r3, [r5, #12]
   853b8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   853ba:	e78d      	b.n	852d8 <__sflush_r+0x38>
   853bc:	f8d8 3000 	ldr.w	r3, [r8]
   853c0:	2b00      	cmp	r3, #0
   853c2:	d0f8      	beq.n	853b6 <__sflush_r+0x116>
   853c4:	2b1d      	cmp	r3, #29
   853c6:	d001      	beq.n	853cc <__sflush_r+0x12c>
   853c8:	2b16      	cmp	r3, #22
   853ca:	d1c9      	bne.n	85360 <__sflush_r+0xc0>
   853cc:	f8c8 6000 	str.w	r6, [r8]
   853d0:	e7c3      	b.n	8535a <__sflush_r+0xba>
   853d2:	bf00      	nop
   853d4:	20400001 	.word	0x20400001

000853d8 <_fflush_r>:
   853d8:	b538      	push	{r3, r4, r5, lr}
   853da:	460d      	mov	r5, r1
   853dc:	4604      	mov	r4, r0
   853de:	b108      	cbz	r0, 853e4 <_fflush_r+0xc>
   853e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   853e2:	b1bb      	cbz	r3, 85414 <_fflush_r+0x3c>
   853e4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   853e8:	b188      	cbz	r0, 8540e <_fflush_r+0x36>
   853ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   853ec:	07db      	lsls	r3, r3, #31
   853ee:	d401      	bmi.n	853f4 <_fflush_r+0x1c>
   853f0:	0581      	lsls	r1, r0, #22
   853f2:	d517      	bpl.n	85424 <_fflush_r+0x4c>
   853f4:	4620      	mov	r0, r4
   853f6:	4629      	mov	r1, r5
   853f8:	f7ff ff52 	bl	852a0 <__sflush_r>
   853fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   853fe:	4604      	mov	r4, r0
   85400:	07da      	lsls	r2, r3, #31
   85402:	d402      	bmi.n	8540a <_fflush_r+0x32>
   85404:	89ab      	ldrh	r3, [r5, #12]
   85406:	059b      	lsls	r3, r3, #22
   85408:	d507      	bpl.n	8541a <_fflush_r+0x42>
   8540a:	4620      	mov	r0, r4
   8540c:	bd38      	pop	{r3, r4, r5, pc}
   8540e:	4604      	mov	r4, r0
   85410:	4620      	mov	r0, r4
   85412:	bd38      	pop	{r3, r4, r5, pc}
   85414:	f000 f838 	bl	85488 <__sinit>
   85418:	e7e4      	b.n	853e4 <_fflush_r+0xc>
   8541a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8541c:	f000 fbf6 	bl	85c0c <__retarget_lock_release_recursive>
   85420:	4620      	mov	r0, r4
   85422:	bd38      	pop	{r3, r4, r5, pc}
   85424:	6da8      	ldr	r0, [r5, #88]	; 0x58
   85426:	f000 fbef 	bl	85c08 <__retarget_lock_acquire_recursive>
   8542a:	e7e3      	b.n	853f4 <_fflush_r+0x1c>

0008542c <_cleanup_r>:
   8542c:	4901      	ldr	r1, [pc, #4]	; (85434 <_cleanup_r+0x8>)
   8542e:	f000 bbb1 	b.w	85b94 <_fwalk_reent>
   85432:	bf00      	nop
   85434:	00086a35 	.word	0x00086a35

00085438 <std.isra.0>:
   85438:	2300      	movs	r3, #0
   8543a:	b510      	push	{r4, lr}
   8543c:	4604      	mov	r4, r0
   8543e:	8181      	strh	r1, [r0, #12]
   85440:	81c2      	strh	r2, [r0, #14]
   85442:	6003      	str	r3, [r0, #0]
   85444:	6043      	str	r3, [r0, #4]
   85446:	6083      	str	r3, [r0, #8]
   85448:	6643      	str	r3, [r0, #100]	; 0x64
   8544a:	6103      	str	r3, [r0, #16]
   8544c:	6143      	str	r3, [r0, #20]
   8544e:	6183      	str	r3, [r0, #24]
   85450:	4619      	mov	r1, r3
   85452:	2208      	movs	r2, #8
   85454:	305c      	adds	r0, #92	; 0x5c
   85456:	f7fe fe69 	bl	8412c <memset>
   8545a:	4807      	ldr	r0, [pc, #28]	; (85478 <std.isra.0+0x40>)
   8545c:	4907      	ldr	r1, [pc, #28]	; (8547c <std.isra.0+0x44>)
   8545e:	4a08      	ldr	r2, [pc, #32]	; (85480 <std.isra.0+0x48>)
   85460:	4b08      	ldr	r3, [pc, #32]	; (85484 <std.isra.0+0x4c>)
   85462:	6220      	str	r0, [r4, #32]
   85464:	61e4      	str	r4, [r4, #28]
   85466:	6261      	str	r1, [r4, #36]	; 0x24
   85468:	62a2      	str	r2, [r4, #40]	; 0x28
   8546a:	62e3      	str	r3, [r4, #44]	; 0x2c
   8546c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   85470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85474:	f000 bbc4 	b.w	85c00 <__retarget_lock_init_recursive>
   85478:	0008677d 	.word	0x0008677d
   8547c:	000867a1 	.word	0x000867a1
   85480:	000867dd 	.word	0x000867dd
   85484:	000867fd 	.word	0x000867fd

00085488 <__sinit>:
   85488:	b510      	push	{r4, lr}
   8548a:	4604      	mov	r4, r0
   8548c:	4814      	ldr	r0, [pc, #80]	; (854e0 <__sinit+0x58>)
   8548e:	f000 fbbb 	bl	85c08 <__retarget_lock_acquire_recursive>
   85492:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   85494:	b9fa      	cbnz	r2, 854d6 <__sinit+0x4e>
   85496:	2003      	movs	r0, #3
   85498:	4912      	ldr	r1, [pc, #72]	; (854e4 <__sinit+0x5c>)
   8549a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8549e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   854a2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   854a6:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   854aa:	63e1      	str	r1, [r4, #60]	; 0x3c
   854ac:	6860      	ldr	r0, [r4, #4]
   854ae:	2104      	movs	r1, #4
   854b0:	f7ff ffc2 	bl	85438 <std.isra.0>
   854b4:	68a0      	ldr	r0, [r4, #8]
   854b6:	2201      	movs	r2, #1
   854b8:	2109      	movs	r1, #9
   854ba:	f7ff ffbd 	bl	85438 <std.isra.0>
   854be:	68e0      	ldr	r0, [r4, #12]
   854c0:	2202      	movs	r2, #2
   854c2:	2112      	movs	r1, #18
   854c4:	f7ff ffb8 	bl	85438 <std.isra.0>
   854c8:	2301      	movs	r3, #1
   854ca:	4805      	ldr	r0, [pc, #20]	; (854e0 <__sinit+0x58>)
   854cc:	63a3      	str	r3, [r4, #56]	; 0x38
   854ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   854d2:	f000 bb9b 	b.w	85c0c <__retarget_lock_release_recursive>
   854d6:	4802      	ldr	r0, [pc, #8]	; (854e0 <__sinit+0x58>)
   854d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   854dc:	f000 bb96 	b.w	85c0c <__retarget_lock_release_recursive>
   854e0:	2007aeac 	.word	0x2007aeac
   854e4:	0008542d 	.word	0x0008542d

000854e8 <__sfp_lock_acquire>:
   854e8:	4801      	ldr	r0, [pc, #4]	; (854f0 <__sfp_lock_acquire+0x8>)
   854ea:	f000 bb8d 	b.w	85c08 <__retarget_lock_acquire_recursive>
   854ee:	bf00      	nop
   854f0:	2007aec0 	.word	0x2007aec0

000854f4 <__sfp_lock_release>:
   854f4:	4801      	ldr	r0, [pc, #4]	; (854fc <__sfp_lock_release+0x8>)
   854f6:	f000 bb89 	b.w	85c0c <__retarget_lock_release_recursive>
   854fa:	bf00      	nop
   854fc:	2007aec0 	.word	0x2007aec0

00085500 <__libc_fini_array>:
   85500:	b538      	push	{r3, r4, r5, lr}
   85502:	4c0a      	ldr	r4, [pc, #40]	; (8552c <__libc_fini_array+0x2c>)
   85504:	4d0a      	ldr	r5, [pc, #40]	; (85530 <__libc_fini_array+0x30>)
   85506:	1b64      	subs	r4, r4, r5
   85508:	10a4      	asrs	r4, r4, #2
   8550a:	d00a      	beq.n	85522 <__libc_fini_array+0x22>
   8550c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   85510:	3b01      	subs	r3, #1
   85512:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   85516:	3c01      	subs	r4, #1
   85518:	f855 3904 	ldr.w	r3, [r5], #-4
   8551c:	4798      	blx	r3
   8551e:	2c00      	cmp	r4, #0
   85520:	d1f9      	bne.n	85516 <__libc_fini_array+0x16>
   85522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85526:	f001 be29 	b.w	8717c <_fini>
   8552a:	bf00      	nop
   8552c:	0008718c 	.word	0x0008718c
   85530:	00087188 	.word	0x00087188

00085534 <__fputwc>:
   85534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85538:	b083      	sub	sp, #12
   8553a:	4607      	mov	r7, r0
   8553c:	4688      	mov	r8, r1
   8553e:	4614      	mov	r4, r2
   85540:	f000 fb50 	bl	85be4 <__locale_mb_cur_max>
   85544:	2801      	cmp	r0, #1
   85546:	d033      	beq.n	855b0 <__fputwc+0x7c>
   85548:	4642      	mov	r2, r8
   8554a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8554e:	a901      	add	r1, sp, #4
   85550:	4638      	mov	r0, r7
   85552:	f001 f9af 	bl	868b4 <_wcrtomb_r>
   85556:	1c42      	adds	r2, r0, #1
   85558:	4606      	mov	r6, r0
   8555a:	d022      	beq.n	855a2 <__fputwc+0x6e>
   8555c:	b390      	cbz	r0, 855c4 <__fputwc+0x90>
   8555e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85562:	2500      	movs	r5, #0
   85564:	f10d 0904 	add.w	r9, sp, #4
   85568:	e008      	b.n	8557c <__fputwc+0x48>
   8556a:	6823      	ldr	r3, [r4, #0]
   8556c:	1c5a      	adds	r2, r3, #1
   8556e:	6022      	str	r2, [r4, #0]
   85570:	7019      	strb	r1, [r3, #0]
   85572:	3501      	adds	r5, #1
   85574:	42b5      	cmp	r5, r6
   85576:	d225      	bcs.n	855c4 <__fputwc+0x90>
   85578:	f815 1009 	ldrb.w	r1, [r5, r9]
   8557c:	68a3      	ldr	r3, [r4, #8]
   8557e:	3b01      	subs	r3, #1
   85580:	2b00      	cmp	r3, #0
   85582:	60a3      	str	r3, [r4, #8]
   85584:	daf1      	bge.n	8556a <__fputwc+0x36>
   85586:	69a2      	ldr	r2, [r4, #24]
   85588:	4293      	cmp	r3, r2
   8558a:	db01      	blt.n	85590 <__fputwc+0x5c>
   8558c:	290a      	cmp	r1, #10
   8558e:	d1ec      	bne.n	8556a <__fputwc+0x36>
   85590:	4622      	mov	r2, r4
   85592:	4638      	mov	r0, r7
   85594:	f001 f936 	bl	86804 <__swbuf_r>
   85598:	1c43      	adds	r3, r0, #1
   8559a:	d1ea      	bne.n	85572 <__fputwc+0x3e>
   8559c:	b003      	add	sp, #12
   8559e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   855a2:	89a3      	ldrh	r3, [r4, #12]
   855a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   855a8:	81a3      	strh	r3, [r4, #12]
   855aa:	b003      	add	sp, #12
   855ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   855b0:	f108 33ff 	add.w	r3, r8, #4294967295
   855b4:	2bfe      	cmp	r3, #254	; 0xfe
   855b6:	d8c7      	bhi.n	85548 <__fputwc+0x14>
   855b8:	fa5f f188 	uxtb.w	r1, r8
   855bc:	4606      	mov	r6, r0
   855be:	f88d 1004 	strb.w	r1, [sp, #4]
   855c2:	e7ce      	b.n	85562 <__fputwc+0x2e>
   855c4:	4640      	mov	r0, r8
   855c6:	b003      	add	sp, #12
   855c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000855cc <_fputwc_r>:
   855cc:	b530      	push	{r4, r5, lr}
   855ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
   855d0:	4614      	mov	r4, r2
   855d2:	f013 0f01 	tst.w	r3, #1
   855d6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   855da:	b083      	sub	sp, #12
   855dc:	4605      	mov	r5, r0
   855de:	b29a      	uxth	r2, r3
   855e0:	d101      	bne.n	855e6 <_fputwc_r+0x1a>
   855e2:	0590      	lsls	r0, r2, #22
   855e4:	d51c      	bpl.n	85620 <_fputwc_r+0x54>
   855e6:	0490      	lsls	r0, r2, #18
   855e8:	d406      	bmi.n	855f8 <_fputwc_r+0x2c>
   855ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
   855ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   855f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   855f4:	81a3      	strh	r3, [r4, #12]
   855f6:	6662      	str	r2, [r4, #100]	; 0x64
   855f8:	4628      	mov	r0, r5
   855fa:	4622      	mov	r2, r4
   855fc:	f7ff ff9a 	bl	85534 <__fputwc>
   85600:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85602:	4605      	mov	r5, r0
   85604:	07da      	lsls	r2, r3, #31
   85606:	d402      	bmi.n	8560e <_fputwc_r+0x42>
   85608:	89a3      	ldrh	r3, [r4, #12]
   8560a:	059b      	lsls	r3, r3, #22
   8560c:	d502      	bpl.n	85614 <_fputwc_r+0x48>
   8560e:	4628      	mov	r0, r5
   85610:	b003      	add	sp, #12
   85612:	bd30      	pop	{r4, r5, pc}
   85614:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85616:	f000 faf9 	bl	85c0c <__retarget_lock_release_recursive>
   8561a:	4628      	mov	r0, r5
   8561c:	b003      	add	sp, #12
   8561e:	bd30      	pop	{r4, r5, pc}
   85620:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85622:	9101      	str	r1, [sp, #4]
   85624:	f000 faf0 	bl	85c08 <__retarget_lock_acquire_recursive>
   85628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8562c:	9901      	ldr	r1, [sp, #4]
   8562e:	b29a      	uxth	r2, r3
   85630:	e7d9      	b.n	855e6 <_fputwc_r+0x1a>
   85632:	bf00      	nop

00085634 <_malloc_trim_r>:
   85634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85636:	460c      	mov	r4, r1
   85638:	4f23      	ldr	r7, [pc, #140]	; (856c8 <_malloc_trim_r+0x94>)
   8563a:	4606      	mov	r6, r0
   8563c:	f000 feca 	bl	863d4 <__malloc_lock>
   85640:	68bb      	ldr	r3, [r7, #8]
   85642:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   85646:	685d      	ldr	r5, [r3, #4]
   85648:	310f      	adds	r1, #15
   8564a:	f025 0503 	bic.w	r5, r5, #3
   8564e:	4429      	add	r1, r5
   85650:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85654:	f021 010f 	bic.w	r1, r1, #15
   85658:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8565c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85660:	db07      	blt.n	85672 <_malloc_trim_r+0x3e>
   85662:	2100      	movs	r1, #0
   85664:	4630      	mov	r0, r6
   85666:	f001 f877 	bl	86758 <_sbrk_r>
   8566a:	68bb      	ldr	r3, [r7, #8]
   8566c:	442b      	add	r3, r5
   8566e:	4298      	cmp	r0, r3
   85670:	d004      	beq.n	8567c <_malloc_trim_r+0x48>
   85672:	4630      	mov	r0, r6
   85674:	f000 feb4 	bl	863e0 <__malloc_unlock>
   85678:	2000      	movs	r0, #0
   8567a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8567c:	4261      	negs	r1, r4
   8567e:	4630      	mov	r0, r6
   85680:	f001 f86a 	bl	86758 <_sbrk_r>
   85684:	3001      	adds	r0, #1
   85686:	d00d      	beq.n	856a4 <_malloc_trim_r+0x70>
   85688:	4b10      	ldr	r3, [pc, #64]	; (856cc <_malloc_trim_r+0x98>)
   8568a:	68ba      	ldr	r2, [r7, #8]
   8568c:	6819      	ldr	r1, [r3, #0]
   8568e:	1b2d      	subs	r5, r5, r4
   85690:	f045 0501 	orr.w	r5, r5, #1
   85694:	4630      	mov	r0, r6
   85696:	1b09      	subs	r1, r1, r4
   85698:	6055      	str	r5, [r2, #4]
   8569a:	6019      	str	r1, [r3, #0]
   8569c:	f000 fea0 	bl	863e0 <__malloc_unlock>
   856a0:	2001      	movs	r0, #1
   856a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   856a4:	2100      	movs	r1, #0
   856a6:	4630      	mov	r0, r6
   856a8:	f001 f856 	bl	86758 <_sbrk_r>
   856ac:	68ba      	ldr	r2, [r7, #8]
   856ae:	1a83      	subs	r3, r0, r2
   856b0:	2b0f      	cmp	r3, #15
   856b2:	ddde      	ble.n	85672 <_malloc_trim_r+0x3e>
   856b4:	4c06      	ldr	r4, [pc, #24]	; (856d0 <_malloc_trim_r+0x9c>)
   856b6:	4905      	ldr	r1, [pc, #20]	; (856cc <_malloc_trim_r+0x98>)
   856b8:	6824      	ldr	r4, [r4, #0]
   856ba:	f043 0301 	orr.w	r3, r3, #1
   856be:	1b00      	subs	r0, r0, r4
   856c0:	6053      	str	r3, [r2, #4]
   856c2:	6008      	str	r0, [r1, #0]
   856c4:	e7d5      	b.n	85672 <_malloc_trim_r+0x3e>
   856c6:	bf00      	nop
   856c8:	20070748 	.word	0x20070748
   856cc:	2007ae0c 	.word	0x2007ae0c
   856d0:	20070b50 	.word	0x20070b50

000856d4 <_free_r>:
   856d4:	2900      	cmp	r1, #0
   856d6:	d044      	beq.n	85762 <_free_r+0x8e>
   856d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   856dc:	460d      	mov	r5, r1
   856de:	4680      	mov	r8, r0
   856e0:	f000 fe78 	bl	863d4 <__malloc_lock>
   856e4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   856e8:	4969      	ldr	r1, [pc, #420]	; (85890 <_free_r+0x1bc>)
   856ea:	f1a5 0408 	sub.w	r4, r5, #8
   856ee:	f027 0301 	bic.w	r3, r7, #1
   856f2:	18e2      	adds	r2, r4, r3
   856f4:	688e      	ldr	r6, [r1, #8]
   856f6:	6850      	ldr	r0, [r2, #4]
   856f8:	42b2      	cmp	r2, r6
   856fa:	f020 0003 	bic.w	r0, r0, #3
   856fe:	d05e      	beq.n	857be <_free_r+0xea>
   85700:	07fe      	lsls	r6, r7, #31
   85702:	6050      	str	r0, [r2, #4]
   85704:	d40b      	bmi.n	8571e <_free_r+0x4a>
   85706:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8570a:	f101 0e08 	add.w	lr, r1, #8
   8570e:	1be4      	subs	r4, r4, r7
   85710:	68a5      	ldr	r5, [r4, #8]
   85712:	443b      	add	r3, r7
   85714:	4575      	cmp	r5, lr
   85716:	d06d      	beq.n	857f4 <_free_r+0x120>
   85718:	68e7      	ldr	r7, [r4, #12]
   8571a:	60ef      	str	r7, [r5, #12]
   8571c:	60bd      	str	r5, [r7, #8]
   8571e:	1815      	adds	r5, r2, r0
   85720:	686d      	ldr	r5, [r5, #4]
   85722:	07ed      	lsls	r5, r5, #31
   85724:	d53e      	bpl.n	857a4 <_free_r+0xd0>
   85726:	f043 0201 	orr.w	r2, r3, #1
   8572a:	6062      	str	r2, [r4, #4]
   8572c:	50e3      	str	r3, [r4, r3]
   8572e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85732:	d217      	bcs.n	85764 <_free_r+0x90>
   85734:	2201      	movs	r2, #1
   85736:	08db      	lsrs	r3, r3, #3
   85738:	1098      	asrs	r0, r3, #2
   8573a:	684d      	ldr	r5, [r1, #4]
   8573c:	4413      	add	r3, r2
   8573e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   85742:	4082      	lsls	r2, r0
   85744:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   85748:	432a      	orrs	r2, r5
   8574a:	3808      	subs	r0, #8
   8574c:	60e0      	str	r0, [r4, #12]
   8574e:	60a7      	str	r7, [r4, #8]
   85750:	604a      	str	r2, [r1, #4]
   85752:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85756:	60fc      	str	r4, [r7, #12]
   85758:	4640      	mov	r0, r8
   8575a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8575e:	f000 be3f 	b.w	863e0 <__malloc_unlock>
   85762:	4770      	bx	lr
   85764:	0a5a      	lsrs	r2, r3, #9
   85766:	2a04      	cmp	r2, #4
   85768:	d852      	bhi.n	85810 <_free_r+0x13c>
   8576a:	099a      	lsrs	r2, r3, #6
   8576c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   85770:	00ff      	lsls	r7, r7, #3
   85772:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85776:	19c8      	adds	r0, r1, r7
   85778:	59ca      	ldr	r2, [r1, r7]
   8577a:	3808      	subs	r0, #8
   8577c:	4290      	cmp	r0, r2
   8577e:	d04f      	beq.n	85820 <_free_r+0x14c>
   85780:	6851      	ldr	r1, [r2, #4]
   85782:	f021 0103 	bic.w	r1, r1, #3
   85786:	428b      	cmp	r3, r1
   85788:	d232      	bcs.n	857f0 <_free_r+0x11c>
   8578a:	6892      	ldr	r2, [r2, #8]
   8578c:	4290      	cmp	r0, r2
   8578e:	d1f7      	bne.n	85780 <_free_r+0xac>
   85790:	68c3      	ldr	r3, [r0, #12]
   85792:	60a0      	str	r0, [r4, #8]
   85794:	60e3      	str	r3, [r4, #12]
   85796:	609c      	str	r4, [r3, #8]
   85798:	60c4      	str	r4, [r0, #12]
   8579a:	4640      	mov	r0, r8
   8579c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   857a0:	f000 be1e 	b.w	863e0 <__malloc_unlock>
   857a4:	6895      	ldr	r5, [r2, #8]
   857a6:	4f3b      	ldr	r7, [pc, #236]	; (85894 <_free_r+0x1c0>)
   857a8:	4403      	add	r3, r0
   857aa:	42bd      	cmp	r5, r7
   857ac:	d040      	beq.n	85830 <_free_r+0x15c>
   857ae:	68d0      	ldr	r0, [r2, #12]
   857b0:	f043 0201 	orr.w	r2, r3, #1
   857b4:	60e8      	str	r0, [r5, #12]
   857b6:	6085      	str	r5, [r0, #8]
   857b8:	6062      	str	r2, [r4, #4]
   857ba:	50e3      	str	r3, [r4, r3]
   857bc:	e7b7      	b.n	8572e <_free_r+0x5a>
   857be:	07ff      	lsls	r7, r7, #31
   857c0:	4403      	add	r3, r0
   857c2:	d407      	bmi.n	857d4 <_free_r+0x100>
   857c4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   857c8:	1b64      	subs	r4, r4, r5
   857ca:	68e2      	ldr	r2, [r4, #12]
   857cc:	68a0      	ldr	r0, [r4, #8]
   857ce:	442b      	add	r3, r5
   857d0:	60c2      	str	r2, [r0, #12]
   857d2:	6090      	str	r0, [r2, #8]
   857d4:	4a30      	ldr	r2, [pc, #192]	; (85898 <_free_r+0x1c4>)
   857d6:	f043 0001 	orr.w	r0, r3, #1
   857da:	6812      	ldr	r2, [r2, #0]
   857dc:	6060      	str	r0, [r4, #4]
   857de:	4293      	cmp	r3, r2
   857e0:	608c      	str	r4, [r1, #8]
   857e2:	d3b9      	bcc.n	85758 <_free_r+0x84>
   857e4:	4b2d      	ldr	r3, [pc, #180]	; (8589c <_free_r+0x1c8>)
   857e6:	4640      	mov	r0, r8
   857e8:	6819      	ldr	r1, [r3, #0]
   857ea:	f7ff ff23 	bl	85634 <_malloc_trim_r>
   857ee:	e7b3      	b.n	85758 <_free_r+0x84>
   857f0:	4610      	mov	r0, r2
   857f2:	e7cd      	b.n	85790 <_free_r+0xbc>
   857f4:	1811      	adds	r1, r2, r0
   857f6:	6849      	ldr	r1, [r1, #4]
   857f8:	07c9      	lsls	r1, r1, #31
   857fa:	d444      	bmi.n	85886 <_free_r+0x1b2>
   857fc:	6891      	ldr	r1, [r2, #8]
   857fe:	4403      	add	r3, r0
   85800:	68d2      	ldr	r2, [r2, #12]
   85802:	f043 0001 	orr.w	r0, r3, #1
   85806:	60ca      	str	r2, [r1, #12]
   85808:	6091      	str	r1, [r2, #8]
   8580a:	6060      	str	r0, [r4, #4]
   8580c:	50e3      	str	r3, [r4, r3]
   8580e:	e7a3      	b.n	85758 <_free_r+0x84>
   85810:	2a14      	cmp	r2, #20
   85812:	d816      	bhi.n	85842 <_free_r+0x16e>
   85814:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85818:	00ff      	lsls	r7, r7, #3
   8581a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8581e:	e7aa      	b.n	85776 <_free_r+0xa2>
   85820:	2301      	movs	r3, #1
   85822:	10aa      	asrs	r2, r5, #2
   85824:	684d      	ldr	r5, [r1, #4]
   85826:	4093      	lsls	r3, r2
   85828:	432b      	orrs	r3, r5
   8582a:	604b      	str	r3, [r1, #4]
   8582c:	4603      	mov	r3, r0
   8582e:	e7b0      	b.n	85792 <_free_r+0xbe>
   85830:	f043 0201 	orr.w	r2, r3, #1
   85834:	614c      	str	r4, [r1, #20]
   85836:	610c      	str	r4, [r1, #16]
   85838:	60e5      	str	r5, [r4, #12]
   8583a:	60a5      	str	r5, [r4, #8]
   8583c:	6062      	str	r2, [r4, #4]
   8583e:	50e3      	str	r3, [r4, r3]
   85840:	e78a      	b.n	85758 <_free_r+0x84>
   85842:	2a54      	cmp	r2, #84	; 0x54
   85844:	d806      	bhi.n	85854 <_free_r+0x180>
   85846:	0b1a      	lsrs	r2, r3, #12
   85848:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8584c:	00ff      	lsls	r7, r7, #3
   8584e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85852:	e790      	b.n	85776 <_free_r+0xa2>
   85854:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85858:	d806      	bhi.n	85868 <_free_r+0x194>
   8585a:	0bda      	lsrs	r2, r3, #15
   8585c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85860:	00ff      	lsls	r7, r7, #3
   85862:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85866:	e786      	b.n	85776 <_free_r+0xa2>
   85868:	f240 5054 	movw	r0, #1364	; 0x554
   8586c:	4282      	cmp	r2, r0
   8586e:	d806      	bhi.n	8587e <_free_r+0x1aa>
   85870:	0c9a      	lsrs	r2, r3, #18
   85872:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85876:	00ff      	lsls	r7, r7, #3
   85878:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8587c:	e77b      	b.n	85776 <_free_r+0xa2>
   8587e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   85882:	257e      	movs	r5, #126	; 0x7e
   85884:	e777      	b.n	85776 <_free_r+0xa2>
   85886:	f043 0101 	orr.w	r1, r3, #1
   8588a:	6061      	str	r1, [r4, #4]
   8588c:	6013      	str	r3, [r2, #0]
   8588e:	e763      	b.n	85758 <_free_r+0x84>
   85890:	20070748 	.word	0x20070748
   85894:	20070750 	.word	0x20070750
   85898:	20070b54 	.word	0x20070b54
   8589c:	2007ae3c 	.word	0x2007ae3c

000858a0 <__sfvwrite_r>:
   858a0:	6893      	ldr	r3, [r2, #8]
   858a2:	2b00      	cmp	r3, #0
   858a4:	d071      	beq.n	8598a <__sfvwrite_r+0xea>
   858a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   858aa:	898b      	ldrh	r3, [r1, #12]
   858ac:	b083      	sub	sp, #12
   858ae:	460c      	mov	r4, r1
   858b0:	0719      	lsls	r1, r3, #28
   858b2:	9000      	str	r0, [sp, #0]
   858b4:	4616      	mov	r6, r2
   858b6:	d525      	bpl.n	85904 <__sfvwrite_r+0x64>
   858b8:	6922      	ldr	r2, [r4, #16]
   858ba:	b31a      	cbz	r2, 85904 <__sfvwrite_r+0x64>
   858bc:	f013 0002 	ands.w	r0, r3, #2
   858c0:	6835      	ldr	r5, [r6, #0]
   858c2:	d02b      	beq.n	8591c <__sfvwrite_r+0x7c>
   858c4:	f04f 0900 	mov.w	r9, #0
   858c8:	46b0      	mov	r8, r6
   858ca:	464f      	mov	r7, r9
   858cc:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 85b90 <__sfvwrite_r+0x2f0>
   858d0:	2f00      	cmp	r7, #0
   858d2:	d055      	beq.n	85980 <__sfvwrite_r+0xe0>
   858d4:	4557      	cmp	r7, sl
   858d6:	463b      	mov	r3, r7
   858d8:	464a      	mov	r2, r9
   858da:	bf28      	it	cs
   858dc:	4653      	movcs	r3, sl
   858de:	69e1      	ldr	r1, [r4, #28]
   858e0:	9800      	ldr	r0, [sp, #0]
   858e2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   858e4:	47b0      	blx	r6
   858e6:	2800      	cmp	r0, #0
   858e8:	dd56      	ble.n	85998 <__sfvwrite_r+0xf8>
   858ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
   858ee:	4481      	add	r9, r0
   858f0:	1a1b      	subs	r3, r3, r0
   858f2:	1a3f      	subs	r7, r7, r0
   858f4:	f8c8 3008 	str.w	r3, [r8, #8]
   858f8:	2b00      	cmp	r3, #0
   858fa:	d1e9      	bne.n	858d0 <__sfvwrite_r+0x30>
   858fc:	2000      	movs	r0, #0
   858fe:	b003      	add	sp, #12
   85900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85904:	4621      	mov	r1, r4
   85906:	9800      	ldr	r0, [sp, #0]
   85908:	f7ff fc56 	bl	851b8 <__swsetup_r>
   8590c:	2800      	cmp	r0, #0
   8590e:	f040 8135 	bne.w	85b7c <__sfvwrite_r+0x2dc>
   85912:	89a3      	ldrh	r3, [r4, #12]
   85914:	6835      	ldr	r5, [r6, #0]
   85916:	f013 0002 	ands.w	r0, r3, #2
   8591a:	d1d3      	bne.n	858c4 <__sfvwrite_r+0x24>
   8591c:	f013 0901 	ands.w	r9, r3, #1
   85920:	d144      	bne.n	859ac <__sfvwrite_r+0x10c>
   85922:	464f      	mov	r7, r9
   85924:	9601      	str	r6, [sp, #4]
   85926:	b337      	cbz	r7, 85976 <__sfvwrite_r+0xd6>
   85928:	059a      	lsls	r2, r3, #22
   8592a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8592e:	f140 8085 	bpl.w	85a3c <__sfvwrite_r+0x19c>
   85932:	4547      	cmp	r7, r8
   85934:	46c3      	mov	fp, r8
   85936:	f0c0 80ad 	bcc.w	85a94 <__sfvwrite_r+0x1f4>
   8593a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8593e:	f040 80ae 	bne.w	85a9e <__sfvwrite_r+0x1fe>
   85942:	46ba      	mov	sl, r7
   85944:	6820      	ldr	r0, [r4, #0]
   85946:	465a      	mov	r2, fp
   85948:	4649      	mov	r1, r9
   8594a:	f000 fcdf 	bl	8630c <memmove>
   8594e:	68a2      	ldr	r2, [r4, #8]
   85950:	6823      	ldr	r3, [r4, #0]
   85952:	eba2 0208 	sub.w	r2, r2, r8
   85956:	445b      	add	r3, fp
   85958:	60a2      	str	r2, [r4, #8]
   8595a:	6023      	str	r3, [r4, #0]
   8595c:	9a01      	ldr	r2, [sp, #4]
   8595e:	44d1      	add	r9, sl
   85960:	6893      	ldr	r3, [r2, #8]
   85962:	eba7 070a 	sub.w	r7, r7, sl
   85966:	eba3 030a 	sub.w	r3, r3, sl
   8596a:	6093      	str	r3, [r2, #8]
   8596c:	2b00      	cmp	r3, #0
   8596e:	d0c5      	beq.n	858fc <__sfvwrite_r+0x5c>
   85970:	89a3      	ldrh	r3, [r4, #12]
   85972:	2f00      	cmp	r7, #0
   85974:	d1d8      	bne.n	85928 <__sfvwrite_r+0x88>
   85976:	f8d5 9000 	ldr.w	r9, [r5]
   8597a:	686f      	ldr	r7, [r5, #4]
   8597c:	3508      	adds	r5, #8
   8597e:	e7d2      	b.n	85926 <__sfvwrite_r+0x86>
   85980:	f8d5 9000 	ldr.w	r9, [r5]
   85984:	686f      	ldr	r7, [r5, #4]
   85986:	3508      	adds	r5, #8
   85988:	e7a2      	b.n	858d0 <__sfvwrite_r+0x30>
   8598a:	2000      	movs	r0, #0
   8598c:	4770      	bx	lr
   8598e:	4621      	mov	r1, r4
   85990:	9800      	ldr	r0, [sp, #0]
   85992:	f7ff fd21 	bl	853d8 <_fflush_r>
   85996:	b378      	cbz	r0, 859f8 <__sfvwrite_r+0x158>
   85998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8599c:	f04f 30ff 	mov.w	r0, #4294967295
   859a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   859a4:	81a3      	strh	r3, [r4, #12]
   859a6:	b003      	add	sp, #12
   859a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   859ac:	4681      	mov	r9, r0
   859ae:	4633      	mov	r3, r6
   859b0:	464e      	mov	r6, r9
   859b2:	46a8      	mov	r8, r5
   859b4:	469a      	mov	sl, r3
   859b6:	464d      	mov	r5, r9
   859b8:	b356      	cbz	r6, 85a10 <__sfvwrite_r+0x170>
   859ba:	2800      	cmp	r0, #0
   859bc:	d032      	beq.n	85a24 <__sfvwrite_r+0x184>
   859be:	45b1      	cmp	r9, r6
   859c0:	46cb      	mov	fp, r9
   859c2:	bf28      	it	cs
   859c4:	46b3      	movcs	fp, r6
   859c6:	6820      	ldr	r0, [r4, #0]
   859c8:	6923      	ldr	r3, [r4, #16]
   859ca:	465f      	mov	r7, fp
   859cc:	4298      	cmp	r0, r3
   859ce:	6962      	ldr	r2, [r4, #20]
   859d0:	d904      	bls.n	859dc <__sfvwrite_r+0x13c>
   859d2:	68a3      	ldr	r3, [r4, #8]
   859d4:	4413      	add	r3, r2
   859d6:	459b      	cmp	fp, r3
   859d8:	f300 80a8 	bgt.w	85b2c <__sfvwrite_r+0x28c>
   859dc:	4593      	cmp	fp, r2
   859de:	db4d      	blt.n	85a7c <__sfvwrite_r+0x1dc>
   859e0:	4613      	mov	r3, r2
   859e2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   859e4:	462a      	mov	r2, r5
   859e6:	69e1      	ldr	r1, [r4, #28]
   859e8:	9800      	ldr	r0, [sp, #0]
   859ea:	47b8      	blx	r7
   859ec:	1e07      	subs	r7, r0, #0
   859ee:	ddd3      	ble.n	85998 <__sfvwrite_r+0xf8>
   859f0:	ebb9 0907 	subs.w	r9, r9, r7
   859f4:	d0cb      	beq.n	8598e <__sfvwrite_r+0xee>
   859f6:	2001      	movs	r0, #1
   859f8:	f8da 3008 	ldr.w	r3, [sl, #8]
   859fc:	443d      	add	r5, r7
   859fe:	1bdb      	subs	r3, r3, r7
   85a00:	1bf6      	subs	r6, r6, r7
   85a02:	f8ca 3008 	str.w	r3, [sl, #8]
   85a06:	2b00      	cmp	r3, #0
   85a08:	f43f af78 	beq.w	858fc <__sfvwrite_r+0x5c>
   85a0c:	2e00      	cmp	r6, #0
   85a0e:	d1d4      	bne.n	859ba <__sfvwrite_r+0x11a>
   85a10:	f108 0308 	add.w	r3, r8, #8
   85a14:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85a18:	4698      	mov	r8, r3
   85a1a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   85a1e:	3308      	adds	r3, #8
   85a20:	2e00      	cmp	r6, #0
   85a22:	d0f7      	beq.n	85a14 <__sfvwrite_r+0x174>
   85a24:	4632      	mov	r2, r6
   85a26:	210a      	movs	r1, #10
   85a28:	4628      	mov	r0, r5
   85a2a:	f000 fc29 	bl	86280 <memchr>
   85a2e:	2800      	cmp	r0, #0
   85a30:	f000 80a1 	beq.w	85b76 <__sfvwrite_r+0x2d6>
   85a34:	3001      	adds	r0, #1
   85a36:	eba0 0905 	sub.w	r9, r0, r5
   85a3a:	e7c0      	b.n	859be <__sfvwrite_r+0x11e>
   85a3c:	6820      	ldr	r0, [r4, #0]
   85a3e:	6923      	ldr	r3, [r4, #16]
   85a40:	4298      	cmp	r0, r3
   85a42:	d802      	bhi.n	85a4a <__sfvwrite_r+0x1aa>
   85a44:	6963      	ldr	r3, [r4, #20]
   85a46:	429f      	cmp	r7, r3
   85a48:	d25d      	bcs.n	85b06 <__sfvwrite_r+0x266>
   85a4a:	45b8      	cmp	r8, r7
   85a4c:	bf28      	it	cs
   85a4e:	46b8      	movcs	r8, r7
   85a50:	4649      	mov	r1, r9
   85a52:	4642      	mov	r2, r8
   85a54:	f000 fc5a 	bl	8630c <memmove>
   85a58:	68a3      	ldr	r3, [r4, #8]
   85a5a:	6822      	ldr	r2, [r4, #0]
   85a5c:	eba3 0308 	sub.w	r3, r3, r8
   85a60:	4442      	add	r2, r8
   85a62:	60a3      	str	r3, [r4, #8]
   85a64:	6022      	str	r2, [r4, #0]
   85a66:	b10b      	cbz	r3, 85a6c <__sfvwrite_r+0x1cc>
   85a68:	46c2      	mov	sl, r8
   85a6a:	e777      	b.n	8595c <__sfvwrite_r+0xbc>
   85a6c:	4621      	mov	r1, r4
   85a6e:	9800      	ldr	r0, [sp, #0]
   85a70:	f7ff fcb2 	bl	853d8 <_fflush_r>
   85a74:	2800      	cmp	r0, #0
   85a76:	d18f      	bne.n	85998 <__sfvwrite_r+0xf8>
   85a78:	46c2      	mov	sl, r8
   85a7a:	e76f      	b.n	8595c <__sfvwrite_r+0xbc>
   85a7c:	465a      	mov	r2, fp
   85a7e:	4629      	mov	r1, r5
   85a80:	f000 fc44 	bl	8630c <memmove>
   85a84:	68a2      	ldr	r2, [r4, #8]
   85a86:	6823      	ldr	r3, [r4, #0]
   85a88:	eba2 020b 	sub.w	r2, r2, fp
   85a8c:	445b      	add	r3, fp
   85a8e:	60a2      	str	r2, [r4, #8]
   85a90:	6023      	str	r3, [r4, #0]
   85a92:	e7ad      	b.n	859f0 <__sfvwrite_r+0x150>
   85a94:	46b8      	mov	r8, r7
   85a96:	46ba      	mov	sl, r7
   85a98:	46bb      	mov	fp, r7
   85a9a:	6820      	ldr	r0, [r4, #0]
   85a9c:	e753      	b.n	85946 <__sfvwrite_r+0xa6>
   85a9e:	6962      	ldr	r2, [r4, #20]
   85aa0:	6820      	ldr	r0, [r4, #0]
   85aa2:	6921      	ldr	r1, [r4, #16]
   85aa4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   85aa8:	eba0 0a01 	sub.w	sl, r0, r1
   85aac:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85ab0:	f10a 0001 	add.w	r0, sl, #1
   85ab4:	ea4f 0868 	mov.w	r8, r8, asr #1
   85ab8:	4438      	add	r0, r7
   85aba:	4540      	cmp	r0, r8
   85abc:	4642      	mov	r2, r8
   85abe:	bf84      	itt	hi
   85ac0:	4680      	movhi	r8, r0
   85ac2:	4642      	movhi	r2, r8
   85ac4:	055b      	lsls	r3, r3, #21
   85ac6:	d544      	bpl.n	85b52 <__sfvwrite_r+0x2b2>
   85ac8:	4611      	mov	r1, r2
   85aca:	9800      	ldr	r0, [sp, #0]
   85acc:	f000 f920 	bl	85d10 <_malloc_r>
   85ad0:	4683      	mov	fp, r0
   85ad2:	2800      	cmp	r0, #0
   85ad4:	d055      	beq.n	85b82 <__sfvwrite_r+0x2e2>
   85ad6:	4652      	mov	r2, sl
   85ad8:	6921      	ldr	r1, [r4, #16]
   85ada:	f7fe fab1 	bl	84040 <memcpy>
   85ade:	89a3      	ldrh	r3, [r4, #12]
   85ae0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   85ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85ae8:	81a3      	strh	r3, [r4, #12]
   85aea:	eb0b 000a 	add.w	r0, fp, sl
   85aee:	eba8 030a 	sub.w	r3, r8, sl
   85af2:	f8c4 b010 	str.w	fp, [r4, #16]
   85af6:	f8c4 8014 	str.w	r8, [r4, #20]
   85afa:	6020      	str	r0, [r4, #0]
   85afc:	60a3      	str	r3, [r4, #8]
   85afe:	46b8      	mov	r8, r7
   85b00:	46ba      	mov	sl, r7
   85b02:	46bb      	mov	fp, r7
   85b04:	e71f      	b.n	85946 <__sfvwrite_r+0xa6>
   85b06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   85b0a:	42ba      	cmp	r2, r7
   85b0c:	bf28      	it	cs
   85b0e:	463a      	movcs	r2, r7
   85b10:	fb92 f2f3 	sdiv	r2, r2, r3
   85b14:	69e1      	ldr	r1, [r4, #28]
   85b16:	fb03 f302 	mul.w	r3, r3, r2
   85b1a:	9800      	ldr	r0, [sp, #0]
   85b1c:	464a      	mov	r2, r9
   85b1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   85b20:	47b0      	blx	r6
   85b22:	f1b0 0a00 	subs.w	sl, r0, #0
   85b26:	f73f af19 	bgt.w	8595c <__sfvwrite_r+0xbc>
   85b2a:	e735      	b.n	85998 <__sfvwrite_r+0xf8>
   85b2c:	461a      	mov	r2, r3
   85b2e:	4629      	mov	r1, r5
   85b30:	9301      	str	r3, [sp, #4]
   85b32:	f000 fbeb 	bl	8630c <memmove>
   85b36:	6822      	ldr	r2, [r4, #0]
   85b38:	9b01      	ldr	r3, [sp, #4]
   85b3a:	4621      	mov	r1, r4
   85b3c:	441a      	add	r2, r3
   85b3e:	6022      	str	r2, [r4, #0]
   85b40:	9800      	ldr	r0, [sp, #0]
   85b42:	f7ff fc49 	bl	853d8 <_fflush_r>
   85b46:	9b01      	ldr	r3, [sp, #4]
   85b48:	2800      	cmp	r0, #0
   85b4a:	f47f af25 	bne.w	85998 <__sfvwrite_r+0xf8>
   85b4e:	461f      	mov	r7, r3
   85b50:	e74e      	b.n	859f0 <__sfvwrite_r+0x150>
   85b52:	9800      	ldr	r0, [sp, #0]
   85b54:	f000 fc4a 	bl	863ec <_realloc_r>
   85b58:	4683      	mov	fp, r0
   85b5a:	2800      	cmp	r0, #0
   85b5c:	d1c5      	bne.n	85aea <__sfvwrite_r+0x24a>
   85b5e:	9d00      	ldr	r5, [sp, #0]
   85b60:	6921      	ldr	r1, [r4, #16]
   85b62:	4628      	mov	r0, r5
   85b64:	f7ff fdb6 	bl	856d4 <_free_r>
   85b68:	220c      	movs	r2, #12
   85b6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85b6e:	602a      	str	r2, [r5, #0]
   85b70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85b74:	e712      	b.n	8599c <__sfvwrite_r+0xfc>
   85b76:	f106 0901 	add.w	r9, r6, #1
   85b7a:	e720      	b.n	859be <__sfvwrite_r+0x11e>
   85b7c:	f04f 30ff 	mov.w	r0, #4294967295
   85b80:	e6bd      	b.n	858fe <__sfvwrite_r+0x5e>
   85b82:	220c      	movs	r2, #12
   85b84:	9900      	ldr	r1, [sp, #0]
   85b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85b8a:	600a      	str	r2, [r1, #0]
   85b8c:	e706      	b.n	8599c <__sfvwrite_r+0xfc>
   85b8e:	bf00      	nop
   85b90:	7ffffc00 	.word	0x7ffffc00

00085b94 <_fwalk_reent>:
   85b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85b98:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   85b9c:	d01e      	beq.n	85bdc <_fwalk_reent+0x48>
   85b9e:	4688      	mov	r8, r1
   85ba0:	4607      	mov	r7, r0
   85ba2:	f04f 0900 	mov.w	r9, #0
   85ba6:	6875      	ldr	r5, [r6, #4]
   85ba8:	68b4      	ldr	r4, [r6, #8]
   85baa:	3d01      	subs	r5, #1
   85bac:	d410      	bmi.n	85bd0 <_fwalk_reent+0x3c>
   85bae:	89a3      	ldrh	r3, [r4, #12]
   85bb0:	3d01      	subs	r5, #1
   85bb2:	2b01      	cmp	r3, #1
   85bb4:	d908      	bls.n	85bc8 <_fwalk_reent+0x34>
   85bb6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   85bba:	3301      	adds	r3, #1
   85bbc:	d004      	beq.n	85bc8 <_fwalk_reent+0x34>
   85bbe:	4621      	mov	r1, r4
   85bc0:	4638      	mov	r0, r7
   85bc2:	47c0      	blx	r8
   85bc4:	ea49 0900 	orr.w	r9, r9, r0
   85bc8:	1c6b      	adds	r3, r5, #1
   85bca:	f104 0468 	add.w	r4, r4, #104	; 0x68
   85bce:	d1ee      	bne.n	85bae <_fwalk_reent+0x1a>
   85bd0:	6836      	ldr	r6, [r6, #0]
   85bd2:	2e00      	cmp	r6, #0
   85bd4:	d1e7      	bne.n	85ba6 <_fwalk_reent+0x12>
   85bd6:	4648      	mov	r0, r9
   85bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85bdc:	46b1      	mov	r9, r6
   85bde:	4648      	mov	r0, r9
   85be0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085be4 <__locale_mb_cur_max>:
   85be4:	4b04      	ldr	r3, [pc, #16]	; (85bf8 <__locale_mb_cur_max+0x14>)
   85be6:	4a05      	ldr	r2, [pc, #20]	; (85bfc <__locale_mb_cur_max+0x18>)
   85be8:	681b      	ldr	r3, [r3, #0]
   85bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   85bec:	2b00      	cmp	r3, #0
   85bee:	bf08      	it	eq
   85bf0:	4613      	moveq	r3, r2
   85bf2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   85bf6:	4770      	bx	lr
   85bf8:	200701ac 	.word	0x200701ac
   85bfc:	200705dc 	.word	0x200705dc

00085c00 <__retarget_lock_init_recursive>:
   85c00:	4770      	bx	lr
   85c02:	bf00      	nop

00085c04 <__retarget_lock_close_recursive>:
   85c04:	4770      	bx	lr
   85c06:	bf00      	nop

00085c08 <__retarget_lock_acquire_recursive>:
   85c08:	4770      	bx	lr
   85c0a:	bf00      	nop

00085c0c <__retarget_lock_release_recursive>:
   85c0c:	4770      	bx	lr
   85c0e:	bf00      	nop

00085c10 <__swhatbuf_r>:
   85c10:	b570      	push	{r4, r5, r6, lr}
   85c12:	460c      	mov	r4, r1
   85c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85c18:	b090      	sub	sp, #64	; 0x40
   85c1a:	2900      	cmp	r1, #0
   85c1c:	4615      	mov	r5, r2
   85c1e:	461e      	mov	r6, r3
   85c20:	db14      	blt.n	85c4c <__swhatbuf_r+0x3c>
   85c22:	aa01      	add	r2, sp, #4
   85c24:	f000 ff68 	bl	86af8 <_fstat_r>
   85c28:	2800      	cmp	r0, #0
   85c2a:	db0f      	blt.n	85c4c <__swhatbuf_r+0x3c>
   85c2c:	9a02      	ldr	r2, [sp, #8]
   85c2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85c32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   85c36:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   85c3a:	fab2 f282 	clz	r2, r2
   85c3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   85c42:	0952      	lsrs	r2, r2, #5
   85c44:	6032      	str	r2, [r6, #0]
   85c46:	602b      	str	r3, [r5, #0]
   85c48:	b010      	add	sp, #64	; 0x40
   85c4a:	bd70      	pop	{r4, r5, r6, pc}
   85c4c:	2300      	movs	r3, #0
   85c4e:	89a2      	ldrh	r2, [r4, #12]
   85c50:	6033      	str	r3, [r6, #0]
   85c52:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   85c56:	d004      	beq.n	85c62 <__swhatbuf_r+0x52>
   85c58:	2240      	movs	r2, #64	; 0x40
   85c5a:	4618      	mov	r0, r3
   85c5c:	602a      	str	r2, [r5, #0]
   85c5e:	b010      	add	sp, #64	; 0x40
   85c60:	bd70      	pop	{r4, r5, r6, pc}
   85c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85c66:	602b      	str	r3, [r5, #0]
   85c68:	b010      	add	sp, #64	; 0x40
   85c6a:	bd70      	pop	{r4, r5, r6, pc}

00085c6c <__smakebuf_r>:
   85c6c:	898a      	ldrh	r2, [r1, #12]
   85c6e:	460b      	mov	r3, r1
   85c70:	0792      	lsls	r2, r2, #30
   85c72:	d506      	bpl.n	85c82 <__smakebuf_r+0x16>
   85c74:	2101      	movs	r1, #1
   85c76:	f103 0243 	add.w	r2, r3, #67	; 0x43
   85c7a:	6159      	str	r1, [r3, #20]
   85c7c:	601a      	str	r2, [r3, #0]
   85c7e:	611a      	str	r2, [r3, #16]
   85c80:	4770      	bx	lr
   85c82:	b5f0      	push	{r4, r5, r6, r7, lr}
   85c84:	b083      	sub	sp, #12
   85c86:	ab01      	add	r3, sp, #4
   85c88:	466a      	mov	r2, sp
   85c8a:	460c      	mov	r4, r1
   85c8c:	4606      	mov	r6, r0
   85c8e:	f7ff ffbf 	bl	85c10 <__swhatbuf_r>
   85c92:	9900      	ldr	r1, [sp, #0]
   85c94:	4605      	mov	r5, r0
   85c96:	4630      	mov	r0, r6
   85c98:	f000 f83a 	bl	85d10 <_malloc_r>
   85c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85ca0:	b1d8      	cbz	r0, 85cda <__smakebuf_r+0x6e>
   85ca2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   85ca6:	4f15      	ldr	r7, [pc, #84]	; (85cfc <__smakebuf_r+0x90>)
   85ca8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85cac:	63f7      	str	r7, [r6, #60]	; 0x3c
   85cae:	81a3      	strh	r3, [r4, #12]
   85cb0:	6020      	str	r0, [r4, #0]
   85cb2:	6120      	str	r0, [r4, #16]
   85cb4:	6161      	str	r1, [r4, #20]
   85cb6:	b91a      	cbnz	r2, 85cc0 <__smakebuf_r+0x54>
   85cb8:	432b      	orrs	r3, r5
   85cba:	81a3      	strh	r3, [r4, #12]
   85cbc:	b003      	add	sp, #12
   85cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85cc0:	4630      	mov	r0, r6
   85cc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85cc6:	f000 ff2b 	bl	86b20 <_isatty_r>
   85cca:	b1a0      	cbz	r0, 85cf6 <__smakebuf_r+0x8a>
   85ccc:	89a3      	ldrh	r3, [r4, #12]
   85cce:	f023 0303 	bic.w	r3, r3, #3
   85cd2:	f043 0301 	orr.w	r3, r3, #1
   85cd6:	b21b      	sxth	r3, r3
   85cd8:	e7ee      	b.n	85cb8 <__smakebuf_r+0x4c>
   85cda:	059a      	lsls	r2, r3, #22
   85cdc:	d4ee      	bmi.n	85cbc <__smakebuf_r+0x50>
   85cde:	2101      	movs	r1, #1
   85ce0:	f023 0303 	bic.w	r3, r3, #3
   85ce4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   85ce8:	f043 0302 	orr.w	r3, r3, #2
   85cec:	81a3      	strh	r3, [r4, #12]
   85cee:	6161      	str	r1, [r4, #20]
   85cf0:	6022      	str	r2, [r4, #0]
   85cf2:	6122      	str	r2, [r4, #16]
   85cf4:	e7e2      	b.n	85cbc <__smakebuf_r+0x50>
   85cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85cfa:	e7dd      	b.n	85cb8 <__smakebuf_r+0x4c>
   85cfc:	0008542d 	.word	0x0008542d

00085d00 <malloc>:
   85d00:	4b02      	ldr	r3, [pc, #8]	; (85d0c <malloc+0xc>)
   85d02:	4601      	mov	r1, r0
   85d04:	6818      	ldr	r0, [r3, #0]
   85d06:	f000 b803 	b.w	85d10 <_malloc_r>
   85d0a:	bf00      	nop
   85d0c:	200701ac 	.word	0x200701ac

00085d10 <_malloc_r>:
   85d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85d14:	f101 060b 	add.w	r6, r1, #11
   85d18:	2e16      	cmp	r6, #22
   85d1a:	b083      	sub	sp, #12
   85d1c:	4605      	mov	r5, r0
   85d1e:	f240 809e 	bls.w	85e5e <_malloc_r+0x14e>
   85d22:	f036 0607 	bics.w	r6, r6, #7
   85d26:	f100 80bd 	bmi.w	85ea4 <_malloc_r+0x194>
   85d2a:	42b1      	cmp	r1, r6
   85d2c:	f200 80ba 	bhi.w	85ea4 <_malloc_r+0x194>
   85d30:	f000 fb50 	bl	863d4 <__malloc_lock>
   85d34:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   85d38:	f0c0 8285 	bcc.w	86246 <_malloc_r+0x536>
   85d3c:	0a73      	lsrs	r3, r6, #9
   85d3e:	f000 80b8 	beq.w	85eb2 <_malloc_r+0x1a2>
   85d42:	2b04      	cmp	r3, #4
   85d44:	f200 816c 	bhi.w	86020 <_malloc_r+0x310>
   85d48:	09b3      	lsrs	r3, r6, #6
   85d4a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   85d4e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   85d52:	00c1      	lsls	r1, r0, #3
   85d54:	4fb8      	ldr	r7, [pc, #736]	; (86038 <_malloc_r+0x328>)
   85d56:	4439      	add	r1, r7
   85d58:	684c      	ldr	r4, [r1, #4]
   85d5a:	3908      	subs	r1, #8
   85d5c:	42a1      	cmp	r1, r4
   85d5e:	d106      	bne.n	85d6e <_malloc_r+0x5e>
   85d60:	e00c      	b.n	85d7c <_malloc_r+0x6c>
   85d62:	2a00      	cmp	r2, #0
   85d64:	f280 80ab 	bge.w	85ebe <_malloc_r+0x1ae>
   85d68:	68e4      	ldr	r4, [r4, #12]
   85d6a:	42a1      	cmp	r1, r4
   85d6c:	d006      	beq.n	85d7c <_malloc_r+0x6c>
   85d6e:	6863      	ldr	r3, [r4, #4]
   85d70:	f023 0303 	bic.w	r3, r3, #3
   85d74:	1b9a      	subs	r2, r3, r6
   85d76:	2a0f      	cmp	r2, #15
   85d78:	ddf3      	ble.n	85d62 <_malloc_r+0x52>
   85d7a:	4670      	mov	r0, lr
   85d7c:	693c      	ldr	r4, [r7, #16]
   85d7e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8604c <_malloc_r+0x33c>
   85d82:	4574      	cmp	r4, lr
   85d84:	f000 819e 	beq.w	860c4 <_malloc_r+0x3b4>
   85d88:	6863      	ldr	r3, [r4, #4]
   85d8a:	f023 0303 	bic.w	r3, r3, #3
   85d8e:	1b9a      	subs	r2, r3, r6
   85d90:	2a0f      	cmp	r2, #15
   85d92:	f300 8183 	bgt.w	8609c <_malloc_r+0x38c>
   85d96:	2a00      	cmp	r2, #0
   85d98:	f8c7 e014 	str.w	lr, [r7, #20]
   85d9c:	f8c7 e010 	str.w	lr, [r7, #16]
   85da0:	f280 8091 	bge.w	85ec6 <_malloc_r+0x1b6>
   85da4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85da8:	f080 8154 	bcs.w	86054 <_malloc_r+0x344>
   85dac:	2201      	movs	r2, #1
   85dae:	08db      	lsrs	r3, r3, #3
   85db0:	6879      	ldr	r1, [r7, #4]
   85db2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   85db6:	4413      	add	r3, r2
   85db8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   85dbc:	fa02 f20c 	lsl.w	r2, r2, ip
   85dc0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   85dc4:	430a      	orrs	r2, r1
   85dc6:	f1ac 0108 	sub.w	r1, ip, #8
   85dca:	60e1      	str	r1, [r4, #12]
   85dcc:	f8c4 8008 	str.w	r8, [r4, #8]
   85dd0:	607a      	str	r2, [r7, #4]
   85dd2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   85dd6:	f8c8 400c 	str.w	r4, [r8, #12]
   85dda:	2401      	movs	r4, #1
   85ddc:	1083      	asrs	r3, r0, #2
   85dde:	409c      	lsls	r4, r3
   85de0:	4294      	cmp	r4, r2
   85de2:	d87d      	bhi.n	85ee0 <_malloc_r+0x1d0>
   85de4:	4214      	tst	r4, r2
   85de6:	d106      	bne.n	85df6 <_malloc_r+0xe6>
   85de8:	f020 0003 	bic.w	r0, r0, #3
   85dec:	0064      	lsls	r4, r4, #1
   85dee:	4214      	tst	r4, r2
   85df0:	f100 0004 	add.w	r0, r0, #4
   85df4:	d0fa      	beq.n	85dec <_malloc_r+0xdc>
   85df6:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85dfa:	46cc      	mov	ip, r9
   85dfc:	4680      	mov	r8, r0
   85dfe:	f8dc 300c 	ldr.w	r3, [ip, #12]
   85e02:	459c      	cmp	ip, r3
   85e04:	d107      	bne.n	85e16 <_malloc_r+0x106>
   85e06:	e15f      	b.n	860c8 <_malloc_r+0x3b8>
   85e08:	2a00      	cmp	r2, #0
   85e0a:	f280 816d 	bge.w	860e8 <_malloc_r+0x3d8>
   85e0e:	68db      	ldr	r3, [r3, #12]
   85e10:	459c      	cmp	ip, r3
   85e12:	f000 8159 	beq.w	860c8 <_malloc_r+0x3b8>
   85e16:	6859      	ldr	r1, [r3, #4]
   85e18:	f021 0103 	bic.w	r1, r1, #3
   85e1c:	1b8a      	subs	r2, r1, r6
   85e1e:	2a0f      	cmp	r2, #15
   85e20:	ddf2      	ble.n	85e08 <_malloc_r+0xf8>
   85e22:	68dc      	ldr	r4, [r3, #12]
   85e24:	f8d3 c008 	ldr.w	ip, [r3, #8]
   85e28:	f046 0801 	orr.w	r8, r6, #1
   85e2c:	4628      	mov	r0, r5
   85e2e:	441e      	add	r6, r3
   85e30:	f042 0501 	orr.w	r5, r2, #1
   85e34:	f8c3 8004 	str.w	r8, [r3, #4]
   85e38:	f8cc 400c 	str.w	r4, [ip, #12]
   85e3c:	f8c4 c008 	str.w	ip, [r4, #8]
   85e40:	617e      	str	r6, [r7, #20]
   85e42:	613e      	str	r6, [r7, #16]
   85e44:	f8c6 e00c 	str.w	lr, [r6, #12]
   85e48:	f8c6 e008 	str.w	lr, [r6, #8]
   85e4c:	6075      	str	r5, [r6, #4]
   85e4e:	505a      	str	r2, [r3, r1]
   85e50:	9300      	str	r3, [sp, #0]
   85e52:	f000 fac5 	bl	863e0 <__malloc_unlock>
   85e56:	9b00      	ldr	r3, [sp, #0]
   85e58:	f103 0408 	add.w	r4, r3, #8
   85e5c:	e01e      	b.n	85e9c <_malloc_r+0x18c>
   85e5e:	2910      	cmp	r1, #16
   85e60:	d820      	bhi.n	85ea4 <_malloc_r+0x194>
   85e62:	f000 fab7 	bl	863d4 <__malloc_lock>
   85e66:	2610      	movs	r6, #16
   85e68:	2318      	movs	r3, #24
   85e6a:	2002      	movs	r0, #2
   85e6c:	4f72      	ldr	r7, [pc, #456]	; (86038 <_malloc_r+0x328>)
   85e6e:	443b      	add	r3, r7
   85e70:	685c      	ldr	r4, [r3, #4]
   85e72:	f1a3 0208 	sub.w	r2, r3, #8
   85e76:	4294      	cmp	r4, r2
   85e78:	f000 812f 	beq.w	860da <_malloc_r+0x3ca>
   85e7c:	6863      	ldr	r3, [r4, #4]
   85e7e:	68e1      	ldr	r1, [r4, #12]
   85e80:	f023 0303 	bic.w	r3, r3, #3
   85e84:	4423      	add	r3, r4
   85e86:	685a      	ldr	r2, [r3, #4]
   85e88:	68a6      	ldr	r6, [r4, #8]
   85e8a:	f042 0201 	orr.w	r2, r2, #1
   85e8e:	60f1      	str	r1, [r6, #12]
   85e90:	4628      	mov	r0, r5
   85e92:	608e      	str	r6, [r1, #8]
   85e94:	605a      	str	r2, [r3, #4]
   85e96:	f000 faa3 	bl	863e0 <__malloc_unlock>
   85e9a:	3408      	adds	r4, #8
   85e9c:	4620      	mov	r0, r4
   85e9e:	b003      	add	sp, #12
   85ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ea4:	2400      	movs	r4, #0
   85ea6:	230c      	movs	r3, #12
   85ea8:	4620      	mov	r0, r4
   85eaa:	602b      	str	r3, [r5, #0]
   85eac:	b003      	add	sp, #12
   85eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85eb2:	2040      	movs	r0, #64	; 0x40
   85eb4:	f44f 7100 	mov.w	r1, #512	; 0x200
   85eb8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   85ebc:	e74a      	b.n	85d54 <_malloc_r+0x44>
   85ebe:	4423      	add	r3, r4
   85ec0:	685a      	ldr	r2, [r3, #4]
   85ec2:	68e1      	ldr	r1, [r4, #12]
   85ec4:	e7e0      	b.n	85e88 <_malloc_r+0x178>
   85ec6:	4423      	add	r3, r4
   85ec8:	685a      	ldr	r2, [r3, #4]
   85eca:	4628      	mov	r0, r5
   85ecc:	f042 0201 	orr.w	r2, r2, #1
   85ed0:	605a      	str	r2, [r3, #4]
   85ed2:	3408      	adds	r4, #8
   85ed4:	f000 fa84 	bl	863e0 <__malloc_unlock>
   85ed8:	4620      	mov	r0, r4
   85eda:	b003      	add	sp, #12
   85edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ee0:	68bc      	ldr	r4, [r7, #8]
   85ee2:	6863      	ldr	r3, [r4, #4]
   85ee4:	f023 0803 	bic.w	r8, r3, #3
   85ee8:	45b0      	cmp	r8, r6
   85eea:	d304      	bcc.n	85ef6 <_malloc_r+0x1e6>
   85eec:	eba8 0306 	sub.w	r3, r8, r6
   85ef0:	2b0f      	cmp	r3, #15
   85ef2:	f300 8085 	bgt.w	86000 <_malloc_r+0x2f0>
   85ef6:	f8df 9158 	ldr.w	r9, [pc, #344]	; 86050 <_malloc_r+0x340>
   85efa:	4b50      	ldr	r3, [pc, #320]	; (8603c <_malloc_r+0x32c>)
   85efc:	f8d9 2000 	ldr.w	r2, [r9]
   85f00:	681b      	ldr	r3, [r3, #0]
   85f02:	3201      	adds	r2, #1
   85f04:	4433      	add	r3, r6
   85f06:	eb04 0a08 	add.w	sl, r4, r8
   85f0a:	f000 8154 	beq.w	861b6 <_malloc_r+0x4a6>
   85f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   85f12:	330f      	adds	r3, #15
   85f14:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   85f18:	f02b 0b0f 	bic.w	fp, fp, #15
   85f1c:	4659      	mov	r1, fp
   85f1e:	4628      	mov	r0, r5
   85f20:	f000 fc1a 	bl	86758 <_sbrk_r>
   85f24:	1c41      	adds	r1, r0, #1
   85f26:	4602      	mov	r2, r0
   85f28:	f000 80fb 	beq.w	86122 <_malloc_r+0x412>
   85f2c:	4582      	cmp	sl, r0
   85f2e:	f200 80f6 	bhi.w	8611e <_malloc_r+0x40e>
   85f32:	4b43      	ldr	r3, [pc, #268]	; (86040 <_malloc_r+0x330>)
   85f34:	6819      	ldr	r1, [r3, #0]
   85f36:	4459      	add	r1, fp
   85f38:	6019      	str	r1, [r3, #0]
   85f3a:	f000 814c 	beq.w	861d6 <_malloc_r+0x4c6>
   85f3e:	f8d9 0000 	ldr.w	r0, [r9]
   85f42:	3001      	adds	r0, #1
   85f44:	bf1b      	ittet	ne
   85f46:	eba2 0a0a 	subne.w	sl, r2, sl
   85f4a:	4451      	addne	r1, sl
   85f4c:	f8c9 2000 	streq.w	r2, [r9]
   85f50:	6019      	strne	r1, [r3, #0]
   85f52:	f012 0107 	ands.w	r1, r2, #7
   85f56:	f000 8114 	beq.w	86182 <_malloc_r+0x472>
   85f5a:	f1c1 0008 	rsb	r0, r1, #8
   85f5e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85f62:	4402      	add	r2, r0
   85f64:	3108      	adds	r1, #8
   85f66:	eb02 090b 	add.w	r9, r2, fp
   85f6a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   85f6e:	eba1 0909 	sub.w	r9, r1, r9
   85f72:	4649      	mov	r1, r9
   85f74:	4628      	mov	r0, r5
   85f76:	9301      	str	r3, [sp, #4]
   85f78:	9200      	str	r2, [sp, #0]
   85f7a:	f000 fbed 	bl	86758 <_sbrk_r>
   85f7e:	1c43      	adds	r3, r0, #1
   85f80:	e89d 000c 	ldmia.w	sp, {r2, r3}
   85f84:	f000 8142 	beq.w	8620c <_malloc_r+0x4fc>
   85f88:	1a80      	subs	r0, r0, r2
   85f8a:	4448      	add	r0, r9
   85f8c:	f040 0001 	orr.w	r0, r0, #1
   85f90:	6819      	ldr	r1, [r3, #0]
   85f92:	42bc      	cmp	r4, r7
   85f94:	4449      	add	r1, r9
   85f96:	60ba      	str	r2, [r7, #8]
   85f98:	6019      	str	r1, [r3, #0]
   85f9a:	6050      	str	r0, [r2, #4]
   85f9c:	d017      	beq.n	85fce <_malloc_r+0x2be>
   85f9e:	f1b8 0f0f 	cmp.w	r8, #15
   85fa2:	f240 80fa 	bls.w	8619a <_malloc_r+0x48a>
   85fa6:	f04f 0c05 	mov.w	ip, #5
   85faa:	6862      	ldr	r2, [r4, #4]
   85fac:	f1a8 000c 	sub.w	r0, r8, #12
   85fb0:	f020 0007 	bic.w	r0, r0, #7
   85fb4:	f002 0201 	and.w	r2, r2, #1
   85fb8:	eb04 0e00 	add.w	lr, r4, r0
   85fbc:	4302      	orrs	r2, r0
   85fbe:	280f      	cmp	r0, #15
   85fc0:	6062      	str	r2, [r4, #4]
   85fc2:	f8ce c004 	str.w	ip, [lr, #4]
   85fc6:	f8ce c008 	str.w	ip, [lr, #8]
   85fca:	f200 8116 	bhi.w	861fa <_malloc_r+0x4ea>
   85fce:	4b1d      	ldr	r3, [pc, #116]	; (86044 <_malloc_r+0x334>)
   85fd0:	68bc      	ldr	r4, [r7, #8]
   85fd2:	681a      	ldr	r2, [r3, #0]
   85fd4:	4291      	cmp	r1, r2
   85fd6:	bf88      	it	hi
   85fd8:	6019      	strhi	r1, [r3, #0]
   85fda:	4b1b      	ldr	r3, [pc, #108]	; (86048 <_malloc_r+0x338>)
   85fdc:	681a      	ldr	r2, [r3, #0]
   85fde:	4291      	cmp	r1, r2
   85fe0:	6862      	ldr	r2, [r4, #4]
   85fe2:	bf88      	it	hi
   85fe4:	6019      	strhi	r1, [r3, #0]
   85fe6:	f022 0203 	bic.w	r2, r2, #3
   85fea:	4296      	cmp	r6, r2
   85fec:	eba2 0306 	sub.w	r3, r2, r6
   85ff0:	d801      	bhi.n	85ff6 <_malloc_r+0x2e6>
   85ff2:	2b0f      	cmp	r3, #15
   85ff4:	dc04      	bgt.n	86000 <_malloc_r+0x2f0>
   85ff6:	4628      	mov	r0, r5
   85ff8:	f000 f9f2 	bl	863e0 <__malloc_unlock>
   85ffc:	2400      	movs	r4, #0
   85ffe:	e74d      	b.n	85e9c <_malloc_r+0x18c>
   86000:	f046 0201 	orr.w	r2, r6, #1
   86004:	f043 0301 	orr.w	r3, r3, #1
   86008:	4426      	add	r6, r4
   8600a:	6062      	str	r2, [r4, #4]
   8600c:	4628      	mov	r0, r5
   8600e:	60be      	str	r6, [r7, #8]
   86010:	3408      	adds	r4, #8
   86012:	6073      	str	r3, [r6, #4]
   86014:	f000 f9e4 	bl	863e0 <__malloc_unlock>
   86018:	4620      	mov	r0, r4
   8601a:	b003      	add	sp, #12
   8601c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86020:	2b14      	cmp	r3, #20
   86022:	d970      	bls.n	86106 <_malloc_r+0x3f6>
   86024:	2b54      	cmp	r3, #84	; 0x54
   86026:	f200 80a2 	bhi.w	8616e <_malloc_r+0x45e>
   8602a:	0b33      	lsrs	r3, r6, #12
   8602c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   86030:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   86034:	00c1      	lsls	r1, r0, #3
   86036:	e68d      	b.n	85d54 <_malloc_r+0x44>
   86038:	20070748 	.word	0x20070748
   8603c:	2007ae3c 	.word	0x2007ae3c
   86040:	2007ae0c 	.word	0x2007ae0c
   86044:	2007ae34 	.word	0x2007ae34
   86048:	2007ae38 	.word	0x2007ae38
   8604c:	20070750 	.word	0x20070750
   86050:	20070b50 	.word	0x20070b50
   86054:	0a5a      	lsrs	r2, r3, #9
   86056:	2a04      	cmp	r2, #4
   86058:	d95b      	bls.n	86112 <_malloc_r+0x402>
   8605a:	2a14      	cmp	r2, #20
   8605c:	f200 80ae 	bhi.w	861bc <_malloc_r+0x4ac>
   86060:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   86064:	00c9      	lsls	r1, r1, #3
   86066:	325b      	adds	r2, #91	; 0x5b
   86068:	eb07 0c01 	add.w	ip, r7, r1
   8606c:	5879      	ldr	r1, [r7, r1]
   8606e:	f1ac 0c08 	sub.w	ip, ip, #8
   86072:	458c      	cmp	ip, r1
   86074:	f000 8088 	beq.w	86188 <_malloc_r+0x478>
   86078:	684a      	ldr	r2, [r1, #4]
   8607a:	f022 0203 	bic.w	r2, r2, #3
   8607e:	4293      	cmp	r3, r2
   86080:	d273      	bcs.n	8616a <_malloc_r+0x45a>
   86082:	6889      	ldr	r1, [r1, #8]
   86084:	458c      	cmp	ip, r1
   86086:	d1f7      	bne.n	86078 <_malloc_r+0x368>
   86088:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8608c:	687a      	ldr	r2, [r7, #4]
   8608e:	60e3      	str	r3, [r4, #12]
   86090:	f8c4 c008 	str.w	ip, [r4, #8]
   86094:	609c      	str	r4, [r3, #8]
   86096:	f8cc 400c 	str.w	r4, [ip, #12]
   8609a:	e69e      	b.n	85dda <_malloc_r+0xca>
   8609c:	f046 0c01 	orr.w	ip, r6, #1
   860a0:	f042 0101 	orr.w	r1, r2, #1
   860a4:	4426      	add	r6, r4
   860a6:	f8c4 c004 	str.w	ip, [r4, #4]
   860aa:	4628      	mov	r0, r5
   860ac:	617e      	str	r6, [r7, #20]
   860ae:	613e      	str	r6, [r7, #16]
   860b0:	f8c6 e00c 	str.w	lr, [r6, #12]
   860b4:	f8c6 e008 	str.w	lr, [r6, #8]
   860b8:	6071      	str	r1, [r6, #4]
   860ba:	50e2      	str	r2, [r4, r3]
   860bc:	f000 f990 	bl	863e0 <__malloc_unlock>
   860c0:	3408      	adds	r4, #8
   860c2:	e6eb      	b.n	85e9c <_malloc_r+0x18c>
   860c4:	687a      	ldr	r2, [r7, #4]
   860c6:	e688      	b.n	85dda <_malloc_r+0xca>
   860c8:	f108 0801 	add.w	r8, r8, #1
   860cc:	f018 0f03 	tst.w	r8, #3
   860d0:	f10c 0c08 	add.w	ip, ip, #8
   860d4:	f47f ae93 	bne.w	85dfe <_malloc_r+0xee>
   860d8:	e02d      	b.n	86136 <_malloc_r+0x426>
   860da:	68dc      	ldr	r4, [r3, #12]
   860dc:	42a3      	cmp	r3, r4
   860de:	bf08      	it	eq
   860e0:	3002      	addeq	r0, #2
   860e2:	f43f ae4b 	beq.w	85d7c <_malloc_r+0x6c>
   860e6:	e6c9      	b.n	85e7c <_malloc_r+0x16c>
   860e8:	461c      	mov	r4, r3
   860ea:	4419      	add	r1, r3
   860ec:	684a      	ldr	r2, [r1, #4]
   860ee:	68db      	ldr	r3, [r3, #12]
   860f0:	f854 6f08 	ldr.w	r6, [r4, #8]!
   860f4:	f042 0201 	orr.w	r2, r2, #1
   860f8:	604a      	str	r2, [r1, #4]
   860fa:	4628      	mov	r0, r5
   860fc:	60f3      	str	r3, [r6, #12]
   860fe:	609e      	str	r6, [r3, #8]
   86100:	f000 f96e 	bl	863e0 <__malloc_unlock>
   86104:	e6ca      	b.n	85e9c <_malloc_r+0x18c>
   86106:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8610a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8610e:	00c1      	lsls	r1, r0, #3
   86110:	e620      	b.n	85d54 <_malloc_r+0x44>
   86112:	099a      	lsrs	r2, r3, #6
   86114:	f102 0139 	add.w	r1, r2, #57	; 0x39
   86118:	00c9      	lsls	r1, r1, #3
   8611a:	3238      	adds	r2, #56	; 0x38
   8611c:	e7a4      	b.n	86068 <_malloc_r+0x358>
   8611e:	42bc      	cmp	r4, r7
   86120:	d054      	beq.n	861cc <_malloc_r+0x4bc>
   86122:	68bc      	ldr	r4, [r7, #8]
   86124:	6862      	ldr	r2, [r4, #4]
   86126:	f022 0203 	bic.w	r2, r2, #3
   8612a:	e75e      	b.n	85fea <_malloc_r+0x2da>
   8612c:	f859 3908 	ldr.w	r3, [r9], #-8
   86130:	4599      	cmp	r9, r3
   86132:	f040 8086 	bne.w	86242 <_malloc_r+0x532>
   86136:	f010 0f03 	tst.w	r0, #3
   8613a:	f100 30ff 	add.w	r0, r0, #4294967295
   8613e:	d1f5      	bne.n	8612c <_malloc_r+0x41c>
   86140:	687b      	ldr	r3, [r7, #4]
   86142:	ea23 0304 	bic.w	r3, r3, r4
   86146:	607b      	str	r3, [r7, #4]
   86148:	0064      	lsls	r4, r4, #1
   8614a:	429c      	cmp	r4, r3
   8614c:	f63f aec8 	bhi.w	85ee0 <_malloc_r+0x1d0>
   86150:	2c00      	cmp	r4, #0
   86152:	f43f aec5 	beq.w	85ee0 <_malloc_r+0x1d0>
   86156:	421c      	tst	r4, r3
   86158:	4640      	mov	r0, r8
   8615a:	f47f ae4c 	bne.w	85df6 <_malloc_r+0xe6>
   8615e:	0064      	lsls	r4, r4, #1
   86160:	421c      	tst	r4, r3
   86162:	f100 0004 	add.w	r0, r0, #4
   86166:	d0fa      	beq.n	8615e <_malloc_r+0x44e>
   86168:	e645      	b.n	85df6 <_malloc_r+0xe6>
   8616a:	468c      	mov	ip, r1
   8616c:	e78c      	b.n	86088 <_malloc_r+0x378>
   8616e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86172:	d815      	bhi.n	861a0 <_malloc_r+0x490>
   86174:	0bf3      	lsrs	r3, r6, #15
   86176:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8617a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8617e:	00c1      	lsls	r1, r0, #3
   86180:	e5e8      	b.n	85d54 <_malloc_r+0x44>
   86182:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   86186:	e6ee      	b.n	85f66 <_malloc_r+0x256>
   86188:	2101      	movs	r1, #1
   8618a:	687b      	ldr	r3, [r7, #4]
   8618c:	1092      	asrs	r2, r2, #2
   8618e:	fa01 f202 	lsl.w	r2, r1, r2
   86192:	431a      	orrs	r2, r3
   86194:	607a      	str	r2, [r7, #4]
   86196:	4663      	mov	r3, ip
   86198:	e779      	b.n	8608e <_malloc_r+0x37e>
   8619a:	2301      	movs	r3, #1
   8619c:	6053      	str	r3, [r2, #4]
   8619e:	e72a      	b.n	85ff6 <_malloc_r+0x2e6>
   861a0:	f240 5254 	movw	r2, #1364	; 0x554
   861a4:	4293      	cmp	r3, r2
   861a6:	d822      	bhi.n	861ee <_malloc_r+0x4de>
   861a8:	0cb3      	lsrs	r3, r6, #18
   861aa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   861ae:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   861b2:	00c1      	lsls	r1, r0, #3
   861b4:	e5ce      	b.n	85d54 <_malloc_r+0x44>
   861b6:	f103 0b10 	add.w	fp, r3, #16
   861ba:	e6af      	b.n	85f1c <_malloc_r+0x20c>
   861bc:	2a54      	cmp	r2, #84	; 0x54
   861be:	d829      	bhi.n	86214 <_malloc_r+0x504>
   861c0:	0b1a      	lsrs	r2, r3, #12
   861c2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   861c6:	00c9      	lsls	r1, r1, #3
   861c8:	326e      	adds	r2, #110	; 0x6e
   861ca:	e74d      	b.n	86068 <_malloc_r+0x358>
   861cc:	4b20      	ldr	r3, [pc, #128]	; (86250 <_malloc_r+0x540>)
   861ce:	6819      	ldr	r1, [r3, #0]
   861d0:	4459      	add	r1, fp
   861d2:	6019      	str	r1, [r3, #0]
   861d4:	e6b3      	b.n	85f3e <_malloc_r+0x22e>
   861d6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   861da:	2800      	cmp	r0, #0
   861dc:	f47f aeaf 	bne.w	85f3e <_malloc_r+0x22e>
   861e0:	eb08 030b 	add.w	r3, r8, fp
   861e4:	68ba      	ldr	r2, [r7, #8]
   861e6:	f043 0301 	orr.w	r3, r3, #1
   861ea:	6053      	str	r3, [r2, #4]
   861ec:	e6ef      	b.n	85fce <_malloc_r+0x2be>
   861ee:	207f      	movs	r0, #127	; 0x7f
   861f0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   861f4:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   861f8:	e5ac      	b.n	85d54 <_malloc_r+0x44>
   861fa:	f104 0108 	add.w	r1, r4, #8
   861fe:	4628      	mov	r0, r5
   86200:	9300      	str	r3, [sp, #0]
   86202:	f7ff fa67 	bl	856d4 <_free_r>
   86206:	9b00      	ldr	r3, [sp, #0]
   86208:	6819      	ldr	r1, [r3, #0]
   8620a:	e6e0      	b.n	85fce <_malloc_r+0x2be>
   8620c:	2001      	movs	r0, #1
   8620e:	f04f 0900 	mov.w	r9, #0
   86212:	e6bd      	b.n	85f90 <_malloc_r+0x280>
   86214:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   86218:	d805      	bhi.n	86226 <_malloc_r+0x516>
   8621a:	0bda      	lsrs	r2, r3, #15
   8621c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   86220:	00c9      	lsls	r1, r1, #3
   86222:	3277      	adds	r2, #119	; 0x77
   86224:	e720      	b.n	86068 <_malloc_r+0x358>
   86226:	f240 5154 	movw	r1, #1364	; 0x554
   8622a:	428a      	cmp	r2, r1
   8622c:	d805      	bhi.n	8623a <_malloc_r+0x52a>
   8622e:	0c9a      	lsrs	r2, r3, #18
   86230:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   86234:	00c9      	lsls	r1, r1, #3
   86236:	327c      	adds	r2, #124	; 0x7c
   86238:	e716      	b.n	86068 <_malloc_r+0x358>
   8623a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8623e:	227e      	movs	r2, #126	; 0x7e
   86240:	e712      	b.n	86068 <_malloc_r+0x358>
   86242:	687b      	ldr	r3, [r7, #4]
   86244:	e780      	b.n	86148 <_malloc_r+0x438>
   86246:	08f0      	lsrs	r0, r6, #3
   86248:	f106 0308 	add.w	r3, r6, #8
   8624c:	e60e      	b.n	85e6c <_malloc_r+0x15c>
   8624e:	bf00      	nop
   86250:	2007ae0c 	.word	0x2007ae0c

00086254 <__ascii_mbtowc>:
   86254:	b082      	sub	sp, #8
   86256:	b149      	cbz	r1, 8626c <__ascii_mbtowc+0x18>
   86258:	b15a      	cbz	r2, 86272 <__ascii_mbtowc+0x1e>
   8625a:	b16b      	cbz	r3, 86278 <__ascii_mbtowc+0x24>
   8625c:	7813      	ldrb	r3, [r2, #0]
   8625e:	600b      	str	r3, [r1, #0]
   86260:	7812      	ldrb	r2, [r2, #0]
   86262:	1c10      	adds	r0, r2, #0
   86264:	bf18      	it	ne
   86266:	2001      	movne	r0, #1
   86268:	b002      	add	sp, #8
   8626a:	4770      	bx	lr
   8626c:	a901      	add	r1, sp, #4
   8626e:	2a00      	cmp	r2, #0
   86270:	d1f3      	bne.n	8625a <__ascii_mbtowc+0x6>
   86272:	4610      	mov	r0, r2
   86274:	b002      	add	sp, #8
   86276:	4770      	bx	lr
   86278:	f06f 0001 	mvn.w	r0, #1
   8627c:	e7f4      	b.n	86268 <__ascii_mbtowc+0x14>
   8627e:	bf00      	nop

00086280 <memchr>:
   86280:	0783      	lsls	r3, r0, #30
   86282:	b470      	push	{r4, r5, r6}
   86284:	b2cd      	uxtb	r5, r1
   86286:	d03d      	beq.n	86304 <memchr+0x84>
   86288:	1e54      	subs	r4, r2, #1
   8628a:	b30a      	cbz	r2, 862d0 <memchr+0x50>
   8628c:	7803      	ldrb	r3, [r0, #0]
   8628e:	42ab      	cmp	r3, r5
   86290:	d01f      	beq.n	862d2 <memchr+0x52>
   86292:	1c43      	adds	r3, r0, #1
   86294:	e005      	b.n	862a2 <memchr+0x22>
   86296:	f114 34ff 	adds.w	r4, r4, #4294967295
   8629a:	d319      	bcc.n	862d0 <memchr+0x50>
   8629c:	7802      	ldrb	r2, [r0, #0]
   8629e:	42aa      	cmp	r2, r5
   862a0:	d017      	beq.n	862d2 <memchr+0x52>
   862a2:	f013 0f03 	tst.w	r3, #3
   862a6:	4618      	mov	r0, r3
   862a8:	f103 0301 	add.w	r3, r3, #1
   862ac:	d1f3      	bne.n	86296 <memchr+0x16>
   862ae:	2c03      	cmp	r4, #3
   862b0:	d811      	bhi.n	862d6 <memchr+0x56>
   862b2:	b34c      	cbz	r4, 86308 <memchr+0x88>
   862b4:	7803      	ldrb	r3, [r0, #0]
   862b6:	42ab      	cmp	r3, r5
   862b8:	d00b      	beq.n	862d2 <memchr+0x52>
   862ba:	4404      	add	r4, r0
   862bc:	1c43      	adds	r3, r0, #1
   862be:	e002      	b.n	862c6 <memchr+0x46>
   862c0:	7802      	ldrb	r2, [r0, #0]
   862c2:	42aa      	cmp	r2, r5
   862c4:	d005      	beq.n	862d2 <memchr+0x52>
   862c6:	429c      	cmp	r4, r3
   862c8:	4618      	mov	r0, r3
   862ca:	f103 0301 	add.w	r3, r3, #1
   862ce:	d1f7      	bne.n	862c0 <memchr+0x40>
   862d0:	2000      	movs	r0, #0
   862d2:	bc70      	pop	{r4, r5, r6}
   862d4:	4770      	bx	lr
   862d6:	0209      	lsls	r1, r1, #8
   862d8:	b289      	uxth	r1, r1
   862da:	4329      	orrs	r1, r5
   862dc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   862e0:	6803      	ldr	r3, [r0, #0]
   862e2:	4606      	mov	r6, r0
   862e4:	404b      	eors	r3, r1
   862e6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   862ea:	ea22 0303 	bic.w	r3, r2, r3
   862ee:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   862f2:	f100 0004 	add.w	r0, r0, #4
   862f6:	d103      	bne.n	86300 <memchr+0x80>
   862f8:	3c04      	subs	r4, #4
   862fa:	2c03      	cmp	r4, #3
   862fc:	d8f0      	bhi.n	862e0 <memchr+0x60>
   862fe:	e7d8      	b.n	862b2 <memchr+0x32>
   86300:	4630      	mov	r0, r6
   86302:	e7d7      	b.n	862b4 <memchr+0x34>
   86304:	4614      	mov	r4, r2
   86306:	e7d2      	b.n	862ae <memchr+0x2e>
   86308:	4620      	mov	r0, r4
   8630a:	e7e2      	b.n	862d2 <memchr+0x52>

0008630c <memmove>:
   8630c:	4288      	cmp	r0, r1
   8630e:	b5f0      	push	{r4, r5, r6, r7, lr}
   86310:	d90d      	bls.n	8632e <memmove+0x22>
   86312:	188b      	adds	r3, r1, r2
   86314:	4298      	cmp	r0, r3
   86316:	d20a      	bcs.n	8632e <memmove+0x22>
   86318:	1884      	adds	r4, r0, r2
   8631a:	2a00      	cmp	r2, #0
   8631c:	d051      	beq.n	863c2 <memmove+0xb6>
   8631e:	4622      	mov	r2, r4
   86320:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   86324:	4299      	cmp	r1, r3
   86326:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8632a:	d1f9      	bne.n	86320 <memmove+0x14>
   8632c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8632e:	2a0f      	cmp	r2, #15
   86330:	d948      	bls.n	863c4 <memmove+0xb8>
   86332:	ea41 0300 	orr.w	r3, r1, r0
   86336:	079b      	lsls	r3, r3, #30
   86338:	d146      	bne.n	863c8 <memmove+0xbc>
   8633a:	4615      	mov	r5, r2
   8633c:	f100 0410 	add.w	r4, r0, #16
   86340:	f101 0310 	add.w	r3, r1, #16
   86344:	f853 6c10 	ldr.w	r6, [r3, #-16]
   86348:	3d10      	subs	r5, #16
   8634a:	f844 6c10 	str.w	r6, [r4, #-16]
   8634e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   86352:	2d0f      	cmp	r5, #15
   86354:	f844 6c0c 	str.w	r6, [r4, #-12]
   86358:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8635c:	f104 0410 	add.w	r4, r4, #16
   86360:	f844 6c18 	str.w	r6, [r4, #-24]
   86364:	f853 6c04 	ldr.w	r6, [r3, #-4]
   86368:	f103 0310 	add.w	r3, r3, #16
   8636c:	f844 6c14 	str.w	r6, [r4, #-20]
   86370:	d8e8      	bhi.n	86344 <memmove+0x38>
   86372:	f1a2 0310 	sub.w	r3, r2, #16
   86376:	f023 030f 	bic.w	r3, r3, #15
   8637a:	f002 0e0f 	and.w	lr, r2, #15
   8637e:	3310      	adds	r3, #16
   86380:	f1be 0f03 	cmp.w	lr, #3
   86384:	4419      	add	r1, r3
   86386:	4403      	add	r3, r0
   86388:	d921      	bls.n	863ce <memmove+0xc2>
   8638a:	460e      	mov	r6, r1
   8638c:	4674      	mov	r4, lr
   8638e:	1f1d      	subs	r5, r3, #4
   86390:	f856 7b04 	ldr.w	r7, [r6], #4
   86394:	3c04      	subs	r4, #4
   86396:	2c03      	cmp	r4, #3
   86398:	f845 7f04 	str.w	r7, [r5, #4]!
   8639c:	d8f8      	bhi.n	86390 <memmove+0x84>
   8639e:	f1ae 0404 	sub.w	r4, lr, #4
   863a2:	f024 0403 	bic.w	r4, r4, #3
   863a6:	3404      	adds	r4, #4
   863a8:	4421      	add	r1, r4
   863aa:	4423      	add	r3, r4
   863ac:	f002 0203 	and.w	r2, r2, #3
   863b0:	b162      	cbz	r2, 863cc <memmove+0xc0>
   863b2:	3b01      	subs	r3, #1
   863b4:	440a      	add	r2, r1
   863b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   863ba:	428a      	cmp	r2, r1
   863bc:	f803 4f01 	strb.w	r4, [r3, #1]!
   863c0:	d1f9      	bne.n	863b6 <memmove+0xaa>
   863c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   863c4:	4603      	mov	r3, r0
   863c6:	e7f3      	b.n	863b0 <memmove+0xa4>
   863c8:	4603      	mov	r3, r0
   863ca:	e7f2      	b.n	863b2 <memmove+0xa6>
   863cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   863ce:	4672      	mov	r2, lr
   863d0:	e7ee      	b.n	863b0 <memmove+0xa4>
   863d2:	bf00      	nop

000863d4 <__malloc_lock>:
   863d4:	4801      	ldr	r0, [pc, #4]	; (863dc <__malloc_lock+0x8>)
   863d6:	f7ff bc17 	b.w	85c08 <__retarget_lock_acquire_recursive>
   863da:	bf00      	nop
   863dc:	2007aeb0 	.word	0x2007aeb0

000863e0 <__malloc_unlock>:
   863e0:	4801      	ldr	r0, [pc, #4]	; (863e8 <__malloc_unlock+0x8>)
   863e2:	f7ff bc13 	b.w	85c0c <__retarget_lock_release_recursive>
   863e6:	bf00      	nop
   863e8:	2007aeb0 	.word	0x2007aeb0

000863ec <_realloc_r>:
   863ec:	2900      	cmp	r1, #0
   863ee:	f000 8094 	beq.w	8651a <_realloc_r+0x12e>
   863f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   863f6:	460c      	mov	r4, r1
   863f8:	4615      	mov	r5, r2
   863fa:	b083      	sub	sp, #12
   863fc:	4680      	mov	r8, r0
   863fe:	f105 060b 	add.w	r6, r5, #11
   86402:	f7ff ffe7 	bl	863d4 <__malloc_lock>
   86406:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8640a:	2e16      	cmp	r6, #22
   8640c:	f02e 0703 	bic.w	r7, lr, #3
   86410:	f1a4 0908 	sub.w	r9, r4, #8
   86414:	d83c      	bhi.n	86490 <_realloc_r+0xa4>
   86416:	2210      	movs	r2, #16
   86418:	4616      	mov	r6, r2
   8641a:	42b5      	cmp	r5, r6
   8641c:	d83d      	bhi.n	8649a <_realloc_r+0xae>
   8641e:	4297      	cmp	r7, r2
   86420:	da43      	bge.n	864aa <_realloc_r+0xbe>
   86422:	4bc6      	ldr	r3, [pc, #792]	; (8673c <_realloc_r+0x350>)
   86424:	eb09 0007 	add.w	r0, r9, r7
   86428:	6899      	ldr	r1, [r3, #8]
   8642a:	4288      	cmp	r0, r1
   8642c:	f000 80c3 	beq.w	865b6 <_realloc_r+0x1ca>
   86430:	6843      	ldr	r3, [r0, #4]
   86432:	f023 0101 	bic.w	r1, r3, #1
   86436:	4401      	add	r1, r0
   86438:	6849      	ldr	r1, [r1, #4]
   8643a:	07c9      	lsls	r1, r1, #31
   8643c:	d54d      	bpl.n	864da <_realloc_r+0xee>
   8643e:	f01e 0f01 	tst.w	lr, #1
   86442:	f000 809b 	beq.w	8657c <_realloc_r+0x190>
   86446:	4629      	mov	r1, r5
   86448:	4640      	mov	r0, r8
   8644a:	f7ff fc61 	bl	85d10 <_malloc_r>
   8644e:	4605      	mov	r5, r0
   86450:	2800      	cmp	r0, #0
   86452:	d03b      	beq.n	864cc <_realloc_r+0xe0>
   86454:	f854 3c04 	ldr.w	r3, [r4, #-4]
   86458:	f1a0 0208 	sub.w	r2, r0, #8
   8645c:	f023 0301 	bic.w	r3, r3, #1
   86460:	444b      	add	r3, r9
   86462:	429a      	cmp	r2, r3
   86464:	f000 812b 	beq.w	866be <_realloc_r+0x2d2>
   86468:	1f3a      	subs	r2, r7, #4
   8646a:	2a24      	cmp	r2, #36	; 0x24
   8646c:	f200 8118 	bhi.w	866a0 <_realloc_r+0x2b4>
   86470:	2a13      	cmp	r2, #19
   86472:	f200 80eb 	bhi.w	8664c <_realloc_r+0x260>
   86476:	4603      	mov	r3, r0
   86478:	4622      	mov	r2, r4
   8647a:	6811      	ldr	r1, [r2, #0]
   8647c:	6019      	str	r1, [r3, #0]
   8647e:	6851      	ldr	r1, [r2, #4]
   86480:	6059      	str	r1, [r3, #4]
   86482:	6892      	ldr	r2, [r2, #8]
   86484:	609a      	str	r2, [r3, #8]
   86486:	4621      	mov	r1, r4
   86488:	4640      	mov	r0, r8
   8648a:	f7ff f923 	bl	856d4 <_free_r>
   8648e:	e01d      	b.n	864cc <_realloc_r+0xe0>
   86490:	f026 0607 	bic.w	r6, r6, #7
   86494:	2e00      	cmp	r6, #0
   86496:	4632      	mov	r2, r6
   86498:	dabf      	bge.n	8641a <_realloc_r+0x2e>
   8649a:	2500      	movs	r5, #0
   8649c:	230c      	movs	r3, #12
   8649e:	4628      	mov	r0, r5
   864a0:	f8c8 3000 	str.w	r3, [r8]
   864a4:	b003      	add	sp, #12
   864a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864aa:	4625      	mov	r5, r4
   864ac:	1bbb      	subs	r3, r7, r6
   864ae:	2b0f      	cmp	r3, #15
   864b0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   864b4:	d81d      	bhi.n	864f2 <_realloc_r+0x106>
   864b6:	f002 0201 	and.w	r2, r2, #1
   864ba:	433a      	orrs	r2, r7
   864bc:	eb09 0107 	add.w	r1, r9, r7
   864c0:	f8c9 2004 	str.w	r2, [r9, #4]
   864c4:	684b      	ldr	r3, [r1, #4]
   864c6:	f043 0301 	orr.w	r3, r3, #1
   864ca:	604b      	str	r3, [r1, #4]
   864cc:	4640      	mov	r0, r8
   864ce:	f7ff ff87 	bl	863e0 <__malloc_unlock>
   864d2:	4628      	mov	r0, r5
   864d4:	b003      	add	sp, #12
   864d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864da:	f023 0303 	bic.w	r3, r3, #3
   864de:	18f9      	adds	r1, r7, r3
   864e0:	4291      	cmp	r1, r2
   864e2:	db1d      	blt.n	86520 <_realloc_r+0x134>
   864e4:	68c3      	ldr	r3, [r0, #12]
   864e6:	6882      	ldr	r2, [r0, #8]
   864e8:	4625      	mov	r5, r4
   864ea:	60d3      	str	r3, [r2, #12]
   864ec:	460f      	mov	r7, r1
   864ee:	609a      	str	r2, [r3, #8]
   864f0:	e7dc      	b.n	864ac <_realloc_r+0xc0>
   864f2:	f002 0201 	and.w	r2, r2, #1
   864f6:	eb09 0106 	add.w	r1, r9, r6
   864fa:	f043 0301 	orr.w	r3, r3, #1
   864fe:	4332      	orrs	r2, r6
   86500:	f8c9 2004 	str.w	r2, [r9, #4]
   86504:	444f      	add	r7, r9
   86506:	604b      	str	r3, [r1, #4]
   86508:	687b      	ldr	r3, [r7, #4]
   8650a:	3108      	adds	r1, #8
   8650c:	f043 0301 	orr.w	r3, r3, #1
   86510:	607b      	str	r3, [r7, #4]
   86512:	4640      	mov	r0, r8
   86514:	f7ff f8de 	bl	856d4 <_free_r>
   86518:	e7d8      	b.n	864cc <_realloc_r+0xe0>
   8651a:	4611      	mov	r1, r2
   8651c:	f7ff bbf8 	b.w	85d10 <_malloc_r>
   86520:	f01e 0f01 	tst.w	lr, #1
   86524:	d18f      	bne.n	86446 <_realloc_r+0x5a>
   86526:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8652a:	eba9 0a01 	sub.w	sl, r9, r1
   8652e:	f8da 1004 	ldr.w	r1, [sl, #4]
   86532:	f021 0103 	bic.w	r1, r1, #3
   86536:	440b      	add	r3, r1
   86538:	443b      	add	r3, r7
   8653a:	4293      	cmp	r3, r2
   8653c:	db26      	blt.n	8658c <_realloc_r+0x1a0>
   8653e:	4655      	mov	r5, sl
   86540:	68c1      	ldr	r1, [r0, #12]
   86542:	6880      	ldr	r0, [r0, #8]
   86544:	1f3a      	subs	r2, r7, #4
   86546:	60c1      	str	r1, [r0, #12]
   86548:	6088      	str	r0, [r1, #8]
   8654a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8654e:	f8da 100c 	ldr.w	r1, [sl, #12]
   86552:	2a24      	cmp	r2, #36	; 0x24
   86554:	60c1      	str	r1, [r0, #12]
   86556:	6088      	str	r0, [r1, #8]
   86558:	d826      	bhi.n	865a8 <_realloc_r+0x1bc>
   8655a:	2a13      	cmp	r2, #19
   8655c:	f240 8081 	bls.w	86662 <_realloc_r+0x276>
   86560:	6821      	ldr	r1, [r4, #0]
   86562:	2a1b      	cmp	r2, #27
   86564:	f8ca 1008 	str.w	r1, [sl, #8]
   86568:	6861      	ldr	r1, [r4, #4]
   8656a:	f8ca 100c 	str.w	r1, [sl, #12]
   8656e:	f200 80ad 	bhi.w	866cc <_realloc_r+0x2e0>
   86572:	f104 0008 	add.w	r0, r4, #8
   86576:	f10a 0210 	add.w	r2, sl, #16
   8657a:	e074      	b.n	86666 <_realloc_r+0x27a>
   8657c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   86580:	eba9 0a03 	sub.w	sl, r9, r3
   86584:	f8da 1004 	ldr.w	r1, [sl, #4]
   86588:	f021 0103 	bic.w	r1, r1, #3
   8658c:	187b      	adds	r3, r7, r1
   8658e:	4293      	cmp	r3, r2
   86590:	f6ff af59 	blt.w	86446 <_realloc_r+0x5a>
   86594:	4655      	mov	r5, sl
   86596:	f8da 100c 	ldr.w	r1, [sl, #12]
   8659a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8659e:	1f3a      	subs	r2, r7, #4
   865a0:	2a24      	cmp	r2, #36	; 0x24
   865a2:	60c1      	str	r1, [r0, #12]
   865a4:	6088      	str	r0, [r1, #8]
   865a6:	d9d8      	bls.n	8655a <_realloc_r+0x16e>
   865a8:	4621      	mov	r1, r4
   865aa:	4628      	mov	r0, r5
   865ac:	461f      	mov	r7, r3
   865ae:	46d1      	mov	r9, sl
   865b0:	f7ff feac 	bl	8630c <memmove>
   865b4:	e77a      	b.n	864ac <_realloc_r+0xc0>
   865b6:	6841      	ldr	r1, [r0, #4]
   865b8:	f106 0010 	add.w	r0, r6, #16
   865bc:	f021 0b03 	bic.w	fp, r1, #3
   865c0:	44bb      	add	fp, r7
   865c2:	4583      	cmp	fp, r0
   865c4:	da58      	bge.n	86678 <_realloc_r+0x28c>
   865c6:	f01e 0f01 	tst.w	lr, #1
   865ca:	f47f af3c 	bne.w	86446 <_realloc_r+0x5a>
   865ce:	f854 1c08 	ldr.w	r1, [r4, #-8]
   865d2:	eba9 0a01 	sub.w	sl, r9, r1
   865d6:	f8da 1004 	ldr.w	r1, [sl, #4]
   865da:	f021 0103 	bic.w	r1, r1, #3
   865de:	448b      	add	fp, r1
   865e0:	4558      	cmp	r0, fp
   865e2:	dcd3      	bgt.n	8658c <_realloc_r+0x1a0>
   865e4:	4655      	mov	r5, sl
   865e6:	f8da 100c 	ldr.w	r1, [sl, #12]
   865ea:	f855 0f08 	ldr.w	r0, [r5, #8]!
   865ee:	1f3a      	subs	r2, r7, #4
   865f0:	2a24      	cmp	r2, #36	; 0x24
   865f2:	60c1      	str	r1, [r0, #12]
   865f4:	6088      	str	r0, [r1, #8]
   865f6:	f200 808d 	bhi.w	86714 <_realloc_r+0x328>
   865fa:	2a13      	cmp	r2, #19
   865fc:	f240 8087 	bls.w	8670e <_realloc_r+0x322>
   86600:	6821      	ldr	r1, [r4, #0]
   86602:	2a1b      	cmp	r2, #27
   86604:	f8ca 1008 	str.w	r1, [sl, #8]
   86608:	6861      	ldr	r1, [r4, #4]
   8660a:	f8ca 100c 	str.w	r1, [sl, #12]
   8660e:	f200 8088 	bhi.w	86722 <_realloc_r+0x336>
   86612:	f104 0108 	add.w	r1, r4, #8
   86616:	f10a 0210 	add.w	r2, sl, #16
   8661a:	6808      	ldr	r0, [r1, #0]
   8661c:	6010      	str	r0, [r2, #0]
   8661e:	6848      	ldr	r0, [r1, #4]
   86620:	6050      	str	r0, [r2, #4]
   86622:	6889      	ldr	r1, [r1, #8]
   86624:	6091      	str	r1, [r2, #8]
   86626:	ebab 0206 	sub.w	r2, fp, r6
   8662a:	eb0a 0106 	add.w	r1, sl, r6
   8662e:	f042 0201 	orr.w	r2, r2, #1
   86632:	6099      	str	r1, [r3, #8]
   86634:	604a      	str	r2, [r1, #4]
   86636:	f8da 3004 	ldr.w	r3, [sl, #4]
   8663a:	4640      	mov	r0, r8
   8663c:	f003 0301 	and.w	r3, r3, #1
   86640:	431e      	orrs	r6, r3
   86642:	f8ca 6004 	str.w	r6, [sl, #4]
   86646:	f7ff fecb 	bl	863e0 <__malloc_unlock>
   8664a:	e742      	b.n	864d2 <_realloc_r+0xe6>
   8664c:	6823      	ldr	r3, [r4, #0]
   8664e:	2a1b      	cmp	r2, #27
   86650:	6003      	str	r3, [r0, #0]
   86652:	6863      	ldr	r3, [r4, #4]
   86654:	6043      	str	r3, [r0, #4]
   86656:	d827      	bhi.n	866a8 <_realloc_r+0x2bc>
   86658:	f100 0308 	add.w	r3, r0, #8
   8665c:	f104 0208 	add.w	r2, r4, #8
   86660:	e70b      	b.n	8647a <_realloc_r+0x8e>
   86662:	4620      	mov	r0, r4
   86664:	462a      	mov	r2, r5
   86666:	6801      	ldr	r1, [r0, #0]
   86668:	461f      	mov	r7, r3
   8666a:	6011      	str	r1, [r2, #0]
   8666c:	6841      	ldr	r1, [r0, #4]
   8666e:	46d1      	mov	r9, sl
   86670:	6051      	str	r1, [r2, #4]
   86672:	6883      	ldr	r3, [r0, #8]
   86674:	6093      	str	r3, [r2, #8]
   86676:	e719      	b.n	864ac <_realloc_r+0xc0>
   86678:	ebab 0b06 	sub.w	fp, fp, r6
   8667c:	eb09 0106 	add.w	r1, r9, r6
   86680:	f04b 0201 	orr.w	r2, fp, #1
   86684:	6099      	str	r1, [r3, #8]
   86686:	604a      	str	r2, [r1, #4]
   86688:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8668c:	4640      	mov	r0, r8
   8668e:	f003 0301 	and.w	r3, r3, #1
   86692:	431e      	orrs	r6, r3
   86694:	f844 6c04 	str.w	r6, [r4, #-4]
   86698:	f7ff fea2 	bl	863e0 <__malloc_unlock>
   8669c:	4625      	mov	r5, r4
   8669e:	e718      	b.n	864d2 <_realloc_r+0xe6>
   866a0:	4621      	mov	r1, r4
   866a2:	f7ff fe33 	bl	8630c <memmove>
   866a6:	e6ee      	b.n	86486 <_realloc_r+0x9a>
   866a8:	68a3      	ldr	r3, [r4, #8]
   866aa:	2a24      	cmp	r2, #36	; 0x24
   866ac:	6083      	str	r3, [r0, #8]
   866ae:	68e3      	ldr	r3, [r4, #12]
   866b0:	60c3      	str	r3, [r0, #12]
   866b2:	d018      	beq.n	866e6 <_realloc_r+0x2fa>
   866b4:	f100 0310 	add.w	r3, r0, #16
   866b8:	f104 0210 	add.w	r2, r4, #16
   866bc:	e6dd      	b.n	8647a <_realloc_r+0x8e>
   866be:	f850 3c04 	ldr.w	r3, [r0, #-4]
   866c2:	4625      	mov	r5, r4
   866c4:	f023 0303 	bic.w	r3, r3, #3
   866c8:	441f      	add	r7, r3
   866ca:	e6ef      	b.n	864ac <_realloc_r+0xc0>
   866cc:	68a1      	ldr	r1, [r4, #8]
   866ce:	2a24      	cmp	r2, #36	; 0x24
   866d0:	f8ca 1010 	str.w	r1, [sl, #16]
   866d4:	68e1      	ldr	r1, [r4, #12]
   866d6:	f8ca 1014 	str.w	r1, [sl, #20]
   866da:	d00d      	beq.n	866f8 <_realloc_r+0x30c>
   866dc:	f104 0010 	add.w	r0, r4, #16
   866e0:	f10a 0218 	add.w	r2, sl, #24
   866e4:	e7bf      	b.n	86666 <_realloc_r+0x27a>
   866e6:	6922      	ldr	r2, [r4, #16]
   866e8:	f100 0318 	add.w	r3, r0, #24
   866ec:	6102      	str	r2, [r0, #16]
   866ee:	6961      	ldr	r1, [r4, #20]
   866f0:	f104 0218 	add.w	r2, r4, #24
   866f4:	6141      	str	r1, [r0, #20]
   866f6:	e6c0      	b.n	8647a <_realloc_r+0x8e>
   866f8:	6922      	ldr	r2, [r4, #16]
   866fa:	f104 0018 	add.w	r0, r4, #24
   866fe:	f8ca 2018 	str.w	r2, [sl, #24]
   86702:	6961      	ldr	r1, [r4, #20]
   86704:	f10a 0220 	add.w	r2, sl, #32
   86708:	f8ca 101c 	str.w	r1, [sl, #28]
   8670c:	e7ab      	b.n	86666 <_realloc_r+0x27a>
   8670e:	4621      	mov	r1, r4
   86710:	462a      	mov	r2, r5
   86712:	e782      	b.n	8661a <_realloc_r+0x22e>
   86714:	4621      	mov	r1, r4
   86716:	4628      	mov	r0, r5
   86718:	9301      	str	r3, [sp, #4]
   8671a:	f7ff fdf7 	bl	8630c <memmove>
   8671e:	9b01      	ldr	r3, [sp, #4]
   86720:	e781      	b.n	86626 <_realloc_r+0x23a>
   86722:	68a1      	ldr	r1, [r4, #8]
   86724:	2a24      	cmp	r2, #36	; 0x24
   86726:	f8ca 1010 	str.w	r1, [sl, #16]
   8672a:	68e1      	ldr	r1, [r4, #12]
   8672c:	f8ca 1014 	str.w	r1, [sl, #20]
   86730:	d006      	beq.n	86740 <_realloc_r+0x354>
   86732:	f104 0110 	add.w	r1, r4, #16
   86736:	f10a 0218 	add.w	r2, sl, #24
   8673a:	e76e      	b.n	8661a <_realloc_r+0x22e>
   8673c:	20070748 	.word	0x20070748
   86740:	6922      	ldr	r2, [r4, #16]
   86742:	f104 0118 	add.w	r1, r4, #24
   86746:	f8ca 2018 	str.w	r2, [sl, #24]
   8674a:	6960      	ldr	r0, [r4, #20]
   8674c:	f10a 0220 	add.w	r2, sl, #32
   86750:	f8ca 001c 	str.w	r0, [sl, #28]
   86754:	e761      	b.n	8661a <_realloc_r+0x22e>
   86756:	bf00      	nop

00086758 <_sbrk_r>:
   86758:	b538      	push	{r3, r4, r5, lr}
   8675a:	2300      	movs	r3, #0
   8675c:	4c06      	ldr	r4, [pc, #24]	; (86778 <_sbrk_r+0x20>)
   8675e:	4605      	mov	r5, r0
   86760:	4608      	mov	r0, r1
   86762:	6023      	str	r3, [r4, #0]
   86764:	f7fc fbc8 	bl	82ef8 <_sbrk>
   86768:	1c43      	adds	r3, r0, #1
   8676a:	d000      	beq.n	8676e <_sbrk_r+0x16>
   8676c:	bd38      	pop	{r3, r4, r5, pc}
   8676e:	6823      	ldr	r3, [r4, #0]
   86770:	2b00      	cmp	r3, #0
   86772:	d0fb      	beq.n	8676c <_sbrk_r+0x14>
   86774:	602b      	str	r3, [r5, #0]
   86776:	bd38      	pop	{r3, r4, r5, pc}
   86778:	2007aec4 	.word	0x2007aec4

0008677c <__sread>:
   8677c:	b510      	push	{r4, lr}
   8677e:	460c      	mov	r4, r1
   86780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86784:	f000 f9f4 	bl	86b70 <_read_r>
   86788:	2800      	cmp	r0, #0
   8678a:	db03      	blt.n	86794 <__sread+0x18>
   8678c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8678e:	4403      	add	r3, r0
   86790:	6523      	str	r3, [r4, #80]	; 0x50
   86792:	bd10      	pop	{r4, pc}
   86794:	89a3      	ldrh	r3, [r4, #12]
   86796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8679a:	81a3      	strh	r3, [r4, #12]
   8679c:	bd10      	pop	{r4, pc}
   8679e:	bf00      	nop

000867a0 <__swrite>:
   867a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   867a4:	460c      	mov	r4, r1
   867a6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   867aa:	461f      	mov	r7, r3
   867ac:	05cb      	lsls	r3, r1, #23
   867ae:	4616      	mov	r6, r2
   867b0:	4605      	mov	r5, r0
   867b2:	d507      	bpl.n	867c4 <__swrite+0x24>
   867b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   867b8:	2302      	movs	r3, #2
   867ba:	2200      	movs	r2, #0
   867bc:	f000 f9c2 	bl	86b44 <_lseek_r>
   867c0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   867c4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   867c8:	81a1      	strh	r1, [r4, #12]
   867ca:	463b      	mov	r3, r7
   867cc:	4632      	mov	r2, r6
   867ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   867d2:	4628      	mov	r0, r5
   867d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   867d8:	f000 b8a2 	b.w	86920 <_write_r>

000867dc <__sseek>:
   867dc:	b510      	push	{r4, lr}
   867de:	460c      	mov	r4, r1
   867e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   867e4:	f000 f9ae 	bl	86b44 <_lseek_r>
   867e8:	89a3      	ldrh	r3, [r4, #12]
   867ea:	1c42      	adds	r2, r0, #1
   867ec:	bf0e      	itee	eq
   867ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   867f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   867f6:	6520      	strne	r0, [r4, #80]	; 0x50
   867f8:	81a3      	strh	r3, [r4, #12]
   867fa:	bd10      	pop	{r4, pc}

000867fc <__sclose>:
   867fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86800:	f000 b906 	b.w	86a10 <_close_r>

00086804 <__swbuf_r>:
   86804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86806:	460d      	mov	r5, r1
   86808:	4614      	mov	r4, r2
   8680a:	4606      	mov	r6, r0
   8680c:	b110      	cbz	r0, 86814 <__swbuf_r+0x10>
   8680e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86810:	2b00      	cmp	r3, #0
   86812:	d04b      	beq.n	868ac <__swbuf_r+0xa8>
   86814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86818:	69a3      	ldr	r3, [r4, #24]
   8681a:	b291      	uxth	r1, r2
   8681c:	0708      	lsls	r0, r1, #28
   8681e:	60a3      	str	r3, [r4, #8]
   86820:	d539      	bpl.n	86896 <__swbuf_r+0x92>
   86822:	6923      	ldr	r3, [r4, #16]
   86824:	2b00      	cmp	r3, #0
   86826:	d036      	beq.n	86896 <__swbuf_r+0x92>
   86828:	b2ed      	uxtb	r5, r5
   8682a:	0489      	lsls	r1, r1, #18
   8682c:	462f      	mov	r7, r5
   8682e:	d515      	bpl.n	8685c <__swbuf_r+0x58>
   86830:	6822      	ldr	r2, [r4, #0]
   86832:	6961      	ldr	r1, [r4, #20]
   86834:	1ad3      	subs	r3, r2, r3
   86836:	428b      	cmp	r3, r1
   86838:	da1c      	bge.n	86874 <__swbuf_r+0x70>
   8683a:	3301      	adds	r3, #1
   8683c:	68a1      	ldr	r1, [r4, #8]
   8683e:	1c50      	adds	r0, r2, #1
   86840:	3901      	subs	r1, #1
   86842:	60a1      	str	r1, [r4, #8]
   86844:	6020      	str	r0, [r4, #0]
   86846:	7015      	strb	r5, [r2, #0]
   86848:	6962      	ldr	r2, [r4, #20]
   8684a:	429a      	cmp	r2, r3
   8684c:	d01a      	beq.n	86884 <__swbuf_r+0x80>
   8684e:	89a3      	ldrh	r3, [r4, #12]
   86850:	07db      	lsls	r3, r3, #31
   86852:	d501      	bpl.n	86858 <__swbuf_r+0x54>
   86854:	2d0a      	cmp	r5, #10
   86856:	d015      	beq.n	86884 <__swbuf_r+0x80>
   86858:	4638      	mov	r0, r7
   8685a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8685c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8685e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   86862:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   86866:	81a2      	strh	r2, [r4, #12]
   86868:	6822      	ldr	r2, [r4, #0]
   8686a:	6661      	str	r1, [r4, #100]	; 0x64
   8686c:	6961      	ldr	r1, [r4, #20]
   8686e:	1ad3      	subs	r3, r2, r3
   86870:	428b      	cmp	r3, r1
   86872:	dbe2      	blt.n	8683a <__swbuf_r+0x36>
   86874:	4621      	mov	r1, r4
   86876:	4630      	mov	r0, r6
   86878:	f7fe fdae 	bl	853d8 <_fflush_r>
   8687c:	b940      	cbnz	r0, 86890 <__swbuf_r+0x8c>
   8687e:	2301      	movs	r3, #1
   86880:	6822      	ldr	r2, [r4, #0]
   86882:	e7db      	b.n	8683c <__swbuf_r+0x38>
   86884:	4621      	mov	r1, r4
   86886:	4630      	mov	r0, r6
   86888:	f7fe fda6 	bl	853d8 <_fflush_r>
   8688c:	2800      	cmp	r0, #0
   8688e:	d0e3      	beq.n	86858 <__swbuf_r+0x54>
   86890:	f04f 37ff 	mov.w	r7, #4294967295
   86894:	e7e0      	b.n	86858 <__swbuf_r+0x54>
   86896:	4621      	mov	r1, r4
   86898:	4630      	mov	r0, r6
   8689a:	f7fe fc8d 	bl	851b8 <__swsetup_r>
   8689e:	2800      	cmp	r0, #0
   868a0:	d1f6      	bne.n	86890 <__swbuf_r+0x8c>
   868a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   868a6:	6923      	ldr	r3, [r4, #16]
   868a8:	b291      	uxth	r1, r2
   868aa:	e7bd      	b.n	86828 <__swbuf_r+0x24>
   868ac:	f7fe fdec 	bl	85488 <__sinit>
   868b0:	e7b0      	b.n	86814 <__swbuf_r+0x10>
   868b2:	bf00      	nop

000868b4 <_wcrtomb_r>:
   868b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   868b6:	4606      	mov	r6, r0
   868b8:	b085      	sub	sp, #20
   868ba:	461f      	mov	r7, r3
   868bc:	b189      	cbz	r1, 868e2 <_wcrtomb_r+0x2e>
   868be:	4c10      	ldr	r4, [pc, #64]	; (86900 <_wcrtomb_r+0x4c>)
   868c0:	4d10      	ldr	r5, [pc, #64]	; (86904 <_wcrtomb_r+0x50>)
   868c2:	6824      	ldr	r4, [r4, #0]
   868c4:	6b64      	ldr	r4, [r4, #52]	; 0x34
   868c6:	2c00      	cmp	r4, #0
   868c8:	bf08      	it	eq
   868ca:	462c      	moveq	r4, r5
   868cc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   868d0:	47a0      	blx	r4
   868d2:	1c43      	adds	r3, r0, #1
   868d4:	d103      	bne.n	868de <_wcrtomb_r+0x2a>
   868d6:	2200      	movs	r2, #0
   868d8:	238a      	movs	r3, #138	; 0x8a
   868da:	603a      	str	r2, [r7, #0]
   868dc:	6033      	str	r3, [r6, #0]
   868de:	b005      	add	sp, #20
   868e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   868e2:	460c      	mov	r4, r1
   868e4:	4a06      	ldr	r2, [pc, #24]	; (86900 <_wcrtomb_r+0x4c>)
   868e6:	4d07      	ldr	r5, [pc, #28]	; (86904 <_wcrtomb_r+0x50>)
   868e8:	6811      	ldr	r1, [r2, #0]
   868ea:	4622      	mov	r2, r4
   868ec:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   868ee:	a901      	add	r1, sp, #4
   868f0:	2c00      	cmp	r4, #0
   868f2:	bf08      	it	eq
   868f4:	462c      	moveq	r4, r5
   868f6:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   868fa:	47a0      	blx	r4
   868fc:	e7e9      	b.n	868d2 <_wcrtomb_r+0x1e>
   868fe:	bf00      	nop
   86900:	200701ac 	.word	0x200701ac
   86904:	200705dc 	.word	0x200705dc

00086908 <__ascii_wctomb>:
   86908:	b119      	cbz	r1, 86912 <__ascii_wctomb+0xa>
   8690a:	2aff      	cmp	r2, #255	; 0xff
   8690c:	d803      	bhi.n	86916 <__ascii_wctomb+0xe>
   8690e:	700a      	strb	r2, [r1, #0]
   86910:	2101      	movs	r1, #1
   86912:	4608      	mov	r0, r1
   86914:	4770      	bx	lr
   86916:	238a      	movs	r3, #138	; 0x8a
   86918:	f04f 31ff 	mov.w	r1, #4294967295
   8691c:	6003      	str	r3, [r0, #0]
   8691e:	e7f8      	b.n	86912 <__ascii_wctomb+0xa>

00086920 <_write_r>:
   86920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86922:	460e      	mov	r6, r1
   86924:	2500      	movs	r5, #0
   86926:	4c08      	ldr	r4, [pc, #32]	; (86948 <_write_r+0x28>)
   86928:	4611      	mov	r1, r2
   8692a:	4607      	mov	r7, r0
   8692c:	461a      	mov	r2, r3
   8692e:	4630      	mov	r0, r6
   86930:	6025      	str	r5, [r4, #0]
   86932:	f7fb fe99 	bl	82668 <_write>
   86936:	1c43      	adds	r3, r0, #1
   86938:	d000      	beq.n	8693c <_write_r+0x1c>
   8693a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8693c:	6823      	ldr	r3, [r4, #0]
   8693e:	2b00      	cmp	r3, #0
   86940:	d0fb      	beq.n	8693a <_write_r+0x1a>
   86942:	603b      	str	r3, [r7, #0]
   86944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86946:	bf00      	nop
   86948:	2007aec4 	.word	0x2007aec4

0008694c <__register_exitproc>:
   8694c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86950:	4d2c      	ldr	r5, [pc, #176]	; (86a04 <__register_exitproc+0xb8>)
   86952:	4606      	mov	r6, r0
   86954:	6828      	ldr	r0, [r5, #0]
   86956:	4698      	mov	r8, r3
   86958:	460f      	mov	r7, r1
   8695a:	4691      	mov	r9, r2
   8695c:	f7ff f954 	bl	85c08 <__retarget_lock_acquire_recursive>
   86960:	4b29      	ldr	r3, [pc, #164]	; (86a08 <__register_exitproc+0xbc>)
   86962:	681c      	ldr	r4, [r3, #0]
   86964:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   86968:	2b00      	cmp	r3, #0
   8696a:	d03e      	beq.n	869ea <__register_exitproc+0x9e>
   8696c:	685a      	ldr	r2, [r3, #4]
   8696e:	2a1f      	cmp	r2, #31
   86970:	dc1c      	bgt.n	869ac <__register_exitproc+0x60>
   86972:	f102 0e01 	add.w	lr, r2, #1
   86976:	b176      	cbz	r6, 86996 <__register_exitproc+0x4a>
   86978:	2101      	movs	r1, #1
   8697a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8697e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   86982:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   86986:	4091      	lsls	r1, r2
   86988:	4308      	orrs	r0, r1
   8698a:	2e02      	cmp	r6, #2
   8698c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   86990:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   86994:	d023      	beq.n	869de <__register_exitproc+0x92>
   86996:	3202      	adds	r2, #2
   86998:	f8c3 e004 	str.w	lr, [r3, #4]
   8699c:	6828      	ldr	r0, [r5, #0]
   8699e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   869a2:	f7ff f933 	bl	85c0c <__retarget_lock_release_recursive>
   869a6:	2000      	movs	r0, #0
   869a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   869ac:	4b17      	ldr	r3, [pc, #92]	; (86a0c <__register_exitproc+0xc0>)
   869ae:	b30b      	cbz	r3, 869f4 <__register_exitproc+0xa8>
   869b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   869b4:	f7ff f9a4 	bl	85d00 <malloc>
   869b8:	4603      	mov	r3, r0
   869ba:	b1d8      	cbz	r0, 869f4 <__register_exitproc+0xa8>
   869bc:	2000      	movs	r0, #0
   869be:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   869c2:	f04f 0e01 	mov.w	lr, #1
   869c6:	6058      	str	r0, [r3, #4]
   869c8:	6019      	str	r1, [r3, #0]
   869ca:	4602      	mov	r2, r0
   869cc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   869d0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   869d4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   869d8:	2e00      	cmp	r6, #0
   869da:	d0dc      	beq.n	86996 <__register_exitproc+0x4a>
   869dc:	e7cc      	b.n	86978 <__register_exitproc+0x2c>
   869de:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   869e2:	4301      	orrs	r1, r0
   869e4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   869e8:	e7d5      	b.n	86996 <__register_exitproc+0x4a>
   869ea:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   869ee:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   869f2:	e7bb      	b.n	8696c <__register_exitproc+0x20>
   869f4:	6828      	ldr	r0, [r5, #0]
   869f6:	f7ff f909 	bl	85c0c <__retarget_lock_release_recursive>
   869fa:	f04f 30ff 	mov.w	r0, #4294967295
   869fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   86a02:	bf00      	nop
   86a04:	200705d8 	.word	0x200705d8
   86a08:	00087000 	.word	0x00087000
   86a0c:	00085d01 	.word	0x00085d01

00086a10 <_close_r>:
   86a10:	b538      	push	{r3, r4, r5, lr}
   86a12:	2300      	movs	r3, #0
   86a14:	4c06      	ldr	r4, [pc, #24]	; (86a30 <_close_r+0x20>)
   86a16:	4605      	mov	r5, r0
   86a18:	4608      	mov	r0, r1
   86a1a:	6023      	str	r3, [r4, #0]
   86a1c:	f7fc fa88 	bl	82f30 <_close>
   86a20:	1c43      	adds	r3, r0, #1
   86a22:	d000      	beq.n	86a26 <_close_r+0x16>
   86a24:	bd38      	pop	{r3, r4, r5, pc}
   86a26:	6823      	ldr	r3, [r4, #0]
   86a28:	2b00      	cmp	r3, #0
   86a2a:	d0fb      	beq.n	86a24 <_close_r+0x14>
   86a2c:	602b      	str	r3, [r5, #0]
   86a2e:	bd38      	pop	{r3, r4, r5, pc}
   86a30:	2007aec4 	.word	0x2007aec4

00086a34 <_fclose_r>:
   86a34:	b570      	push	{r4, r5, r6, lr}
   86a36:	b159      	cbz	r1, 86a50 <_fclose_r+0x1c>
   86a38:	4605      	mov	r5, r0
   86a3a:	460c      	mov	r4, r1
   86a3c:	b110      	cbz	r0, 86a44 <_fclose_r+0x10>
   86a3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86a40:	2b00      	cmp	r3, #0
   86a42:	d03c      	beq.n	86abe <_fclose_r+0x8a>
   86a44:	6e63      	ldr	r3, [r4, #100]	; 0x64
   86a46:	07d8      	lsls	r0, r3, #31
   86a48:	d505      	bpl.n	86a56 <_fclose_r+0x22>
   86a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86a4e:	b92b      	cbnz	r3, 86a5c <_fclose_r+0x28>
   86a50:	2600      	movs	r6, #0
   86a52:	4630      	mov	r0, r6
   86a54:	bd70      	pop	{r4, r5, r6, pc}
   86a56:	89a3      	ldrh	r3, [r4, #12]
   86a58:	0599      	lsls	r1, r3, #22
   86a5a:	d53c      	bpl.n	86ad6 <_fclose_r+0xa2>
   86a5c:	4621      	mov	r1, r4
   86a5e:	4628      	mov	r0, r5
   86a60:	f7fe fc1e 	bl	852a0 <__sflush_r>
   86a64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86a66:	4606      	mov	r6, r0
   86a68:	b133      	cbz	r3, 86a78 <_fclose_r+0x44>
   86a6a:	69e1      	ldr	r1, [r4, #28]
   86a6c:	4628      	mov	r0, r5
   86a6e:	4798      	blx	r3
   86a70:	2800      	cmp	r0, #0
   86a72:	bfb8      	it	lt
   86a74:	f04f 36ff 	movlt.w	r6, #4294967295
   86a78:	89a3      	ldrh	r3, [r4, #12]
   86a7a:	061a      	lsls	r2, r3, #24
   86a7c:	d422      	bmi.n	86ac4 <_fclose_r+0x90>
   86a7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86a80:	b141      	cbz	r1, 86a94 <_fclose_r+0x60>
   86a82:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86a86:	4299      	cmp	r1, r3
   86a88:	d002      	beq.n	86a90 <_fclose_r+0x5c>
   86a8a:	4628      	mov	r0, r5
   86a8c:	f7fe fe22 	bl	856d4 <_free_r>
   86a90:	2300      	movs	r3, #0
   86a92:	6323      	str	r3, [r4, #48]	; 0x30
   86a94:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86a96:	b121      	cbz	r1, 86aa2 <_fclose_r+0x6e>
   86a98:	4628      	mov	r0, r5
   86a9a:	f7fe fe1b 	bl	856d4 <_free_r>
   86a9e:	2300      	movs	r3, #0
   86aa0:	6463      	str	r3, [r4, #68]	; 0x44
   86aa2:	f7fe fd21 	bl	854e8 <__sfp_lock_acquire>
   86aa6:	2200      	movs	r2, #0
   86aa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   86aaa:	81a2      	strh	r2, [r4, #12]
   86aac:	07db      	lsls	r3, r3, #31
   86aae:	d50e      	bpl.n	86ace <_fclose_r+0x9a>
   86ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86ab2:	f7ff f8a7 	bl	85c04 <__retarget_lock_close_recursive>
   86ab6:	f7fe fd1d 	bl	854f4 <__sfp_lock_release>
   86aba:	4630      	mov	r0, r6
   86abc:	bd70      	pop	{r4, r5, r6, pc}
   86abe:	f7fe fce3 	bl	85488 <__sinit>
   86ac2:	e7bf      	b.n	86a44 <_fclose_r+0x10>
   86ac4:	6921      	ldr	r1, [r4, #16]
   86ac6:	4628      	mov	r0, r5
   86ac8:	f7fe fe04 	bl	856d4 <_free_r>
   86acc:	e7d7      	b.n	86a7e <_fclose_r+0x4a>
   86ace:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86ad0:	f7ff f89c 	bl	85c0c <__retarget_lock_release_recursive>
   86ad4:	e7ec      	b.n	86ab0 <_fclose_r+0x7c>
   86ad6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86ad8:	f7ff f896 	bl	85c08 <__retarget_lock_acquire_recursive>
   86adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   86ae0:	2b00      	cmp	r3, #0
   86ae2:	d1bb      	bne.n	86a5c <_fclose_r+0x28>
   86ae4:	6e66      	ldr	r6, [r4, #100]	; 0x64
   86ae6:	f016 0601 	ands.w	r6, r6, #1
   86aea:	d1b1      	bne.n	86a50 <_fclose_r+0x1c>
   86aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   86aee:	f7ff f88d 	bl	85c0c <__retarget_lock_release_recursive>
   86af2:	4630      	mov	r0, r6
   86af4:	bd70      	pop	{r4, r5, r6, pc}
   86af6:	bf00      	nop

00086af8 <_fstat_r>:
   86af8:	b570      	push	{r4, r5, r6, lr}
   86afa:	460d      	mov	r5, r1
   86afc:	2300      	movs	r3, #0
   86afe:	4c07      	ldr	r4, [pc, #28]	; (86b1c <_fstat_r+0x24>)
   86b00:	4606      	mov	r6, r0
   86b02:	4611      	mov	r1, r2
   86b04:	4628      	mov	r0, r5
   86b06:	6023      	str	r3, [r4, #0]
   86b08:	f7fc fa15 	bl	82f36 <_fstat>
   86b0c:	1c43      	adds	r3, r0, #1
   86b0e:	d000      	beq.n	86b12 <_fstat_r+0x1a>
   86b10:	bd70      	pop	{r4, r5, r6, pc}
   86b12:	6823      	ldr	r3, [r4, #0]
   86b14:	2b00      	cmp	r3, #0
   86b16:	d0fb      	beq.n	86b10 <_fstat_r+0x18>
   86b18:	6033      	str	r3, [r6, #0]
   86b1a:	bd70      	pop	{r4, r5, r6, pc}
   86b1c:	2007aec4 	.word	0x2007aec4

00086b20 <_isatty_r>:
   86b20:	b538      	push	{r3, r4, r5, lr}
   86b22:	2300      	movs	r3, #0
   86b24:	4c06      	ldr	r4, [pc, #24]	; (86b40 <_isatty_r+0x20>)
   86b26:	4605      	mov	r5, r0
   86b28:	4608      	mov	r0, r1
   86b2a:	6023      	str	r3, [r4, #0]
   86b2c:	f7fc fa08 	bl	82f40 <_isatty>
   86b30:	1c43      	adds	r3, r0, #1
   86b32:	d000      	beq.n	86b36 <_isatty_r+0x16>
   86b34:	bd38      	pop	{r3, r4, r5, pc}
   86b36:	6823      	ldr	r3, [r4, #0]
   86b38:	2b00      	cmp	r3, #0
   86b3a:	d0fb      	beq.n	86b34 <_isatty_r+0x14>
   86b3c:	602b      	str	r3, [r5, #0]
   86b3e:	bd38      	pop	{r3, r4, r5, pc}
   86b40:	2007aec4 	.word	0x2007aec4

00086b44 <_lseek_r>:
   86b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86b46:	460e      	mov	r6, r1
   86b48:	2500      	movs	r5, #0
   86b4a:	4c08      	ldr	r4, [pc, #32]	; (86b6c <_lseek_r+0x28>)
   86b4c:	4611      	mov	r1, r2
   86b4e:	4607      	mov	r7, r0
   86b50:	461a      	mov	r2, r3
   86b52:	4630      	mov	r0, r6
   86b54:	6025      	str	r5, [r4, #0]
   86b56:	f7fc f9f5 	bl	82f44 <_lseek>
   86b5a:	1c43      	adds	r3, r0, #1
   86b5c:	d000      	beq.n	86b60 <_lseek_r+0x1c>
   86b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86b60:	6823      	ldr	r3, [r4, #0]
   86b62:	2b00      	cmp	r3, #0
   86b64:	d0fb      	beq.n	86b5e <_lseek_r+0x1a>
   86b66:	603b      	str	r3, [r7, #0]
   86b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86b6a:	bf00      	nop
   86b6c:	2007aec4 	.word	0x2007aec4

00086b70 <_read_r>:
   86b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86b72:	460e      	mov	r6, r1
   86b74:	2500      	movs	r5, #0
   86b76:	4c08      	ldr	r4, [pc, #32]	; (86b98 <_read_r+0x28>)
   86b78:	4611      	mov	r1, r2
   86b7a:	4607      	mov	r7, r0
   86b7c:	461a      	mov	r2, r3
   86b7e:	4630      	mov	r0, r6
   86b80:	6025      	str	r5, [r4, #0]
   86b82:	f7f9 fbb7 	bl	802f4 <_read>
   86b86:	1c43      	adds	r3, r0, #1
   86b88:	d000      	beq.n	86b8c <_read_r+0x1c>
   86b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86b8c:	6823      	ldr	r3, [r4, #0]
   86b8e:	2b00      	cmp	r3, #0
   86b90:	d0fb      	beq.n	86b8a <_read_r+0x1a>
   86b92:	603b      	str	r3, [r7, #0]
   86b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86b96:	bf00      	nop
   86b98:	2007aec4 	.word	0x2007aec4

00086b9c <__aeabi_uldivmod>:
   86b9c:	b953      	cbnz	r3, 86bb4 <__aeabi_uldivmod+0x18>
   86b9e:	b94a      	cbnz	r2, 86bb4 <__aeabi_uldivmod+0x18>
   86ba0:	2900      	cmp	r1, #0
   86ba2:	bf08      	it	eq
   86ba4:	2800      	cmpeq	r0, #0
   86ba6:	bf1c      	itt	ne
   86ba8:	f04f 31ff 	movne.w	r1, #4294967295
   86bac:	f04f 30ff 	movne.w	r0, #4294967295
   86bb0:	f000 b97a 	b.w	86ea8 <__aeabi_idiv0>
   86bb4:	f1ad 0c08 	sub.w	ip, sp, #8
   86bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   86bbc:	f000 f806 	bl	86bcc <__udivmoddi4>
   86bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
   86bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86bc8:	b004      	add	sp, #16
   86bca:	4770      	bx	lr

00086bcc <__udivmoddi4>:
   86bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86bd0:	468c      	mov	ip, r1
   86bd2:	460e      	mov	r6, r1
   86bd4:	4604      	mov	r4, r0
   86bd6:	9d08      	ldr	r5, [sp, #32]
   86bd8:	2b00      	cmp	r3, #0
   86bda:	d150      	bne.n	86c7e <__udivmoddi4+0xb2>
   86bdc:	428a      	cmp	r2, r1
   86bde:	4617      	mov	r7, r2
   86be0:	d96c      	bls.n	86cbc <__udivmoddi4+0xf0>
   86be2:	fab2 fe82 	clz	lr, r2
   86be6:	f1be 0f00 	cmp.w	lr, #0
   86bea:	d00b      	beq.n	86c04 <__udivmoddi4+0x38>
   86bec:	f1ce 0c20 	rsb	ip, lr, #32
   86bf0:	fa01 f60e 	lsl.w	r6, r1, lr
   86bf4:	fa20 fc0c 	lsr.w	ip, r0, ip
   86bf8:	fa02 f70e 	lsl.w	r7, r2, lr
   86bfc:	ea4c 0c06 	orr.w	ip, ip, r6
   86c00:	fa00 f40e 	lsl.w	r4, r0, lr
   86c04:	0c3a      	lsrs	r2, r7, #16
   86c06:	fbbc f9f2 	udiv	r9, ip, r2
   86c0a:	b2bb      	uxth	r3, r7
   86c0c:	fb02 cc19 	mls	ip, r2, r9, ip
   86c10:	fb09 fa03 	mul.w	sl, r9, r3
   86c14:	ea4f 4814 	mov.w	r8, r4, lsr #16
   86c18:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   86c1c:	45b2      	cmp	sl, r6
   86c1e:	d90a      	bls.n	86c36 <__udivmoddi4+0x6a>
   86c20:	19f6      	adds	r6, r6, r7
   86c22:	f109 31ff 	add.w	r1, r9, #4294967295
   86c26:	f080 8125 	bcs.w	86e74 <__udivmoddi4+0x2a8>
   86c2a:	45b2      	cmp	sl, r6
   86c2c:	f240 8122 	bls.w	86e74 <__udivmoddi4+0x2a8>
   86c30:	f1a9 0902 	sub.w	r9, r9, #2
   86c34:	443e      	add	r6, r7
   86c36:	eba6 060a 	sub.w	r6, r6, sl
   86c3a:	fbb6 f0f2 	udiv	r0, r6, r2
   86c3e:	fb02 6610 	mls	r6, r2, r0, r6
   86c42:	fb00 f303 	mul.w	r3, r0, r3
   86c46:	b2a4      	uxth	r4, r4
   86c48:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   86c4c:	42a3      	cmp	r3, r4
   86c4e:	d909      	bls.n	86c64 <__udivmoddi4+0x98>
   86c50:	19e4      	adds	r4, r4, r7
   86c52:	f100 32ff 	add.w	r2, r0, #4294967295
   86c56:	f080 810b 	bcs.w	86e70 <__udivmoddi4+0x2a4>
   86c5a:	42a3      	cmp	r3, r4
   86c5c:	f240 8108 	bls.w	86e70 <__udivmoddi4+0x2a4>
   86c60:	3802      	subs	r0, #2
   86c62:	443c      	add	r4, r7
   86c64:	2100      	movs	r1, #0
   86c66:	1ae4      	subs	r4, r4, r3
   86c68:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86c6c:	2d00      	cmp	r5, #0
   86c6e:	d062      	beq.n	86d36 <__udivmoddi4+0x16a>
   86c70:	2300      	movs	r3, #0
   86c72:	fa24 f40e 	lsr.w	r4, r4, lr
   86c76:	602c      	str	r4, [r5, #0]
   86c78:	606b      	str	r3, [r5, #4]
   86c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86c7e:	428b      	cmp	r3, r1
   86c80:	d907      	bls.n	86c92 <__udivmoddi4+0xc6>
   86c82:	2d00      	cmp	r5, #0
   86c84:	d055      	beq.n	86d32 <__udivmoddi4+0x166>
   86c86:	2100      	movs	r1, #0
   86c88:	e885 0041 	stmia.w	r5, {r0, r6}
   86c8c:	4608      	mov	r0, r1
   86c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86c92:	fab3 f183 	clz	r1, r3
   86c96:	2900      	cmp	r1, #0
   86c98:	f040 808f 	bne.w	86dba <__udivmoddi4+0x1ee>
   86c9c:	42b3      	cmp	r3, r6
   86c9e:	d302      	bcc.n	86ca6 <__udivmoddi4+0xda>
   86ca0:	4282      	cmp	r2, r0
   86ca2:	f200 80fc 	bhi.w	86e9e <__udivmoddi4+0x2d2>
   86ca6:	1a84      	subs	r4, r0, r2
   86ca8:	eb66 0603 	sbc.w	r6, r6, r3
   86cac:	2001      	movs	r0, #1
   86cae:	46b4      	mov	ip, r6
   86cb0:	2d00      	cmp	r5, #0
   86cb2:	d040      	beq.n	86d36 <__udivmoddi4+0x16a>
   86cb4:	e885 1010 	stmia.w	r5, {r4, ip}
   86cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86cbc:	b912      	cbnz	r2, 86cc4 <__udivmoddi4+0xf8>
   86cbe:	2701      	movs	r7, #1
   86cc0:	fbb7 f7f2 	udiv	r7, r7, r2
   86cc4:	fab7 fe87 	clz	lr, r7
   86cc8:	f1be 0f00 	cmp.w	lr, #0
   86ccc:	d135      	bne.n	86d3a <__udivmoddi4+0x16e>
   86cce:	2101      	movs	r1, #1
   86cd0:	1bf6      	subs	r6, r6, r7
   86cd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86cd6:	fa1f f887 	uxth.w	r8, r7
   86cda:	fbb6 f2fc 	udiv	r2, r6, ip
   86cde:	fb0c 6612 	mls	r6, ip, r2, r6
   86ce2:	fb08 f002 	mul.w	r0, r8, r2
   86ce6:	0c23      	lsrs	r3, r4, #16
   86ce8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   86cec:	42b0      	cmp	r0, r6
   86cee:	d907      	bls.n	86d00 <__udivmoddi4+0x134>
   86cf0:	19f6      	adds	r6, r6, r7
   86cf2:	f102 33ff 	add.w	r3, r2, #4294967295
   86cf6:	d202      	bcs.n	86cfe <__udivmoddi4+0x132>
   86cf8:	42b0      	cmp	r0, r6
   86cfa:	f200 80d2 	bhi.w	86ea2 <__udivmoddi4+0x2d6>
   86cfe:	461a      	mov	r2, r3
   86d00:	1a36      	subs	r6, r6, r0
   86d02:	fbb6 f0fc 	udiv	r0, r6, ip
   86d06:	fb0c 6610 	mls	r6, ip, r0, r6
   86d0a:	fb08 f800 	mul.w	r8, r8, r0
   86d0e:	b2a3      	uxth	r3, r4
   86d10:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   86d14:	45a0      	cmp	r8, r4
   86d16:	d907      	bls.n	86d28 <__udivmoddi4+0x15c>
   86d18:	19e4      	adds	r4, r4, r7
   86d1a:	f100 33ff 	add.w	r3, r0, #4294967295
   86d1e:	d202      	bcs.n	86d26 <__udivmoddi4+0x15a>
   86d20:	45a0      	cmp	r8, r4
   86d22:	f200 80b9 	bhi.w	86e98 <__udivmoddi4+0x2cc>
   86d26:	4618      	mov	r0, r3
   86d28:	eba4 0408 	sub.w	r4, r4, r8
   86d2c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   86d30:	e79c      	b.n	86c6c <__udivmoddi4+0xa0>
   86d32:	4629      	mov	r1, r5
   86d34:	4628      	mov	r0, r5
   86d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86d3a:	fa07 f70e 	lsl.w	r7, r7, lr
   86d3e:	f1ce 0320 	rsb	r3, lr, #32
   86d42:	fa26 f203 	lsr.w	r2, r6, r3
   86d46:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   86d4a:	fbb2 f1fc 	udiv	r1, r2, ip
   86d4e:	fa1f f887 	uxth.w	r8, r7
   86d52:	fb0c 2211 	mls	r2, ip, r1, r2
   86d56:	fa06 f60e 	lsl.w	r6, r6, lr
   86d5a:	fa20 f303 	lsr.w	r3, r0, r3
   86d5e:	fb01 f908 	mul.w	r9, r1, r8
   86d62:	4333      	orrs	r3, r6
   86d64:	0c1e      	lsrs	r6, r3, #16
   86d66:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86d6a:	45b1      	cmp	r9, r6
   86d6c:	fa00 f40e 	lsl.w	r4, r0, lr
   86d70:	d909      	bls.n	86d86 <__udivmoddi4+0x1ba>
   86d72:	19f6      	adds	r6, r6, r7
   86d74:	f101 32ff 	add.w	r2, r1, #4294967295
   86d78:	f080 808c 	bcs.w	86e94 <__udivmoddi4+0x2c8>
   86d7c:	45b1      	cmp	r9, r6
   86d7e:	f240 8089 	bls.w	86e94 <__udivmoddi4+0x2c8>
   86d82:	3902      	subs	r1, #2
   86d84:	443e      	add	r6, r7
   86d86:	eba6 0609 	sub.w	r6, r6, r9
   86d8a:	fbb6 f0fc 	udiv	r0, r6, ip
   86d8e:	fb0c 6210 	mls	r2, ip, r0, r6
   86d92:	fb00 f908 	mul.w	r9, r0, r8
   86d96:	b29e      	uxth	r6, r3
   86d98:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   86d9c:	45b1      	cmp	r9, r6
   86d9e:	d907      	bls.n	86db0 <__udivmoddi4+0x1e4>
   86da0:	19f6      	adds	r6, r6, r7
   86da2:	f100 33ff 	add.w	r3, r0, #4294967295
   86da6:	d271      	bcs.n	86e8c <__udivmoddi4+0x2c0>
   86da8:	45b1      	cmp	r9, r6
   86daa:	d96f      	bls.n	86e8c <__udivmoddi4+0x2c0>
   86dac:	3802      	subs	r0, #2
   86dae:	443e      	add	r6, r7
   86db0:	eba6 0609 	sub.w	r6, r6, r9
   86db4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   86db8:	e78f      	b.n	86cda <__udivmoddi4+0x10e>
   86dba:	f1c1 0720 	rsb	r7, r1, #32
   86dbe:	fa22 f807 	lsr.w	r8, r2, r7
   86dc2:	408b      	lsls	r3, r1
   86dc4:	ea48 0303 	orr.w	r3, r8, r3
   86dc8:	fa26 f407 	lsr.w	r4, r6, r7
   86dcc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   86dd0:	fbb4 f9fe 	udiv	r9, r4, lr
   86dd4:	fa1f fc83 	uxth.w	ip, r3
   86dd8:	fb0e 4419 	mls	r4, lr, r9, r4
   86ddc:	408e      	lsls	r6, r1
   86dde:	fa20 f807 	lsr.w	r8, r0, r7
   86de2:	fb09 fa0c 	mul.w	sl, r9, ip
   86de6:	ea48 0806 	orr.w	r8, r8, r6
   86dea:	ea4f 4618 	mov.w	r6, r8, lsr #16
   86dee:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   86df2:	45a2      	cmp	sl, r4
   86df4:	fa02 f201 	lsl.w	r2, r2, r1
   86df8:	fa00 f601 	lsl.w	r6, r0, r1
   86dfc:	d908      	bls.n	86e10 <__udivmoddi4+0x244>
   86dfe:	18e4      	adds	r4, r4, r3
   86e00:	f109 30ff 	add.w	r0, r9, #4294967295
   86e04:	d244      	bcs.n	86e90 <__udivmoddi4+0x2c4>
   86e06:	45a2      	cmp	sl, r4
   86e08:	d942      	bls.n	86e90 <__udivmoddi4+0x2c4>
   86e0a:	f1a9 0902 	sub.w	r9, r9, #2
   86e0e:	441c      	add	r4, r3
   86e10:	eba4 040a 	sub.w	r4, r4, sl
   86e14:	fbb4 f0fe 	udiv	r0, r4, lr
   86e18:	fb0e 4410 	mls	r4, lr, r0, r4
   86e1c:	fb00 fc0c 	mul.w	ip, r0, ip
   86e20:	fa1f f888 	uxth.w	r8, r8
   86e24:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   86e28:	45a4      	cmp	ip, r4
   86e2a:	d907      	bls.n	86e3c <__udivmoddi4+0x270>
   86e2c:	18e4      	adds	r4, r4, r3
   86e2e:	f100 3eff 	add.w	lr, r0, #4294967295
   86e32:	d229      	bcs.n	86e88 <__udivmoddi4+0x2bc>
   86e34:	45a4      	cmp	ip, r4
   86e36:	d927      	bls.n	86e88 <__udivmoddi4+0x2bc>
   86e38:	3802      	subs	r0, #2
   86e3a:	441c      	add	r4, r3
   86e3c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   86e40:	fba0 8902 	umull	r8, r9, r0, r2
   86e44:	eba4 0c0c 	sub.w	ip, r4, ip
   86e48:	45cc      	cmp	ip, r9
   86e4a:	46c2      	mov	sl, r8
   86e4c:	46ce      	mov	lr, r9
   86e4e:	d315      	bcc.n	86e7c <__udivmoddi4+0x2b0>
   86e50:	d012      	beq.n	86e78 <__udivmoddi4+0x2ac>
   86e52:	b155      	cbz	r5, 86e6a <__udivmoddi4+0x29e>
   86e54:	ebb6 030a 	subs.w	r3, r6, sl
   86e58:	eb6c 060e 	sbc.w	r6, ip, lr
   86e5c:	fa06 f707 	lsl.w	r7, r6, r7
   86e60:	40cb      	lsrs	r3, r1
   86e62:	431f      	orrs	r7, r3
   86e64:	40ce      	lsrs	r6, r1
   86e66:	602f      	str	r7, [r5, #0]
   86e68:	606e      	str	r6, [r5, #4]
   86e6a:	2100      	movs	r1, #0
   86e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86e70:	4610      	mov	r0, r2
   86e72:	e6f7      	b.n	86c64 <__udivmoddi4+0x98>
   86e74:	4689      	mov	r9, r1
   86e76:	e6de      	b.n	86c36 <__udivmoddi4+0x6a>
   86e78:	4546      	cmp	r6, r8
   86e7a:	d2ea      	bcs.n	86e52 <__udivmoddi4+0x286>
   86e7c:	ebb8 0a02 	subs.w	sl, r8, r2
   86e80:	eb69 0e03 	sbc.w	lr, r9, r3
   86e84:	3801      	subs	r0, #1
   86e86:	e7e4      	b.n	86e52 <__udivmoddi4+0x286>
   86e88:	4670      	mov	r0, lr
   86e8a:	e7d7      	b.n	86e3c <__udivmoddi4+0x270>
   86e8c:	4618      	mov	r0, r3
   86e8e:	e78f      	b.n	86db0 <__udivmoddi4+0x1e4>
   86e90:	4681      	mov	r9, r0
   86e92:	e7bd      	b.n	86e10 <__udivmoddi4+0x244>
   86e94:	4611      	mov	r1, r2
   86e96:	e776      	b.n	86d86 <__udivmoddi4+0x1ba>
   86e98:	3802      	subs	r0, #2
   86e9a:	443c      	add	r4, r7
   86e9c:	e744      	b.n	86d28 <__udivmoddi4+0x15c>
   86e9e:	4608      	mov	r0, r1
   86ea0:	e706      	b.n	86cb0 <__udivmoddi4+0xe4>
   86ea2:	3a02      	subs	r2, #2
   86ea4:	443e      	add	r6, r7
   86ea6:	e72b      	b.n	86d00 <__udivmoddi4+0x134>

00086ea8 <__aeabi_idiv0>:
   86ea8:	4770      	bx	lr
   86eaa:	bf00      	nop
   86eac:	636c6577 	.word	0x636c6577
   86eb0:	0a656d6f 	.word	0x0a656d6f
   86eb4:	00000000 	.word	0x00000000
   86eb8:	00000001 	.word	0x00000001
   86ebc:	00000002 	.word	0x00000002
   86ec0:	00000004 	.word	0x00000004
   86ec4:	00000008 	.word	0x00000008
   86ec8:	00000010 	.word	0x00000010
   86ecc:	00000020 	.word	0x00000020
   86ed0:	00000040 	.word	0x00000040
   86ed4:	00000080 	.word	0x00000080
   86ed8:	00000100 	.word	0x00000100
   86edc:	00000200 	.word	0x00000200
   86ee0:	00000400 	.word	0x00000400
   86ee4:	454c4449 	.word	0x454c4449
   86ee8:	00000000 	.word	0x00000000
   86eec:	20726d54 	.word	0x20726d54
   86ef0:	00637653 	.word	0x00637653
   86ef4:	69727543 	.word	0x69727543
   86ef8:	00000065 	.word	0x00000065
   86efc:	74656f4e 	.word	0x74656f4e
   86f00:	00726568 	.word	0x00726568
   86f04:	73726946 	.word	0x73726946
   86f08:	75722074 	.word	0x75722074
   86f0c:	61202c6e 	.word	0x61202c6e
   86f10:	656c676e 	.word	0x656c676e
   86f14:	6425203a 	.word	0x6425203a
   86f18:	3a64202c 	.word	0x3a64202c
   86f1c:	00642520 	.word	0x00642520
   86f20:	72727543 	.word	0x72727543
   86f24:	20746e65 	.word	0x20746e65
   86f28:	3a736f70 	.word	0x3a736f70
   86f2c:	64252820 	.word	0x64252820
   86f30:	6425202c 	.word	0x6425202c
   86f34:	00000a29 	.word	0x00000a29
   86f38:	6c726145 	.word	0x6c726145
   86f3c:	20726569 	.word	0x20726569
   86f40:	3a736f70 	.word	0x3a736f70
   86f44:	64252820 	.word	0x64252820
   86f48:	6425202c 	.word	0x6425202c
   86f4c:	00000a29 	.word	0x00000a29
   86f50:	72726f63 	.word	0x72726f63
   86f54:	69746365 	.word	0x69746365
   86f58:	203a6e6f 	.word	0x203a6e6f
   86f5c:	202c6425 	.word	0x202c6425
   86f60:	25203a64 	.word	0x25203a64
   86f64:	00000a64 	.word	0x00000a64
   86f68:	656a624f 	.word	0x656a624f
   86f6c:	203a7463 	.word	0x203a7463
   86f70:	2c642528 	.word	0x2c642528
   86f74:	29642520 	.word	0x29642520
   86f78:	0000000a 	.word	0x0000000a
   86f7c:	736e6f43 	.word	0x736e6f43
   86f80:	20656c6f 	.word	0x20656c6f
   86f84:	64616572 	.word	0x64616572
   86f88:	00000a79 	.word	0x00000a79
   86f8c:	3d3d3d3d 	.word	0x3d3d3d3d
   86f90:	3d3d3d3d 	.word	0x3d3d3d3d
   86f94:	3d3d3d3d 	.word	0x3d3d3d3d
   86f98:	00000a3d 	.word	0x00000a3d
   86f9c:	6f746f6d 	.word	0x6f746f6d
   86fa0:	61745f72 	.word	0x61745f72
   86fa4:	00006b73 	.word	0x00006b73
   86fa8:	6e69616d 	.word	0x6e69616d
   86fac:	7361745f 	.word	0x7361745f
   86fb0:	0000006b 	.word	0x0000006b
   86fb4:	00000000 	.word	0x00000000

00086fb8 <atanhi>:
   86fb8:	0561bb4f 3fddac67 54442d18 3fe921fb     O.a.g..?.-DT.!.?
   86fc8:	d281f69b 3fef730b 54442d18 3ff921fb     .....s.?.-DT.!.?

00086fd8 <atanlo>:
   86fd8:	222f65e2 3c7a2b7f 33145c07 3c81a626     .e/".+z<.\.3&..<
   86fe8:	7af0cbbd 3c700788 33145c07 3c91a626     ...z..p<.\.3&..<
   86ff8:	74727173 00000000                       sqrt....

00087000 <_global_impure_ptr>:
   87000:	200701b0 33323130 37363534 42413938     ... 0123456789AB
   87010:	46454443 00000000 33323130 37363534     CDEF....01234567
   87020:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   87030:	0000296c                                l)..

00087034 <blanks.7217>:
   87034:	20202020 20202020 20202020 20202020                     

00087044 <zeroes.7218>:
   87044:	30303030 30303030 30303030 30303030     0000000000000000
   87054:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00087064 <_ctype_>:
   87064:	20202000 20202020 28282020 20282828     .         ((((( 
   87074:	20202020 20202020 20202020 20202020                     
   87084:	10108820 10101010 10101010 10101010      ...............
   87094:	04040410 04040404 10040404 10101010     ................
   870a4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   870b4:	01010101 01010101 01010101 10101010     ................
   870c4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   870d4:	02020202 02020202 02020202 10101010     ................
   870e4:	00000020 00000000 00000000 00000000      ...............
	...

00087168 <_init>:
   87168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8716a:	bf00      	nop
   8716c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8716e:	bc08      	pop	{r3}
   87170:	469e      	mov	lr, r3
   87172:	4770      	bx	lr

00087174 <__init_array_start>:
   87174:	00085281 	.word	0x00085281

00087178 <__frame_dummy_init_array_entry>:
   87178:	00080119                                ....

0008717c <_fini>:
   8717c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8717e:	bf00      	nop
   87180:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87182:	bc08      	pop	{r3}
   87184:	469e      	mov	lr, r3
   87186:	4770      	bx	lr

00087188 <__fini_array_start>:
   87188:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	200701a4 	.word	0x200701a4

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <packet_pos>:
	...
20070134:	20070b74 0000000a 00000008              t.. ........

20070140 <uxCriticalNesting>:
20070140:	aaaaaaaa                                ....

20070144 <xFreeBytesRemaining>:
20070144:	0000a000                                ....

20070148 <xNextTaskUnblockTime>:
20070148:	ffffffff                                ....

2007014c <k>:
2007014c:	00000002                                ....

20070150 <mock_positions>:
20070150:	00640032 00320078 0096008c 01040118     2.d.x.2.........

20070160 <pin_table>:
20070160:	5c390908 5758591d 675d5556 00003b68     ..9\.YXWVU]gh;..
20070170:	00000000 0e3a0000 6261600f 07696663     ......:..`abcfi.
20070180:	4342416a 47464544 14134948 50515253     jABCDEFGHI..SRQP
20070190:	4c4d4e4f 18102e35 04061617 32310203     ONML5.........12
200701a0:	00013433                                         34

200701a2 <g_interrupt_enabled>:
200701a2:	09000001                                         ..

200701a4 <SystemCoreClock>:
200701a4:	003d0900                                ..=.

200701a8 <__fdlib_version>:
200701a8:	00000001                                ....

200701ac <_impure_ptr>:
200701ac:	200701b0                                ... 

200701b0 <impure_data>:
200701b0:	00000000 2007049c 20070504 2007056c     ....... ... l.. 
	...
20070258:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070268:	0005deec 0000000b 00000000 00000000     ................
	...

200705d8 <__atexit_recursive_mutex>:
200705d8:	2007aea0                                ... 

200705dc <__global_locale>:
200705dc:	00000043 00000000 00000000 00000000     C...............
	...
200705fc:	00000043 00000000 00000000 00000000     C...............
	...
2007061c:	00000043 00000000 00000000 00000000     C...............
	...
2007063c:	00000043 00000000 00000000 00000000     C...............
	...
2007065c:	00000043 00000000 00000000 00000000     C...............
	...
2007067c:	00000043 00000000 00000000 00000000     C...............
	...
2007069c:	00000043 00000000 00000000 00000000     C...............
	...
200706bc:	00086909 00086255 00000000 00087064     .i..Ub......dp..
200706cc:	00087060 00086eb4 00086eb4 00086eb4     `p...n...n...n..
200706dc:	00086eb4 00086eb4 00086eb4 00086eb4     .n...n...n...n..
200706ec:	00086eb4 00086eb4 ffffffff ffffffff     .n...n..........
200706fc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
20070724:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070748 <__malloc_av_>:
	...
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 
20070ae0:	20070ad8 20070ad8 20070ae0 20070ae0     ... ... ... ... 
20070af0:	20070ae8 20070ae8 20070af0 20070af0     ... ... ... ... 
20070b00:	20070af8 20070af8 20070b00 20070b00     ... ... ... ... 
20070b10:	20070b08 20070b08 20070b10 20070b10     ... ... ... ... 
20070b20:	20070b18 20070b18 20070b20 20070b20     ... ...  ..  .. 
20070b30:	20070b28 20070b28 20070b30 20070b30     (.. (.. 0.. 0.. 
20070b40:	20070b38 20070b38 20070b40 20070b40     8.. 8.. @.. @.. 

20070b50 <__malloc_sbrk_base>:
20070b50:	ffffffff                                ....

20070b54 <__malloc_trim_threshold>:
20070b54:	00020000                                ....
