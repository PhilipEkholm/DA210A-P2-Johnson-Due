
johnson.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003f1c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083f1c  00083f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b24  20070000  00083f24  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001fc  20070b24  00084a48  00020b24  2**2
                  ALLOC
  4 .stack        00002000  20070d20  00084c44  00020b24  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b24  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b4d  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b53e  00000000  00000000  00020ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000409e  00000000  00000000  0003c0e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00005de0  00000000  00000000  00040182  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cc0  00000000  00000000  00045f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000c50  00000000  00000000  00046c22  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001b73f  00000000  00000000  00047872  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001385f  00000000  00000000  00062fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00069093  00000000  00000000  00076810  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002840  00000000  00000000  000df8a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	20 2d 07 20 bd 0d 08 00 b9 0d 08 00 b9 0d 08 00      -. ............
   80010:	b9 0d 08 00 b9 0d 08 00 b9 0d 08 00 00 00 00 00     ................
	...
   8002c:	15 02 08 00 b9 0d 08 00 00 00 00 00 4d 02 08 00     ............M...
   8003c:	89 02 08 00 b9 0d 08 00 b9 0d 08 00 b9 0d 08 00     ................
   8004c:	b9 0d 08 00 b9 0d 08 00 b9 0d 08 00 b9 0d 08 00     ................
   8005c:	b9 0d 08 00 b9 0d 08 00 b9 0d 08 00 00 00 00 00     ................
   8006c:	2d 0c 08 00 41 0c 08 00 55 0c 08 00 69 0c 08 00     -...A...U...i...
	...
   80084:	b5 04 08 00 b9 0d 08 00 b9 0d 08 00 b9 0d 08 00     ................
   80094:	b9 0d 08 00 b9 0d 08 00 b9 0d 08 00 b9 0d 08 00     ................
   800a4:	00 00 00 00 b9 0d 08 00 b9 0d 08 00 b9 0d 08 00     ................
   800b4:	b9 0d 08 00 b9 0d 08 00 b9 0d 08 00 b9 0d 08 00     ................
   800c4:	b9 0d 08 00 b9 0d 08 00 b9 0d 08 00 b9 0d 08 00     ................
   800d4:	b9 0d 08 00 b9 0d 08 00 b9 0d 08 00 b9 0d 08 00     ................
   800e4:	b9 0d 08 00 b9 0d 08 00 b9 0d 08 00 b9 0d 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b24 	.word	0x20070b24
   80110:	00000000 	.word	0x00000000
   80114:	00083f24 	.word	0x00083f24

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00083f24 	.word	0x00083f24
   80154:	20070b28 	.word	0x20070b28
   80158:	00083f24 	.word	0x00083f24
   8015c:	00000000 	.word	0x00000000

00080160 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80164:	b980      	cbnz	r0, 80188 <_read+0x28>
   80166:	460c      	mov	r4, r1
   80168:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8016a:	2a00      	cmp	r2, #0
   8016c:	dd0f      	ble.n	8018e <_read+0x2e>
   8016e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80170:	4e08      	ldr	r6, [pc, #32]	; (80194 <_read+0x34>)
   80172:	4d09      	ldr	r5, [pc, #36]	; (80198 <_read+0x38>)
   80174:	6830      	ldr	r0, [r6, #0]
   80176:	4621      	mov	r1, r4
   80178:	682b      	ldr	r3, [r5, #0]
   8017a:	4798      	blx	r3
		ptr++;
   8017c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8017e:	42bc      	cmp	r4, r7
   80180:	d1f8      	bne.n	80174 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80182:	4640      	mov	r0, r8
   80184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80188:	f04f 38ff 	mov.w	r8, #4294967295
   8018c:	e7f9      	b.n	80182 <_read+0x22>
	for (; len > 0; --len) {
   8018e:	4680      	mov	r8, r0
   80190:	e7f7      	b.n	80182 <_read+0x22>
   80192:	bf00      	nop
   80194:	20070d18 	.word	0x20070d18
   80198:	20070d10 	.word	0x20070d10

0008019c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8019c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8019e:	0189      	lsls	r1, r1, #6
   801a0:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   801a2:	2402      	movs	r4, #2
   801a4:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   801a6:	f04f 31ff 	mov.w	r1, #4294967295
   801aa:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   801ac:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   801ae:	605a      	str	r2, [r3, #4]
}
   801b0:	bc10      	pop	{r4}
   801b2:	4770      	bx	lr

000801b4 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   801b4:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   801b8:	4770      	bx	lr

000801ba <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   801ba:	0189      	lsls	r1, r1, #6
   801bc:	2305      	movs	r3, #5
   801be:	5043      	str	r3, [r0, r1]
   801c0:	4770      	bx	lr

000801c2 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   801c2:	0189      	lsls	r1, r1, #6
   801c4:	2302      	movs	r3, #2
   801c6:	5043      	str	r3, [r0, r1]
   801c8:	4770      	bx	lr

000801ca <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   801ca:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   801ce:	6908      	ldr	r0, [r1, #16]
}
   801d0:	4770      	bx	lr

000801d2 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   801d2:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   801d4:	685a      	ldr	r2, [r3, #4]
   801d6:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   801d8:	6842      	ldr	r2, [r0, #4]
   801da:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   801dc:	685a      	ldr	r2, [r3, #4]
   801de:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   801e0:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   801e2:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   801e4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   801e6:	6803      	ldr	r3, [r0, #0]
   801e8:	3301      	adds	r3, #1
   801ea:	6003      	str	r3, [r0, #0]
   801ec:	4770      	bx	lr

000801ee <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   801ee:	6843      	ldr	r3, [r0, #4]
   801f0:	6882      	ldr	r2, [r0, #8]
   801f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   801f4:	6883      	ldr	r3, [r0, #8]
   801f6:	6842      	ldr	r2, [r0, #4]
   801f8:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   801fa:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   801fc:	685a      	ldr	r2, [r3, #4]
   801fe:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80200:	bf04      	itt	eq
   80202:	6882      	ldreq	r2, [r0, #8]
   80204:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80206:	2200      	movs	r2, #0
   80208:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8020a:	681a      	ldr	r2, [r3, #0]
   8020c:	3a01      	subs	r2, #1
   8020e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80210:	6818      	ldr	r0, [r3, #0]
}
   80212:	4770      	bx	lr

00080214 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80214:	4b06      	ldr	r3, [pc, #24]	; (80230 <pxCurrentTCBConst2>)
   80216:	6819      	ldr	r1, [r3, #0]
   80218:	6808      	ldr	r0, [r1, #0]
   8021a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8021e:	f380 8809 	msr	PSP, r0
   80222:	f04f 0000 	mov.w	r0, #0
   80226:	f380 8811 	msr	BASEPRI, r0
   8022a:	f04e 0e0d 	orr.w	lr, lr, #13
   8022e:	4770      	bx	lr

00080230 <pxCurrentTCBConst2>:
   80230:	20070b40 	.word	0x20070b40

00080234 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80234:	f3ef 8011 	mrs	r0, BASEPRI
   80238:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8023c:	f381 8811 	msr	BASEPRI, r1
   80240:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80242:	2000      	movs	r0, #0

00080244 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80244:	f380 8811 	msr	BASEPRI, r0
   80248:	4770      	bx	lr
	...

0008024c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8024c:	f3ef 8009 	mrs	r0, PSP
   80250:	4b0c      	ldr	r3, [pc, #48]	; (80284 <pxCurrentTCBConst>)
   80252:	681a      	ldr	r2, [r3, #0]
   80254:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80258:	6010      	str	r0, [r2, #0]
   8025a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8025e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80262:	f380 8811 	msr	BASEPRI, r0
   80266:	f000 f8b9 	bl	803dc <vTaskSwitchContext>
   8026a:	f04f 0000 	mov.w	r0, #0
   8026e:	f380 8811 	msr	BASEPRI, r0
   80272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80276:	6819      	ldr	r1, [r3, #0]
   80278:	6808      	ldr	r0, [r1, #0]
   8027a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8027e:	f380 8809 	msr	PSP, r0
   80282:	4770      	bx	lr

00080284 <pxCurrentTCBConst>:
   80284:	20070b40 	.word	0x20070b40

00080288 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80288:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8028a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8028e:	4b05      	ldr	r3, [pc, #20]	; (802a4 <SysTick_Handler+0x1c>)
   80290:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80292:	4b05      	ldr	r3, [pc, #20]	; (802a8 <SysTick_Handler+0x20>)
   80294:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80296:	4b05      	ldr	r3, [pc, #20]	; (802ac <SysTick_Handler+0x24>)
   80298:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8029a:	2000      	movs	r0, #0
   8029c:	4b04      	ldr	r3, [pc, #16]	; (802b0 <SysTick_Handler+0x28>)
   8029e:	4798      	blx	r3
   802a0:	bd08      	pop	{r3, pc}
   802a2:	bf00      	nop
   802a4:	e000ed04 	.word	0xe000ed04
   802a8:	00080235 	.word	0x00080235
   802ac:	000802b5 	.word	0x000802b5
   802b0:	00080245 	.word	0x00080245

000802b4 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   802b4:	4b3d      	ldr	r3, [pc, #244]	; (803ac <vTaskIncrementTick+0xf8>)
   802b6:	681b      	ldr	r3, [r3, #0]
   802b8:	2b00      	cmp	r3, #0
   802ba:	d16f      	bne.n	8039c <vTaskIncrementTick+0xe8>
{
   802bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   802c0:	4b3b      	ldr	r3, [pc, #236]	; (803b0 <vTaskIncrementTick+0xfc>)
   802c2:	681a      	ldr	r2, [r3, #0]
   802c4:	3201      	adds	r2, #1
   802c6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   802c8:	681b      	ldr	r3, [r3, #0]
   802ca:	b9ab      	cbnz	r3, 802f8 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   802cc:	4b39      	ldr	r3, [pc, #228]	; (803b4 <vTaskIncrementTick+0x100>)
   802ce:	681b      	ldr	r3, [r3, #0]
   802d0:	681b      	ldr	r3, [r3, #0]
   802d2:	2b00      	cmp	r3, #0
   802d4:	d128      	bne.n	80328 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   802d6:	4b37      	ldr	r3, [pc, #220]	; (803b4 <vTaskIncrementTick+0x100>)
   802d8:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   802da:	4a37      	ldr	r2, [pc, #220]	; (803b8 <vTaskIncrementTick+0x104>)
   802dc:	6810      	ldr	r0, [r2, #0]
   802de:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   802e0:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   802e2:	4936      	ldr	r1, [pc, #216]	; (803bc <vTaskIncrementTick+0x108>)
   802e4:	680a      	ldr	r2, [r1, #0]
   802e6:	3201      	adds	r2, #1
   802e8:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   802ea:	681b      	ldr	r3, [r3, #0]
   802ec:	681b      	ldr	r3, [r3, #0]
   802ee:	b9fb      	cbnz	r3, 80330 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   802f0:	f04f 32ff 	mov.w	r2, #4294967295
   802f4:	4b32      	ldr	r3, [pc, #200]	; (803c0 <vTaskIncrementTick+0x10c>)
   802f6:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   802f8:	4b2d      	ldr	r3, [pc, #180]	; (803b0 <vTaskIncrementTick+0xfc>)
   802fa:	681a      	ldr	r2, [r3, #0]
   802fc:	4b30      	ldr	r3, [pc, #192]	; (803c0 <vTaskIncrementTick+0x10c>)
   802fe:	681b      	ldr	r3, [r3, #0]
   80300:	429a      	cmp	r2, r3
   80302:	d350      	bcc.n	803a6 <vTaskIncrementTick+0xf2>
   80304:	4b2b      	ldr	r3, [pc, #172]	; (803b4 <vTaskIncrementTick+0x100>)
   80306:	681b      	ldr	r3, [r3, #0]
   80308:	681b      	ldr	r3, [r3, #0]
   8030a:	b1cb      	cbz	r3, 80340 <vTaskIncrementTick+0x8c>
   8030c:	4b29      	ldr	r3, [pc, #164]	; (803b4 <vTaskIncrementTick+0x100>)
   8030e:	681b      	ldr	r3, [r3, #0]
   80310:	68db      	ldr	r3, [r3, #12]
   80312:	68dc      	ldr	r4, [r3, #12]
   80314:	6863      	ldr	r3, [r4, #4]
   80316:	4a26      	ldr	r2, [pc, #152]	; (803b0 <vTaskIncrementTick+0xfc>)
   80318:	6812      	ldr	r2, [r2, #0]
   8031a:	4293      	cmp	r3, r2
   8031c:	d816      	bhi.n	8034c <vTaskIncrementTick+0x98>
   8031e:	4e29      	ldr	r6, [pc, #164]	; (803c4 <vTaskIncrementTick+0x110>)
   80320:	4f29      	ldr	r7, [pc, #164]	; (803c8 <vTaskIncrementTick+0x114>)
   80322:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 803d8 <vTaskIncrementTick+0x124>
   80326:	e02f      	b.n	80388 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80328:	4b28      	ldr	r3, [pc, #160]	; (803cc <vTaskIncrementTick+0x118>)
   8032a:	4798      	blx	r3
   8032c:	bf00      	nop
   8032e:	e7fd      	b.n	8032c <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80330:	4b20      	ldr	r3, [pc, #128]	; (803b4 <vTaskIncrementTick+0x100>)
   80332:	681b      	ldr	r3, [r3, #0]
   80334:	68db      	ldr	r3, [r3, #12]
   80336:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80338:	685a      	ldr	r2, [r3, #4]
   8033a:	4b21      	ldr	r3, [pc, #132]	; (803c0 <vTaskIncrementTick+0x10c>)
   8033c:	601a      	str	r2, [r3, #0]
   8033e:	e7db      	b.n	802f8 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   80340:	f04f 32ff 	mov.w	r2, #4294967295
   80344:	4b1e      	ldr	r3, [pc, #120]	; (803c0 <vTaskIncrementTick+0x10c>)
   80346:	601a      	str	r2, [r3, #0]
   80348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8034c:	4a1c      	ldr	r2, [pc, #112]	; (803c0 <vTaskIncrementTick+0x10c>)
   8034e:	6013      	str	r3, [r2, #0]
   80350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80354:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80356:	683b      	ldr	r3, [r7, #0]
   80358:	4298      	cmp	r0, r3
   8035a:	bf88      	it	hi
   8035c:	6038      	strhi	r0, [r7, #0]
   8035e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80362:	4629      	mov	r1, r5
   80364:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80368:	4b19      	ldr	r3, [pc, #100]	; (803d0 <vTaskIncrementTick+0x11c>)
   8036a:	4798      	blx	r3
   8036c:	4b11      	ldr	r3, [pc, #68]	; (803b4 <vTaskIncrementTick+0x100>)
   8036e:	681b      	ldr	r3, [r3, #0]
   80370:	681b      	ldr	r3, [r3, #0]
   80372:	2b00      	cmp	r3, #0
   80374:	d0e4      	beq.n	80340 <vTaskIncrementTick+0x8c>
   80376:	4b0f      	ldr	r3, [pc, #60]	; (803b4 <vTaskIncrementTick+0x100>)
   80378:	681b      	ldr	r3, [r3, #0]
   8037a:	68db      	ldr	r3, [r3, #12]
   8037c:	68dc      	ldr	r4, [r3, #12]
   8037e:	6863      	ldr	r3, [r4, #4]
   80380:	4a0b      	ldr	r2, [pc, #44]	; (803b0 <vTaskIncrementTick+0xfc>)
   80382:	6812      	ldr	r2, [r2, #0]
   80384:	4293      	cmp	r3, r2
   80386:	d8e1      	bhi.n	8034c <vTaskIncrementTick+0x98>
   80388:	1d25      	adds	r5, r4, #4
   8038a:	4628      	mov	r0, r5
   8038c:	47b0      	blx	r6
   8038e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80390:	2b00      	cmp	r3, #0
   80392:	d0df      	beq.n	80354 <vTaskIncrementTick+0xa0>
   80394:	f104 0018 	add.w	r0, r4, #24
   80398:	47b0      	blx	r6
   8039a:	e7db      	b.n	80354 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   8039c:	4a0d      	ldr	r2, [pc, #52]	; (803d4 <vTaskIncrementTick+0x120>)
   8039e:	6813      	ldr	r3, [r2, #0]
   803a0:	3301      	adds	r3, #1
   803a2:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   803a4:	4770      	bx	lr
   803a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   803aa:	bf00      	nop
   803ac:	20070bb4 	.word	0x20070bb4
   803b0:	20070bc4 	.word	0x20070bc4
   803b4:	20070b44 	.word	0x20070b44
   803b8:	20070b48 	.word	0x20070b48
   803bc:	20070bc0 	.word	0x20070bc0
   803c0:	2007012c 	.word	0x2007012c
   803c4:	000801ef 	.word	0x000801ef
   803c8:	20070bb8 	.word	0x20070bb8
   803cc:	00080235 	.word	0x00080235
   803d0:	000801d3 	.word	0x000801d3
   803d4:	20070bb0 	.word	0x20070bb0
   803d8:	20070b4c 	.word	0x20070b4c

000803dc <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   803dc:	4b21      	ldr	r3, [pc, #132]	; (80464 <vTaskSwitchContext+0x88>)
   803de:	681b      	ldr	r3, [r3, #0]
   803e0:	b9eb      	cbnz	r3, 8041e <vTaskSwitchContext+0x42>
{
   803e2:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   803e4:	4b20      	ldr	r3, [pc, #128]	; (80468 <vTaskSwitchContext+0x8c>)
   803e6:	681b      	ldr	r3, [r3, #0]
   803e8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   803ec:	009b      	lsls	r3, r3, #2
   803ee:	4a1f      	ldr	r2, [pc, #124]	; (8046c <vTaskSwitchContext+0x90>)
   803f0:	58d3      	ldr	r3, [r2, r3]
   803f2:	b9c3      	cbnz	r3, 80426 <vTaskSwitchContext+0x4a>
   803f4:	4b1c      	ldr	r3, [pc, #112]	; (80468 <vTaskSwitchContext+0x8c>)
   803f6:	681b      	ldr	r3, [r3, #0]
   803f8:	b16b      	cbz	r3, 80416 <vTaskSwitchContext+0x3a>
   803fa:	4a1b      	ldr	r2, [pc, #108]	; (80468 <vTaskSwitchContext+0x8c>)
   803fc:	491b      	ldr	r1, [pc, #108]	; (8046c <vTaskSwitchContext+0x90>)
   803fe:	6813      	ldr	r3, [r2, #0]
   80400:	3b01      	subs	r3, #1
   80402:	6013      	str	r3, [r2, #0]
   80404:	6813      	ldr	r3, [r2, #0]
   80406:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8040a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8040e:	b953      	cbnz	r3, 80426 <vTaskSwitchContext+0x4a>
   80410:	6813      	ldr	r3, [r2, #0]
   80412:	2b00      	cmp	r3, #0
   80414:	d1f3      	bne.n	803fe <vTaskSwitchContext+0x22>
   80416:	4b16      	ldr	r3, [pc, #88]	; (80470 <vTaskSwitchContext+0x94>)
   80418:	4798      	blx	r3
   8041a:	bf00      	nop
   8041c:	e7fd      	b.n	8041a <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   8041e:	2201      	movs	r2, #1
   80420:	4b14      	ldr	r3, [pc, #80]	; (80474 <vTaskSwitchContext+0x98>)
   80422:	601a      	str	r2, [r3, #0]
   80424:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   80426:	4b10      	ldr	r3, [pc, #64]	; (80468 <vTaskSwitchContext+0x8c>)
   80428:	681b      	ldr	r3, [r3, #0]
   8042a:	4a10      	ldr	r2, [pc, #64]	; (8046c <vTaskSwitchContext+0x90>)
   8042c:	0099      	lsls	r1, r3, #2
   8042e:	18c8      	adds	r0, r1, r3
   80430:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   80434:	6844      	ldr	r4, [r0, #4]
   80436:	6864      	ldr	r4, [r4, #4]
   80438:	6044      	str	r4, [r0, #4]
   8043a:	4419      	add	r1, r3
   8043c:	4602      	mov	r2, r0
   8043e:	3208      	adds	r2, #8
   80440:	4294      	cmp	r4, r2
   80442:	d009      	beq.n	80458 <vTaskSwitchContext+0x7c>
   80444:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80448:	4a08      	ldr	r2, [pc, #32]	; (8046c <vTaskSwitchContext+0x90>)
   8044a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8044e:	685b      	ldr	r3, [r3, #4]
   80450:	68da      	ldr	r2, [r3, #12]
   80452:	4b09      	ldr	r3, [pc, #36]	; (80478 <vTaskSwitchContext+0x9c>)
   80454:	601a      	str	r2, [r3, #0]
   80456:	bd10      	pop	{r4, pc}
   80458:	6860      	ldr	r0, [r4, #4]
   8045a:	4a04      	ldr	r2, [pc, #16]	; (8046c <vTaskSwitchContext+0x90>)
   8045c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   80460:	6050      	str	r0, [r2, #4]
   80462:	e7ef      	b.n	80444 <vTaskSwitchContext+0x68>
   80464:	20070bb4 	.word	0x20070bb4
   80468:	20070bb8 	.word	0x20070bb8
   8046c:	20070b4c 	.word	0x20070b4c
   80470:	00080235 	.word	0x00080235
   80474:	20070bbc 	.word	0x20070bbc
   80478:	20070b40 	.word	0x20070b40

0008047c <pin_mapper>:
					PIO_PA22_IDX,PIO_PA6_IDX,PIO_PA4_IDX,PIO_PA3_IDX,PIO_PA2_IDX,PIO_PB17_IDX,
					PIO_PB18_IDX,PIO_PB19_IDX,PIO_PB20_IDX};
					
uint8_t pin_mapper(uint8_t pin){
	return pin_table[pin];
}
   8047c:	4b01      	ldr	r3, [pc, #4]	; (80484 <pin_mapper+0x8>)
   8047e:	5c18      	ldrb	r0, [r3, r0]
   80480:	4770      	bx	lr
   80482:	bf00      	nop
   80484:	20070130 	.word	0x20070130

00080488 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80488:	6943      	ldr	r3, [r0, #20]
   8048a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8048e:	bf1d      	ittte	ne
   80490:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80494:	61c1      	strne	r1, [r0, #28]
	return 0;
   80496:	2000      	movne	r0, #0
		return 1;
   80498:	2001      	moveq	r0, #1
}
   8049a:	4770      	bx	lr

0008049c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8049c:	6943      	ldr	r3, [r0, #20]
   8049e:	f013 0f01 	tst.w	r3, #1
   804a2:	d005      	beq.n	804b0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   804a4:	6983      	ldr	r3, [r0, #24]
   804a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   804aa:	600b      	str	r3, [r1, #0]

	return 0;
   804ac:	2000      	movs	r0, #0
   804ae:	4770      	bx	lr
		return 1;
   804b0:	2001      	movs	r0, #1
}
   804b2:	4770      	bx	lr

000804b4 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   804b4:	b500      	push	{lr}
   804b6:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   804b8:	2201      	movs	r2, #1
   804ba:	f10d 0107 	add.w	r1, sp, #7
   804be:	4810      	ldr	r0, [pc, #64]	; (80500 <USART0_Handler+0x4c>)
   804c0:	4b10      	ldr	r3, [pc, #64]	; (80504 <USART0_Handler+0x50>)
   804c2:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   804c4:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   804c6:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   804ca:	2200      	movs	r2, #0
   804cc:	4b0e      	ldr	r3, [pc, #56]	; (80508 <USART0_Handler+0x54>)
   804ce:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   804d0:	4b0e      	ldr	r3, [pc, #56]	; (8050c <USART0_Handler+0x58>)
   804d2:	781b      	ldrb	r3, [r3, #0]
   804d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   804d8:	4a0d      	ldr	r2, [pc, #52]	; (80510 <USART0_Handler+0x5c>)
   804da:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   804dc:	2b9b      	cmp	r3, #155	; 0x9b
   804de:	d00b      	beq.n	804f8 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   804e0:	3301      	adds	r3, #1
   804e2:	4a0a      	ldr	r2, [pc, #40]	; (8050c <USART0_Handler+0x58>)
   804e4:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   804e6:	2201      	movs	r2, #1
   804e8:	4b07      	ldr	r3, [pc, #28]	; (80508 <USART0_Handler+0x54>)
   804ea:	701a      	strb	r2, [r3, #0]
   804ec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   804f0:	b662      	cpsie	i
}
   804f2:	b003      	add	sp, #12
   804f4:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   804f8:	2200      	movs	r2, #0
   804fa:	4b04      	ldr	r3, [pc, #16]	; (8050c <USART0_Handler+0x58>)
   804fc:	701a      	strb	r2, [r3, #0]
   804fe:	e7f2      	b.n	804e6 <USART0_Handler+0x32>
   80500:	40098000 	.word	0x40098000
   80504:	000807cd 	.word	0x000807cd
   80508:	20070172 	.word	0x20070172
   8050c:	20070c64 	.word	0x20070c64
   80510:	20070bc8 	.word	0x20070bc8

00080514 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80514:	b5f0      	push	{r4, r5, r6, r7, lr}
   80516:	b083      	sub	sp, #12
   80518:	4604      	mov	r4, r0
   8051a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8051c:	2300      	movs	r3, #0
   8051e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80520:	4b20      	ldr	r3, [pc, #128]	; (805a4 <usart_serial_getchar+0x90>)
   80522:	4298      	cmp	r0, r3
   80524:	d00d      	beq.n	80542 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80526:	4b20      	ldr	r3, [pc, #128]	; (805a8 <usart_serial_getchar+0x94>)
   80528:	4298      	cmp	r0, r3
   8052a:	d012      	beq.n	80552 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8052c:	4b1f      	ldr	r3, [pc, #124]	; (805ac <usart_serial_getchar+0x98>)
   8052e:	4298      	cmp	r0, r3
   80530:	d019      	beq.n	80566 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80532:	4b1f      	ldr	r3, [pc, #124]	; (805b0 <usart_serial_getchar+0x9c>)
   80534:	429c      	cmp	r4, r3
   80536:	d020      	beq.n	8057a <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80538:	4b1e      	ldr	r3, [pc, #120]	; (805b4 <usart_serial_getchar+0xa0>)
   8053a:	429c      	cmp	r4, r3
   8053c:	d027      	beq.n	8058e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8053e:	b003      	add	sp, #12
   80540:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80542:	461f      	mov	r7, r3
   80544:	4e1c      	ldr	r6, [pc, #112]	; (805b8 <usart_serial_getchar+0xa4>)
   80546:	4629      	mov	r1, r5
   80548:	4638      	mov	r0, r7
   8054a:	47b0      	blx	r6
   8054c:	2800      	cmp	r0, #0
   8054e:	d1fa      	bne.n	80546 <usart_serial_getchar+0x32>
   80550:	e7ef      	b.n	80532 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80552:	461f      	mov	r7, r3
   80554:	4e19      	ldr	r6, [pc, #100]	; (805bc <usart_serial_getchar+0xa8>)
   80556:	a901      	add	r1, sp, #4
   80558:	4638      	mov	r0, r7
   8055a:	47b0      	blx	r6
   8055c:	2800      	cmp	r0, #0
   8055e:	d1fa      	bne.n	80556 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80560:	9b01      	ldr	r3, [sp, #4]
   80562:	702b      	strb	r3, [r5, #0]
   80564:	e7e8      	b.n	80538 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80566:	461e      	mov	r6, r3
   80568:	4c14      	ldr	r4, [pc, #80]	; (805bc <usart_serial_getchar+0xa8>)
   8056a:	a901      	add	r1, sp, #4
   8056c:	4630      	mov	r0, r6
   8056e:	47a0      	blx	r4
   80570:	2800      	cmp	r0, #0
   80572:	d1fa      	bne.n	8056a <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80574:	9b01      	ldr	r3, [sp, #4]
   80576:	702b      	strb	r3, [r5, #0]
   80578:	e7e1      	b.n	8053e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8057a:	461e      	mov	r6, r3
   8057c:	4c0f      	ldr	r4, [pc, #60]	; (805bc <usart_serial_getchar+0xa8>)
   8057e:	a901      	add	r1, sp, #4
   80580:	4630      	mov	r0, r6
   80582:	47a0      	blx	r4
   80584:	2800      	cmp	r0, #0
   80586:	d1fa      	bne.n	8057e <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80588:	9b01      	ldr	r3, [sp, #4]
   8058a:	702b      	strb	r3, [r5, #0]
   8058c:	e7d7      	b.n	8053e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8058e:	461e      	mov	r6, r3
   80590:	4c0a      	ldr	r4, [pc, #40]	; (805bc <usart_serial_getchar+0xa8>)
   80592:	a901      	add	r1, sp, #4
   80594:	4630      	mov	r0, r6
   80596:	47a0      	blx	r4
   80598:	2800      	cmp	r0, #0
   8059a:	d1fa      	bne.n	80592 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   8059c:	9b01      	ldr	r3, [sp, #4]
   8059e:	702b      	strb	r3, [r5, #0]
}
   805a0:	e7cd      	b.n	8053e <usart_serial_getchar+0x2a>
   805a2:	bf00      	nop
   805a4:	400e0800 	.word	0x400e0800
   805a8:	40098000 	.word	0x40098000
   805ac:	4009c000 	.word	0x4009c000
   805b0:	400a0000 	.word	0x400a0000
   805b4:	400a4000 	.word	0x400a4000
   805b8:	000808db 	.word	0x000808db
   805bc:	0008049d 	.word	0x0008049d

000805c0 <usart_serial_putchar>:
{
   805c0:	b570      	push	{r4, r5, r6, lr}
   805c2:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   805c4:	4b1e      	ldr	r3, [pc, #120]	; (80640 <usart_serial_putchar+0x80>)
   805c6:	4298      	cmp	r0, r3
   805c8:	d00d      	beq.n	805e6 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   805ca:	4b1e      	ldr	r3, [pc, #120]	; (80644 <usart_serial_putchar+0x84>)
   805cc:	4298      	cmp	r0, r3
   805ce:	d013      	beq.n	805f8 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   805d0:	4b1d      	ldr	r3, [pc, #116]	; (80648 <usart_serial_putchar+0x88>)
   805d2:	4298      	cmp	r0, r3
   805d4:	d019      	beq.n	8060a <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   805d6:	4b1d      	ldr	r3, [pc, #116]	; (8064c <usart_serial_putchar+0x8c>)
   805d8:	4298      	cmp	r0, r3
   805da:	d01f      	beq.n	8061c <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   805dc:	4b1c      	ldr	r3, [pc, #112]	; (80650 <usart_serial_putchar+0x90>)
   805de:	4298      	cmp	r0, r3
   805e0:	d025      	beq.n	8062e <usart_serial_putchar+0x6e>
	return 0;
   805e2:	2000      	movs	r0, #0
}
   805e4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   805e6:	461e      	mov	r6, r3
   805e8:	4d1a      	ldr	r5, [pc, #104]	; (80654 <usart_serial_putchar+0x94>)
   805ea:	4621      	mov	r1, r4
   805ec:	4630      	mov	r0, r6
   805ee:	47a8      	blx	r5
   805f0:	2800      	cmp	r0, #0
   805f2:	d1fa      	bne.n	805ea <usart_serial_putchar+0x2a>
		return 1;
   805f4:	2001      	movs	r0, #1
   805f6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   805f8:	461e      	mov	r6, r3
   805fa:	4d17      	ldr	r5, [pc, #92]	; (80658 <usart_serial_putchar+0x98>)
   805fc:	4621      	mov	r1, r4
   805fe:	4630      	mov	r0, r6
   80600:	47a8      	blx	r5
   80602:	2800      	cmp	r0, #0
   80604:	d1fa      	bne.n	805fc <usart_serial_putchar+0x3c>
		return 1;
   80606:	2001      	movs	r0, #1
   80608:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8060a:	461e      	mov	r6, r3
   8060c:	4d12      	ldr	r5, [pc, #72]	; (80658 <usart_serial_putchar+0x98>)
   8060e:	4621      	mov	r1, r4
   80610:	4630      	mov	r0, r6
   80612:	47a8      	blx	r5
   80614:	2800      	cmp	r0, #0
   80616:	d1fa      	bne.n	8060e <usart_serial_putchar+0x4e>
		return 1;
   80618:	2001      	movs	r0, #1
   8061a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8061c:	461e      	mov	r6, r3
   8061e:	4d0e      	ldr	r5, [pc, #56]	; (80658 <usart_serial_putchar+0x98>)
   80620:	4621      	mov	r1, r4
   80622:	4630      	mov	r0, r6
   80624:	47a8      	blx	r5
   80626:	2800      	cmp	r0, #0
   80628:	d1fa      	bne.n	80620 <usart_serial_putchar+0x60>
		return 1;
   8062a:	2001      	movs	r0, #1
   8062c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8062e:	461e      	mov	r6, r3
   80630:	4d09      	ldr	r5, [pc, #36]	; (80658 <usart_serial_putchar+0x98>)
   80632:	4621      	mov	r1, r4
   80634:	4630      	mov	r0, r6
   80636:	47a8      	blx	r5
   80638:	2800      	cmp	r0, #0
   8063a:	d1fa      	bne.n	80632 <usart_serial_putchar+0x72>
		return 1;
   8063c:	2001      	movs	r0, #1
   8063e:	bd70      	pop	{r4, r5, r6, pc}
   80640:	400e0800 	.word	0x400e0800
   80644:	40098000 	.word	0x40098000
   80648:	4009c000 	.word	0x4009c000
   8064c:	400a0000 	.word	0x400a0000
   80650:	400a4000 	.word	0x400a4000
   80654:	000808cb 	.word	0x000808cb
   80658:	00080489 	.word	0x00080489

0008065c <console_init>:
#include "console_driver.h"

void console_init(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   8065c:	b530      	push	{r4, r5, lr}
   8065e:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80660:	2008      	movs	r0, #8
   80662:	4d15      	ldr	r5, [pc, #84]	; (806b8 <console_init+0x5c>)
   80664:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80666:	4c15      	ldr	r4, [pc, #84]	; (806bc <console_init+0x60>)
   80668:	4b15      	ldr	r3, [pc, #84]	; (806c0 <console_init+0x64>)
   8066a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8066c:	4a15      	ldr	r2, [pc, #84]	; (806c4 <console_init+0x68>)
   8066e:	4b16      	ldr	r3, [pc, #88]	; (806c8 <console_init+0x6c>)
   80670:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80672:	4a16      	ldr	r2, [pc, #88]	; (806cc <console_init+0x70>)
   80674:	4b16      	ldr	r3, [pc, #88]	; (806d0 <console_init+0x74>)
   80676:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80678:	4b16      	ldr	r3, [pc, #88]	; (806d4 <console_init+0x78>)
   8067a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8067c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80680:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80682:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80686:	9303      	str	r3, [sp, #12]
   80688:	2008      	movs	r0, #8
   8068a:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   8068c:	a901      	add	r1, sp, #4
   8068e:	4620      	mov	r0, r4
   80690:	4b11      	ldr	r3, [pc, #68]	; (806d8 <console_init+0x7c>)
   80692:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80694:	4d11      	ldr	r5, [pc, #68]	; (806dc <console_init+0x80>)
   80696:	682b      	ldr	r3, [r5, #0]
   80698:	2100      	movs	r1, #0
   8069a:	6898      	ldr	r0, [r3, #8]
   8069c:	4c10      	ldr	r4, [pc, #64]	; (806e0 <console_init+0x84>)
   8069e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   806a0:	682b      	ldr	r3, [r5, #0]
   806a2:	2100      	movs	r1, #0
   806a4:	6858      	ldr	r0, [r3, #4]
   806a6:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   806a8:	480e      	ldr	r0, [pc, #56]	; (806e4 <console_init+0x88>)
   806aa:	4c0f      	ldr	r4, [pc, #60]	; (806e8 <console_init+0x8c>)
   806ac:	47a0      	blx	r4
	printf("=============\n");
   806ae:	480f      	ldr	r0, [pc, #60]	; (806ec <console_init+0x90>)
   806b0:	47a0      	blx	r4
   806b2:	b005      	add	sp, #20
   806b4:	bd30      	pop	{r4, r5, pc}
   806b6:	bf00      	nop
   806b8:	00080d65 	.word	0x00080d65
   806bc:	400e0800 	.word	0x400e0800
   806c0:	20070d18 	.word	0x20070d18
   806c4:	000805c1 	.word	0x000805c1
   806c8:	20070d14 	.word	0x20070d14
   806cc:	00080515 	.word	0x00080515
   806d0:	20070d10 	.word	0x20070d10
   806d4:	0501bd00 	.word	0x0501bd00
   806d8:	00080895 	.word	0x00080895
   806dc:	20070178 	.word	0x20070178
   806e0:	0008128d 	.word	0x0008128d
   806e4:	00083d60 	.word	0x00083d60
   806e8:	000810dd 	.word	0x000810dd
   806ec:	00083d70 	.word	0x00083d70

000806f0 <delay_init>:
 */

#include "asf.h"
#include "delay.h"

int delay_init(void) {
   806f0:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC3);	/* power on the peripheral clock for timers */
   806f2:	201e      	movs	r0, #30
   806f4:	4b08      	ldr	r3, [pc, #32]	; (80718 <delay_init+0x28>)
   806f6:	4798      	blx	r3
	tc_init(TC1,0,0);				/* Enable timer block 2, channel 0, TCLK1 och capturemode */
   806f8:	4c08      	ldr	r4, [pc, #32]	; (8071c <delay_init+0x2c>)
   806fa:	2200      	movs	r2, #0
   806fc:	4611      	mov	r1, r2
   806fe:	4620      	mov	r0, r4
   80700:	4b07      	ldr	r3, [pc, #28]	; (80720 <delay_init+0x30>)
   80702:	4798      	blx	r3
	tc_set_block_mode(TC1,0);
   80704:	2100      	movs	r1, #0
   80706:	4620      	mov	r0, r4
   80708:	4b06      	ldr	r3, [pc, #24]	; (80724 <delay_init+0x34>)
   8070a:	4798      	blx	r3
	tc_stop(TC1,0);					/* making sure the timer does not run  */
   8070c:	2100      	movs	r1, #0
   8070e:	4620      	mov	r0, r4
   80710:	4b05      	ldr	r3, [pc, #20]	; (80728 <delay_init+0x38>)
   80712:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   80714:	2000      	movs	r0, #0
   80716:	bd10      	pop	{r4, pc}
   80718:	00080d65 	.word	0x00080d65
   8071c:	40084000 	.word	0x40084000
   80720:	0008019d 	.word	0x0008019d
   80724:	000801b5 	.word	0x000801b5
   80728:	000801c3 	.word	0x000801c3

0008072c <delay_us>:

void delay_us(uint32_t us){
   8072c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8072e:	4605      	mov	r5, r0
	tc_start(TC1,0);
   80730:	2100      	movs	r1, #0
   80732:	4809      	ldr	r0, [pc, #36]	; (80758 <delay_us+0x2c>)
   80734:	4b09      	ldr	r3, [pc, #36]	; (8075c <delay_us+0x30>)
   80736:	4798      	blx	r3
	while (tc_read_cv(TC1,0) < us*42);
   80738:	242a      	movs	r4, #42	; 0x2a
   8073a:	fb04 f405 	mul.w	r4, r4, r5
   8073e:	4f06      	ldr	r7, [pc, #24]	; (80758 <delay_us+0x2c>)
   80740:	2600      	movs	r6, #0
   80742:	4d07      	ldr	r5, [pc, #28]	; (80760 <delay_us+0x34>)
   80744:	4631      	mov	r1, r6
   80746:	4638      	mov	r0, r7
   80748:	47a8      	blx	r5
   8074a:	42a0      	cmp	r0, r4
   8074c:	d3fa      	bcc.n	80744 <delay_us+0x18>
	tc_stop(TC1,0);
   8074e:	2100      	movs	r1, #0
   80750:	4801      	ldr	r0, [pc, #4]	; (80758 <delay_us+0x2c>)
   80752:	4b04      	ldr	r3, [pc, #16]	; (80764 <delay_us+0x38>)
   80754:	4798      	blx	r3
   80756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80758:	40084000 	.word	0x40084000
   8075c:	000801bb 	.word	0x000801bb
   80760:	000801cb 	.word	0x000801cb
   80764:	000801c3 	.word	0x000801c3

00080768 <delay_ms>:
}

void delay_ms(uint32_t ms) {
   80768:	b508      	push	{r3, lr}
	delay_us(1000 * ms);
   8076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   8076e:	fb03 f000 	mul.w	r0, r3, r0
   80772:	4b01      	ldr	r3, [pc, #4]	; (80778 <delay_ms+0x10>)
   80774:	4798      	blx	r3
   80776:	bd08      	pop	{r3, pc}
   80778:	0008072d 	.word	0x0008072d

0008077c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   8077c:	3801      	subs	r0, #1
   8077e:	2802      	cmp	r0, #2
   80780:	d815      	bhi.n	807ae <_write+0x32>
{
   80782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80786:	460e      	mov	r6, r1
   80788:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8078a:	b19a      	cbz	r2, 807b4 <_write+0x38>
   8078c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8078e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 807c8 <_write+0x4c>
   80792:	4f0c      	ldr	r7, [pc, #48]	; (807c4 <_write+0x48>)
   80794:	f8d8 0000 	ldr.w	r0, [r8]
   80798:	f815 1b01 	ldrb.w	r1, [r5], #1
   8079c:	683b      	ldr	r3, [r7, #0]
   8079e:	4798      	blx	r3
   807a0:	2800      	cmp	r0, #0
   807a2:	db0a      	blt.n	807ba <_write+0x3e>
   807a4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   807a6:	3c01      	subs	r4, #1
   807a8:	d1f4      	bne.n	80794 <_write+0x18>
   807aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   807ae:	f04f 30ff 	mov.w	r0, #4294967295
   807b2:	4770      	bx	lr
	for (; len != 0; --len) {
   807b4:	4610      	mov	r0, r2
   807b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   807ba:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   807be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   807c2:	bf00      	nop
   807c4:	20070d14 	.word	0x20070d14
   807c8:	20070d18 	.word	0x20070d18

000807cc <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   807cc:	2a00      	cmp	r2, #0
   807ce:	d051      	beq.n	80874 <usart_serial_read_packet+0xa8>
{
   807d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   807d4:	b083      	sub	sp, #12
   807d6:	4605      	mov	r5, r0
   807d8:	460c      	mov	r4, r1
   807da:	4692      	mov	sl, r2
   807dc:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   807de:	4f26      	ldr	r7, [pc, #152]	; (80878 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   807e0:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8088c <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   807e4:	4e25      	ldr	r6, [pc, #148]	; (8087c <usart_serial_read_packet+0xb0>)
   807e6:	e01d      	b.n	80824 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   807e8:	4621      	mov	r1, r4
   807ea:	4638      	mov	r0, r7
   807ec:	47c8      	blx	r9
   807ee:	2800      	cmp	r0, #0
   807f0:	d1fa      	bne.n	807e8 <usart_serial_read_packet+0x1c>
   807f2:	e021      	b.n	80838 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   807f4:	469b      	mov	fp, r3
   807f6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80890 <usart_serial_read_packet+0xc4>
   807fa:	a901      	add	r1, sp, #4
   807fc:	4658      	mov	r0, fp
   807fe:	47c0      	blx	r8
   80800:	2800      	cmp	r0, #0
   80802:	d1fa      	bne.n	807fa <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   80804:	9b01      	ldr	r3, [sp, #4]
   80806:	7023      	strb	r3, [r4, #0]
   80808:	e019      	b.n	8083e <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   8080a:	469b      	mov	fp, r3
   8080c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 80890 <usart_serial_read_packet+0xc4>
   80810:	a901      	add	r1, sp, #4
   80812:	4658      	mov	r0, fp
   80814:	47c0      	blx	r8
   80816:	2800      	cmp	r0, #0
   80818:	d1fa      	bne.n	80810 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   8081a:	9b01      	ldr	r3, [sp, #4]
   8081c:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   8081e:	3401      	adds	r4, #1
	while (len) {
   80820:	4554      	cmp	r4, sl
   80822:	d023      	beq.n	8086c <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   80824:	2300      	movs	r3, #0
   80826:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80828:	42bd      	cmp	r5, r7
   8082a:	d0dd      	beq.n	807e8 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   8082c:	4b14      	ldr	r3, [pc, #80]	; (80880 <usart_serial_read_packet+0xb4>)
   8082e:	429d      	cmp	r5, r3
   80830:	d0e0      	beq.n	807f4 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   80832:	4b14      	ldr	r3, [pc, #80]	; (80884 <usart_serial_read_packet+0xb8>)
   80834:	429d      	cmp	r5, r3
   80836:	d0e8      	beq.n	8080a <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   80838:	4b13      	ldr	r3, [pc, #76]	; (80888 <usart_serial_read_packet+0xbc>)
   8083a:	429d      	cmp	r5, r3
   8083c:	d00b      	beq.n	80856 <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   8083e:	42b5      	cmp	r5, r6
   80840:	d1ed      	bne.n	8081e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80842:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80890 <usart_serial_read_packet+0xc4>
   80846:	a901      	add	r1, sp, #4
   80848:	4630      	mov	r0, r6
   8084a:	47c0      	blx	r8
   8084c:	2800      	cmp	r0, #0
   8084e:	d1fa      	bne.n	80846 <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   80850:	9b01      	ldr	r3, [sp, #4]
   80852:	7023      	strb	r3, [r4, #0]
   80854:	e7e3      	b.n	8081e <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80856:	469b      	mov	fp, r3
   80858:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80890 <usart_serial_read_packet+0xc4>
   8085c:	a901      	add	r1, sp, #4
   8085e:	4658      	mov	r0, fp
   80860:	47c0      	blx	r8
   80862:	2800      	cmp	r0, #0
   80864:	d1fa      	bne.n	8085c <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   80866:	9b01      	ldr	r3, [sp, #4]
   80868:	7023      	strb	r3, [r4, #0]
   8086a:	e7d8      	b.n	8081e <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   8086c:	2000      	movs	r0, #0
   8086e:	b003      	add	sp, #12
   80870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80874:	2000      	movs	r0, #0
   80876:	4770      	bx	lr
   80878:	400e0800 	.word	0x400e0800
   8087c:	400a4000 	.word	0x400a4000
   80880:	40098000 	.word	0x40098000
   80884:	4009c000 	.word	0x4009c000
   80888:	400a0000 	.word	0x400a0000
   8088c:	000808db 	.word	0x000808db
   80890:	0008049d 	.word	0x0008049d

00080894 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80894:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80896:	23ac      	movs	r3, #172	; 0xac
   80898:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8089a:	680b      	ldr	r3, [r1, #0]
   8089c:	684a      	ldr	r2, [r1, #4]
   8089e:	fbb3 f3f2 	udiv	r3, r3, r2
   808a2:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   808a4:	1e5c      	subs	r4, r3, #1
   808a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   808aa:	4294      	cmp	r4, r2
   808ac:	d80b      	bhi.n	808c6 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   808ae:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   808b0:	688b      	ldr	r3, [r1, #8]
   808b2:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   808b4:	f240 2302 	movw	r3, #514	; 0x202
   808b8:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   808bc:	2350      	movs	r3, #80	; 0x50
   808be:	6003      	str	r3, [r0, #0]

	return 0;
   808c0:	2000      	movs	r0, #0
}
   808c2:	bc10      	pop	{r4}
   808c4:	4770      	bx	lr
		return 1;
   808c6:	2001      	movs	r0, #1
   808c8:	e7fb      	b.n	808c2 <uart_init+0x2e>

000808ca <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   808ca:	6943      	ldr	r3, [r0, #20]
   808cc:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   808d0:	bf1a      	itte	ne
   808d2:	61c1      	strne	r1, [r0, #28]
	return 0;
   808d4:	2000      	movne	r0, #0
		return 1;
   808d6:	2001      	moveq	r0, #1
}
   808d8:	4770      	bx	lr

000808da <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   808da:	6943      	ldr	r3, [r0, #20]
   808dc:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   808e0:	bf1d      	ittte	ne
   808e2:	6983      	ldrne	r3, [r0, #24]
   808e4:	700b      	strbne	r3, [r1, #0]
	return 0;
   808e6:	2000      	movne	r0, #0
		return 1;
   808e8:	2001      	moveq	r0, #1
}
   808ea:	4770      	bx	lr

000808ec <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   808ec:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   808ee:	480e      	ldr	r0, [pc, #56]	; (80928 <sysclk_init+0x3c>)
   808f0:	4b0e      	ldr	r3, [pc, #56]	; (8092c <sysclk_init+0x40>)
   808f2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   808f4:	213e      	movs	r1, #62	; 0x3e
   808f6:	2000      	movs	r0, #0
   808f8:	4b0d      	ldr	r3, [pc, #52]	; (80930 <sysclk_init+0x44>)
   808fa:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   808fc:	4c0d      	ldr	r4, [pc, #52]	; (80934 <sysclk_init+0x48>)
   808fe:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80900:	2800      	cmp	r0, #0
   80902:	d0fc      	beq.n	808fe <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80904:	4b0c      	ldr	r3, [pc, #48]	; (80938 <sysclk_init+0x4c>)
   80906:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80908:	4a0c      	ldr	r2, [pc, #48]	; (8093c <sysclk_init+0x50>)
   8090a:	4b0d      	ldr	r3, [pc, #52]	; (80940 <sysclk_init+0x54>)
   8090c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8090e:	4c0d      	ldr	r4, [pc, #52]	; (80944 <sysclk_init+0x58>)
   80910:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80912:	2800      	cmp	r0, #0
   80914:	d0fc      	beq.n	80910 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80916:	2010      	movs	r0, #16
   80918:	4b0b      	ldr	r3, [pc, #44]	; (80948 <sysclk_init+0x5c>)
   8091a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8091c:	4b0b      	ldr	r3, [pc, #44]	; (8094c <sysclk_init+0x60>)
   8091e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80920:	4801      	ldr	r0, [pc, #4]	; (80928 <sysclk_init+0x3c>)
   80922:	4b02      	ldr	r3, [pc, #8]	; (8092c <sysclk_init+0x40>)
   80924:	4798      	blx	r3
   80926:	bd10      	pop	{r4, pc}
   80928:	0501bd00 	.word	0x0501bd00
   8092c:	200700a5 	.word	0x200700a5
   80930:	00080ce1 	.word	0x00080ce1
   80934:	00080d35 	.word	0x00080d35
   80938:	00080d45 	.word	0x00080d45
   8093c:	200d3f01 	.word	0x200d3f01
   80940:	400e0600 	.word	0x400e0600
   80944:	00080d55 	.word	0x00080d55
   80948:	00080c7d 	.word	0x00080c7d
   8094c:	00080e55 	.word	0x00080e55

00080950 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80950:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80952:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80956:	4b16      	ldr	r3, [pc, #88]	; (809b0 <board_init+0x60>)
   80958:	605a      	str	r2, [r3, #4]
   8095a:	200b      	movs	r0, #11
   8095c:	4c15      	ldr	r4, [pc, #84]	; (809b4 <board_init+0x64>)
   8095e:	47a0      	blx	r4
   80960:	200c      	movs	r0, #12
   80962:	47a0      	blx	r4
   80964:	200d      	movs	r0, #13
   80966:	47a0      	blx	r4
   80968:	200e      	movs	r0, #14
   8096a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8096c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80970:	203b      	movs	r0, #59	; 0x3b
   80972:	4c11      	ldr	r4, [pc, #68]	; (809b8 <board_init+0x68>)
   80974:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80976:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8097a:	2055      	movs	r0, #85	; 0x55
   8097c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8097e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80982:	2056      	movs	r0, #86	; 0x56
   80984:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80986:	490d      	ldr	r1, [pc, #52]	; (809bc <board_init+0x6c>)
   80988:	2068      	movs	r0, #104	; 0x68
   8098a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   8098c:	490c      	ldr	r1, [pc, #48]	; (809c0 <board_init+0x70>)
   8098e:	205c      	movs	r0, #92	; 0x5c
   80990:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80992:	4a0c      	ldr	r2, [pc, #48]	; (809c4 <board_init+0x74>)
   80994:	f44f 7140 	mov.w	r1, #768	; 0x300
   80998:	480b      	ldr	r0, [pc, #44]	; (809c8 <board_init+0x78>)
   8099a:	4b0c      	ldr	r3, [pc, #48]	; (809cc <board_init+0x7c>)
   8099c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8099e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809a2:	202b      	movs	r0, #43	; 0x2b
   809a4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   809a6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809aa:	202a      	movs	r0, #42	; 0x2a
   809ac:	47a0      	blx	r4
   809ae:	bd10      	pop	{r4, pc}
   809b0:	400e1a50 	.word	0x400e1a50
   809b4:	00080d65 	.word	0x00080d65
   809b8:	00080a71 	.word	0x00080a71
   809bc:	28000079 	.word	0x28000079
   809c0:	28000001 	.word	0x28000001
   809c4:	08000001 	.word	0x08000001
   809c8:	400e0e00 	.word	0x400e0e00
   809cc:	00080b41 	.word	0x00080b41

000809d0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   809d0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   809d2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   809d6:	d016      	beq.n	80a06 <pio_set_peripheral+0x36>
   809d8:	d80b      	bhi.n	809f2 <pio_set_peripheral+0x22>
   809da:	b149      	cbz	r1, 809f0 <pio_set_peripheral+0x20>
   809dc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   809e0:	d105      	bne.n	809ee <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   809e2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   809e4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   809e6:	400b      	ands	r3, r1
   809e8:	ea23 0302 	bic.w	r3, r3, r2
   809ec:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   809ee:	6042      	str	r2, [r0, #4]
   809f0:	4770      	bx	lr
	switch (ul_type) {
   809f2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   809f6:	d0fb      	beq.n	809f0 <pio_set_peripheral+0x20>
   809f8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   809fc:	d0f8      	beq.n	809f0 <pio_set_peripheral+0x20>
   809fe:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80a02:	d1f4      	bne.n	809ee <pio_set_peripheral+0x1e>
   80a04:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80a06:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80a08:	4313      	orrs	r3, r2
   80a0a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80a0c:	e7ef      	b.n	809ee <pio_set_peripheral+0x1e>

00080a0e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a0e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a10:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80a14:	bf14      	ite	ne
   80a16:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a18:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80a1a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80a1e:	bf14      	ite	ne
   80a20:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80a22:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80a24:	f012 0f02 	tst.w	r2, #2
   80a28:	d107      	bne.n	80a3a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80a2a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80a2e:	bf18      	it	ne
   80a30:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80a34:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80a36:	6001      	str	r1, [r0, #0]
   80a38:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80a3a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80a3e:	e7f9      	b.n	80a34 <pio_set_input+0x26>

00080a40 <pio_set_output>:
{
   80a40:	b410      	push	{r4}
   80a42:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80a44:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a46:	b944      	cbnz	r4, 80a5a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80a48:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80a4a:	b143      	cbz	r3, 80a5e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80a4c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80a4e:	b942      	cbnz	r2, 80a62 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80a50:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80a52:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80a54:	6001      	str	r1, [r0, #0]
}
   80a56:	bc10      	pop	{r4}
   80a58:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80a5a:	6641      	str	r1, [r0, #100]	; 0x64
   80a5c:	e7f5      	b.n	80a4a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80a5e:	6541      	str	r1, [r0, #84]	; 0x54
   80a60:	e7f5      	b.n	80a4e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80a62:	6301      	str	r1, [r0, #48]	; 0x30
   80a64:	e7f5      	b.n	80a52 <pio_set_output+0x12>

00080a66 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80a66:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80a68:	4770      	bx	lr

00080a6a <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80a6a:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80a6c:	4770      	bx	lr
	...

00080a70 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80a70:	b570      	push	{r4, r5, r6, lr}
   80a72:	b082      	sub	sp, #8
   80a74:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80a76:	0943      	lsrs	r3, r0, #5
   80a78:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80a7c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80a80:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80a82:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80a86:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80a8a:	d031      	beq.n	80af0 <pio_configure_pin+0x80>
   80a8c:	d816      	bhi.n	80abc <pio_configure_pin+0x4c>
   80a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80a92:	d01b      	beq.n	80acc <pio_configure_pin+0x5c>
   80a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80a98:	d116      	bne.n	80ac8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a9a:	f000 001f 	and.w	r0, r0, #31
   80a9e:	2601      	movs	r6, #1
   80aa0:	4086      	lsls	r6, r0
   80aa2:	4632      	mov	r2, r6
   80aa4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80aa8:	4620      	mov	r0, r4
   80aaa:	4b22      	ldr	r3, [pc, #136]	; (80b34 <pio_configure_pin+0xc4>)
   80aac:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80aae:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ab2:	bf14      	ite	ne
   80ab4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ab6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80ab8:	2001      	movs	r0, #1
   80aba:	e017      	b.n	80aec <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80abc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ac0:	d021      	beq.n	80b06 <pio_configure_pin+0x96>
   80ac2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80ac6:	d01e      	beq.n	80b06 <pio_configure_pin+0x96>
		return 0;
   80ac8:	2000      	movs	r0, #0
   80aca:	e00f      	b.n	80aec <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80acc:	f000 001f 	and.w	r0, r0, #31
   80ad0:	2601      	movs	r6, #1
   80ad2:	4086      	lsls	r6, r0
   80ad4:	4632      	mov	r2, r6
   80ad6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ada:	4620      	mov	r0, r4
   80adc:	4b15      	ldr	r3, [pc, #84]	; (80b34 <pio_configure_pin+0xc4>)
   80ade:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ae0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ae4:	bf14      	ite	ne
   80ae6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ae8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80aea:	2001      	movs	r0, #1
}
   80aec:	b002      	add	sp, #8
   80aee:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80af0:	f000 011f 	and.w	r1, r0, #31
   80af4:	2601      	movs	r6, #1
   80af6:	462a      	mov	r2, r5
   80af8:	fa06 f101 	lsl.w	r1, r6, r1
   80afc:	4620      	mov	r0, r4
   80afe:	4b0e      	ldr	r3, [pc, #56]	; (80b38 <pio_configure_pin+0xc8>)
   80b00:	4798      	blx	r3
	return 1;
   80b02:	4630      	mov	r0, r6
		break;
   80b04:	e7f2      	b.n	80aec <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b06:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b0a:	f000 011f 	and.w	r1, r0, #31
   80b0e:	2601      	movs	r6, #1
   80b10:	ea05 0306 	and.w	r3, r5, r6
   80b14:	9300      	str	r3, [sp, #0]
   80b16:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80b1a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b1e:	bf14      	ite	ne
   80b20:	2200      	movne	r2, #0
   80b22:	2201      	moveq	r2, #1
   80b24:	fa06 f101 	lsl.w	r1, r6, r1
   80b28:	4620      	mov	r0, r4
   80b2a:	4c04      	ldr	r4, [pc, #16]	; (80b3c <pio_configure_pin+0xcc>)
   80b2c:	47a0      	blx	r4
	return 1;
   80b2e:	4630      	mov	r0, r6
		break;
   80b30:	e7dc      	b.n	80aec <pio_configure_pin+0x7c>
   80b32:	bf00      	nop
   80b34:	000809d1 	.word	0x000809d1
   80b38:	00080a0f 	.word	0x00080a0f
   80b3c:	00080a41 	.word	0x00080a41

00080b40 <pio_configure_pin_group>:
{
   80b40:	b570      	push	{r4, r5, r6, lr}
   80b42:	b082      	sub	sp, #8
   80b44:	4605      	mov	r5, r0
   80b46:	460e      	mov	r6, r1
   80b48:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80b4a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80b4e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80b52:	d027      	beq.n	80ba4 <pio_configure_pin_group+0x64>
   80b54:	d811      	bhi.n	80b7a <pio_configure_pin_group+0x3a>
   80b56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80b5a:	d016      	beq.n	80b8a <pio_configure_pin_group+0x4a>
   80b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80b60:	d111      	bne.n	80b86 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80b62:	460a      	mov	r2, r1
   80b64:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b68:	4b19      	ldr	r3, [pc, #100]	; (80bd0 <pio_configure_pin_group+0x90>)
   80b6a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b6c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80b70:	bf14      	ite	ne
   80b72:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b74:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80b76:	2001      	movs	r0, #1
   80b78:	e012      	b.n	80ba0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80b7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80b7e:	d015      	beq.n	80bac <pio_configure_pin_group+0x6c>
   80b80:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80b84:	d012      	beq.n	80bac <pio_configure_pin_group+0x6c>
		return 0;
   80b86:	2000      	movs	r0, #0
   80b88:	e00a      	b.n	80ba0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80b8a:	460a      	mov	r2, r1
   80b8c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b90:	4b0f      	ldr	r3, [pc, #60]	; (80bd0 <pio_configure_pin_group+0x90>)
   80b92:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b94:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80b98:	bf14      	ite	ne
   80b9a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b9c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80b9e:	2001      	movs	r0, #1
}
   80ba0:	b002      	add	sp, #8
   80ba2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80ba4:	4b0b      	ldr	r3, [pc, #44]	; (80bd4 <pio_configure_pin_group+0x94>)
   80ba6:	4798      	blx	r3
	return 1;
   80ba8:	2001      	movs	r0, #1
		break;
   80baa:	e7f9      	b.n	80ba0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80bac:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80bb0:	f004 0301 	and.w	r3, r4, #1
   80bb4:	9300      	str	r3, [sp, #0]
   80bb6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80bba:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80bbe:	bf14      	ite	ne
   80bc0:	2200      	movne	r2, #0
   80bc2:	2201      	moveq	r2, #1
   80bc4:	4631      	mov	r1, r6
   80bc6:	4628      	mov	r0, r5
   80bc8:	4c03      	ldr	r4, [pc, #12]	; (80bd8 <pio_configure_pin_group+0x98>)
   80bca:	47a0      	blx	r4
	return 1;
   80bcc:	2001      	movs	r0, #1
		break;
   80bce:	e7e7      	b.n	80ba0 <pio_configure_pin_group+0x60>
   80bd0:	000809d1 	.word	0x000809d1
   80bd4:	00080a0f 	.word	0x00080a0f
   80bd8:	00080a41 	.word	0x00080a41

00080bdc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80be0:	4604      	mov	r4, r0
   80be2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80be4:	4b0e      	ldr	r3, [pc, #56]	; (80c20 <pio_handler_process+0x44>)
   80be6:	4798      	blx	r3
   80be8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80bea:	4620      	mov	r0, r4
   80bec:	4b0d      	ldr	r3, [pc, #52]	; (80c24 <pio_handler_process+0x48>)
   80bee:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80bf0:	4005      	ands	r5, r0
   80bf2:	d013      	beq.n	80c1c <pio_handler_process+0x40>
   80bf4:	4c0c      	ldr	r4, [pc, #48]	; (80c28 <pio_handler_process+0x4c>)
   80bf6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80bfa:	e003      	b.n	80c04 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80bfc:	42b4      	cmp	r4, r6
   80bfe:	d00d      	beq.n	80c1c <pio_handler_process+0x40>
   80c00:	3410      	adds	r4, #16
		while (status != 0) {
   80c02:	b15d      	cbz	r5, 80c1c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80c04:	6820      	ldr	r0, [r4, #0]
   80c06:	4540      	cmp	r0, r8
   80c08:	d1f8      	bne.n	80bfc <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c0a:	6861      	ldr	r1, [r4, #4]
   80c0c:	4229      	tst	r1, r5
   80c0e:	d0f5      	beq.n	80bfc <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c10:	68e3      	ldr	r3, [r4, #12]
   80c12:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80c14:	6863      	ldr	r3, [r4, #4]
   80c16:	ea25 0503 	bic.w	r5, r5, r3
   80c1a:	e7ef      	b.n	80bfc <pio_handler_process+0x20>
   80c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80c20:	00080a67 	.word	0x00080a67
   80c24:	00080a6b 	.word	0x00080a6b
   80c28:	20070c68 	.word	0x20070c68

00080c2c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80c2c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80c2e:	210b      	movs	r1, #11
   80c30:	4801      	ldr	r0, [pc, #4]	; (80c38 <PIOA_Handler+0xc>)
   80c32:	4b02      	ldr	r3, [pc, #8]	; (80c3c <PIOA_Handler+0x10>)
   80c34:	4798      	blx	r3
   80c36:	bd08      	pop	{r3, pc}
   80c38:	400e0e00 	.word	0x400e0e00
   80c3c:	00080bdd 	.word	0x00080bdd

00080c40 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80c40:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80c42:	210c      	movs	r1, #12
   80c44:	4801      	ldr	r0, [pc, #4]	; (80c4c <PIOB_Handler+0xc>)
   80c46:	4b02      	ldr	r3, [pc, #8]	; (80c50 <PIOB_Handler+0x10>)
   80c48:	4798      	blx	r3
   80c4a:	bd08      	pop	{r3, pc}
   80c4c:	400e1000 	.word	0x400e1000
   80c50:	00080bdd 	.word	0x00080bdd

00080c54 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80c54:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80c56:	210d      	movs	r1, #13
   80c58:	4801      	ldr	r0, [pc, #4]	; (80c60 <PIOC_Handler+0xc>)
   80c5a:	4b02      	ldr	r3, [pc, #8]	; (80c64 <PIOC_Handler+0x10>)
   80c5c:	4798      	blx	r3
   80c5e:	bd08      	pop	{r3, pc}
   80c60:	400e1200 	.word	0x400e1200
   80c64:	00080bdd 	.word	0x00080bdd

00080c68 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80c68:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80c6a:	210e      	movs	r1, #14
   80c6c:	4801      	ldr	r0, [pc, #4]	; (80c74 <PIOD_Handler+0xc>)
   80c6e:	4b02      	ldr	r3, [pc, #8]	; (80c78 <PIOD_Handler+0x10>)
   80c70:	4798      	blx	r3
   80c72:	bd08      	pop	{r3, pc}
   80c74:	400e1400 	.word	0x400e1400
   80c78:	00080bdd 	.word	0x00080bdd

00080c7c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80c7c:	4a17      	ldr	r2, [pc, #92]	; (80cdc <pmc_switch_mck_to_pllack+0x60>)
   80c7e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80c80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80c84:	4318      	orrs	r0, r3
   80c86:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80c88:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c8a:	f013 0f08 	tst.w	r3, #8
   80c8e:	d10a      	bne.n	80ca6 <pmc_switch_mck_to_pllack+0x2a>
   80c90:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80c94:	4911      	ldr	r1, [pc, #68]	; (80cdc <pmc_switch_mck_to_pllack+0x60>)
   80c96:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80c98:	f012 0f08 	tst.w	r2, #8
   80c9c:	d103      	bne.n	80ca6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80c9e:	3b01      	subs	r3, #1
   80ca0:	d1f9      	bne.n	80c96 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80ca2:	2001      	movs	r0, #1
   80ca4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80ca6:	4a0d      	ldr	r2, [pc, #52]	; (80cdc <pmc_switch_mck_to_pllack+0x60>)
   80ca8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80caa:	f023 0303 	bic.w	r3, r3, #3
   80cae:	f043 0302 	orr.w	r3, r3, #2
   80cb2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80cb4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80cb6:	f013 0f08 	tst.w	r3, #8
   80cba:	d10a      	bne.n	80cd2 <pmc_switch_mck_to_pllack+0x56>
   80cbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80cc0:	4906      	ldr	r1, [pc, #24]	; (80cdc <pmc_switch_mck_to_pllack+0x60>)
   80cc2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80cc4:	f012 0f08 	tst.w	r2, #8
   80cc8:	d105      	bne.n	80cd6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80cca:	3b01      	subs	r3, #1
   80ccc:	d1f9      	bne.n	80cc2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80cce:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80cd0:	4770      	bx	lr
	return 0;
   80cd2:	2000      	movs	r0, #0
   80cd4:	4770      	bx	lr
   80cd6:	2000      	movs	r0, #0
   80cd8:	4770      	bx	lr
   80cda:	bf00      	nop
   80cdc:	400e0600 	.word	0x400e0600

00080ce0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80ce0:	b9c8      	cbnz	r0, 80d16 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80ce2:	4a11      	ldr	r2, [pc, #68]	; (80d28 <pmc_switch_mainck_to_xtal+0x48>)
   80ce4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80ce6:	0209      	lsls	r1, r1, #8
   80ce8:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80cea:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80cee:	f023 0303 	bic.w	r3, r3, #3
   80cf2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80cf6:	f043 0301 	orr.w	r3, r3, #1
   80cfa:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80cfc:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80cfe:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d00:	f013 0f01 	tst.w	r3, #1
   80d04:	d0fb      	beq.n	80cfe <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80d06:	4a08      	ldr	r2, [pc, #32]	; (80d28 <pmc_switch_mainck_to_xtal+0x48>)
   80d08:	6a13      	ldr	r3, [r2, #32]
   80d0a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80d12:	6213      	str	r3, [r2, #32]
   80d14:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d16:	4904      	ldr	r1, [pc, #16]	; (80d28 <pmc_switch_mainck_to_xtal+0x48>)
   80d18:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80d1a:	4a04      	ldr	r2, [pc, #16]	; (80d2c <pmc_switch_mainck_to_xtal+0x4c>)
   80d1c:	401a      	ands	r2, r3
   80d1e:	4b04      	ldr	r3, [pc, #16]	; (80d30 <pmc_switch_mainck_to_xtal+0x50>)
   80d20:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80d22:	620b      	str	r3, [r1, #32]
   80d24:	4770      	bx	lr
   80d26:	bf00      	nop
   80d28:	400e0600 	.word	0x400e0600
   80d2c:	fec8fffc 	.word	0xfec8fffc
   80d30:	01370002 	.word	0x01370002

00080d34 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80d34:	4b02      	ldr	r3, [pc, #8]	; (80d40 <pmc_osc_is_ready_mainck+0xc>)
   80d36:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d38:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80d3c:	4770      	bx	lr
   80d3e:	bf00      	nop
   80d40:	400e0600 	.word	0x400e0600

00080d44 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80d44:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80d48:	4b01      	ldr	r3, [pc, #4]	; (80d50 <pmc_disable_pllack+0xc>)
   80d4a:	629a      	str	r2, [r3, #40]	; 0x28
   80d4c:	4770      	bx	lr
   80d4e:	bf00      	nop
   80d50:	400e0600 	.word	0x400e0600

00080d54 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80d54:	4b02      	ldr	r3, [pc, #8]	; (80d60 <pmc_is_locked_pllack+0xc>)
   80d56:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80d58:	f000 0002 	and.w	r0, r0, #2
   80d5c:	4770      	bx	lr
   80d5e:	bf00      	nop
   80d60:	400e0600 	.word	0x400e0600

00080d64 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80d64:	282c      	cmp	r0, #44	; 0x2c
   80d66:	d81e      	bhi.n	80da6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80d68:	281f      	cmp	r0, #31
   80d6a:	d80c      	bhi.n	80d86 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80d6c:	4b11      	ldr	r3, [pc, #68]	; (80db4 <pmc_enable_periph_clk+0x50>)
   80d6e:	699a      	ldr	r2, [r3, #24]
   80d70:	2301      	movs	r3, #1
   80d72:	4083      	lsls	r3, r0
   80d74:	4393      	bics	r3, r2
   80d76:	d018      	beq.n	80daa <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80d78:	2301      	movs	r3, #1
   80d7a:	fa03 f000 	lsl.w	r0, r3, r0
   80d7e:	4b0d      	ldr	r3, [pc, #52]	; (80db4 <pmc_enable_periph_clk+0x50>)
   80d80:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d82:	2000      	movs	r0, #0
   80d84:	4770      	bx	lr
		ul_id -= 32;
   80d86:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80d88:	4b0a      	ldr	r3, [pc, #40]	; (80db4 <pmc_enable_periph_clk+0x50>)
   80d8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80d8e:	2301      	movs	r3, #1
   80d90:	4083      	lsls	r3, r0
   80d92:	4393      	bics	r3, r2
   80d94:	d00b      	beq.n	80dae <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80d96:	2301      	movs	r3, #1
   80d98:	fa03 f000 	lsl.w	r0, r3, r0
   80d9c:	4b05      	ldr	r3, [pc, #20]	; (80db4 <pmc_enable_periph_clk+0x50>)
   80d9e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80da2:	2000      	movs	r0, #0
   80da4:	4770      	bx	lr
		return 1;
   80da6:	2001      	movs	r0, #1
   80da8:	4770      	bx	lr
	return 0;
   80daa:	2000      	movs	r0, #0
   80dac:	4770      	bx	lr
   80dae:	2000      	movs	r0, #0
}
   80db0:	4770      	bx	lr
   80db2:	bf00      	nop
   80db4:	400e0600 	.word	0x400e0600

00080db8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80db8:	e7fe      	b.n	80db8 <Dummy_Handler>
	...

00080dbc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80dbc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80dbe:	4b1c      	ldr	r3, [pc, #112]	; (80e30 <Reset_Handler+0x74>)
   80dc0:	4a1c      	ldr	r2, [pc, #112]	; (80e34 <Reset_Handler+0x78>)
   80dc2:	429a      	cmp	r2, r3
   80dc4:	d010      	beq.n	80de8 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80dc6:	4b1c      	ldr	r3, [pc, #112]	; (80e38 <Reset_Handler+0x7c>)
   80dc8:	4a19      	ldr	r2, [pc, #100]	; (80e30 <Reset_Handler+0x74>)
   80dca:	429a      	cmp	r2, r3
   80dcc:	d20c      	bcs.n	80de8 <Reset_Handler+0x2c>
   80dce:	3b01      	subs	r3, #1
   80dd0:	1a9b      	subs	r3, r3, r2
   80dd2:	f023 0303 	bic.w	r3, r3, #3
   80dd6:	3304      	adds	r3, #4
   80dd8:	4413      	add	r3, r2
   80dda:	4916      	ldr	r1, [pc, #88]	; (80e34 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80ddc:	f851 0b04 	ldr.w	r0, [r1], #4
   80de0:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80de4:	429a      	cmp	r2, r3
   80de6:	d1f9      	bne.n	80ddc <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80de8:	4b14      	ldr	r3, [pc, #80]	; (80e3c <Reset_Handler+0x80>)
   80dea:	4a15      	ldr	r2, [pc, #84]	; (80e40 <Reset_Handler+0x84>)
   80dec:	429a      	cmp	r2, r3
   80dee:	d20a      	bcs.n	80e06 <Reset_Handler+0x4a>
   80df0:	3b01      	subs	r3, #1
   80df2:	1a9b      	subs	r3, r3, r2
   80df4:	f023 0303 	bic.w	r3, r3, #3
   80df8:	3304      	adds	r3, #4
   80dfa:	4413      	add	r3, r2
		*pDest++ = 0;
   80dfc:	2100      	movs	r1, #0
   80dfe:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80e02:	4293      	cmp	r3, r2
   80e04:	d1fb      	bne.n	80dfe <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e06:	4b0f      	ldr	r3, [pc, #60]	; (80e44 <Reset_Handler+0x88>)
   80e08:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80e0c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80e10:	490d      	ldr	r1, [pc, #52]	; (80e48 <Reset_Handler+0x8c>)
   80e12:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80e14:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80e1c:	d203      	bcs.n	80e26 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80e1e:	688b      	ldr	r3, [r1, #8]
   80e20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80e24:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80e26:	4b09      	ldr	r3, [pc, #36]	; (80e4c <Reset_Handler+0x90>)
   80e28:	4798      	blx	r3

	/* Branch to main function */
	main();
   80e2a:	4b09      	ldr	r3, [pc, #36]	; (80e50 <Reset_Handler+0x94>)
   80e2c:	4798      	blx	r3
   80e2e:	e7fe      	b.n	80e2e <Reset_Handler+0x72>
   80e30:	20070000 	.word	0x20070000
   80e34:	00083f24 	.word	0x00083f24
   80e38:	20070b24 	.word	0x20070b24
   80e3c:	20070d20 	.word	0x20070d20
   80e40:	20070b24 	.word	0x20070b24
   80e44:	00080000 	.word	0x00080000
   80e48:	e000ed00 	.word	0xe000ed00
   80e4c:	0008108d 	.word	0x0008108d
   80e50:	00080fbd 	.word	0x00080fbd

00080e54 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80e54:	4b3d      	ldr	r3, [pc, #244]	; (80f4c <SystemCoreClockUpdate+0xf8>)
   80e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e58:	f003 0303 	and.w	r3, r3, #3
   80e5c:	2b03      	cmp	r3, #3
   80e5e:	d80e      	bhi.n	80e7e <SystemCoreClockUpdate+0x2a>
   80e60:	e8df f003 	tbb	[pc, r3]
   80e64:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80e68:	4b39      	ldr	r3, [pc, #228]	; (80f50 <SystemCoreClockUpdate+0xfc>)
   80e6a:	695b      	ldr	r3, [r3, #20]
   80e6c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80e70:	bf14      	ite	ne
   80e72:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80e76:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80e7a:	4b36      	ldr	r3, [pc, #216]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80e7c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e7e:	4b33      	ldr	r3, [pc, #204]	; (80f4c <SystemCoreClockUpdate+0xf8>)
   80e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e82:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e86:	2b70      	cmp	r3, #112	; 0x70
   80e88:	d057      	beq.n	80f3a <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80e8a:	4b30      	ldr	r3, [pc, #192]	; (80f4c <SystemCoreClockUpdate+0xf8>)
   80e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80e8e:	4931      	ldr	r1, [pc, #196]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80e90:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80e94:	680b      	ldr	r3, [r1, #0]
   80e96:	40d3      	lsrs	r3, r2
   80e98:	600b      	str	r3, [r1, #0]
   80e9a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e9c:	4b2b      	ldr	r3, [pc, #172]	; (80f4c <SystemCoreClockUpdate+0xf8>)
   80e9e:	6a1b      	ldr	r3, [r3, #32]
   80ea0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80ea4:	d003      	beq.n	80eae <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ea6:	4a2c      	ldr	r2, [pc, #176]	; (80f58 <SystemCoreClockUpdate+0x104>)
   80ea8:	4b2a      	ldr	r3, [pc, #168]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80eaa:	601a      	str	r2, [r3, #0]
   80eac:	e7e7      	b.n	80e7e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80eae:	4a2b      	ldr	r2, [pc, #172]	; (80f5c <SystemCoreClockUpdate+0x108>)
   80eb0:	4b28      	ldr	r3, [pc, #160]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80eb2:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80eb4:	4b25      	ldr	r3, [pc, #148]	; (80f4c <SystemCoreClockUpdate+0xf8>)
   80eb6:	6a1b      	ldr	r3, [r3, #32]
   80eb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80ebc:	2b10      	cmp	r3, #16
   80ebe:	d005      	beq.n	80ecc <SystemCoreClockUpdate+0x78>
   80ec0:	2b20      	cmp	r3, #32
   80ec2:	d1dc      	bne.n	80e7e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80ec4:	4a24      	ldr	r2, [pc, #144]	; (80f58 <SystemCoreClockUpdate+0x104>)
   80ec6:	4b23      	ldr	r3, [pc, #140]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80ec8:	601a      	str	r2, [r3, #0]
				break;
   80eca:	e7d8      	b.n	80e7e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80ecc:	4a24      	ldr	r2, [pc, #144]	; (80f60 <SystemCoreClockUpdate+0x10c>)
   80ece:	4b21      	ldr	r3, [pc, #132]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80ed0:	601a      	str	r2, [r3, #0]
				break;
   80ed2:	e7d4      	b.n	80e7e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80ed4:	4b1d      	ldr	r3, [pc, #116]	; (80f4c <SystemCoreClockUpdate+0xf8>)
   80ed6:	6a1b      	ldr	r3, [r3, #32]
   80ed8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80edc:	d00c      	beq.n	80ef8 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80ede:	4a1e      	ldr	r2, [pc, #120]	; (80f58 <SystemCoreClockUpdate+0x104>)
   80ee0:	4b1c      	ldr	r3, [pc, #112]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80ee2:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80ee4:	4b19      	ldr	r3, [pc, #100]	; (80f4c <SystemCoreClockUpdate+0xf8>)
   80ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ee8:	f003 0303 	and.w	r3, r3, #3
   80eec:	2b02      	cmp	r3, #2
   80eee:	d016      	beq.n	80f1e <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80ef0:	4a1c      	ldr	r2, [pc, #112]	; (80f64 <SystemCoreClockUpdate+0x110>)
   80ef2:	4b18      	ldr	r3, [pc, #96]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80ef4:	601a      	str	r2, [r3, #0]
   80ef6:	e7c2      	b.n	80e7e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80ef8:	4a18      	ldr	r2, [pc, #96]	; (80f5c <SystemCoreClockUpdate+0x108>)
   80efa:	4b16      	ldr	r3, [pc, #88]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80efc:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80efe:	4b13      	ldr	r3, [pc, #76]	; (80f4c <SystemCoreClockUpdate+0xf8>)
   80f00:	6a1b      	ldr	r3, [r3, #32]
   80f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f06:	2b10      	cmp	r3, #16
   80f08:	d005      	beq.n	80f16 <SystemCoreClockUpdate+0xc2>
   80f0a:	2b20      	cmp	r3, #32
   80f0c:	d1ea      	bne.n	80ee4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80f0e:	4a12      	ldr	r2, [pc, #72]	; (80f58 <SystemCoreClockUpdate+0x104>)
   80f10:	4b10      	ldr	r3, [pc, #64]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80f12:	601a      	str	r2, [r3, #0]
				break;
   80f14:	e7e6      	b.n	80ee4 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80f16:	4a12      	ldr	r2, [pc, #72]	; (80f60 <SystemCoreClockUpdate+0x10c>)
   80f18:	4b0e      	ldr	r3, [pc, #56]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80f1a:	601a      	str	r2, [r3, #0]
				break;
   80f1c:	e7e2      	b.n	80ee4 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f1e:	4a0b      	ldr	r2, [pc, #44]	; (80f4c <SystemCoreClockUpdate+0xf8>)
   80f20:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f22:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80f24:	480b      	ldr	r0, [pc, #44]	; (80f54 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80f26:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80f2a:	6803      	ldr	r3, [r0, #0]
   80f2c:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80f30:	b2d2      	uxtb	r2, r2
   80f32:	fbb3 f3f2 	udiv	r3, r3, r2
   80f36:	6003      	str	r3, [r0, #0]
   80f38:	e7a1      	b.n	80e7e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80f3a:	4a06      	ldr	r2, [pc, #24]	; (80f54 <SystemCoreClockUpdate+0x100>)
   80f3c:	6813      	ldr	r3, [r2, #0]
   80f3e:	490a      	ldr	r1, [pc, #40]	; (80f68 <SystemCoreClockUpdate+0x114>)
   80f40:	fba1 1303 	umull	r1, r3, r1, r3
   80f44:	085b      	lsrs	r3, r3, #1
   80f46:	6013      	str	r3, [r2, #0]
   80f48:	4770      	bx	lr
   80f4a:	bf00      	nop
   80f4c:	400e0600 	.word	0x400e0600
   80f50:	400e1a10 	.word	0x400e1a10
   80f54:	20070174 	.word	0x20070174
   80f58:	00b71b00 	.word	0x00b71b00
   80f5c:	003d0900 	.word	0x003d0900
   80f60:	007a1200 	.word	0x007a1200
   80f64:	0e4e1c00 	.word	0x0e4e1c00
   80f68:	aaaaaaab 	.word	0xaaaaaaab

00080f6c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80f6c:	4b0a      	ldr	r3, [pc, #40]	; (80f98 <_sbrk+0x2c>)
   80f6e:	681b      	ldr	r3, [r3, #0]
   80f70:	b153      	cbz	r3, 80f88 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80f72:	4b09      	ldr	r3, [pc, #36]	; (80f98 <_sbrk+0x2c>)
   80f74:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80f76:	181a      	adds	r2, r3, r0
   80f78:	4908      	ldr	r1, [pc, #32]	; (80f9c <_sbrk+0x30>)
   80f7a:	4291      	cmp	r1, r2
   80f7c:	db08      	blt.n	80f90 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f7e:	4610      	mov	r0, r2
   80f80:	4a05      	ldr	r2, [pc, #20]	; (80f98 <_sbrk+0x2c>)
   80f82:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f84:	4618      	mov	r0, r3
   80f86:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80f88:	4a05      	ldr	r2, [pc, #20]	; (80fa0 <_sbrk+0x34>)
   80f8a:	4b03      	ldr	r3, [pc, #12]	; (80f98 <_sbrk+0x2c>)
   80f8c:	601a      	str	r2, [r3, #0]
   80f8e:	e7f0      	b.n	80f72 <_sbrk+0x6>
		return (caddr_t) -1;	
   80f90:	f04f 30ff 	mov.w	r0, #4294967295
}
   80f94:	4770      	bx	lr
   80f96:	bf00      	nop
   80f98:	20070cd8 	.word	0x20070cd8
   80f9c:	20087ffc 	.word	0x20087ffc
   80fa0:	20072d20 	.word	0x20072d20

00080fa4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80fa4:	f04f 30ff 	mov.w	r0, #4294967295
   80fa8:	4770      	bx	lr

00080faa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80fae:	604b      	str	r3, [r1, #4]

	return 0;
}
   80fb0:	2000      	movs	r0, #0
   80fb2:	4770      	bx	lr

00080fb4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80fb4:	2001      	movs	r0, #1
   80fb6:	4770      	bx	lr

00080fb8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80fb8:	2000      	movs	r0, #0
   80fba:	4770      	bx	lr

00080fbc <main>:
#include "drivers/console_driver.h"
#include "drivers/delay.h"
#include "pin_mapper.h"

int main (void)
{
   80fbc:	b580      	push	{r7, lr}
	sysclk_init();
   80fbe:	4b2a      	ldr	r3, [pc, #168]	; (81068 <main+0xac>)
   80fc0:	4798      	blx	r3
	board_init();
   80fc2:	4b2a      	ldr	r3, [pc, #168]	; (8106c <main+0xb0>)
   80fc4:	4798      	blx	r3

	delay_init();
   80fc6:	4b2a      	ldr	r3, [pc, #168]	; (81070 <main+0xb4>)
   80fc8:	4798      	blx	r3
   80fca:	200b      	movs	r0, #11
   80fcc:	4c29      	ldr	r4, [pc, #164]	; (81074 <main+0xb8>)
   80fce:	47a0      	blx	r4
   80fd0:	200c      	movs	r0, #12
   80fd2:	47a0      	blx	r4
   80fd4:	200d      	movs	r0, #13
   80fd6:	47a0      	blx	r4
   80fd8:	200e      	movs	r0, #14
   80fda:	47a0      	blx	r4
	ioport_init();
	console_init();
   80fdc:	4b26      	ldr	r3, [pc, #152]	; (81078 <main+0xbc>)
   80fde:	4798      	blx	r3
	
	ioport_enable_pin(pin_mapper(13));
   80fe0:	200d      	movs	r0, #13
   80fe2:	4d26      	ldr	r5, [pc, #152]	; (8107c <main+0xc0>)
   80fe4:	47a8      	blx	r5
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80fe6:	f000 021f 	and.w	r2, r0, #31
   80fea:	2401      	movs	r4, #1
   80fec:	fa04 f202 	lsl.w	r2, r4, r2
	return pin >> 5;
   80ff0:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80ff2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80ff6:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80ffa:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80ffc:	601a      	str	r2, [r3, #0]
	ioport_set_pin_dir(pin_mapper(13), IOPORT_DIR_OUTPUT);
   80ffe:	200d      	movs	r0, #13
   81000:	47a8      	blx	r5
	return pin >> 5;
   81002:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81004:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81008:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8100c:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   8100e:	f000 001f 	and.w	r0, r0, #31
   81012:	4084      	lsls	r4, r0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   81014:	611c      	str	r4, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   81016:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0

	while(1){
		delay_ms(200);
   8101a:	26c8      	movs	r6, #200	; 0xc8
   8101c:	4d18      	ldr	r5, [pc, #96]	; (81080 <main+0xc4>)
		ioport_set_pin_level(pin_mapper(13), 1);
   8101e:	f04f 080d 	mov.w	r8, #13
		delay_ms(200);
   81022:	4630      	mov	r0, r6
   81024:	47a8      	blx	r5
		ioport_set_pin_level(pin_mapper(13), 1);
   81026:	4640      	mov	r0, r8
   81028:	4c14      	ldr	r4, [pc, #80]	; (8107c <main+0xc0>)
   8102a:	47a0      	blx	r4
	return pin >> 5;
   8102c:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8102e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81032:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81036:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   81038:	f000 001f 	and.w	r0, r0, #31
   8103c:	2701      	movs	r7, #1
   8103e:	fa07 f000 	lsl.w	r0, r7, r0
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   81042:	6318      	str	r0, [r3, #48]	; 0x30
		printf("Hello, World!\n");
   81044:	480f      	ldr	r0, [pc, #60]	; (81084 <main+0xc8>)
   81046:	4b10      	ldr	r3, [pc, #64]	; (81088 <main+0xcc>)
   81048:	4798      	blx	r3
		delay_ms(200);
   8104a:	4630      	mov	r0, r6
   8104c:	47a8      	blx	r5
		ioport_set_pin_level(pin_mapper(13), 0);
   8104e:	4640      	mov	r0, r8
   81050:	47a0      	blx	r4
	return pin >> 5;
   81052:	0943      	lsrs	r3, r0, #5
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   81054:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81058:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8105c:	025b      	lsls	r3, r3, #9
	return 1U << (pin & 0x1F);
   8105e:	f000 001f 	and.w	r0, r0, #31
   81062:	4087      	lsls	r7, r0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   81064:	635f      	str	r7, [r3, #52]	; 0x34
   81066:	e7dc      	b.n	81022 <main+0x66>
   81068:	000808ed 	.word	0x000808ed
   8106c:	00080951 	.word	0x00080951
   81070:	000806f1 	.word	0x000806f1
   81074:	00080d65 	.word	0x00080d65
   81078:	0008065d 	.word	0x0008065d
   8107c:	0008047d 	.word	0x0008047d
   81080:	00080769 	.word	0x00080769
   81084:	00083d80 	.word	0x00083d80
   81088:	000810dd 	.word	0x000810dd

0008108c <__libc_init_array>:
   8108c:	b570      	push	{r4, r5, r6, lr}
   8108e:	4e0f      	ldr	r6, [pc, #60]	; (810cc <__libc_init_array+0x40>)
   81090:	4d0f      	ldr	r5, [pc, #60]	; (810d0 <__libc_init_array+0x44>)
   81092:	1b76      	subs	r6, r6, r5
   81094:	10b6      	asrs	r6, r6, #2
   81096:	bf18      	it	ne
   81098:	2400      	movne	r4, #0
   8109a:	d005      	beq.n	810a8 <__libc_init_array+0x1c>
   8109c:	3401      	adds	r4, #1
   8109e:	f855 3b04 	ldr.w	r3, [r5], #4
   810a2:	4798      	blx	r3
   810a4:	42a6      	cmp	r6, r4
   810a6:	d1f9      	bne.n	8109c <__libc_init_array+0x10>
   810a8:	4e0a      	ldr	r6, [pc, #40]	; (810d4 <__libc_init_array+0x48>)
   810aa:	4d0b      	ldr	r5, [pc, #44]	; (810d8 <__libc_init_array+0x4c>)
   810ac:	f002 ff24 	bl	83ef8 <_init>
   810b0:	1b76      	subs	r6, r6, r5
   810b2:	10b6      	asrs	r6, r6, #2
   810b4:	bf18      	it	ne
   810b6:	2400      	movne	r4, #0
   810b8:	d006      	beq.n	810c8 <__libc_init_array+0x3c>
   810ba:	3401      	adds	r4, #1
   810bc:	f855 3b04 	ldr.w	r3, [r5], #4
   810c0:	4798      	blx	r3
   810c2:	42a6      	cmp	r6, r4
   810c4:	d1f9      	bne.n	810ba <__libc_init_array+0x2e>
   810c6:	bd70      	pop	{r4, r5, r6, pc}
   810c8:	bd70      	pop	{r4, r5, r6, pc}
   810ca:	bf00      	nop
   810cc:	00083f04 	.word	0x00083f04
   810d0:	00083f04 	.word	0x00083f04
   810d4:	00083f0c 	.word	0x00083f0c
   810d8:	00083f04 	.word	0x00083f04

000810dc <iprintf>:
   810dc:	b40f      	push	{r0, r1, r2, r3}
   810de:	b510      	push	{r4, lr}
   810e0:	4b07      	ldr	r3, [pc, #28]	; (81100 <iprintf+0x24>)
   810e2:	b082      	sub	sp, #8
   810e4:	ac04      	add	r4, sp, #16
   810e6:	f854 2b04 	ldr.w	r2, [r4], #4
   810ea:	6818      	ldr	r0, [r3, #0]
   810ec:	4623      	mov	r3, r4
   810ee:	6881      	ldr	r1, [r0, #8]
   810f0:	9401      	str	r4, [sp, #4]
   810f2:	f000 f9e7 	bl	814c4 <_vfiprintf_r>
   810f6:	b002      	add	sp, #8
   810f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   810fc:	b004      	add	sp, #16
   810fe:	4770      	bx	lr
   81100:	20070178 	.word	0x20070178

00081104 <memcpy>:
   81104:	4684      	mov	ip, r0
   81106:	ea41 0300 	orr.w	r3, r1, r0
   8110a:	f013 0303 	ands.w	r3, r3, #3
   8110e:	d149      	bne.n	811a4 <memcpy+0xa0>
   81110:	3a40      	subs	r2, #64	; 0x40
   81112:	d323      	bcc.n	8115c <memcpy+0x58>
   81114:	680b      	ldr	r3, [r1, #0]
   81116:	6003      	str	r3, [r0, #0]
   81118:	684b      	ldr	r3, [r1, #4]
   8111a:	6043      	str	r3, [r0, #4]
   8111c:	688b      	ldr	r3, [r1, #8]
   8111e:	6083      	str	r3, [r0, #8]
   81120:	68cb      	ldr	r3, [r1, #12]
   81122:	60c3      	str	r3, [r0, #12]
   81124:	690b      	ldr	r3, [r1, #16]
   81126:	6103      	str	r3, [r0, #16]
   81128:	694b      	ldr	r3, [r1, #20]
   8112a:	6143      	str	r3, [r0, #20]
   8112c:	698b      	ldr	r3, [r1, #24]
   8112e:	6183      	str	r3, [r0, #24]
   81130:	69cb      	ldr	r3, [r1, #28]
   81132:	61c3      	str	r3, [r0, #28]
   81134:	6a0b      	ldr	r3, [r1, #32]
   81136:	6203      	str	r3, [r0, #32]
   81138:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8113a:	6243      	str	r3, [r0, #36]	; 0x24
   8113c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8113e:	6283      	str	r3, [r0, #40]	; 0x28
   81140:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81142:	62c3      	str	r3, [r0, #44]	; 0x2c
   81144:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81146:	6303      	str	r3, [r0, #48]	; 0x30
   81148:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8114a:	6343      	str	r3, [r0, #52]	; 0x34
   8114c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8114e:	6383      	str	r3, [r0, #56]	; 0x38
   81150:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81152:	63c3      	str	r3, [r0, #60]	; 0x3c
   81154:	3040      	adds	r0, #64	; 0x40
   81156:	3140      	adds	r1, #64	; 0x40
   81158:	3a40      	subs	r2, #64	; 0x40
   8115a:	d2db      	bcs.n	81114 <memcpy+0x10>
   8115c:	3230      	adds	r2, #48	; 0x30
   8115e:	d30b      	bcc.n	81178 <memcpy+0x74>
   81160:	680b      	ldr	r3, [r1, #0]
   81162:	6003      	str	r3, [r0, #0]
   81164:	684b      	ldr	r3, [r1, #4]
   81166:	6043      	str	r3, [r0, #4]
   81168:	688b      	ldr	r3, [r1, #8]
   8116a:	6083      	str	r3, [r0, #8]
   8116c:	68cb      	ldr	r3, [r1, #12]
   8116e:	60c3      	str	r3, [r0, #12]
   81170:	3010      	adds	r0, #16
   81172:	3110      	adds	r1, #16
   81174:	3a10      	subs	r2, #16
   81176:	d2f3      	bcs.n	81160 <memcpy+0x5c>
   81178:	320c      	adds	r2, #12
   8117a:	d305      	bcc.n	81188 <memcpy+0x84>
   8117c:	f851 3b04 	ldr.w	r3, [r1], #4
   81180:	f840 3b04 	str.w	r3, [r0], #4
   81184:	3a04      	subs	r2, #4
   81186:	d2f9      	bcs.n	8117c <memcpy+0x78>
   81188:	3204      	adds	r2, #4
   8118a:	d008      	beq.n	8119e <memcpy+0x9a>
   8118c:	07d2      	lsls	r2, r2, #31
   8118e:	bf1c      	itt	ne
   81190:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81194:	f800 3b01 	strbne.w	r3, [r0], #1
   81198:	d301      	bcc.n	8119e <memcpy+0x9a>
   8119a:	880b      	ldrh	r3, [r1, #0]
   8119c:	8003      	strh	r3, [r0, #0]
   8119e:	4660      	mov	r0, ip
   811a0:	4770      	bx	lr
   811a2:	bf00      	nop
   811a4:	2a08      	cmp	r2, #8
   811a6:	d313      	bcc.n	811d0 <memcpy+0xcc>
   811a8:	078b      	lsls	r3, r1, #30
   811aa:	d0b1      	beq.n	81110 <memcpy+0xc>
   811ac:	f010 0303 	ands.w	r3, r0, #3
   811b0:	d0ae      	beq.n	81110 <memcpy+0xc>
   811b2:	f1c3 0304 	rsb	r3, r3, #4
   811b6:	1ad2      	subs	r2, r2, r3
   811b8:	07db      	lsls	r3, r3, #31
   811ba:	bf1c      	itt	ne
   811bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   811c0:	f800 3b01 	strbne.w	r3, [r0], #1
   811c4:	d3a4      	bcc.n	81110 <memcpy+0xc>
   811c6:	f831 3b02 	ldrh.w	r3, [r1], #2
   811ca:	f820 3b02 	strh.w	r3, [r0], #2
   811ce:	e79f      	b.n	81110 <memcpy+0xc>
   811d0:	3a04      	subs	r2, #4
   811d2:	d3d9      	bcc.n	81188 <memcpy+0x84>
   811d4:	3a01      	subs	r2, #1
   811d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   811da:	f800 3b01 	strb.w	r3, [r0], #1
   811de:	d2f9      	bcs.n	811d4 <memcpy+0xd0>
   811e0:	780b      	ldrb	r3, [r1, #0]
   811e2:	7003      	strb	r3, [r0, #0]
   811e4:	784b      	ldrb	r3, [r1, #1]
   811e6:	7043      	strb	r3, [r0, #1]
   811e8:	788b      	ldrb	r3, [r1, #2]
   811ea:	7083      	strb	r3, [r0, #2]
   811ec:	4660      	mov	r0, ip
   811ee:	4770      	bx	lr

000811f0 <memset>:
   811f0:	b470      	push	{r4, r5, r6}
   811f2:	0786      	lsls	r6, r0, #30
   811f4:	d046      	beq.n	81284 <memset+0x94>
   811f6:	1e54      	subs	r4, r2, #1
   811f8:	2a00      	cmp	r2, #0
   811fa:	d041      	beq.n	81280 <memset+0x90>
   811fc:	b2ca      	uxtb	r2, r1
   811fe:	4603      	mov	r3, r0
   81200:	e002      	b.n	81208 <memset+0x18>
   81202:	f114 34ff 	adds.w	r4, r4, #4294967295
   81206:	d33b      	bcc.n	81280 <memset+0x90>
   81208:	f803 2b01 	strb.w	r2, [r3], #1
   8120c:	079d      	lsls	r5, r3, #30
   8120e:	d1f8      	bne.n	81202 <memset+0x12>
   81210:	2c03      	cmp	r4, #3
   81212:	d92e      	bls.n	81272 <memset+0x82>
   81214:	b2cd      	uxtb	r5, r1
   81216:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8121a:	2c0f      	cmp	r4, #15
   8121c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81220:	d919      	bls.n	81256 <memset+0x66>
   81222:	4626      	mov	r6, r4
   81224:	f103 0210 	add.w	r2, r3, #16
   81228:	3e10      	subs	r6, #16
   8122a:	2e0f      	cmp	r6, #15
   8122c:	f842 5c10 	str.w	r5, [r2, #-16]
   81230:	f842 5c0c 	str.w	r5, [r2, #-12]
   81234:	f842 5c08 	str.w	r5, [r2, #-8]
   81238:	f842 5c04 	str.w	r5, [r2, #-4]
   8123c:	f102 0210 	add.w	r2, r2, #16
   81240:	d8f2      	bhi.n	81228 <memset+0x38>
   81242:	f1a4 0210 	sub.w	r2, r4, #16
   81246:	f022 020f 	bic.w	r2, r2, #15
   8124a:	f004 040f 	and.w	r4, r4, #15
   8124e:	3210      	adds	r2, #16
   81250:	2c03      	cmp	r4, #3
   81252:	4413      	add	r3, r2
   81254:	d90d      	bls.n	81272 <memset+0x82>
   81256:	461e      	mov	r6, r3
   81258:	4622      	mov	r2, r4
   8125a:	3a04      	subs	r2, #4
   8125c:	2a03      	cmp	r2, #3
   8125e:	f846 5b04 	str.w	r5, [r6], #4
   81262:	d8fa      	bhi.n	8125a <memset+0x6a>
   81264:	1f22      	subs	r2, r4, #4
   81266:	f022 0203 	bic.w	r2, r2, #3
   8126a:	3204      	adds	r2, #4
   8126c:	4413      	add	r3, r2
   8126e:	f004 0403 	and.w	r4, r4, #3
   81272:	b12c      	cbz	r4, 81280 <memset+0x90>
   81274:	b2c9      	uxtb	r1, r1
   81276:	441c      	add	r4, r3
   81278:	f803 1b01 	strb.w	r1, [r3], #1
   8127c:	429c      	cmp	r4, r3
   8127e:	d1fb      	bne.n	81278 <memset+0x88>
   81280:	bc70      	pop	{r4, r5, r6}
   81282:	4770      	bx	lr
   81284:	4614      	mov	r4, r2
   81286:	4603      	mov	r3, r0
   81288:	e7c2      	b.n	81210 <memset+0x20>
   8128a:	bf00      	nop

0008128c <setbuf>:
   8128c:	2900      	cmp	r1, #0
   8128e:	bf0c      	ite	eq
   81290:	2202      	moveq	r2, #2
   81292:	2200      	movne	r2, #0
   81294:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81298:	f000 b800 	b.w	8129c <setvbuf>

0008129c <setvbuf>:
   8129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   812a0:	4d50      	ldr	r5, [pc, #320]	; (813e4 <setvbuf+0x148>)
   812a2:	b083      	sub	sp, #12
   812a4:	682d      	ldr	r5, [r5, #0]
   812a6:	4604      	mov	r4, r0
   812a8:	460f      	mov	r7, r1
   812aa:	4690      	mov	r8, r2
   812ac:	461e      	mov	r6, r3
   812ae:	b115      	cbz	r5, 812b6 <setvbuf+0x1a>
   812b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   812b2:	2b00      	cmp	r3, #0
   812b4:	d077      	beq.n	813a6 <setvbuf+0x10a>
   812b6:	f1b8 0f02 	cmp.w	r8, #2
   812ba:	d004      	beq.n	812c6 <setvbuf+0x2a>
   812bc:	f1b8 0f01 	cmp.w	r8, #1
   812c0:	d87d      	bhi.n	813be <setvbuf+0x122>
   812c2:	2e00      	cmp	r6, #0
   812c4:	db7b      	blt.n	813be <setvbuf+0x122>
   812c6:	4621      	mov	r1, r4
   812c8:	4628      	mov	r0, r5
   812ca:	f001 f83b 	bl	82344 <_fflush_r>
   812ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
   812d0:	b141      	cbz	r1, 812e4 <setvbuf+0x48>
   812d2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   812d6:	4299      	cmp	r1, r3
   812d8:	d002      	beq.n	812e0 <setvbuf+0x44>
   812da:	4628      	mov	r0, r5
   812dc:	f001 f998 	bl	82610 <_free_r>
   812e0:	2300      	movs	r3, #0
   812e2:	6323      	str	r3, [r4, #48]	; 0x30
   812e4:	2200      	movs	r2, #0
   812e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   812ea:	61a2      	str	r2, [r4, #24]
   812ec:	6062      	str	r2, [r4, #4]
   812ee:	061a      	lsls	r2, r3, #24
   812f0:	d452      	bmi.n	81398 <setvbuf+0xfc>
   812f2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   812f6:	f023 0303 	bic.w	r3, r3, #3
   812fa:	f1b8 0f02 	cmp.w	r8, #2
   812fe:	81a3      	strh	r3, [r4, #12]
   81300:	d037      	beq.n	81372 <setvbuf+0xd6>
   81302:	ab01      	add	r3, sp, #4
   81304:	466a      	mov	r2, sp
   81306:	4621      	mov	r1, r4
   81308:	4628      	mov	r0, r5
   8130a:	f001 fc17 	bl	82b3c <__swhatbuf_r>
   8130e:	89a3      	ldrh	r3, [r4, #12]
   81310:	4318      	orrs	r0, r3
   81312:	81a0      	strh	r0, [r4, #12]
   81314:	b316      	cbz	r6, 8135c <setvbuf+0xc0>
   81316:	b317      	cbz	r7, 8135e <setvbuf+0xc2>
   81318:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8131a:	2b00      	cmp	r3, #0
   8131c:	d04b      	beq.n	813b6 <setvbuf+0x11a>
   8131e:	9b00      	ldr	r3, [sp, #0]
   81320:	6027      	str	r7, [r4, #0]
   81322:	429e      	cmp	r6, r3
   81324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81328:	6127      	str	r7, [r4, #16]
   8132a:	bf1c      	itt	ne
   8132c:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
   81330:	81a3      	strhne	r3, [r4, #12]
   81332:	f1b8 0f01 	cmp.w	r8, #1
   81336:	bf04      	itt	eq
   81338:	f043 0301 	orreq.w	r3, r3, #1
   8133c:	81a3      	strheq	r3, [r4, #12]
   8133e:	b29b      	uxth	r3, r3
   81340:	f013 0008 	ands.w	r0, r3, #8
   81344:	6166      	str	r6, [r4, #20]
   81346:	d023      	beq.n	81390 <setvbuf+0xf4>
   81348:	f013 0001 	ands.w	r0, r3, #1
   8134c:	d02f      	beq.n	813ae <setvbuf+0x112>
   8134e:	2000      	movs	r0, #0
   81350:	4276      	negs	r6, r6
   81352:	61a6      	str	r6, [r4, #24]
   81354:	60a0      	str	r0, [r4, #8]
   81356:	b003      	add	sp, #12
   81358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8135c:	9e00      	ldr	r6, [sp, #0]
   8135e:	4630      	mov	r0, r6
   81360:	f001 fc5e 	bl	82c20 <malloc>
   81364:	4607      	mov	r7, r0
   81366:	b368      	cbz	r0, 813c4 <setvbuf+0x128>
   81368:	89a3      	ldrh	r3, [r4, #12]
   8136a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8136e:	81a3      	strh	r3, [r4, #12]
   81370:	e7d2      	b.n	81318 <setvbuf+0x7c>
   81372:	2000      	movs	r0, #0
   81374:	2500      	movs	r5, #0
   81376:	2101      	movs	r1, #1
   81378:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8137c:	f043 0302 	orr.w	r3, r3, #2
   81380:	81a3      	strh	r3, [r4, #12]
   81382:	60a5      	str	r5, [r4, #8]
   81384:	6161      	str	r1, [r4, #20]
   81386:	6022      	str	r2, [r4, #0]
   81388:	6122      	str	r2, [r4, #16]
   8138a:	b003      	add	sp, #12
   8138c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81390:	60a0      	str	r0, [r4, #8]
   81392:	b003      	add	sp, #12
   81394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81398:	6921      	ldr	r1, [r4, #16]
   8139a:	4628      	mov	r0, r5
   8139c:	f001 f938 	bl	82610 <_free_r>
   813a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   813a4:	e7a5      	b.n	812f2 <setvbuf+0x56>
   813a6:	4628      	mov	r0, r5
   813a8:	f001 f860 	bl	8246c <__sinit>
   813ac:	e783      	b.n	812b6 <setvbuf+0x1a>
   813ae:	60a6      	str	r6, [r4, #8]
   813b0:	b003      	add	sp, #12
   813b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   813b6:	4628      	mov	r0, r5
   813b8:	f001 f858 	bl	8246c <__sinit>
   813bc:	e7af      	b.n	8131e <setvbuf+0x82>
   813be:	f04f 30ff 	mov.w	r0, #4294967295
   813c2:	e7e2      	b.n	8138a <setvbuf+0xee>
   813c4:	f8dd 9000 	ldr.w	r9, [sp]
   813c8:	45b1      	cmp	r9, r6
   813ca:	d006      	beq.n	813da <setvbuf+0x13e>
   813cc:	4648      	mov	r0, r9
   813ce:	f001 fc27 	bl	82c20 <malloc>
   813d2:	4607      	mov	r7, r0
   813d4:	b108      	cbz	r0, 813da <setvbuf+0x13e>
   813d6:	464e      	mov	r6, r9
   813d8:	e7c6      	b.n	81368 <setvbuf+0xcc>
   813da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   813de:	f04f 30ff 	mov.w	r0, #4294967295
   813e2:	e7c7      	b.n	81374 <setvbuf+0xd8>
   813e4:	20070178 	.word	0x20070178

000813e8 <strlen>:
   813e8:	f020 0103 	bic.w	r1, r0, #3
   813ec:	f010 0003 	ands.w	r0, r0, #3
   813f0:	f1c0 0000 	rsb	r0, r0, #0
   813f4:	f851 3b04 	ldr.w	r3, [r1], #4
   813f8:	f100 0c04 	add.w	ip, r0, #4
   813fc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81400:	f06f 0200 	mvn.w	r2, #0
   81404:	bf1c      	itt	ne
   81406:	fa22 f20c 	lsrne.w	r2, r2, ip
   8140a:	4313      	orrne	r3, r2
   8140c:	f04f 0c01 	mov.w	ip, #1
   81410:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81414:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81418:	eba3 020c 	sub.w	r2, r3, ip
   8141c:	ea22 0203 	bic.w	r2, r2, r3
   81420:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81424:	bf04      	itt	eq
   81426:	f851 3b04 	ldreq.w	r3, [r1], #4
   8142a:	3004      	addeq	r0, #4
   8142c:	d0f4      	beq.n	81418 <strlen+0x30>
   8142e:	f1c2 0100 	rsb	r1, r2, #0
   81432:	ea02 0201 	and.w	r2, r2, r1
   81436:	fab2 f282 	clz	r2, r2
   8143a:	f1c2 021f 	rsb	r2, r2, #31
   8143e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   81442:	4770      	bx	lr

00081444 <__sprint_r.part.0>:
   81444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81448:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8144a:	4693      	mov	fp, r2
   8144c:	049c      	lsls	r4, r3, #18
   8144e:	d52f      	bpl.n	814b0 <__sprint_r.part.0+0x6c>
   81450:	6893      	ldr	r3, [r2, #8]
   81452:	6812      	ldr	r2, [r2, #0]
   81454:	b353      	cbz	r3, 814ac <__sprint_r.part.0+0x68>
   81456:	460e      	mov	r6, r1
   81458:	4607      	mov	r7, r0
   8145a:	f102 0908 	add.w	r9, r2, #8
   8145e:	e919 0420 	ldmdb	r9, {r5, sl}
   81462:	ea5f 089a 	movs.w	r8, sl, lsr #2
   81466:	d017      	beq.n	81498 <__sprint_r.part.0+0x54>
   81468:	2400      	movs	r4, #0
   8146a:	3d04      	subs	r5, #4
   8146c:	e001      	b.n	81472 <__sprint_r.part.0+0x2e>
   8146e:	45a0      	cmp	r8, r4
   81470:	d010      	beq.n	81494 <__sprint_r.part.0+0x50>
   81472:	4632      	mov	r2, r6
   81474:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81478:	4638      	mov	r0, r7
   8147a:	f001 f867 	bl	8254c <_fputwc_r>
   8147e:	1c43      	adds	r3, r0, #1
   81480:	f104 0401 	add.w	r4, r4, #1
   81484:	d1f3      	bne.n	8146e <__sprint_r.part.0+0x2a>
   81486:	2300      	movs	r3, #0
   81488:	f8cb 3008 	str.w	r3, [fp, #8]
   8148c:	f8cb 3004 	str.w	r3, [fp, #4]
   81490:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81494:	f8db 3008 	ldr.w	r3, [fp, #8]
   81498:	f02a 0a03 	bic.w	sl, sl, #3
   8149c:	eba3 030a 	sub.w	r3, r3, sl
   814a0:	f8cb 3008 	str.w	r3, [fp, #8]
   814a4:	f109 0908 	add.w	r9, r9, #8
   814a8:	2b00      	cmp	r3, #0
   814aa:	d1d8      	bne.n	8145e <__sprint_r.part.0+0x1a>
   814ac:	2000      	movs	r0, #0
   814ae:	e7ea      	b.n	81486 <__sprint_r.part.0+0x42>
   814b0:	f001 f994 	bl	827dc <__sfvwrite_r>
   814b4:	2300      	movs	r3, #0
   814b6:	f8cb 3008 	str.w	r3, [fp, #8]
   814ba:	f8cb 3004 	str.w	r3, [fp, #4]
   814be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814c2:	bf00      	nop

000814c4 <_vfiprintf_r>:
   814c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814c8:	b0ad      	sub	sp, #180	; 0xb4
   814ca:	461d      	mov	r5, r3
   814cc:	9101      	str	r1, [sp, #4]
   814ce:	4691      	mov	r9, r2
   814d0:	9308      	str	r3, [sp, #32]
   814d2:	9006      	str	r0, [sp, #24]
   814d4:	b118      	cbz	r0, 814de <_vfiprintf_r+0x1a>
   814d6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   814d8:	2b00      	cmp	r3, #0
   814da:	f000 80e0 	beq.w	8169e <_vfiprintf_r+0x1da>
   814de:	9c01      	ldr	r4, [sp, #4]
   814e0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   814e4:	b281      	uxth	r1, r0
   814e6:	048b      	lsls	r3, r1, #18
   814e8:	d407      	bmi.n	814fa <_vfiprintf_r+0x36>
   814ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
   814ec:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   814f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   814f4:	81a1      	strh	r1, [r4, #12]
   814f6:	6663      	str	r3, [r4, #100]	; 0x64
   814f8:	b289      	uxth	r1, r1
   814fa:	070f      	lsls	r7, r1, #28
   814fc:	f140 80b1 	bpl.w	81662 <_vfiprintf_r+0x19e>
   81500:	9b01      	ldr	r3, [sp, #4]
   81502:	691b      	ldr	r3, [r3, #16]
   81504:	2b00      	cmp	r3, #0
   81506:	f000 80ac 	beq.w	81662 <_vfiprintf_r+0x19e>
   8150a:	f001 011a 	and.w	r1, r1, #26
   8150e:	290a      	cmp	r1, #10
   81510:	f000 80b5 	beq.w	8167e <_vfiprintf_r+0x1ba>
   81514:	2300      	movs	r3, #0
   81516:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   8151a:	46d3      	mov	fp, sl
   8151c:	930b      	str	r3, [sp, #44]	; 0x2c
   8151e:	9304      	str	r3, [sp, #16]
   81520:	9311      	str	r3, [sp, #68]	; 0x44
   81522:	9310      	str	r3, [sp, #64]	; 0x40
   81524:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   81528:	f899 3000 	ldrb.w	r3, [r9]
   8152c:	464c      	mov	r4, r9
   8152e:	b1fb      	cbz	r3, 81570 <_vfiprintf_r+0xac>
   81530:	2b25      	cmp	r3, #37	; 0x25
   81532:	d102      	bne.n	8153a <_vfiprintf_r+0x76>
   81534:	e01c      	b.n	81570 <_vfiprintf_r+0xac>
   81536:	2b25      	cmp	r3, #37	; 0x25
   81538:	d003      	beq.n	81542 <_vfiprintf_r+0x7e>
   8153a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8153e:	2b00      	cmp	r3, #0
   81540:	d1f9      	bne.n	81536 <_vfiprintf_r+0x72>
   81542:	eba4 0509 	sub.w	r5, r4, r9
   81546:	b19d      	cbz	r5, 81570 <_vfiprintf_r+0xac>
   81548:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8154a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8154c:	3301      	adds	r3, #1
   8154e:	442a      	add	r2, r5
   81550:	2b07      	cmp	r3, #7
   81552:	f8cb 9000 	str.w	r9, [fp]
   81556:	f8cb 5004 	str.w	r5, [fp, #4]
   8155a:	9211      	str	r2, [sp, #68]	; 0x44
   8155c:	9310      	str	r3, [sp, #64]	; 0x40
   8155e:	dd7a      	ble.n	81656 <_vfiprintf_r+0x192>
   81560:	2a00      	cmp	r2, #0
   81562:	f040 8493 	bne.w	81e8c <_vfiprintf_r+0x9c8>
   81566:	46d3      	mov	fp, sl
   81568:	9b04      	ldr	r3, [sp, #16]
   8156a:	9210      	str	r2, [sp, #64]	; 0x40
   8156c:	442b      	add	r3, r5
   8156e:	9304      	str	r3, [sp, #16]
   81570:	7823      	ldrb	r3, [r4, #0]
   81572:	2b00      	cmp	r3, #0
   81574:	f000 83b6 	beq.w	81ce4 <_vfiprintf_r+0x820>
   81578:	2000      	movs	r0, #0
   8157a:	f04f 0300 	mov.w	r3, #0
   8157e:	f104 0901 	add.w	r9, r4, #1
   81582:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81586:	7862      	ldrb	r2, [r4, #1]
   81588:	4606      	mov	r6, r0
   8158a:	4605      	mov	r5, r0
   8158c:	4603      	mov	r3, r0
   8158e:	f04f 34ff 	mov.w	r4, #4294967295
   81592:	f109 0901 	add.w	r9, r9, #1
   81596:	f1a2 0120 	sub.w	r1, r2, #32
   8159a:	2958      	cmp	r1, #88	; 0x58
   8159c:	f200 830a 	bhi.w	81bb4 <_vfiprintf_r+0x6f0>
   815a0:	e8df f011 	tbh	[pc, r1, lsl #1]
   815a4:	0308023f 	.word	0x0308023f
   815a8:	02e70308 	.word	0x02e70308
   815ac:	03080308 	.word	0x03080308
   815b0:	03080308 	.word	0x03080308
   815b4:	03080308 	.word	0x03080308
   815b8:	02ec0080 	.word	0x02ec0080
   815bc:	00880308 	.word	0x00880308
   815c0:	0308027f 	.word	0x0308027f
   815c4:	01db01d6 	.word	0x01db01d6
   815c8:	01db01db 	.word	0x01db01db
   815cc:	01db01db 	.word	0x01db01db
   815d0:	01db01db 	.word	0x01db01db
   815d4:	01db01db 	.word	0x01db01db
   815d8:	03080308 	.word	0x03080308
   815dc:	03080308 	.word	0x03080308
   815e0:	03080308 	.word	0x03080308
   815e4:	03080308 	.word	0x03080308
   815e8:	03080308 	.word	0x03080308
   815ec:	03080247 	.word	0x03080247
   815f0:	03080308 	.word	0x03080308
   815f4:	03080308 	.word	0x03080308
   815f8:	03080308 	.word	0x03080308
   815fc:	03080308 	.word	0x03080308
   81600:	024e0308 	.word	0x024e0308
   81604:	03080308 	.word	0x03080308
   81608:	03080308 	.word	0x03080308
   8160c:	02520308 	.word	0x02520308
   81610:	03080308 	.word	0x03080308
   81614:	0308025a 	.word	0x0308025a
   81618:	03080308 	.word	0x03080308
   8161c:	03080308 	.word	0x03080308
   81620:	03080308 	.word	0x03080308
   81624:	03080308 	.word	0x03080308
   81628:	01e90308 	.word	0x01e90308
   8162c:	030801fe 	.word	0x030801fe
   81630:	03080308 	.word	0x03080308
   81634:	01fe0303 	.word	0x01fe0303
   81638:	03080308 	.word	0x03080308
   8163c:	03080299 	.word	0x03080299
   81640:	008d02f1 	.word	0x008d02f1
   81644:	02bf02ad 	.word	0x02bf02ad
   81648:	02c40308 	.word	0x02c40308
   8164c:	01c40308 	.word	0x01c40308
   81650:	03080308 	.word	0x03080308
   81654:	02a6      	.short	0x02a6
   81656:	f10b 0b08 	add.w	fp, fp, #8
   8165a:	9b04      	ldr	r3, [sp, #16]
   8165c:	442b      	add	r3, r5
   8165e:	9304      	str	r3, [sp, #16]
   81660:	e786      	b.n	81570 <_vfiprintf_r+0xac>
   81662:	9c01      	ldr	r4, [sp, #4]
   81664:	9806      	ldr	r0, [sp, #24]
   81666:	4621      	mov	r1, r4
   81668:	f000 fd5c 	bl	82124 <__swsetup_r>
   8166c:	2800      	cmp	r0, #0
   8166e:	f040 8345 	bne.w	81cfc <_vfiprintf_r+0x838>
   81672:	89a1      	ldrh	r1, [r4, #12]
   81674:	f001 011a 	and.w	r1, r1, #26
   81678:	290a      	cmp	r1, #10
   8167a:	f47f af4b 	bne.w	81514 <_vfiprintf_r+0x50>
   8167e:	9901      	ldr	r1, [sp, #4]
   81680:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   81684:	2b00      	cmp	r3, #0
   81686:	f6ff af45 	blt.w	81514 <_vfiprintf_r+0x50>
   8168a:	462b      	mov	r3, r5
   8168c:	464a      	mov	r2, r9
   8168e:	9806      	ldr	r0, [sp, #24]
   81690:	f000 fd12 	bl	820b8 <__sbprintf>
   81694:	9004      	str	r0, [sp, #16]
   81696:	9804      	ldr	r0, [sp, #16]
   81698:	b02d      	add	sp, #180	; 0xb4
   8169a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8169e:	f000 fee5 	bl	8246c <__sinit>
   816a2:	e71c      	b.n	814de <_vfiprintf_r+0x1a>
   816a4:	9908      	ldr	r1, [sp, #32]
   816a6:	460a      	mov	r2, r1
   816a8:	680d      	ldr	r5, [r1, #0]
   816aa:	3204      	adds	r2, #4
   816ac:	2d00      	cmp	r5, #0
   816ae:	9208      	str	r2, [sp, #32]
   816b0:	da02      	bge.n	816b8 <_vfiprintf_r+0x1f4>
   816b2:	426d      	negs	r5, r5
   816b4:	f043 0304 	orr.w	r3, r3, #4
   816b8:	f899 2000 	ldrb.w	r2, [r9]
   816bc:	e769      	b.n	81592 <_vfiprintf_r+0xce>
   816be:	9507      	str	r5, [sp, #28]
   816c0:	f013 0220 	ands.w	r2, r3, #32
   816c4:	f040 843d 	bne.w	81f42 <_vfiprintf_r+0xa7e>
   816c8:	f013 0110 	ands.w	r1, r3, #16
   816cc:	f040 83e9 	bne.w	81ea2 <_vfiprintf_r+0x9de>
   816d0:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   816d4:	f000 83e5 	beq.w	81ea2 <_vfiprintf_r+0x9de>
   816d8:	9808      	ldr	r0, [sp, #32]
   816da:	460a      	mov	r2, r1
   816dc:	4601      	mov	r1, r0
   816de:	2700      	movs	r7, #0
   816e0:	3104      	adds	r1, #4
   816e2:	8806      	ldrh	r6, [r0, #0]
   816e4:	9108      	str	r1, [sp, #32]
   816e6:	f04f 0100 	mov.w	r1, #0
   816ea:	2500      	movs	r5, #0
   816ec:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   816f0:	1c61      	adds	r1, r4, #1
   816f2:	f000 8177 	beq.w	819e4 <_vfiprintf_r+0x520>
   816f6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   816fa:	9103      	str	r1, [sp, #12]
   816fc:	ea56 0107 	orrs.w	r1, r6, r7
   81700:	f040 8175 	bne.w	819ee <_vfiprintf_r+0x52a>
   81704:	2c00      	cmp	r4, #0
   81706:	f040 8354 	bne.w	81db2 <_vfiprintf_r+0x8ee>
   8170a:	2a00      	cmp	r2, #0
   8170c:	f040 8393 	bne.w	81e36 <_vfiprintf_r+0x972>
   81710:	f013 0301 	ands.w	r3, r3, #1
   81714:	9305      	str	r3, [sp, #20]
   81716:	f000 8442 	beq.w	81f9e <_vfiprintf_r+0xada>
   8171a:	2330      	movs	r3, #48	; 0x30
   8171c:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
   81720:	f808 3d41 	strb.w	r3, [r8, #-65]!
   81724:	9b05      	ldr	r3, [sp, #20]
   81726:	42a3      	cmp	r3, r4
   81728:	bfb8      	it	lt
   8172a:	4623      	movlt	r3, r4
   8172c:	9302      	str	r3, [sp, #8]
   8172e:	b10d      	cbz	r5, 81734 <_vfiprintf_r+0x270>
   81730:	3301      	adds	r3, #1
   81732:	9302      	str	r3, [sp, #8]
   81734:	9b03      	ldr	r3, [sp, #12]
   81736:	f013 0302 	ands.w	r3, r3, #2
   8173a:	9309      	str	r3, [sp, #36]	; 0x24
   8173c:	d002      	beq.n	81744 <_vfiprintf_r+0x280>
   8173e:	9b02      	ldr	r3, [sp, #8]
   81740:	3302      	adds	r3, #2
   81742:	9302      	str	r3, [sp, #8]
   81744:	9b03      	ldr	r3, [sp, #12]
   81746:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8174a:	930a      	str	r3, [sp, #40]	; 0x28
   8174c:	f040 8261 	bne.w	81c12 <_vfiprintf_r+0x74e>
   81750:	9b07      	ldr	r3, [sp, #28]
   81752:	9a02      	ldr	r2, [sp, #8]
   81754:	1a9d      	subs	r5, r3, r2
   81756:	2d00      	cmp	r5, #0
   81758:	f340 825b 	ble.w	81c12 <_vfiprintf_r+0x74e>
   8175c:	2d10      	cmp	r5, #16
   8175e:	f340 8468 	ble.w	82032 <_vfiprintf_r+0xb6e>
   81762:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81764:	46de      	mov	lr, fp
   81766:	2710      	movs	r7, #16
   81768:	46a3      	mov	fp, r4
   8176a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8176c:	4eb8      	ldr	r6, [pc, #736]	; (81a50 <_vfiprintf_r+0x58c>)
   8176e:	4619      	mov	r1, r3
   81770:	9c06      	ldr	r4, [sp, #24]
   81772:	e007      	b.n	81784 <_vfiprintf_r+0x2c0>
   81774:	f101 0c02 	add.w	ip, r1, #2
   81778:	4601      	mov	r1, r0
   8177a:	f10e 0e08 	add.w	lr, lr, #8
   8177e:	3d10      	subs	r5, #16
   81780:	2d10      	cmp	r5, #16
   81782:	dd11      	ble.n	817a8 <_vfiprintf_r+0x2e4>
   81784:	1c48      	adds	r0, r1, #1
   81786:	3210      	adds	r2, #16
   81788:	2807      	cmp	r0, #7
   8178a:	9211      	str	r2, [sp, #68]	; 0x44
   8178c:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81790:	9010      	str	r0, [sp, #64]	; 0x40
   81792:	ddef      	ble.n	81774 <_vfiprintf_r+0x2b0>
   81794:	2a00      	cmp	r2, #0
   81796:	f040 8227 	bne.w	81be8 <_vfiprintf_r+0x724>
   8179a:	3d10      	subs	r5, #16
   8179c:	2d10      	cmp	r5, #16
   8179e:	4611      	mov	r1, r2
   817a0:	f04f 0c01 	mov.w	ip, #1
   817a4:	46d6      	mov	lr, sl
   817a6:	dced      	bgt.n	81784 <_vfiprintf_r+0x2c0>
   817a8:	465c      	mov	r4, fp
   817aa:	4661      	mov	r1, ip
   817ac:	46f3      	mov	fp, lr
   817ae:	442a      	add	r2, r5
   817b0:	2907      	cmp	r1, #7
   817b2:	9211      	str	r2, [sp, #68]	; 0x44
   817b4:	f8cb 6000 	str.w	r6, [fp]
   817b8:	f8cb 5004 	str.w	r5, [fp, #4]
   817bc:	9110      	str	r1, [sp, #64]	; 0x40
   817be:	f300 82e4 	bgt.w	81d8a <_vfiprintf_r+0x8c6>
   817c2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   817c6:	f10b 0b08 	add.w	fp, fp, #8
   817ca:	1c48      	adds	r0, r1, #1
   817cc:	2d00      	cmp	r5, #0
   817ce:	f040 8228 	bne.w	81c22 <_vfiprintf_r+0x75e>
   817d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   817d4:	2b00      	cmp	r3, #0
   817d6:	f000 8242 	beq.w	81c5e <_vfiprintf_r+0x79a>
   817da:	2102      	movs	r1, #2
   817dc:	ab0e      	add	r3, sp, #56	; 0x38
   817de:	440a      	add	r2, r1
   817e0:	2807      	cmp	r0, #7
   817e2:	9211      	str	r2, [sp, #68]	; 0x44
   817e4:	9010      	str	r0, [sp, #64]	; 0x40
   817e6:	f8cb 1004 	str.w	r1, [fp, #4]
   817ea:	f8cb 3000 	str.w	r3, [fp]
   817ee:	f340 8232 	ble.w	81c56 <_vfiprintf_r+0x792>
   817f2:	2a00      	cmp	r2, #0
   817f4:	f040 8378 	bne.w	81ee8 <_vfiprintf_r+0xa24>
   817f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   817fa:	2001      	movs	r0, #1
   817fc:	2b80      	cmp	r3, #128	; 0x80
   817fe:	4611      	mov	r1, r2
   81800:	46d3      	mov	fp, sl
   81802:	f040 8230 	bne.w	81c66 <_vfiprintf_r+0x7a2>
   81806:	9b07      	ldr	r3, [sp, #28]
   81808:	9d02      	ldr	r5, [sp, #8]
   8180a:	1b5e      	subs	r6, r3, r5
   8180c:	2e00      	cmp	r6, #0
   8180e:	f340 822a 	ble.w	81c66 <_vfiprintf_r+0x7a2>
   81812:	2e10      	cmp	r6, #16
   81814:	f340 8428 	ble.w	82068 <_vfiprintf_r+0xba4>
   81818:	46dc      	mov	ip, fp
   8181a:	2710      	movs	r7, #16
   8181c:	46a3      	mov	fp, r4
   8181e:	4d8d      	ldr	r5, [pc, #564]	; (81a54 <_vfiprintf_r+0x590>)
   81820:	9c06      	ldr	r4, [sp, #24]
   81822:	e007      	b.n	81834 <_vfiprintf_r+0x370>
   81824:	f101 0e02 	add.w	lr, r1, #2
   81828:	4601      	mov	r1, r0
   8182a:	f10c 0c08 	add.w	ip, ip, #8
   8182e:	3e10      	subs	r6, #16
   81830:	2e10      	cmp	r6, #16
   81832:	dd11      	ble.n	81858 <_vfiprintf_r+0x394>
   81834:	1c48      	adds	r0, r1, #1
   81836:	3210      	adds	r2, #16
   81838:	2807      	cmp	r0, #7
   8183a:	9211      	str	r2, [sp, #68]	; 0x44
   8183c:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81840:	9010      	str	r0, [sp, #64]	; 0x40
   81842:	ddef      	ble.n	81824 <_vfiprintf_r+0x360>
   81844:	2a00      	cmp	r2, #0
   81846:	f040 8293 	bne.w	81d70 <_vfiprintf_r+0x8ac>
   8184a:	3e10      	subs	r6, #16
   8184c:	2e10      	cmp	r6, #16
   8184e:	f04f 0e01 	mov.w	lr, #1
   81852:	4611      	mov	r1, r2
   81854:	46d4      	mov	ip, sl
   81856:	dced      	bgt.n	81834 <_vfiprintf_r+0x370>
   81858:	465c      	mov	r4, fp
   8185a:	46e3      	mov	fp, ip
   8185c:	4432      	add	r2, r6
   8185e:	f1be 0f07 	cmp.w	lr, #7
   81862:	9211      	str	r2, [sp, #68]	; 0x44
   81864:	e88b 0060 	stmia.w	fp, {r5, r6}
   81868:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   8186c:	f300 8356 	bgt.w	81f1c <_vfiprintf_r+0xa58>
   81870:	9b05      	ldr	r3, [sp, #20]
   81872:	f10b 0b08 	add.w	fp, fp, #8
   81876:	1ae4      	subs	r4, r4, r3
   81878:	2c00      	cmp	r4, #0
   8187a:	f10e 0001 	add.w	r0, lr, #1
   8187e:	4671      	mov	r1, lr
   81880:	f300 81f6 	bgt.w	81c70 <_vfiprintf_r+0x7ac>
   81884:	9905      	ldr	r1, [sp, #20]
   81886:	2807      	cmp	r0, #7
   81888:	440a      	add	r2, r1
   8188a:	9211      	str	r2, [sp, #68]	; 0x44
   8188c:	f8cb 8000 	str.w	r8, [fp]
   81890:	f8cb 1004 	str.w	r1, [fp, #4]
   81894:	9010      	str	r0, [sp, #64]	; 0x40
   81896:	f340 8252 	ble.w	81d3e <_vfiprintf_r+0x87a>
   8189a:	2a00      	cmp	r2, #0
   8189c:	f040 82eb 	bne.w	81e76 <_vfiprintf_r+0x9b2>
   818a0:	9b03      	ldr	r3, [sp, #12]
   818a2:	9210      	str	r2, [sp, #64]	; 0x40
   818a4:	0758      	lsls	r0, r3, #29
   818a6:	d538      	bpl.n	8191a <_vfiprintf_r+0x456>
   818a8:	9b07      	ldr	r3, [sp, #28]
   818aa:	9902      	ldr	r1, [sp, #8]
   818ac:	1a5c      	subs	r4, r3, r1
   818ae:	2c00      	cmp	r4, #0
   818b0:	f340 82b7 	ble.w	81e22 <_vfiprintf_r+0x95e>
   818b4:	46d3      	mov	fp, sl
   818b6:	2c10      	cmp	r4, #16
   818b8:	f340 83ca 	ble.w	82050 <_vfiprintf_r+0xb8c>
   818bc:	2510      	movs	r5, #16
   818be:	9910      	ldr	r1, [sp, #64]	; 0x40
   818c0:	4e63      	ldr	r6, [pc, #396]	; (81a50 <_vfiprintf_r+0x58c>)
   818c2:	9f06      	ldr	r7, [sp, #24]
   818c4:	f8dd 8004 	ldr.w	r8, [sp, #4]
   818c8:	e006      	b.n	818d8 <_vfiprintf_r+0x414>
   818ca:	1c88      	adds	r0, r1, #2
   818cc:	4619      	mov	r1, r3
   818ce:	f10b 0b08 	add.w	fp, fp, #8
   818d2:	3c10      	subs	r4, #16
   818d4:	2c10      	cmp	r4, #16
   818d6:	dd13      	ble.n	81900 <_vfiprintf_r+0x43c>
   818d8:	1c4b      	adds	r3, r1, #1
   818da:	3210      	adds	r2, #16
   818dc:	2b07      	cmp	r3, #7
   818de:	9211      	str	r2, [sp, #68]	; 0x44
   818e0:	f8cb 6000 	str.w	r6, [fp]
   818e4:	f8cb 5004 	str.w	r5, [fp, #4]
   818e8:	9310      	str	r3, [sp, #64]	; 0x40
   818ea:	ddee      	ble.n	818ca <_vfiprintf_r+0x406>
   818ec:	2a00      	cmp	r2, #0
   818ee:	f040 8209 	bne.w	81d04 <_vfiprintf_r+0x840>
   818f2:	3c10      	subs	r4, #16
   818f4:	2c10      	cmp	r4, #16
   818f6:	f04f 0001 	mov.w	r0, #1
   818fa:	4611      	mov	r1, r2
   818fc:	46d3      	mov	fp, sl
   818fe:	dceb      	bgt.n	818d8 <_vfiprintf_r+0x414>
   81900:	4422      	add	r2, r4
   81902:	2807      	cmp	r0, #7
   81904:	9211      	str	r2, [sp, #68]	; 0x44
   81906:	f8cb 6000 	str.w	r6, [fp]
   8190a:	f8cb 4004 	str.w	r4, [fp, #4]
   8190e:	9010      	str	r0, [sp, #64]	; 0x40
   81910:	f340 8220 	ble.w	81d54 <_vfiprintf_r+0x890>
   81914:	2a00      	cmp	r2, #0
   81916:	f040 8354 	bne.w	81fc2 <_vfiprintf_r+0xafe>
   8191a:	9b04      	ldr	r3, [sp, #16]
   8191c:	9a07      	ldr	r2, [sp, #28]
   8191e:	9902      	ldr	r1, [sp, #8]
   81920:	428a      	cmp	r2, r1
   81922:	bfac      	ite	ge
   81924:	189b      	addge	r3, r3, r2
   81926:	185b      	addlt	r3, r3, r1
   81928:	9304      	str	r3, [sp, #16]
   8192a:	e21c      	b.n	81d66 <_vfiprintf_r+0x8a2>
   8192c:	9507      	str	r5, [sp, #28]
   8192e:	069e      	lsls	r6, r3, #26
   81930:	f100 8313 	bmi.w	81f5a <_vfiprintf_r+0xa96>
   81934:	9908      	ldr	r1, [sp, #32]
   81936:	06dd      	lsls	r5, r3, #27
   81938:	460a      	mov	r2, r1
   8193a:	f100 82c5 	bmi.w	81ec8 <_vfiprintf_r+0xa04>
   8193e:	0658      	lsls	r0, r3, #25
   81940:	f140 82c2 	bpl.w	81ec8 <_vfiprintf_r+0xa04>
   81944:	880e      	ldrh	r6, [r1, #0]
   81946:	3104      	adds	r1, #4
   81948:	2700      	movs	r7, #0
   8194a:	2201      	movs	r2, #1
   8194c:	9108      	str	r1, [sp, #32]
   8194e:	e6ca      	b.n	816e6 <_vfiprintf_r+0x222>
   81950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81954:	f899 2000 	ldrb.w	r2, [r9]
   81958:	e61b      	b.n	81592 <_vfiprintf_r+0xce>
   8195a:	2500      	movs	r5, #0
   8195c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81960:	f819 2b01 	ldrb.w	r2, [r9], #1
   81964:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81968:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   8196c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81970:	2909      	cmp	r1, #9
   81972:	d9f5      	bls.n	81960 <_vfiprintf_r+0x49c>
   81974:	e60f      	b.n	81596 <_vfiprintf_r+0xd2>
   81976:	2201      	movs	r2, #1
   81978:	9808      	ldr	r0, [sp, #32]
   8197a:	4611      	mov	r1, r2
   8197c:	9202      	str	r2, [sp, #8]
   8197e:	6802      	ldr	r2, [r0, #0]
   81980:	f04f 0400 	mov.w	r4, #0
   81984:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81988:	4602      	mov	r2, r0
   8198a:	3204      	adds	r2, #4
   8198c:	9507      	str	r5, [sp, #28]
   8198e:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81992:	9105      	str	r1, [sp, #20]
   81994:	9208      	str	r2, [sp, #32]
   81996:	f10d 0848 	add.w	r8, sp, #72	; 0x48
   8199a:	9303      	str	r3, [sp, #12]
   8199c:	2400      	movs	r4, #0
   8199e:	e6c9      	b.n	81734 <_vfiprintf_r+0x270>
   819a0:	9507      	str	r5, [sp, #28]
   819a2:	2800      	cmp	r0, #0
   819a4:	f040 837e 	bne.w	820a4 <_vfiprintf_r+0xbe0>
   819a8:	069e      	lsls	r6, r3, #26
   819aa:	f100 82ec 	bmi.w	81f86 <_vfiprintf_r+0xac2>
   819ae:	9908      	ldr	r1, [sp, #32]
   819b0:	06dd      	lsls	r5, r3, #27
   819b2:	460a      	mov	r2, r1
   819b4:	f100 8281 	bmi.w	81eba <_vfiprintf_r+0x9f6>
   819b8:	0658      	lsls	r0, r3, #25
   819ba:	f140 827e 	bpl.w	81eba <_vfiprintf_r+0x9f6>
   819be:	f9b1 6000 	ldrsh.w	r6, [r1]
   819c2:	3204      	adds	r2, #4
   819c4:	17f7      	asrs	r7, r6, #31
   819c6:	4630      	mov	r0, r6
   819c8:	4639      	mov	r1, r7
   819ca:	9208      	str	r2, [sp, #32]
   819cc:	2800      	cmp	r0, #0
   819ce:	f171 0200 	sbcs.w	r2, r1, #0
   819d2:	f2c0 82e7 	blt.w	81fa4 <_vfiprintf_r+0xae0>
   819d6:	1c61      	adds	r1, r4, #1
   819d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   819dc:	f04f 0201 	mov.w	r2, #1
   819e0:	f47f ae89 	bne.w	816f6 <_vfiprintf_r+0x232>
   819e4:	ea56 0107 	orrs.w	r1, r6, r7
   819e8:	f000 81e4 	beq.w	81db4 <_vfiprintf_r+0x8f0>
   819ec:	9303      	str	r3, [sp, #12]
   819ee:	2a01      	cmp	r2, #1
   819f0:	f000 8224 	beq.w	81e3c <_vfiprintf_r+0x978>
   819f4:	2a02      	cmp	r2, #2
   819f6:	f040 81f1 	bne.w	81ddc <_vfiprintf_r+0x918>
   819fa:	46d0      	mov	r8, sl
   819fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   819fe:	0933      	lsrs	r3, r6, #4
   81a00:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81a04:	0939      	lsrs	r1, r7, #4
   81a06:	f006 020f 	and.w	r2, r6, #15
   81a0a:	460f      	mov	r7, r1
   81a0c:	461e      	mov	r6, r3
   81a0e:	5c83      	ldrb	r3, [r0, r2]
   81a10:	f808 3d01 	strb.w	r3, [r8, #-1]!
   81a14:	ea56 0307 	orrs.w	r3, r6, r7
   81a18:	d1f1      	bne.n	819fe <_vfiprintf_r+0x53a>
   81a1a:	ebaa 0308 	sub.w	r3, sl, r8
   81a1e:	9305      	str	r3, [sp, #20]
   81a20:	e680      	b.n	81724 <_vfiprintf_r+0x260>
   81a22:	f899 2000 	ldrb.w	r2, [r9]
   81a26:	2e00      	cmp	r6, #0
   81a28:	f47f adb3 	bne.w	81592 <_vfiprintf_r+0xce>
   81a2c:	2001      	movs	r0, #1
   81a2e:	2620      	movs	r6, #32
   81a30:	e5af      	b.n	81592 <_vfiprintf_r+0xce>
   81a32:	9507      	str	r5, [sp, #28]
   81a34:	2800      	cmp	r0, #0
   81a36:	f040 8332 	bne.w	8209e <_vfiprintf_r+0xbda>
   81a3a:	f043 0310 	orr.w	r3, r3, #16
   81a3e:	e7b3      	b.n	819a8 <_vfiprintf_r+0x4e4>
   81a40:	9507      	str	r5, [sp, #28]
   81a42:	f043 0310 	orr.w	r3, r3, #16
   81a46:	e63b      	b.n	816c0 <_vfiprintf_r+0x1fc>
   81a48:	9507      	str	r5, [sp, #28]
   81a4a:	f043 0310 	orr.w	r3, r3, #16
   81a4e:	e76e      	b.n	8192e <_vfiprintf_r+0x46a>
   81a50:	00083dc4 	.word	0x00083dc4
   81a54:	00083dd4 	.word	0x00083dd4
   81a58:	9507      	str	r5, [sp, #28]
   81a5a:	2800      	cmp	r0, #0
   81a5c:	f040 8316 	bne.w	8208c <_vfiprintf_r+0xbc8>
   81a60:	49ae      	ldr	r1, [pc, #696]	; (81d1c <_vfiprintf_r+0x858>)
   81a62:	910b      	str	r1, [sp, #44]	; 0x2c
   81a64:	069f      	lsls	r7, r3, #26
   81a66:	f100 8284 	bmi.w	81f72 <_vfiprintf_r+0xaae>
   81a6a:	9808      	ldr	r0, [sp, #32]
   81a6c:	06de      	lsls	r6, r3, #27
   81a6e:	4601      	mov	r1, r0
   81a70:	f100 821e 	bmi.w	81eb0 <_vfiprintf_r+0x9ec>
   81a74:	065d      	lsls	r5, r3, #25
   81a76:	f140 821b 	bpl.w	81eb0 <_vfiprintf_r+0x9ec>
   81a7a:	2700      	movs	r7, #0
   81a7c:	3104      	adds	r1, #4
   81a7e:	8806      	ldrh	r6, [r0, #0]
   81a80:	9108      	str	r1, [sp, #32]
   81a82:	07d8      	lsls	r0, r3, #31
   81a84:	f140 81d5 	bpl.w	81e32 <_vfiprintf_r+0x96e>
   81a88:	ea56 0107 	orrs.w	r1, r6, r7
   81a8c:	f000 81d1 	beq.w	81e32 <_vfiprintf_r+0x96e>
   81a90:	2130      	movs	r1, #48	; 0x30
   81a92:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81a96:	f043 0302 	orr.w	r3, r3, #2
   81a9a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81a9e:	2202      	movs	r2, #2
   81aa0:	e621      	b.n	816e6 <_vfiprintf_r+0x222>
   81aa2:	f899 2000 	ldrb.w	r2, [r9]
   81aa6:	f109 0701 	add.w	r7, r9, #1
   81aaa:	2a2a      	cmp	r2, #42	; 0x2a
   81aac:	f000 82e0 	beq.w	82070 <_vfiprintf_r+0xbac>
   81ab0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81ab4:	2909      	cmp	r1, #9
   81ab6:	46b9      	mov	r9, r7
   81ab8:	f04f 0400 	mov.w	r4, #0
   81abc:	f63f ad6b 	bhi.w	81596 <_vfiprintf_r+0xd2>
   81ac0:	f819 2b01 	ldrb.w	r2, [r9], #1
   81ac4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81ac8:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81acc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81ad0:	2909      	cmp	r1, #9
   81ad2:	d9f5      	bls.n	81ac0 <_vfiprintf_r+0x5fc>
   81ad4:	e55f      	b.n	81596 <_vfiprintf_r+0xd2>
   81ad6:	f899 2000 	ldrb.w	r2, [r9]
   81ada:	2a6c      	cmp	r2, #108	; 0x6c
   81adc:	bf03      	ittte	eq
   81ade:	f899 2001 	ldrbeq.w	r2, [r9, #1]
   81ae2:	f043 0320 	orreq.w	r3, r3, #32
   81ae6:	f109 0901 	addeq.w	r9, r9, #1
   81aea:	f043 0310 	orrne.w	r3, r3, #16
   81aee:	e550      	b.n	81592 <_vfiprintf_r+0xce>
   81af0:	9507      	str	r5, [sp, #28]
   81af2:	2800      	cmp	r0, #0
   81af4:	f040 82d0 	bne.w	82098 <_vfiprintf_r+0xbd4>
   81af8:	4989      	ldr	r1, [pc, #548]	; (81d20 <_vfiprintf_r+0x85c>)
   81afa:	910b      	str	r1, [sp, #44]	; 0x2c
   81afc:	e7b2      	b.n	81a64 <_vfiprintf_r+0x5a0>
   81afe:	2278      	movs	r2, #120	; 0x78
   81b00:	2130      	movs	r1, #48	; 0x30
   81b02:	9507      	str	r5, [sp, #28]
   81b04:	9d08      	ldr	r5, [sp, #32]
   81b06:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81b0a:	1d2a      	adds	r2, r5, #4
   81b0c:	9208      	str	r2, [sp, #32]
   81b0e:	4a84      	ldr	r2, [pc, #528]	; (81d20 <_vfiprintf_r+0x85c>)
   81b10:	682e      	ldr	r6, [r5, #0]
   81b12:	920b      	str	r2, [sp, #44]	; 0x2c
   81b14:	f043 0302 	orr.w	r3, r3, #2
   81b18:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81b1c:	2700      	movs	r7, #0
   81b1e:	2202      	movs	r2, #2
   81b20:	e5e1      	b.n	816e6 <_vfiprintf_r+0x222>
   81b22:	f043 0320 	orr.w	r3, r3, #32
   81b26:	f899 2000 	ldrb.w	r2, [r9]
   81b2a:	e532      	b.n	81592 <_vfiprintf_r+0xce>
   81b2c:	f04f 0200 	mov.w	r2, #0
   81b30:	9908      	ldr	r1, [sp, #32]
   81b32:	9507      	str	r5, [sp, #28]
   81b34:	f8d1 8000 	ldr.w	r8, [r1]
   81b38:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81b3c:	1d0d      	adds	r5, r1, #4
   81b3e:	f1b8 0f00 	cmp.w	r8, #0
   81b42:	f000 827c 	beq.w	8203e <_vfiprintf_r+0xb7a>
   81b46:	1c67      	adds	r7, r4, #1
   81b48:	f000 825b 	beq.w	82002 <_vfiprintf_r+0xb3e>
   81b4c:	4622      	mov	r2, r4
   81b4e:	2100      	movs	r1, #0
   81b50:	4640      	mov	r0, r8
   81b52:	9302      	str	r3, [sp, #8]
   81b54:	f001 fb24 	bl	831a0 <memchr>
   81b58:	9b02      	ldr	r3, [sp, #8]
   81b5a:	2800      	cmp	r0, #0
   81b5c:	f000 827c 	beq.w	82058 <_vfiprintf_r+0xb94>
   81b60:	eba0 0208 	sub.w	r2, r0, r8
   81b64:	9508      	str	r5, [sp, #32]
   81b66:	9205      	str	r2, [sp, #20]
   81b68:	9303      	str	r3, [sp, #12]
   81b6a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81b6e:	2400      	movs	r4, #0
   81b70:	e5d8      	b.n	81724 <_vfiprintf_r+0x260>
   81b72:	f043 0301 	orr.w	r3, r3, #1
   81b76:	f899 2000 	ldrb.w	r2, [r9]
   81b7a:	e50a      	b.n	81592 <_vfiprintf_r+0xce>
   81b7c:	f899 2000 	ldrb.w	r2, [r9]
   81b80:	2001      	movs	r0, #1
   81b82:	262b      	movs	r6, #43	; 0x2b
   81b84:	e505      	b.n	81592 <_vfiprintf_r+0xce>
   81b86:	2800      	cmp	r0, #0
   81b88:	f040 8283 	bne.w	82092 <_vfiprintf_r+0xbce>
   81b8c:	0699      	lsls	r1, r3, #26
   81b8e:	f100 822b 	bmi.w	81fe8 <_vfiprintf_r+0xb24>
   81b92:	06da      	lsls	r2, r3, #27
   81b94:	d421      	bmi.n	81bda <_vfiprintf_r+0x716>
   81b96:	065b      	lsls	r3, r3, #25
   81b98:	d51f      	bpl.n	81bda <_vfiprintf_r+0x716>
   81b9a:	9a08      	ldr	r2, [sp, #32]
   81b9c:	6813      	ldr	r3, [r2, #0]
   81b9e:	3204      	adds	r2, #4
   81ba0:	9208      	str	r2, [sp, #32]
   81ba2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   81ba6:	801a      	strh	r2, [r3, #0]
   81ba8:	e4be      	b.n	81528 <_vfiprintf_r+0x64>
   81baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81bae:	f899 2000 	ldrb.w	r2, [r9]
   81bb2:	e4ee      	b.n	81592 <_vfiprintf_r+0xce>
   81bb4:	9507      	str	r5, [sp, #28]
   81bb6:	2800      	cmp	r0, #0
   81bb8:	f040 8265 	bne.w	82086 <_vfiprintf_r+0xbc2>
   81bbc:	2a00      	cmp	r2, #0
   81bbe:	f000 8091 	beq.w	81ce4 <_vfiprintf_r+0x820>
   81bc2:	2101      	movs	r1, #1
   81bc4:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81bc8:	f04f 0200 	mov.w	r2, #0
   81bcc:	9102      	str	r1, [sp, #8]
   81bce:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81bd2:	9105      	str	r1, [sp, #20]
   81bd4:	f10d 0848 	add.w	r8, sp, #72	; 0x48
   81bd8:	e6df      	b.n	8199a <_vfiprintf_r+0x4d6>
   81bda:	9a08      	ldr	r2, [sp, #32]
   81bdc:	6813      	ldr	r3, [r2, #0]
   81bde:	3204      	adds	r2, #4
   81be0:	9208      	str	r2, [sp, #32]
   81be2:	9a04      	ldr	r2, [sp, #16]
   81be4:	601a      	str	r2, [r3, #0]
   81be6:	e49f      	b.n	81528 <_vfiprintf_r+0x64>
   81be8:	aa0f      	add	r2, sp, #60	; 0x3c
   81bea:	9901      	ldr	r1, [sp, #4]
   81bec:	4620      	mov	r0, r4
   81bee:	f7ff fc29 	bl	81444 <__sprint_r.part.0>
   81bf2:	2800      	cmp	r0, #0
   81bf4:	d17d      	bne.n	81cf2 <_vfiprintf_r+0x82e>
   81bf6:	9910      	ldr	r1, [sp, #64]	; 0x40
   81bf8:	46d6      	mov	lr, sl
   81bfa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81bfc:	f101 0c01 	add.w	ip, r1, #1
   81c00:	e5bd      	b.n	8177e <_vfiprintf_r+0x2ba>
   81c02:	aa0f      	add	r2, sp, #60	; 0x3c
   81c04:	9901      	ldr	r1, [sp, #4]
   81c06:	9806      	ldr	r0, [sp, #24]
   81c08:	f7ff fc1c 	bl	81444 <__sprint_r.part.0>
   81c0c:	2800      	cmp	r0, #0
   81c0e:	d170      	bne.n	81cf2 <_vfiprintf_r+0x82e>
   81c10:	46d3      	mov	fp, sl
   81c12:	9910      	ldr	r1, [sp, #64]	; 0x40
   81c14:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81c18:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81c1a:	1c48      	adds	r0, r1, #1
   81c1c:	2d00      	cmp	r5, #0
   81c1e:	f43f add8 	beq.w	817d2 <_vfiprintf_r+0x30e>
   81c22:	2101      	movs	r1, #1
   81c24:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81c28:	440a      	add	r2, r1
   81c2a:	2807      	cmp	r0, #7
   81c2c:	9211      	str	r2, [sp, #68]	; 0x44
   81c2e:	9010      	str	r0, [sp, #64]	; 0x40
   81c30:	f8cb 1004 	str.w	r1, [fp, #4]
   81c34:	f8cb 5000 	str.w	r5, [fp]
   81c38:	f340 80b6 	ble.w	81da8 <_vfiprintf_r+0x8e4>
   81c3c:	2a00      	cmp	r2, #0
   81c3e:	f040 8160 	bne.w	81f02 <_vfiprintf_r+0xa3e>
   81c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81c44:	2b00      	cmp	r3, #0
   81c46:	f43f add7 	beq.w	817f8 <_vfiprintf_r+0x334>
   81c4a:	2202      	movs	r2, #2
   81c4c:	4608      	mov	r0, r1
   81c4e:	46d3      	mov	fp, sl
   81c50:	ab0e      	add	r3, sp, #56	; 0x38
   81c52:	921d      	str	r2, [sp, #116]	; 0x74
   81c54:	931c      	str	r3, [sp, #112]	; 0x70
   81c56:	4601      	mov	r1, r0
   81c58:	f10b 0b08 	add.w	fp, fp, #8
   81c5c:	3001      	adds	r0, #1
   81c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81c60:	2b80      	cmp	r3, #128	; 0x80
   81c62:	f43f add0 	beq.w	81806 <_vfiprintf_r+0x342>
   81c66:	9b05      	ldr	r3, [sp, #20]
   81c68:	1ae4      	subs	r4, r4, r3
   81c6a:	2c00      	cmp	r4, #0
   81c6c:	f77f ae0a 	ble.w	81884 <_vfiprintf_r+0x3c0>
   81c70:	2c10      	cmp	r4, #16
   81c72:	f340 81b7 	ble.w	81fe4 <_vfiprintf_r+0xb20>
   81c76:	46de      	mov	lr, fp
   81c78:	2610      	movs	r6, #16
   81c7a:	4d2a      	ldr	r5, [pc, #168]	; (81d24 <_vfiprintf_r+0x860>)
   81c7c:	9f06      	ldr	r7, [sp, #24]
   81c7e:	f8dd b004 	ldr.w	fp, [sp, #4]
   81c82:	e006      	b.n	81c92 <_vfiprintf_r+0x7ce>
   81c84:	1c88      	adds	r0, r1, #2
   81c86:	4619      	mov	r1, r3
   81c88:	f10e 0e08 	add.w	lr, lr, #8
   81c8c:	3c10      	subs	r4, #16
   81c8e:	2c10      	cmp	r4, #16
   81c90:	dd0f      	ble.n	81cb2 <_vfiprintf_r+0x7ee>
   81c92:	1c4b      	adds	r3, r1, #1
   81c94:	3210      	adds	r2, #16
   81c96:	2b07      	cmp	r3, #7
   81c98:	9211      	str	r2, [sp, #68]	; 0x44
   81c9a:	e88e 0060 	stmia.w	lr, {r5, r6}
   81c9e:	9310      	str	r3, [sp, #64]	; 0x40
   81ca0:	ddf0      	ble.n	81c84 <_vfiprintf_r+0x7c0>
   81ca2:	b9a2      	cbnz	r2, 81cce <_vfiprintf_r+0x80a>
   81ca4:	3c10      	subs	r4, #16
   81ca6:	2c10      	cmp	r4, #16
   81ca8:	f04f 0001 	mov.w	r0, #1
   81cac:	4611      	mov	r1, r2
   81cae:	46d6      	mov	lr, sl
   81cb0:	dcef      	bgt.n	81c92 <_vfiprintf_r+0x7ce>
   81cb2:	46f3      	mov	fp, lr
   81cb4:	4422      	add	r2, r4
   81cb6:	2807      	cmp	r0, #7
   81cb8:	9211      	str	r2, [sp, #68]	; 0x44
   81cba:	f8cb 5000 	str.w	r5, [fp]
   81cbe:	f8cb 4004 	str.w	r4, [fp, #4]
   81cc2:	9010      	str	r0, [sp, #64]	; 0x40
   81cc4:	dc30      	bgt.n	81d28 <_vfiprintf_r+0x864>
   81cc6:	f10b 0b08 	add.w	fp, fp, #8
   81cca:	3001      	adds	r0, #1
   81ccc:	e5da      	b.n	81884 <_vfiprintf_r+0x3c0>
   81cce:	aa0f      	add	r2, sp, #60	; 0x3c
   81cd0:	4659      	mov	r1, fp
   81cd2:	4638      	mov	r0, r7
   81cd4:	f7ff fbb6 	bl	81444 <__sprint_r.part.0>
   81cd8:	b958      	cbnz	r0, 81cf2 <_vfiprintf_r+0x82e>
   81cda:	9910      	ldr	r1, [sp, #64]	; 0x40
   81cdc:	46d6      	mov	lr, sl
   81cde:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ce0:	1c48      	adds	r0, r1, #1
   81ce2:	e7d3      	b.n	81c8c <_vfiprintf_r+0x7c8>
   81ce4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81ce6:	b123      	cbz	r3, 81cf2 <_vfiprintf_r+0x82e>
   81ce8:	9806      	ldr	r0, [sp, #24]
   81cea:	aa0f      	add	r2, sp, #60	; 0x3c
   81cec:	9901      	ldr	r1, [sp, #4]
   81cee:	f7ff fba9 	bl	81444 <__sprint_r.part.0>
   81cf2:	9b01      	ldr	r3, [sp, #4]
   81cf4:	899b      	ldrh	r3, [r3, #12]
   81cf6:	065b      	lsls	r3, r3, #25
   81cf8:	f57f accd 	bpl.w	81696 <_vfiprintf_r+0x1d2>
   81cfc:	f04f 33ff 	mov.w	r3, #4294967295
   81d00:	9304      	str	r3, [sp, #16]
   81d02:	e4c8      	b.n	81696 <_vfiprintf_r+0x1d2>
   81d04:	aa0f      	add	r2, sp, #60	; 0x3c
   81d06:	4641      	mov	r1, r8
   81d08:	4638      	mov	r0, r7
   81d0a:	f7ff fb9b 	bl	81444 <__sprint_r.part.0>
   81d0e:	2800      	cmp	r0, #0
   81d10:	d1ef      	bne.n	81cf2 <_vfiprintf_r+0x82e>
   81d12:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d14:	46d3      	mov	fp, sl
   81d16:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d18:	1c48      	adds	r0, r1, #1
   81d1a:	e5da      	b.n	818d2 <_vfiprintf_r+0x40e>
   81d1c:	00083d94 	.word	0x00083d94
   81d20:	00083da8 	.word	0x00083da8
   81d24:	00083dd4 	.word	0x00083dd4
   81d28:	2a00      	cmp	r2, #0
   81d2a:	f040 80fd 	bne.w	81f28 <_vfiprintf_r+0xa64>
   81d2e:	2301      	movs	r3, #1
   81d30:	46d3      	mov	fp, sl
   81d32:	9a05      	ldr	r2, [sp, #20]
   81d34:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
   81d38:	921d      	str	r2, [sp, #116]	; 0x74
   81d3a:	9211      	str	r2, [sp, #68]	; 0x44
   81d3c:	9310      	str	r3, [sp, #64]	; 0x40
   81d3e:	f10b 0b08 	add.w	fp, fp, #8
   81d42:	9b03      	ldr	r3, [sp, #12]
   81d44:	0759      	lsls	r1, r3, #29
   81d46:	d505      	bpl.n	81d54 <_vfiprintf_r+0x890>
   81d48:	9b07      	ldr	r3, [sp, #28]
   81d4a:	9902      	ldr	r1, [sp, #8]
   81d4c:	1a5c      	subs	r4, r3, r1
   81d4e:	2c00      	cmp	r4, #0
   81d50:	f73f adb1 	bgt.w	818b6 <_vfiprintf_r+0x3f2>
   81d54:	9b04      	ldr	r3, [sp, #16]
   81d56:	9907      	ldr	r1, [sp, #28]
   81d58:	9802      	ldr	r0, [sp, #8]
   81d5a:	4281      	cmp	r1, r0
   81d5c:	bfac      	ite	ge
   81d5e:	185b      	addge	r3, r3, r1
   81d60:	181b      	addlt	r3, r3, r0
   81d62:	9304      	str	r3, [sp, #16]
   81d64:	bb7a      	cbnz	r2, 81dc6 <_vfiprintf_r+0x902>
   81d66:	2300      	movs	r3, #0
   81d68:	46d3      	mov	fp, sl
   81d6a:	9310      	str	r3, [sp, #64]	; 0x40
   81d6c:	f7ff bbdc 	b.w	81528 <_vfiprintf_r+0x64>
   81d70:	aa0f      	add	r2, sp, #60	; 0x3c
   81d72:	9901      	ldr	r1, [sp, #4]
   81d74:	4620      	mov	r0, r4
   81d76:	f7ff fb65 	bl	81444 <__sprint_r.part.0>
   81d7a:	2800      	cmp	r0, #0
   81d7c:	d1b9      	bne.n	81cf2 <_vfiprintf_r+0x82e>
   81d7e:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d80:	46d4      	mov	ip, sl
   81d82:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d84:	f101 0e01 	add.w	lr, r1, #1
   81d88:	e551      	b.n	8182e <_vfiprintf_r+0x36a>
   81d8a:	2a00      	cmp	r2, #0
   81d8c:	f47f af39 	bne.w	81c02 <_vfiprintf_r+0x73e>
   81d90:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81d94:	2900      	cmp	r1, #0
   81d96:	f000 810e 	beq.w	81fb6 <_vfiprintf_r+0xaf2>
   81d9a:	2201      	movs	r2, #1
   81d9c:	46d3      	mov	fp, sl
   81d9e:	4610      	mov	r0, r2
   81da0:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81da4:	921d      	str	r2, [sp, #116]	; 0x74
   81da6:	911c      	str	r1, [sp, #112]	; 0x70
   81da8:	4601      	mov	r1, r0
   81daa:	f10b 0b08 	add.w	fp, fp, #8
   81dae:	3001      	adds	r0, #1
   81db0:	e50f      	b.n	817d2 <_vfiprintf_r+0x30e>
   81db2:	9b03      	ldr	r3, [sp, #12]
   81db4:	2a01      	cmp	r2, #1
   81db6:	f000 808e 	beq.w	81ed6 <_vfiprintf_r+0xa12>
   81dba:	2a02      	cmp	r2, #2
   81dbc:	d10b      	bne.n	81dd6 <_vfiprintf_r+0x912>
   81dbe:	9303      	str	r3, [sp, #12]
   81dc0:	2600      	movs	r6, #0
   81dc2:	2700      	movs	r7, #0
   81dc4:	e619      	b.n	819fa <_vfiprintf_r+0x536>
   81dc6:	aa0f      	add	r2, sp, #60	; 0x3c
   81dc8:	9901      	ldr	r1, [sp, #4]
   81dca:	9806      	ldr	r0, [sp, #24]
   81dcc:	f7ff fb3a 	bl	81444 <__sprint_r.part.0>
   81dd0:	2800      	cmp	r0, #0
   81dd2:	d0c8      	beq.n	81d66 <_vfiprintf_r+0x8a2>
   81dd4:	e78d      	b.n	81cf2 <_vfiprintf_r+0x82e>
   81dd6:	2600      	movs	r6, #0
   81dd8:	2700      	movs	r7, #0
   81dda:	9303      	str	r3, [sp, #12]
   81ddc:	4651      	mov	r1, sl
   81dde:	e000      	b.n	81de2 <_vfiprintf_r+0x91e>
   81de0:	4641      	mov	r1, r8
   81de2:	08f2      	lsrs	r2, r6, #3
   81de4:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81de8:	08f8      	lsrs	r0, r7, #3
   81dea:	f006 0307 	and.w	r3, r6, #7
   81dee:	4607      	mov	r7, r0
   81df0:	4616      	mov	r6, r2
   81df2:	3330      	adds	r3, #48	; 0x30
   81df4:	ea56 0207 	orrs.w	r2, r6, r7
   81df8:	f801 3c01 	strb.w	r3, [r1, #-1]
   81dfc:	f101 38ff 	add.w	r8, r1, #4294967295
   81e00:	d1ee      	bne.n	81de0 <_vfiprintf_r+0x91c>
   81e02:	9a03      	ldr	r2, [sp, #12]
   81e04:	07d6      	lsls	r6, r2, #31
   81e06:	f57f ae08 	bpl.w	81a1a <_vfiprintf_r+0x556>
   81e0a:	2b30      	cmp	r3, #48	; 0x30
   81e0c:	f43f ae05 	beq.w	81a1a <_vfiprintf_r+0x556>
   81e10:	2330      	movs	r3, #48	; 0x30
   81e12:	3902      	subs	r1, #2
   81e14:	f808 3c01 	strb.w	r3, [r8, #-1]
   81e18:	ebaa 0301 	sub.w	r3, sl, r1
   81e1c:	9305      	str	r3, [sp, #20]
   81e1e:	4688      	mov	r8, r1
   81e20:	e480      	b.n	81724 <_vfiprintf_r+0x260>
   81e22:	9b04      	ldr	r3, [sp, #16]
   81e24:	9a07      	ldr	r2, [sp, #28]
   81e26:	428a      	cmp	r2, r1
   81e28:	bfac      	ite	ge
   81e2a:	189b      	addge	r3, r3, r2
   81e2c:	185b      	addlt	r3, r3, r1
   81e2e:	9304      	str	r3, [sp, #16]
   81e30:	e799      	b.n	81d66 <_vfiprintf_r+0x8a2>
   81e32:	2202      	movs	r2, #2
   81e34:	e457      	b.n	816e6 <_vfiprintf_r+0x222>
   81e36:	9405      	str	r4, [sp, #20]
   81e38:	46d0      	mov	r8, sl
   81e3a:	e473      	b.n	81724 <_vfiprintf_r+0x260>
   81e3c:	2f00      	cmp	r7, #0
   81e3e:	bf08      	it	eq
   81e40:	2e0a      	cmpeq	r6, #10
   81e42:	d347      	bcc.n	81ed4 <_vfiprintf_r+0xa10>
   81e44:	46d0      	mov	r8, sl
   81e46:	4630      	mov	r0, r6
   81e48:	4639      	mov	r1, r7
   81e4a:	220a      	movs	r2, #10
   81e4c:	2300      	movs	r3, #0
   81e4e:	f001 fdff 	bl	83a50 <__aeabi_uldivmod>
   81e52:	3230      	adds	r2, #48	; 0x30
   81e54:	f808 2d01 	strb.w	r2, [r8, #-1]!
   81e58:	4630      	mov	r0, r6
   81e5a:	4639      	mov	r1, r7
   81e5c:	2300      	movs	r3, #0
   81e5e:	220a      	movs	r2, #10
   81e60:	f001 fdf6 	bl	83a50 <__aeabi_uldivmod>
   81e64:	4606      	mov	r6, r0
   81e66:	460f      	mov	r7, r1
   81e68:	ea56 0307 	orrs.w	r3, r6, r7
   81e6c:	d1eb      	bne.n	81e46 <_vfiprintf_r+0x982>
   81e6e:	ebaa 0308 	sub.w	r3, sl, r8
   81e72:	9305      	str	r3, [sp, #20]
   81e74:	e456      	b.n	81724 <_vfiprintf_r+0x260>
   81e76:	aa0f      	add	r2, sp, #60	; 0x3c
   81e78:	9901      	ldr	r1, [sp, #4]
   81e7a:	9806      	ldr	r0, [sp, #24]
   81e7c:	f7ff fae2 	bl	81444 <__sprint_r.part.0>
   81e80:	2800      	cmp	r0, #0
   81e82:	f47f af36 	bne.w	81cf2 <_vfiprintf_r+0x82e>
   81e86:	46d3      	mov	fp, sl
   81e88:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e8a:	e75a      	b.n	81d42 <_vfiprintf_r+0x87e>
   81e8c:	aa0f      	add	r2, sp, #60	; 0x3c
   81e8e:	9901      	ldr	r1, [sp, #4]
   81e90:	9806      	ldr	r0, [sp, #24]
   81e92:	f7ff fad7 	bl	81444 <__sprint_r.part.0>
   81e96:	2800      	cmp	r0, #0
   81e98:	f47f af2b 	bne.w	81cf2 <_vfiprintf_r+0x82e>
   81e9c:	46d3      	mov	fp, sl
   81e9e:	f7ff bbdc 	b.w	8165a <_vfiprintf_r+0x196>
   81ea2:	9808      	ldr	r0, [sp, #32]
   81ea4:	2700      	movs	r7, #0
   81ea6:	4601      	mov	r1, r0
   81ea8:	3104      	adds	r1, #4
   81eaa:	6806      	ldr	r6, [r0, #0]
   81eac:	9108      	str	r1, [sp, #32]
   81eae:	e41a      	b.n	816e6 <_vfiprintf_r+0x222>
   81eb0:	680e      	ldr	r6, [r1, #0]
   81eb2:	3104      	adds	r1, #4
   81eb4:	9108      	str	r1, [sp, #32]
   81eb6:	2700      	movs	r7, #0
   81eb8:	e5e3      	b.n	81a82 <_vfiprintf_r+0x5be>
   81eba:	6816      	ldr	r6, [r2, #0]
   81ebc:	3204      	adds	r2, #4
   81ebe:	17f7      	asrs	r7, r6, #31
   81ec0:	9208      	str	r2, [sp, #32]
   81ec2:	4630      	mov	r0, r6
   81ec4:	4639      	mov	r1, r7
   81ec6:	e581      	b.n	819cc <_vfiprintf_r+0x508>
   81ec8:	3104      	adds	r1, #4
   81eca:	6816      	ldr	r6, [r2, #0]
   81ecc:	2700      	movs	r7, #0
   81ece:	2201      	movs	r2, #1
   81ed0:	9108      	str	r1, [sp, #32]
   81ed2:	e408      	b.n	816e6 <_vfiprintf_r+0x222>
   81ed4:	9b03      	ldr	r3, [sp, #12]
   81ed6:	9303      	str	r3, [sp, #12]
   81ed8:	2301      	movs	r3, #1
   81eda:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
   81ede:	3630      	adds	r6, #48	; 0x30
   81ee0:	f808 6d41 	strb.w	r6, [r8, #-65]!
   81ee4:	9305      	str	r3, [sp, #20]
   81ee6:	e41d      	b.n	81724 <_vfiprintf_r+0x260>
   81ee8:	aa0f      	add	r2, sp, #60	; 0x3c
   81eea:	9901      	ldr	r1, [sp, #4]
   81eec:	9806      	ldr	r0, [sp, #24]
   81eee:	f7ff faa9 	bl	81444 <__sprint_r.part.0>
   81ef2:	2800      	cmp	r0, #0
   81ef4:	f47f aefd 	bne.w	81cf2 <_vfiprintf_r+0x82e>
   81ef8:	9910      	ldr	r1, [sp, #64]	; 0x40
   81efa:	46d3      	mov	fp, sl
   81efc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81efe:	1c48      	adds	r0, r1, #1
   81f00:	e6ad      	b.n	81c5e <_vfiprintf_r+0x79a>
   81f02:	aa0f      	add	r2, sp, #60	; 0x3c
   81f04:	9901      	ldr	r1, [sp, #4]
   81f06:	9806      	ldr	r0, [sp, #24]
   81f08:	f7ff fa9c 	bl	81444 <__sprint_r.part.0>
   81f0c:	2800      	cmp	r0, #0
   81f0e:	f47f aef0 	bne.w	81cf2 <_vfiprintf_r+0x82e>
   81f12:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f14:	46d3      	mov	fp, sl
   81f16:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f18:	1c48      	adds	r0, r1, #1
   81f1a:	e45a      	b.n	817d2 <_vfiprintf_r+0x30e>
   81f1c:	2a00      	cmp	r2, #0
   81f1e:	d17b      	bne.n	82018 <_vfiprintf_r+0xb54>
   81f20:	2001      	movs	r0, #1
   81f22:	4611      	mov	r1, r2
   81f24:	46d3      	mov	fp, sl
   81f26:	e69e      	b.n	81c66 <_vfiprintf_r+0x7a2>
   81f28:	aa0f      	add	r2, sp, #60	; 0x3c
   81f2a:	9901      	ldr	r1, [sp, #4]
   81f2c:	9806      	ldr	r0, [sp, #24]
   81f2e:	f7ff fa89 	bl	81444 <__sprint_r.part.0>
   81f32:	2800      	cmp	r0, #0
   81f34:	f47f aedd 	bne.w	81cf2 <_vfiprintf_r+0x82e>
   81f38:	9810      	ldr	r0, [sp, #64]	; 0x40
   81f3a:	46d3      	mov	fp, sl
   81f3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f3e:	3001      	adds	r0, #1
   81f40:	e4a0      	b.n	81884 <_vfiprintf_r+0x3c0>
   81f42:	9d08      	ldr	r5, [sp, #32]
   81f44:	3507      	adds	r5, #7
   81f46:	f025 0207 	bic.w	r2, r5, #7
   81f4a:	f102 0108 	add.w	r1, r2, #8
   81f4e:	e9d2 6700 	ldrd	r6, r7, [r2]
   81f52:	9108      	str	r1, [sp, #32]
   81f54:	2200      	movs	r2, #0
   81f56:	f7ff bbc6 	b.w	816e6 <_vfiprintf_r+0x222>
   81f5a:	9d08      	ldr	r5, [sp, #32]
   81f5c:	3507      	adds	r5, #7
   81f5e:	f025 0207 	bic.w	r2, r5, #7
   81f62:	f102 0108 	add.w	r1, r2, #8
   81f66:	e9d2 6700 	ldrd	r6, r7, [r2]
   81f6a:	9108      	str	r1, [sp, #32]
   81f6c:	2201      	movs	r2, #1
   81f6e:	f7ff bbba 	b.w	816e6 <_vfiprintf_r+0x222>
   81f72:	9d08      	ldr	r5, [sp, #32]
   81f74:	3507      	adds	r5, #7
   81f76:	f025 0107 	bic.w	r1, r5, #7
   81f7a:	f101 0008 	add.w	r0, r1, #8
   81f7e:	9008      	str	r0, [sp, #32]
   81f80:	e9d1 6700 	ldrd	r6, r7, [r1]
   81f84:	e57d      	b.n	81a82 <_vfiprintf_r+0x5be>
   81f86:	9d08      	ldr	r5, [sp, #32]
   81f88:	3507      	adds	r5, #7
   81f8a:	f025 0507 	bic.w	r5, r5, #7
   81f8e:	f105 0208 	add.w	r2, r5, #8
   81f92:	e9d5 0100 	ldrd	r0, r1, [r5]
   81f96:	9208      	str	r2, [sp, #32]
   81f98:	4606      	mov	r6, r0
   81f9a:	460f      	mov	r7, r1
   81f9c:	e516      	b.n	819cc <_vfiprintf_r+0x508>
   81f9e:	46d0      	mov	r8, sl
   81fa0:	f7ff bbc0 	b.w	81724 <_vfiprintf_r+0x260>
   81fa4:	252d      	movs	r5, #45	; 0x2d
   81fa6:	4276      	negs	r6, r6
   81fa8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81fac:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   81fb0:	2201      	movs	r2, #1
   81fb2:	f7ff bb9d 	b.w	816f0 <_vfiprintf_r+0x22c>
   81fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81fb8:	b96b      	cbnz	r3, 81fd6 <_vfiprintf_r+0xb12>
   81fba:	4611      	mov	r1, r2
   81fbc:	2001      	movs	r0, #1
   81fbe:	46d3      	mov	fp, sl
   81fc0:	e651      	b.n	81c66 <_vfiprintf_r+0x7a2>
   81fc2:	aa0f      	add	r2, sp, #60	; 0x3c
   81fc4:	9901      	ldr	r1, [sp, #4]
   81fc6:	9806      	ldr	r0, [sp, #24]
   81fc8:	f7ff fa3c 	bl	81444 <__sprint_r.part.0>
   81fcc:	2800      	cmp	r0, #0
   81fce:	f47f ae90 	bne.w	81cf2 <_vfiprintf_r+0x82e>
   81fd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81fd4:	e6be      	b.n	81d54 <_vfiprintf_r+0x890>
   81fd6:	2202      	movs	r2, #2
   81fd8:	ab0e      	add	r3, sp, #56	; 0x38
   81fda:	921d      	str	r2, [sp, #116]	; 0x74
   81fdc:	931c      	str	r3, [sp, #112]	; 0x70
   81fde:	2001      	movs	r0, #1
   81fe0:	46d3      	mov	fp, sl
   81fe2:	e638      	b.n	81c56 <_vfiprintf_r+0x792>
   81fe4:	4d31      	ldr	r5, [pc, #196]	; (820ac <_vfiprintf_r+0xbe8>)
   81fe6:	e665      	b.n	81cb4 <_vfiprintf_r+0x7f0>
   81fe8:	9a08      	ldr	r2, [sp, #32]
   81fea:	4613      	mov	r3, r2
   81fec:	3304      	adds	r3, #4
   81fee:	9308      	str	r3, [sp, #32]
   81ff0:	9b04      	ldr	r3, [sp, #16]
   81ff2:	6811      	ldr	r1, [r2, #0]
   81ff4:	17dd      	asrs	r5, r3, #31
   81ff6:	461a      	mov	r2, r3
   81ff8:	462b      	mov	r3, r5
   81ffa:	e9c1 2300 	strd	r2, r3, [r1]
   81ffe:	f7ff ba93 	b.w	81528 <_vfiprintf_r+0x64>
   82002:	4640      	mov	r0, r8
   82004:	9508      	str	r5, [sp, #32]
   82006:	9303      	str	r3, [sp, #12]
   82008:	f7ff f9ee 	bl	813e8 <strlen>
   8200c:	2400      	movs	r4, #0
   8200e:	9005      	str	r0, [sp, #20]
   82010:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82014:	f7ff bb86 	b.w	81724 <_vfiprintf_r+0x260>
   82018:	aa0f      	add	r2, sp, #60	; 0x3c
   8201a:	9901      	ldr	r1, [sp, #4]
   8201c:	9806      	ldr	r0, [sp, #24]
   8201e:	f7ff fa11 	bl	81444 <__sprint_r.part.0>
   82022:	2800      	cmp	r0, #0
   82024:	f47f ae65 	bne.w	81cf2 <_vfiprintf_r+0x82e>
   82028:	9910      	ldr	r1, [sp, #64]	; 0x40
   8202a:	46d3      	mov	fp, sl
   8202c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8202e:	1c48      	adds	r0, r1, #1
   82030:	e619      	b.n	81c66 <_vfiprintf_r+0x7a2>
   82032:	9910      	ldr	r1, [sp, #64]	; 0x40
   82034:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82036:	3101      	adds	r1, #1
   82038:	4e1d      	ldr	r6, [pc, #116]	; (820b0 <_vfiprintf_r+0xbec>)
   8203a:	f7ff bbb8 	b.w	817ae <_vfiprintf_r+0x2ea>
   8203e:	2c06      	cmp	r4, #6
   82040:	bf28      	it	cs
   82042:	2406      	movcs	r4, #6
   82044:	9508      	str	r5, [sp, #32]
   82046:	9405      	str	r4, [sp, #20]
   82048:	9402      	str	r4, [sp, #8]
   8204a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 820b4 <_vfiprintf_r+0xbf0>
   8204e:	e4a4      	b.n	8199a <_vfiprintf_r+0x4d6>
   82050:	9810      	ldr	r0, [sp, #64]	; 0x40
   82052:	4e17      	ldr	r6, [pc, #92]	; (820b0 <_vfiprintf_r+0xbec>)
   82054:	3001      	adds	r0, #1
   82056:	e453      	b.n	81900 <_vfiprintf_r+0x43c>
   82058:	9405      	str	r4, [sp, #20]
   8205a:	9508      	str	r5, [sp, #32]
   8205c:	9303      	str	r3, [sp, #12]
   8205e:	4604      	mov	r4, r0
   82060:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82064:	f7ff bb5e 	b.w	81724 <_vfiprintf_r+0x260>
   82068:	4686      	mov	lr, r0
   8206a:	4d10      	ldr	r5, [pc, #64]	; (820ac <_vfiprintf_r+0xbe8>)
   8206c:	f7ff bbf6 	b.w	8185c <_vfiprintf_r+0x398>
   82070:	9908      	ldr	r1, [sp, #32]
   82072:	f899 2001 	ldrb.w	r2, [r9, #1]
   82076:	680c      	ldr	r4, [r1, #0]
   82078:	3104      	adds	r1, #4
   8207a:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   8207e:	46b9      	mov	r9, r7
   82080:	9108      	str	r1, [sp, #32]
   82082:	f7ff ba86 	b.w	81592 <_vfiprintf_r+0xce>
   82086:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8208a:	e597      	b.n	81bbc <_vfiprintf_r+0x6f8>
   8208c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82090:	e4e6      	b.n	81a60 <_vfiprintf_r+0x59c>
   82092:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82096:	e579      	b.n	81b8c <_vfiprintf_r+0x6c8>
   82098:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8209c:	e52c      	b.n	81af8 <_vfiprintf_r+0x634>
   8209e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   820a2:	e4ca      	b.n	81a3a <_vfiprintf_r+0x576>
   820a4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   820a8:	e47e      	b.n	819a8 <_vfiprintf_r+0x4e4>
   820aa:	bf00      	nop
   820ac:	00083dd4 	.word	0x00083dd4
   820b0:	00083dc4 	.word	0x00083dc4
   820b4:	00083dbc 	.word	0x00083dbc

000820b8 <__sbprintf>:
   820b8:	b570      	push	{r4, r5, r6, lr}
   820ba:	460c      	mov	r4, r1
   820bc:	2600      	movs	r6, #0
   820be:	f44f 6580 	mov.w	r5, #1024	; 0x400
   820c2:	8989      	ldrh	r1, [r1, #12]
   820c4:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   820c8:	f021 0102 	bic.w	r1, r1, #2
   820cc:	f8ad 100c 	strh.w	r1, [sp, #12]
   820d0:	9606      	str	r6, [sp, #24]
   820d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   820d4:	89e6      	ldrh	r6, [r4, #14]
   820d6:	9119      	str	r1, [sp, #100]	; 0x64
   820d8:	f8ad 600e 	strh.w	r6, [sp, #14]
   820dc:	69e1      	ldr	r1, [r4, #28]
   820de:	6a66      	ldr	r6, [r4, #36]	; 0x24
   820e0:	9107      	str	r1, [sp, #28]
   820e2:	9609      	str	r6, [sp, #36]	; 0x24
   820e4:	4669      	mov	r1, sp
   820e6:	ae1a      	add	r6, sp, #104	; 0x68
   820e8:	9600      	str	r6, [sp, #0]
   820ea:	9604      	str	r6, [sp, #16]
   820ec:	9502      	str	r5, [sp, #8]
   820ee:	9505      	str	r5, [sp, #20]
   820f0:	4606      	mov	r6, r0
   820f2:	f7ff f9e7 	bl	814c4 <_vfiprintf_r>
   820f6:	1e05      	subs	r5, r0, #0
   820f8:	db07      	blt.n	8210a <__sbprintf+0x52>
   820fa:	4630      	mov	r0, r6
   820fc:	4669      	mov	r1, sp
   820fe:	f000 f921 	bl	82344 <_fflush_r>
   82102:	2800      	cmp	r0, #0
   82104:	bf18      	it	ne
   82106:	f04f 35ff 	movne.w	r5, #4294967295
   8210a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8210e:	065b      	lsls	r3, r3, #25
   82110:	d503      	bpl.n	8211a <__sbprintf+0x62>
   82112:	89a3      	ldrh	r3, [r4, #12]
   82114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82118:	81a3      	strh	r3, [r4, #12]
   8211a:	4628      	mov	r0, r5
   8211c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82120:	bd70      	pop	{r4, r5, r6, pc}
   82122:	bf00      	nop

00082124 <__swsetup_r>:
   82124:	b538      	push	{r3, r4, r5, lr}
   82126:	4b30      	ldr	r3, [pc, #192]	; (821e8 <__swsetup_r+0xc4>)
   82128:	4605      	mov	r5, r0
   8212a:	6818      	ldr	r0, [r3, #0]
   8212c:	460c      	mov	r4, r1
   8212e:	b110      	cbz	r0, 82136 <__swsetup_r+0x12>
   82130:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82132:	2b00      	cmp	r3, #0
   82134:	d038      	beq.n	821a8 <__swsetup_r+0x84>
   82136:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8213a:	b293      	uxth	r3, r2
   8213c:	0718      	lsls	r0, r3, #28
   8213e:	d50c      	bpl.n	8215a <__swsetup_r+0x36>
   82140:	6920      	ldr	r0, [r4, #16]
   82142:	b1a8      	cbz	r0, 82170 <__swsetup_r+0x4c>
   82144:	f013 0201 	ands.w	r2, r3, #1
   82148:	d01e      	beq.n	82188 <__swsetup_r+0x64>
   8214a:	2200      	movs	r2, #0
   8214c:	6963      	ldr	r3, [r4, #20]
   8214e:	60a2      	str	r2, [r4, #8]
   82150:	425b      	negs	r3, r3
   82152:	61a3      	str	r3, [r4, #24]
   82154:	b1f0      	cbz	r0, 82194 <__swsetup_r+0x70>
   82156:	2000      	movs	r0, #0
   82158:	bd38      	pop	{r3, r4, r5, pc}
   8215a:	06d9      	lsls	r1, r3, #27
   8215c:	d53b      	bpl.n	821d6 <__swsetup_r+0xb2>
   8215e:	0758      	lsls	r0, r3, #29
   82160:	d425      	bmi.n	821ae <__swsetup_r+0x8a>
   82162:	6920      	ldr	r0, [r4, #16]
   82164:	f042 0308 	orr.w	r3, r2, #8
   82168:	81a3      	strh	r3, [r4, #12]
   8216a:	b29b      	uxth	r3, r3
   8216c:	2800      	cmp	r0, #0
   8216e:	d1e9      	bne.n	82144 <__swsetup_r+0x20>
   82170:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82174:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82178:	d0e4      	beq.n	82144 <__swsetup_r+0x20>
   8217a:	4628      	mov	r0, r5
   8217c:	4621      	mov	r1, r4
   8217e:	f000 fd0b 	bl	82b98 <__smakebuf_r>
   82182:	89a3      	ldrh	r3, [r4, #12]
   82184:	6920      	ldr	r0, [r4, #16]
   82186:	e7dd      	b.n	82144 <__swsetup_r+0x20>
   82188:	0799      	lsls	r1, r3, #30
   8218a:	bf58      	it	pl
   8218c:	6962      	ldrpl	r2, [r4, #20]
   8218e:	60a2      	str	r2, [r4, #8]
   82190:	2800      	cmp	r0, #0
   82192:	d1e0      	bne.n	82156 <__swsetup_r+0x32>
   82194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82198:	061a      	lsls	r2, r3, #24
   8219a:	d5dd      	bpl.n	82158 <__swsetup_r+0x34>
   8219c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821a0:	81a3      	strh	r3, [r4, #12]
   821a2:	f04f 30ff 	mov.w	r0, #4294967295
   821a6:	bd38      	pop	{r3, r4, r5, pc}
   821a8:	f000 f960 	bl	8246c <__sinit>
   821ac:	e7c3      	b.n	82136 <__swsetup_r+0x12>
   821ae:	6b21      	ldr	r1, [r4, #48]	; 0x30
   821b0:	b151      	cbz	r1, 821c8 <__swsetup_r+0xa4>
   821b2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   821b6:	4299      	cmp	r1, r3
   821b8:	d004      	beq.n	821c4 <__swsetup_r+0xa0>
   821ba:	4628      	mov	r0, r5
   821bc:	f000 fa28 	bl	82610 <_free_r>
   821c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   821c4:	2300      	movs	r3, #0
   821c6:	6323      	str	r3, [r4, #48]	; 0x30
   821c8:	2300      	movs	r3, #0
   821ca:	6920      	ldr	r0, [r4, #16]
   821cc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   821d0:	e884 0009 	stmia.w	r4, {r0, r3}
   821d4:	e7c6      	b.n	82164 <__swsetup_r+0x40>
   821d6:	2309      	movs	r3, #9
   821d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   821dc:	602b      	str	r3, [r5, #0]
   821de:	f04f 30ff 	mov.w	r0, #4294967295
   821e2:	81a2      	strh	r2, [r4, #12]
   821e4:	bd38      	pop	{r3, r4, r5, pc}
   821e6:	bf00      	nop
   821e8:	20070178 	.word	0x20070178

000821ec <register_fini>:
   821ec:	4b02      	ldr	r3, [pc, #8]	; (821f8 <register_fini+0xc>)
   821ee:	b113      	cbz	r3, 821f6 <register_fini+0xa>
   821f0:	4802      	ldr	r0, [pc, #8]	; (821fc <register_fini+0x10>)
   821f2:	f000 b805 	b.w	82200 <atexit>
   821f6:	4770      	bx	lr
   821f8:	00000000 	.word	0x00000000
   821fc:	00082481 	.word	0x00082481

00082200 <atexit>:
   82200:	2300      	movs	r3, #0
   82202:	4601      	mov	r1, r0
   82204:	461a      	mov	r2, r3
   82206:	4618      	mov	r0, r3
   82208:	f001 bb28 	b.w	8385c <__register_exitproc>

0008220c <__sflush_r>:
   8220c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82214:	b29a      	uxth	r2, r3
   82216:	460d      	mov	r5, r1
   82218:	0711      	lsls	r1, r2, #28
   8221a:	4680      	mov	r8, r0
   8221c:	d43a      	bmi.n	82294 <__sflush_r+0x88>
   8221e:	686a      	ldr	r2, [r5, #4]
   82220:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82224:	2a00      	cmp	r2, #0
   82226:	81ab      	strh	r3, [r5, #12]
   82228:	dd70      	ble.n	8230c <__sflush_r+0x100>
   8222a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8222c:	2c00      	cmp	r4, #0
   8222e:	d04a      	beq.n	822c6 <__sflush_r+0xba>
   82230:	2200      	movs	r2, #0
   82232:	b29b      	uxth	r3, r3
   82234:	f8d8 6000 	ldr.w	r6, [r8]
   82238:	f8c8 2000 	str.w	r2, [r8]
   8223c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82240:	d068      	beq.n	82314 <__sflush_r+0x108>
   82242:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82244:	075f      	lsls	r7, r3, #29
   82246:	d505      	bpl.n	82254 <__sflush_r+0x48>
   82248:	6869      	ldr	r1, [r5, #4]
   8224a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8224c:	1a52      	subs	r2, r2, r1
   8224e:	b10b      	cbz	r3, 82254 <__sflush_r+0x48>
   82250:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82252:	1ad2      	subs	r2, r2, r3
   82254:	2300      	movs	r3, #0
   82256:	69e9      	ldr	r1, [r5, #28]
   82258:	4640      	mov	r0, r8
   8225a:	47a0      	blx	r4
   8225c:	1c44      	adds	r4, r0, #1
   8225e:	d03d      	beq.n	822dc <__sflush_r+0xd0>
   82260:	2100      	movs	r1, #0
   82262:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82266:	692a      	ldr	r2, [r5, #16]
   82268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8226c:	81ab      	strh	r3, [r5, #12]
   8226e:	04db      	lsls	r3, r3, #19
   82270:	6069      	str	r1, [r5, #4]
   82272:	602a      	str	r2, [r5, #0]
   82274:	d448      	bmi.n	82308 <__sflush_r+0xfc>
   82276:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82278:	f8c8 6000 	str.w	r6, [r8]
   8227c:	b319      	cbz	r1, 822c6 <__sflush_r+0xba>
   8227e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82282:	4299      	cmp	r1, r3
   82284:	d002      	beq.n	8228c <__sflush_r+0x80>
   82286:	4640      	mov	r0, r8
   82288:	f000 f9c2 	bl	82610 <_free_r>
   8228c:	2000      	movs	r0, #0
   8228e:	6328      	str	r0, [r5, #48]	; 0x30
   82290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82294:	692e      	ldr	r6, [r5, #16]
   82296:	b1b6      	cbz	r6, 822c6 <__sflush_r+0xba>
   82298:	0791      	lsls	r1, r2, #30
   8229a:	bf18      	it	ne
   8229c:	2300      	movne	r3, #0
   8229e:	682c      	ldr	r4, [r5, #0]
   822a0:	bf08      	it	eq
   822a2:	696b      	ldreq	r3, [r5, #20]
   822a4:	602e      	str	r6, [r5, #0]
   822a6:	1ba4      	subs	r4, r4, r6
   822a8:	60ab      	str	r3, [r5, #8]
   822aa:	e00a      	b.n	822c2 <__sflush_r+0xb6>
   822ac:	4623      	mov	r3, r4
   822ae:	4632      	mov	r2, r6
   822b0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   822b2:	69e9      	ldr	r1, [r5, #28]
   822b4:	4640      	mov	r0, r8
   822b6:	47b8      	blx	r7
   822b8:	2800      	cmp	r0, #0
   822ba:	eba4 0400 	sub.w	r4, r4, r0
   822be:	4406      	add	r6, r0
   822c0:	dd04      	ble.n	822cc <__sflush_r+0xc0>
   822c2:	2c00      	cmp	r4, #0
   822c4:	dcf2      	bgt.n	822ac <__sflush_r+0xa0>
   822c6:	2000      	movs	r0, #0
   822c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822cc:	89ab      	ldrh	r3, [r5, #12]
   822ce:	f04f 30ff 	mov.w	r0, #4294967295
   822d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   822d6:	81ab      	strh	r3, [r5, #12]
   822d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   822dc:	f8d8 4000 	ldr.w	r4, [r8]
   822e0:	2c1d      	cmp	r4, #29
   822e2:	d8f3      	bhi.n	822cc <__sflush_r+0xc0>
   822e4:	4b16      	ldr	r3, [pc, #88]	; (82340 <__sflush_r+0x134>)
   822e6:	40e3      	lsrs	r3, r4
   822e8:	43db      	mvns	r3, r3
   822ea:	f013 0301 	ands.w	r3, r3, #1
   822ee:	d1ed      	bne.n	822cc <__sflush_r+0xc0>
   822f0:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   822f4:	6929      	ldr	r1, [r5, #16]
   822f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   822fa:	81aa      	strh	r2, [r5, #12]
   822fc:	04d2      	lsls	r2, r2, #19
   822fe:	606b      	str	r3, [r5, #4]
   82300:	6029      	str	r1, [r5, #0]
   82302:	d5b8      	bpl.n	82276 <__sflush_r+0x6a>
   82304:	2c00      	cmp	r4, #0
   82306:	d1b6      	bne.n	82276 <__sflush_r+0x6a>
   82308:	6528      	str	r0, [r5, #80]	; 0x50
   8230a:	e7b4      	b.n	82276 <__sflush_r+0x6a>
   8230c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8230e:	2a00      	cmp	r2, #0
   82310:	dc8b      	bgt.n	8222a <__sflush_r+0x1e>
   82312:	e7d8      	b.n	822c6 <__sflush_r+0xba>
   82314:	2301      	movs	r3, #1
   82316:	69e9      	ldr	r1, [r5, #28]
   82318:	4640      	mov	r0, r8
   8231a:	47a0      	blx	r4
   8231c:	1c43      	adds	r3, r0, #1
   8231e:	4602      	mov	r2, r0
   82320:	d002      	beq.n	82328 <__sflush_r+0x11c>
   82322:	89ab      	ldrh	r3, [r5, #12]
   82324:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82326:	e78d      	b.n	82244 <__sflush_r+0x38>
   82328:	f8d8 3000 	ldr.w	r3, [r8]
   8232c:	2b00      	cmp	r3, #0
   8232e:	d0f8      	beq.n	82322 <__sflush_r+0x116>
   82330:	2b1d      	cmp	r3, #29
   82332:	d001      	beq.n	82338 <__sflush_r+0x12c>
   82334:	2b16      	cmp	r3, #22
   82336:	d1c9      	bne.n	822cc <__sflush_r+0xc0>
   82338:	f8c8 6000 	str.w	r6, [r8]
   8233c:	e7c3      	b.n	822c6 <__sflush_r+0xba>
   8233e:	bf00      	nop
   82340:	20400001 	.word	0x20400001

00082344 <_fflush_r>:
   82344:	b510      	push	{r4, lr}
   82346:	4604      	mov	r4, r0
   82348:	b082      	sub	sp, #8
   8234a:	b108      	cbz	r0, 82350 <_fflush_r+0xc>
   8234c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8234e:	b153      	cbz	r3, 82366 <_fflush_r+0x22>
   82350:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   82354:	b908      	cbnz	r0, 8235a <_fflush_r+0x16>
   82356:	b002      	add	sp, #8
   82358:	bd10      	pop	{r4, pc}
   8235a:	4620      	mov	r0, r4
   8235c:	b002      	add	sp, #8
   8235e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82362:	f7ff bf53 	b.w	8220c <__sflush_r>
   82366:	9101      	str	r1, [sp, #4]
   82368:	f000 f880 	bl	8246c <__sinit>
   8236c:	9901      	ldr	r1, [sp, #4]
   8236e:	e7ef      	b.n	82350 <_fflush_r+0xc>

00082370 <_cleanup_r>:
   82370:	4901      	ldr	r1, [pc, #4]	; (82378 <_cleanup_r+0x8>)
   82372:	f000 bbad 	b.w	82ad0 <_fwalk_reent>
   82376:	bf00      	nop
   82378:	0008392d 	.word	0x0008392d

0008237c <__sinit.part.1>:
   8237c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82380:	4607      	mov	r7, r0
   82382:	2400      	movs	r4, #0
   82384:	2304      	movs	r3, #4
   82386:	2103      	movs	r1, #3
   82388:	687d      	ldr	r5, [r7, #4]
   8238a:	4833      	ldr	r0, [pc, #204]	; (82458 <__sinit.part.1+0xdc>)
   8238c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   82390:	63f8      	str	r0, [r7, #60]	; 0x3c
   82392:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   82396:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   8239a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8239e:	b083      	sub	sp, #12
   823a0:	602c      	str	r4, [r5, #0]
   823a2:	606c      	str	r4, [r5, #4]
   823a4:	60ac      	str	r4, [r5, #8]
   823a6:	666c      	str	r4, [r5, #100]	; 0x64
   823a8:	81ec      	strh	r4, [r5, #14]
   823aa:	612c      	str	r4, [r5, #16]
   823ac:	616c      	str	r4, [r5, #20]
   823ae:	61ac      	str	r4, [r5, #24]
   823b0:	81ab      	strh	r3, [r5, #12]
   823b2:	4621      	mov	r1, r4
   823b4:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   823b8:	2208      	movs	r2, #8
   823ba:	f7fe ff19 	bl	811f0 <memset>
   823be:	2301      	movs	r3, #1
   823c0:	2209      	movs	r2, #9
   823c2:	68be      	ldr	r6, [r7, #8]
   823c4:	f8df b094 	ldr.w	fp, [pc, #148]	; 8245c <__sinit.part.1+0xe0>
   823c8:	f8df a094 	ldr.w	sl, [pc, #148]	; 82460 <__sinit.part.1+0xe4>
   823cc:	f8df 9094 	ldr.w	r9, [pc, #148]	; 82464 <__sinit.part.1+0xe8>
   823d0:	f8df 8094 	ldr.w	r8, [pc, #148]	; 82468 <__sinit.part.1+0xec>
   823d4:	f8c5 b020 	str.w	fp, [r5, #32]
   823d8:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   823dc:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   823e0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   823e4:	61ed      	str	r5, [r5, #28]
   823e6:	4621      	mov	r1, r4
   823e8:	81f3      	strh	r3, [r6, #14]
   823ea:	81b2      	strh	r2, [r6, #12]
   823ec:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   823f0:	6034      	str	r4, [r6, #0]
   823f2:	6074      	str	r4, [r6, #4]
   823f4:	60b4      	str	r4, [r6, #8]
   823f6:	6674      	str	r4, [r6, #100]	; 0x64
   823f8:	6134      	str	r4, [r6, #16]
   823fa:	6174      	str	r4, [r6, #20]
   823fc:	61b4      	str	r4, [r6, #24]
   823fe:	2208      	movs	r2, #8
   82400:	9301      	str	r3, [sp, #4]
   82402:	f7fe fef5 	bl	811f0 <memset>
   82406:	2012      	movs	r0, #18
   82408:	2202      	movs	r2, #2
   8240a:	68fd      	ldr	r5, [r7, #12]
   8240c:	4621      	mov	r1, r4
   8240e:	61f6      	str	r6, [r6, #28]
   82410:	f8c6 b020 	str.w	fp, [r6, #32]
   82414:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   82418:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   8241c:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   82420:	81a8      	strh	r0, [r5, #12]
   82422:	81ea      	strh	r2, [r5, #14]
   82424:	602c      	str	r4, [r5, #0]
   82426:	606c      	str	r4, [r5, #4]
   82428:	60ac      	str	r4, [r5, #8]
   8242a:	666c      	str	r4, [r5, #100]	; 0x64
   8242c:	612c      	str	r4, [r5, #16]
   8242e:	616c      	str	r4, [r5, #20]
   82430:	61ac      	str	r4, [r5, #24]
   82432:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   82436:	2208      	movs	r2, #8
   82438:	f7fe feda 	bl	811f0 <memset>
   8243c:	9b01      	ldr	r3, [sp, #4]
   8243e:	61ed      	str	r5, [r5, #28]
   82440:	f8c5 b020 	str.w	fp, [r5, #32]
   82444:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   82448:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8244c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   82450:	63bb      	str	r3, [r7, #56]	; 0x38
   82452:	b003      	add	sp, #12
   82454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82458:	00082371 	.word	0x00082371
   8245c:	0008368d 	.word	0x0008368d
   82460:	000836b1 	.word	0x000836b1
   82464:	000836ed 	.word	0x000836ed
   82468:	0008370d 	.word	0x0008370d

0008246c <__sinit>:
   8246c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8246e:	b103      	cbz	r3, 82472 <__sinit+0x6>
   82470:	4770      	bx	lr
   82472:	f7ff bf83 	b.w	8237c <__sinit.part.1>
   82476:	bf00      	nop

00082478 <__sfp_lock_acquire>:
   82478:	4770      	bx	lr
   8247a:	bf00      	nop

0008247c <__sfp_lock_release>:
   8247c:	4770      	bx	lr
   8247e:	bf00      	nop

00082480 <__libc_fini_array>:
   82480:	b538      	push	{r3, r4, r5, lr}
   82482:	4c0a      	ldr	r4, [pc, #40]	; (824ac <__libc_fini_array+0x2c>)
   82484:	4d0a      	ldr	r5, [pc, #40]	; (824b0 <__libc_fini_array+0x30>)
   82486:	1b64      	subs	r4, r4, r5
   82488:	10a4      	asrs	r4, r4, #2
   8248a:	d00a      	beq.n	824a2 <__libc_fini_array+0x22>
   8248c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82490:	3b01      	subs	r3, #1
   82492:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82496:	3c01      	subs	r4, #1
   82498:	f855 3904 	ldr.w	r3, [r5], #-4
   8249c:	4798      	blx	r3
   8249e:	2c00      	cmp	r4, #0
   824a0:	d1f9      	bne.n	82496 <__libc_fini_array+0x16>
   824a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   824a6:	f001 bd31 	b.w	83f0c <_fini>
   824aa:	bf00      	nop
   824ac:	00083f1c 	.word	0x00083f1c
   824b0:	00083f18 	.word	0x00083f18

000824b4 <__fputwc>:
   824b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   824b8:	b083      	sub	sp, #12
   824ba:	4607      	mov	r7, r0
   824bc:	4688      	mov	r8, r1
   824be:	4614      	mov	r4, r2
   824c0:	f000 fb2e 	bl	82b20 <__locale_mb_cur_max>
   824c4:	2801      	cmp	r0, #1
   824c6:	d033      	beq.n	82530 <__fputwc+0x7c>
   824c8:	4642      	mov	r2, r8
   824ca:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   824ce:	a901      	add	r1, sp, #4
   824d0:	4638      	mov	r0, r7
   824d2:	f001 f977 	bl	837c4 <_wcrtomb_r>
   824d6:	1c42      	adds	r2, r0, #1
   824d8:	4606      	mov	r6, r0
   824da:	d022      	beq.n	82522 <__fputwc+0x6e>
   824dc:	b390      	cbz	r0, 82544 <__fputwc+0x90>
   824de:	f89d 1004 	ldrb.w	r1, [sp, #4]
   824e2:	2500      	movs	r5, #0
   824e4:	f10d 0904 	add.w	r9, sp, #4
   824e8:	e008      	b.n	824fc <__fputwc+0x48>
   824ea:	6823      	ldr	r3, [r4, #0]
   824ec:	1c5a      	adds	r2, r3, #1
   824ee:	6022      	str	r2, [r4, #0]
   824f0:	7019      	strb	r1, [r3, #0]
   824f2:	3501      	adds	r5, #1
   824f4:	42b5      	cmp	r5, r6
   824f6:	d225      	bcs.n	82544 <__fputwc+0x90>
   824f8:	f815 1009 	ldrb.w	r1, [r5, r9]
   824fc:	68a3      	ldr	r3, [r4, #8]
   824fe:	3b01      	subs	r3, #1
   82500:	2b00      	cmp	r3, #0
   82502:	60a3      	str	r3, [r4, #8]
   82504:	daf1      	bge.n	824ea <__fputwc+0x36>
   82506:	69a2      	ldr	r2, [r4, #24]
   82508:	4293      	cmp	r3, r2
   8250a:	db01      	blt.n	82510 <__fputwc+0x5c>
   8250c:	290a      	cmp	r1, #10
   8250e:	d1ec      	bne.n	824ea <__fputwc+0x36>
   82510:	4622      	mov	r2, r4
   82512:	4638      	mov	r0, r7
   82514:	f001 f8fe 	bl	83714 <__swbuf_r>
   82518:	1c43      	adds	r3, r0, #1
   8251a:	d1ea      	bne.n	824f2 <__fputwc+0x3e>
   8251c:	b003      	add	sp, #12
   8251e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82522:	89a3      	ldrh	r3, [r4, #12]
   82524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82528:	81a3      	strh	r3, [r4, #12]
   8252a:	b003      	add	sp, #12
   8252c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82530:	f108 33ff 	add.w	r3, r8, #4294967295
   82534:	2bfe      	cmp	r3, #254	; 0xfe
   82536:	d8c7      	bhi.n	824c8 <__fputwc+0x14>
   82538:	fa5f f188 	uxtb.w	r1, r8
   8253c:	4606      	mov	r6, r0
   8253e:	f88d 1004 	strb.w	r1, [sp, #4]
   82542:	e7ce      	b.n	824e2 <__fputwc+0x2e>
   82544:	4640      	mov	r0, r8
   82546:	b003      	add	sp, #12
   82548:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008254c <_fputwc_r>:
   8254c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   82550:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   82554:	d10a      	bne.n	8256c <_fputwc_r+0x20>
   82556:	b410      	push	{r4}
   82558:	6e54      	ldr	r4, [r2, #100]	; 0x64
   8255a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8255e:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   82562:	6654      	str	r4, [r2, #100]	; 0x64
   82564:	8193      	strh	r3, [r2, #12]
   82566:	bc10      	pop	{r4}
   82568:	f7ff bfa4 	b.w	824b4 <__fputwc>
   8256c:	f7ff bfa2 	b.w	824b4 <__fputwc>

00082570 <_malloc_trim_r>:
   82570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82572:	460c      	mov	r4, r1
   82574:	4f23      	ldr	r7, [pc, #140]	; (82604 <_malloc_trim_r+0x94>)
   82576:	4606      	mov	r6, r0
   82578:	f000 febc 	bl	832f4 <__malloc_lock>
   8257c:	68bb      	ldr	r3, [r7, #8]
   8257e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82582:	685d      	ldr	r5, [r3, #4]
   82584:	310f      	adds	r1, #15
   82586:	f025 0503 	bic.w	r5, r5, #3
   8258a:	4429      	add	r1, r5
   8258c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82590:	f021 010f 	bic.w	r1, r1, #15
   82594:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82598:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8259c:	db07      	blt.n	825ae <_malloc_trim_r+0x3e>
   8259e:	2100      	movs	r1, #0
   825a0:	4630      	mov	r0, r6
   825a2:	f001 f861 	bl	83668 <_sbrk_r>
   825a6:	68bb      	ldr	r3, [r7, #8]
   825a8:	442b      	add	r3, r5
   825aa:	4298      	cmp	r0, r3
   825ac:	d004      	beq.n	825b8 <_malloc_trim_r+0x48>
   825ae:	4630      	mov	r0, r6
   825b0:	f000 fea2 	bl	832f8 <__malloc_unlock>
   825b4:	2000      	movs	r0, #0
   825b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   825b8:	4261      	negs	r1, r4
   825ba:	4630      	mov	r0, r6
   825bc:	f001 f854 	bl	83668 <_sbrk_r>
   825c0:	3001      	adds	r0, #1
   825c2:	d00d      	beq.n	825e0 <_malloc_trim_r+0x70>
   825c4:	4b10      	ldr	r3, [pc, #64]	; (82608 <_malloc_trim_r+0x98>)
   825c6:	68ba      	ldr	r2, [r7, #8]
   825c8:	6819      	ldr	r1, [r3, #0]
   825ca:	1b2d      	subs	r5, r5, r4
   825cc:	f045 0501 	orr.w	r5, r5, #1
   825d0:	4630      	mov	r0, r6
   825d2:	1b09      	subs	r1, r1, r4
   825d4:	6055      	str	r5, [r2, #4]
   825d6:	6019      	str	r1, [r3, #0]
   825d8:	f000 fe8e 	bl	832f8 <__malloc_unlock>
   825dc:	2001      	movs	r0, #1
   825de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   825e0:	2100      	movs	r1, #0
   825e2:	4630      	mov	r0, r6
   825e4:	f001 f840 	bl	83668 <_sbrk_r>
   825e8:	68ba      	ldr	r2, [r7, #8]
   825ea:	1a83      	subs	r3, r0, r2
   825ec:	2b0f      	cmp	r3, #15
   825ee:	ddde      	ble.n	825ae <_malloc_trim_r+0x3e>
   825f0:	4c06      	ldr	r4, [pc, #24]	; (8260c <_malloc_trim_r+0x9c>)
   825f2:	4905      	ldr	r1, [pc, #20]	; (82608 <_malloc_trim_r+0x98>)
   825f4:	6824      	ldr	r4, [r4, #0]
   825f6:	f043 0301 	orr.w	r3, r3, #1
   825fa:	1b00      	subs	r0, r0, r4
   825fc:	6053      	str	r3, [r2, #4]
   825fe:	6008      	str	r0, [r1, #0]
   82600:	e7d5      	b.n	825ae <_malloc_trim_r+0x3e>
   82602:	bf00      	nop
   82604:	20070714 	.word	0x20070714
   82608:	20070cdc 	.word	0x20070cdc
   8260c:	20070b1c 	.word	0x20070b1c

00082610 <_free_r>:
   82610:	2900      	cmp	r1, #0
   82612:	d044      	beq.n	8269e <_free_r+0x8e>
   82614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82618:	460d      	mov	r5, r1
   8261a:	4680      	mov	r8, r0
   8261c:	f000 fe6a 	bl	832f4 <__malloc_lock>
   82620:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82624:	4969      	ldr	r1, [pc, #420]	; (827cc <_free_r+0x1bc>)
   82626:	f1a5 0408 	sub.w	r4, r5, #8
   8262a:	f027 0301 	bic.w	r3, r7, #1
   8262e:	18e2      	adds	r2, r4, r3
   82630:	688e      	ldr	r6, [r1, #8]
   82632:	6850      	ldr	r0, [r2, #4]
   82634:	42b2      	cmp	r2, r6
   82636:	f020 0003 	bic.w	r0, r0, #3
   8263a:	d05e      	beq.n	826fa <_free_r+0xea>
   8263c:	07fe      	lsls	r6, r7, #31
   8263e:	6050      	str	r0, [r2, #4]
   82640:	d40b      	bmi.n	8265a <_free_r+0x4a>
   82642:	f855 7c08 	ldr.w	r7, [r5, #-8]
   82646:	f101 0e08 	add.w	lr, r1, #8
   8264a:	1be4      	subs	r4, r4, r7
   8264c:	68a5      	ldr	r5, [r4, #8]
   8264e:	443b      	add	r3, r7
   82650:	4575      	cmp	r5, lr
   82652:	d06d      	beq.n	82730 <_free_r+0x120>
   82654:	68e7      	ldr	r7, [r4, #12]
   82656:	60ef      	str	r7, [r5, #12]
   82658:	60bd      	str	r5, [r7, #8]
   8265a:	1815      	adds	r5, r2, r0
   8265c:	686d      	ldr	r5, [r5, #4]
   8265e:	07ed      	lsls	r5, r5, #31
   82660:	d53e      	bpl.n	826e0 <_free_r+0xd0>
   82662:	f043 0201 	orr.w	r2, r3, #1
   82666:	6062      	str	r2, [r4, #4]
   82668:	50e3      	str	r3, [r4, r3]
   8266a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8266e:	d217      	bcs.n	826a0 <_free_r+0x90>
   82670:	2201      	movs	r2, #1
   82672:	08db      	lsrs	r3, r3, #3
   82674:	1098      	asrs	r0, r3, #2
   82676:	684d      	ldr	r5, [r1, #4]
   82678:	4413      	add	r3, r2
   8267a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8267e:	4082      	lsls	r2, r0
   82680:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82684:	432a      	orrs	r2, r5
   82686:	3808      	subs	r0, #8
   82688:	60e0      	str	r0, [r4, #12]
   8268a:	60a7      	str	r7, [r4, #8]
   8268c:	604a      	str	r2, [r1, #4]
   8268e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82692:	60fc      	str	r4, [r7, #12]
   82694:	4640      	mov	r0, r8
   82696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8269a:	f000 be2d 	b.w	832f8 <__malloc_unlock>
   8269e:	4770      	bx	lr
   826a0:	0a5a      	lsrs	r2, r3, #9
   826a2:	2a04      	cmp	r2, #4
   826a4:	d852      	bhi.n	8274c <_free_r+0x13c>
   826a6:	099a      	lsrs	r2, r3, #6
   826a8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   826ac:	00ff      	lsls	r7, r7, #3
   826ae:	f102 0538 	add.w	r5, r2, #56	; 0x38
   826b2:	19c8      	adds	r0, r1, r7
   826b4:	59ca      	ldr	r2, [r1, r7]
   826b6:	3808      	subs	r0, #8
   826b8:	4290      	cmp	r0, r2
   826ba:	d04f      	beq.n	8275c <_free_r+0x14c>
   826bc:	6851      	ldr	r1, [r2, #4]
   826be:	f021 0103 	bic.w	r1, r1, #3
   826c2:	428b      	cmp	r3, r1
   826c4:	d232      	bcs.n	8272c <_free_r+0x11c>
   826c6:	6892      	ldr	r2, [r2, #8]
   826c8:	4290      	cmp	r0, r2
   826ca:	d1f7      	bne.n	826bc <_free_r+0xac>
   826cc:	68c3      	ldr	r3, [r0, #12]
   826ce:	60a0      	str	r0, [r4, #8]
   826d0:	60e3      	str	r3, [r4, #12]
   826d2:	609c      	str	r4, [r3, #8]
   826d4:	60c4      	str	r4, [r0, #12]
   826d6:	4640      	mov	r0, r8
   826d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   826dc:	f000 be0c 	b.w	832f8 <__malloc_unlock>
   826e0:	6895      	ldr	r5, [r2, #8]
   826e2:	4f3b      	ldr	r7, [pc, #236]	; (827d0 <_free_r+0x1c0>)
   826e4:	4403      	add	r3, r0
   826e6:	42bd      	cmp	r5, r7
   826e8:	d040      	beq.n	8276c <_free_r+0x15c>
   826ea:	68d0      	ldr	r0, [r2, #12]
   826ec:	f043 0201 	orr.w	r2, r3, #1
   826f0:	60e8      	str	r0, [r5, #12]
   826f2:	6085      	str	r5, [r0, #8]
   826f4:	6062      	str	r2, [r4, #4]
   826f6:	50e3      	str	r3, [r4, r3]
   826f8:	e7b7      	b.n	8266a <_free_r+0x5a>
   826fa:	07ff      	lsls	r7, r7, #31
   826fc:	4403      	add	r3, r0
   826fe:	d407      	bmi.n	82710 <_free_r+0x100>
   82700:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82704:	1b64      	subs	r4, r4, r5
   82706:	68e2      	ldr	r2, [r4, #12]
   82708:	68a0      	ldr	r0, [r4, #8]
   8270a:	442b      	add	r3, r5
   8270c:	60c2      	str	r2, [r0, #12]
   8270e:	6090      	str	r0, [r2, #8]
   82710:	4a30      	ldr	r2, [pc, #192]	; (827d4 <_free_r+0x1c4>)
   82712:	f043 0001 	orr.w	r0, r3, #1
   82716:	6812      	ldr	r2, [r2, #0]
   82718:	6060      	str	r0, [r4, #4]
   8271a:	4293      	cmp	r3, r2
   8271c:	608c      	str	r4, [r1, #8]
   8271e:	d3b9      	bcc.n	82694 <_free_r+0x84>
   82720:	4b2d      	ldr	r3, [pc, #180]	; (827d8 <_free_r+0x1c8>)
   82722:	4640      	mov	r0, r8
   82724:	6819      	ldr	r1, [r3, #0]
   82726:	f7ff ff23 	bl	82570 <_malloc_trim_r>
   8272a:	e7b3      	b.n	82694 <_free_r+0x84>
   8272c:	4610      	mov	r0, r2
   8272e:	e7cd      	b.n	826cc <_free_r+0xbc>
   82730:	1811      	adds	r1, r2, r0
   82732:	6849      	ldr	r1, [r1, #4]
   82734:	07c9      	lsls	r1, r1, #31
   82736:	d444      	bmi.n	827c2 <_free_r+0x1b2>
   82738:	6891      	ldr	r1, [r2, #8]
   8273a:	4403      	add	r3, r0
   8273c:	68d2      	ldr	r2, [r2, #12]
   8273e:	f043 0001 	orr.w	r0, r3, #1
   82742:	60ca      	str	r2, [r1, #12]
   82744:	6091      	str	r1, [r2, #8]
   82746:	6060      	str	r0, [r4, #4]
   82748:	50e3      	str	r3, [r4, r3]
   8274a:	e7a3      	b.n	82694 <_free_r+0x84>
   8274c:	2a14      	cmp	r2, #20
   8274e:	d816      	bhi.n	8277e <_free_r+0x16e>
   82750:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82754:	00ff      	lsls	r7, r7, #3
   82756:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8275a:	e7aa      	b.n	826b2 <_free_r+0xa2>
   8275c:	2301      	movs	r3, #1
   8275e:	10aa      	asrs	r2, r5, #2
   82760:	684d      	ldr	r5, [r1, #4]
   82762:	4093      	lsls	r3, r2
   82764:	432b      	orrs	r3, r5
   82766:	604b      	str	r3, [r1, #4]
   82768:	4603      	mov	r3, r0
   8276a:	e7b0      	b.n	826ce <_free_r+0xbe>
   8276c:	f043 0201 	orr.w	r2, r3, #1
   82770:	614c      	str	r4, [r1, #20]
   82772:	610c      	str	r4, [r1, #16]
   82774:	60e5      	str	r5, [r4, #12]
   82776:	60a5      	str	r5, [r4, #8]
   82778:	6062      	str	r2, [r4, #4]
   8277a:	50e3      	str	r3, [r4, r3]
   8277c:	e78a      	b.n	82694 <_free_r+0x84>
   8277e:	2a54      	cmp	r2, #84	; 0x54
   82780:	d806      	bhi.n	82790 <_free_r+0x180>
   82782:	0b1a      	lsrs	r2, r3, #12
   82784:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82788:	00ff      	lsls	r7, r7, #3
   8278a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8278e:	e790      	b.n	826b2 <_free_r+0xa2>
   82790:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82794:	d806      	bhi.n	827a4 <_free_r+0x194>
   82796:	0bda      	lsrs	r2, r3, #15
   82798:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8279c:	00ff      	lsls	r7, r7, #3
   8279e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   827a2:	e786      	b.n	826b2 <_free_r+0xa2>
   827a4:	f240 5054 	movw	r0, #1364	; 0x554
   827a8:	4282      	cmp	r2, r0
   827aa:	d806      	bhi.n	827ba <_free_r+0x1aa>
   827ac:	0c9a      	lsrs	r2, r3, #18
   827ae:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   827b2:	00ff      	lsls	r7, r7, #3
   827b4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   827b8:	e77b      	b.n	826b2 <_free_r+0xa2>
   827ba:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   827be:	257e      	movs	r5, #126	; 0x7e
   827c0:	e777      	b.n	826b2 <_free_r+0xa2>
   827c2:	f043 0101 	orr.w	r1, r3, #1
   827c6:	6061      	str	r1, [r4, #4]
   827c8:	6013      	str	r3, [r2, #0]
   827ca:	e763      	b.n	82694 <_free_r+0x84>
   827cc:	20070714 	.word	0x20070714
   827d0:	2007071c 	.word	0x2007071c
   827d4:	20070b20 	.word	0x20070b20
   827d8:	20070d0c 	.word	0x20070d0c

000827dc <__sfvwrite_r>:
   827dc:	6893      	ldr	r3, [r2, #8]
   827de:	2b00      	cmp	r3, #0
   827e0:	d071      	beq.n	828c6 <__sfvwrite_r+0xea>
   827e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   827e6:	898b      	ldrh	r3, [r1, #12]
   827e8:	b083      	sub	sp, #12
   827ea:	460c      	mov	r4, r1
   827ec:	0719      	lsls	r1, r3, #28
   827ee:	9000      	str	r0, [sp, #0]
   827f0:	4616      	mov	r6, r2
   827f2:	d525      	bpl.n	82840 <__sfvwrite_r+0x64>
   827f4:	6922      	ldr	r2, [r4, #16]
   827f6:	b31a      	cbz	r2, 82840 <__sfvwrite_r+0x64>
   827f8:	f013 0002 	ands.w	r0, r3, #2
   827fc:	6835      	ldr	r5, [r6, #0]
   827fe:	d02b      	beq.n	82858 <__sfvwrite_r+0x7c>
   82800:	f04f 0900 	mov.w	r9, #0
   82804:	46b0      	mov	r8, r6
   82806:	464f      	mov	r7, r9
   82808:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82acc <__sfvwrite_r+0x2f0>
   8280c:	2f00      	cmp	r7, #0
   8280e:	d055      	beq.n	828bc <__sfvwrite_r+0xe0>
   82810:	4557      	cmp	r7, sl
   82812:	463b      	mov	r3, r7
   82814:	464a      	mov	r2, r9
   82816:	bf28      	it	cs
   82818:	4653      	movcs	r3, sl
   8281a:	69e1      	ldr	r1, [r4, #28]
   8281c:	9800      	ldr	r0, [sp, #0]
   8281e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82820:	47b0      	blx	r6
   82822:	2800      	cmp	r0, #0
   82824:	dd56      	ble.n	828d4 <__sfvwrite_r+0xf8>
   82826:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8282a:	4481      	add	r9, r0
   8282c:	1a1b      	subs	r3, r3, r0
   8282e:	1a3f      	subs	r7, r7, r0
   82830:	f8c8 3008 	str.w	r3, [r8, #8]
   82834:	2b00      	cmp	r3, #0
   82836:	d1e9      	bne.n	8280c <__sfvwrite_r+0x30>
   82838:	2000      	movs	r0, #0
   8283a:	b003      	add	sp, #12
   8283c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82840:	4621      	mov	r1, r4
   82842:	9800      	ldr	r0, [sp, #0]
   82844:	f7ff fc6e 	bl	82124 <__swsetup_r>
   82848:	2800      	cmp	r0, #0
   8284a:	f040 8135 	bne.w	82ab8 <__sfvwrite_r+0x2dc>
   8284e:	89a3      	ldrh	r3, [r4, #12]
   82850:	6835      	ldr	r5, [r6, #0]
   82852:	f013 0002 	ands.w	r0, r3, #2
   82856:	d1d3      	bne.n	82800 <__sfvwrite_r+0x24>
   82858:	f013 0901 	ands.w	r9, r3, #1
   8285c:	d144      	bne.n	828e8 <__sfvwrite_r+0x10c>
   8285e:	464f      	mov	r7, r9
   82860:	9601      	str	r6, [sp, #4]
   82862:	b337      	cbz	r7, 828b2 <__sfvwrite_r+0xd6>
   82864:	059a      	lsls	r2, r3, #22
   82866:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8286a:	f140 8085 	bpl.w	82978 <__sfvwrite_r+0x19c>
   8286e:	4547      	cmp	r7, r8
   82870:	46c3      	mov	fp, r8
   82872:	f0c0 80ad 	bcc.w	829d0 <__sfvwrite_r+0x1f4>
   82876:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8287a:	f040 80ae 	bne.w	829da <__sfvwrite_r+0x1fe>
   8287e:	46ba      	mov	sl, r7
   82880:	6820      	ldr	r0, [r4, #0]
   82882:	465a      	mov	r2, fp
   82884:	4649      	mov	r1, r9
   82886:	f000 fcd1 	bl	8322c <memmove>
   8288a:	68a2      	ldr	r2, [r4, #8]
   8288c:	6823      	ldr	r3, [r4, #0]
   8288e:	eba2 0208 	sub.w	r2, r2, r8
   82892:	445b      	add	r3, fp
   82894:	60a2      	str	r2, [r4, #8]
   82896:	6023      	str	r3, [r4, #0]
   82898:	9a01      	ldr	r2, [sp, #4]
   8289a:	44d1      	add	r9, sl
   8289c:	6893      	ldr	r3, [r2, #8]
   8289e:	eba7 070a 	sub.w	r7, r7, sl
   828a2:	eba3 030a 	sub.w	r3, r3, sl
   828a6:	6093      	str	r3, [r2, #8]
   828a8:	2b00      	cmp	r3, #0
   828aa:	d0c5      	beq.n	82838 <__sfvwrite_r+0x5c>
   828ac:	89a3      	ldrh	r3, [r4, #12]
   828ae:	2f00      	cmp	r7, #0
   828b0:	d1d8      	bne.n	82864 <__sfvwrite_r+0x88>
   828b2:	f8d5 9000 	ldr.w	r9, [r5]
   828b6:	686f      	ldr	r7, [r5, #4]
   828b8:	3508      	adds	r5, #8
   828ba:	e7d2      	b.n	82862 <__sfvwrite_r+0x86>
   828bc:	f8d5 9000 	ldr.w	r9, [r5]
   828c0:	686f      	ldr	r7, [r5, #4]
   828c2:	3508      	adds	r5, #8
   828c4:	e7a2      	b.n	8280c <__sfvwrite_r+0x30>
   828c6:	2000      	movs	r0, #0
   828c8:	4770      	bx	lr
   828ca:	4621      	mov	r1, r4
   828cc:	9800      	ldr	r0, [sp, #0]
   828ce:	f7ff fd39 	bl	82344 <_fflush_r>
   828d2:	b378      	cbz	r0, 82934 <__sfvwrite_r+0x158>
   828d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   828d8:	f04f 30ff 	mov.w	r0, #4294967295
   828dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   828e0:	81a3      	strh	r3, [r4, #12]
   828e2:	b003      	add	sp, #12
   828e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   828e8:	4681      	mov	r9, r0
   828ea:	4633      	mov	r3, r6
   828ec:	464e      	mov	r6, r9
   828ee:	46a8      	mov	r8, r5
   828f0:	469a      	mov	sl, r3
   828f2:	464d      	mov	r5, r9
   828f4:	b356      	cbz	r6, 8294c <__sfvwrite_r+0x170>
   828f6:	2800      	cmp	r0, #0
   828f8:	d032      	beq.n	82960 <__sfvwrite_r+0x184>
   828fa:	45b1      	cmp	r9, r6
   828fc:	46cb      	mov	fp, r9
   828fe:	bf28      	it	cs
   82900:	46b3      	movcs	fp, r6
   82902:	6820      	ldr	r0, [r4, #0]
   82904:	6923      	ldr	r3, [r4, #16]
   82906:	465f      	mov	r7, fp
   82908:	4298      	cmp	r0, r3
   8290a:	6962      	ldr	r2, [r4, #20]
   8290c:	d904      	bls.n	82918 <__sfvwrite_r+0x13c>
   8290e:	68a3      	ldr	r3, [r4, #8]
   82910:	4413      	add	r3, r2
   82912:	459b      	cmp	fp, r3
   82914:	f300 80a8 	bgt.w	82a68 <__sfvwrite_r+0x28c>
   82918:	4593      	cmp	fp, r2
   8291a:	db4d      	blt.n	829b8 <__sfvwrite_r+0x1dc>
   8291c:	4613      	mov	r3, r2
   8291e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82920:	462a      	mov	r2, r5
   82922:	69e1      	ldr	r1, [r4, #28]
   82924:	9800      	ldr	r0, [sp, #0]
   82926:	47b8      	blx	r7
   82928:	1e07      	subs	r7, r0, #0
   8292a:	ddd3      	ble.n	828d4 <__sfvwrite_r+0xf8>
   8292c:	ebb9 0907 	subs.w	r9, r9, r7
   82930:	d0cb      	beq.n	828ca <__sfvwrite_r+0xee>
   82932:	2001      	movs	r0, #1
   82934:	f8da 3008 	ldr.w	r3, [sl, #8]
   82938:	443d      	add	r5, r7
   8293a:	1bdb      	subs	r3, r3, r7
   8293c:	1bf6      	subs	r6, r6, r7
   8293e:	f8ca 3008 	str.w	r3, [sl, #8]
   82942:	2b00      	cmp	r3, #0
   82944:	f43f af78 	beq.w	82838 <__sfvwrite_r+0x5c>
   82948:	2e00      	cmp	r6, #0
   8294a:	d1d4      	bne.n	828f6 <__sfvwrite_r+0x11a>
   8294c:	f108 0308 	add.w	r3, r8, #8
   82950:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82954:	4698      	mov	r8, r3
   82956:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8295a:	3308      	adds	r3, #8
   8295c:	2e00      	cmp	r6, #0
   8295e:	d0f7      	beq.n	82950 <__sfvwrite_r+0x174>
   82960:	4632      	mov	r2, r6
   82962:	210a      	movs	r1, #10
   82964:	4628      	mov	r0, r5
   82966:	f000 fc1b 	bl	831a0 <memchr>
   8296a:	2800      	cmp	r0, #0
   8296c:	f000 80a1 	beq.w	82ab2 <__sfvwrite_r+0x2d6>
   82970:	3001      	adds	r0, #1
   82972:	eba0 0905 	sub.w	r9, r0, r5
   82976:	e7c0      	b.n	828fa <__sfvwrite_r+0x11e>
   82978:	6820      	ldr	r0, [r4, #0]
   8297a:	6923      	ldr	r3, [r4, #16]
   8297c:	4298      	cmp	r0, r3
   8297e:	d802      	bhi.n	82986 <__sfvwrite_r+0x1aa>
   82980:	6963      	ldr	r3, [r4, #20]
   82982:	429f      	cmp	r7, r3
   82984:	d25d      	bcs.n	82a42 <__sfvwrite_r+0x266>
   82986:	45b8      	cmp	r8, r7
   82988:	bf28      	it	cs
   8298a:	46b8      	movcs	r8, r7
   8298c:	4649      	mov	r1, r9
   8298e:	4642      	mov	r2, r8
   82990:	f000 fc4c 	bl	8322c <memmove>
   82994:	68a3      	ldr	r3, [r4, #8]
   82996:	6822      	ldr	r2, [r4, #0]
   82998:	eba3 0308 	sub.w	r3, r3, r8
   8299c:	4442      	add	r2, r8
   8299e:	60a3      	str	r3, [r4, #8]
   829a0:	6022      	str	r2, [r4, #0]
   829a2:	b10b      	cbz	r3, 829a8 <__sfvwrite_r+0x1cc>
   829a4:	46c2      	mov	sl, r8
   829a6:	e777      	b.n	82898 <__sfvwrite_r+0xbc>
   829a8:	4621      	mov	r1, r4
   829aa:	9800      	ldr	r0, [sp, #0]
   829ac:	f7ff fcca 	bl	82344 <_fflush_r>
   829b0:	2800      	cmp	r0, #0
   829b2:	d18f      	bne.n	828d4 <__sfvwrite_r+0xf8>
   829b4:	46c2      	mov	sl, r8
   829b6:	e76f      	b.n	82898 <__sfvwrite_r+0xbc>
   829b8:	465a      	mov	r2, fp
   829ba:	4629      	mov	r1, r5
   829bc:	f000 fc36 	bl	8322c <memmove>
   829c0:	68a2      	ldr	r2, [r4, #8]
   829c2:	6823      	ldr	r3, [r4, #0]
   829c4:	eba2 020b 	sub.w	r2, r2, fp
   829c8:	445b      	add	r3, fp
   829ca:	60a2      	str	r2, [r4, #8]
   829cc:	6023      	str	r3, [r4, #0]
   829ce:	e7ad      	b.n	8292c <__sfvwrite_r+0x150>
   829d0:	46b8      	mov	r8, r7
   829d2:	46ba      	mov	sl, r7
   829d4:	46bb      	mov	fp, r7
   829d6:	6820      	ldr	r0, [r4, #0]
   829d8:	e753      	b.n	82882 <__sfvwrite_r+0xa6>
   829da:	6962      	ldr	r2, [r4, #20]
   829dc:	6820      	ldr	r0, [r4, #0]
   829de:	6921      	ldr	r1, [r4, #16]
   829e0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   829e4:	eba0 0a01 	sub.w	sl, r0, r1
   829e8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   829ec:	f10a 0001 	add.w	r0, sl, #1
   829f0:	ea4f 0868 	mov.w	r8, r8, asr #1
   829f4:	4438      	add	r0, r7
   829f6:	4540      	cmp	r0, r8
   829f8:	4642      	mov	r2, r8
   829fa:	bf84      	itt	hi
   829fc:	4680      	movhi	r8, r0
   829fe:	4642      	movhi	r2, r8
   82a00:	055b      	lsls	r3, r3, #21
   82a02:	d544      	bpl.n	82a8e <__sfvwrite_r+0x2b2>
   82a04:	4611      	mov	r1, r2
   82a06:	9800      	ldr	r0, [sp, #0]
   82a08:	f000 f912 	bl	82c30 <_malloc_r>
   82a0c:	4683      	mov	fp, r0
   82a0e:	2800      	cmp	r0, #0
   82a10:	d055      	beq.n	82abe <__sfvwrite_r+0x2e2>
   82a12:	4652      	mov	r2, sl
   82a14:	6921      	ldr	r1, [r4, #16]
   82a16:	f7fe fb75 	bl	81104 <memcpy>
   82a1a:	89a3      	ldrh	r3, [r4, #12]
   82a1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82a24:	81a3      	strh	r3, [r4, #12]
   82a26:	eb0b 000a 	add.w	r0, fp, sl
   82a2a:	eba8 030a 	sub.w	r3, r8, sl
   82a2e:	f8c4 b010 	str.w	fp, [r4, #16]
   82a32:	f8c4 8014 	str.w	r8, [r4, #20]
   82a36:	6020      	str	r0, [r4, #0]
   82a38:	60a3      	str	r3, [r4, #8]
   82a3a:	46b8      	mov	r8, r7
   82a3c:	46ba      	mov	sl, r7
   82a3e:	46bb      	mov	fp, r7
   82a40:	e71f      	b.n	82882 <__sfvwrite_r+0xa6>
   82a42:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82a46:	42ba      	cmp	r2, r7
   82a48:	bf28      	it	cs
   82a4a:	463a      	movcs	r2, r7
   82a4c:	fb92 f2f3 	sdiv	r2, r2, r3
   82a50:	69e1      	ldr	r1, [r4, #28]
   82a52:	fb03 f302 	mul.w	r3, r3, r2
   82a56:	9800      	ldr	r0, [sp, #0]
   82a58:	464a      	mov	r2, r9
   82a5a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82a5c:	47b0      	blx	r6
   82a5e:	f1b0 0a00 	subs.w	sl, r0, #0
   82a62:	f73f af19 	bgt.w	82898 <__sfvwrite_r+0xbc>
   82a66:	e735      	b.n	828d4 <__sfvwrite_r+0xf8>
   82a68:	461a      	mov	r2, r3
   82a6a:	4629      	mov	r1, r5
   82a6c:	9301      	str	r3, [sp, #4]
   82a6e:	f000 fbdd 	bl	8322c <memmove>
   82a72:	6822      	ldr	r2, [r4, #0]
   82a74:	9b01      	ldr	r3, [sp, #4]
   82a76:	4621      	mov	r1, r4
   82a78:	441a      	add	r2, r3
   82a7a:	6022      	str	r2, [r4, #0]
   82a7c:	9800      	ldr	r0, [sp, #0]
   82a7e:	f7ff fc61 	bl	82344 <_fflush_r>
   82a82:	9b01      	ldr	r3, [sp, #4]
   82a84:	2800      	cmp	r0, #0
   82a86:	f47f af25 	bne.w	828d4 <__sfvwrite_r+0xf8>
   82a8a:	461f      	mov	r7, r3
   82a8c:	e74e      	b.n	8292c <__sfvwrite_r+0x150>
   82a8e:	9800      	ldr	r0, [sp, #0]
   82a90:	f000 fc34 	bl	832fc <_realloc_r>
   82a94:	4683      	mov	fp, r0
   82a96:	2800      	cmp	r0, #0
   82a98:	d1c5      	bne.n	82a26 <__sfvwrite_r+0x24a>
   82a9a:	9d00      	ldr	r5, [sp, #0]
   82a9c:	6921      	ldr	r1, [r4, #16]
   82a9e:	4628      	mov	r0, r5
   82aa0:	f7ff fdb6 	bl	82610 <_free_r>
   82aa4:	220c      	movs	r2, #12
   82aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82aaa:	602a      	str	r2, [r5, #0]
   82aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82ab0:	e712      	b.n	828d8 <__sfvwrite_r+0xfc>
   82ab2:	f106 0901 	add.w	r9, r6, #1
   82ab6:	e720      	b.n	828fa <__sfvwrite_r+0x11e>
   82ab8:	f04f 30ff 	mov.w	r0, #4294967295
   82abc:	e6bd      	b.n	8283a <__sfvwrite_r+0x5e>
   82abe:	220c      	movs	r2, #12
   82ac0:	9900      	ldr	r1, [sp, #0]
   82ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82ac6:	600a      	str	r2, [r1, #0]
   82ac8:	e706      	b.n	828d8 <__sfvwrite_r+0xfc>
   82aca:	bf00      	nop
   82acc:	7ffffc00 	.word	0x7ffffc00

00082ad0 <_fwalk_reent>:
   82ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82ad4:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82ad8:	d01e      	beq.n	82b18 <_fwalk_reent+0x48>
   82ada:	4688      	mov	r8, r1
   82adc:	4607      	mov	r7, r0
   82ade:	f04f 0900 	mov.w	r9, #0
   82ae2:	6875      	ldr	r5, [r6, #4]
   82ae4:	68b4      	ldr	r4, [r6, #8]
   82ae6:	3d01      	subs	r5, #1
   82ae8:	d410      	bmi.n	82b0c <_fwalk_reent+0x3c>
   82aea:	89a3      	ldrh	r3, [r4, #12]
   82aec:	3d01      	subs	r5, #1
   82aee:	2b01      	cmp	r3, #1
   82af0:	d908      	bls.n	82b04 <_fwalk_reent+0x34>
   82af2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82af6:	3301      	adds	r3, #1
   82af8:	d004      	beq.n	82b04 <_fwalk_reent+0x34>
   82afa:	4621      	mov	r1, r4
   82afc:	4638      	mov	r0, r7
   82afe:	47c0      	blx	r8
   82b00:	ea49 0900 	orr.w	r9, r9, r0
   82b04:	1c6b      	adds	r3, r5, #1
   82b06:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82b0a:	d1ee      	bne.n	82aea <_fwalk_reent+0x1a>
   82b0c:	6836      	ldr	r6, [r6, #0]
   82b0e:	2e00      	cmp	r6, #0
   82b10:	d1e7      	bne.n	82ae2 <_fwalk_reent+0x12>
   82b12:	4648      	mov	r0, r9
   82b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82b18:	46b1      	mov	r9, r6
   82b1a:	4648      	mov	r0, r9
   82b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082b20 <__locale_mb_cur_max>:
   82b20:	4b04      	ldr	r3, [pc, #16]	; (82b34 <__locale_mb_cur_max+0x14>)
   82b22:	4a05      	ldr	r2, [pc, #20]	; (82b38 <__locale_mb_cur_max+0x18>)
   82b24:	681b      	ldr	r3, [r3, #0]
   82b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82b28:	2b00      	cmp	r3, #0
   82b2a:	bf08      	it	eq
   82b2c:	4613      	moveq	r3, r2
   82b2e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82b32:	4770      	bx	lr
   82b34:	20070178 	.word	0x20070178
   82b38:	200705a8 	.word	0x200705a8

00082b3c <__swhatbuf_r>:
   82b3c:	b570      	push	{r4, r5, r6, lr}
   82b3e:	460c      	mov	r4, r1
   82b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82b44:	b090      	sub	sp, #64	; 0x40
   82b46:	2900      	cmp	r1, #0
   82b48:	4615      	mov	r5, r2
   82b4a:	461e      	mov	r6, r3
   82b4c:	db14      	blt.n	82b78 <__swhatbuf_r+0x3c>
   82b4e:	aa01      	add	r2, sp, #4
   82b50:	f000 ff2c 	bl	839ac <_fstat_r>
   82b54:	2800      	cmp	r0, #0
   82b56:	db0f      	blt.n	82b78 <__swhatbuf_r+0x3c>
   82b58:	9a02      	ldr	r2, [sp, #8]
   82b5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82b5e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82b62:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82b66:	fab2 f282 	clz	r2, r2
   82b6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82b6e:	0952      	lsrs	r2, r2, #5
   82b70:	6032      	str	r2, [r6, #0]
   82b72:	602b      	str	r3, [r5, #0]
   82b74:	b010      	add	sp, #64	; 0x40
   82b76:	bd70      	pop	{r4, r5, r6, pc}
   82b78:	2300      	movs	r3, #0
   82b7a:	89a2      	ldrh	r2, [r4, #12]
   82b7c:	6033      	str	r3, [r6, #0]
   82b7e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82b82:	d004      	beq.n	82b8e <__swhatbuf_r+0x52>
   82b84:	2240      	movs	r2, #64	; 0x40
   82b86:	4618      	mov	r0, r3
   82b88:	602a      	str	r2, [r5, #0]
   82b8a:	b010      	add	sp, #64	; 0x40
   82b8c:	bd70      	pop	{r4, r5, r6, pc}
   82b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82b92:	602b      	str	r3, [r5, #0]
   82b94:	b010      	add	sp, #64	; 0x40
   82b96:	bd70      	pop	{r4, r5, r6, pc}

00082b98 <__smakebuf_r>:
   82b98:	898a      	ldrh	r2, [r1, #12]
   82b9a:	460b      	mov	r3, r1
   82b9c:	0792      	lsls	r2, r2, #30
   82b9e:	d506      	bpl.n	82bae <__smakebuf_r+0x16>
   82ba0:	2101      	movs	r1, #1
   82ba2:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82ba6:	6159      	str	r1, [r3, #20]
   82ba8:	601a      	str	r2, [r3, #0]
   82baa:	611a      	str	r2, [r3, #16]
   82bac:	4770      	bx	lr
   82bae:	b5f0      	push	{r4, r5, r6, r7, lr}
   82bb0:	b083      	sub	sp, #12
   82bb2:	ab01      	add	r3, sp, #4
   82bb4:	466a      	mov	r2, sp
   82bb6:	460c      	mov	r4, r1
   82bb8:	4605      	mov	r5, r0
   82bba:	f7ff ffbf 	bl	82b3c <__swhatbuf_r>
   82bbe:	9900      	ldr	r1, [sp, #0]
   82bc0:	4606      	mov	r6, r0
   82bc2:	4628      	mov	r0, r5
   82bc4:	f000 f834 	bl	82c30 <_malloc_r>
   82bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82bcc:	b1d0      	cbz	r0, 82c04 <__smakebuf_r+0x6c>
   82bce:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82bd2:	4f12      	ldr	r7, [pc, #72]	; (82c1c <__smakebuf_r+0x84>)
   82bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82bd8:	63ef      	str	r7, [r5, #60]	; 0x3c
   82bda:	81a3      	strh	r3, [r4, #12]
   82bdc:	6020      	str	r0, [r4, #0]
   82bde:	6120      	str	r0, [r4, #16]
   82be0:	6161      	str	r1, [r4, #20]
   82be2:	b91a      	cbnz	r2, 82bec <__smakebuf_r+0x54>
   82be4:	4333      	orrs	r3, r6
   82be6:	81a3      	strh	r3, [r4, #12]
   82be8:	b003      	add	sp, #12
   82bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82bec:	4628      	mov	r0, r5
   82bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82bf2:	f000 feef 	bl	839d4 <_isatty_r>
   82bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82bfa:	2800      	cmp	r0, #0
   82bfc:	d0f2      	beq.n	82be4 <__smakebuf_r+0x4c>
   82bfe:	f043 0301 	orr.w	r3, r3, #1
   82c02:	e7ef      	b.n	82be4 <__smakebuf_r+0x4c>
   82c04:	059a      	lsls	r2, r3, #22
   82c06:	d4ef      	bmi.n	82be8 <__smakebuf_r+0x50>
   82c08:	2101      	movs	r1, #1
   82c0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82c0e:	f043 0302 	orr.w	r3, r3, #2
   82c12:	81a3      	strh	r3, [r4, #12]
   82c14:	6161      	str	r1, [r4, #20]
   82c16:	6022      	str	r2, [r4, #0]
   82c18:	6122      	str	r2, [r4, #16]
   82c1a:	e7e5      	b.n	82be8 <__smakebuf_r+0x50>
   82c1c:	00082371 	.word	0x00082371

00082c20 <malloc>:
   82c20:	4b02      	ldr	r3, [pc, #8]	; (82c2c <malloc+0xc>)
   82c22:	4601      	mov	r1, r0
   82c24:	6818      	ldr	r0, [r3, #0]
   82c26:	f000 b803 	b.w	82c30 <_malloc_r>
   82c2a:	bf00      	nop
   82c2c:	20070178 	.word	0x20070178

00082c30 <_malloc_r>:
   82c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c34:	f101 060b 	add.w	r6, r1, #11
   82c38:	2e16      	cmp	r6, #22
   82c3a:	b083      	sub	sp, #12
   82c3c:	4605      	mov	r5, r0
   82c3e:	f240 809e 	bls.w	82d7e <_malloc_r+0x14e>
   82c42:	f036 0607 	bics.w	r6, r6, #7
   82c46:	f100 80bd 	bmi.w	82dc4 <_malloc_r+0x194>
   82c4a:	42b1      	cmp	r1, r6
   82c4c:	f200 80ba 	bhi.w	82dc4 <_malloc_r+0x194>
   82c50:	f000 fb50 	bl	832f4 <__malloc_lock>
   82c54:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82c58:	f0c0 8285 	bcc.w	83166 <_malloc_r+0x536>
   82c5c:	0a73      	lsrs	r3, r6, #9
   82c5e:	f000 80b8 	beq.w	82dd2 <_malloc_r+0x1a2>
   82c62:	2b04      	cmp	r3, #4
   82c64:	f200 816c 	bhi.w	82f40 <_malloc_r+0x310>
   82c68:	09b3      	lsrs	r3, r6, #6
   82c6a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82c6e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82c72:	00c1      	lsls	r1, r0, #3
   82c74:	4fb8      	ldr	r7, [pc, #736]	; (82f58 <_malloc_r+0x328>)
   82c76:	4439      	add	r1, r7
   82c78:	684c      	ldr	r4, [r1, #4]
   82c7a:	3908      	subs	r1, #8
   82c7c:	42a1      	cmp	r1, r4
   82c7e:	d106      	bne.n	82c8e <_malloc_r+0x5e>
   82c80:	e00c      	b.n	82c9c <_malloc_r+0x6c>
   82c82:	2a00      	cmp	r2, #0
   82c84:	f280 80ab 	bge.w	82dde <_malloc_r+0x1ae>
   82c88:	68e4      	ldr	r4, [r4, #12]
   82c8a:	42a1      	cmp	r1, r4
   82c8c:	d006      	beq.n	82c9c <_malloc_r+0x6c>
   82c8e:	6863      	ldr	r3, [r4, #4]
   82c90:	f023 0303 	bic.w	r3, r3, #3
   82c94:	1b9a      	subs	r2, r3, r6
   82c96:	2a0f      	cmp	r2, #15
   82c98:	ddf3      	ble.n	82c82 <_malloc_r+0x52>
   82c9a:	4670      	mov	r0, lr
   82c9c:	693c      	ldr	r4, [r7, #16]
   82c9e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 82f6c <_malloc_r+0x33c>
   82ca2:	4574      	cmp	r4, lr
   82ca4:	f000 819e 	beq.w	82fe4 <_malloc_r+0x3b4>
   82ca8:	6863      	ldr	r3, [r4, #4]
   82caa:	f023 0303 	bic.w	r3, r3, #3
   82cae:	1b9a      	subs	r2, r3, r6
   82cb0:	2a0f      	cmp	r2, #15
   82cb2:	f300 8183 	bgt.w	82fbc <_malloc_r+0x38c>
   82cb6:	2a00      	cmp	r2, #0
   82cb8:	f8c7 e014 	str.w	lr, [r7, #20]
   82cbc:	f8c7 e010 	str.w	lr, [r7, #16]
   82cc0:	f280 8091 	bge.w	82de6 <_malloc_r+0x1b6>
   82cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82cc8:	f080 8154 	bcs.w	82f74 <_malloc_r+0x344>
   82ccc:	2201      	movs	r2, #1
   82cce:	08db      	lsrs	r3, r3, #3
   82cd0:	6879      	ldr	r1, [r7, #4]
   82cd2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82cd6:	4413      	add	r3, r2
   82cd8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82cdc:	fa02 f20c 	lsl.w	r2, r2, ip
   82ce0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82ce4:	430a      	orrs	r2, r1
   82ce6:	f1ac 0108 	sub.w	r1, ip, #8
   82cea:	60e1      	str	r1, [r4, #12]
   82cec:	f8c4 8008 	str.w	r8, [r4, #8]
   82cf0:	607a      	str	r2, [r7, #4]
   82cf2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82cf6:	f8c8 400c 	str.w	r4, [r8, #12]
   82cfa:	2401      	movs	r4, #1
   82cfc:	1083      	asrs	r3, r0, #2
   82cfe:	409c      	lsls	r4, r3
   82d00:	4294      	cmp	r4, r2
   82d02:	d87d      	bhi.n	82e00 <_malloc_r+0x1d0>
   82d04:	4214      	tst	r4, r2
   82d06:	d106      	bne.n	82d16 <_malloc_r+0xe6>
   82d08:	f020 0003 	bic.w	r0, r0, #3
   82d0c:	0064      	lsls	r4, r4, #1
   82d0e:	4214      	tst	r4, r2
   82d10:	f100 0004 	add.w	r0, r0, #4
   82d14:	d0fa      	beq.n	82d0c <_malloc_r+0xdc>
   82d16:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82d1a:	46cc      	mov	ip, r9
   82d1c:	4680      	mov	r8, r0
   82d1e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82d22:	459c      	cmp	ip, r3
   82d24:	d107      	bne.n	82d36 <_malloc_r+0x106>
   82d26:	e15f      	b.n	82fe8 <_malloc_r+0x3b8>
   82d28:	2a00      	cmp	r2, #0
   82d2a:	f280 816d 	bge.w	83008 <_malloc_r+0x3d8>
   82d2e:	68db      	ldr	r3, [r3, #12]
   82d30:	459c      	cmp	ip, r3
   82d32:	f000 8159 	beq.w	82fe8 <_malloc_r+0x3b8>
   82d36:	6859      	ldr	r1, [r3, #4]
   82d38:	f021 0103 	bic.w	r1, r1, #3
   82d3c:	1b8a      	subs	r2, r1, r6
   82d3e:	2a0f      	cmp	r2, #15
   82d40:	ddf2      	ble.n	82d28 <_malloc_r+0xf8>
   82d42:	68dc      	ldr	r4, [r3, #12]
   82d44:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82d48:	f046 0801 	orr.w	r8, r6, #1
   82d4c:	4628      	mov	r0, r5
   82d4e:	441e      	add	r6, r3
   82d50:	f042 0501 	orr.w	r5, r2, #1
   82d54:	f8c3 8004 	str.w	r8, [r3, #4]
   82d58:	f8cc 400c 	str.w	r4, [ip, #12]
   82d5c:	f8c4 c008 	str.w	ip, [r4, #8]
   82d60:	617e      	str	r6, [r7, #20]
   82d62:	613e      	str	r6, [r7, #16]
   82d64:	f8c6 e00c 	str.w	lr, [r6, #12]
   82d68:	f8c6 e008 	str.w	lr, [r6, #8]
   82d6c:	6075      	str	r5, [r6, #4]
   82d6e:	505a      	str	r2, [r3, r1]
   82d70:	9300      	str	r3, [sp, #0]
   82d72:	f000 fac1 	bl	832f8 <__malloc_unlock>
   82d76:	9b00      	ldr	r3, [sp, #0]
   82d78:	f103 0408 	add.w	r4, r3, #8
   82d7c:	e01e      	b.n	82dbc <_malloc_r+0x18c>
   82d7e:	2910      	cmp	r1, #16
   82d80:	d820      	bhi.n	82dc4 <_malloc_r+0x194>
   82d82:	f000 fab7 	bl	832f4 <__malloc_lock>
   82d86:	2610      	movs	r6, #16
   82d88:	2318      	movs	r3, #24
   82d8a:	2002      	movs	r0, #2
   82d8c:	4f72      	ldr	r7, [pc, #456]	; (82f58 <_malloc_r+0x328>)
   82d8e:	443b      	add	r3, r7
   82d90:	685c      	ldr	r4, [r3, #4]
   82d92:	f1a3 0208 	sub.w	r2, r3, #8
   82d96:	4294      	cmp	r4, r2
   82d98:	f000 812f 	beq.w	82ffa <_malloc_r+0x3ca>
   82d9c:	6863      	ldr	r3, [r4, #4]
   82d9e:	68e1      	ldr	r1, [r4, #12]
   82da0:	f023 0303 	bic.w	r3, r3, #3
   82da4:	4423      	add	r3, r4
   82da6:	685a      	ldr	r2, [r3, #4]
   82da8:	68a6      	ldr	r6, [r4, #8]
   82daa:	f042 0201 	orr.w	r2, r2, #1
   82dae:	60f1      	str	r1, [r6, #12]
   82db0:	4628      	mov	r0, r5
   82db2:	608e      	str	r6, [r1, #8]
   82db4:	605a      	str	r2, [r3, #4]
   82db6:	f000 fa9f 	bl	832f8 <__malloc_unlock>
   82dba:	3408      	adds	r4, #8
   82dbc:	4620      	mov	r0, r4
   82dbe:	b003      	add	sp, #12
   82dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82dc4:	2400      	movs	r4, #0
   82dc6:	230c      	movs	r3, #12
   82dc8:	4620      	mov	r0, r4
   82dca:	602b      	str	r3, [r5, #0]
   82dcc:	b003      	add	sp, #12
   82dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82dd2:	2040      	movs	r0, #64	; 0x40
   82dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
   82dd8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82ddc:	e74a      	b.n	82c74 <_malloc_r+0x44>
   82dde:	4423      	add	r3, r4
   82de0:	685a      	ldr	r2, [r3, #4]
   82de2:	68e1      	ldr	r1, [r4, #12]
   82de4:	e7e0      	b.n	82da8 <_malloc_r+0x178>
   82de6:	4423      	add	r3, r4
   82de8:	685a      	ldr	r2, [r3, #4]
   82dea:	4628      	mov	r0, r5
   82dec:	f042 0201 	orr.w	r2, r2, #1
   82df0:	605a      	str	r2, [r3, #4]
   82df2:	3408      	adds	r4, #8
   82df4:	f000 fa80 	bl	832f8 <__malloc_unlock>
   82df8:	4620      	mov	r0, r4
   82dfa:	b003      	add	sp, #12
   82dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e00:	68bc      	ldr	r4, [r7, #8]
   82e02:	6863      	ldr	r3, [r4, #4]
   82e04:	f023 0803 	bic.w	r8, r3, #3
   82e08:	45b0      	cmp	r8, r6
   82e0a:	d304      	bcc.n	82e16 <_malloc_r+0x1e6>
   82e0c:	eba8 0306 	sub.w	r3, r8, r6
   82e10:	2b0f      	cmp	r3, #15
   82e12:	f300 8085 	bgt.w	82f20 <_malloc_r+0x2f0>
   82e16:	f8df 9158 	ldr.w	r9, [pc, #344]	; 82f70 <_malloc_r+0x340>
   82e1a:	4b50      	ldr	r3, [pc, #320]	; (82f5c <_malloc_r+0x32c>)
   82e1c:	f8d9 2000 	ldr.w	r2, [r9]
   82e20:	681b      	ldr	r3, [r3, #0]
   82e22:	3201      	adds	r2, #1
   82e24:	4433      	add	r3, r6
   82e26:	eb04 0a08 	add.w	sl, r4, r8
   82e2a:	f000 8154 	beq.w	830d6 <_malloc_r+0x4a6>
   82e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82e32:	330f      	adds	r3, #15
   82e34:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82e38:	f02b 0b0f 	bic.w	fp, fp, #15
   82e3c:	4659      	mov	r1, fp
   82e3e:	4628      	mov	r0, r5
   82e40:	f000 fc12 	bl	83668 <_sbrk_r>
   82e44:	1c41      	adds	r1, r0, #1
   82e46:	4602      	mov	r2, r0
   82e48:	f000 80fb 	beq.w	83042 <_malloc_r+0x412>
   82e4c:	4582      	cmp	sl, r0
   82e4e:	f200 80f6 	bhi.w	8303e <_malloc_r+0x40e>
   82e52:	4b43      	ldr	r3, [pc, #268]	; (82f60 <_malloc_r+0x330>)
   82e54:	6819      	ldr	r1, [r3, #0]
   82e56:	4459      	add	r1, fp
   82e58:	6019      	str	r1, [r3, #0]
   82e5a:	f000 814c 	beq.w	830f6 <_malloc_r+0x4c6>
   82e5e:	f8d9 0000 	ldr.w	r0, [r9]
   82e62:	3001      	adds	r0, #1
   82e64:	bf1b      	ittet	ne
   82e66:	eba2 0a0a 	subne.w	sl, r2, sl
   82e6a:	4451      	addne	r1, sl
   82e6c:	f8c9 2000 	streq.w	r2, [r9]
   82e70:	6019      	strne	r1, [r3, #0]
   82e72:	f012 0107 	ands.w	r1, r2, #7
   82e76:	f000 8114 	beq.w	830a2 <_malloc_r+0x472>
   82e7a:	f1c1 0008 	rsb	r0, r1, #8
   82e7e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82e82:	4402      	add	r2, r0
   82e84:	3108      	adds	r1, #8
   82e86:	eb02 090b 	add.w	r9, r2, fp
   82e8a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82e8e:	eba1 0909 	sub.w	r9, r1, r9
   82e92:	4649      	mov	r1, r9
   82e94:	4628      	mov	r0, r5
   82e96:	9301      	str	r3, [sp, #4]
   82e98:	9200      	str	r2, [sp, #0]
   82e9a:	f000 fbe5 	bl	83668 <_sbrk_r>
   82e9e:	1c43      	adds	r3, r0, #1
   82ea0:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82ea4:	f000 8142 	beq.w	8312c <_malloc_r+0x4fc>
   82ea8:	1a80      	subs	r0, r0, r2
   82eaa:	4448      	add	r0, r9
   82eac:	f040 0001 	orr.w	r0, r0, #1
   82eb0:	6819      	ldr	r1, [r3, #0]
   82eb2:	42bc      	cmp	r4, r7
   82eb4:	4449      	add	r1, r9
   82eb6:	60ba      	str	r2, [r7, #8]
   82eb8:	6019      	str	r1, [r3, #0]
   82eba:	6050      	str	r0, [r2, #4]
   82ebc:	d017      	beq.n	82eee <_malloc_r+0x2be>
   82ebe:	f1b8 0f0f 	cmp.w	r8, #15
   82ec2:	f240 80fa 	bls.w	830ba <_malloc_r+0x48a>
   82ec6:	f04f 0c05 	mov.w	ip, #5
   82eca:	6862      	ldr	r2, [r4, #4]
   82ecc:	f1a8 000c 	sub.w	r0, r8, #12
   82ed0:	f020 0007 	bic.w	r0, r0, #7
   82ed4:	f002 0201 	and.w	r2, r2, #1
   82ed8:	eb04 0e00 	add.w	lr, r4, r0
   82edc:	4302      	orrs	r2, r0
   82ede:	280f      	cmp	r0, #15
   82ee0:	6062      	str	r2, [r4, #4]
   82ee2:	f8ce c004 	str.w	ip, [lr, #4]
   82ee6:	f8ce c008 	str.w	ip, [lr, #8]
   82eea:	f200 8116 	bhi.w	8311a <_malloc_r+0x4ea>
   82eee:	4b1d      	ldr	r3, [pc, #116]	; (82f64 <_malloc_r+0x334>)
   82ef0:	68bc      	ldr	r4, [r7, #8]
   82ef2:	681a      	ldr	r2, [r3, #0]
   82ef4:	4291      	cmp	r1, r2
   82ef6:	bf88      	it	hi
   82ef8:	6019      	strhi	r1, [r3, #0]
   82efa:	4b1b      	ldr	r3, [pc, #108]	; (82f68 <_malloc_r+0x338>)
   82efc:	681a      	ldr	r2, [r3, #0]
   82efe:	4291      	cmp	r1, r2
   82f00:	6862      	ldr	r2, [r4, #4]
   82f02:	bf88      	it	hi
   82f04:	6019      	strhi	r1, [r3, #0]
   82f06:	f022 0203 	bic.w	r2, r2, #3
   82f0a:	4296      	cmp	r6, r2
   82f0c:	eba2 0306 	sub.w	r3, r2, r6
   82f10:	d801      	bhi.n	82f16 <_malloc_r+0x2e6>
   82f12:	2b0f      	cmp	r3, #15
   82f14:	dc04      	bgt.n	82f20 <_malloc_r+0x2f0>
   82f16:	4628      	mov	r0, r5
   82f18:	f000 f9ee 	bl	832f8 <__malloc_unlock>
   82f1c:	2400      	movs	r4, #0
   82f1e:	e74d      	b.n	82dbc <_malloc_r+0x18c>
   82f20:	f046 0201 	orr.w	r2, r6, #1
   82f24:	f043 0301 	orr.w	r3, r3, #1
   82f28:	4426      	add	r6, r4
   82f2a:	6062      	str	r2, [r4, #4]
   82f2c:	4628      	mov	r0, r5
   82f2e:	60be      	str	r6, [r7, #8]
   82f30:	3408      	adds	r4, #8
   82f32:	6073      	str	r3, [r6, #4]
   82f34:	f000 f9e0 	bl	832f8 <__malloc_unlock>
   82f38:	4620      	mov	r0, r4
   82f3a:	b003      	add	sp, #12
   82f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f40:	2b14      	cmp	r3, #20
   82f42:	d970      	bls.n	83026 <_malloc_r+0x3f6>
   82f44:	2b54      	cmp	r3, #84	; 0x54
   82f46:	f200 80a2 	bhi.w	8308e <_malloc_r+0x45e>
   82f4a:	0b33      	lsrs	r3, r6, #12
   82f4c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   82f50:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   82f54:	00c1      	lsls	r1, r0, #3
   82f56:	e68d      	b.n	82c74 <_malloc_r+0x44>
   82f58:	20070714 	.word	0x20070714
   82f5c:	20070d0c 	.word	0x20070d0c
   82f60:	20070cdc 	.word	0x20070cdc
   82f64:	20070d04 	.word	0x20070d04
   82f68:	20070d08 	.word	0x20070d08
   82f6c:	2007071c 	.word	0x2007071c
   82f70:	20070b1c 	.word	0x20070b1c
   82f74:	0a5a      	lsrs	r2, r3, #9
   82f76:	2a04      	cmp	r2, #4
   82f78:	d95b      	bls.n	83032 <_malloc_r+0x402>
   82f7a:	2a14      	cmp	r2, #20
   82f7c:	f200 80ae 	bhi.w	830dc <_malloc_r+0x4ac>
   82f80:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   82f84:	00c9      	lsls	r1, r1, #3
   82f86:	325b      	adds	r2, #91	; 0x5b
   82f88:	eb07 0c01 	add.w	ip, r7, r1
   82f8c:	5879      	ldr	r1, [r7, r1]
   82f8e:	f1ac 0c08 	sub.w	ip, ip, #8
   82f92:	458c      	cmp	ip, r1
   82f94:	f000 8088 	beq.w	830a8 <_malloc_r+0x478>
   82f98:	684a      	ldr	r2, [r1, #4]
   82f9a:	f022 0203 	bic.w	r2, r2, #3
   82f9e:	4293      	cmp	r3, r2
   82fa0:	d273      	bcs.n	8308a <_malloc_r+0x45a>
   82fa2:	6889      	ldr	r1, [r1, #8]
   82fa4:	458c      	cmp	ip, r1
   82fa6:	d1f7      	bne.n	82f98 <_malloc_r+0x368>
   82fa8:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82fac:	687a      	ldr	r2, [r7, #4]
   82fae:	60e3      	str	r3, [r4, #12]
   82fb0:	f8c4 c008 	str.w	ip, [r4, #8]
   82fb4:	609c      	str	r4, [r3, #8]
   82fb6:	f8cc 400c 	str.w	r4, [ip, #12]
   82fba:	e69e      	b.n	82cfa <_malloc_r+0xca>
   82fbc:	f046 0c01 	orr.w	ip, r6, #1
   82fc0:	f042 0101 	orr.w	r1, r2, #1
   82fc4:	4426      	add	r6, r4
   82fc6:	f8c4 c004 	str.w	ip, [r4, #4]
   82fca:	4628      	mov	r0, r5
   82fcc:	617e      	str	r6, [r7, #20]
   82fce:	613e      	str	r6, [r7, #16]
   82fd0:	f8c6 e00c 	str.w	lr, [r6, #12]
   82fd4:	f8c6 e008 	str.w	lr, [r6, #8]
   82fd8:	6071      	str	r1, [r6, #4]
   82fda:	50e2      	str	r2, [r4, r3]
   82fdc:	f000 f98c 	bl	832f8 <__malloc_unlock>
   82fe0:	3408      	adds	r4, #8
   82fe2:	e6eb      	b.n	82dbc <_malloc_r+0x18c>
   82fe4:	687a      	ldr	r2, [r7, #4]
   82fe6:	e688      	b.n	82cfa <_malloc_r+0xca>
   82fe8:	f108 0801 	add.w	r8, r8, #1
   82fec:	f018 0f03 	tst.w	r8, #3
   82ff0:	f10c 0c08 	add.w	ip, ip, #8
   82ff4:	f47f ae93 	bne.w	82d1e <_malloc_r+0xee>
   82ff8:	e02d      	b.n	83056 <_malloc_r+0x426>
   82ffa:	68dc      	ldr	r4, [r3, #12]
   82ffc:	42a3      	cmp	r3, r4
   82ffe:	bf08      	it	eq
   83000:	3002      	addeq	r0, #2
   83002:	f43f ae4b 	beq.w	82c9c <_malloc_r+0x6c>
   83006:	e6c9      	b.n	82d9c <_malloc_r+0x16c>
   83008:	461c      	mov	r4, r3
   8300a:	4419      	add	r1, r3
   8300c:	684a      	ldr	r2, [r1, #4]
   8300e:	68db      	ldr	r3, [r3, #12]
   83010:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83014:	f042 0201 	orr.w	r2, r2, #1
   83018:	604a      	str	r2, [r1, #4]
   8301a:	4628      	mov	r0, r5
   8301c:	60f3      	str	r3, [r6, #12]
   8301e:	609e      	str	r6, [r3, #8]
   83020:	f000 f96a 	bl	832f8 <__malloc_unlock>
   83024:	e6ca      	b.n	82dbc <_malloc_r+0x18c>
   83026:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8302a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8302e:	00c1      	lsls	r1, r0, #3
   83030:	e620      	b.n	82c74 <_malloc_r+0x44>
   83032:	099a      	lsrs	r2, r3, #6
   83034:	f102 0139 	add.w	r1, r2, #57	; 0x39
   83038:	00c9      	lsls	r1, r1, #3
   8303a:	3238      	adds	r2, #56	; 0x38
   8303c:	e7a4      	b.n	82f88 <_malloc_r+0x358>
   8303e:	42bc      	cmp	r4, r7
   83040:	d054      	beq.n	830ec <_malloc_r+0x4bc>
   83042:	68bc      	ldr	r4, [r7, #8]
   83044:	6862      	ldr	r2, [r4, #4]
   83046:	f022 0203 	bic.w	r2, r2, #3
   8304a:	e75e      	b.n	82f0a <_malloc_r+0x2da>
   8304c:	f859 3908 	ldr.w	r3, [r9], #-8
   83050:	4599      	cmp	r9, r3
   83052:	f040 8086 	bne.w	83162 <_malloc_r+0x532>
   83056:	f010 0f03 	tst.w	r0, #3
   8305a:	f100 30ff 	add.w	r0, r0, #4294967295
   8305e:	d1f5      	bne.n	8304c <_malloc_r+0x41c>
   83060:	687b      	ldr	r3, [r7, #4]
   83062:	ea23 0304 	bic.w	r3, r3, r4
   83066:	607b      	str	r3, [r7, #4]
   83068:	0064      	lsls	r4, r4, #1
   8306a:	429c      	cmp	r4, r3
   8306c:	f63f aec8 	bhi.w	82e00 <_malloc_r+0x1d0>
   83070:	2c00      	cmp	r4, #0
   83072:	f43f aec5 	beq.w	82e00 <_malloc_r+0x1d0>
   83076:	421c      	tst	r4, r3
   83078:	4640      	mov	r0, r8
   8307a:	f47f ae4c 	bne.w	82d16 <_malloc_r+0xe6>
   8307e:	0064      	lsls	r4, r4, #1
   83080:	421c      	tst	r4, r3
   83082:	f100 0004 	add.w	r0, r0, #4
   83086:	d0fa      	beq.n	8307e <_malloc_r+0x44e>
   83088:	e645      	b.n	82d16 <_malloc_r+0xe6>
   8308a:	468c      	mov	ip, r1
   8308c:	e78c      	b.n	82fa8 <_malloc_r+0x378>
   8308e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83092:	d815      	bhi.n	830c0 <_malloc_r+0x490>
   83094:	0bf3      	lsrs	r3, r6, #15
   83096:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8309a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8309e:	00c1      	lsls	r1, r0, #3
   830a0:	e5e8      	b.n	82c74 <_malloc_r+0x44>
   830a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   830a6:	e6ee      	b.n	82e86 <_malloc_r+0x256>
   830a8:	2101      	movs	r1, #1
   830aa:	687b      	ldr	r3, [r7, #4]
   830ac:	1092      	asrs	r2, r2, #2
   830ae:	fa01 f202 	lsl.w	r2, r1, r2
   830b2:	431a      	orrs	r2, r3
   830b4:	607a      	str	r2, [r7, #4]
   830b6:	4663      	mov	r3, ip
   830b8:	e779      	b.n	82fae <_malloc_r+0x37e>
   830ba:	2301      	movs	r3, #1
   830bc:	6053      	str	r3, [r2, #4]
   830be:	e72a      	b.n	82f16 <_malloc_r+0x2e6>
   830c0:	f240 5254 	movw	r2, #1364	; 0x554
   830c4:	4293      	cmp	r3, r2
   830c6:	d822      	bhi.n	8310e <_malloc_r+0x4de>
   830c8:	0cb3      	lsrs	r3, r6, #18
   830ca:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   830ce:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   830d2:	00c1      	lsls	r1, r0, #3
   830d4:	e5ce      	b.n	82c74 <_malloc_r+0x44>
   830d6:	f103 0b10 	add.w	fp, r3, #16
   830da:	e6af      	b.n	82e3c <_malloc_r+0x20c>
   830dc:	2a54      	cmp	r2, #84	; 0x54
   830de:	d829      	bhi.n	83134 <_malloc_r+0x504>
   830e0:	0b1a      	lsrs	r2, r3, #12
   830e2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   830e6:	00c9      	lsls	r1, r1, #3
   830e8:	326e      	adds	r2, #110	; 0x6e
   830ea:	e74d      	b.n	82f88 <_malloc_r+0x358>
   830ec:	4b20      	ldr	r3, [pc, #128]	; (83170 <_malloc_r+0x540>)
   830ee:	6819      	ldr	r1, [r3, #0]
   830f0:	4459      	add	r1, fp
   830f2:	6019      	str	r1, [r3, #0]
   830f4:	e6b3      	b.n	82e5e <_malloc_r+0x22e>
   830f6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   830fa:	2800      	cmp	r0, #0
   830fc:	f47f aeaf 	bne.w	82e5e <_malloc_r+0x22e>
   83100:	eb08 030b 	add.w	r3, r8, fp
   83104:	68ba      	ldr	r2, [r7, #8]
   83106:	f043 0301 	orr.w	r3, r3, #1
   8310a:	6053      	str	r3, [r2, #4]
   8310c:	e6ef      	b.n	82eee <_malloc_r+0x2be>
   8310e:	207f      	movs	r0, #127	; 0x7f
   83110:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83114:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83118:	e5ac      	b.n	82c74 <_malloc_r+0x44>
   8311a:	f104 0108 	add.w	r1, r4, #8
   8311e:	4628      	mov	r0, r5
   83120:	9300      	str	r3, [sp, #0]
   83122:	f7ff fa75 	bl	82610 <_free_r>
   83126:	9b00      	ldr	r3, [sp, #0]
   83128:	6819      	ldr	r1, [r3, #0]
   8312a:	e6e0      	b.n	82eee <_malloc_r+0x2be>
   8312c:	2001      	movs	r0, #1
   8312e:	f04f 0900 	mov.w	r9, #0
   83132:	e6bd      	b.n	82eb0 <_malloc_r+0x280>
   83134:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83138:	d805      	bhi.n	83146 <_malloc_r+0x516>
   8313a:	0bda      	lsrs	r2, r3, #15
   8313c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83140:	00c9      	lsls	r1, r1, #3
   83142:	3277      	adds	r2, #119	; 0x77
   83144:	e720      	b.n	82f88 <_malloc_r+0x358>
   83146:	f240 5154 	movw	r1, #1364	; 0x554
   8314a:	428a      	cmp	r2, r1
   8314c:	d805      	bhi.n	8315a <_malloc_r+0x52a>
   8314e:	0c9a      	lsrs	r2, r3, #18
   83150:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83154:	00c9      	lsls	r1, r1, #3
   83156:	327c      	adds	r2, #124	; 0x7c
   83158:	e716      	b.n	82f88 <_malloc_r+0x358>
   8315a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8315e:	227e      	movs	r2, #126	; 0x7e
   83160:	e712      	b.n	82f88 <_malloc_r+0x358>
   83162:	687b      	ldr	r3, [r7, #4]
   83164:	e780      	b.n	83068 <_malloc_r+0x438>
   83166:	08f0      	lsrs	r0, r6, #3
   83168:	f106 0308 	add.w	r3, r6, #8
   8316c:	e60e      	b.n	82d8c <_malloc_r+0x15c>
   8316e:	bf00      	nop
   83170:	20070cdc 	.word	0x20070cdc

00083174 <__ascii_mbtowc>:
   83174:	b082      	sub	sp, #8
   83176:	b149      	cbz	r1, 8318c <__ascii_mbtowc+0x18>
   83178:	b15a      	cbz	r2, 83192 <__ascii_mbtowc+0x1e>
   8317a:	b16b      	cbz	r3, 83198 <__ascii_mbtowc+0x24>
   8317c:	7813      	ldrb	r3, [r2, #0]
   8317e:	600b      	str	r3, [r1, #0]
   83180:	7812      	ldrb	r2, [r2, #0]
   83182:	1c10      	adds	r0, r2, #0
   83184:	bf18      	it	ne
   83186:	2001      	movne	r0, #1
   83188:	b002      	add	sp, #8
   8318a:	4770      	bx	lr
   8318c:	a901      	add	r1, sp, #4
   8318e:	2a00      	cmp	r2, #0
   83190:	d1f3      	bne.n	8317a <__ascii_mbtowc+0x6>
   83192:	4610      	mov	r0, r2
   83194:	b002      	add	sp, #8
   83196:	4770      	bx	lr
   83198:	f06f 0001 	mvn.w	r0, #1
   8319c:	e7f4      	b.n	83188 <__ascii_mbtowc+0x14>
   8319e:	bf00      	nop

000831a0 <memchr>:
   831a0:	0783      	lsls	r3, r0, #30
   831a2:	b470      	push	{r4, r5, r6}
   831a4:	b2cd      	uxtb	r5, r1
   831a6:	d03d      	beq.n	83224 <memchr+0x84>
   831a8:	1e54      	subs	r4, r2, #1
   831aa:	b30a      	cbz	r2, 831f0 <memchr+0x50>
   831ac:	7803      	ldrb	r3, [r0, #0]
   831ae:	42ab      	cmp	r3, r5
   831b0:	d01f      	beq.n	831f2 <memchr+0x52>
   831b2:	1c43      	adds	r3, r0, #1
   831b4:	e005      	b.n	831c2 <memchr+0x22>
   831b6:	f114 34ff 	adds.w	r4, r4, #4294967295
   831ba:	d319      	bcc.n	831f0 <memchr+0x50>
   831bc:	7802      	ldrb	r2, [r0, #0]
   831be:	42aa      	cmp	r2, r5
   831c0:	d017      	beq.n	831f2 <memchr+0x52>
   831c2:	f013 0f03 	tst.w	r3, #3
   831c6:	4618      	mov	r0, r3
   831c8:	f103 0301 	add.w	r3, r3, #1
   831cc:	d1f3      	bne.n	831b6 <memchr+0x16>
   831ce:	2c03      	cmp	r4, #3
   831d0:	d811      	bhi.n	831f6 <memchr+0x56>
   831d2:	b34c      	cbz	r4, 83228 <memchr+0x88>
   831d4:	7803      	ldrb	r3, [r0, #0]
   831d6:	42ab      	cmp	r3, r5
   831d8:	d00b      	beq.n	831f2 <memchr+0x52>
   831da:	4404      	add	r4, r0
   831dc:	1c43      	adds	r3, r0, #1
   831de:	e002      	b.n	831e6 <memchr+0x46>
   831e0:	7802      	ldrb	r2, [r0, #0]
   831e2:	42aa      	cmp	r2, r5
   831e4:	d005      	beq.n	831f2 <memchr+0x52>
   831e6:	429c      	cmp	r4, r3
   831e8:	4618      	mov	r0, r3
   831ea:	f103 0301 	add.w	r3, r3, #1
   831ee:	d1f7      	bne.n	831e0 <memchr+0x40>
   831f0:	2000      	movs	r0, #0
   831f2:	bc70      	pop	{r4, r5, r6}
   831f4:	4770      	bx	lr
   831f6:	0209      	lsls	r1, r1, #8
   831f8:	b289      	uxth	r1, r1
   831fa:	4329      	orrs	r1, r5
   831fc:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83200:	6803      	ldr	r3, [r0, #0]
   83202:	4606      	mov	r6, r0
   83204:	404b      	eors	r3, r1
   83206:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8320a:	ea22 0303 	bic.w	r3, r2, r3
   8320e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83212:	f100 0004 	add.w	r0, r0, #4
   83216:	d103      	bne.n	83220 <memchr+0x80>
   83218:	3c04      	subs	r4, #4
   8321a:	2c03      	cmp	r4, #3
   8321c:	d8f0      	bhi.n	83200 <memchr+0x60>
   8321e:	e7d8      	b.n	831d2 <memchr+0x32>
   83220:	4630      	mov	r0, r6
   83222:	e7d7      	b.n	831d4 <memchr+0x34>
   83224:	4614      	mov	r4, r2
   83226:	e7d2      	b.n	831ce <memchr+0x2e>
   83228:	4620      	mov	r0, r4
   8322a:	e7e2      	b.n	831f2 <memchr+0x52>

0008322c <memmove>:
   8322c:	4288      	cmp	r0, r1
   8322e:	b5f0      	push	{r4, r5, r6, r7, lr}
   83230:	d90d      	bls.n	8324e <memmove+0x22>
   83232:	188b      	adds	r3, r1, r2
   83234:	4298      	cmp	r0, r3
   83236:	d20a      	bcs.n	8324e <memmove+0x22>
   83238:	1884      	adds	r4, r0, r2
   8323a:	2a00      	cmp	r2, #0
   8323c:	d051      	beq.n	832e2 <memmove+0xb6>
   8323e:	4622      	mov	r2, r4
   83240:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83244:	4299      	cmp	r1, r3
   83246:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8324a:	d1f9      	bne.n	83240 <memmove+0x14>
   8324c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8324e:	2a0f      	cmp	r2, #15
   83250:	d948      	bls.n	832e4 <memmove+0xb8>
   83252:	ea41 0300 	orr.w	r3, r1, r0
   83256:	079b      	lsls	r3, r3, #30
   83258:	d146      	bne.n	832e8 <memmove+0xbc>
   8325a:	4615      	mov	r5, r2
   8325c:	f100 0410 	add.w	r4, r0, #16
   83260:	f101 0310 	add.w	r3, r1, #16
   83264:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83268:	3d10      	subs	r5, #16
   8326a:	f844 6c10 	str.w	r6, [r4, #-16]
   8326e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83272:	2d0f      	cmp	r5, #15
   83274:	f844 6c0c 	str.w	r6, [r4, #-12]
   83278:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8327c:	f104 0410 	add.w	r4, r4, #16
   83280:	f844 6c18 	str.w	r6, [r4, #-24]
   83284:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83288:	f103 0310 	add.w	r3, r3, #16
   8328c:	f844 6c14 	str.w	r6, [r4, #-20]
   83290:	d8e8      	bhi.n	83264 <memmove+0x38>
   83292:	f1a2 0310 	sub.w	r3, r2, #16
   83296:	f023 030f 	bic.w	r3, r3, #15
   8329a:	f002 0e0f 	and.w	lr, r2, #15
   8329e:	3310      	adds	r3, #16
   832a0:	f1be 0f03 	cmp.w	lr, #3
   832a4:	4419      	add	r1, r3
   832a6:	4403      	add	r3, r0
   832a8:	d921      	bls.n	832ee <memmove+0xc2>
   832aa:	460e      	mov	r6, r1
   832ac:	4674      	mov	r4, lr
   832ae:	1f1d      	subs	r5, r3, #4
   832b0:	f856 7b04 	ldr.w	r7, [r6], #4
   832b4:	3c04      	subs	r4, #4
   832b6:	2c03      	cmp	r4, #3
   832b8:	f845 7f04 	str.w	r7, [r5, #4]!
   832bc:	d8f8      	bhi.n	832b0 <memmove+0x84>
   832be:	f1ae 0404 	sub.w	r4, lr, #4
   832c2:	f024 0403 	bic.w	r4, r4, #3
   832c6:	3404      	adds	r4, #4
   832c8:	4421      	add	r1, r4
   832ca:	4423      	add	r3, r4
   832cc:	f002 0203 	and.w	r2, r2, #3
   832d0:	b162      	cbz	r2, 832ec <memmove+0xc0>
   832d2:	3b01      	subs	r3, #1
   832d4:	440a      	add	r2, r1
   832d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   832da:	428a      	cmp	r2, r1
   832dc:	f803 4f01 	strb.w	r4, [r3, #1]!
   832e0:	d1f9      	bne.n	832d6 <memmove+0xaa>
   832e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   832e4:	4603      	mov	r3, r0
   832e6:	e7f3      	b.n	832d0 <memmove+0xa4>
   832e8:	4603      	mov	r3, r0
   832ea:	e7f2      	b.n	832d2 <memmove+0xa6>
   832ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   832ee:	4672      	mov	r2, lr
   832f0:	e7ee      	b.n	832d0 <memmove+0xa4>
   832f2:	bf00      	nop

000832f4 <__malloc_lock>:
   832f4:	4770      	bx	lr
   832f6:	bf00      	nop

000832f8 <__malloc_unlock>:
   832f8:	4770      	bx	lr
   832fa:	bf00      	nop

000832fc <_realloc_r>:
   832fc:	2900      	cmp	r1, #0
   832fe:	f000 8094 	beq.w	8342a <_realloc_r+0x12e>
   83302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83306:	460c      	mov	r4, r1
   83308:	4615      	mov	r5, r2
   8330a:	b083      	sub	sp, #12
   8330c:	4680      	mov	r8, r0
   8330e:	f105 060b 	add.w	r6, r5, #11
   83312:	f7ff ffef 	bl	832f4 <__malloc_lock>
   83316:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8331a:	2e16      	cmp	r6, #22
   8331c:	f02e 0703 	bic.w	r7, lr, #3
   83320:	f1a4 0908 	sub.w	r9, r4, #8
   83324:	d83c      	bhi.n	833a0 <_realloc_r+0xa4>
   83326:	2210      	movs	r2, #16
   83328:	4616      	mov	r6, r2
   8332a:	42b5      	cmp	r5, r6
   8332c:	d83d      	bhi.n	833aa <_realloc_r+0xae>
   8332e:	4297      	cmp	r7, r2
   83330:	da43      	bge.n	833ba <_realloc_r+0xbe>
   83332:	4bc6      	ldr	r3, [pc, #792]	; (8364c <_realloc_r+0x350>)
   83334:	eb09 0007 	add.w	r0, r9, r7
   83338:	6899      	ldr	r1, [r3, #8]
   8333a:	4288      	cmp	r0, r1
   8333c:	f000 80c3 	beq.w	834c6 <_realloc_r+0x1ca>
   83340:	6843      	ldr	r3, [r0, #4]
   83342:	f023 0101 	bic.w	r1, r3, #1
   83346:	4401      	add	r1, r0
   83348:	6849      	ldr	r1, [r1, #4]
   8334a:	07c9      	lsls	r1, r1, #31
   8334c:	d54d      	bpl.n	833ea <_realloc_r+0xee>
   8334e:	f01e 0f01 	tst.w	lr, #1
   83352:	f000 809b 	beq.w	8348c <_realloc_r+0x190>
   83356:	4629      	mov	r1, r5
   83358:	4640      	mov	r0, r8
   8335a:	f7ff fc69 	bl	82c30 <_malloc_r>
   8335e:	4605      	mov	r5, r0
   83360:	2800      	cmp	r0, #0
   83362:	d03b      	beq.n	833dc <_realloc_r+0xe0>
   83364:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83368:	f1a0 0208 	sub.w	r2, r0, #8
   8336c:	f023 0301 	bic.w	r3, r3, #1
   83370:	444b      	add	r3, r9
   83372:	429a      	cmp	r2, r3
   83374:	f000 812b 	beq.w	835ce <_realloc_r+0x2d2>
   83378:	1f3a      	subs	r2, r7, #4
   8337a:	2a24      	cmp	r2, #36	; 0x24
   8337c:	f200 8118 	bhi.w	835b0 <_realloc_r+0x2b4>
   83380:	2a13      	cmp	r2, #19
   83382:	f200 80eb 	bhi.w	8355c <_realloc_r+0x260>
   83386:	4603      	mov	r3, r0
   83388:	4622      	mov	r2, r4
   8338a:	6811      	ldr	r1, [r2, #0]
   8338c:	6019      	str	r1, [r3, #0]
   8338e:	6851      	ldr	r1, [r2, #4]
   83390:	6059      	str	r1, [r3, #4]
   83392:	6892      	ldr	r2, [r2, #8]
   83394:	609a      	str	r2, [r3, #8]
   83396:	4621      	mov	r1, r4
   83398:	4640      	mov	r0, r8
   8339a:	f7ff f939 	bl	82610 <_free_r>
   8339e:	e01d      	b.n	833dc <_realloc_r+0xe0>
   833a0:	f026 0607 	bic.w	r6, r6, #7
   833a4:	2e00      	cmp	r6, #0
   833a6:	4632      	mov	r2, r6
   833a8:	dabf      	bge.n	8332a <_realloc_r+0x2e>
   833aa:	2500      	movs	r5, #0
   833ac:	230c      	movs	r3, #12
   833ae:	4628      	mov	r0, r5
   833b0:	f8c8 3000 	str.w	r3, [r8]
   833b4:	b003      	add	sp, #12
   833b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833ba:	4625      	mov	r5, r4
   833bc:	1bbb      	subs	r3, r7, r6
   833be:	2b0f      	cmp	r3, #15
   833c0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   833c4:	d81d      	bhi.n	83402 <_realloc_r+0x106>
   833c6:	f002 0201 	and.w	r2, r2, #1
   833ca:	433a      	orrs	r2, r7
   833cc:	eb09 0107 	add.w	r1, r9, r7
   833d0:	f8c9 2004 	str.w	r2, [r9, #4]
   833d4:	684b      	ldr	r3, [r1, #4]
   833d6:	f043 0301 	orr.w	r3, r3, #1
   833da:	604b      	str	r3, [r1, #4]
   833dc:	4640      	mov	r0, r8
   833de:	f7ff ff8b 	bl	832f8 <__malloc_unlock>
   833e2:	4628      	mov	r0, r5
   833e4:	b003      	add	sp, #12
   833e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833ea:	f023 0303 	bic.w	r3, r3, #3
   833ee:	18f9      	adds	r1, r7, r3
   833f0:	4291      	cmp	r1, r2
   833f2:	db1d      	blt.n	83430 <_realloc_r+0x134>
   833f4:	68c3      	ldr	r3, [r0, #12]
   833f6:	6882      	ldr	r2, [r0, #8]
   833f8:	4625      	mov	r5, r4
   833fa:	60d3      	str	r3, [r2, #12]
   833fc:	460f      	mov	r7, r1
   833fe:	609a      	str	r2, [r3, #8]
   83400:	e7dc      	b.n	833bc <_realloc_r+0xc0>
   83402:	f002 0201 	and.w	r2, r2, #1
   83406:	eb09 0106 	add.w	r1, r9, r6
   8340a:	f043 0301 	orr.w	r3, r3, #1
   8340e:	4332      	orrs	r2, r6
   83410:	f8c9 2004 	str.w	r2, [r9, #4]
   83414:	444f      	add	r7, r9
   83416:	604b      	str	r3, [r1, #4]
   83418:	687b      	ldr	r3, [r7, #4]
   8341a:	3108      	adds	r1, #8
   8341c:	f043 0301 	orr.w	r3, r3, #1
   83420:	607b      	str	r3, [r7, #4]
   83422:	4640      	mov	r0, r8
   83424:	f7ff f8f4 	bl	82610 <_free_r>
   83428:	e7d8      	b.n	833dc <_realloc_r+0xe0>
   8342a:	4611      	mov	r1, r2
   8342c:	f7ff bc00 	b.w	82c30 <_malloc_r>
   83430:	f01e 0f01 	tst.w	lr, #1
   83434:	d18f      	bne.n	83356 <_realloc_r+0x5a>
   83436:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8343a:	eba9 0a01 	sub.w	sl, r9, r1
   8343e:	f8da 1004 	ldr.w	r1, [sl, #4]
   83442:	f021 0103 	bic.w	r1, r1, #3
   83446:	440b      	add	r3, r1
   83448:	443b      	add	r3, r7
   8344a:	4293      	cmp	r3, r2
   8344c:	db26      	blt.n	8349c <_realloc_r+0x1a0>
   8344e:	4655      	mov	r5, sl
   83450:	68c1      	ldr	r1, [r0, #12]
   83452:	6880      	ldr	r0, [r0, #8]
   83454:	1f3a      	subs	r2, r7, #4
   83456:	60c1      	str	r1, [r0, #12]
   83458:	6088      	str	r0, [r1, #8]
   8345a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8345e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83462:	2a24      	cmp	r2, #36	; 0x24
   83464:	60c1      	str	r1, [r0, #12]
   83466:	6088      	str	r0, [r1, #8]
   83468:	d826      	bhi.n	834b8 <_realloc_r+0x1bc>
   8346a:	2a13      	cmp	r2, #19
   8346c:	f240 8081 	bls.w	83572 <_realloc_r+0x276>
   83470:	6821      	ldr	r1, [r4, #0]
   83472:	2a1b      	cmp	r2, #27
   83474:	f8ca 1008 	str.w	r1, [sl, #8]
   83478:	6861      	ldr	r1, [r4, #4]
   8347a:	f8ca 100c 	str.w	r1, [sl, #12]
   8347e:	f200 80ad 	bhi.w	835dc <_realloc_r+0x2e0>
   83482:	f104 0008 	add.w	r0, r4, #8
   83486:	f10a 0210 	add.w	r2, sl, #16
   8348a:	e074      	b.n	83576 <_realloc_r+0x27a>
   8348c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83490:	eba9 0a03 	sub.w	sl, r9, r3
   83494:	f8da 1004 	ldr.w	r1, [sl, #4]
   83498:	f021 0103 	bic.w	r1, r1, #3
   8349c:	187b      	adds	r3, r7, r1
   8349e:	4293      	cmp	r3, r2
   834a0:	f6ff af59 	blt.w	83356 <_realloc_r+0x5a>
   834a4:	4655      	mov	r5, sl
   834a6:	f8da 100c 	ldr.w	r1, [sl, #12]
   834aa:	f855 0f08 	ldr.w	r0, [r5, #8]!
   834ae:	1f3a      	subs	r2, r7, #4
   834b0:	2a24      	cmp	r2, #36	; 0x24
   834b2:	60c1      	str	r1, [r0, #12]
   834b4:	6088      	str	r0, [r1, #8]
   834b6:	d9d8      	bls.n	8346a <_realloc_r+0x16e>
   834b8:	4621      	mov	r1, r4
   834ba:	4628      	mov	r0, r5
   834bc:	461f      	mov	r7, r3
   834be:	46d1      	mov	r9, sl
   834c0:	f7ff feb4 	bl	8322c <memmove>
   834c4:	e77a      	b.n	833bc <_realloc_r+0xc0>
   834c6:	6841      	ldr	r1, [r0, #4]
   834c8:	f106 0010 	add.w	r0, r6, #16
   834cc:	f021 0b03 	bic.w	fp, r1, #3
   834d0:	44bb      	add	fp, r7
   834d2:	4583      	cmp	fp, r0
   834d4:	da58      	bge.n	83588 <_realloc_r+0x28c>
   834d6:	f01e 0f01 	tst.w	lr, #1
   834da:	f47f af3c 	bne.w	83356 <_realloc_r+0x5a>
   834de:	f854 1c08 	ldr.w	r1, [r4, #-8]
   834e2:	eba9 0a01 	sub.w	sl, r9, r1
   834e6:	f8da 1004 	ldr.w	r1, [sl, #4]
   834ea:	f021 0103 	bic.w	r1, r1, #3
   834ee:	448b      	add	fp, r1
   834f0:	4558      	cmp	r0, fp
   834f2:	dcd3      	bgt.n	8349c <_realloc_r+0x1a0>
   834f4:	4655      	mov	r5, sl
   834f6:	f8da 100c 	ldr.w	r1, [sl, #12]
   834fa:	f855 0f08 	ldr.w	r0, [r5, #8]!
   834fe:	1f3a      	subs	r2, r7, #4
   83500:	2a24      	cmp	r2, #36	; 0x24
   83502:	60c1      	str	r1, [r0, #12]
   83504:	6088      	str	r0, [r1, #8]
   83506:	f200 808d 	bhi.w	83624 <_realloc_r+0x328>
   8350a:	2a13      	cmp	r2, #19
   8350c:	f240 8087 	bls.w	8361e <_realloc_r+0x322>
   83510:	6821      	ldr	r1, [r4, #0]
   83512:	2a1b      	cmp	r2, #27
   83514:	f8ca 1008 	str.w	r1, [sl, #8]
   83518:	6861      	ldr	r1, [r4, #4]
   8351a:	f8ca 100c 	str.w	r1, [sl, #12]
   8351e:	f200 8088 	bhi.w	83632 <_realloc_r+0x336>
   83522:	f104 0108 	add.w	r1, r4, #8
   83526:	f10a 0210 	add.w	r2, sl, #16
   8352a:	6808      	ldr	r0, [r1, #0]
   8352c:	6010      	str	r0, [r2, #0]
   8352e:	6848      	ldr	r0, [r1, #4]
   83530:	6050      	str	r0, [r2, #4]
   83532:	6889      	ldr	r1, [r1, #8]
   83534:	6091      	str	r1, [r2, #8]
   83536:	ebab 0206 	sub.w	r2, fp, r6
   8353a:	eb0a 0106 	add.w	r1, sl, r6
   8353e:	f042 0201 	orr.w	r2, r2, #1
   83542:	6099      	str	r1, [r3, #8]
   83544:	604a      	str	r2, [r1, #4]
   83546:	f8da 3004 	ldr.w	r3, [sl, #4]
   8354a:	4640      	mov	r0, r8
   8354c:	f003 0301 	and.w	r3, r3, #1
   83550:	431e      	orrs	r6, r3
   83552:	f8ca 6004 	str.w	r6, [sl, #4]
   83556:	f7ff fecf 	bl	832f8 <__malloc_unlock>
   8355a:	e742      	b.n	833e2 <_realloc_r+0xe6>
   8355c:	6823      	ldr	r3, [r4, #0]
   8355e:	2a1b      	cmp	r2, #27
   83560:	6003      	str	r3, [r0, #0]
   83562:	6863      	ldr	r3, [r4, #4]
   83564:	6043      	str	r3, [r0, #4]
   83566:	d827      	bhi.n	835b8 <_realloc_r+0x2bc>
   83568:	f100 0308 	add.w	r3, r0, #8
   8356c:	f104 0208 	add.w	r2, r4, #8
   83570:	e70b      	b.n	8338a <_realloc_r+0x8e>
   83572:	4620      	mov	r0, r4
   83574:	462a      	mov	r2, r5
   83576:	6801      	ldr	r1, [r0, #0]
   83578:	461f      	mov	r7, r3
   8357a:	6011      	str	r1, [r2, #0]
   8357c:	6841      	ldr	r1, [r0, #4]
   8357e:	46d1      	mov	r9, sl
   83580:	6051      	str	r1, [r2, #4]
   83582:	6883      	ldr	r3, [r0, #8]
   83584:	6093      	str	r3, [r2, #8]
   83586:	e719      	b.n	833bc <_realloc_r+0xc0>
   83588:	ebab 0b06 	sub.w	fp, fp, r6
   8358c:	eb09 0106 	add.w	r1, r9, r6
   83590:	f04b 0201 	orr.w	r2, fp, #1
   83594:	6099      	str	r1, [r3, #8]
   83596:	604a      	str	r2, [r1, #4]
   83598:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8359c:	4640      	mov	r0, r8
   8359e:	f003 0301 	and.w	r3, r3, #1
   835a2:	431e      	orrs	r6, r3
   835a4:	f844 6c04 	str.w	r6, [r4, #-4]
   835a8:	f7ff fea6 	bl	832f8 <__malloc_unlock>
   835ac:	4625      	mov	r5, r4
   835ae:	e718      	b.n	833e2 <_realloc_r+0xe6>
   835b0:	4621      	mov	r1, r4
   835b2:	f7ff fe3b 	bl	8322c <memmove>
   835b6:	e6ee      	b.n	83396 <_realloc_r+0x9a>
   835b8:	68a3      	ldr	r3, [r4, #8]
   835ba:	2a24      	cmp	r2, #36	; 0x24
   835bc:	6083      	str	r3, [r0, #8]
   835be:	68e3      	ldr	r3, [r4, #12]
   835c0:	60c3      	str	r3, [r0, #12]
   835c2:	d018      	beq.n	835f6 <_realloc_r+0x2fa>
   835c4:	f100 0310 	add.w	r3, r0, #16
   835c8:	f104 0210 	add.w	r2, r4, #16
   835cc:	e6dd      	b.n	8338a <_realloc_r+0x8e>
   835ce:	f850 3c04 	ldr.w	r3, [r0, #-4]
   835d2:	4625      	mov	r5, r4
   835d4:	f023 0303 	bic.w	r3, r3, #3
   835d8:	441f      	add	r7, r3
   835da:	e6ef      	b.n	833bc <_realloc_r+0xc0>
   835dc:	68a1      	ldr	r1, [r4, #8]
   835de:	2a24      	cmp	r2, #36	; 0x24
   835e0:	f8ca 1010 	str.w	r1, [sl, #16]
   835e4:	68e1      	ldr	r1, [r4, #12]
   835e6:	f8ca 1014 	str.w	r1, [sl, #20]
   835ea:	d00d      	beq.n	83608 <_realloc_r+0x30c>
   835ec:	f104 0010 	add.w	r0, r4, #16
   835f0:	f10a 0218 	add.w	r2, sl, #24
   835f4:	e7bf      	b.n	83576 <_realloc_r+0x27a>
   835f6:	6922      	ldr	r2, [r4, #16]
   835f8:	f100 0318 	add.w	r3, r0, #24
   835fc:	6102      	str	r2, [r0, #16]
   835fe:	6961      	ldr	r1, [r4, #20]
   83600:	f104 0218 	add.w	r2, r4, #24
   83604:	6141      	str	r1, [r0, #20]
   83606:	e6c0      	b.n	8338a <_realloc_r+0x8e>
   83608:	6922      	ldr	r2, [r4, #16]
   8360a:	f104 0018 	add.w	r0, r4, #24
   8360e:	f8ca 2018 	str.w	r2, [sl, #24]
   83612:	6961      	ldr	r1, [r4, #20]
   83614:	f10a 0220 	add.w	r2, sl, #32
   83618:	f8ca 101c 	str.w	r1, [sl, #28]
   8361c:	e7ab      	b.n	83576 <_realloc_r+0x27a>
   8361e:	4621      	mov	r1, r4
   83620:	462a      	mov	r2, r5
   83622:	e782      	b.n	8352a <_realloc_r+0x22e>
   83624:	4621      	mov	r1, r4
   83626:	4628      	mov	r0, r5
   83628:	9301      	str	r3, [sp, #4]
   8362a:	f7ff fdff 	bl	8322c <memmove>
   8362e:	9b01      	ldr	r3, [sp, #4]
   83630:	e781      	b.n	83536 <_realloc_r+0x23a>
   83632:	68a1      	ldr	r1, [r4, #8]
   83634:	2a24      	cmp	r2, #36	; 0x24
   83636:	f8ca 1010 	str.w	r1, [sl, #16]
   8363a:	68e1      	ldr	r1, [r4, #12]
   8363c:	f8ca 1014 	str.w	r1, [sl, #20]
   83640:	d006      	beq.n	83650 <_realloc_r+0x354>
   83642:	f104 0110 	add.w	r1, r4, #16
   83646:	f10a 0218 	add.w	r2, sl, #24
   8364a:	e76e      	b.n	8352a <_realloc_r+0x22e>
   8364c:	20070714 	.word	0x20070714
   83650:	6922      	ldr	r2, [r4, #16]
   83652:	f104 0118 	add.w	r1, r4, #24
   83656:	f8ca 2018 	str.w	r2, [sl, #24]
   8365a:	6960      	ldr	r0, [r4, #20]
   8365c:	f10a 0220 	add.w	r2, sl, #32
   83660:	f8ca 001c 	str.w	r0, [sl, #28]
   83664:	e761      	b.n	8352a <_realloc_r+0x22e>
   83666:	bf00      	nop

00083668 <_sbrk_r>:
   83668:	b538      	push	{r3, r4, r5, lr}
   8366a:	2300      	movs	r3, #0
   8366c:	4c06      	ldr	r4, [pc, #24]	; (83688 <_sbrk_r+0x20>)
   8366e:	4605      	mov	r5, r0
   83670:	4608      	mov	r0, r1
   83672:	6023      	str	r3, [r4, #0]
   83674:	f7fd fc7a 	bl	80f6c <_sbrk>
   83678:	1c43      	adds	r3, r0, #1
   8367a:	d000      	beq.n	8367e <_sbrk_r+0x16>
   8367c:	bd38      	pop	{r3, r4, r5, pc}
   8367e:	6823      	ldr	r3, [r4, #0]
   83680:	2b00      	cmp	r3, #0
   83682:	d0fb      	beq.n	8367c <_sbrk_r+0x14>
   83684:	602b      	str	r3, [r5, #0]
   83686:	bd38      	pop	{r3, r4, r5, pc}
   83688:	20070d1c 	.word	0x20070d1c

0008368c <__sread>:
   8368c:	b510      	push	{r4, lr}
   8368e:	460c      	mov	r4, r1
   83690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83694:	f000 f9c6 	bl	83a24 <_read_r>
   83698:	2800      	cmp	r0, #0
   8369a:	db03      	blt.n	836a4 <__sread+0x18>
   8369c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8369e:	4403      	add	r3, r0
   836a0:	6523      	str	r3, [r4, #80]	; 0x50
   836a2:	bd10      	pop	{r4, pc}
   836a4:	89a3      	ldrh	r3, [r4, #12]
   836a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   836aa:	81a3      	strh	r3, [r4, #12]
   836ac:	bd10      	pop	{r4, pc}
   836ae:	bf00      	nop

000836b0 <__swrite>:
   836b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   836b4:	460c      	mov	r4, r1
   836b6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   836ba:	461f      	mov	r7, r3
   836bc:	05cb      	lsls	r3, r1, #23
   836be:	4616      	mov	r6, r2
   836c0:	4605      	mov	r5, r0
   836c2:	d507      	bpl.n	836d4 <__swrite+0x24>
   836c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836c8:	2302      	movs	r3, #2
   836ca:	2200      	movs	r2, #0
   836cc:	f000 f994 	bl	839f8 <_lseek_r>
   836d0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   836d4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   836d8:	81a1      	strh	r1, [r4, #12]
   836da:	463b      	mov	r3, r7
   836dc:	4632      	mov	r2, r6
   836de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836e2:	4628      	mov	r0, r5
   836e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   836e8:	f000 b8a2 	b.w	83830 <_write_r>

000836ec <__sseek>:
   836ec:	b510      	push	{r4, lr}
   836ee:	460c      	mov	r4, r1
   836f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836f4:	f000 f980 	bl	839f8 <_lseek_r>
   836f8:	89a3      	ldrh	r3, [r4, #12]
   836fa:	1c42      	adds	r2, r0, #1
   836fc:	bf0e      	itee	eq
   836fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83702:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83706:	6520      	strne	r0, [r4, #80]	; 0x50
   83708:	81a3      	strh	r3, [r4, #12]
   8370a:	bd10      	pop	{r4, pc}

0008370c <__sclose>:
   8370c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83710:	f000 b8fa 	b.w	83908 <_close_r>

00083714 <__swbuf_r>:
   83714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83716:	460d      	mov	r5, r1
   83718:	4614      	mov	r4, r2
   8371a:	4606      	mov	r6, r0
   8371c:	b110      	cbz	r0, 83724 <__swbuf_r+0x10>
   8371e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83720:	2b00      	cmp	r3, #0
   83722:	d04b      	beq.n	837bc <__swbuf_r+0xa8>
   83724:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83728:	69a3      	ldr	r3, [r4, #24]
   8372a:	b291      	uxth	r1, r2
   8372c:	0708      	lsls	r0, r1, #28
   8372e:	60a3      	str	r3, [r4, #8]
   83730:	d539      	bpl.n	837a6 <__swbuf_r+0x92>
   83732:	6923      	ldr	r3, [r4, #16]
   83734:	2b00      	cmp	r3, #0
   83736:	d036      	beq.n	837a6 <__swbuf_r+0x92>
   83738:	b2ed      	uxtb	r5, r5
   8373a:	0489      	lsls	r1, r1, #18
   8373c:	462f      	mov	r7, r5
   8373e:	d515      	bpl.n	8376c <__swbuf_r+0x58>
   83740:	6822      	ldr	r2, [r4, #0]
   83742:	6961      	ldr	r1, [r4, #20]
   83744:	1ad3      	subs	r3, r2, r3
   83746:	428b      	cmp	r3, r1
   83748:	da1c      	bge.n	83784 <__swbuf_r+0x70>
   8374a:	3301      	adds	r3, #1
   8374c:	68a1      	ldr	r1, [r4, #8]
   8374e:	1c50      	adds	r0, r2, #1
   83750:	3901      	subs	r1, #1
   83752:	60a1      	str	r1, [r4, #8]
   83754:	6020      	str	r0, [r4, #0]
   83756:	7015      	strb	r5, [r2, #0]
   83758:	6962      	ldr	r2, [r4, #20]
   8375a:	429a      	cmp	r2, r3
   8375c:	d01a      	beq.n	83794 <__swbuf_r+0x80>
   8375e:	89a3      	ldrh	r3, [r4, #12]
   83760:	07db      	lsls	r3, r3, #31
   83762:	d501      	bpl.n	83768 <__swbuf_r+0x54>
   83764:	2d0a      	cmp	r5, #10
   83766:	d015      	beq.n	83794 <__swbuf_r+0x80>
   83768:	4638      	mov	r0, r7
   8376a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8376c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8376e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83772:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83776:	81a2      	strh	r2, [r4, #12]
   83778:	6822      	ldr	r2, [r4, #0]
   8377a:	6661      	str	r1, [r4, #100]	; 0x64
   8377c:	6961      	ldr	r1, [r4, #20]
   8377e:	1ad3      	subs	r3, r2, r3
   83780:	428b      	cmp	r3, r1
   83782:	dbe2      	blt.n	8374a <__swbuf_r+0x36>
   83784:	4621      	mov	r1, r4
   83786:	4630      	mov	r0, r6
   83788:	f7fe fddc 	bl	82344 <_fflush_r>
   8378c:	b940      	cbnz	r0, 837a0 <__swbuf_r+0x8c>
   8378e:	2301      	movs	r3, #1
   83790:	6822      	ldr	r2, [r4, #0]
   83792:	e7db      	b.n	8374c <__swbuf_r+0x38>
   83794:	4621      	mov	r1, r4
   83796:	4630      	mov	r0, r6
   83798:	f7fe fdd4 	bl	82344 <_fflush_r>
   8379c:	2800      	cmp	r0, #0
   8379e:	d0e3      	beq.n	83768 <__swbuf_r+0x54>
   837a0:	f04f 37ff 	mov.w	r7, #4294967295
   837a4:	e7e0      	b.n	83768 <__swbuf_r+0x54>
   837a6:	4621      	mov	r1, r4
   837a8:	4630      	mov	r0, r6
   837aa:	f7fe fcbb 	bl	82124 <__swsetup_r>
   837ae:	2800      	cmp	r0, #0
   837b0:	d1f6      	bne.n	837a0 <__swbuf_r+0x8c>
   837b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   837b6:	6923      	ldr	r3, [r4, #16]
   837b8:	b291      	uxth	r1, r2
   837ba:	e7bd      	b.n	83738 <__swbuf_r+0x24>
   837bc:	f7fe fe56 	bl	8246c <__sinit>
   837c0:	e7b0      	b.n	83724 <__swbuf_r+0x10>
   837c2:	bf00      	nop

000837c4 <_wcrtomb_r>:
   837c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   837c6:	4606      	mov	r6, r0
   837c8:	b085      	sub	sp, #20
   837ca:	461f      	mov	r7, r3
   837cc:	b189      	cbz	r1, 837f2 <_wcrtomb_r+0x2e>
   837ce:	4c10      	ldr	r4, [pc, #64]	; (83810 <_wcrtomb_r+0x4c>)
   837d0:	4d10      	ldr	r5, [pc, #64]	; (83814 <_wcrtomb_r+0x50>)
   837d2:	6824      	ldr	r4, [r4, #0]
   837d4:	6b64      	ldr	r4, [r4, #52]	; 0x34
   837d6:	2c00      	cmp	r4, #0
   837d8:	bf08      	it	eq
   837da:	462c      	moveq	r4, r5
   837dc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   837e0:	47a0      	blx	r4
   837e2:	1c43      	adds	r3, r0, #1
   837e4:	d103      	bne.n	837ee <_wcrtomb_r+0x2a>
   837e6:	2200      	movs	r2, #0
   837e8:	238a      	movs	r3, #138	; 0x8a
   837ea:	603a      	str	r2, [r7, #0]
   837ec:	6033      	str	r3, [r6, #0]
   837ee:	b005      	add	sp, #20
   837f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   837f2:	460c      	mov	r4, r1
   837f4:	4a06      	ldr	r2, [pc, #24]	; (83810 <_wcrtomb_r+0x4c>)
   837f6:	4d07      	ldr	r5, [pc, #28]	; (83814 <_wcrtomb_r+0x50>)
   837f8:	6811      	ldr	r1, [r2, #0]
   837fa:	4622      	mov	r2, r4
   837fc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   837fe:	a901      	add	r1, sp, #4
   83800:	2c00      	cmp	r4, #0
   83802:	bf08      	it	eq
   83804:	462c      	moveq	r4, r5
   83806:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8380a:	47a0      	blx	r4
   8380c:	e7e9      	b.n	837e2 <_wcrtomb_r+0x1e>
   8380e:	bf00      	nop
   83810:	20070178 	.word	0x20070178
   83814:	200705a8 	.word	0x200705a8

00083818 <__ascii_wctomb>:
   83818:	b119      	cbz	r1, 83822 <__ascii_wctomb+0xa>
   8381a:	2aff      	cmp	r2, #255	; 0xff
   8381c:	d803      	bhi.n	83826 <__ascii_wctomb+0xe>
   8381e:	700a      	strb	r2, [r1, #0]
   83820:	2101      	movs	r1, #1
   83822:	4608      	mov	r0, r1
   83824:	4770      	bx	lr
   83826:	238a      	movs	r3, #138	; 0x8a
   83828:	f04f 31ff 	mov.w	r1, #4294967295
   8382c:	6003      	str	r3, [r0, #0]
   8382e:	e7f8      	b.n	83822 <__ascii_wctomb+0xa>

00083830 <_write_r>:
   83830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83832:	460e      	mov	r6, r1
   83834:	2500      	movs	r5, #0
   83836:	4c08      	ldr	r4, [pc, #32]	; (83858 <_write_r+0x28>)
   83838:	4611      	mov	r1, r2
   8383a:	4607      	mov	r7, r0
   8383c:	461a      	mov	r2, r3
   8383e:	4630      	mov	r0, r6
   83840:	6025      	str	r5, [r4, #0]
   83842:	f7fc ff9b 	bl	8077c <_write>
   83846:	1c43      	adds	r3, r0, #1
   83848:	d000      	beq.n	8384c <_write_r+0x1c>
   8384a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8384c:	6823      	ldr	r3, [r4, #0]
   8384e:	2b00      	cmp	r3, #0
   83850:	d0fb      	beq.n	8384a <_write_r+0x1a>
   83852:	603b      	str	r3, [r7, #0]
   83854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83856:	bf00      	nop
   83858:	20070d1c 	.word	0x20070d1c

0008385c <__register_exitproc>:
   8385c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83860:	4c27      	ldr	r4, [pc, #156]	; (83900 <__register_exitproc+0xa4>)
   83862:	4607      	mov	r7, r0
   83864:	6826      	ldr	r6, [r4, #0]
   83866:	4688      	mov	r8, r1
   83868:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8386c:	4692      	mov	sl, r2
   8386e:	4699      	mov	r9, r3
   83870:	2c00      	cmp	r4, #0
   83872:	d03c      	beq.n	838ee <__register_exitproc+0x92>
   83874:	6865      	ldr	r5, [r4, #4]
   83876:	2d1f      	cmp	r5, #31
   83878:	dc1a      	bgt.n	838b0 <__register_exitproc+0x54>
   8387a:	f105 0e01 	add.w	lr, r5, #1
   8387e:	b17f      	cbz	r7, 838a0 <__register_exitproc+0x44>
   83880:	2001      	movs	r0, #1
   83882:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   83886:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8388a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
   8388e:	fa00 f205 	lsl.w	r2, r0, r5
   83892:	4311      	orrs	r1, r2
   83894:	2f02      	cmp	r7, #2
   83896:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
   8389a:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   8389e:	d020      	beq.n	838e2 <__register_exitproc+0x86>
   838a0:	3502      	adds	r5, #2
   838a2:	f8c4 e004 	str.w	lr, [r4, #4]
   838a6:	2000      	movs	r0, #0
   838a8:	f844 8025 	str.w	r8, [r4, r5, lsl #2]
   838ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   838b0:	4b14      	ldr	r3, [pc, #80]	; (83904 <__register_exitproc+0xa8>)
   838b2:	b30b      	cbz	r3, 838f8 <__register_exitproc+0x9c>
   838b4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   838b8:	f7ff f9b2 	bl	82c20 <malloc>
   838bc:	4604      	mov	r4, r0
   838be:	b1d8      	cbz	r0, 838f8 <__register_exitproc+0x9c>
   838c0:	2000      	movs	r0, #0
   838c2:	f8d6 3148 	ldr.w	r3, [r6, #328]	; 0x148
   838c6:	f04f 0e01 	mov.w	lr, #1
   838ca:	6060      	str	r0, [r4, #4]
   838cc:	6023      	str	r3, [r4, #0]
   838ce:	4605      	mov	r5, r0
   838d0:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   838d4:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   838d8:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   838dc:	2f00      	cmp	r7, #0
   838de:	d0df      	beq.n	838a0 <__register_exitproc+0x44>
   838e0:	e7ce      	b.n	83880 <__register_exitproc+0x24>
   838e2:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   838e6:	431a      	orrs	r2, r3
   838e8:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   838ec:	e7d8      	b.n	838a0 <__register_exitproc+0x44>
   838ee:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   838f2:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   838f6:	e7bd      	b.n	83874 <__register_exitproc+0x18>
   838f8:	f04f 30ff 	mov.w	r0, #4294967295
   838fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83900:	00083d90 	.word	0x00083d90
   83904:	00082c21 	.word	0x00082c21

00083908 <_close_r>:
   83908:	b538      	push	{r3, r4, r5, lr}
   8390a:	2300      	movs	r3, #0
   8390c:	4c06      	ldr	r4, [pc, #24]	; (83928 <_close_r+0x20>)
   8390e:	4605      	mov	r5, r0
   83910:	4608      	mov	r0, r1
   83912:	6023      	str	r3, [r4, #0]
   83914:	f7fd fb46 	bl	80fa4 <_close>
   83918:	1c43      	adds	r3, r0, #1
   8391a:	d000      	beq.n	8391e <_close_r+0x16>
   8391c:	bd38      	pop	{r3, r4, r5, pc}
   8391e:	6823      	ldr	r3, [r4, #0]
   83920:	2b00      	cmp	r3, #0
   83922:	d0fb      	beq.n	8391c <_close_r+0x14>
   83924:	602b      	str	r3, [r5, #0]
   83926:	bd38      	pop	{r3, r4, r5, pc}
   83928:	20070d1c 	.word	0x20070d1c

0008392c <_fclose_r>:
   8392c:	b570      	push	{r4, r5, r6, lr}
   8392e:	b139      	cbz	r1, 83940 <_fclose_r+0x14>
   83930:	4605      	mov	r5, r0
   83932:	460c      	mov	r4, r1
   83934:	b108      	cbz	r0, 8393a <_fclose_r+0xe>
   83936:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83938:	b383      	cbz	r3, 8399c <_fclose_r+0x70>
   8393a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8393e:	b913      	cbnz	r3, 83946 <_fclose_r+0x1a>
   83940:	2600      	movs	r6, #0
   83942:	4630      	mov	r0, r6
   83944:	bd70      	pop	{r4, r5, r6, pc}
   83946:	4621      	mov	r1, r4
   83948:	4628      	mov	r0, r5
   8394a:	f7fe fc5f 	bl	8220c <__sflush_r>
   8394e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83950:	4606      	mov	r6, r0
   83952:	b133      	cbz	r3, 83962 <_fclose_r+0x36>
   83954:	69e1      	ldr	r1, [r4, #28]
   83956:	4628      	mov	r0, r5
   83958:	4798      	blx	r3
   8395a:	2800      	cmp	r0, #0
   8395c:	bfb8      	it	lt
   8395e:	f04f 36ff 	movlt.w	r6, #4294967295
   83962:	89a3      	ldrh	r3, [r4, #12]
   83964:	061b      	lsls	r3, r3, #24
   83966:	d41c      	bmi.n	839a2 <_fclose_r+0x76>
   83968:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8396a:	b141      	cbz	r1, 8397e <_fclose_r+0x52>
   8396c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83970:	4299      	cmp	r1, r3
   83972:	d002      	beq.n	8397a <_fclose_r+0x4e>
   83974:	4628      	mov	r0, r5
   83976:	f7fe fe4b 	bl	82610 <_free_r>
   8397a:	2300      	movs	r3, #0
   8397c:	6323      	str	r3, [r4, #48]	; 0x30
   8397e:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83980:	b121      	cbz	r1, 8398c <_fclose_r+0x60>
   83982:	4628      	mov	r0, r5
   83984:	f7fe fe44 	bl	82610 <_free_r>
   83988:	2300      	movs	r3, #0
   8398a:	6463      	str	r3, [r4, #68]	; 0x44
   8398c:	f7fe fd74 	bl	82478 <__sfp_lock_acquire>
   83990:	2300      	movs	r3, #0
   83992:	81a3      	strh	r3, [r4, #12]
   83994:	f7fe fd72 	bl	8247c <__sfp_lock_release>
   83998:	4630      	mov	r0, r6
   8399a:	bd70      	pop	{r4, r5, r6, pc}
   8399c:	f7fe fd66 	bl	8246c <__sinit>
   839a0:	e7cb      	b.n	8393a <_fclose_r+0xe>
   839a2:	6921      	ldr	r1, [r4, #16]
   839a4:	4628      	mov	r0, r5
   839a6:	f7fe fe33 	bl	82610 <_free_r>
   839aa:	e7dd      	b.n	83968 <_fclose_r+0x3c>

000839ac <_fstat_r>:
   839ac:	b570      	push	{r4, r5, r6, lr}
   839ae:	460d      	mov	r5, r1
   839b0:	2300      	movs	r3, #0
   839b2:	4c07      	ldr	r4, [pc, #28]	; (839d0 <_fstat_r+0x24>)
   839b4:	4606      	mov	r6, r0
   839b6:	4611      	mov	r1, r2
   839b8:	4628      	mov	r0, r5
   839ba:	6023      	str	r3, [r4, #0]
   839bc:	f7fd faf5 	bl	80faa <_fstat>
   839c0:	1c43      	adds	r3, r0, #1
   839c2:	d000      	beq.n	839c6 <_fstat_r+0x1a>
   839c4:	bd70      	pop	{r4, r5, r6, pc}
   839c6:	6823      	ldr	r3, [r4, #0]
   839c8:	2b00      	cmp	r3, #0
   839ca:	d0fb      	beq.n	839c4 <_fstat_r+0x18>
   839cc:	6033      	str	r3, [r6, #0]
   839ce:	bd70      	pop	{r4, r5, r6, pc}
   839d0:	20070d1c 	.word	0x20070d1c

000839d4 <_isatty_r>:
   839d4:	b538      	push	{r3, r4, r5, lr}
   839d6:	2300      	movs	r3, #0
   839d8:	4c06      	ldr	r4, [pc, #24]	; (839f4 <_isatty_r+0x20>)
   839da:	4605      	mov	r5, r0
   839dc:	4608      	mov	r0, r1
   839de:	6023      	str	r3, [r4, #0]
   839e0:	f7fd fae8 	bl	80fb4 <_isatty>
   839e4:	1c43      	adds	r3, r0, #1
   839e6:	d000      	beq.n	839ea <_isatty_r+0x16>
   839e8:	bd38      	pop	{r3, r4, r5, pc}
   839ea:	6823      	ldr	r3, [r4, #0]
   839ec:	2b00      	cmp	r3, #0
   839ee:	d0fb      	beq.n	839e8 <_isatty_r+0x14>
   839f0:	602b      	str	r3, [r5, #0]
   839f2:	bd38      	pop	{r3, r4, r5, pc}
   839f4:	20070d1c 	.word	0x20070d1c

000839f8 <_lseek_r>:
   839f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   839fa:	460e      	mov	r6, r1
   839fc:	2500      	movs	r5, #0
   839fe:	4c08      	ldr	r4, [pc, #32]	; (83a20 <_lseek_r+0x28>)
   83a00:	4611      	mov	r1, r2
   83a02:	4607      	mov	r7, r0
   83a04:	461a      	mov	r2, r3
   83a06:	4630      	mov	r0, r6
   83a08:	6025      	str	r5, [r4, #0]
   83a0a:	f7fd fad5 	bl	80fb8 <_lseek>
   83a0e:	1c43      	adds	r3, r0, #1
   83a10:	d000      	beq.n	83a14 <_lseek_r+0x1c>
   83a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a14:	6823      	ldr	r3, [r4, #0]
   83a16:	2b00      	cmp	r3, #0
   83a18:	d0fb      	beq.n	83a12 <_lseek_r+0x1a>
   83a1a:	603b      	str	r3, [r7, #0]
   83a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a1e:	bf00      	nop
   83a20:	20070d1c 	.word	0x20070d1c

00083a24 <_read_r>:
   83a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a26:	460e      	mov	r6, r1
   83a28:	2500      	movs	r5, #0
   83a2a:	4c08      	ldr	r4, [pc, #32]	; (83a4c <_read_r+0x28>)
   83a2c:	4611      	mov	r1, r2
   83a2e:	4607      	mov	r7, r0
   83a30:	461a      	mov	r2, r3
   83a32:	4630      	mov	r0, r6
   83a34:	6025      	str	r5, [r4, #0]
   83a36:	f7fc fb93 	bl	80160 <_read>
   83a3a:	1c43      	adds	r3, r0, #1
   83a3c:	d000      	beq.n	83a40 <_read_r+0x1c>
   83a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a40:	6823      	ldr	r3, [r4, #0]
   83a42:	2b00      	cmp	r3, #0
   83a44:	d0fb      	beq.n	83a3e <_read_r+0x1a>
   83a46:	603b      	str	r3, [r7, #0]
   83a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83a4a:	bf00      	nop
   83a4c:	20070d1c 	.word	0x20070d1c

00083a50 <__aeabi_uldivmod>:
   83a50:	b953      	cbnz	r3, 83a68 <__aeabi_uldivmod+0x18>
   83a52:	b94a      	cbnz	r2, 83a68 <__aeabi_uldivmod+0x18>
   83a54:	2900      	cmp	r1, #0
   83a56:	bf08      	it	eq
   83a58:	2800      	cmpeq	r0, #0
   83a5a:	bf1c      	itt	ne
   83a5c:	f04f 31ff 	movne.w	r1, #4294967295
   83a60:	f04f 30ff 	movne.w	r0, #4294967295
   83a64:	f000 b97a 	b.w	83d5c <__aeabi_idiv0>
   83a68:	f1ad 0c08 	sub.w	ip, sp, #8
   83a6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83a70:	f000 f806 	bl	83a80 <__udivmoddi4>
   83a74:	f8dd e004 	ldr.w	lr, [sp, #4]
   83a78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83a7c:	b004      	add	sp, #16
   83a7e:	4770      	bx	lr

00083a80 <__udivmoddi4>:
   83a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83a84:	468c      	mov	ip, r1
   83a86:	460e      	mov	r6, r1
   83a88:	4604      	mov	r4, r0
   83a8a:	9d08      	ldr	r5, [sp, #32]
   83a8c:	2b00      	cmp	r3, #0
   83a8e:	d150      	bne.n	83b32 <__udivmoddi4+0xb2>
   83a90:	428a      	cmp	r2, r1
   83a92:	4617      	mov	r7, r2
   83a94:	d96c      	bls.n	83b70 <__udivmoddi4+0xf0>
   83a96:	fab2 fe82 	clz	lr, r2
   83a9a:	f1be 0f00 	cmp.w	lr, #0
   83a9e:	d00b      	beq.n	83ab8 <__udivmoddi4+0x38>
   83aa0:	f1ce 0c20 	rsb	ip, lr, #32
   83aa4:	fa01 f60e 	lsl.w	r6, r1, lr
   83aa8:	fa20 fc0c 	lsr.w	ip, r0, ip
   83aac:	fa02 f70e 	lsl.w	r7, r2, lr
   83ab0:	ea4c 0c06 	orr.w	ip, ip, r6
   83ab4:	fa00 f40e 	lsl.w	r4, r0, lr
   83ab8:	0c3a      	lsrs	r2, r7, #16
   83aba:	fbbc f9f2 	udiv	r9, ip, r2
   83abe:	b2bb      	uxth	r3, r7
   83ac0:	fb02 cc19 	mls	ip, r2, r9, ip
   83ac4:	fb09 fa03 	mul.w	sl, r9, r3
   83ac8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83acc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83ad0:	45b2      	cmp	sl, r6
   83ad2:	d90a      	bls.n	83aea <__udivmoddi4+0x6a>
   83ad4:	19f6      	adds	r6, r6, r7
   83ad6:	f109 31ff 	add.w	r1, r9, #4294967295
   83ada:	f080 8125 	bcs.w	83d28 <__udivmoddi4+0x2a8>
   83ade:	45b2      	cmp	sl, r6
   83ae0:	f240 8122 	bls.w	83d28 <__udivmoddi4+0x2a8>
   83ae4:	f1a9 0902 	sub.w	r9, r9, #2
   83ae8:	443e      	add	r6, r7
   83aea:	eba6 060a 	sub.w	r6, r6, sl
   83aee:	fbb6 f0f2 	udiv	r0, r6, r2
   83af2:	fb02 6610 	mls	r6, r2, r0, r6
   83af6:	fb00 f303 	mul.w	r3, r0, r3
   83afa:	b2a4      	uxth	r4, r4
   83afc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83b00:	42a3      	cmp	r3, r4
   83b02:	d909      	bls.n	83b18 <__udivmoddi4+0x98>
   83b04:	19e4      	adds	r4, r4, r7
   83b06:	f100 32ff 	add.w	r2, r0, #4294967295
   83b0a:	f080 810b 	bcs.w	83d24 <__udivmoddi4+0x2a4>
   83b0e:	42a3      	cmp	r3, r4
   83b10:	f240 8108 	bls.w	83d24 <__udivmoddi4+0x2a4>
   83b14:	3802      	subs	r0, #2
   83b16:	443c      	add	r4, r7
   83b18:	2100      	movs	r1, #0
   83b1a:	1ae4      	subs	r4, r4, r3
   83b1c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83b20:	2d00      	cmp	r5, #0
   83b22:	d062      	beq.n	83bea <__udivmoddi4+0x16a>
   83b24:	2300      	movs	r3, #0
   83b26:	fa24 f40e 	lsr.w	r4, r4, lr
   83b2a:	602c      	str	r4, [r5, #0]
   83b2c:	606b      	str	r3, [r5, #4]
   83b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83b32:	428b      	cmp	r3, r1
   83b34:	d907      	bls.n	83b46 <__udivmoddi4+0xc6>
   83b36:	2d00      	cmp	r5, #0
   83b38:	d055      	beq.n	83be6 <__udivmoddi4+0x166>
   83b3a:	2100      	movs	r1, #0
   83b3c:	e885 0041 	stmia.w	r5, {r0, r6}
   83b40:	4608      	mov	r0, r1
   83b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83b46:	fab3 f183 	clz	r1, r3
   83b4a:	2900      	cmp	r1, #0
   83b4c:	f040 808f 	bne.w	83c6e <__udivmoddi4+0x1ee>
   83b50:	42b3      	cmp	r3, r6
   83b52:	d302      	bcc.n	83b5a <__udivmoddi4+0xda>
   83b54:	4282      	cmp	r2, r0
   83b56:	f200 80fc 	bhi.w	83d52 <__udivmoddi4+0x2d2>
   83b5a:	1a84      	subs	r4, r0, r2
   83b5c:	eb66 0603 	sbc.w	r6, r6, r3
   83b60:	2001      	movs	r0, #1
   83b62:	46b4      	mov	ip, r6
   83b64:	2d00      	cmp	r5, #0
   83b66:	d040      	beq.n	83bea <__udivmoddi4+0x16a>
   83b68:	e885 1010 	stmia.w	r5, {r4, ip}
   83b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83b70:	b912      	cbnz	r2, 83b78 <__udivmoddi4+0xf8>
   83b72:	2701      	movs	r7, #1
   83b74:	fbb7 f7f2 	udiv	r7, r7, r2
   83b78:	fab7 fe87 	clz	lr, r7
   83b7c:	f1be 0f00 	cmp.w	lr, #0
   83b80:	d135      	bne.n	83bee <__udivmoddi4+0x16e>
   83b82:	2101      	movs	r1, #1
   83b84:	1bf6      	subs	r6, r6, r7
   83b86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83b8a:	fa1f f887 	uxth.w	r8, r7
   83b8e:	fbb6 f2fc 	udiv	r2, r6, ip
   83b92:	fb0c 6612 	mls	r6, ip, r2, r6
   83b96:	fb08 f002 	mul.w	r0, r8, r2
   83b9a:	0c23      	lsrs	r3, r4, #16
   83b9c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83ba0:	42b0      	cmp	r0, r6
   83ba2:	d907      	bls.n	83bb4 <__udivmoddi4+0x134>
   83ba4:	19f6      	adds	r6, r6, r7
   83ba6:	f102 33ff 	add.w	r3, r2, #4294967295
   83baa:	d202      	bcs.n	83bb2 <__udivmoddi4+0x132>
   83bac:	42b0      	cmp	r0, r6
   83bae:	f200 80d2 	bhi.w	83d56 <__udivmoddi4+0x2d6>
   83bb2:	461a      	mov	r2, r3
   83bb4:	1a36      	subs	r6, r6, r0
   83bb6:	fbb6 f0fc 	udiv	r0, r6, ip
   83bba:	fb0c 6610 	mls	r6, ip, r0, r6
   83bbe:	fb08 f800 	mul.w	r8, r8, r0
   83bc2:	b2a3      	uxth	r3, r4
   83bc4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83bc8:	45a0      	cmp	r8, r4
   83bca:	d907      	bls.n	83bdc <__udivmoddi4+0x15c>
   83bcc:	19e4      	adds	r4, r4, r7
   83bce:	f100 33ff 	add.w	r3, r0, #4294967295
   83bd2:	d202      	bcs.n	83bda <__udivmoddi4+0x15a>
   83bd4:	45a0      	cmp	r8, r4
   83bd6:	f200 80b9 	bhi.w	83d4c <__udivmoddi4+0x2cc>
   83bda:	4618      	mov	r0, r3
   83bdc:	eba4 0408 	sub.w	r4, r4, r8
   83be0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83be4:	e79c      	b.n	83b20 <__udivmoddi4+0xa0>
   83be6:	4629      	mov	r1, r5
   83be8:	4628      	mov	r0, r5
   83bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83bee:	fa07 f70e 	lsl.w	r7, r7, lr
   83bf2:	f1ce 0320 	rsb	r3, lr, #32
   83bf6:	fa26 f203 	lsr.w	r2, r6, r3
   83bfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83bfe:	fbb2 f1fc 	udiv	r1, r2, ip
   83c02:	fa1f f887 	uxth.w	r8, r7
   83c06:	fb0c 2211 	mls	r2, ip, r1, r2
   83c0a:	fa06 f60e 	lsl.w	r6, r6, lr
   83c0e:	fa20 f303 	lsr.w	r3, r0, r3
   83c12:	fb01 f908 	mul.w	r9, r1, r8
   83c16:	4333      	orrs	r3, r6
   83c18:	0c1e      	lsrs	r6, r3, #16
   83c1a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83c1e:	45b1      	cmp	r9, r6
   83c20:	fa00 f40e 	lsl.w	r4, r0, lr
   83c24:	d909      	bls.n	83c3a <__udivmoddi4+0x1ba>
   83c26:	19f6      	adds	r6, r6, r7
   83c28:	f101 32ff 	add.w	r2, r1, #4294967295
   83c2c:	f080 808c 	bcs.w	83d48 <__udivmoddi4+0x2c8>
   83c30:	45b1      	cmp	r9, r6
   83c32:	f240 8089 	bls.w	83d48 <__udivmoddi4+0x2c8>
   83c36:	3902      	subs	r1, #2
   83c38:	443e      	add	r6, r7
   83c3a:	eba6 0609 	sub.w	r6, r6, r9
   83c3e:	fbb6 f0fc 	udiv	r0, r6, ip
   83c42:	fb0c 6210 	mls	r2, ip, r0, r6
   83c46:	fb00 f908 	mul.w	r9, r0, r8
   83c4a:	b29e      	uxth	r6, r3
   83c4c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83c50:	45b1      	cmp	r9, r6
   83c52:	d907      	bls.n	83c64 <__udivmoddi4+0x1e4>
   83c54:	19f6      	adds	r6, r6, r7
   83c56:	f100 33ff 	add.w	r3, r0, #4294967295
   83c5a:	d271      	bcs.n	83d40 <__udivmoddi4+0x2c0>
   83c5c:	45b1      	cmp	r9, r6
   83c5e:	d96f      	bls.n	83d40 <__udivmoddi4+0x2c0>
   83c60:	3802      	subs	r0, #2
   83c62:	443e      	add	r6, r7
   83c64:	eba6 0609 	sub.w	r6, r6, r9
   83c68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83c6c:	e78f      	b.n	83b8e <__udivmoddi4+0x10e>
   83c6e:	f1c1 0720 	rsb	r7, r1, #32
   83c72:	fa22 f807 	lsr.w	r8, r2, r7
   83c76:	408b      	lsls	r3, r1
   83c78:	ea48 0303 	orr.w	r3, r8, r3
   83c7c:	fa26 f407 	lsr.w	r4, r6, r7
   83c80:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83c84:	fbb4 f9fe 	udiv	r9, r4, lr
   83c88:	fa1f fc83 	uxth.w	ip, r3
   83c8c:	fb0e 4419 	mls	r4, lr, r9, r4
   83c90:	408e      	lsls	r6, r1
   83c92:	fa20 f807 	lsr.w	r8, r0, r7
   83c96:	fb09 fa0c 	mul.w	sl, r9, ip
   83c9a:	ea48 0806 	orr.w	r8, r8, r6
   83c9e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83ca2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83ca6:	45a2      	cmp	sl, r4
   83ca8:	fa02 f201 	lsl.w	r2, r2, r1
   83cac:	fa00 f601 	lsl.w	r6, r0, r1
   83cb0:	d908      	bls.n	83cc4 <__udivmoddi4+0x244>
   83cb2:	18e4      	adds	r4, r4, r3
   83cb4:	f109 30ff 	add.w	r0, r9, #4294967295
   83cb8:	d244      	bcs.n	83d44 <__udivmoddi4+0x2c4>
   83cba:	45a2      	cmp	sl, r4
   83cbc:	d942      	bls.n	83d44 <__udivmoddi4+0x2c4>
   83cbe:	f1a9 0902 	sub.w	r9, r9, #2
   83cc2:	441c      	add	r4, r3
   83cc4:	eba4 040a 	sub.w	r4, r4, sl
   83cc8:	fbb4 f0fe 	udiv	r0, r4, lr
   83ccc:	fb0e 4410 	mls	r4, lr, r0, r4
   83cd0:	fb00 fc0c 	mul.w	ip, r0, ip
   83cd4:	fa1f f888 	uxth.w	r8, r8
   83cd8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83cdc:	45a4      	cmp	ip, r4
   83cde:	d907      	bls.n	83cf0 <__udivmoddi4+0x270>
   83ce0:	18e4      	adds	r4, r4, r3
   83ce2:	f100 3eff 	add.w	lr, r0, #4294967295
   83ce6:	d229      	bcs.n	83d3c <__udivmoddi4+0x2bc>
   83ce8:	45a4      	cmp	ip, r4
   83cea:	d927      	bls.n	83d3c <__udivmoddi4+0x2bc>
   83cec:	3802      	subs	r0, #2
   83cee:	441c      	add	r4, r3
   83cf0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83cf4:	fba0 8902 	umull	r8, r9, r0, r2
   83cf8:	eba4 0c0c 	sub.w	ip, r4, ip
   83cfc:	45cc      	cmp	ip, r9
   83cfe:	46c2      	mov	sl, r8
   83d00:	46ce      	mov	lr, r9
   83d02:	d315      	bcc.n	83d30 <__udivmoddi4+0x2b0>
   83d04:	d012      	beq.n	83d2c <__udivmoddi4+0x2ac>
   83d06:	b155      	cbz	r5, 83d1e <__udivmoddi4+0x29e>
   83d08:	ebb6 030a 	subs.w	r3, r6, sl
   83d0c:	eb6c 060e 	sbc.w	r6, ip, lr
   83d10:	fa06 f707 	lsl.w	r7, r6, r7
   83d14:	40cb      	lsrs	r3, r1
   83d16:	431f      	orrs	r7, r3
   83d18:	40ce      	lsrs	r6, r1
   83d1a:	602f      	str	r7, [r5, #0]
   83d1c:	606e      	str	r6, [r5, #4]
   83d1e:	2100      	movs	r1, #0
   83d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d24:	4610      	mov	r0, r2
   83d26:	e6f7      	b.n	83b18 <__udivmoddi4+0x98>
   83d28:	4689      	mov	r9, r1
   83d2a:	e6de      	b.n	83aea <__udivmoddi4+0x6a>
   83d2c:	4546      	cmp	r6, r8
   83d2e:	d2ea      	bcs.n	83d06 <__udivmoddi4+0x286>
   83d30:	ebb8 0a02 	subs.w	sl, r8, r2
   83d34:	eb69 0e03 	sbc.w	lr, r9, r3
   83d38:	3801      	subs	r0, #1
   83d3a:	e7e4      	b.n	83d06 <__udivmoddi4+0x286>
   83d3c:	4670      	mov	r0, lr
   83d3e:	e7d7      	b.n	83cf0 <__udivmoddi4+0x270>
   83d40:	4618      	mov	r0, r3
   83d42:	e78f      	b.n	83c64 <__udivmoddi4+0x1e4>
   83d44:	4681      	mov	r9, r0
   83d46:	e7bd      	b.n	83cc4 <__udivmoddi4+0x244>
   83d48:	4611      	mov	r1, r2
   83d4a:	e776      	b.n	83c3a <__udivmoddi4+0x1ba>
   83d4c:	3802      	subs	r0, #2
   83d4e:	443c      	add	r4, r7
   83d50:	e744      	b.n	83bdc <__udivmoddi4+0x15c>
   83d52:	4608      	mov	r0, r1
   83d54:	e706      	b.n	83b64 <__udivmoddi4+0xe4>
   83d56:	3a02      	subs	r2, #2
   83d58:	443e      	add	r6, r7
   83d5a:	e72b      	b.n	83bb4 <__udivmoddi4+0x134>

00083d5c <__aeabi_idiv0>:
   83d5c:	4770      	bx	lr
   83d5e:	bf00      	nop
   83d60:	736e6f43 	.word	0x736e6f43
   83d64:	20656c6f 	.word	0x20656c6f
   83d68:	64616572 	.word	0x64616572
   83d6c:	00000a79 	.word	0x00000a79
   83d70:	3d3d3d3d 	.word	0x3d3d3d3d
   83d74:	3d3d3d3d 	.word	0x3d3d3d3d
   83d78:	3d3d3d3d 	.word	0x3d3d3d3d
   83d7c:	00000a3d 	.word	0x00000a3d
   83d80:	6c6c6548 	.word	0x6c6c6548
   83d84:	57202c6f 	.word	0x57202c6f
   83d88:	646c726f 	.word	0x646c726f
   83d8c:	00000a21 	.word	0x00000a21

00083d90 <_global_impure_ptr>:
   83d90:	20070180 33323130 37363534 42413938     ... 0123456789AB
   83da0:	46454443 00000000 33323130 37363534     CDEF....01234567
   83db0:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83dc0:	0000296c                                l)..

00083dc4 <blanks.7202>:
   83dc4:	20202020 20202020 20202020 20202020                     

00083dd4 <zeroes.7203>:
   83dd4:	30303030 30303030 30303030 30303030     0000000000000000
   83de4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00083df4 <_ctype_>:
   83df4:	20202000 20202020 28282020 20282828     .         ((((( 
   83e04:	20202020 20202020 20202020 20202020                     
   83e14:	10108820 10101010 10101010 10101010      ...............
   83e24:	04040410 04040404 10040404 10101010     ................
   83e34:	41411010 41414141 01010101 01010101     ..AAAAAA........
   83e44:	01010101 01010101 01010101 10101010     ................
   83e54:	42421010 42424242 02020202 02020202     ..BBBBBB........
   83e64:	02020202 02020202 02020202 10101010     ................
   83e74:	00000020 00000000 00000000 00000000      ...............
	...

00083ef8 <_init>:
   83ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83efa:	bf00      	nop
   83efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83efe:	bc08      	pop	{r3}
   83f00:	469e      	mov	lr, r3
   83f02:	4770      	bx	lr

00083f04 <__init_array_start>:
   83f04:	000821ed 	.word	0x000821ed

00083f08 <__frame_dummy_init_array_entry>:
   83f08:	00080119                                ....

00083f0c <_fini>:
   83f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f0e:	bf00      	nop
   83f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83f12:	bc08      	pop	{r3}
   83f14:	469e      	mov	lr, r3
   83f16:	4770      	bx	lr

00083f18 <__fini_array_start>:
   83f18:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070174 	.word	0x20070174

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <xNextTaskUnblockTime>:
2007012c:	ffffffff                                ....

20070130 <pin_table>:
20070130:	5c390908 5758591d 675d5556 00003b68     ..9\.YXWVU]gh;..
20070140:	00000000 0e3a0000 6261600f 07696663     ......:..`abcfi.
20070150:	4342416a 47464544 14134948 50515253     jABCDEFGHI..SRQP
20070160:	4c4d4e4f 18102e35 04061617 32310203     ONML5.........12
20070170:	00013433                                         34

20070172 <g_interrupt_enabled>:
20070172:	09000001                                         ..

20070174 <SystemCoreClock>:
20070174:	003d0900                                ..=.

20070178 <_impure_ptr>:
20070178:	20070180 00000000                       ... ....

20070180 <impure_data>:
20070180:	00000000 2007046c 200704d4 2007053c     ....l.. ... <.. 
	...
20070228:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070238:	0005deec 0000000b 00000000 00000000     ................
	...

200705a8 <__global_locale>:
200705a8:	00000043 00000000 00000000 00000000     C...............
	...
200705c8:	00000043 00000000 00000000 00000000     C...............
	...
200705e8:	00000043 00000000 00000000 00000000     C...............
	...
20070608:	00000043 00000000 00000000 00000000     C...............
	...
20070628:	00000043 00000000 00000000 00000000     C...............
	...
20070648:	00000043 00000000 00000000 00000000     C...............
	...
20070668:	00000043 00000000 00000000 00000000     C...............
	...
20070688:	00083819 00083175 00000000 00083df4     .8..u1.......=..
20070698:	00083df0 00083da4 00083da4 00083da4     .=...=...=...=..
200706a8:	00083da4 00083da4 00083da4 00083da4     .=...=...=...=..
200706b8:	00083da4 00083da4 ffffffff ffffffff     .=...=..........
200706c8:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706f0:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070714 <__malloc_av_>:
	...
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 
200709cc:	200709c4 200709c4 200709cc 200709cc     ... ... ... ... 
200709dc:	200709d4 200709d4 200709dc 200709dc     ... ... ... ... 
200709ec:	200709e4 200709e4 200709ec 200709ec     ... ... ... ... 
200709fc:	200709f4 200709f4 200709fc 200709fc     ... ... ... ... 
20070a0c:	20070a04 20070a04 20070a0c 20070a0c     ... ... ... ... 
20070a1c:	20070a14 20070a14 20070a1c 20070a1c     ... ... ... ... 
20070a2c:	20070a24 20070a24 20070a2c 20070a2c     $.. $.. ,.. ,.. 
20070a3c:	20070a34 20070a34 20070a3c 20070a3c     4.. 4.. <.. <.. 
20070a4c:	20070a44 20070a44 20070a4c 20070a4c     D.. D.. L.. L.. 
20070a5c:	20070a54 20070a54 20070a5c 20070a5c     T.. T.. \.. \.. 
20070a6c:	20070a64 20070a64 20070a6c 20070a6c     d.. d.. l.. l.. 
20070a7c:	20070a74 20070a74 20070a7c 20070a7c     t.. t.. |.. |.. 
20070a8c:	20070a84 20070a84 20070a8c 20070a8c     ... ... ... ... 
20070a9c:	20070a94 20070a94 20070a9c 20070a9c     ... ... ... ... 
20070aac:	20070aa4 20070aa4 20070aac 20070aac     ... ... ... ... 
20070abc:	20070ab4 20070ab4 20070abc 20070abc     ... ... ... ... 
20070acc:	20070ac4 20070ac4 20070acc 20070acc     ... ... ... ... 
20070adc:	20070ad4 20070ad4 20070adc 20070adc     ... ... ... ... 
20070aec:	20070ae4 20070ae4 20070aec 20070aec     ... ... ... ... 
20070afc:	20070af4 20070af4 20070afc 20070afc     ... ... ... ... 
20070b0c:	20070b04 20070b04 20070b0c 20070b0c     ... ... ... ... 

20070b1c <__malloc_sbrk_base>:
20070b1c:	ffffffff                                ....

20070b20 <__malloc_trim_threshold>:
20070b20:	00020000                                ....
